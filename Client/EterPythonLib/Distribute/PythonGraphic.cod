; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\Distribute\PythonGraphic.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_isScreenShotKey@@3_NA			; g_isScreenShotKey
_BSS	SEGMENT
?g_isScreenShotKey@@3_NA DB 01H DUP (?)			; g_isScreenShotKey
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ	; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
PUBLIC	??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z	; CSingleton<CPythonGraphic>::`scalar deleting destructor'
PUBLIC	??0CPythonGraphic@@QAE@XZ			; CPythonGraphic::CPythonGraphic
PUBLIC	??1CPythonGraphic@@UAE@XZ			; CPythonGraphic::~CPythonGraphic
PUBLIC	?Destroy@CPythonGraphic@@QAEXXZ			; CPythonGraphic::Destroy
PUBLIC	?PushState@CPythonGraphic@@QAEXXZ		; CPythonGraphic::PushState
PUBLIC	?PopState@CPythonGraphic@@QAEXXZ		; CPythonGraphic::PopState
PUBLIC	?GetD3D@CPythonGraphic@@QAEPAUIDirect3D9@@XZ	; CPythonGraphic::GetD3D
PUBLIC	?GetOrthoDepth@CPythonGraphic@@QAEMXZ		; CPythonGraphic::GetOrthoDepth
PUBLIC	?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ	; CPythonGraphic::SetInterfaceRenderState
PUBLIC	?SetGameRenderState@CPythonGraphic@@QAEXXZ	; CPythonGraphic::SetGameRenderState
PUBLIC	?SetCursorPosition@CPythonGraphic@@QAEXHH@Z	; CPythonGraphic::SetCursorPosition
PUBLIC	?SetOmniLight@CPythonGraphic@@QAEXUD3DXVECTOR3@@@Z ; CPythonGraphic::SetOmniLight
PUBLIC	?SetViewport@CPythonGraphic@@QAEXMMMM@Z		; CPythonGraphic::SetViewport
PUBLIC	?RestoreViewport@CPythonGraphic@@QAEXXZ		; CPythonGraphic::RestoreViewport
PUBLIC	?GenerateColor@CPythonGraphic@@QAEJMMMM@Z	; CPythonGraphic::GenerateColor
PUBLIC	?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderDownButton
PUBLIC	?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderUpButton
PUBLIC	?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z ; CPythonGraphic::RenderImage
PUBLIC	?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z ; CPythonGraphic::RenderAlphaImage
PUBLIC	?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z	; CPythonGraphic::RenderCoolTimeBox
PUBLIC	?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z	; CPythonGraphic::SaveJPEG
PUBLIC	?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z	; CPythonGraphic::SaveScreenShot
PUBLIC	?GetAvailableMemory@CPythonGraphic@@QAEKXZ	; CPythonGraphic::GetAvailableMemory
PUBLIC	?SetGamma@CPythonGraphic@@QAEXM@Z		; CPythonGraphic::SetGamma
PUBLIC	??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
PUBLIC	?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
PUBLIC	?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
PUBLIC	??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
PUBLIC	??_GCPythonGraphic@@UAEPAXI@Z			; CPythonGraphic::`scalar deleting destructor'
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GenScreenShotTag@@YAXPBDKPADI@Z		; GenScreenShotTag
PUBLIC	??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
PUBLIC	?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
PUBLIC	??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
PUBLIC	??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z ; std::_Zero_range<CPythonGraphic::SState * *>
PUBLIC	??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>
PUBLIC	??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
PUBLIC	??_ECPythonGraphic@@W3AEPAXI@Z			; [thunk]:CPythonGraphic::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
PUBLIC	??_7?$CSingleton@VCPythonGraphic@@@@6B@		; CSingleton<CPythonGraphic>::`vftable'
PUBLIC	??_7CPythonGraphic@@6BCScreen@@@		; CPythonGraphic::`vftable'
PUBLIC	??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CSingleton@VCPythonGraphic@@@@6B@	; CSingleton<CPythonGraphic>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8	; CSingleton<CPythonGraphic> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCPythonGraphic@@@@8		; CSingleton<CPythonGraphic>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCPythonGraphic@@@@8		; CSingleton<CPythonGraphic>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8	; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@ ; `string'
PUBLIC	??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@ ; `string'
PUBLIC	??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@ ; `string'
PUBLIC	??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@ ; `string'
PUBLIC	??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@ ; `string'
PUBLIC	??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@ ; `string'
PUBLIC	??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@ ; `string'
PUBLIC	??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@	; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4CPythonGraphic@@6BCScreen@@@		; CPythonGraphic::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPythonGraphic@@@8			; CPythonGraphic `RTTI Type Descriptor'
PUBLIC	??_R3CPythonGraphic@@8				; CPythonGraphic::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPythonGraphic@@8				; CPythonGraphic::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPythonGraphic@@8			; CPythonGraphic::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8	; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41000000
PUBLIC	__real@437f0000
PUBLIC	__xmm@000000003ba3d70a000000003f800000
PUBLIC	__xmm@3f8000003dcccccd3dcccccd3dcccccd
PUBLIC	__xmm@3f8000003e99999a3e99999a3e99999a
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fputc:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_fwrite:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_strchr:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?SetOrtho2D@CGraphicBase@@QAEXMMM@Z:PROC	; CGraphicBase::SetOrtho2D
EXTRN	?GetColor@CGraphicBase@@QAEKMMMM@Z:PROC		; CGraphicBase::GetColor
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ:PROC	; CGraphicBase::UpdatePipeLineMatrix
EXTRN	?SetTextureStage@CGraphicTexture@@QBEXH@Z:PROC	; CGraphicTexture::SetTextureStage
EXTRN	?GetWidth@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetWidth
EXTRN	?GetHeight@CGraphicImageInstance@@QAEHXZ:PROC	; CGraphicImageInstance::GetHeight
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderLine2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderLine2d
EXTRN	?RenderBox2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBox2d
EXTRN	?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z:PROC	; CScreen::RenderTextureBox
EXTRN	?SetBlendOperation@CScreen@@QAEXXZ:PROC		; CScreen::SetBlendOperation
EXTRN	?SetDiffuseColor@CScreen@@QAEXK@Z:PROC		; CScreen::SetDiffuseColor
EXTRN	?SetCursorPosition@CScreen@@QAEXHHHH@Z:PROC	; CScreen::SetCursorPosition
EXTRN	??0CCullingManager@@QAE@XZ:PROC			; CCullingManager::CCullingManager
EXTRN	??1CCullingManager@@UAE@XZ:PROC			; CCullingManager::~CCullingManager
EXTRN	??_E?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z:PROC ; CSingleton<CPythonGraphic>::`vector deleting destructor'
EXTRN	??_ECPythonGraphic@@UAEPAXI@Z:PROC		; CPythonGraphic::`vector deleting destructor'
EXTRN	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z:PROC ; CStateManager::SetMaterial
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z:PROC ; CStateManager::SetSamplerState
EXTRN	?SetFVF@CStateManager@@QAEXK@Z:PROC		; CStateManager::SetFVF
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?jpeg_save@@YAHPAEHHHPBD@Z:PROC			; jpeg_save
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matProj
EXTRN	?ms_iWidth@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iWidth
EXTRN	?ms_iHeight@CGraphicBase@@1HA:DWORD		; CGraphicBase::ms_iHeight
EXTRN	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D9@@A:DWORD	; CGraphicBase::ms_lpd3d
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_pntVS@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_pntVS
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A DD 01H DUP (?) ; CSingleton<CPythonGraphic>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003e99999a3e99999a3e99999a
CONST	SEGMENT
__xmm@3f8000003e99999a3e99999a3e99999a DB 09aH, 099H, 099H, '>', 09aH, 099H
	DB	099H, '>', 09aH, 099H, 099H, '>', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003dcccccd3dcccccd3dcccccd
CONST	SEGMENT
__xmm@3f8000003dcccccd3dcccccd3dcccccd DB 0cdH, 0ccH, 0ccH, '=', 0cdH, 0ccH
	DB	0ccH, '=', 0cdH, 0ccH, 0ccH, '=', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@000000003ba3d70a000000003f800000
CONST	SEGMENT
__xmm@000000003ba3d70a000000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 00H
	DB	00H, 0aH, 0d7H, 0a3H, ';', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
rdata$r	SEGMENT
??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ DD 00H ; CPythonGraphic::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCPythonGraphic@@@8
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPythonGraphic@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPythonGraphic@@8 DD FLAT:??_R0?AVCPythonGraphic@@@8 ; CPythonGraphic::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R2CPythonGraphic@@8
rdata$r	SEGMENT
??_R2CPythonGraphic@@8 DD FLAT:??_R1A@?0A@EA@CPythonGraphic@@8 ; CPythonGraphic::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CPythonGraphic@@8
rdata$r	SEGMENT
??_R3CPythonGraphic@@8 DD 00H				; CPythonGraphic::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPythonGraphic@@@8
data$rs	SEGMENT
??_R0?AVCPythonGraphic@@@8 DD FLAT:??_7type_info@@6B@	; CPythonGraphic `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPythonGraphic@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPythonGraphic@@6BCScreen@@@
rdata$r	SEGMENT
??_R4CPythonGraphic@@6BCScreen@@@ DD 00H		; CPythonGraphic::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPythonGraphic@@@8
	DD	FLAT:??_R3CPythonGraphic@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@
CONST	SEGMENT
??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@ DB 'Python Graphic Clear', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A
_DATA	SEGMENT
?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A DD 0bf800000r ; -1 ; `CPythonGraphic::RenderCoolTimeBox'::`2'::s_v2BoxPos
	DD	0bf800000r			; -1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	0bf800000r			; -1
	DD	000000000r			; 0
	DD	0bf800000r			; -1
_DATA	ENDS
;	COMDAT ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
_DATA	SEGMENT
?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A DD 000000000r ; 0 ; `CPythonGraphic::RenderCoolTimeBox'::`2'::color
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
_DATA	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@
CONST	SEGMENT
??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@ DB 'Fai'
	DB	'led to save JPEG file. (%s, %d, %d)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@
CONST	SEGMENT
??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@ DB 'Failed to allo'
	DB	'cate screenshot buffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@
CONST	SEGMENT
??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@ DB 'Failed'
	DB	' to lock the surface (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@
CONST	SEGMENT
??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@ DB 'Unsupport'
	DB	'ed BackBuffer Format(%d). Please contact Metin 2 Administrato'
	DB	'r.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@
CONST	SEGMENT
??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@ DB 'Failed'
	DB	' to get surface desc (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@
CONST	SEGMENT
??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@ DB 'Failed'
	DB	' to get back buffer (0x%08x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@
CONST	SEGMENT
??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@ DB 'YMIR_METIN2:%s:0x%'
	DB	'.8x', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@
CONST	SEGMENT
??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@ DB 'CPythonG'
	DB	'raphic::SetViewport(%d, %d, %d, %d) - Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCPythonGraphic@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCPythonGraphic@@@@8 ; CSingleton<CPythonGraphic>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCPythonGraphic@@@@8 DD 00H		; CSingleton<CPythonGraphic>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CPythonGraphic> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCPythonGraphic@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCPythonGraphic@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCPythonGraphic@@@@6B@ DD 00H		; CSingleton<CPythonGraphic>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCPythonGraphic@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCPythonGraphic@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
CONST	SEGMENT
??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ DD FLAT:??_R4CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@ ; CPythonGraphic::`vftable'
	DD	FLAT:??_ECPythonGraphic@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CPythonGraphic@@6BCScreen@@@
CONST	SEGMENT
??_7CPythonGraphic@@6BCScreen@@@ DD FLAT:??_R4CPythonGraphic@@6BCScreen@@@ ; CPythonGraphic::`vftable'
	DD	FLAT:??_ECPythonGraphic@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCPythonGraphic@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCPythonGraphic@@@@6B@ DD FLAT:??_R4?$CSingleton@VCPythonGraphic@@@@6B@ ; CSingleton<CPythonGraphic>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z$1
__ehfuncinfo$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CPythonGraphic@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CPythonGraphic@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CPythonGraphic@@QAE@XZ$3
__ehfuncinfo$??0CPythonGraphic@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CPythonGraphic@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECPythonGraphic@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECPythonGraphic@@W3AEPAXI@Z PROC			; [thunk]:CPythonGraphic::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECPythonGraphic@@UAEPAXI@Z
??_ECPythonGraphic@@W3AEPAXI@Z ENDP			; [thunk]:CPythonGraphic::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z PROC ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ENDP ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z PROC ; std::_Zero_range<CPythonGraphic::SState * *>, COMDAT

; 1878 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1879 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1880 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1881 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1882 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z ENDP ; std::_Zero_range<CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>, COMDAT

; 1910 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1911 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1912 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1913 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1914 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1915 :     } else {
; 1916 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1917 :         for (; 0 < _Count; --_Count) {
; 1918 :             _Backout._Emplace_back();
; 1919 :         }
; 1920 : 
; 1921 :         return _Backout._Release();
; 1922 :     }
; 1923 : }

  00012	5d		 pop	 ebp

; 1911 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1912 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1913 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1914 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAUSState@CPythonGraphic@@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0@Z ; std::_Zero_range<CPythonGraphic::SState * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z PROC ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>, COMDAT

; 1776 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1777 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1778 :     _Adl_verify_range(_First, _Last);
; 1779 :     auto _UFirst      = _Get_unwrapped(_First);
; 1780 :     const auto _ULast = _Get_unwrapped(_Last);
; 1781 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1782 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1783 :     return _Dest;
; 1784 : }

  00003	5d		 pop	 ebp

; 1763 :             return _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@00@Z ; std::_Copy_memmove<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ENDP ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv589 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv606 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00015	2b d7		 sub	 edx, edi

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b cf		 sub	 ecx, edi
  0001e	c1 fa 02	 sar	 edx, 2
  00021	8b c2		 mov	 eax, edx
  00023	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00026	03 c2		 add	 eax, edx
  00028	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	f7 e9		 imul	 ecx
  00032	c1 fa 02	 sar	 edx, 2
  00035	8b c2		 mov	 eax, edx
  00037	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003a	03 c2		 add	 eax, edx
  0003c	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0003f	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00044	0f 84 3f 01 00
	00		 je	 $LN96@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0004d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00050	2b cf		 sub	 ecx, edi
  00052	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00057	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00059	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	c1 fa 02	 sar	 edx, 2
  00061	8b ca		 mov	 ecx, edx
  00063	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00066	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00068	8b d1		 mov	 edx, ecx
  0006a	d1 ea		 shr	 edx, 1
  0006c	2b c2		 sub	 eax, edx
  0006e	3b c8		 cmp	 ecx, eax
  00070	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00072	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00078	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	8b f8		 mov	 edi, eax
  00085	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00087	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0008a	8b ce		 mov	 ecx, esi
  0008c	3b c6		 cmp	 eax, esi
  0008e	0f 43 c8	 cmovae	 ecx, eax
  00091	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  00097	0f 87 f1 00 00
	00		 ja	 $LN97@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0009d	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000a0	c1 e0 03	 shl	 eax, 3
  000a3	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ab	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b3	83 c4 04	 add	 esp, 4
  000b6	8b f8		 mov	 edi, eax
  000b8	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c4	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c7	8b f8		 mov	 edi, eax
  000c9	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000cb	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cd	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000d0	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000d3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d6	8d 34 c7	 lea	 esi, DWORD PTR [edi+eax*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000dc	89 75 f8	 mov	 DWORD PTR tv589[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000df	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e2	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000e5	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  000ea	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ef	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000f2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f4	3b d1		 cmp	 edx, ecx
  000f6	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f8	8b f7		 mov	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000fa	eb 14		 jmp	 SHORT $LN79@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000fc	57		 push	 edi
  000fd	52		 push	 edx
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>
  00104	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00107	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0010d	83 c6 18	 add	 esi, 24			; 00000018H
$LN79@Emplace_re:
  00110	56		 push	 esi
  00111	51		 push	 ecx
  00112	50		 push	 eax
  00113	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPDTVertex@@PAU1@@std@@YAPAUSPDTVertex@@PAU1@00@Z ; std::_Copy_memmove<SPDTVertex *,SPDTVertex *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00118	8b 33		 mov	 esi, DWORD PTR [ebx]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0011a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0011d	85 f6		 test	 esi, esi
  0011f	74 40		 je	 SHORT $LN39@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00121	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00124	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00129	2b ce		 sub	 ecx, esi
  0012b	f7 e9		 imul	 ecx
  0012d	c1 fa 02	 sar	 edx, 2
  00130	8b c2		 mov	 eax, edx
  00132	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00135	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00137	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0013a	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0013d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00143	72 12		 jb	 SHORT $LN49@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00145	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00148	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0014b	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0014d	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00150	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00153	77 2f		 ja	 SHORT $LN46@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00155	8b f2		 mov	 esi, edx
$LN49@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00157	51		 push	 ecx
  00158	56		 push	 esi
  00159	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015e	83 c4 08	 add	 esp, 8
$LN39@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00161	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00164	40		 inc	 eax
  00165	89 3b		 mov	 DWORD PTR [ebx], edi
  00167	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0016a	8b 45 f8	 mov	 eax, DWORD PTR tv589[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0016d	8d 0c cf	 lea	 ecx, DWORD PTR [edi+ecx*8]
  00170	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00173	8b 4d fc	 mov	 ecx, DWORD PTR tv606[ebp]
  00176	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00178	5f		 pop	 edi
  00179	5e		 pop	 esi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  0017a	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0017d	5b		 pop	 ebx

; 921  :     }

  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 08 00	 ret	 8
$LN46@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00184	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00189	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0018e	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  00193	cc		 int	 3
??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@CAXXZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ PROC ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 54		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	c1 fa 02	 sar	 edx, 2
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00023	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002c	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00031	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00034	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003e	8b f2		 mov	 esi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00050	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00057	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005e	5f		 pop	 edi

; 835  :     }

  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00066	cc		 int	 3
??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GenScreenShotTag@@YAXPBDKPADI@Z
_TEXT	SEGMENT
_src$ = 8						; size = 4
_crc32$ = 12						; size = 4
_leaf$ = 16						; size = 4
_leafLen$ = 20						; size = 4
?GenScreenShotTag@@YAXPBDKPADI@Z PROC			; GenScreenShotTag, COMDAT

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 167  : 	const char* p = src;

  00004	8b 75 08	 mov	 esi, DWORD PTR _src$[ebp]

; 168  : 	const char* n = p;
; 169  : 	while (n = strchr(p, '\\'))

  00007	6a 5c		 push	 92			; 0000005cH
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _strchr
  0000f	83 c4 08	 add	 esp, 8
  00012	85 c0		 test	 eax, eax
  00014	74 12		 je	 SHORT $LN3@GenScreenS
$LL2@GenScreenS:

; 170  : 		p = n + 1;

  00016	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  00019	6a 5c		 push	 92			; 0000005cH
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 _strchr
  00021	83 c4 08	 add	 esp, 8
  00024	85 c0		 test	 eax, eax
  00026	75 ee		 jne	 SHORT $LL2@GenScreenS
$LN3@GenScreenS:

; 171  : 
; 172  : 	_snprintf(leaf, leafLen, "YMIR_METIN2:%s:0x%.8x", p, crc32);

  00028	ff 75 0c	 push	 DWORD PTR _crc32$[ebp]
  0002b	56		 push	 esi
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HJKBJNEI@YMIR_METIN2?3?$CFs?30x?$CF?48x@
  00031	ff 75 14	 push	 DWORD PTR _leafLen$[ebp]
  00034	ff 75 10	 push	 DWORD PTR _leaf$[ebp]
  00037	e8 00 00 00 00	 call	 __snprintf
  0003c	83 c4 14	 add	 esp, 20			; 00000014H
  0003f	5e		 pop	 esi

; 173  : }

  00040	5d		 pop	 ebp
  00041	c3		 ret	 0
?GenScreenShotTag@@YAXPBDKPADI@Z ENDP			; GenScreenShotTag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCPythonGraphic@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPythonGraphic@@UAEPAXI@Z PROC			; CPythonGraphic::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CPythonGraphic@@UAE@XZ ; CPythonGraphic::~CPythonGraphic
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 a0 00 00 00	 push	 160			; 000000a0H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCPythonGraphic@@UAEPAXI@Z ENDP			; CPythonGraphic::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ PROC ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ ENDP ; std::stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >::~stack<CPythonGraphic::SState,std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv461 = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap, COMDAT
; _this$ = ecx

; 1545 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1546 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1547 : 
; 1548 :         _Alpty _Almap(_Getal());
; 1549 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00014	85 d2		 test	 edx, edx
  00016	0f 45 c2	 cmovne	 eax, edx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Growmap:

; 1550 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b f0		 mov	 esi, eax
  00022	2b f2		 sub	 esi, edx
  00024	3b f3		 cmp	 esi, ebx
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1551 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1552 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 01	 mov	 ecx, 33554431		; 01ffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 fc 00 00
	00		 jb	 $LN44@Growmap

; 1554 :             }
; 1555 : 
; 1556 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1557 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1558 :         _Count = _Newsize - _Mapsize();
; 1559 : 
; 1560 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00043	89 4d 08	 mov	 DWORD PTR $T1[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00046	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004b	0f 87 ee 00 00
	00		 ja	 $LN50@Growmap

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00051	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00054	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00059	72 0d		 jb	 SHORT $LN19@Growmap

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00061	83 c4 04	 add	 esp, 4
  00064	8b d8		 mov	 ebx, eax
  00066	eb 13		 jmp	 SHORT $LN18@Growmap
$LN19@Growmap:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00068	85 c0		 test	 eax, eax
  0006a	74 0d		 je	 SHORT $LN20@Growmap

; 77   :         return ::operator new(_Bytes);

  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00075	8b d8		 mov	 ebx, eax
  00077	eb 02		 jmp	 SHORT $LN18@Growmap
$LN20@Growmap:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00079	33 db		 xor	 ebx, ebx
$LN18@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1564 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0007b	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007e	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00081	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00084	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  00087	c1 e0 02	 shl	 eax, 2
  0008a	89 45 fc	 mov	 DWORD PTR tv461[ebp], eax
  0008d	03 c3		 add	 eax, ebx
  0008f	50		 push	 eax
  00090	8b 45 fc	 mov	 eax, DWORD PTR tv461[ebp]
  00093	51		 push	 ecx
  00094	03 c2		 add	 eax, edx
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>
  0009c	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0009f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1565 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a2	50		 push	 eax
  000a3	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000a6	77 22		 ja	 SHORT $LN6@Growmap

; 1566 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000a8	8b 45 fc	 mov	 eax, DWORD PTR tv461[ebp]
  000ab	03 c1		 add	 eax, ecx
  000ad	50		 push	 eax
  000ae	51		 push	 ecx
  000af	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>

; 1567 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b4	8b ce		 mov	 ecx, esi
  000b6	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000b9	51		 push	 ecx
  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>

; 1568 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1569 :         } else { // increment not greater than offset of initial block

  000c0	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000c3	83 c4 14	 add	 esp, 20			; 00000014H
  000c6	8b cb		 mov	 ecx, ebx
  000c8	eb 24		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1570 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000ca	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000cd	50		 push	 eax
  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>

; 1571 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000d4	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000d7	8b 45 fc	 mov	 eax, DWORD PTR tv461[ebp]
  000da	03 c1		 add	 eax, ecx
  000dc	53		 push	 ebx
  000dd	50		 push	 eax
  000de	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAUSState@CPythonGraphic@@PAPAU12@@std@@YAPAPAUSState@CPythonGraphic@@QAPAU12@0PAPAU12@@Z ; std::uninitialized_copy<CPythonGraphic::SState * *,CPythonGraphic::SState * *>

; 1572 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000e7	8b c8		 mov	 ecx, eax
  000e9	83 c4 18	 add	 esp, 24			; 00000018H
  000ec	8b c6		 mov	 eax, esi
$LN7@Growmap:

; 1573 :         }
; 1574 : 
; 1575 :         if (_Map() != nullptr) {

  000ee	50		 push	 eax
  000ef	51		 push	 ecx
  000f0	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAUSState@CPythonGraphic@@I@std@@YAPAPAUSState@CPythonGraphic@@PAPAU12@I@Z ; std::_Uninitialized_value_construct_n_unchecked1<CPythonGraphic::SState * *,unsigned int>
  000f5	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f8	83 c4 08	 add	 esp, 8
  000fb	85 c0		 test	 eax, eax
  000fd	74 2a		 je	 SHORT $LN29@Growmap
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ff	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00102	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00105	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010b	72 12		 jb	 SHORT $LN39@Growmap

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0010d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00110	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00113	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00115	83 c0 fc	 add	 eax, -4			; fffffffcH
  00118	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011b	77 27		 ja	 SHORT $LN36@Growmap

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0011d	8b c2		 mov	 eax, edx
$LN39@Growmap:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0011f	51		 push	 ecx
  00120	50		 push	 eax
  00121	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00126	83 c4 08	 add	 esp, 8
$LN29@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1581 :         _Mapsize() += _Count;

  00129	01 77 08	 add	 DWORD PTR [edi+8], esi
  0012c	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx

; 1582 :     }

  00132	8b e5		 mov	 esp, ebp
  00134	5d		 pop	 ebp
  00135	c2 04 00	 ret	 4
$LN44@Growmap:

; 1553 :                 _Xlen(); // result too long

  00138	8b cf		 mov	 ecx, edi
  0013a	e8 00 00 00 00	 call	 ?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
$LN50@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013f	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN36@Growmap:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00144	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Growmap:
  00149	cc		 int	 3
?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen, COMDAT
; _this$ = ecx

; 1538 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@ABEXXZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ PROC ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >, COMDAT
; _this$ = ecx

; 904  :     ~deque() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1045 :         return _Mysize() == 0;

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	85 c0		 test	 eax, eax

; 1588 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN89@deque
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@deque:

; 1208 :         if (--_Mysize() == 0) {

  00010	83 c0 ff	 add	 eax, -1
  00013	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00016	75 f8		 jne	 SHORT $LL4@deque

; 1209 :             _Myoff() = 0;

  00018	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN89@deque:

; 1592 :         if (_Map() != nullptr) {

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	85 c0		 test	 eax, eax
  00024	74 53		 je	 SHORT $LN88@deque

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00026	57		 push	 edi
  00027	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0002a	85 ff		 test	 edi, edi
  0002c	74 20		 je	 SHORT $LN7@deque
  0002e	66 90		 npad	 2
$LL6@deque:

; 1594 :                 if (_Map()[--_Block]) { // free block

  00030	8b 4c b8 fc	 mov	 ecx, DWORD PTR [eax+edi*4-4]
  00034	4f		 dec	 edi
  00035	85 c9		 test	 ecx, ecx
  00037	74 11		 je	 SHORT $LN43@deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00039	68 80 00 00 00	 push	 128			; 00000080H
  0003e	51		 push	 ecx
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00044	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00047	83 c4 08	 add	 esp, 8
$LN43@deque:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  0004a	85 ff		 test	 edi, edi
  0004c	75 e2		 jne	 SHORT $LL6@deque
$LN7@deque:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00051	c1 e1 02	 shl	 ecx, 2
  00054	5f		 pop	 edi

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00055	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005b	72 12		 jb	 SHORT $LN35@deque

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00060	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00063	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00065	83 c0 fc	 add	 eax, -4			; fffffffcH
  00068	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006b	77 2f		 ja	 SHORT $LN32@deque

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006d	8b c2		 mov	 eax, edx
$LN35@deque:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN88@deque:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00079	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007b	6a 08		 push	 8
  0007d	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1603 :         _Mapsize() = 0;

  0007e	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 1604 :         _Map()     = nullptr;

  00085	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0008c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00097	83 c4 08	 add	 esp, 8
  0009a	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 908  :     }

  0009b	c3		 ret	 0
$LN32@deque:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN91@deque:
  000a1	cc		 int	 3
??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetGamma@CPythonGraphic@@QAEXM@Z
_TEXT	SEGMENT
_NewRamp$ = -1844					; size = 1536
_d3dCaps$ = -308					; size = 304
__$ArrayPad$ = -4					; size = 4
_fGammaFactor$ = 8					; size = 4
?SetGamma@CPythonGraphic@@QAEXM@Z PROC			; CPythonGraphic::SetGamma, COMDAT
; _this$ = ecx

; 133  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 07 00
	00		 sub	 esp, 1844		; 00000734H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 134  : 	D3DCAPS9		d3dCaps;
; 135  : 	D3DGAMMARAMP	NewRamp;
; 136  : 	int				ui, val;
; 137  : 	
; 138  : 	ms_lpd3dDevice->GetDeviceCaps(&d3dCaps);

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00018	8d 95 cc fe ff
	ff		 lea	 edx, DWORD PTR _d3dCaps$[ebp]
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 51 1c	 call	 DWORD PTR [ecx+28]

; 139  : 
; 140  : 	if (D3DCAPS2_FULLSCREENGAMMA != (d3dCaps.Caps2 & D3DCAPS2_FULLSCREENGAMMA))

  00025	f7 85 d8 fe ff
	ff 00 00 02 00	 test	 DWORD PTR _d3dCaps$[ebp+12], 131072 ; 00020000H
  0002f	0f 84 82 00 00
	00		 je	 $LN1@SetGamma

; 141  : 		return;
; 142  : 
; 143  : 	for (int i = 0; i < 256; ++i)

  00035	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fGammaFactor$[ebp]
  0003a	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	57		 push	 edi
  00045	bf ff 7f 00 00	 mov	 edi, 32767		; 00007fffH
  0004a	33 f6		 xor	 esi, esi
  0004c	8d 5f 01	 lea	 ebx, DWORD PTR [edi+1]
  0004f	90		 npad	 1
$LL11@SetGamma:

; 144  : 	{
; 145  : 		val	= (int) (i * fGammaFactor * 255.0f);

  00050	66 0f 6e c6	 movd	 xmm0, esi
  00054	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00057	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0005b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0005f	f3 0f 2c d0	 cvttss2si edx, xmm0

; 146  : 		ui = 0;
; 147  : 		
; 148  : 		if (val > 32767)
; 149  : 		{
; 150  : 			val = val - 32767;
; 151  : 			ui = 1;
; 152  : 		}
; 153  : 
; 154  : 		if (val > 32767)

  00063	3b d7		 cmp	 edx, edi
  00065	8d 8a 01 80 ff
	ff		 lea	 ecx, DWORD PTR [edx-32767]
  0006b	0f 4e ca	 cmovle	 ecx, edx
  0006e	3b cf		 cmp	 ecx, edi
  00070	0f 4f cf	 cmovg	 ecx, edi

; 155  : 			val = 32767;
; 156  : 		
; 157  : 		NewRamp.red[i] = (WORD) (val | (32768 * ui));

  00073	33 c0		 xor	 eax, eax
  00075	3b d7		 cmp	 edx, edi
  00077	0f 4f c3	 cmovg	 eax, ebx
  0007a	66 0b c1	 or	 ax, cx
  0007d	66 89 84 75 cc
	f8 ff ff	 mov	 WORD PTR _NewRamp$[ebp+esi*2], ax

; 158  : 		NewRamp.green[i] = (WORD) (val | (32768 * ui));

  00085	66 89 84 75 cc
	fa ff ff	 mov	 WORD PTR _NewRamp$[ebp+esi*2+512], ax

; 159  : 		NewRamp.blue[i] = (WORD) (val | (32768 * ui));

  0008d	66 89 84 75 cc
	fc ff ff	 mov	 WORD PTR _NewRamp$[ebp+esi*2+1024], ax
  00095	46		 inc	 esi
  00096	81 fe 00 01 00
	00		 cmp	 esi, 256		; 00000100H
  0009c	7c b2		 jl	 SHORT $LL11@SetGamma

; 160  : 	}
; 161  : 
; 162  : 	ms_lpd3dDevice->SetGammaRamp(0, D3DSGR_NO_CALIBRATION, &NewRamp);

  0009e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000a3	8d 95 cc f8 ff
	ff		 lea	 edx, DWORD PTR _NewRamp$[ebp]
  000a9	52		 push	 edx
  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b0	50		 push	 eax
  000b1	ff 51 54	 call	 DWORD PTR [ecx+84]
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
$LN1@SetGamma:

; 163  : }

  000b7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ba	33 cd		 xor	 ecx, ebp
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 04 00	 ret	 4
?SetGamma@CPythonGraphic@@QAEXM@Z ENDP			; CPythonGraphic::SetGamma
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GetAvailableMemory@CPythonGraphic@@QAEKXZ
_TEXT	SEGMENT
?GetAvailableMemory@CPythonGraphic@@QAEKXZ PROC		; CPythonGraphic::GetAvailableMemory, COMDAT
; _this$ = ecx

; 616  : 	return ms_lpd3dDevice->GetAvailableTextureMem();

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00005	50		 push	 eax
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	ff 51 10	 call	 DWORD PTR [ecx+16]

; 617  : }

  0000b	c3		 ret	 0
?GetAvailableMemory@CPythonGraphic@@QAEKXZ ENDP		; CPythonGraphic::GetAvailableMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z
_TEXT	SEGMENT
_lockRect$ = -204					; size = 8
_pbyBuffer$1$ = -196					; size = 4
tv783 = -192						; size = 4
_uWidth$1$ = -188					; size = 4
_imgDescLen$1$ = -184					; size = 4
_this$1$ = -184						; size = 4
_tailSize$1$ = -180					; size = 4
_uHeight$1$ = -180					; size = 4
_uColor$1$ = -176					; size = 4
_uColor$1$ = -176					; size = 4
_c_pszFileName$GSCopy$1$ = -172				; size = 4
_pbySource$1$ = -168					; size = 4
_lpSurface$ = -164					; size = 4
_stSurfaceDesc$ = -160					; size = 32
_imgDesc$1 = -128					; size = 64
_head$2 = -64						; size = 21
_exifHeader$3 = -40					; size = 35
__$ArrayPad$ = -4					; size = 4
_c_pszFileName$ = 8					; size = 4
?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z PROC		; CPythonGraphic::SaveScreenShot, COMDAT
; _this$ = ecx

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 182  : 	HRESULT hr;
; 183  : 	LPDIRECT3DSURFACE9 lpSurface;
; 184  : 	D3DSURFACE_DESC stSurfaceDesc;
; 185  : 
; 186  : 	if (FAILED(hr = ms_lpd3dDevice->GetBackBuffer(0, 0, D3DBACKBUFFER_TYPE_MONO, &lpSurface)))

  00013	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00019	53		 push	 ebx
  0001a	8b 5d 08	 mov	 ebx, DWORD PTR _c_pszFileName$[ebp]
  0001d	89 8d 48 ff ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx
  00023	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR _lpSurface$[ebp]
  00029	8b 02		 mov	 eax, DWORD PTR [edx]
  0002b	51		 push	 ecx
  0002c	6a 00		 push	 0
  0002e	6a 00		 push	 0
  00030	6a 00		 push	 0
  00032	52		 push	 edx
  00033	89 9d 54 ff ff
	ff		 mov	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp], ebx
  00039	ff 50 48	 call	 DWORD PTR [eax+72]
  0003c	85 c0		 test	 eax, eax
  0003e	79 21		 jns	 SHORT $LN21@SaveScreen

; 187  : 	{
; 188  : 		TraceError("Failed to get back buffer (0x%08x)", hr);

  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@MBNJPOAA@Failed?5to?5get?5back?5buffer?5?$CI0x?$CF0@
  00046	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0004b	83 c4 08	 add	 esp, 8

; 189  : 		return false;

  0004e	32 c0		 xor	 al, al
  00050	5b		 pop	 ebx

; 390  : 		}
; 391  : 	}
; 392  : 	return true;
; 393  : }

  00051	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00054	33 cd		 xor	 ecx, ebp
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN21@SaveScreen:

; 190  : 	}
; 191  : 
; 192  : 	if (FAILED(hr = lpSurface->GetDesc(&stSurfaceDesc)))

  00061	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  00067	8d 95 60 ff ff
	ff		 lea	 edx, DWORD PTR _stSurfaceDesc$[ebp]
  0006d	56		 push	 esi
  0006e	57		 push	 edi
  0006f	52		 push	 edx
  00070	8b 01		 mov	 eax, DWORD PTR [ecx]
  00072	51		 push	 ecx
  00073	ff 50 30	 call	 DWORD PTR [eax+48]
  00076	85 c0		 test	 eax, eax
  00078	79 08		 jns	 SHORT $LN22@SaveScreen

; 193  : 	{
; 194  : 		TraceError("Failed to get surface desc (0x%08x)", hr);

  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@NBEFCAIB@Failed?5to?5get?5surface?5desc?5?$CI0x?$CF@
  00080	eb 60		 jmp	 SHORT $LN79@SaveScreen
$LN22@SaveScreen:

; 195  : 		SAFE_RELEASE(lpSurface);
; 196  : 		return false;
; 197  : 	}
; 198  : 
; 199  : 	UINT uWidth = stSurfaceDesc.Width;
; 200  : 	UINT uHeight = stSurfaceDesc.Height;
; 201  : 
; 202  : 	switch( stSurfaceDesc.Format ) {

  00082	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _stSurfaceDesc$[ebp]
  00088	8b bd 78 ff ff
	ff		 mov	 edi, DWORD PTR _stSurfaceDesc$[ebp+24]
  0008e	8b b5 7c ff ff
	ff		 mov	 esi, DWORD PTR _stSurfaceDesc$[ebp+28]
  00094	89 bd 44 ff ff
	ff		 mov	 DWORD PTR _uWidth$1$[ebp], edi
  0009a	8d 41 e6	 lea	 eax, DWORD PTR [ecx-26]
  0009d	89 b5 4c ff ff
	ff		 mov	 DWORD PTR _uHeight$1$[ebp], esi
  000a3	83 f8 05	 cmp	 eax, 5
  000a6	77 16		 ja	 SHORT $LN2@SaveScreen
  000a8	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN72@SaveScreen[eax]
  000af	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN73@SaveScreen[eax*4]
$LN30@SaveScreen:

; 203  : 	case D3DFMT_R8G8B8 :
; 204  : 	case D3DFMT_A8R8G8B8 :
; 205  : 	case D3DFMT_X8R8G8B8 :
; 206  : 	case D3DFMT_R5G6B5 :
; 207  : 	case D3DFMT_X1R5G5B5 :
; 208  : 	case D3DFMT_A1R5G5B5 :
; 209  : 		break;
; 210  : 	case D3DFMT_A4R4G4B4 :
; 211  : 	case D3DFMT_R3G3B2 :
; 212  : 	case D3DFMT_A8R3G3B2 :
; 213  : 	case D3DFMT_X4R4G4B4 :
; 214  : 	case D3DFMT_A2B10G10R10 :
; 215  : 		TraceError("Unsupported BackBuffer Format(%d). Please contact Metin 2 Administrator.", stSurfaceDesc.Format);

  000b6	51		 push	 ecx
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@CMPHLGKC@Unsupported?5BackBuffer?5Format?$CI?$CF@
  000bc	eb 24		 jmp	 SHORT $LN79@SaveScreen
$LN2@SaveScreen:

; 216  : 		SAFE_RELEASE(lpSurface);
; 217  : 		return false;
; 218  : 	}
; 219  : 
; 220  : 	D3DLOCKED_RECT lockRect;
; 221  : 	if (FAILED(hr = lpSurface->LockRect(&lockRect, NULL, D3DLOCK_NO_DIRTY_UPDATE | D3DLOCK_READONLY | D3DLOCK_NOSYSLOCK)))

  000be	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  000c4	8d 95 34 ff ff
	ff		 lea	 edx, DWORD PTR _lockRect$[ebp]
  000ca	68 10 88 00 00	 push	 34832			; 00008810H
  000cf	6a 00		 push	 0
  000d1	52		 push	 edx
  000d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d4	51		 push	 ecx
  000d5	ff 50 34	 call	 DWORD PTR [eax+52]
  000d8	85 c0		 test	 eax, eax
  000da	79 33		 jns	 SHORT $LN36@SaveScreen

; 222  : 	{
; 223  : 		TraceError("Failed to lock the surface (0x%08x)", hr);

  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@GBOBAJOB@Failed?5to?5lock?5the?5surface?5?$CI0x?$CF@
$LN79@SaveScreen:

; 224  : 		SAFE_RELEASE(lpSurface);
; 225  : 		return false;

  000e2	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000e7	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  000ed	83 c4 08	 add	 esp, 8
  000f0	85 c9		 test	 ecx, ecx
  000f2	74 06		 je	 SHORT $LN37@SaveScreen
  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	51		 push	 ecx
  000f7	ff 50 08	 call	 DWORD PTR [eax+8]
$LN37@SaveScreen:
  000fa	5f		 pop	 edi
  000fb	5e		 pop	 esi
  000fc	32 c0		 xor	 al, al
  000fe	5b		 pop	 ebx

; 390  : 		}
; 391  : 	}
; 392  : 	return true;
; 393  : }

  000ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00102	33 cd		 xor	 ecx, ebp
  00104	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c2 04 00	 ret	 4
$LN36@SaveScreen:

; 226  : 	}
; 227  : 
; 228  : 	BYTE* pbyBuffer = new BYTE[uWidth * uHeight * 3];

  0010f	8b c6		 mov	 eax, esi
  00111	0f af c7	 imul	 eax, edi
  00114	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0011d	83 c4 04	 add	 esp, 4
  00120	89 85 3c ff ff
	ff		 mov	 DWORD PTR _pbyBuffer$1$[ebp], eax

; 229  : 	if (pbyBuffer == NULL) {

  00126	85 c0		 test	 eax, eax
  00128	75 44		 jne	 SHORT $LN38@SaveScreen

; 230  : 		lpSurface->UnlockRect();

  0012a	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00130	50		 push	 eax
  00131	8b 08		 mov	 ecx, DWORD PTR [eax]
  00133	ff 51 38	 call	 DWORD PTR [ecx+56]

; 231  : 		lpSurface->Release();

  00136	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  0013c	50		 push	 eax
  0013d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013f	ff 51 08	 call	 DWORD PTR [ecx+8]

; 232  : 		lpSurface = NULL;
; 233  : 		TraceError("Failed to allocate screenshot buffer");

  00142	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@KCPFIPM@Failed?5to?5allocate?5screenshot?5b@
  00147	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lpSurface$[ebp], 0
  00151	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00156	83 c4 04	 add	 esp, 4

; 234  : 		return false;

  00159	32 c0		 xor	 al, al
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	5b		 pop	 ebx

; 390  : 		}
; 391  : 	}
; 392  : 	return true;
; 393  : }

  0015e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00161	33 cd		 xor	 ecx, ebp
  00163	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 04 00	 ret	 4
$LN38@SaveScreen:

; 235  : 	}
; 236  : 	BYTE* pbySource = (BYTE*) lockRect.pBits;

  0016e	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _lockRect$[ebp+4]
  00174	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _pbySource$1$[ebp], ecx

; 237  : 	BYTE* pbyDestination = (BYTE*) pbyBuffer;
; 238  : 	for(UINT y = 0; y < uHeight; ++y) {

  0017a	85 f6		 test	 esi, esi
  0017c	0f 84 81 01 00
	00		 je	 $LN5@SaveScreen

; 235  : 	}
; 236  : 	BYTE* pbySource = (BYTE*) lockRect.pBits;

  00182	89 b5 40 ff ff
	ff		 mov	 DWORD PTR tv783[ebp], esi
  00188	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL6@SaveScreen:

; 239  : 		BYTE *pRow = pbySource;

  00190	8b f1		 mov	 esi, ecx

; 240  : 
; 241  : 		switch( stSurfaceDesc.Format ) {

  00192	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _stSurfaceDesc$[ebp]
  00198	83 c1 ec	 add	 ecx, -20		; ffffffecH
  0019b	83 f9 05	 cmp	 ecx, 5
  0019e	0f 87 34 01 00
	00		 ja	 $LN19@SaveScreen
  001a4	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN74@SaveScreen[ecx*4]
$LN39@SaveScreen:

; 242  : 		case D3DFMT_R8G8B8 :
; 243  : 			for(UINT x = 0; x < uWidth; ++x) {

  001ab	85 ff		 test	 edi, edi
  001ad	0f 84 25 01 00
	00		 je	 $LN19@SaveScreen
  001b3	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _pbySource$1$[ebp]
  001b9	8b f7		 mov	 esi, edi
  001bb	42		 inc	 edx
  001bc	0f 1f 40 00	 npad	 4
$LL11@SaveScreen:

; 244  : 				*pbyDestination++ = pRow[2];	// Blue

  001c0	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]

; 245  : 				*pbyDestination++ = pRow[1];	// Green
; 246  : 				*pbyDestination++ = pRow[0];	// Red
; 247  : 				pRow += 3;

  001c4	8d 52 03	 lea	 edx, DWORD PTR [edx+3]
  001c7	88 08		 mov	 BYTE PTR [eax], cl
  001c9	0f b6 4a fd	 movzx	 ecx, BYTE PTR [edx-3]
  001cd	88 48 01	 mov	 BYTE PTR [eax+1], cl
  001d0	0f b6 4a fc	 movzx	 ecx, BYTE PTR [edx-4]
  001d4	88 48 02	 mov	 BYTE PTR [eax+2], cl
  001d7	83 c0 03	 add	 eax, 3
  001da	83 ee 01	 sub	 esi, 1
  001dd	75 e1		 jne	 SHORT $LL11@SaveScreen

; 248  : 			}
; 249  : 			break;

  001df	e9 f4 00 00 00	 jmp	 $LN19@SaveScreen
$LN40@SaveScreen:

; 250  : 		case D3DFMT_A8R8G8B8 :
; 251  : 		case D3DFMT_X8R8G8B8 :
; 252  : 			for(UINT x = 0; x < uWidth; ++x) {

  001e4	85 ff		 test	 edi, edi
  001e6	0f 84 ec 00 00
	00		 je	 $LN19@SaveScreen
  001ec	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _pbySource$1$[ebp]
  001f2	8b f7		 mov	 esi, edi
  001f4	42		 inc	 edx
$LL14@SaveScreen:

; 253  : 				*pbyDestination++ = pRow[2];	// Blue

  001f5	0f b6 4a 01	 movzx	 ecx, BYTE PTR [edx+1]

; 254  : 				*pbyDestination++ = pRow[1];	// Green
; 255  : 				*pbyDestination++ = pRow[0];	// Red
; 256  : 				pRow += 4;

  001f9	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  001fc	88 08		 mov	 BYTE PTR [eax], cl
  001fe	0f b6 4a fc	 movzx	 ecx, BYTE PTR [edx-4]
  00202	88 48 01	 mov	 BYTE PTR [eax+1], cl
  00205	0f b6 4a fb	 movzx	 ecx, BYTE PTR [edx-5]
  00209	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0020c	83 c0 03	 add	 eax, 3
  0020f	83 ee 01	 sub	 esi, 1
  00212	75 e1		 jne	 SHORT $LL14@SaveScreen

; 257  : 			}
; 258  : 			break;

  00214	e9 bf 00 00 00	 jmp	 $LN19@SaveScreen
$LN42@SaveScreen:

; 259  : 		case D3DFMT_R5G6B5 :
; 260  : 			{
; 261  : 				for(UINT x = 0; x < uWidth; ++x) {

  00219	85 ff		 test	 edi, edi
  0021b	0f 84 b7 00 00
	00		 je	 $LN19@SaveScreen
$LL17@SaveScreen:

; 262  : 					UINT uColor		= *((UINT *) pRow);

  00221	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 263  : 					BYTE byBlue		= (uColor >> 11) & 0x1F;
; 264  : 					BYTE byGreen	= (uColor >> 5) & 0x3F;
; 265  : 					BYTE byRed		= uColor & 0x1F;
; 266  : 
; 267  : 					*pbyDestination++ = (byBlue << 3)	| (byBlue >> 2);		// Blue
; 268  : 					*pbyDestination++ = (byGreen << 2)	| (byGreen >> 2);		// Green
; 269  : 					*pbyDestination++ = (byRed << 3)	| (byRed >> 2);			// Red
; 270  : 					pRow += 2;

  00223	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  00226	8b d1		 mov	 edx, ecx
  00228	8b d9		 mov	 ebx, ecx
  0022a	80 e1 1f	 and	 cl, 31			; 0000001fH
  0022d	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00230	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _uColor$1$[ebp], ecx
  00236	80 e2 1f	 and	 dl, 31			; 0000001fH
  00239	8a ca		 mov	 cl, dl
  0023b	c1 eb 05	 shr	 ebx, 5
  0023e	c0 e9 02	 shr	 cl, 2
  00241	80 e3 3f	 and	 bl, 63			; 0000003fH
  00244	c0 e2 03	 shl	 dl, 3
  00247	0a ca		 or	 cl, dl
  00249	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _uColor$1$[ebp]
  0024f	88 08		 mov	 BYTE PTR [eax], cl
  00251	8a cb		 mov	 cl, bl
  00253	c0 e9 02	 shr	 cl, 2
  00256	c0 e3 02	 shl	 bl, 2
  00259	0a cb		 or	 cl, bl
  0025b	88 48 01	 mov	 BYTE PTR [eax+1], cl
  0025e	8a ca		 mov	 cl, dl
  00260	c0 e9 02	 shr	 cl, 2
  00263	c0 e2 03	 shl	 dl, 3
  00266	0a ca		 or	 cl, dl
  00268	88 48 02	 mov	 BYTE PTR [eax+2], cl
  0026b	83 c0 03	 add	 eax, 3
  0026e	83 ef 01	 sub	 edi, 1
  00271	75 ae		 jne	 SHORT $LL17@SaveScreen

; 271  : 				}
; 272  : 			}
; 273  : 			break;

  00273	eb 5d		 jmp	 SHORT $LN80@SaveScreen
$LN43@SaveScreen:

; 274  : 		case D3DFMT_X1R5G5B5 :
; 275  : 		case D3DFMT_A1R5G5B5 :
; 276  : 			{
; 277  : 				for(UINT x = 0; x < uWidth; ++x) {

  00275	85 ff		 test	 edi, edi
  00277	74 5f		 je	 SHORT $LN19@SaveScreen
  00279	0f 1f 80 00 00
	00 00		 npad	 7
$LL20@SaveScreen:

; 278  : 					UINT uColor		= *((UINT *) pRow);

  00280	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 279  : 					BYTE byBlue		= (uColor >> 10) & 0x1F;
; 280  : 					BYTE byGreen	= (uColor >> 5) & 0x1F;
; 281  : 					BYTE byRed		= uColor & 0x1F;
; 282  : 
; 283  : 					*pbyDestination++ = (byBlue << 3)	| (byBlue >> 2);		// Blue
; 284  : 					*pbyDestination++ = (byGreen << 3)	| (byGreen >> 2);		// Green
; 285  : 					*pbyDestination++ = (byRed << 3)	| (byRed >> 2);			// Red
; 286  : 					pRow += 2;

  00282	8d 76 02	 lea	 esi, DWORD PTR [esi+2]
  00285	8b d1		 mov	 edx, ecx
  00287	8b d9		 mov	 ebx, ecx
  00289	80 e1 1f	 and	 cl, 31			; 0000001fH
  0028c	c1 ea 0a	 shr	 edx, 10			; 0000000aH
  0028f	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _uColor$1$[ebp], ecx
  00295	80 e2 1f	 and	 dl, 31			; 0000001fH
  00298	8a ca		 mov	 cl, dl
  0029a	c1 eb 05	 shr	 ebx, 5
  0029d	c0 e9 02	 shr	 cl, 2
  002a0	80 e3 1f	 and	 bl, 31			; 0000001fH
  002a3	c0 e2 03	 shl	 dl, 3
  002a6	0a ca		 or	 cl, dl
  002a8	8b 95 50 ff ff
	ff		 mov	 edx, DWORD PTR _uColor$1$[ebp]
  002ae	88 08		 mov	 BYTE PTR [eax], cl
  002b0	8a cb		 mov	 cl, bl
  002b2	c0 e9 02	 shr	 cl, 2
  002b5	c0 e3 03	 shl	 bl, 3
  002b8	0a cb		 or	 cl, bl
  002ba	88 48 01	 mov	 BYTE PTR [eax+1], cl
  002bd	8a ca		 mov	 cl, dl
  002bf	c0 e9 02	 shr	 cl, 2
  002c2	c0 e2 03	 shl	 dl, 3
  002c5	0a ca		 or	 cl, dl
  002c7	88 48 02	 mov	 BYTE PTR [eax+2], cl
  002ca	83 c0 03	 add	 eax, 3
  002cd	83 ef 01	 sub	 edi, 1
  002d0	75 ae		 jne	 SHORT $LL20@SaveScreen
$LN80@SaveScreen:

; 287  : 				}
; 288  : 			}
; 289  : 			break;
; 290  : 		}
; 291  : 
; 292  : 		// increase by one line
; 293  : 		pbySource += lockRect.Pitch;

  002d2	8b bd 44 ff ff
	ff		 mov	 edi, DWORD PTR _uWidth$1$[ebp]
$LN19@SaveScreen:
  002d8	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _pbySource$1$[ebp]
  002de	03 8d 34 ff ff
	ff		 add	 ecx, DWORD PTR _lockRect$[ebp]
  002e4	83 ad 40 ff ff
	ff 01		 sub	 DWORD PTR tv783[ebp], 1
  002eb	89 8d 58 ff ff
	ff		 mov	 DWORD PTR _pbySource$1$[ebp], ecx
  002f1	0f 85 99 fe ff
	ff		 jne	 $LL6@SaveScreen
  002f7	8b b5 4c ff ff
	ff		 mov	 esi, DWORD PTR _uHeight$1$[ebp]
  002fd	8b 9d 54 ff ff
	ff		 mov	 ebx, DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
$LN5@SaveScreen:

; 294  : 	}
; 295  : 
; 296  : 	if(lpSurface) {

  00303	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _lpSurface$[ebp]
  00309	85 c9		 test	 ecx, ecx
  0030b	74 1c		 je	 SHORT $LN45@SaveScreen

; 297  : 		lpSurface->UnlockRect();

  0030d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0030f	51		 push	 ecx
  00310	ff 50 38	 call	 DWORD PTR [eax+56]

; 298  : 		lpSurface->Release();

  00313	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _lpSurface$[ebp]
  00319	50		 push	 eax
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	ff 51 08	 call	 DWORD PTR [ecx+8]

; 299  : 		lpSurface = NULL;

  0031f	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _lpSurface$[ebp], 0
$LN45@SaveScreen:

; 300  : 	}
; 301  : 
; 302  : 	bool bSaved = SaveJPEG(c_pszFileName, pbyBuffer, uWidth, uHeight);

  00329	8b 8d 48 ff ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0032f	56		 push	 esi
  00330	57		 push	 edi
  00331	ff b5 3c ff ff
	ff		 push	 DWORD PTR _pbyBuffer$1$[ebp]
  00337	53		 push	 ebx
  00338	e8 00 00 00 00	 call	 ?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z ; CPythonGraphic::SaveJPEG

; 303  : 
; 304  : 	if(pbyBuffer) {
; 305  : 		delete [] pbyBuffer;

  0033d	ff b5 3c ff ff
	ff		 push	 DWORD PTR _pbyBuffer$1$[ebp]
  00343	8a d8		 mov	 bl, al
  00345	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0034a	83 c4 04	 add	 esp, 4

; 306  : 		pbyBuffer = NULL;
; 307  : 	}
; 308  : 
; 309  : 	if(bSaved == false) {

  0034d	84 db		 test	 bl, bl
  0034f	75 2a		 jne	 SHORT $LN47@SaveScreen

; 310  : 		TraceError("Failed to save JPEG file. (%s, %d, %d)", c_pszFileName, uWidth, uHeight);

  00351	56		 push	 esi
  00352	57		 push	 edi
  00353	ff b5 54 ff ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  00359	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IOAMCLFA@Failed?5to?5save?5JPEG?5file?4?5?$CI?$CFs?0?5@
  0035e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00363	83 c4 10	 add	 esp, 16			; 00000010H

; 311  : 		return false;

  00366	32 c0		 xor	 al, al
  00368	5f		 pop	 edi
  00369	5e		 pop	 esi
  0036a	5b		 pop	 ebx

; 390  : 		}
; 391  : 	}
; 392  : 	return true;
; 393  : }

  0036b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036e	33 cd		 xor	 ecx, ebp
  00370	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00375	8b e5		 mov	 esp, ebp
  00377	5d		 pop	 ebp
  00378	c2 04 00	 ret	 4
$LN47@SaveScreen:

; 312  : 	}
; 313  : 
; 314  : 	if (g_isScreenShotKey)

  0037b	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_isScreenShotKey@@3_NA, 0 ; g_isScreenShotKey
  00382	0f 84 6c 01 00
	00		 je	 $LN49@SaveScreen

; 315  : 	{
; 316  : 		FILE* srcFilePtr = fopen(c_pszFileName, "rb");

  00388	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  0038d	ff b5 54 ff ff
	ff		 push	 DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  00393	e8 00 00 00 00	 call	 _fopen
  00398	8b f8		 mov	 edi, eax
  0039a	83 c4 08	 add	 esp, 8

; 317  : 		if (srcFilePtr)

  0039d	85 ff		 test	 edi, edi
  0039f	0f 84 4f 01 00
	00		 je	 $LN49@SaveScreen

; 318  : 		{
; 319  : 			fseek(srcFilePtr, 0, SEEK_END);		

  003a5	6a 02		 push	 2
  003a7	6a 00		 push	 0
  003a9	57		 push	 edi
  003aa	e8 00 00 00 00	 call	 _fseek

; 320  : 			size_t fileSize = ftell(srcFilePtr);

  003af	57		 push	 edi
  003b0	e8 00 00 00 00	 call	 _ftell

; 321  : 			fseek(srcFilePtr, 0, SEEK_SET);

  003b5	6a 00		 push	 0
  003b7	6a 00		 push	 0
  003b9	57		 push	 edi
  003ba	8b f0		 mov	 esi, eax
  003bc	e8 00 00 00 00	 call	 _fseek

; 322  : 
; 323  : 			char head[21];
; 324  : 			size_t tailSize = fileSize - sizeof(head);

  003c1	83 c6 eb	 add	 esi, -21		; ffffffebH

; 325  : 			char* tail = (char*)malloc(tailSize);

  003c4	56		 push	 esi
  003c5	89 b5 4c ff ff
	ff		 mov	 DWORD PTR _tailSize$1$[ebp], esi
  003cb	e8 00 00 00 00	 call	 _malloc

; 326  : 			
; 327  : 			fread(head, sizeof(head), 1, srcFilePtr);

  003d0	57		 push	 edi
  003d1	6a 01		 push	 1
  003d3	8b d8		 mov	 ebx, eax
  003d5	8d 45 c0	 lea	 eax, DWORD PTR _head$2[ebp]
  003d8	6a 15		 push	 21			; 00000015H
  003da	50		 push	 eax
  003db	e8 00 00 00 00	 call	 _fread

; 328  : 			fread(tail, tailSize, 1, srcFilePtr);

  003e0	57		 push	 edi
  003e1	6a 01		 push	 1
  003e3	56		 push	 esi
  003e4	53		 push	 ebx
  003e5	e8 00 00 00 00	 call	 _fread
  003ea	83 c4 40	 add	 esp, 64			; 00000040H

; 329  : 			fclose(srcFilePtr);

  003ed	57		 push	 edi
  003ee	e8 00 00 00 00	 call	 _fclose
  003f3	83 c4 04	 add	 esp, 4

; 330  : 
; 331  : 			char imgDesc[64];
; 332  : 			GenScreenShotTag(c_pszFileName, GetCRC32(tail, tailSize), imgDesc, sizeof(imgDesc));

  003f6	8d 45 80	 lea	 eax, DWORD PTR _imgDesc$1[ebp]
  003f9	6a 40		 push	 64			; 00000040H
  003fb	50		 push	 eax
  003fc	56		 push	 esi
  003fd	53		 push	 ebx
  003fe	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  00403	8b b5 54 ff ff
	ff		 mov	 esi, DWORD PTR _c_pszFileName$GSCopy$1$[ebp]
  00409	83 c4 08	 add	 esp, 8
  0040c	50		 push	 eax
  0040d	56		 push	 esi
  0040e	e8 00 00 00 00	 call	 ?GenScreenShotTag@@YAXPBDKPADI@Z ; GenScreenShotTag

; 333  : 
; 334  : 			int imgDescLen = strlen(imgDesc) + 1;

  00413	8d 4d 80	 lea	 ecx, DWORD PTR _imgDesc$1[ebp]
  00416	83 c4 10	 add	 esp, 16			; 00000010H
  00419	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0041c	0f 1f 40 00	 npad	 4
$LL75@SaveScreen:
  00420	8a 01		 mov	 al, BYTE PTR [ecx]
  00422	41		 inc	 ecx
  00423	84 c0		 test	 al, al
  00425	75 f9		 jne	 SHORT $LL75@SaveScreen
  00427	2b ca		 sub	 ecx, edx

; 335  : 			
; 336  : 			unsigned char exifHeader[] = {
; 337  : 				0xe1,

  00429	66 c7 45 d8 e1
	00		 mov	 WORD PTR _exifHeader$3[ebp], 225 ; 000000e1H

; 338  : 				0, // blockLen[1],
; 339  : 				0, // blockLen[0],
; 340  : 				0x45,
; 341  : 				0x78,
; 342  : 				0x69,
; 343  : 				0x66,
; 344  : 				0x0,
; 345  : 				0x0,
; 346  : 				0x49,
; 347  : 				0x49,
; 348  : 				0x2a,
; 349  : 				0x0,
; 350  : 				0x8,
; 351  : 				0x0,
; 352  : 				0x0,
; 353  : 				0x0,
; 354  : 				0x1,
; 355  : 				0x0,
; 356  : 				0xe,
; 357  : 				0x1,
; 358  : 				0x2,
; 359  : 				0x0,
; 360  : 				imgDescLen, // textLen[0],
; 361  : 				0, // textLen[1],
; 362  : 				0, // textLen[2],
; 363  : 				0, // textLen[3],
; 364  : 				0x1a,
; 365  : 				0x0,
; 366  : 				0x0,
; 367  : 				0x0,
; 368  : 				0x0,
; 369  : 				0x0,
; 370  : 				0x0,
; 371  : 				0x0,
; 372  : 			};
; 373  : 
; 374  : 			exifHeader[2] = sizeof(exifHeader) + imgDescLen;
; 375  : 
; 376  : 			FILE* dstFilePtr = fopen(c_pszFileName, "wb");

  0042f	68 00 00 00 00	 push	 OFFSET ??_C@_02GMLFBBN@wb@
  00434	56		 push	 esi
  00435	c7 45 db 45 78
	69 66		 mov	 DWORD PTR _exifHeader$3[ebp+3], 1718188101 ; 66697845H
  0043c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0043f	c7 45 df 00 00
	49 49		 mov	 DWORD PTR _exifHeader$3[ebp+7], 1229520896 ; 49490000H
  00446	89 85 48 ff ff
	ff		 mov	 DWORD PTR _imgDescLen$1$[ebp], eax
  0044c	88 45 ef	 mov	 BYTE PTR _exifHeader$3[ebp+23], al
  0044f	04 23		 add	 al, 35			; 00000023H
  00451	c7 45 e3 2a 00
	08 00		 mov	 DWORD PTR _exifHeader$3[ebp+11], 524330 ; 0008002aH
  00458	c7 45 e7 00 00
	01 00		 mov	 DWORD PTR _exifHeader$3[ebp+15], 65536 ; 00010000H
  0045f	c7 45 eb 0e 01
	02 00		 mov	 DWORD PTR _exifHeader$3[ebp+19], 131342 ; 0002010eH
  00466	c7 45 f0 00 00
	00 1a		 mov	 DWORD PTR _exifHeader$3[ebp+24], 436207616 ; 1a000000H
  0046d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _exifHeader$3[ebp+28], 0
  00474	66 c7 45 f8 00
	00		 mov	 WORD PTR _exifHeader$3[ebp+32], 0
  0047a	c6 45 fa 00	 mov	 BYTE PTR _exifHeader$3[ebp+34], 0
  0047e	88 45 da	 mov	 BYTE PTR _exifHeader$3[ebp+2], al
  00481	e8 00 00 00 00	 call	 _fopen
  00486	8b f0		 mov	 esi, eax
  00488	83 c4 08	 add	 esp, 8

; 377  : 			//FILE* dstFilePtr = fopen("temp.jpg", "wb");
; 378  : 			if (dstFilePtr)

  0048b	85 f6		 test	 esi, esi
  0048d	74 5c		 je	 SHORT $LN50@SaveScreen

; 379  : 			{
; 380  : 				fwrite(head, sizeof(head), 1, dstFilePtr);

  0048f	56		 push	 esi
  00490	6a 01		 push	 1
  00492	8d 45 c0	 lea	 eax, DWORD PTR _head$2[ebp]
  00495	6a 15		 push	 21			; 00000015H
  00497	50		 push	 eax
  00498	e8 00 00 00 00	 call	 _fwrite

; 381  : 				fwrite(exifHeader, sizeof(exifHeader), 1, dstFilePtr);

  0049d	56		 push	 esi
  0049e	6a 01		 push	 1
  004a0	8d 45 d8	 lea	 eax, DWORD PTR _exifHeader$3[ebp]
  004a3	6a 23		 push	 35			; 00000023H
  004a5	50		 push	 eax
  004a6	e8 00 00 00 00	 call	 _fwrite

; 382  : 				fwrite(imgDesc, imgDescLen, 1, dstFilePtr);

  004ab	56		 push	 esi
  004ac	6a 01		 push	 1
  004ae	ff b5 48 ff ff
	ff		 push	 DWORD PTR _imgDescLen$1$[ebp]
  004b4	8d 45 80	 lea	 eax, DWORD PTR _imgDesc$1[ebp]
  004b7	50		 push	 eax
  004b8	e8 00 00 00 00	 call	 _fwrite

; 383  : 				fputc(0x00, dstFilePtr);

  004bd	56		 push	 esi
  004be	6a 00		 push	 0
  004c0	e8 00 00 00 00	 call	 _fputc

; 384  : 				fputc(0xff, dstFilePtr);

  004c5	56		 push	 esi
  004c6	68 ff 00 00 00	 push	 255			; 000000ffH
  004cb	e8 00 00 00 00	 call	 _fputc
  004d0	83 c4 40	 add	 esp, 64			; 00000040H

; 385  : 				fwrite(tail, tailSize, 1, dstFilePtr);

  004d3	56		 push	 esi
  004d4	6a 01		 push	 1
  004d6	ff b5 4c ff ff
	ff		 push	 DWORD PTR _tailSize$1$[ebp]
  004dc	53		 push	 ebx
  004dd	e8 00 00 00 00	 call	 _fwrite

; 386  : 				fclose(dstFilePtr);

  004e2	56		 push	 esi
  004e3	e8 00 00 00 00	 call	 _fclose
  004e8	83 c4 14	 add	 esp, 20			; 00000014H
$LN50@SaveScreen:

; 387  : 			}
; 388  : 
; 389  : 			free(tail);

  004eb	53		 push	 ebx
  004ec	e8 00 00 00 00	 call	 _free
  004f1	83 c4 04	 add	 esp, 4
$LN49@SaveScreen:

; 390  : 		}
; 391  : 	}
; 392  : 	return true;
; 393  : }

  004f4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004f7	b0 01		 mov	 al, 1
  004f9	5f		 pop	 edi
  004fa	5e		 pop	 esi
  004fb	33 cd		 xor	 ecx, ebp
  004fd	5b		 pop	 ebx
  004fe	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00503	8b e5		 mov	 esp, ebp
  00505	5d		 pop	 ebp
  00506	c2 04 00	 ret	 4
  00509	0f 1f 00	 npad	 3
$LN73@SaveScreen:
  0050c	00 00 00 00	 DD	 $LN30@SaveScreen
  00510	00 00 00 00	 DD	 $LN2@SaveScreen
$LN72@SaveScreen:
  00514	00		 DB	 0
  00515	00		 DB	 0
  00516	01		 DB	 1
  00517	00		 DB	 0
  00518	00		 DB	 0
  00519	00		 DB	 0
  0051a	66 90		 npad	 2
$LN74@SaveScreen:
  0051c	00 00 00 00	 DD	 $LN39@SaveScreen
  00520	00 00 00 00	 DD	 $LN40@SaveScreen
  00524	00 00 00 00	 DD	 $LN40@SaveScreen
  00528	00 00 00 00	 DD	 $LN42@SaveScreen
  0052c	00 00 00 00	 DD	 $LN43@SaveScreen
  00530	00 00 00 00	 DD	 $LN43@SaveScreen
?SaveScreenShot@CPythonGraphic@@QAE_NPBD@Z ENDP		; CPythonGraphic::SaveScreenShot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z
_TEXT	SEGMENT
_pszFileName$ = 8					; size = 4
_pbyBuffer$ = 12					; size = 4
_uWidth$ = 16						; size = 4
_uHeight$ = 20						; size = 4
?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z PROC		; CPythonGraphic::SaveJPEG, COMDAT
; _this$ = ecx

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  : 	return jpeg_save(pbyBuffer, uWidth, uHeight, 85, pszFileName) != 0;

  00003	ff 75 08	 push	 DWORD PTR _pszFileName$[ebp]
  00006	6a 55		 push	 85			; 00000055H
  00008	ff 75 14	 push	 DWORD PTR _uHeight$[ebp]
  0000b	ff 75 10	 push	 DWORD PTR _uWidth$[ebp]
  0000e	ff 75 0c	 push	 DWORD PTR _pbyBuffer$[ebp]
  00011	e8 00 00 00 00	 call	 ?jpeg_save@@YAHPAEHHHPBD@Z ; jpeg_save
  00016	83 c4 14	 add	 esp, 20			; 00000014H
  00019	85 c0		 test	 eax, eax
  0001b	0f 95 c0	 setne	 al

; 178  : }

  0001e	5d		 pop	 ebp
  0001f	c2 10 00	 ret	 16			; 00000010H
?SaveJPEG@CPythonGraphic@@QAE_NPBDPAEII@Z ENDP		; CPythonGraphic::SaveJPEG
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_fLastPercentage$1$ = -64				; size = 4
tv663 = -64						; size = 4
_iTriCount$1$ = -60					; size = 4
_vertices$ = -56					; size = 12
_dwR$1$ = -44						; size = 4
_dwR$1$ = -44						; size = 4
_vertex$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fxCenter$ = 8						; size = 4
_fyCenter$ = 12						; size = 4
_fRadius$ = 16						; size = 4
_fTime$ = 20						; size = 4
?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z PROC	; CPythonGraphic::RenderCoolTimeBox, COMDAT
; _this$ = ecx

; 500  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 501  : 	if (fTime >= 1.0f)

  0002a	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _fTime$[ebp]
  0002f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00037	0f 2f d9	 comiss	 xmm3, xmm1
  0003a	0f 83 9b 05 00
	00		 jae	 $LN31@RenderCool
  00040	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00043	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 504  : 	fTime = max(0.0f, fTime);

  0004a	f3 0f 5f c3	 maxss	 xmm0, xmm3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0004e	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 520  : 	int iTriCount = int(8 - 8.0f * fTime);

  00055	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@41000000
  0005d	0f 57 d2	 xorps	 xmm2, xmm2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00060	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 520  : 	int iTriCount = int(8 - 8.0f * fTime);

  00067	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0006b	f3 0f 5c d8	 subss	 xmm3, xmm0
  0006f	f3 0f 2c c3	 cvttss2si eax, xmm3
  00073	89 45 c4	 mov	 DWORD PTR _iTriCount$1$[ebp], eax
  00076	66 0f 6e c0	 movd	 xmm0, eax

; 521  : 	float fLastPercentage = (8 - 8.0f * fTime) - iTriCount;

  0007a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0007d	f3 0f 5c d8	 subss	 xmm3, xmm0
  00081	f3 0f 11 5d c0	 movss	 DWORD PTR _fLastPercentage$1$[ebp], xmm3

; 525  : 	vertex.position.x = fxCenter;

  00086	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0008b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00093	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 525  : 	vertex.position.x = fxCenter;

  0009b	f3 0f 11 45 d8	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 526  : 	vertex.position.y = fyCenter;

  000a0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  000a5	f3 0f 11 45 dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  000aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
  000b2	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 523  : 	std::vector<TPDTVertex> vertices;

  000b5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 527  : 	vertex.position.z = 0.0f;

  000bc	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  000c3	72 09		 jb	 SHORT $LN76@RenderCool
  000c5	c7 45 d4 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  000cc	eb 39		 jmp	 SHORT $LN75@RenderCool
$LN76@RenderCool:
  000ce	0f 2f d0	 comiss	 xmm2, xmm0
  000d1	72 09		 jb	 SHORT $LN74@RenderCool
  000d3	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  000da	eb 2b		 jmp	 SHORT $LN75@RenderCool
$LN74@RenderCool:
  000dc	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000e0	f3 0f 58 c4	 addss	 xmm0, xmm4
  000e4	e8 00 00 00 00	 call	 __ftol3
  000e9	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  000f1	0f 57 d2	 xorps	 xmm2, xmm2
  000f4	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  000fc	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00104	89 45 d4	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN75@RenderCool:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00107	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  0010f	0f 2f c1	 comiss	 xmm0, xmm1
  00112	72 07		 jb	 SHORT $LN80@RenderCool
  00114	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00119	eb 20		 jmp	 SHORT $LN79@RenderCool
$LN80@RenderCool:
  0011b	0f 2f d0	 comiss	 xmm2, xmm0
  0011e	72 04		 jb	 SHORT $LN78@RenderCool
  00120	33 ff		 xor	 edi, edi
  00122	eb 17		 jmp	 SHORT $LN79@RenderCool
$LN78@RenderCool:
  00124	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00128	f3 0f 58 c4	 addss	 xmm0, xmm4
  0012c	e8 00 00 00 00	 call	 __ftol3
  00131	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00139	8b f8		 mov	 edi, eax
$LN79@RenderCool:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0013b	f3 0f 10 05 08
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00143	0f 57 d2	 xorps	 xmm2, xmm2
  00146	0f 2f c1	 comiss	 xmm0, xmm1
  00149	72 07		 jb	 SHORT $LN84@RenderCool
  0014b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00150	eb 2b		 jmp	 SHORT $LN83@RenderCool
$LN84@RenderCool:
  00152	0f 2f d0	 comiss	 xmm2, xmm0
  00155	72 04		 jb	 SHORT $LN82@RenderCool
  00157	33 f6		 xor	 esi, esi
  00159	eb 22		 jmp	 SHORT $LN83@RenderCool
$LN82@RenderCool:
  0015b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00163	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0016b	e8 00 00 00 00	 call	 __ftol3
  00170	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00178	8b f0		 mov	 esi, eax
  0017a	0f 57 d2	 xorps	 xmm2, xmm2
$LN83@RenderCool:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0017d	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  00185	0f 2f c1	 comiss	 xmm0, xmm1
  00188	72 07		 jb	 SHORT $LN88@RenderCool
  0018a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0018f	eb 1e		 jmp	 SHORT $LN87@RenderCool
$LN88@RenderCool:
  00191	0f 2f d0	 comiss	 xmm2, xmm0
  00194	72 04		 jb	 SHORT $LN86@RenderCool
  00196	33 c0		 xor	 eax, eax
  00198	eb 15		 jmp	 SHORT $LN87@RenderCool
$LN86@RenderCool:
  0019a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001a2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001aa	e8 00 00 00 00	 call	 __ftol3
$LN87@RenderCool:

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001af	c1 e0 08	 shl	 eax, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001b2	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001b5	0b 45 d4	 or	 eax, DWORD PTR _dwR$1$[ebp]
  001b8	c1 e0 08	 shl	 eax, 8
  001bb	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 530  : 	vertex.texCoord.x = 0.0f;

  001bd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+16], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001c4	c1 e0 08	 shl	 eax, 8
  001c7	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 528  : 	vertex.diffuse = color;

  001c9	89 45 e4	 mov	 DWORD PTR _vertex$[ebp+12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  001cc	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  001cf	50		 push	 eax
  001d0	6a 00		 push	 0
  001d2	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 532  : 	vertex.position.x = fxCenter;

  001d7	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fxCenter$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  001dc	0f 57 d2	 xorps	 xmm2, xmm2
  001df	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 532  : 	vertex.position.x = fxCenter;

  001e7	f3 0f 11 45 d8	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 533  : 	vertex.position.y = fyCenter - fRadius;

  001ec	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fyCenter$[ebp]
  001f1	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _fRadius$[ebp]

; 534  : 	vertex.position.z = 0.0f;

  001f6	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+8], 0
  001fd	f3 0f 11 45 dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020a	0f 2f c8	 comiss	 xmm1, xmm0
  0020d	72 09		 jb	 SHORT $LN103@RenderCool
  0020f	c7 45 d4 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00216	eb 34		 jmp	 SHORT $LN102@RenderCool
$LN103@RenderCool:
  00218	0f 2f d1	 comiss	 xmm2, xmm1
  0021b	72 09		 jb	 SHORT $LN101@RenderCool
  0021d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00224	eb 26		 jmp	 SHORT $LN102@RenderCool
$LN101@RenderCool:
  00226	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  0022e	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00236	0f 28 c1	 movaps	 xmm0, xmm1
  00239	e8 00 00 00 00	 call	 __ftol3
  0023e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00246	0f 57 d2	 xorps	 xmm2, xmm2
  00249	89 45 d4	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN102@RenderCool:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0024c	f3 0f 10 0d 04
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+4
  00254	0f 2f c8	 comiss	 xmm1, xmm0
  00257	72 07		 jb	 SHORT $LN107@RenderCool
  00259	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0025e	eb 2b		 jmp	 SHORT $LN106@RenderCool
$LN107@RenderCool:
  00260	0f 2f d1	 comiss	 xmm2, xmm1
  00263	72 04		 jb	 SHORT $LN105@RenderCool
  00265	33 ff		 xor	 edi, edi
  00267	eb 22		 jmp	 SHORT $LN106@RenderCool
$LN105@RenderCool:
  00269	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00271	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00279	0f 28 c1	 movaps	 xmm0, xmm1
  0027c	e8 00 00 00 00	 call	 __ftol3
  00281	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00289	8b f8		 mov	 edi, eax
$LN106@RenderCool:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0028b	f3 0f 10 0d 08
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+8
  00293	0f 57 d2	 xorps	 xmm2, xmm2
  00296	0f 2f c8	 comiss	 xmm1, xmm0
  00299	72 07		 jb	 SHORT $LN111@RenderCool
  0029b	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  002a0	eb 2e		 jmp	 SHORT $LN110@RenderCool
$LN111@RenderCool:
  002a2	0f 2f d1	 comiss	 xmm2, xmm1
  002a5	72 04		 jb	 SHORT $LN109@RenderCool
  002a7	33 f6		 xor	 esi, esi
  002a9	eb 25		 jmp	 SHORT $LN110@RenderCool
$LN109@RenderCool:
  002ab	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  002b3	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  002bb	0f 28 c1	 movaps	 xmm0, xmm1
  002be	e8 00 00 00 00	 call	 __ftol3
  002c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002cb	8b f0		 mov	 esi, eax
  002cd	0f 57 d2	 xorps	 xmm2, xmm2
$LN110@RenderCool:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  002d0	f3 0f 10 0d 0c
	00 00 00	 movss	 xmm1, DWORD PTR ?color@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4UD3DXCOLOR@@A+12
  002d8	0f 2f c8	 comiss	 xmm1, xmm0
  002db	72 07		 jb	 SHORT $LN115@RenderCool
  002dd	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  002e2	eb 21		 jmp	 SHORT $LN114@RenderCool
$LN115@RenderCool:
  002e4	0f 2f d1	 comiss	 xmm2, xmm1
  002e7	72 04		 jb	 SHORT $LN113@RenderCool
  002e9	33 c0		 xor	 eax, eax
  002eb	eb 18		 jmp	 SHORT $LN114@RenderCool
$LN113@RenderCool:
  002ed	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  002f5	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  002fd	0f 28 c1	 movaps	 xmm0, xmm1
  00300	e8 00 00 00 00	 call	 __ftol3
$LN114@RenderCool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00305	8b 55 cc	 mov	 edx, DWORD PTR _vertices$[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00308	c1 e0 08	 shl	 eax, 8
  0030b	0b 45 d4	 or	 eax, DWORD PTR _dwR$1$[ebp]
  0030e	c1 e0 08	 shl	 eax, 8
  00311	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 537  : 	vertex.texCoord.x = 0.0f;

  00313	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _vertex$[ebp+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0031a	8b 7d d0	 mov	 edi, DWORD PTR _vertices$[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0031d	c1 e0 08	 shl	 eax, 8
  00320	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 535  : 	vertex.diffuse = color;

  00322	89 45 e4	 mov	 DWORD PTR _vertex$[ebp+12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00325	3b d7		 cmp	 edx, edi
  00327	74 19		 je	 SHORT $LN120@RenderCool
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00329	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR _vertex$[ebp]
  0032d	f3 0f 7e 55 e8	 movq	 xmm2, QWORD PTR _vertex$[ebp+16]
  00332	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00335	66 0f d6 52 10	 movq	 QWORD PTR [edx+16], xmm2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  0033a	83 c2 18	 add	 edx, 24			; 00000018H
  0033d	89 55 cc	 mov	 DWORD PTR _vertices$[ebp+4], edx

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00340	eb 18		 jmp	 SHORT $LN119@RenderCool
$LN120@RenderCool:

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00342	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  00345	50		 push	 eax
  00346	52		 push	 edx
  00347	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  0034a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
  0034f	8b 7d d0	 mov	 edi, DWORD PTR _vertices$[ebp+8]
  00352	8b 55 cc	 mov	 edx, DWORD PTR _vertices$[ebp+4]
  00355	f3 0f 7e 55 e8	 movq	 xmm2, QWORD PTR _vertex$[ebp+16]
$LN119@RenderCool:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 540  : 	for (int j = 0; j < iTriCount; ++j)

  0035a	8b 45 c4	 mov	 eax, DWORD PTR _iTriCount$1$[ebp]
  0035d	33 f6		 xor	 esi, esi
  0035f	85 c0		 test	 eax, eax
  00361	0f 8e 8a 00 00
	00		 jle	 $LN5@RenderCool
  00367	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fRadius$[ebp]
  0036c	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fxCenter$[ebp]
  00371	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _fyCenter$[ebp]
  00376	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL6@RenderCool:

; 541  : 	{
; 542  : 		vertex.position.x = fxCenter + s_v2BoxPos[j].x * fRadius;

  00380	0f 28 c1	 movaps	 xmm0, xmm1
  00383	f3 0f 59 04 f5
	00 00 00 00	 mulss	 xmm0, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[esi*8]
  0038c	f3 0f 58 c3	 addss	 xmm0, xmm3
  00390	f3 0f 11 45 d8	 movss	 DWORD PTR _vertex$[ebp], xmm0

; 543  : 		vertex.position.y = fyCenter + s_v2BoxPos[j].y * fRadius;

  00395	0f 28 c1	 movaps	 xmm0, xmm1
  00398	f3 0f 59 04 f5
	04 00 00 00	 mulss	 xmm0, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[esi*8+4]
  003a1	f3 0f 58 c4	 addss	 xmm0, xmm4
  003a5	f3 0f 11 45 dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  003aa	3b d7		 cmp	 edx, edi
  003ac	74 14		 je	 SHORT $LN22@RenderCool
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  003ae	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR _vertex$[ebp]
  003b2	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  003b5	66 0f d6 52 10	 movq	 QWORD PTR [edx+16], xmm2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  003ba	83 c2 18	 add	 edx, 24			; 00000018H
  003bd	89 55 cc	 mov	 DWORD PTR _vertices$[ebp+4], edx

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  003c0	eb 2a		 jmp	 SHORT $LN4@RenderCool
$LN22@RenderCool:

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  003c2	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  003c5	50		 push	 eax
  003c6	52		 push	 edx
  003c7	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  003ca	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
  003cf	8b 7d d0	 mov	 edi, DWORD PTR _vertices$[ebp+8]
  003d2	8b 55 cc	 mov	 edx, DWORD PTR _vertices$[ebp+4]
  003d5	f3 0f 7e 55 e8	 movq	 xmm2, QWORD PTR _vertex$[ebp+16]
  003da	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fRadius$[ebp]
  003df	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fxCenter$[ebp]
  003e4	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _fyCenter$[ebp]
  003e9	8b 45 c4	 mov	 eax, DWORD PTR _iTriCount$1$[ebp]
$LN4@RenderCool:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 540  : 	for (int j = 0; j < iTriCount; ++j)

  003ec	46		 inc	 esi
  003ed	3b f0		 cmp	 esi, eax
  003ef	7c 8f		 jl	 SHORT $LL6@RenderCool
$LN5@RenderCool:

; 544  : 		vertices.push_back(vertex);
; 545  : 	}
; 546  : 
; 547  : 	if (fLastPercentage > 0.0f)

  003f1	f3 0f 10 65 c0	 movss	 xmm4, DWORD PTR _fLastPercentage$1$[ebp]
  003f6	0f 2f 25 00 00
	00 00		 comiss	 xmm4, DWORD PTR __real@00000000
  003fd	0f 86 a7 00 00
	00		 jbe	 $LN8@RenderCool

; 548  : 	{
; 549  : 		D3DXVECTOR2 * pv2Pos;
; 550  : 		D3DXVECTOR2 * pv2LastPos;
; 551  : 
; 552  : 		assert((iTriCount-1+8)%8 >= 0 && (iTriCount-1+8)%8 < 8);
; 553  : 		assert((iTriCount+8)%8 >= 0 && (iTriCount+8)%8 < 8);
; 554  : 		pv2LastPos = &s_v2BoxPos[(iTriCount-1+8)%8];

  00403	8d 48 07	 lea	 ecx, DWORD PTR [eax+7]
  00406	81 e1 07 00 00
	80		 and	 ecx, -2147483641	; 80000007H
  0040c	79 05		 jns	 SHORT $LN154@RenderCool
  0040e	49		 dec	 ecx
  0040f	83 c9 f8	 or	 ecx, -8			; fffffff8H
  00412	41		 inc	 ecx
$LN154@RenderCool:

; 555  : 		pv2Pos = &s_v2BoxPos[(iTriCount+8)%8];

  00413	83 c0 08	 add	 eax, 8
  00416	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  0041b	79 05		 jns	 SHORT $LN155@RenderCool
  0041d	48		 dec	 eax
  0041e	83 c8 f8	 or	 eax, -8			; fffffff8H
  00421	40		 inc	 eax
$LN155@RenderCool:

; 556  : 
; 557  : 		vertex.position.x = fxCenter + ((pv2Pos->x-pv2LastPos->x) * fLastPercentage + pv2LastPos->x) * fRadius;

  00422	f3 0f 10 04 cd
	00 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[ecx*8]
  0042b	f3 0f 10 0c c5
	00 00 00 00	 movss	 xmm1, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8]
  00434	f3 0f 5c c8	 subss	 xmm1, xmm0
  00438	f3 0f 59 cc	 mulss	 xmm1, xmm4
  0043c	f3 0f 58 c8	 addss	 xmm1, xmm0

; 558  : 		vertex.position.y = fyCenter + ((pv2Pos->y-pv2LastPos->y) * fLastPercentage + pv2LastPos->y) * fRadius;

  00440	f3 0f 10 04 cd
	04 00 00 00	 movss	 xmm0, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[ecx*8+4]
  00449	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  0044e	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _fxCenter$[ebp]
  00453	f3 0f 11 4d d8	 movss	 DWORD PTR _vertex$[ebp], xmm1
  00458	f3 0f 10 0c c5
	04 00 00 00	 movss	 xmm1, DWORD PTR ?s_v2BoxPos@?1??RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z@4PAUD3DXVECTOR2@@A[eax*8+4]
  00461	f3 0f 5c c8	 subss	 xmm1, xmm0
  00465	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00469	f3 0f 58 c8	 addss	 xmm1, xmm0
  0046d	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fRadius$[ebp]
  00472	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fyCenter$[ebp]
  00477	f3 0f 11 4d dc	 movss	 DWORD PTR _vertex$[ebp+4], xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0047c	3b d7		 cmp	 edx, edi
  0047e	74 14		 je	 SHORT $LN56@RenderCool
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00480	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR _vertex$[ebp]
  00484	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00487	66 0f d6 52 10	 movq	 QWORD PTR [edx+16], xmm2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  0048c	83 c2 18	 add	 edx, 24			; 00000018H
  0048f	89 55 cc	 mov	 DWORD PTR _vertices$[ebp+4], edx

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00492	eb 13		 jmp	 SHORT $LN55@RenderCool
$LN56@RenderCool:

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00494	8d 45 d8	 lea	 eax, DWORD PTR _vertex$[ebp]
  00497	50		 push	 eax
  00498	52		 push	 edx
  00499	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  0049c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPDTVertex@@@?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@AAEPAUSPDTVertex@@QAU2@ABU2@@Z ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::_Emplace_reallocate<SPDTVertex const &>
  004a1	8b 7d d0	 mov	 edi, DWORD PTR _vertices$[ebp+8]
  004a4	8b 55 cc	 mov	 edx, DWORD PTR _vertices$[ebp+4]
$LN55@RenderCool:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 560  : 		++iTriCount;

  004a7	ff 45 c4	 inc	 DWORD PTR _iTriCount$1$[ebp]
$LN8@RenderCool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  004aa	8b 75 c8	 mov	 esi, DWORD PTR _vertices$[ebp]
  004ad	3b f2		 cmp	 esi, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 563  : 	if (vertices.empty())

  004af	0f 84 e5 00 00
	00		 je	 $LN10@RenderCool
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004b5	2b d6		 sub	 edx, esi
  004b7	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  004bc	f7 ea		 imul	 edx
  004be	c1 fa 02	 sar	 edx, 2
  004c1	8b c2		 mov	 eax, edx
  004c3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004c6	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 566  : 	if (SetPDTStream(&vertices[0], vertices.size()))

  004c8	50		 push	 eax
  004c9	56		 push	 esi
  004ca	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  004cf	83 c4 08	 add	 esp, 8
  004d2	84 c0		 test	 al, al
  004d4	0f 84 c0 00 00
	00		 je	 $LN10@RenderCool

; 567  : 	{
; 568  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_DIFFUSE);

  004da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004e0	6a 00		 push	 0
  004e2	6a 02		 push	 2
  004e4	6a 00		 push	 0
  004e6	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 569  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  004eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  004f1	6a 02		 push	 2
  004f3	6a 01		 push	 1
  004f5	6a 00		 push	 0
  004f7	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 570  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_DIFFUSE);

  004fc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00502	6a 00		 push	 0
  00504	6a 05		 push	 5
  00506	6a 00		 push	 0
  00508	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 571  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_SELECTARG1);

  0050d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00513	6a 02		 push	 2
  00515	6a 04		 push	 4
  00517	6a 00		 push	 0
  00519	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 572  : 		STATEMANAGER.SetTexture(0, NULL);

  0051e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00524	6a 00		 push	 0
  00526	6a 00		 push	 0
  00528	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 573  : 		STATEMANAGER.SetTexture(1, NULL);

  0052d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00533	6a 00		 push	 0
  00535	6a 01		 push	 1
  00537	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 574  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  0053c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00542	68 42 01 00 00	 push	 322			; 00000142H
  00547	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 575  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLEFAN, 0, iTriCount);

  0054c	ff 75 c4	 push	 DWORD PTR _iTriCount$1$[ebp]
  0054f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00555	6a 00		 push	 0
  00557	6a 06		 push	 6
  00559	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive

; 576  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  0055e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00564	6a 02		 push	 2
  00566	6a 00		 push	 0
  00568	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 577  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  0056d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00573	6a 01		 push	 1
  00575	6a 00		 push	 0
  00577	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 578  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAARG1);

  0057c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00582	6a 05		 push	 5
  00584	6a 00		 push	 0
  00586	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 579  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAOP);

  0058b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00591	6a 04		 push	 4
  00593	6a 00		 push	 0
  00595	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
$LN10@RenderCool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0059a	85 f6		 test	 esi, esi
  0059c	74 3d		 je	 SHORT $LN31@RenderCool

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0059e	2b fe		 sub	 edi, esi
  005a0	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  005a5	f7 ef		 imul	 edi
  005a7	c1 fa 02	 sar	 edx, 2
  005aa	8b c2		 mov	 eax, edx
  005ac	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  005af	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005b1	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  005b4	8b c6		 mov	 eax, esi
  005b6	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005b9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005bf	72 10		 jb	 SHORT $LN47@RenderCool

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005c1	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  005c4	83 c1 23	 add	 ecx, 35			; 00000023H
  005c7	2b c6		 sub	 eax, esi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005c9	83 c0 fc	 add	 eax, -4			; fffffffcH
  005cc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005cf	77 27		 ja	 SHORT $LN158@RenderCool
$LN47@RenderCool:

; 255  :         ::operator delete(_Ptr, _Bytes);

  005d1	51		 push	 ecx
  005d2	56		 push	 esi
  005d3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005d8	83 c4 08	 add	 esp, 8
$LN31@RenderCool:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 581  : }

  005db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  005de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  005e5	59		 pop	 ecx
  005e6	5f		 pop	 edi
  005e7	5e		 pop	 esi
  005e8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  005eb	33 cd		 xor	 ecx, ebp
  005ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  005f2	8b e5		 mov	 esp, ebp
  005f4	5d		 pop	 ebp
  005f5	c2 10 00	 ret	 16			; 00000010H
$LN158@RenderCool:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005f8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN156@RenderCool:
  005fd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z$1:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _vertices$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USPDTVertex@@V?$allocator@USPDTVertex@@@std@@@std@@QAE@XZ ; std::vector<SPDTVertex,std::allocator<SPDTVertex> >::~vector<SPDTVertex,std::allocator<SPDTVertex> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCoolTimeBox@CPythonGraphic@@QAEXMMMM@Z ENDP	; CPythonGraphic::RenderCoolTimeBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z
_TEXT	SEGMENT
tv886 = -160						; size = 16
tv885 = -144						; size = 16
$T5 = -120						; size = 12
$T6 = -120						; size = 12
$T7 = -120						; size = 12
$T8 = -120						; size = 12
$T9 = -108						; size = 4
_vertices$ = -104					; size = 96
__$ArrayPad$ = -4					; size = 4
_pImageInstance$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_aLeft$ = 20						; size = 4
_aRight$ = 24						; size = 4
?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z PROC ; CPythonGraphic::RenderAlphaImage, COMDAT
; _this$ = ecx

; 451  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00021	33 c5		 xor	 eax, ebp
  00023	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00026	56		 push	 esi
  00027	8b 73 08	 mov	 esi, DWORD PTR _pImageInstance$[ebx]

; 452  : 	assert(pImageInstance != NULL);
; 453  : 
; 454  : 	D3DXCOLOR DiffuseColor1 = D3DXCOLOR(1.0f, 1.0f, 1.0f, aLeft);
; 455  : 	D3DXCOLOR DiffuseColor2 = D3DXCOLOR(1.0f, 1.0f, 1.0f, aRight);
; 456  : 
; 457  : 	const CGraphicTexture * c_pTexture = pImageInstance->GetTexturePointer();

  0002a	8b ce		 mov	 ecx, esi
  0002c	57		 push	 edi
  0002d	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer

; 458  : 
; 459  : 	float width = (float) pImageInstance->GetWidth();

  00032	8b ce		 mov	 ecx, esi
  00034	8b f8		 mov	 edi, eax
  00036	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth

; 460  : 	float height = (float) pImageInstance->GetHeight();

  0003b	8b ce		 mov	 ecx, esi
  0003d	66 0f 6e c0	 movd	 xmm0, eax
  00041	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00044	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR tv885[ebp], xmm0
  0004b	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight

; 461  : 
; 462  : 	c_pTexture->SetTextureStage(0);

  00050	6a 00		 push	 0
  00052	8b cf		 mov	 ecx, edi
  00054	66 0f 6e c0	 movd	 xmm0, eax
  00058	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0005b	f3 0f 11 45 94	 movss	 DWORD PTR $T9[ebp], xmm0
  00060	e8 00 00 00 00	 call	 ?SetTextureStage@CGraphicTexture@@QBEXH@Z ; CGraphicTexture::SetTextureStage

; 463  : 
; 464  : 	float sx = x;
; 465  : 	float sy = y;
; 466  : 	float ex = x + width;

  00065	f3 0f 10 4b 0c	 movss	 xmm1, DWORD PTR _x$[ebx]
  0006a	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv885[ebp]

; 467  : 	float ey = y + height;

  00071	f3 0f 10 53 10	 movss	 xmm2, DWORD PTR _y$[ebx]
  00076	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0007a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000

; 306  :     z = fz;

  00082	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 476  : 	vertices[0].position = TPosition(sx, sy, z);

  00089	8b 45 90	 mov	 eax, DWORD PTR $T8[ebp+8]
  0008c	0f 11 8d 60 ff
	ff ff		 movups	 XMMWORD PTR tv886[ebp], xmm1
  00093	89 45 a0	 mov	 DWORD PTR _vertices$[ebp+8], eax
  00096	0f 29 85 70 ff
	ff ff		 movaps	 XMMWORD PTR tv885[ebp], xmm0
  0009d	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR $T9[ebp]
  000a2	f3 0f 58 c2	 addss	 xmm0, xmm2
  000a6	f3 0f 11 45 94	 movss	 DWORD PTR $T9[ebp], xmm0
  000ab	0f 28 c1	 movaps	 xmm0, xmm1
  000ae	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000b1	0f 57 c9	 xorps	 xmm1, xmm1
  000b4	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 476  : 	vertices[0].position = TPosition(sx, sy, z);

  000bc	66 0f d6 45 98	 movq	 QWORD PTR _vertices$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000c1	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _aLeft$[ebx]
  000c6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000cd	72 07		 jb	 SHORT $LN32@RenderAlph
  000cf	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000d4	eb 29		 jmp	 SHORT $LN31@RenderAlph
$LN32@RenderAlph:
  000d6	0f 2f c8	 comiss	 xmm1, xmm0
  000d9	72 04		 jb	 SHORT $LN30@RenderAlph
  000db	33 c0		 xor	 eax, eax
  000dd	eb 20		 jmp	 SHORT $LN31@RenderAlph
$LN30@RenderAlph:
  000df	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000e3	f3 0f 58 c3	 addss	 xmm0, xmm3
  000e7	e8 00 00 00 00	 call	 __ftol3
  000ec	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  000f4	0f 57 c9	 xorps	 xmm1, xmm1
  000f7	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
$LN31@RenderAlph:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 480  : 	vertices[1].position = TPosition(ex, sy, z);

  000ff	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv885[ebp]
  00106	f3 0f 10 63 10	 movss	 xmm4, DWORD PTR _y$[ebx]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0010b	c1 e0 18	 shl	 eax, 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 480  : 	vertices[1].position = TPosition(ex, sy, z);

  0010e	0f 14 c4	 unpcklps xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00111	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 480  : 	vertices[1].position = TPosition(ex, sy, z);

  00116	66 0f d6 45 b0	 movq	 QWORD PTR _vertices$[ebp+24], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0011b	f3 0f 10 43 18	 movss	 xmm0, DWORD PTR _aRight$[ebx]
  00120	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 477  : 	vertices[0].diffuse = DiffuseColor1;

  00127	89 45 a4	 mov	 DWORD PTR _vertices$[ebp+12], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0012a	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 480  : 	vertices[1].position = TPosition(ex, sy, z);

  00131	8b 45 90	 mov	 eax, DWORD PTR $T7[ebp+8]
  00134	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  0013b	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00142	89 45 b8	 mov	 DWORD PTR _vertices$[ebp+32], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00145	72 07		 jb	 SHORT $LN54@RenderAlph
  00147	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0014c	eb 16		 jmp	 SHORT $LN53@RenderAlph
$LN54@RenderAlph:
  0014e	0f 2f c8	 comiss	 xmm1, xmm0
  00151	72 04		 jb	 SHORT $LN52@RenderAlph
  00153	33 c0		 xor	 eax, eax
  00155	eb 0d		 jmp	 SHORT $LN53@RenderAlph
$LN52@RenderAlph:
  00157	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0015b	f3 0f 58 c3	 addss	 xmm0, xmm3
  0015f	e8 00 00 00 00	 call	 __ftol3
$LN53@RenderAlph:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 484  : 	vertices[2].position = TPosition(sx, ey, z);

  00164	0f 10 85 60 ff
	ff ff		 movups	 xmm0, XMMWORD PTR tv886[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0016b	c1 e0 18	 shl	 eax, 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 484  : 	vertices[2].position = TPosition(sx, ey, z);

  0016e	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR $T9[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00173	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 484  : 	vertices[2].position = TPosition(sx, ey, z);

  00178	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0017b	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 484  : 	vertices[2].position = TPosition(sx, ey, z);

  0017e	66 0f d6 45 c8	 movq	 QWORD PTR _vertices$[ebp+48], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00183	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR _aLeft$[ebx]
  00188	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 481  : 	vertices[1].diffuse = DiffuseColor2;

  0018f	89 45 bc	 mov	 DWORD PTR _vertices$[ebp+36], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00192	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 484  : 	vertices[2].position = TPosition(sx, ey, z);

  00199	8b 45 90	 mov	 eax, DWORD PTR $T6[ebp+8]
  0019c	c7 45 c0 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+40], 1065353216 ; 3f800000H
  001a3	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  001aa	89 45 d0	 mov	 DWORD PTR _vertices$[ebp+56], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001ad	72 07		 jb	 SHORT $LN76@RenderAlph
  001af	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001b4	eb 21		 jmp	 SHORT $LN75@RenderAlph
$LN76@RenderAlph:
  001b6	0f 2f c8	 comiss	 xmm1, xmm0
  001b9	72 04		 jb	 SHORT $LN74@RenderAlph
  001bb	33 c0		 xor	 eax, eax
  001bd	eb 18		 jmp	 SHORT $LN75@RenderAlph
$LN74@RenderAlph:
  001bf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001c7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001cf	e8 00 00 00 00	 call	 __ftol3
  001d4	0f 57 c9	 xorps	 xmm1, xmm1
$LN75@RenderAlph:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 488  : 	vertices[3].position = TPosition(ex, ey, z);

  001d7	0f 28 85 70 ff
	ff ff		 movaps	 xmm0, XMMWORD PTR tv885[ebp]
  001de	f3 0f 10 55 94	 movss	 xmm2, DWORD PTR $T9[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001e3	c1 e0 18	 shl	 eax, 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 488  : 	vertices[3].position = TPosition(ex, ey, z);

  001e6	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  001e9	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 488  : 	vertices[3].position = TPosition(ex, ey, z);

  001ee	66 0f d6 45 e0	 movq	 QWORD PTR _vertices$[ebp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001f3	f3 0f 10 43 18	 movss	 xmm0, DWORD PTR _aRight$[ebx]
  001f8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 485  : 	vertices[2].diffuse = DiffuseColor1;

  001ff	89 45 d4	 mov	 DWORD PTR _vertices$[ebp+60], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00202	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 488  : 	vertices[3].position = TPosition(ex, ey, z);

  00209	8b 45 90	 mov	 eax, DWORD PTR $T5[ebp+8]
  0020c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  00213	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+68], 1065353216 ; 3f800000H
  0021a	89 45 e8	 mov	 DWORD PTR _vertices$[ebp+80], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0021d	72 07		 jb	 SHORT $LN98@RenderAlph
  0021f	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00224	eb 1e		 jmp	 SHORT $LN97@RenderAlph
$LN98@RenderAlph:
  00226	0f 2f c8	 comiss	 xmm1, xmm0
  00229	72 04		 jb	 SHORT $LN96@RenderAlph
  0022b	33 c0		 xor	 eax, eax
  0022d	eb 15		 jmp	 SHORT $LN97@RenderAlph
$LN96@RenderAlph:
  0022f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00237	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0023f	e8 00 00 00 00	 call	 __ftol3
$LN97@RenderAlph:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 492  : 	STATEMANAGER.SetFVF(ms_pntVS);

  00244	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_pntVS@CGraphicBase@@1KA ; CGraphicBase::ms_pntVS
  0024a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00250	c1 e0 18	 shl	 eax, 24			; 00000018H
  00253	0d ff ff ff 00	 or	 eax, 16777215		; 00ffffffH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 490  : 	vertices[3].texCoord = TTextureCoordinate(eu, ev);

  00258	c7 45 f0 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+88], 1065353216 ; 3f800000H
  0025f	89 45 ec	 mov	 DWORD PTR _vertices$[ebp+84], eax
  00262	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+92], 1065353216 ; 3f800000H

; 492  : 	STATEMANAGER.SetFVF(ms_pntVS);

  00269	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 493  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 494  : 	CGraphicBase::SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  0026e	6a 05		 push	 5
  00270	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 495  : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  00275	8d 45 98	 lea	 eax, DWORD PTR _vertices$[ebp]
  00278	6a 04		 push	 4
  0027a	50		 push	 eax
  0027b	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00280	83 c4 0c	 add	 esp, 12			; 0000000cH
  00283	84 c0		 test	 al, al
  00285	74 17		 je	 SHORT $LN2@RenderAlph

; 496  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  00287	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028d	6a 00		 push	 0
  0028f	6a 02		 push	 2
  00291	6a 00		 push	 0
  00293	6a 04		 push	 4
  00295	6a 00		 push	 0
  00297	6a 04		 push	 4
  00299	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN2@RenderAlph:

; 497  : }

  0029e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a1	5f		 pop	 edi
  002a2	33 cd		 xor	 ecx, ebp
  002a4	5e		 pop	 esi
  002a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002aa	8b e5		 mov	 esp, ebp
  002ac	5d		 pop	 ebp
  002ad	8b e3		 mov	 esp, ebx
  002af	5b		 pop	 ebx
  002b0	c2 14 00	 ret	 20			; 00000014H
?RenderAlphaImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MMMM@Z ENDP ; CPythonGraphic::RenderAlphaImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z
_TEXT	SEGMENT
_width$1$ = -4						; size = 4
_height$1$ = 8						; size = 4
_pImageInstance$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z PROC ; CPythonGraphic::RenderImage, COMDAT
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 429  : 	assert(pImageInstance != NULL);
; 430  : 
; 431  : 	//SetColorRenderState();
; 432  : 	const CGraphicTexture * c_pTexture = pImageInstance->GetTexturePointer();

  00006	8b 75 08	 mov	 esi, DWORD PTR _pImageInstance$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	57		 push	 edi
  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer

; 433  : 
; 434  : 	float width = (float) pImageInstance->GetWidth();

  00013	8b ce		 mov	 ecx, esi
  00015	8b f8		 mov	 edi, eax
  00017	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetWidth

; 435  : 	float height = (float) pImageInstance->GetHeight();

  0001c	8b ce		 mov	 ecx, esi
  0001e	66 0f 6e c0	 movd	 xmm0, eax
  00022	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00025	f3 0f 11 45 fc	 movss	 DWORD PTR _width$1$[ebp], xmm0
  0002a	e8 00 00 00 00	 call	 ?GetHeight@CGraphicImageInstance@@QAEHXZ ; CGraphicImageInstance::GetHeight

; 436  : 
; 437  : 	c_pTexture->SetTextureStage(0);

  0002f	6a 00		 push	 0
  00031	8b cf		 mov	 ecx, edi
  00033	66 0f 6e c0	 movd	 xmm0, eax
  00037	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0003a	f3 0f 11 45 08	 movss	 DWORD PTR _height$1$[ebp], xmm0
  0003f	e8 00 00 00 00	 call	 ?SetTextureStage@CGraphicTexture@@QBEXH@Z ; CGraphicTexture::SetTextureStage

; 438  : 
; 439  : 	RenderTextureBox(x,

  00044	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _height$1$[ebp]
  00049	83 ec 24	 sub	 esp, 36			; 00000024H
  0004c	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00054	0f 28 c2	 movaps	 xmm0, xmm2
  00057	f3 0f 58 c1	 addss	 xmm0, xmm1
  0005b	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _width$1$[ebp]
  00060	8b cb		 mov	 ecx, ebx
  00062	f3 0f 5e c2	 divss	 xmm0, xmm2
  00066	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  0006c	0f 28 c3	 movaps	 xmm0, xmm3
  0006f	f3 0f 58 c1	 addss	 xmm0, xmm1
  00073	f3 0f 5e c3	 divss	 xmm0, xmm3
  00077	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0007d	0f 28 c1	 movaps	 xmm0, xmm1
  00080	f3 0f 5e c2	 divss	 xmm0, xmm2
  00084	f3 0f 5e cb	 divss	 xmm1, xmm3
  00088	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0008e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _x$[ebp]
  00093	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00099	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _y$[ebp]
  000a2	f3 0f 58 d1	 addss	 xmm2, xmm1
  000a6	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  000ae	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  000b4	f3 0f 11 5c 24
	08		 movss	 DWORD PTR [esp+8], xmm3
  000ba	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c5	e8 00 00 00 00	 call	 ?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z ; CScreen::RenderTextureBox
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx

; 440  : 					 y,
; 441  : 					 x + width,
; 442  : 					 y + height,
; 443  : 					 0.0f,
; 444  : 					 0.5f / width, 
; 445  : 					 0.5f / height, 
; 446  : 					 (width + 0.5f) / width, 
; 447  : 					 (height + 0.5f) / height);
; 448  : }

  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 0c 00	 ret	 12			; 0000000cH
?RenderImage@CPythonGraphic@@QAEXPAVCGraphicImageInstance@@MM@Z ENDP ; CPythonGraphic::RenderImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z PROC		; CPythonGraphic::RenderUpButton, COMDAT
; _this$ = ecx

; 602  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 603  : 	RenderBox2d(sx, sy, ex, ey);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0000d	56		 push	 esi
  0000e	83 ec 14	 sub	 esp, 20			; 00000014H
  00011	8b f1		 mov	 esi, ecx
  00013	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0001b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00021	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00026	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00031	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	e8 00 00 00 00	 call	 ?RenderBox2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBox2d

; 604  : 
; 605  : 	SetDiffuseColor(m_lightColor);

  00041	ff 76 08	 push	 DWORD PTR [esi+8]
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 606  : 	RenderLine2d(sx, sy, ex, sy);

  0004b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00050	83 ec 14	 sub	 esp, 20			; 00000014H
  00053	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00062	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00068	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0006e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 607  : 	RenderLine2d(sx, sy, sx, ey);

  00083	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00088	83 ec 14	 sub	 esp, 20			; 00000014H
  0008b	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0009a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000a0	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000a5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ab	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 608  : 
; 609  : 	SetDiffuseColor(m_darkColor);

  000bb	ff 76 0c	 push	 DWORD PTR [esi+12]
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 610  : 	RenderLine2d(sx, ey, ex, ey);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000ca	83 ec 14	 sub	 esp, 20			; 00000014H
  000cd	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  000d2	8b ce		 mov	 ecx, esi
  000d4	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  000dc	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000e2	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  000e8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ee	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 611  : 	RenderLine2d(ex, sy, ex, ey);

  000fd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00102	83 ec 14	 sub	 esp, 20			; 00000014H
  00105	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  0010a	8b ce		 mov	 ecx, esi
  0010c	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00114	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0011a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0011f	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00125	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0012b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00130	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00135	5e		 pop	 esi

; 612  : }

  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?RenderUpButton@CPythonGraphic@@QAEXMMMM@Z ENDP		; CPythonGraphic::RenderUpButton
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z PROC	; CPythonGraphic::RenderDownButton, COMDAT
; _this$ = ecx

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 590  : 	RenderBox2d(sx, sy, ex, ey);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  0000d	56		 push	 esi
  0000e	83 ec 14	 sub	 esp, 20			; 00000014H
  00011	8b f1		 mov	 esi, ecx
  00013	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0001b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00021	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00026	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00031	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00037	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003c	e8 00 00 00 00	 call	 ?RenderBox2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBox2d

; 591  : 
; 592  : 	SetDiffuseColor(m_darkColor);

  00041	ff 76 0c	 push	 DWORD PTR [esi+12]
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 593  : 	RenderLine2d(sx, sy, ex, sy);

  0004b	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00050	83 ec 14	 sub	 esp, 20			; 00000014H
  00053	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00062	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00068	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0006e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 594  : 	RenderLine2d(sx, sy, sx, ey);

  00083	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00088	83 ec 14	 sub	 esp, 20			; 00000014H
  0008b	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _sy$[ebp]
  00090	8b ce		 mov	 ecx, esi
  00092	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0009a	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000a0	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000a5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000ab	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b6	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 595  : 
; 596  : 	SetDiffuseColor(m_lightColor);

  000bb	ff 76 08	 push	 DWORD PTR [esi+8]
  000be	8b ce		 mov	 ecx, esi
  000c0	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXK@Z ; CScreen::SetDiffuseColor

; 597  : 	RenderLine2d(sx, ey, ex, ey);

  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  000ca	83 ec 14	 sub	 esp, 20			; 00000014H
  000cd	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  000d2	8b ce		 mov	 ecx, esi
  000d4	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  000dc	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000e2	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  000e8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000ee	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  000f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f8	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 598  : 	RenderLine2d(ex, sy, ex, ey);

  000fd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00102	83 ec 14	 sub	 esp, 20			; 00000014H
  00105	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _ex$[ebp]
  0010a	8b ce		 mov	 ecx, esi
  0010c	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00114	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0011a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0011f	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00125	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0012b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00130	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00135	5e		 pop	 esi

; 599  : }

  00136	5d		 pop	 ebp
  00137	c2 10 00	 ret	 16			; 00000010H
?RenderDownButton@CPythonGraphic@@QAEXMMMM@Z ENDP	; CPythonGraphic::RenderDownButton
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GenerateColor@CPythonGraphic@@QAEJMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?GenerateColor@CPythonGraphic@@QAEJMMMM@Z PROC		; CPythonGraphic::GenerateColor, COMDAT
; _this$ = ecx

; 584  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 585  : 	return GetColor(r, g, b, a);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00011	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor

; 586  : }

  00036	5d		 pop	 ebp
  00037	c2 10 00	 ret	 16			; 00000010H
?GenerateColor@CPythonGraphic@@QAEJMMMM@Z ENDP		; CPythonGraphic::GenerateColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?RestoreViewport@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?RestoreViewport@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::RestoreViewport, COMDAT
; _this$ = ecx

; 129  : 	ms_lpd3dDevice->SetViewport(&m_backupViewport);

  00000	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00006	8d 81 84 00 00
	00		 lea	 eax, DWORD PTR [ecx+132]
  0000c	56		 push	 esi
  0000d	50		 push	 eax
  0000e	52		 push	 edx
  0000f	8b 32		 mov	 esi, DWORD PTR [edx]
  00011	ff 96 bc 00 00
	00		 call	 DWORD PTR [esi+188]
  00017	5e		 pop	 esi

; 130  : }

  00018	c3		 ret	 0
?RestoreViewport@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::RestoreViewport
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetViewport@CPythonGraphic@@QAEXMMMM@Z
_TEXT	SEGMENT
_ViewPort$ = -28					; size = 24
__$ArrayPad$ = -4					; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fWidth$ = 16						; size = 4
_fHeight$ = 20						; size = 4
?SetViewport@CPythonGraphic@@QAEXMMMM@Z PROC		; CPythonGraphic::SetViewport, COMDAT
; _this$ = ecx

; 106  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 107  : 	ms_lpd3dDevice->GetViewport(&m_backupViewport);

  00010	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00016	8d 81 84 00 00
	00		 lea	 eax, DWORD PTR [ecx+132]
  0001c	56		 push	 esi
  0001d	50		 push	 eax
  0001e	52		 push	 edx
  0001f	8b 32		 mov	 esi, DWORD PTR [edx]
  00021	ff 96 c0 00 00
	00		 call	 DWORD PTR [esi+192]

; 108  : 
; 109  : 	D3DVIEWPORT9 ViewPort;
; 110  : 	ViewPort.X = fx;

  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0002c	e8 00 00 00 00	 call	 __ftol3

; 111  : 	ViewPort.Y = fy;

  00031	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00036	89 45 e4	 mov	 DWORD PTR _ViewPort$[ebp], eax
  00039	e8 00 00 00 00	 call	 __ftol3

; 112  : 	ViewPort.Width = fWidth;

  0003e	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fWidth$[ebp]
  00043	89 45 e8	 mov	 DWORD PTR _ViewPort$[ebp+4], eax
  00046	e8 00 00 00 00	 call	 __ftol3

; 113  : 	ViewPort.Height = fHeight;

  0004b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  00050	89 45 ec	 mov	 DWORD PTR _ViewPort$[ebp+8], eax
  00053	e8 00 00 00 00	 call	 __ftol3

; 114  : 	ViewPort.MinZ = 0.0f;
; 115  : 	ViewPort.MaxZ = 1.0f;
; 116  : 	if (FAILED(

  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0005e	8d 55 e4	 lea	 edx, DWORD PTR _ViewPort$[ebp]
  00061	89 45 f0	 mov	 DWORD PTR _ViewPort$[ebp+12], eax
  00064	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _ViewPort$[ebp+16], 0
  0006b	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _ViewPort$[ebp+20], 1065353216 ; 3f800000H
  00072	8b 01		 mov	 eax, DWORD PTR [ecx]
  00074	52		 push	 edx
  00075	51		 push	 ecx
  00076	ff 90 bc 00 00
	00		 call	 DWORD PTR [eax+188]
  0007c	5e		 pop	 esi
  0007d	85 c0		 test	 eax, eax
  0007f	79 19		 jns	 SHORT $LN2@SetViewpor

; 117  : 		ms_lpd3dDevice->SetViewport(&ViewPort)
; 118  : 	))
; 119  : 	{
; 120  : 		Tracef("CPythonGraphic::SetViewport(%d, %d, %d, %d) - Error", 

  00081	ff 75 f0	 push	 DWORD PTR _ViewPort$[ebp+12]
  00084	ff 75 ec	 push	 DWORD PTR _ViewPort$[ebp+8]
  00087	ff 75 e8	 push	 DWORD PTR _ViewPort$[ebp+4]
  0008a	ff 75 e4	 push	 DWORD PTR _ViewPort$[ebp]
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@BKCCNGJK@CPythonGraphic?3?3SetViewport?$CI?$CFd?0@
  00092	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00097	83 c4 14	 add	 esp, 20			; 00000014H
$LN2@SetViewpor:

; 121  : 			ViewPort.X, ViewPort.Y,
; 122  : 			ViewPort.Width, ViewPort.Height
; 123  : 		);
; 124  : 	}
; 125  : }

  0009a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009d	33 cd		 xor	 ecx, ebp
  0009f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 10 00	 ret	 16			; 00000010H
?SetViewport@CPythonGraphic@@QAEXMMMM@Z ENDP		; CPythonGraphic::SetViewport
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetOmniLight@CPythonGraphic@@QAEXUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_Material$ = -176					; size = 68
_Light$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_lightPosition$ = 8					; size = 12
?SetOmniLight@CPythonGraphic@@QAEXUD3DXVECTOR3@@@Z PROC	; CPythonGraphic::SetOmniLight, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 63   : 	// Set up a material
; 64   : 	D3DMATERIAL9 Material;
; 65   : 	Material.Ambient = D3DXCOLOR(0.3f, 0.3f, 0.3f, 1.0f);

  00013	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003e99999a3e99999a3e99999a

; 66   : 	Material.Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
; 67   : 	Material.Emissive = D3DXCOLOR(0.1f, 0.1f, 0.1f, 1.0f);
; 68   : 	STATEMANAGER.SetMaterial(&Material);

  0001a	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _Material$[ebp]
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	0f 11 85 60 ff
	ff ff		 movups	 XMMWORD PTR _Material$[ebp+16], xmm0
  0002d	50		 push	 eax
  0002e	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00035	0f 11 85 50 ff
	ff ff		 movups	 XMMWORD PTR _Material$[ebp], xmm0
  0003c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003dcccccd3dcccccd3dcccccd
  00043	0f 11 45 80	 movups	 XMMWORD PTR _Material$[ebp+48], xmm0
  00047	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ; CStateManager::SetMaterial

; 69   : 
; 70   : 	D3DLIGHT9 Light;
; 71   : 	Light.Type = D3DLIGHT_SPOT;
; 72   : #ifdef ENABLE_RT_EXTENSION
; 73   : 	Light.Position = lightPosition;

  0004c	f3 0f 7e 45 08	 movq	 xmm0, QWORD PTR _lightPosition$[ebp]

; 74   : #else
; 75   : 	Light.Position = D3DXVECTOR3(50.0f, 150.0f, 350.0f);
; 76   : #endif
; 77   : 	Light.Direction = D3DXVECTOR3(-0.15f, -0.3f, -0.9f);
; 78   : 	Light.Theta = D3DXToRadian(30.0f);
; 79   : 	Light.Phi = D3DXToRadian(45.0f);
; 80   : 	Light.Falloff = 1.0f;
; 81   : 	Light.Attenuation0 = 0.0f;
; 82   : 	Light.Attenuation1 = 0.005f;
; 83   : 	Light.Attenuation2 = 0.0f;
; 84   : 	Light.Diffuse.r = 1.0f;
; 85   : 	Light.Diffuse.g = 1.0f;
; 86   : 	Light.Diffuse.b = 1.0f;
; 87   : 	Light.Diffuse.a = 1.0f;
; 88   : 	Light.Ambient.r = 1.0f;
; 89   : 	Light.Ambient.g = 1.0f;
; 90   : 	Light.Ambient.b = 1.0f;
; 91   : 	Light.Ambient.a = 1.0f;
; 92   : 	Light.Range = 500.0f;
; 93   : 	ms_lpd3dDevice->SetLight(0, &Light);

  00051	8d 55 94	 lea	 edx, DWORD PTR _Light$[ebp]
  00054	8b 45 10	 mov	 eax, DWORD PTR _lightPosition$[ebp+8]
  00057	66 0f d6 45 c8	 movq	 QWORD PTR _Light$[ebp+52], xmm0
  0005c	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000003ba3d70a000000003f800000
  00063	0f 11 45 e4	 movups	 XMMWORD PTR _Light$[ebp+80], xmm0
  00067	89 45 d0	 mov	 DWORD PTR _Light$[ebp+60], eax
  0006a	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00076	0f 11 45 98	 movups	 XMMWORD PTR _Light$[ebp+4], xmm0
  0007a	52		 push	 edx
  0007b	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00082	c7 45 94 02 00
	00 00		 mov	 DWORD PTR _Light$[ebp], 2
  00089	c7 45 d4 9a 99
	19 be		 mov	 DWORD PTR _Light$[ebp+64], -1105618534 ; be19999aH
  00090	c7 45 d8 9a 99
	99 be		 mov	 DWORD PTR _Light$[ebp+68], -1097229926 ; be99999aH
  00097	c7 45 dc 66 66
	66 bf		 mov	 DWORD PTR _Light$[ebp+72], -1083808154 ; bf666666H
  0009e	c7 45 f4 92 0a
	06 3f		 mov	 DWORD PTR _Light$[ebp+96], 1057360530 ; 3f060a92H
  000a5	c7 45 f8 db 0f
	49 3f		 mov	 DWORD PTR _Light$[ebp+100], 1061752795 ; 3f490fdbH
  000ac	0f 11 45 b8	 movups	 XMMWORD PTR _Light$[ebp+36], xmm0
  000b0	c7 45 e0 00 00
	fa 43		 mov	 DWORD PTR _Light$[ebp+76], 1140457472 ; 43fa0000H
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	6a 00		 push	 0
  000bb	50		 push	 eax
  000bc	ff 91 cc 00 00
	00		 call	 DWORD PTR [ecx+204]

; 94   : 	ms_lpd3dDevice->LightEnable(0, TRUE);

  000c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000c7	6a 01		 push	 1
  000c9	6a 00		 push	 0
  000cb	50		 push	 eax
  000cc	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ce	ff 91 d4 00 00
	00		 call	 DWORD PTR [ecx+212]

; 95   : 
; 96   : 	Light.Type = D3DLIGHT_POINT;
; 97   : 	Light.Position = D3DXVECTOR3(0.0f, 200.0f, 200.0f);
; 98   : 	Light.Attenuation0 = 0.1f;
; 99   : 	Light.Attenuation1 = 0.01f;
; 100  : 	Light.Attenuation2 = 0.0f;
; 101  : 	ms_lpd3dDevice->SetLight(1, &Light);

  000d4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000d9	8d 55 94	 lea	 edx, DWORD PTR _Light$[ebp]
  000dc	52		 push	 edx
  000dd	c7 45 94 01 00
	00 00		 mov	 DWORD PTR _Light$[ebp], 1
  000e4	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _Light$[ebp+52], 0
  000eb	c7 45 cc 00 00
	48 43		 mov	 DWORD PTR _Light$[ebp+56], 1128792064 ; 43480000H
  000f2	c7 45 d0 00 00
	48 43		 mov	 DWORD PTR _Light$[ebp+60], 1128792064 ; 43480000H
  000f9	c7 45 e8 cd cc
	cc 3d		 mov	 DWORD PTR _Light$[ebp+84], 1036831949 ; 3dcccccdH
  00100	c7 45 ec 0a d7
	23 3c		 mov	 DWORD PTR _Light$[ebp+88], 1008981770 ; 3c23d70aH
  00107	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _Light$[ebp+92], 0
  0010e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00110	6a 01		 push	 1
  00112	50		 push	 eax
  00113	ff 91 cc 00 00
	00		 call	 DWORD PTR [ecx+204]

; 102  : 	ms_lpd3dDevice->LightEnable(1, TRUE);

  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0011e	6a 01		 push	 1
  00120	6a 01		 push	 1
  00122	50		 push	 eax
  00123	8b 08		 mov	 ecx, DWORD PTR [eax]
  00125	ff 91 d4 00 00
	00		 call	 DWORD PTR [ecx+212]

; 103  : }

  0012b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0012e	33 cd		 xor	 ecx, ebp
  00130	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 0c 00	 ret	 12			; 0000000cH
?SetOmniLight@CPythonGraphic@@QAEXUD3DXVECTOR3@@@Z ENDP	; CPythonGraphic::SetOmniLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetCursorPosition@CPythonGraphic@@QAEXHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetCursorPosition@CPythonGraphic@@QAEXHH@Z PROC	; CPythonGraphic::SetCursorPosition, COMDAT
; _this$ = ecx

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 54   : 	CScreen::SetCursorPosition(x, y, ms_iWidth, ms_iHeight);

  00003	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iHeight@CGraphicBase@@1HA ; CGraphicBase::ms_iHeight
  00009	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iWidth@CGraphicBase@@1HA ; CGraphicBase::ms_iWidth
  0000f	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00012	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00015	e8 00 00 00 00	 call	 ?SetCursorPosition@CScreen@@QAEXHHHH@Z ; CScreen::SetCursorPosition

; 55   : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetCursorPosition@CPythonGraphic@@QAEXHH@Z ENDP	; CPythonGraphic::SetCursorPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetGameRenderState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?SetGameRenderState@CPythonGraphic@@QAEXXZ PROC		; CPythonGraphic::SetGameRenderState, COMDAT
; _this$ = ecx

; 44   : 	STATEMANAGER.SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 02		 push	 2
  00008	6a 06		 push	 6
  0000a	6a 00		 push	 0
  0000c	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 45   : 	STATEMANAGER.SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);

  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00017	6a 02		 push	 2
  00019	6a 05		 push	 5
  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 46   : 	STATEMANAGER.SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_LINEAR);

  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00028	6a 02		 push	 2
  0002a	6a 07		 push	 7
  0002c	6a 00		 push	 0
  0002e	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 47   : 
; 48   : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00039	6a 00		 push	 0
  0003b	6a 1b		 push	 27			; 0000001bH
  0003d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 49   : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, TRUE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 01		 push	 1
  0004a	68 89 00 00 00	 push	 137			; 00000089H
  0004f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 50   : }

  00054	c3		 ret	 0
?SetGameRenderState@CPythonGraphic@@QAEXXZ ENDP		; CPythonGraphic::SetGameRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
tv187 = -4						; size = 4
?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ PROC	; CPythonGraphic::SetInterfaceRenderState, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 24   : 	STATEMANAGER.SetTransform(D3DTS_PROJECTION, &ms_matIdentity);

  00005	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  0000a	8b f1		 mov	 esi, ecx
  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00012	6a 03		 push	 3
  00014	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 25   :  	STATEMANAGER.SetTransform(D3DTS_VIEW, &ms_matIdentity);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001f	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00024	6a 02		 push	 2
  00026	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 26   : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  0002b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00031	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00036	68 00 01 00 00	 push	 256			; 00000100H
  0003b	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 27   : 
; 28   : 	STATEMANAGER.SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_NONE);

  00040	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00046	6a 00		 push	 0
  00048	6a 06		 push	 6
  0004a	6a 00		 push	 0
  0004c	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 29   : 	STATEMANAGER.SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_NONE);

  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00057	6a 00		 push	 0
  00059	6a 05		 push	 5
  0005b	6a 00		 push	 0
  0005d	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 30   : 	STATEMANAGER.SetSamplerState(0, D3DSAMP_MIPFILTER, D3DTEXF_NONE);

  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00068	6a 00		 push	 0
  0006a	6a 07		 push	 7
  0006c	6a 00		 push	 0
  0006e	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 31   : 
; 32   : 	STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  00073	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00079	6a 01		 push	 1
  0007b	6a 1b		 push	 27			; 0000001bH
  0007d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 33   : 	STATEMANAGER.SetRenderState(D3DRS_SRCBLEND,	D3DBLEND_SRCALPHA);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00088	6a 05		 push	 5
  0008a	6a 13		 push	 19			; 00000013H
  0008c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 34   : 	STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00097	6a 06		 push	 6
  00099	6a 14		 push	 20			; 00000014H
  0009b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 35   : 
; 36   : 	CPythonGraphic::Instance().SetBlendOperation();

  000a0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000a6	e8 00 00 00 00	 call	 ?SetBlendOperation@CScreen@@QAEXXZ ; CScreen::SetBlendOperation

; 37   : 	CPythonGraphic::Instance().SetOrtho2D(ms_iWidth, ms_iHeight, GetOrthoDepth());

  000ab	8b ce		 mov	 ecx, esi
  000ad	e8 00 00 00 00	 call	 ?GetOrthoDepth@CPythonGraphic@@QAEMXZ ; CPythonGraphic::GetOrthoDepth
  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000b8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000bb	d9 5d fc	 fstp	 DWORD PTR tv187[ebp]
  000be	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv187[ebp]
  000c3	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c9	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?ms_iHeight@CGraphicBase@@1HA ; CGraphicBase::ms_iHeight
  000d1	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000d4	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000da	66 0f 6e 05 00
	00 00 00	 movd	 xmm0, DWORD PTR ?ms_iWidth@CGraphicBase@@1HA ; CGraphicBase::ms_iWidth
  000e2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	e8 00 00 00 00	 call	 ?SetOrtho2D@CGraphicBase@@QAEXMMM@Z ; CGraphicBase::SetOrtho2D

; 38   : 
; 39   : 	STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f5	6a 00		 push	 0
  000f7	68 89 00 00 00	 push	 137			; 00000089H
  000fc	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  00101	5e		 pop	 esi

; 40   : }

  00102	8b e5		 mov	 esp, ebp
  00104	5d		 pop	 ebp
  00105	c3		 ret	 0
?SetInterfaceRenderState@CPythonGraphic@@QAEXXZ ENDP	; CPythonGraphic::SetInterfaceRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GetOrthoDepth@CPythonGraphic@@QAEMXZ
_TEXT	SEGMENT
?GetOrthoDepth@CPythonGraphic@@QAEMXZ PROC		; CPythonGraphic::GetOrthoDepth, COMDAT
; _this$ = ecx

; 19   : 	return m_fOrthoDepth;

  00000	d9 81 9c 00 00
	00		 fld	 DWORD PTR [ecx+156]

; 20   : }

  00006	c3		 ret	 0
?GetOrthoDepth@CPythonGraphic@@QAEMXZ ENDP		; CPythonGraphic::GetOrthoDepth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?GetD3D@CPythonGraphic@@QAEPAUIDirect3D9@@XZ
_TEXT	SEGMENT
?GetD3D@CPythonGraphic@@QAEPAUIDirect3D9@@XZ PROC	; CPythonGraphic::GetD3D, COMDAT
; _this$ = ecx

; 14   : 	return ms_lpd3d;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D9@@A ; CGraphicBase::ms_lpd3d

; 15   : }

  00005	c3		 ret	 0
?GetD3D@CPythonGraphic@@QAEPAUIDirect3D9@@XZ ENDP	; CPythonGraphic::GetD3D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\stack
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?PopState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?PopState@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::PopState, COMDAT
; _this$ = ecx

; 408  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1045 :         return _Mysize() == 0;

  00009	83 7e 20 00	 cmp	 DWORD PTR [esi+32], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 409  : 	if (m_stateStack.empty())

  0000d	74 7e		 je	 SHORT $LN33@PopState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0000f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00012	03 46 1c	 add	 eax, DWORD PTR [esi+28]

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00015	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]

; 1105 :         return *_Prev_iter(_Unchecked_end());

  00018	48		 dec	 eax

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00019	49		 dec	 ecx
  0001a	23 c8		 and	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\stack

; 97   :         return c.back();

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001f	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 421  : 	UpdatePipeLineMatrix();

  00022	8b ce		 mov	 ecx, esi
  00024	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]
  00028	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A, xmm0
  0002f	0f 10 40 50	 movups	 xmm0, XMMWORD PTR [eax+80]
  00033	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+16, xmm0
  0003a	0f 10 40 60	 movups	 xmm0, XMMWORD PTR [eax+96]
  0003e	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+32, xmm0
  00045	0f 10 40 70	 movups	 xmm0, XMMWORD PTR [eax+112]
  00049	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+48, xmm0
  00050	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00053	0f 11 05 00 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A, xmm0
  0005a	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0005e	0f 11 05 10 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+16, xmm0
  00065	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00069	0f 11 05 20 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+32, xmm0
  00070	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  00074	0f 11 05 30 00
	00 00		 movups	 XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+48, xmm0
  0007b	e8 00 00 00 00	 call	 ?UpdatePipeLineMatrix@CGraphicBase@@IAEXXZ ; CGraphicBase::UpdatePipeLineMatrix
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1208 :         if (--_Mysize() == 0) {

  00080	83 46 20 ff	 add	 DWORD PTR [esi+32], -1
  00084	75 07		 jne	 SHORT $LN33@PopState

; 1209 :             _Myoff() = 0;

  00086	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
$LN33@PopState:
  0008d	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 425  : }

  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c3		 ret	 0
?PopState@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::PopState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?PushState@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
tv358 = -136						; size = 4
_curState$ = -132					; size = 128
__$ArrayPad$ = -4					; size = 4
?PushState@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::PushState, COMDAT
; _this$ = ecx

; 396  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 00 00
	00		 sub	 esp, 136		; 00000088H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 399  : 	curState.matProj = ms_matProj;

  00013	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1149 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  0001a	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 396  : {

  0001d	53		 push	 ebx

; 399  : 	curState.matProj = ms_matProj;

  0001e	0f 11 45 bc	 movups	 XMMWORD PTR _curState$[ebp+64], xmm0

; 401  : 	//STATEMANAGER.SaveTransform(D3DTS_WORLD, &m_SaveWorldMatrix);
; 402  : 
; 403  : 	m_stateStack.push(curState);

  00022	8d 59 10	 lea	 ebx, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1149 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00025	40		 inc	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 399  : 	curState.matProj = ms_matProj;

  00026	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+16
  0002d	56		 push	 esi
  0002e	57		 push	 edi
  0002f	0f 11 45 cc	 movups	 XMMWORD PTR _curState$[ebp+80], xmm0
  00033	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+32
  0003a	0f 11 45 dc	 movups	 XMMWORD PTR _curState$[ebp+96], xmm0
  0003e	0f 10 05 30 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+48
  00045	0f 11 45 ec	 movups	 XMMWORD PTR _curState$[ebp+112], xmm0

; 400  : 	curState.matView = ms_matView;

  00049	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A
  00050	0f 11 85 7c ff
	ff ff		 movups	 XMMWORD PTR _curState$[ebp], xmm0
  00057	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+16
  0005e	0f 11 45 8c	 movups	 XMMWORD PTR _curState$[ebp+16], xmm0
  00062	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+32
  00069	0f 11 45 9c	 movups	 XMMWORD PTR _curState$[ebp+32], xmm0
  0006d	0f 10 05 30 00
	00 00		 movups	 xmm0, XMMWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+48
  00074	0f 11 45 ac	 movups	 XMMWORD PTR _curState$[ebp+48], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1149 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00078	39 43 08	 cmp	 DWORD PTR [ebx+8], eax
  0007b	77 09		 ja	 SHORT $LN8@PushState

; 1150 :             _Growmap(1);

  0007d	6a 01		 push	 1
  0007f	8b cb		 mov	 ecx, ebx
  00081	e8 00 00 00 00	 call	 ?_Growmap@?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@AAEXI@Z ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::_Growmap
$LN8@PushState:

; 1151 :         }
; 1152 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00086	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00089	48		 dec	 eax
  0008a	21 43 0c	 and	 DWORD PTR [ebx+12], eax

; 1153 :         size_type _Newoff = _Myoff() + _Mysize();

  0008d	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00090	03 4b 0c	 add	 ecx, DWORD PTR [ebx+12]

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00093	23 c8		 and	 ecx, eax

; 1155 :         if (_Map()[_Block] == nullptr) {

  00095	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00098	8d 34 8d 00 00
	00 00		 lea	 esi, DWORD PTR [ecx*4]
  0009f	83 3c 06 00	 cmp	 DWORD PTR [esi+eax], 0
  000a3	89 b5 78 ff ff
	ff		 mov	 DWORD PTR tv358[ebp], esi
  000a9	75 13		 jne	 SHORT $LN9@PushState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000ab	68 80 00 00 00	 push	 128			; 00000080H
  000b0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1156 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  000b5	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000b8	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1156 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  000bb	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax
$LN9@PushState:

; 1157 :         }
; 1158 : 
; 1159 :         _Alty_traits::construct(

  000be	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000c1	8d b5 7c ff ff
	ff		 lea	 esi, DWORD PTR _curState$[ebp]
  000c7	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR tv358[ebp]
  000cd	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000d2	8b 3c 38	 mov	 edi, DWORD PTR [eax+edi]
  000d5	f3 a5		 rep movsd
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 405  : }

  000d7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1162 :         ++_Mysize();

  000da	ff 43 10	 inc	 DWORD PTR [ebx+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 405  : }

  000dd	33 cd		 xor	 ecx, ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1162 :         ++_Mysize();

  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 405  : }

  000e2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c3		 ret	 0
?PushState@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::PushState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ?Destroy@CPythonGraphic@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CPythonGraphic@@QAEXXZ PROC			; CPythonGraphic::Destroy, COMDAT
; _this$ = ecx

; 10   : }

  00000	c2 00 00	 ret	 0
?Destroy@CPythonGraphic@@QAEXXZ ENDP			; CPythonGraphic::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ??1CPythonGraphic@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CPythonGraphic@@UAE@XZ PROC				; CPythonGraphic::~CPythonGraphic, COMDAT
; _this$ = ecx

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CPythonGraphic@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 631  : 	Tracef("Python Graphic Clear\n");

  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@PCGMMCML@Python?5Graphic?5Clear?6@
  0002a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CPythonGraphic@@6BCScreen@@@
  00030	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
  00037	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  0003c	83 c4 04	 add	 esp, 4

; 632  : }

  0003f	8d 4e 64	 lea	 ecx, DWORD PTR [esi+100]
  00042	e8 00 00 00 00	 call	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
  00047	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0004a	e8 00 00 00 00	 call	 ??1?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@QAE@XZ ; std::deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >::~deque<CPythonGraphic::SState,std::allocator<CPythonGraphic::SState> >
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 19   : 	{

  0004f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 632  : }

  00056	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 21   : 		ms_singleton = 0;

  00058	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 632  : }

  00062	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5e		 pop	 esi
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
  00077	cc		 int	 3
  00078	cc		 int	 3
  00079	cc		 int	 3
  0007a	cc		 int	 3
  0007b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CPythonGraphic@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CPythonGraphic@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CPythonGraphic@@UAE@XZ ENDP				; CPythonGraphic::~CPythonGraphic
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp
;	COMDAT ??0CPythonGraphic@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPythonGraphic@@QAE@XZ PROC				; CPythonGraphic::CPythonGraphic, COMDAT
; _this$ = ecx

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CPythonGraphic@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00031	8b c7		 mov	 eax, edi
  00033	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 620  : {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00041	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, eax ; CSingleton<CPythonGraphic>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 620  : {

  00046	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
  00049	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CPythonGraphic@@6BCScreen@@@
  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CPythonGraphic@@6B?$CSingleton@VCPythonGraphic@@@@@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00056	6a 08		 push	 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 620  : {

  00058	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0005c	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1080 :     _Container_proxy* _Myproxy = nullptr;

  0005f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 560  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00065	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0006c	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00073	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0007a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00081	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00086	83 c4 04	 add	 esp, 4

; 1050 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00089	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1067 :         _Myproxy            = _New_proxy;

  00090	89 06		 mov	 DWORD PTR [esi], eax

; 1068 :         _New_proxy->_Mycont = this;

  00092	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphic.cpp

; 620  : {

  00094	8d 4f 64	 lea	 ecx, DWORD PTR [edi+100]
  00097	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0009b	e8 00 00 00 00	 call	 ??0CCullingManager@@QAE@XZ ; CCullingManager::CCullingManager

; 621  : 	m_lightColor = GetColor(1.0f, 1.0f, 1.0f);

  000a0	83 ec 10	 sub	 esp, 16			; 00000010H
  000a3	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000a7	8b cf		 mov	 ecx, edi
  000a9	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000b1	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  000b9	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  000c1	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  000c8	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor

; 622  : 	m_darkColor = GetColor(0.0f, 0.0f, 0.0f);

  000cd	83 ec 10	 sub	 esp, 16			; 00000010H
  000d0	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000d3	8b cf		 mov	 ecx, edi
  000d5	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000dd	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  000e5	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  000ed	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000f4	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  000f9	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  000fc	0f 57 c0	 xorps	 xmm0, xmm0

; 623  : 	
; 624  : 	memset(&m_backupViewport, 0, sizeof(D3DVIEWPORT9));

  000ff	0f 11 87 84 00
	00 00		 movups	 XMMWORD PTR [edi+132], xmm0

; 625  : 
; 626  : 	m_fOrthoDepth = 1000.0f;
; 627  : }

  00106	8b c7		 mov	 eax, edi
  00108	66 0f d6 87 94
	00 00 00	 movq	 QWORD PTR [edi+148], xmm0
  00110	c7 87 9c 00 00
	00 00 00 7a 44	 mov	 DWORD PTR [edi+156], 1148846080 ; 447a0000H
  0011a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0011d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00124	59		 pop	 ecx
  00125	5f		 pop	 edi
  00126	5e		 pop	 esi
  00127	8b e5		 mov	 esp, ebp
  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 10	 add	 ecx, 16			; 00000010H
  00019	e9 00 00 00 00	 jmp	 ??1?$stack@USState@CPythonGraphic@@V?$deque@USState@CPythonGraphic@@V?$allocator@USState@CPythonGraphic@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$??0CPythonGraphic@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 64	 add	 ecx, 100		; 00000064H
  00024	e9 00 00 00 00	 jmp	 ??1CCullingManager@@UAE@XZ ; CCullingManager::~CCullingManager
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CPythonGraphic@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CPythonGraphic@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CPythonGraphic@@QAE@XZ ENDP				; CPythonGraphic::CPythonGraphic
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z PROC	; CSingleton<CPythonGraphic>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCPythonGraphic@@@@UAEPAXI@Z ENDP	; CSingleton<CPythonGraphic>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ PROC		; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCPythonGraphic@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A, 0 ; CSingleton<CPythonGraphic>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCPythonGraphic@@@@UAE@XZ ENDP		; CSingleton<CPythonGraphic>::~CSingleton<CPythonGraphic>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
