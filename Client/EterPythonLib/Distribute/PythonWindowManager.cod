; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\Distribute\PythonWindowManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	?g_bShowOverInWindowName@@3HA			; g_bShowOverInWindowName
_BSS	SEGMENT
?g_bShowOverInWindowName@@3HA DD 01H DUP (?)		; g_bShowOverInWindowName
_BSS	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ	; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>
PUBLIC	??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z ; CSingleton<UI::CWindowManager>::`scalar deleting destructor'
PUBLIC	??0CWindowManager@UI@@QAE@XZ			; UI::CWindowManager::CWindowManager
PUBLIC	??1CWindowManager@UI@@UAE@XZ			; UI::CWindowManager::~CWindowManager
PUBLIC	?Destroy@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::Destroy
PUBLIC	?GetAspect@CWindowManager@UI@@QAEMXZ		; UI::CWindowManager::GetAspect
PUBLIC	?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z	; UI::CWindowManager::SetScreenSize
PUBLIC	?SetResolution@CWindowManager@UI@@QAEXHH@Z	; UI::CWindowManager::SetResolution
PUBLIC	?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z ; UI::CWindowManager::SetMouseHandler
PUBLIC	?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z	; UI::CWindowManager::GetMousePosition
PUBLIC	?IsDragging@CWindowManager@UI@@QAEHXZ		; UI::CWindowManager::IsDragging
PUBLIC	?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z ; UI::CWindowManager::SetParent
PUBLIC	?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::SetPickAlways
PUBLIC	?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterWindow
PUBLIC	?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z ; UI::CWindowManager::RegisterTypeWindow
PUBLIC	?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterSlotWindow
PUBLIC	?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterGridSlotWindow
PUBLIC	?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterTextLine
PUBLIC	?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterMarkBox
PUBLIC	?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterImageBox
PUBLIC	?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterExpandedImageBox
PUBLIC	?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterAniImageBox
PUBLIC	?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterButton
PUBLIC	?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterRadioButton
PUBLIC	?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterToggleButton
PUBLIC	?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterDragButton
PUBLIC	?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterBox
PUBLIC	?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterWikiRenderTarget
PUBLIC	?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterBar
PUBLIC	?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterLine
PUBLIC	?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterBar3D
PUBLIC	?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterNumberLine
PUBLIC	?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ; UI::CWindowManager::RegisterRenderTarget
PUBLIC	?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::DestroyWindow
PUBLIC	?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::NotifyDestroyWindow
PUBLIC	?IsAttaching@CWindowManager@UI@@QAEHXZ		; UI::CWindowManager::IsAttaching
PUBLIC	?GetAttachingType@CWindowManager@UI@@QAEKXZ	; UI::CWindowManager::GetAttachingType
PUBLIC	?GetAttachingIndex@CWindowManager@UI@@QAEKXZ	; UI::CWindowManager::GetAttachingIndex
PUBLIC	?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber
PUBLIC	?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
PUBLIC	?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z	; UI::CWindowManager::AttachIcon
PUBLIC	?DeattachIcon@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::DeattachIcon
PUBLIC	?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z	; UI::CWindowManager::SetAttachingFlag
PUBLIC	?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::OnceIgnoreMouseLeftButtonUpEvent
PUBLIC	?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::LockWindow
PUBLIC	?UnlockWindow@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::UnlockWindow
PUBLIC	?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::ActivateWindow
PUBLIC	?DeactivateWindow@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::DeactivateWindow
PUBLIC	?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ ; UI::CWindowManager::GetActivateWindow
PUBLIC	?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z	; UI::CWindowManager::SetTop
PUBLIC	?IsTop@CWindowManager@UI@@QAE_NPAVCWindow@2@@Z	; UI::CWindowManager::IsTop
PUBLIC	?SetTopUIWindow@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::SetTopUIWindow
PUBLIC	?ResetCapture@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::ResetCapture
PUBLIC	?Update@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::Update
PUBLIC	?Render@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::Render
PUBLIC	?LockCursorOnWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::LockCursorOnWindow
PUBLIC	?UnlockCursor@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::UnlockCursor
PUBLIC	?UpdateLockedCursor@CWindowManager@UI@@QAE_NHHPAUtagPOINT@@@Z ; UI::CWindowManager::UpdateLockedCursor
PUBLIC	?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z	; UI::CWindowManager::RunMouseMove
PUBLIC	?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseLeftButtonDown
PUBLIC	?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseLeftButtonUp
PUBLIC	?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseLeftButtonDoubleClick
PUBLIC	?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseRightButtonDown
PUBLIC	?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseRightButtonUp
PUBLIC	?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseRightButtonDoubleClick
PUBLIC	?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseMiddleButtonDown
PUBLIC	?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z ; UI::CWindowManager::RunMouseMiddleButtonUp
PUBLIC	?RunMouseWheel@CWindowManager@UI@@QAE_NABH@Z	; UI::CWindowManager::RunMouseWheel
PUBLIC	?RunIMEUpdate@CWindowManager@UI@@QAEXXZ		; UI::CWindowManager::RunIMEUpdate
PUBLIC	?RunIMETabEvent@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunIMETabEvent
PUBLIC	?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunIMEReturnEvent
PUBLIC	?RunIMEUpdateSelectionEvent@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::RunIMEUpdateSelectionEvent
PUBLIC	?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z	; UI::CWindowManager::RunIMEKeyDown
PUBLIC	?RunChangeCodePage@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunChangeCodePage
PUBLIC	?RunOpenCandidate@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunOpenCandidate
PUBLIC	?RunCloseCandidate@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunCloseCandidate
PUBLIC	?RunOpenReading@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunOpenReading
PUBLIC	?RunCloseReading@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunCloseReading
PUBLIC	?RunKeyDown@CWindowManager@UI@@QAEXH@Z		; UI::CWindowManager::RunKeyDown
PUBLIC	?RunKeyUp@CWindowManager@UI@@QAEXH@Z		; UI::CWindowManager::RunKeyUp
PUBLIC	?RunPressReturnKey@CWindowManager@UI@@QAE_NXZ	; UI::CWindowManager::RunPressReturnKey
PUBLIC	?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunPressEscapeKey
PUBLIC	?RunPressExitKey@CWindowManager@UI@@QAEXXZ	; UI::CWindowManager::RunPressExitKey
PUBLIC	?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z	; UI::CWindowManager::SetMousePosition
PUBLIC	?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z ; UI::CWindowManager::__PickWindow
PUBLIC	?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z ; UI::CWindowManager::__NewWindow
PUBLIC	?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ; UI::CWindowManager::__ClearReserveDeleteWindowList
PUBLIC	??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
PUBLIC	?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
PUBLIC	?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove
PUBLIC	??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
PUBLIC	??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::~map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >
PUBLIC	??_GCWindowManager@UI@@UAEPAXI@Z		; UI::CWindowManager::`scalar deleting destructor'
PUBLIC	?BuildEmptyTuple@UI@@YAPAU_object@@XZ		; UI::BuildEmptyTuple
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?OnUpdateRenderBox@CWindow@UI@@UAEXXZ		; UI::CWindow::OnUpdateRenderBox
PUBLIC	?OnChangePosition@CWindow@UI@@UAEXXZ		; UI::CWindow::OnChangePosition
PUBLIC	?SetColor@CWindow@UI@@UAEXK@Z			; UI::CWindow::SetColor
PUBLIC	??1CLayer@UI@@UAE@XZ				; UI::CLayer::~CLayer
PUBLIC	?IsWindow@CLayer@UI@@UAEHXZ			; UI::CLayer::IsWindow
PUBLIC	??_GCLayer@UI@@UAEPAXI@Z			; UI::CLayer::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
PUBLIC	??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Emplace<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
PUBLIC	??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCWindowManager@UI@@@@6B@	; CSingleton<UI::CWindowManager>::`vftable'
PUBLIC	??_7CWindowManager@UI@@6B@			; UI::CWindowManager::`vftable'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CSingleton@VCWindowManager@UI@@@@6B@	; CSingleton<UI::CWindowManager>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8	; CSingleton<UI::CWindowManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCWindowManager@UI@@@@8	; CSingleton<UI::CWindowManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCWindowManager@UI@@@@8	; CSingleton<UI::CWindowManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8 ; CSingleton<UI::CWindowManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CLayer@UI@@6B@				; UI::CLayer::`vftable'
PUBLIC	?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A ; UI::gs_kSet_pkWnd
PUBLIC	??_C@_04NBFCGMPH@root@				; `string'
PUBLIC	??_C@_04FOKBGDA@GAME@				; `string'
PUBLIC	??_C@_09CHAIFIBB@UI_BOTTOM@			; `string'
PUBLIC	??_C@_02ELHCDOPK@UI@				; `string'
PUBLIC	??_C@_08MLMBKENF@TOP_MOST@			; `string'
PUBLIC	??_C@_07PCOOAIOD@CURTAIN@			; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ@			; `string'
PUBLIC	??_C@_0P@KLAFPINF@DeattachObject@		; `string'
PUBLIC	??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R4CWindowManager@UI@@6B@			; UI::CWindowManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCWindowManager@UI@@@8			; UI::CWindowManager `RTTI Type Descriptor'
PUBLIC	??_R3CWindowManager@UI@@8			; UI::CWindowManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindowManager@UI@@8			; UI::CWindowManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CWindowManager@UI@@8		; UI::CWindowManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLayer@UI@@6B@				; UI::CLayer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLayer@UI@@@8				; UI::CLayer `RTTI Type Descriptor'
PUBLIC	??_R3CLayer@UI@@8				; UI::CLayer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLayer@UI@@8				; UI::CLayer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLayer@UI@@8			; UI::CLayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWindow@UI@@8			; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWindow@UI@@@8				; UI::CWindow `RTTI Type Descriptor'
PUBLIC	??_R3CWindow@UI@@8				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindow@UI@@8				; UI::CWindow::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z:PROC ; PyCallClassMemberFunc
EXTRN	??_E?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z:PROC ; CSingleton<UI::CWindowManager>::`vector deleting destructor'
EXTRN	??_ECWindowManager@UI@@UAEPAXI@Z:PROC		; UI::CWindowManager::`vector deleting destructor'
EXTRN	??0CWindow@UI@@QAE@PAU_object@@@Z:PROC		; UI::CWindow::CWindow
EXTRN	??1CWindow@UI@@UAE@XZ:PROC			; UI::CWindow::~CWindow
EXTRN	?AddChild@CWindow@UI@@QAEXPAV12@@Z:PROC		; UI::CWindow::AddChild
EXTRN	?Clear@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Clear
EXTRN	?Update@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Update
EXTRN	?Render@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Render
EXTRN	?SetName@CWindow@UI@@QAEXPBD@Z:PROC		; UI::CWindow::SetName
EXTRN	?SetSize@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetSize
EXTRN	?SetPosition@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetPosition
EXTRN	?GetPosition@CWindow@UI@@QAEXPAJ0@Z:PROC	; UI::CWindow::GetPosition
EXTRN	?Show@CWindow@UI@@QAEXXZ:PROC			; UI::CWindow::Show
EXTRN	?IsShow@CWindow@UI@@UAE_NXZ:PROC		; UI::CWindow::IsShow
EXTRN	?IsRendering@CWindow@UI@@QAE_NXZ:PROC		; UI::CWindow::IsRendering
EXTRN	?GetRoot@CWindow@UI@@QAEPAV12@XZ:PROC		; UI::CWindow::GetRoot
EXTRN	?GetParent@CWindow@UI@@QAEPAV12@XZ:PROC		; UI::CWindow::GetParent
EXTRN	?DeleteChild@CWindow@UI@@QAEXPAV12@@Z:PROC	; UI::CWindow::DeleteChild
EXTRN	?SetTop@CWindow@UI@@QAEXPAV12@@Z:PROC		; UI::CWindow::SetTop
EXTRN	?IsTop@CWindow@UI@@QAE_NPAV12@@Z:PROC		; UI::CWindow::IsTop
EXTRN	?IsIn@CWindow@UI@@QAE_NJJ@Z:PROC		; UI::CWindow::IsIn
EXTRN	?PickWindow@CWindow@UI@@QAEPAV12@JJ@Z:PROC	; UI::CWindow::PickWindow
EXTRN	?PickTopWindow@CWindow@UI@@QAEPAV12@JJ@Z:PROC	; UI::CWindow::PickTopWindow
EXTRN	?OnRender@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnRender
EXTRN	?OnAfterRender@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnAfterRender
EXTRN	?OnUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnUpdate
EXTRN	?OnUpdateLockedCursor@CWindow@UI@@UAEXHJ@Z:PROC	; UI::CWindow::OnUpdateLockedCursor
EXTRN	?OnSetFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnSetFocus
EXTRN	?OnKillFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnKillFocus
EXTRN	?OnMouseDrag@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMouseDrag
EXTRN	?OnMouseOverIn@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverIn
EXTRN	?OnMouseOverOut@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverOut
EXTRN	?OnMouseOver@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOver
EXTRN	?OnDrop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnDrop
EXTRN	?OnTop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnTop
EXTRN	?OnIMEUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnIMEUpdate
EXTRN	?OnMoveWindow@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMoveWindow
EXTRN	?RunIMETabEvent@CWindow@UI@@QAEHXZ:PROC		; UI::CWindow::RunIMETabEvent
EXTRN	?RunIMEReturnEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunIMEReturnEvent
EXTRN	?RunKeyDownEvent@CWindow@UI@@QAEPAV12@H@Z:PROC	; UI::CWindow::RunKeyDownEvent
EXTRN	?RunKeyUpEvent@CWindow@UI@@QAEHH@Z:PROC		; UI::CWindow::RunKeyUpEvent
EXTRN	?RunPressReturnKeyEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunPressReturnKeyEvent
EXTRN	?RunPressEscapeKeyEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunPressEscapeKeyEvent
EXTRN	?RunPressExitKeyEvent@CWindow@UI@@QAEHXZ:PROC	; UI::CWindow::RunPressExitKeyEvent
EXTRN	?OnIMETabEvent@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnIMETabEvent
EXTRN	?OnIMEReturnEvent@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEReturnEvent
EXTRN	?OnIMEUpdateSelectionEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEUpdateSelectionEvent
EXTRN	?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z:PROC	; UI::CWindow::OnIMEKeyDownEvent
EXTRN	?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEChangeCodePage
EXTRN	?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenCandidateListEvent
EXTRN	?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseCandidateListEvent
EXTRN	?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenReadingWndEvent
EXTRN	?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseReadingWndEvent
EXTRN	?OnMouseLeftButtonDown@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseLeftButtonDown
EXTRN	?OnMouseLeftButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseLeftButtonUp
EXTRN	?OnMouseLeftButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseLeftButtonDoubleClick
EXTRN	?OnMouseRightButtonDown@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonDown
EXTRN	?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonUp
EXTRN	?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseRightButtonDoubleClick
EXTRN	?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseMiddleButtonDown
EXTRN	?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseMiddleButtonUp
EXTRN	?OnScrollEvent@CWindow@UI@@UAEHABH@Z:PROC	; UI::CWindow::OnScrollEvent
EXTRN	?OnKeyDown@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyDown
EXTRN	?OnKeyUp@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyUp
EXTRN	?OnPressReturnKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressReturnKey
EXTRN	?OnPressEscapeKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressEscapeKey
EXTRN	?OnPressExitKey@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnPressExitKey
EXTRN	?OnIsType@CWindow@UI@@UAEHK@Z:PROC		; UI::CWindow::OnIsType
EXTRN	?iSetRenderingRect@CWindow@UI@@UAEXHHHH@Z:PROC	; UI::CWindow::iSetRenderingRect
EXTRN	?SetRenderingRect@CWindow@UI@@UAEXMMMM@Z:PROC	; UI::CWindow::SetRenderingRect
EXTRN	?GetRenderingWidth@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::GetRenderingWidth
EXTRN	?GetRenderingHeight@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::GetRenderingHeight
EXTRN	?OnSetRenderingRect@CWindow@UI@@EAEXXZ:PROC	; UI::CWindow::OnSetRenderingRect
EXTRN	??_ECLayer@UI@@UAEPAXI@Z:PROC			; UI::CLayer::`vector deleting destructor'
EXTRN	??0CUiWikiRenderTarget@UI@@QAE@PAU_object@@@Z:PROC ; UI::CUiWikiRenderTarget::CUiWikiRenderTarget
EXTRN	??0CBox@UI@@QAE@PAU_object@@@Z:PROC		; UI::CBox::CBox
EXTRN	??0CBar@UI@@QAE@PAU_object@@@Z:PROC		; UI::CBar::CBar
EXTRN	??0CLine@UI@@QAE@PAU_object@@@Z:PROC		; UI::CLine::CLine
EXTRN	??0CBar3D@UI@@QAE@PAU_object@@@Z:PROC		; UI::CBar3D::CBar3D
EXTRN	??0CTextLine@UI@@QAE@PAU_object@@@Z:PROC	; UI::CTextLine::CTextLine
EXTRN	??0CNumberLine@UI@@QAE@PAU_object@@@Z:PROC	; UI::CNumberLine::CNumberLine
EXTRN	??0CImageBox@UI@@QAE@PAU_object@@@Z:PROC	; UI::CImageBox::CImageBox
EXTRN	??0CRenderTarget@UI@@QAE@PAU_object@@@Z:PROC	; UI::CRenderTarget::CRenderTarget
EXTRN	??0CMarkBox@UI@@QAE@PAU_object@@@Z:PROC		; UI::CMarkBox::CMarkBox
EXTRN	??0CExpandedImageBox@UI@@QAE@PAU_object@@@Z:PROC ; UI::CExpandedImageBox::CExpandedImageBox
EXTRN	??0CAniImageBox@UI@@QAE@PAU_object@@@Z:PROC	; UI::CAniImageBox::CAniImageBox
EXTRN	??0CButton@UI@@QAE@PAU_object@@@Z:PROC		; UI::CButton::CButton
EXTRN	??0CRadioButton@UI@@QAE@PAU_object@@@Z:PROC	; UI::CRadioButton::CRadioButton
EXTRN	??0CToggleButton@UI@@QAE@PAU_object@@@Z:PROC	; UI::CToggleButton::CToggleButton
EXTRN	??0CDragButton@UI@@QAE@PAU_object@@@Z:PROC	; UI::CDragButton::CDragButton
EXTRN	??0CSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CSlotWindow::CSlotWindow
EXTRN	??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CGridSlotWindow::CGridSlotWindow
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A DD 01H DUP (?) ; CSingleton<UI::CWindowManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?gs_poEmptyTuple@UI@@3PAU_object@@A DD 01H DUP (?)	; UI::gs_poEmptyTuple
?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A DQ 01H DUP (?) ; UI::gs_kSet_pkWnd
_BSS	ENDS
;	COMDAT ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
_BSS	SEGMENT
?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 018H DUP (?) ; `UI::CWindowManager::RunMouseMove'::`17'::strPickWindowName
_BSS	ENDS
;	COMDAT ?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
_BSS	SEGMENT
?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA DD 01H DUP (?) ; `UI::CWindowManager::RunMouseMove'::`17'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_kSet_pkWnd$initializer$@UI@@3P6AXXZA DD FLAT:??__Egs_kSet_pkWnd@UI@@YAXXZ ; UI::gs_kSet_pkWnd$initializer$
CRT$XCU	ENDS
;	COMDAT ??_R2CWindow@UI@@8
rdata$r	SEGMENT
??_R2CWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindow@UI@@8	; UI::CWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWindow@UI@@8
rdata$r	SEGMENT
??_R3CWindow@UI@@8 DD 00H				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindow@UI@@8 DD FLAT:??_R0?AVCWindow@UI@@@8 ; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLayer@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLayer@UI@@8 DD FLAT:??_R0?AVCLayer@UI@@@8 ; UI::CLayer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLayer@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CLayer@UI@@8
rdata$r	SEGMENT
??_R2CLayer@UI@@8 DD FLAT:??_R1A@?0A@EA@CLayer@UI@@8	; UI::CLayer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CLayer@UI@@8
rdata$r	SEGMENT
??_R3CLayer@UI@@8 DD 00H				; UI::CLayer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CLayer@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLayer@UI@@@8
data$rs	SEGMENT
??_R0?AVCLayer@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CLayer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLayer@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLayer@UI@@6B@
rdata$r	SEGMENT
??_R4CLayer@UI@@6B@ DD 00H				; UI::CLayer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLayer@UI@@@8
	DD	FLAT:??_R3CLayer@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindowManager@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindowManager@UI@@8 DD FLAT:??_R0?AVCWindowManager@UI@@@8 ; UI::CWindowManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindowManager@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CWindowManager@UI@@8
rdata$r	SEGMENT
??_R2CWindowManager@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindowManager@UI@@8 ; UI::CWindowManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CWindowManager@UI@@8
rdata$r	SEGMENT
??_R3CWindowManager@UI@@8 DD 00H			; UI::CWindowManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CWindowManager@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindowManager@UI@@@8
data$rs	SEGMENT
??_R0?AVCWindowManager@UI@@@8 DD FLAT:??_7type_info@@6B@ ; UI::CWindowManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindowManager@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CWindowManager@UI@@6B@
rdata$r	SEGMENT
??_R4CWindowManager@UI@@6B@ DD 00H			; UI::CWindowManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCWindowManager@UI@@@8
	DD	FLAT:??_R3CWindowManager@UI@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@
CONST	SEGMENT
??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@ DB ' OverInWindow'
	DB	'Name [%s]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KLAFPINF@DeattachObject@
CONST	SEGMENT
??_C@_0P@KLAFPINF@DeattachObject@ DB 'DeattachObject', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ@ DB '()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PCOOAIOD@CURTAIN@
CONST	SEGMENT
??_C@_07PCOOAIOD@CURTAIN@ DB 'CURTAIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLMBKENF@TOP_MOST@
CONST	SEGMENT
??_C@_08MLMBKENF@TOP_MOST@ DB 'TOP_MOST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02ELHCDOPK@UI@
CONST	SEGMENT
??_C@_02ELHCDOPK@UI@ DB 'UI', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHAIFIBB@UI_BOTTOM@
CONST	SEGMENT
??_C@_09CHAIFIBB@UI_BOTTOM@ DB 'UI_BOTTOM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOKBGDA@GAME@
CONST	SEGMENT
??_C@_04FOKBGDA@GAME@ DB 'GAME', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBFCGMPH@root@
CONST	SEGMENT
??_C@_04NBFCGMPH@root@ DB 'root', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CLayer@UI@@6B@
CONST	SEGMENT
??_7CLayer@UI@@6B@ DD FLAT:??_R4CLayer@UI@@6B@		; UI::CLayer::`vftable'
	DD	FLAT:??_ECLayer@UI@@UAEPAXI@Z
	DD	FLAT:?IsShow@CWindow@UI@@UAE_NXZ
	DD	FLAT:?OnRender@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnAfterRender@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnUpdateRenderBox@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnUpdateLockedCursor@CWindow@UI@@UAEXHJ@Z
	DD	FLAT:?OnChangePosition@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnSetFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKillFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseDrag@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnMouseOverIn@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOverOut@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOver@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnDrop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnTop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnIMEUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMoveWindow@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnIMETabEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEReturnEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEUpdateSelectionEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnScrollEvent@CWindow@UI@@UAEHABH@Z
	DD	FLAT:?OnKeyDown@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnKeyUp@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnPressReturnKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressEscapeKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressExitKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?SetColor@CWindow@UI@@UAEXK@Z
	DD	FLAT:?OnIsType@CWindow@UI@@UAEHK@Z
	DD	FLAT:?IsWindow@CLayer@UI@@UAEHXZ
	DD	FLAT:?iSetRenderingRect@CWindow@UI@@UAEXHHHH@Z
	DD	FLAT:?SetRenderingRect@CWindow@UI@@UAEXMMMM@Z
	DD	FLAT:?GetRenderingWidth@CWindow@UI@@UAEHXZ
	DD	FLAT:?GetRenderingHeight@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnSetRenderingRect@CWindow@UI@@EAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8 ; CSingleton<UI::CWindowManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCWindowManager@UI@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCWindowManager@UI@@@@8 ; CSingleton<UI::CWindowManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCWindowManager@UI@@@@8 DD 00H	; CSingleton<UI::CWindowManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<UI::CWindowManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCWindowManager@UI@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CSingleton@VCWindowManager@UI@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCWindowManager@UI@@@@6B@ DD 00H	; CSingleton<UI::CWindowManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCWindowManager@UI@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCWindowManager@UI@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_7CWindowManager@UI@@6B@
CONST	SEGMENT
??_7CWindowManager@UI@@6B@ DD FLAT:??_R4CWindowManager@UI@@6B@ ; UI::CWindowManager::`vftable'
	DD	FLAT:??_ECWindowManager@UI@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCWindowManager@UI@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCWindowManager@UI@@@@6B@ DD FLAT:??_R4?$CSingleton@VCWindowManager@UI@@@@6B@ ; CSingleton<UI::CWindowManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$0
__ehfuncinfo$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z$0
__ehfuncinfo$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@1@ABQAVCWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBHPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$emplace@U?$pair@HPAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCWindow@UI@@@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAVCWindow@UI@@PAX@1@QAU21@ABQAVCWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBHPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2
__ehfuncinfo$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z$1
__ehfuncinfo$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$16
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$17
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunKeyDown@CWindowManager@UI@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunKeyDown@CWindowManager@UI@@QAEXH@Z$2
__ehfuncinfo$?RunKeyDown@CWindowManager@UI@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunKeyDown@CWindowManager@UI@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ$0
__ehfuncinfo$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z$0
__ehfuncinfo$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z$0
__ehfuncinfo$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1
__ehfuncinfo$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CWindowManager@UI@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CWindowManager@UI@@QAE@XZ DD 019930522H
	DD	0cH
	DD	FLAT:__unwindtable$??0CWindowManager@UI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CWindowManager@UI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$8
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$9
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$10
	DD	07H
	DD	FLAT:__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$15
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5234 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0000d	72 02		 jb	 SHORT $LN6@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	56		 push	 esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00015	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00019	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN11@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 5235 :     return _Left.compare(_Right) < 0;

  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	5e		 pop	 esi

; 5236 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z PROC ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	7d 07		 jge	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ENDP ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1618 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1626 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 14		 push	 20			; 00000014H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
_TEXT	SEGMENT
__Loc$ = -56						; size = 12
$T2 = -44						; size = 12
$T3 = -40						; size = 8
__Myhead$1$ = -32					; size = 4
$T4 = -28						; size = 4
_this$1$ = -24						; size = 4
__Result$1$ = -20					; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_<_Vals_0>$ = 12					; size = 4
??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Emplace<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >, COMDAT
; _this$ = ecx

; 994  :     pair<_Nodeptr, bool> _Emplace(_Valtys&&... _Vals) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 995  :         using _In_place_key_extractor = typename _Traits::template _In_place_key_extractor<_Remove_cvref_t<_Valtys>...>;
; 996  :         const auto _Scary             = _Get_scary();
; 997  :         _Tree_find_result<_Nodeptr> _Loc;
; 998  :         _Nodeptr _Inserted;
; 999  :         if constexpr (!_Multi && _In_place_key_extractor::_Extractable) {
; 1000 :             const auto& _Keyval = _In_place_key_extractor::_Extract(_Vals...);
; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 75 0c	 mov	 esi, DWORD PTR _<_Vals_0>$[ebp]
  0002d	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  00030	56		 push	 esi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00037	8b 78 08	 mov	 edi, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 c8	 movq	 QWORD PTR __Loc$[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00047	75 2d		 jne	 SHORT $LN2@Emplace
  00049	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0004c	50		 push	 eax
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00053	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00056	84 c0		 test	 al, al
  00058	75 1c		 jne	 SHORT $LN2@Emplace
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005a	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	89 38		 mov	 DWORD PTR [eax], edi
  0005f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1027 :     }

  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 08 00	 ret	 8
$LN2@Emplace:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00076	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
  00079	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  00080	0f 84 41 01 00
	00		 je	 $LN132@Emplace

; 1002 :             if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {
; 1003 :                 return {_Loc._Bound, false};
; 1004 :             }
; 1005 : 
; 1006 :             _Check_grow_by_1();
; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	89 4d e0	 mov	 DWORD PTR __Myhead$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0008b	89 45 d8	 mov	 DWORD PTR $T3[ebp], eax

; 77   :         return ::operator new(_Bytes);

  0008e	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00097	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0009e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a3	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000a6	89 45 e4	 mov	 DWORD PTR $T4[ebp], eax

; 1013 :         _Ptr = _Al.allocate(1);

  000a9	89 45 dc	 mov	 DWORD PTR $T3[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000ac	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  000af	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000b6	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  000b9	89 75 ec	 mov	 DWORD PTR __Result$1$[ebp], esi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000bc	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  000bf	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2292 :         const value_type* _Result = _Bx._Buf;

  000c6	8b ce		 mov	 ecx, esi

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  000c8	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  000cf	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000d3	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000d6	89 45 f0	 mov	 DWORD PTR $T5[ebp], eax

; 2293 :         if (_Large_string_engaged()) {

  000d9	72 05		 jb	 SHORT $LN58@Emplace

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000db	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000dd	89 4d ec	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN58@Emplace:

; 2740 :         if (_Count > max_size()) {

  000e0	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000e5	0f 87 e1 00 00
	00		 ja	 $LN133@Emplace

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  000eb	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  000f2	83 f8 10	 cmp	 eax, 16			; 00000010H
  000f5	73 0e		 jae	 SHORT $LN64@Emplace

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000f7	6a 10		 push	 16			; 00000010H
  000f9	51		 push	 ecx
  000fa	57		 push	 edi

; 2749 :             _My_data._Mysize = _Count;

  000fb	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000fe	e8 00 00 00 00	 call	 _memmove

; 2767 :             return;

  00103	eb 78		 jmp	 SHORT $LN130@Emplace
$LN64@Emplace:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00105	8b f0		 mov	 esi, eax
  00107	83 ce 0f	 or	 esi, 15			; 0000000fH
  0010a	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00110	76 1a		 jbe	 SHORT $LN71@Emplace

; 4885 :             return _Max;

  00112	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00117	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0011c	51		 push	 ecx
  0011d	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00122	8b c8		 mov	 ecx, eax
  00124	83 c4 04	 add	 esp, 4
  00127	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0012a	eb 3b		 jmp	 SHORT $LN78@Emplace
$LN71@Emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0012c	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00131	3b f1		 cmp	 esi, ecx
  00133	0f 42 f1	 cmovb	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00136	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00139	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0013f	72 10		 jb	 SHORT $LN79@Emplace

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00147	8b c8		 mov	 ecx, eax
  00149	83 c4 04	 add	 esp, 4
  0014c	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  0014f	eb 16		 jmp	 SHORT $LN78@Emplace
$LN79@Emplace:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00151	85 c9		 test	 ecx, ecx
  00153	74 10		 je	 SHORT $LN80@Emplace

; 77   :         return ::operator new(_Bytes);

  00155	51		 push	 ecx
  00156	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0015b	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  0015d	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00160	8b 45 f0	 mov	 eax, DWORD PTR $T5[ebp]
  00163	eb 02		 jmp	 SHORT $LN78@Emplace
$LN80@Emplace:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00165	33 c9		 xor	 ecx, ecx
$LN78@Emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2781 :         _My_data._Mysize = _Count;

  00167	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  0016a	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016b	50		 push	 eax
  0016c	ff 75 ec	 push	 DWORD PTR __Result$1$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0016f	89 0f		 mov	 DWORD PTR [edi], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00171	51		 push	 ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  00172	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00175	e8 00 00 00 00	 call	 _memcpy
  0017a	8b 75 0c	 mov	 esi, DWORD PTR _<_Vals_0>$[ebp]
$LN130@Emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  0017d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00183	8b 4d e0	 mov	 ecx, DWORD PTR __Myhead$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  00186	89 47 18	 mov	 DWORD PTR [edi+24], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00189	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0018c	50		 push	 eax
  0018d	ff 75 cc	 push	 DWORD PTR __Loc$[ebp+4]
  00190	ff 75 c8	 push	 DWORD PTR __Loc$[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00193	89 08		 mov	 DWORD PTR [eax], ecx

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00198	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0019b	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 811  :         this->_Ptr->_Color = _Red;

  0019e	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001a4	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001a9	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  001ac	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001ae	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  001b0	c6 41 04 01	 mov	 BYTE PTR [ecx+4], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1027 :     }

  001b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001be	59		 pop	 ecx
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	8b e5		 mov	 esp, ebp
  001c3	5d		 pop	 ebp
  001c4	c2 08 00	 ret	 8
$LN132@Emplace:

; 1630 :             _Throw_tree_length_error();

  001c7	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN133@Emplace:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2741 :             _Xlen_string(); // result too long

  001cc	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN129@Emplace:
  001d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Emplace<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00032	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0005a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00061	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN75@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN75@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 749  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 12
$T5 = -20						; size = 8
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z PROC ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>, COMDAT
; _this$ = ecx

; 184  :     pair<iterator, bool> insert(_Valty&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0002a	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  0002d	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
  00037	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003a	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003e	66 0f d6 45 dc	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00043	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00047	75 0b		 jne	 SHORT $LN6@insert
  00049	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004b	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0004e	7c 04		 jl	 SHORT $LN6@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00050	32 d2		 xor	 dl, dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1003 :                 return {_Loc._Bound, false};

  00052	eb 51		 jmp	 SHORT $LN85@insert
$LN6@insert:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0005b	74 64		 je	 SHORT $LN103@insert

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0005d	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi

; 77   :         return ::operator new(_Bytes);

  00062	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 200  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  00077	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 200  :         : first(_STD forward<_Other1>(_Right.first)), second(_STD forward<_Other2>(_Right.second)) {}

  0007c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0007f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00082	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00085	8b cf		 mov	 ecx, edi
  00087	50		 push	 eax
  00088	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0008b	89 30		 mov	 DWORD PTR [eax], esi

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008d	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00090	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00093	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00096	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000a1	8b c8		 mov	 ecx, eax
  000a3	b2 01		 mov	 dl, 1
$LN85@insert:
  000a5	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000a8	89 08		 mov	 DWORD PTR [eax], ecx
  000aa	88 50 04	 mov	 BYTE PTR [eax+4], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 186  :     }

  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 08 00	 ret	 8
$LN103@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  000c1	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN101@insert:
  000c6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z ENDP ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??__FstrPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ
text$yd	SEGMENT
??__FstrPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ PROC ; `UI::CWindowManager::RunMouseMove'::`17'::`dynamic atexit destructor for 'strPickWindowName'', COMDAT

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00011	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00055	c3		 ret	 0
??__FstrPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ ENDP ; `UI::CWindowManager::RunMouseMove'::`17'::`dynamic atexit destructor for 'strPickWindowName''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 63   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 63   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN15@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN25@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN22@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN25@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN15@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN22@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@pair:
  0004a	cc		 int	 3
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_kSet_pkWnd@UI@@YAXXZ
text$yd	SEGMENT
??__Fgs_kSet_pkWnd@UI@@YAXXZ PROC			; UI::`dynamic atexit destructor for 'gs_kSet_pkWnd'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A ; UI::gs_kSet_pkWnd
  00005	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >
??__Fgs_kSet_pkWnd@UI@@YAXXZ ENDP			; UI::`dynamic atexit destructor for 'gs_kSet_pkWnd''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ??__Egs_kSet_pkWnd@UI@@YAXXZ
text$di	SEGMENT
??__Egs_kSet_pkWnd@UI@@YAXXZ PROC			; UI::`dynamic initializer for 'gs_kSet_pkWnd'', COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00000	6a 14		 push	 20			; 00000014H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 21   : std::set<CWindow*> gs_kSet_pkWnd;

  00007	68 00 00 00 00	 push	 OFFSET ??__Fgs_kSet_pkWnd@UI@@YAXXZ ; UI::`dynamic atexit destructor for 'gs_kSet_pkWnd''
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0000c	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0000e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00011	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00014	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0001a	a3 00 00 00 00	 mov	 DWORD PTR ?gs_kSet_pkWnd@UI@@3V?$set@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@@std@@A, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 21   : std::set<CWindow*> gs_kSet_pkWnd;

  0001f	e8 00 00 00 00	 call	 _atexit
  00024	83 c4 08	 add	 esp, 8
  00027	c3		 ret	 0
??__Egs_kSet_pkWnd@UI@@YAXXZ ENDP			; UI::`dynamic initializer for 'gs_kSet_pkWnd''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@PAVCWindow@UI@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@PAVCWindow@UI@@PAX@std@@@1@PAU?$_Tree_node@PAVCWindow@UI@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<UI::CWindow *> >::_Erase_tree<std::allocator<std::_Tree_node<UI::CWindow *,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 14		 push	 20			; 00000014H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 14		 push	 20			; 00000014H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tset_traits@PAVCWindow@UI@@U?$less@PAVCWindow@UI@@@std@@V?$allocator@PAVCWindow@UI@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >::~_Tree<std::_Tset_traits<UI::CWindow *,std::less<UI::CWindow *>,std::allocator<UI::CWindow *>,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ??_GCLayer@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLayer@UI@@UAEPAXI@Z PROC				; UI::CLayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 288  : 	virtual ~CLayer() {}

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLayer@UI@@6B@
  0000c	e8 00 00 00 00	 call	 ??1CWindow@UI@@UAE@XZ	; UI::CWindow::~CWindow
  00011	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00015	74 0e		 je	 SHORT $LN7@scalar
  00017	68 30 01 00 00	 push	 304			; 00000130H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00022	83 c4 08	 add	 esp, 8
$LN7@scalar:
  00025	8b c6		 mov	 eax, esi
  00027	5e		 pop	 esi
  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
??_GCLayer@UI@@UAEPAXI@Z ENDP				; UI::CLayer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?IsWindow@CLayer@UI@@UAEHXZ
_TEXT	SEGMENT
?IsWindow@CLayer@UI@@UAEHXZ PROC			; UI::CLayer::IsWindow, COMDAT
; _this$ = ecx

; 290  : 	BOOL IsWindow() { return FALSE; }

  00000	33 c0		 xor	 eax, eax
  00002	c3		 ret	 0
?IsWindow@CLayer@UI@@UAEHXZ ENDP			; UI::CLayer::IsWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ??1CLayer@UI@@UAE@XZ
_TEXT	SEGMENT
??1CLayer@UI@@UAE@XZ PROC				; UI::CLayer::~CLayer, COMDAT
; _this$ = ecx

; 288  : 	virtual ~CLayer() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLayer@UI@@6B@
  00006	e9 00 00 00 00	 jmp	 ??1CWindow@UI@@UAE@XZ	; UI::CWindow::~CWindow
??1CLayer@UI@@UAE@XZ ENDP				; UI::CLayer::~CLayer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?SetColor@CWindow@UI@@UAEXK@Z
_TEXT	SEGMENT
_dwColor$ = 8						; size = 4
?SetColor@CWindow@UI@@UAEXK@Z PROC			; UI::CWindow::SetColor, COMDAT
; _this$ = ecx

; 220  : 	virtual void	SetColor(DWORD dwColor) {}

  00000	c2 04 00	 ret	 4
?SetColor@CWindow@UI@@UAEXK@Z ENDP			; UI::CWindow::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?OnChangePosition@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnChangePosition@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnChangePosition, COMDAT
; _this$ = ecx

; 159  : 	virtual void	OnChangePosition() {}

  00000	c2 00 00	 ret	 0
?OnChangePosition@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnChangePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?OnUpdateRenderBox@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnUpdateRenderBox@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnUpdateRenderBox, COMDAT
; _this$ = ecx

; 153  : 	virtual void	OnUpdateRenderBox() {}

  00000	c2 00 00	 ret	 0
?OnUpdateRenderBox@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnUpdateRenderBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 601  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 602  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 603  : 
; 604  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN1@Traits_com

; 605  :         return _Ans;
; 606  :     }
; 607  : 
; 608  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 613  :         return 1;
; 614  :     }
; 615  : 
; 616  :     return 0;
; 617  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 609  :         return -1;
; 610  :     }
; 611  : 
; 612  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN1@Traits_com:

; 613  :         return 1;
; 614  :     }
; 615  : 
; 616  :     return 0;
; 617  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?BuildEmptyTuple@UI@@YAPAU_object@@XZ
_TEXT	SEGMENT
?BuildEmptyTuple@UI@@YAPAU_object@@XZ PROC		; UI::BuildEmptyTuple, COMDAT

; 17   : 	Py_INCREF(gs_poEmptyTuple);

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?gs_poEmptyTuple@UI@@3PAU_object@@A
  00005	ff 00		 inc	 DWORD PTR [eax]

; 18   : 	return gs_poEmptyTuple;
; 19   : }

  00007	c3		 ret	 0
?BuildEmptyTuple@UI@@YAPAU_object@@XZ ENDP		; UI::BuildEmptyTuple
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCWindowManager@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCWindowManager@UI@@UAEPAXI@Z PROC			; UI::CWindowManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CWindowManager@UI@@UAE@XZ ; UI::CWindowManager::~CWindowManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 b8 00 00 00	 push	 184			; 000000b8H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCWindowManager@UI@@UAEPAXI@Z ENDP			; UI::CWindowManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[], COMDAT
; _this$ = ecx

; 173  :     mapped_type& operator[](key_type&& _Keyval) { // find element matching _Keyval or insert value-initialized value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002a	8b 7d 08	 mov	 edi, DWORD PTR __Keyval$[ebp]
  0002d	8d 45 dc	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00030	57		 push	 edi
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	8b 75 e4	 mov	 esi, DWORD PTR __Loc$3[ebp+8]
  0003a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0003e	75 15		 jne	 SHORT $LN4@operator
  00040	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00043	50		 push	 eax
  00044	57		 push	 edi
  00045	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0004a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004d	84 c0		 test	 al, al
  0004f	0f 84 8a 00 00
	00		 je	 $LN3@operator
$LN4@operator:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00055	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00058	81 78 04 5d 74
	d1 05		 cmp	 DWORD PTR [eax+4], 97612893 ; 05d1745dH
  0005f	0f 84 90 00 00
	00		 je	 $LN127@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00065	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00067	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax

; 77   :         return ::operator new(_Bytes);

  0006a	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00073	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007f	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00082	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00085	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00088	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0008c	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00093	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0009a	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009d	50		 push	 eax
  0009e	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a1	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  000a5	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000aa	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ad	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4998 :         _My_data._Mysize = 0;

  000b2	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000b9	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c0	c6 07 00	 mov	 BYTE PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000c3	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000ca	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000cc	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000cf	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000d2	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000d8	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
  000dd	8b f0		 mov	 esi, eax
$LN3@operator:

; 174  :         return _Try_emplace(_STD move(_Keyval)).first->_Myval.second;

  000df	8d 46 28	 lea	 eax, DWORD PTR [esi+40]

; 175  :     }

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ec	59		 pop	 ecx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 04 00	 ret	 4
$LN127@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  000f5	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN125@operator:
  000fa	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ PROC ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::~map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::~map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1038 = -16						; size = 4
$T1 = -12						; size = 4
tv1091 = -12						; size = 4
tv1075 = -12						; size = 4
tv1042 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract, COMDAT
; _this$ = ecx

; 504  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 505  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	56		 push	 esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 506  :         ++_Where; // save successor iterator for return

  0000e	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00011	57		 push	 edi
  00012	89 5d f8	 mov	 DWORD PTR __Erasednode$1$[ebp], ebx
  00015	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++

; 507  : 
; 508  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 509  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 510  :         _Nodeptr _Pnode = _Erasednode;
; 511  : 
; 512  :         if (_Pnode->_Left->_Isnil) {

  0001a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0001f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00023	75 18		 jne	 SHORT $LN86@Extract

; 513  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 514  :         } else if (_Pnode->_Right->_Isnil) {

  00025	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00029	74 04		 je	 SHORT $LN7@Extract

; 515  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002b	8b f8		 mov	 edi, eax

; 516  :         } else { // two subtrees, must lift successor node to replace erased

  0002d	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 517  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0002f	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 518  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00032	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00035	3b d3		 cmp	 edx, ebx

; 519  :         }
; 520  : 
; 521  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00037	0f 85 95 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 522  :             _Fixnodeparent = _Erasednode->_Parent;
; 523  :             if (!_Fixnode->_Isnil) {

  0003d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00041	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00044	75 03		 jne	 SHORT $LN11@Extract

; 524  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 525  :             }
; 526  : 
; 527  :             if (_Myhead->_Parent == _Erasednode) {

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00051	75 05		 jne	 SHORT $LN12@Extract

; 528  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00053	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00056	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 529  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00058	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005a	75 04		 jne	 SHORT $LN14@Extract

; 530  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005c	89 3e		 mov	 DWORD PTR [esi], edi

; 531  :             } else {

  0005e	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 532  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00060	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 533  :             }
; 534  : 
; 535  :             if (_Myhead->_Left == _Erasednode) {

  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	89 45 f4	 mov	 DWORD PTR tv1075[ebp], eax
  00068	39 18		 cmp	 DWORD PTR [eax], ebx
  0006a	75 28		 jne	 SHORT $LN16@Extract

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006c	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00070	74 04		 je	 SHORT $LN42@Extract
  00072	8b d6		 mov	 edx, esi
  00074	eb 19		 jmp	 SHORT $LN64@Extract
$LN42@Extract:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00078	8b d7		 mov	 edx, edi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0f		 jne	 SHORT $LN64@Extract
$LL63@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL63@Extract
  0008c	8b 45 f4	 mov	 eax, DWORD PTR tv1075[ebp]
$LN64@Extract:

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN16@Extract:

; 537  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Right == _Erasednode) {

  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  00099	0f 85 a0 00 00
	00		 jne	 $LN47@Extract

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a3	74 0a		 je	 SHORT $LN44@Extract
  000a5	8b ce		 mov	 ecx, esi
  000a7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000aa	e9 90 00 00 00	 jmp	 $LN47@Extract
$LN44@Extract:

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000af	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b2	8b cf		 mov	 ecx, edi

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000b4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b8	75 11		 jne	 SHORT $LN68@Extract
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL67@Extract:

; 446  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL67@Extract
$LN68@Extract:
  000cb	8b 02		 mov	 eax, DWORD PTR [edx]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000d0	eb 6d		 jmp	 SHORT $LN47@Extract
$LN9@Extract:

; 545  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 546  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down
; 547  : 
; 548  :             if (_Pnode == _Erasednode->_Right) {

  000d5	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  000d8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000da	89 02		 mov	 DWORD PTR [edx], eax
  000dc	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  000df	3b 53 08	 cmp	 edx, DWORD PTR [ebx+8]
  000e2	75 04		 jne	 SHORT $LN18@Extract

; 549  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e4	8b f2		 mov	 esi, edx

; 550  :             } else { // successor further down, link in place of erased

  000e6	eb 1c		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 551  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 552  :                 if (!_Fixnode->_Isnil) {

  000e8	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ec	8b 31		 mov	 esi, DWORD PTR [ecx]
  000ee	75 03		 jne	 SHORT $LN20@Extract

; 553  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 554  :                 }
; 555  : 
; 556  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f3	89 3e		 mov	 DWORD PTR [esi], edi

; 557  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f5	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000f8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 558  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fb	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000fe	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00101	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@Extract:

; 559  :             }
; 560  : 
; 561  :             if (_Myhead->_Parent == _Erasednode) {

  00104	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0010c	75 05		 jne	 SHORT $LN21@Extract

; 562  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00111	eb 0e		 jmp	 SHORT $LN94@Extract
$LN21@Extract:

; 563  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00113	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00116	39 18		 cmp	 DWORD PTR [eax], ebx
  00118	75 04		 jne	 SHORT $LN23@Extract

; 564  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011a	89 10		 mov	 DWORD PTR [eax], edx

; 565  :             } else {

  0011c	eb 03		 jmp	 SHORT $LN94@Extract
$LN23@Extract:

; 566  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011e	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN94@Extract:

; 567  :             }
; 568  : 
; 569  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00121	b9 04 00 00 00	 mov	 ecx, 4
  00126	8b c3		 mov	 eax, ebx
  00128	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00130	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]

; 101  :     _Left    = _STD move(_Right);

  00133	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00136	88 42 0c	 mov	 BYTE PTR [edx+12], al
  00139	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 102  :     _Right   = _STD move(_Tmp);

  0013c	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN47@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 573  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0013f	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00143	0f 85 89 01 00
	00		 jne	 $LN25@Extract

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  00149	8b 02		 mov	 eax, DWORD PTR [edx]
  0014b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0014e	0f 84 7a 01 00
	00		 je	 $LN3@Extract
  00154	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@Extract:
  00160	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00164	89 75 f4	 mov	 DWORD PTR tv1091[ebp], esi
  00167	0f 85 5e 01 00
	00		 jne	 $LN93@Extract

; 575  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0016d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016f	3b f9		 cmp	 edi, ecx
  00171	0f 85 c3 00 00
	00		 jne	 $LN26@Extract

; 576  :                     _Pnode = _Fixnodeparent->_Right;

  00177	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0017a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0017e	75 57		 jne	 SHORT $LN87@Extract

; 578  :                         _Pnode->_Color         = _Black;

  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00184	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 579  :                         _Fixnodeparent->_Color = _Red;

  00187	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0018b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00196	75 03		 jne	 SHORT $LN49@Extract

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00198	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN49@Extract:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0019b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  001a1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  001ac	75 0c		 jne	 SHORT $LN50@Extract

; 471  :             _Myhead->_Parent = _Pnode;

  001ae	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001b1	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001b3	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001b5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b8	eb 20		 jmp	 SHORT $LN80@Extract
$LN50@Extract:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ba	8b 02		 mov	 eax, DWORD PTR [edx]
  001bc	3b 30		 cmp	 esi, DWORD PTR [eax]
  001be	75 0b		 jne	 SHORT $LN52@Extract

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 08		 mov	 DWORD PTR [eax], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c2	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001c4	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	eb 0f		 jmp	 SHORT $LN80@Extract
$LN52@Extract:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001ce	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001d0	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	eb 03		 jmp	 SHORT $LN80@Extract
$LN87@Extract:
  001d7	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN80@Extract:

; 582  :                     }
; 583  : 
; 584  :                     if (_Pnode->_Isnil) {

  001da	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001de	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 585  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 586  :                     } else if (_Pnode->_Left->_Color == _Black
; 587  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ea	75 0d		 jne	 SHORT $LN89@Extract
  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f3	0f 84 b9 00 00
	00		 je	 $LN95@Extract
$LN89@Extract:

; 588  :                         _Pnode->_Color = _Red;
; 589  :                         _Fixnode       = _Fixnodeparent;
; 590  :                     } else { // must rearrange right subtree
; 591  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001f9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001fc	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00200	75 16		 jne	 SHORT $LN33@Extract

; 592  :                             _Pnode->_Left->_Color = _Black;

  00202	8b 01		 mov	 eax, DWORD PTR [ecx]

; 593  :                             _Pnode->_Color        = _Red;
; 594  :                             _Rrotate(_Pnode);

  00204	51		 push	 ecx
  00205	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00209	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00210	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate

; 595  :                             _Pnode = _Fixnodeparent->_Right;

  00215	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 596  :                         }
; 597  : 
; 598  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00218	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  0021b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 599  :                         _Fixnodeparent->_Color = _Black;

  0021e	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 600  :                         _Pnode->_Right->_Color = _Black;

  00222	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 601  :                         _Lrotate(_Fixnodeparent);

  00225	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00228	56		 push	 esi
  00229	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0022d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate

; 602  :                         break; // tree now recolored/rebalanced

  00232	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00235	e9 91 00 00 00	 jmp	 $LN93@Extract
$LN26@Extract:

; 603  :                     }
; 604  :                 } else { // fixup right subtree
; 605  :                     _Pnode = _Fixnodeparent->_Left;
; 606  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0023a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0023e	75 58		 jne	 SHORT $LN88@Extract

; 607  :                         _Pnode->_Color         = _Black;

  00240	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00244	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 608  :                         _Fixnodeparent->_Color = _Red;

  00246	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  0024a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0024d	89 06		 mov	 DWORD PTR [esi], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0024f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00252	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00256	75 03		 jne	 SHORT $LN56@Extract

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00258	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN56@Extract:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0025b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00261	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00264	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00267	8b 00		 mov	 eax, DWORD PTR [eax]
  00269	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0026c	75 0c		 jne	 SHORT $LN57@Extract

; 493  :             _Myhead->_Parent = _Pnode;

  0026e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00271	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00274	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00276	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00278	eb 21		 jmp	 SHORT $LN79@Extract
$LN57@Extract:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0027a	8b 02		 mov	 eax, DWORD PTR [edx]
  0027c	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0027f	75 0c		 jne	 SHORT $LN59@Extract

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00281	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00284	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00287	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00289	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0028b	eb 0e		 jmp	 SHORT $LN79@Extract
$LN59@Extract:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0028d	89 08		 mov	 DWORD PTR [eax], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  0028f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00292	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00294	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00296	eb 03		 jmp	 SHORT $LN79@Extract
$LN88@Extract:
  00298	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN79@Extract:

; 611  :                     }
; 612  : 
; 613  :                     if (_Pnode->_Isnil) {

  0029b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0029f	75 15		 jne	 SHORT $LN2@Extract

; 614  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 615  :                     } else if (_Pnode->_Right->_Color == _Black
; 616  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  002a1	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  002a4	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  002a8	75 3e		 jne	 SHORT $LN90@Extract
  002aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ac	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002b0	75 36		 jne	 SHORT $LN90@Extract
$LN95@Extract:

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002b2	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002b6	8b 32		 mov	 esi, DWORD PTR [edx]
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  002bb	8b 4d f4	 mov	 ecx, DWORD PTR tv1091[ebp]
  002be	8b f9		 mov	 edi, ecx
  002c0	8b 02		 mov	 eax, DWORD PTR [edx]
  002c2	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002c5	0f 85 95 fe ff
	ff		 jne	 $LL4@Extract
$LN93@Extract:

; 631  :                         break; // tree now recolored/rebalanced
; 632  :                     }
; 633  :                 }
; 634  :             }
; 635  : 
; 636  :             _Fixnode->_Color = _Black; // stopping node is black

  002cb	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002ce	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 637  :         }
; 638  : 
; 639  :         if (0 < _Mysize) {

  002d2	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002d5	8b c3		 mov	 eax, ebx
  002d7	85 c9		 test	 ecx, ecx
  002d9	74 04		 je	 SHORT $LN40@Extract

; 640  :             --_Mysize;

  002db	49		 dec	 ecx
  002dc	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN40@Extract:

; 641  :         }
; 642  : 
; 643  :         return _Erasednode;
; 644  :     }

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	5b		 pop	 ebx
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c2 04 00	 ret	 4
$LN90@Extract:

; 617  :                         _Pnode->_Color = _Red;
; 618  :                         _Fixnode       = _Fixnodeparent;
; 619  :                     } else { // must rearrange left subtree
; 620  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ee	75 13		 jne	 SHORT $LN39@Extract

; 621  :                             _Pnode->_Right->_Color = _Black;

  002f0	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 622  :                             _Pnode->_Color         = _Red;

  002f4	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 623  :                             _Lrotate(_Pnode);

  002f8	51		 push	 ecx
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002fc	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate

; 624  :                             _Pnode = _Fixnodeparent->_Left;

  00301	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 625  :                         }
; 626  : 
; 627  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00303	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00306	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 628  :                         _Fixnodeparent->_Color = _Black;

  00309	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 629  :                         _Pnode->_Left->_Color  = _Black;

  0030d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 630  :                         _Rrotate(_Fixnodeparent);

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00312	56		 push	 esi
  00313	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00317	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate
  0031c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0031f	eb aa		 jmp	 SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 496  :         } else {
; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 474  :         } else {
; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z
_TEXT	SEGMENT
__Op$1 = -12						; size = 12
__Val$ = 8						; size = 4
?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z PROC ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove, COMDAT
; _this$ = ecx

; 1660 :     auto remove(const _Ty& _Val) { // erase each element matching _Val

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1594 :         explicit _List_node_remove_op(list& _List_) noexcept : _List(_List_), _Head(), _Tail(_STD addressof(_Head)) {}

  0000b	8d 45 f8	 lea	 eax, DWORD PTR __Op$1[ebp+4]
  0000e	33 d2		 xor	 edx, edx
  00010	89 7d f4	 mov	 DWORD PTR __Op$1[ebp], edi
  00013	89 55 f8	 mov	 DWORD PTR __Op$1[ebp+4], edx
  00016	89 45 fc	 mov	 DWORD PTR __Op$1[ebp+8], eax

; 1668 :         const auto _Last         = _My_data._Myhead;

  00019	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1669 :         const size_type _Oldsize = _My_data._Mysize;
; 1670 :         for (auto _First = _Last->_Next; _First != _Last;) {

  0001b	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001d	3b c3		 cmp	 eax, ebx
  0001f	74 36		 je	 SHORT $LN7@remove
  00021	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
$LL6@remove:

; 1661 :         return remove_if([&](const _Ty& _Other) { return _Other == _Val; });

  00024	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]

; 1671 :             auto _Next = _First->_Next;

  00027	8b 30		 mov	 esi, DWORD PTR [eax]

; 1661 :         return remove_if([&](const _Ty& _Other) { return _Other == _Val; });

  00029	3b 0a		 cmp	 ecx, DWORD PTR [edx]

; 1672 :             if (_Pred(_First->_Myval)) {

  0002b	75 21		 jne	 SHORT $LN37@remove

; 1605 :             --_List._Mypair._Myval2._Mysize;

  0002d	ff 4f 04	 dec	 DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00030	8b 10		 mov	 edx, DWORD PTR [eax]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00032	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1607 :             const auto _Prev = _Removed->_Prev;

  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 1608 :             _Prev->_Next     = _Next;

  0003b	89 11		 mov	 DWORD PTR [ecx], edx

; 1609 :             _Next->_Prev     = _Prev;

  0003d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 1610 : 
; 1611 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1612 :             // mark removed node for IDL to snip out later
; 1613 :             _Removed->_Prev = nullptr;
; 1614 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1615 : 
; 1616 :             *_Tail = _Removed;

  00040	8b 4d fc	 mov	 ecx, DWORD PTR __Op$1[ebp+8]
  00043	8b 55 08	 mov	 edx, DWORD PTR __Val$[ebp]
  00046	89 01		 mov	 DWORD PTR [ecx], eax

; 1617 :             _Tail  = _STD addressof(_Removed->_Next);

  00048	8b 7d f4	 mov	 edi, DWORD PTR __Op$1[ebp]
  0004b	89 45 fc	 mov	 DWORD PTR __Op$1[ebp+8], eax
$LN37@remove:

; 1676 :             _First = _Next;

  0004e	8b c6		 mov	 eax, esi
  00050	3b f3		 cmp	 esi, ebx
  00052	75 d0		 jne	 SHORT $LL6@remove
  00054	8b 55 f8	 mov	 edx, DWORD PTR __Op$1[ebp+4]
$LN7@remove:

; 1643 :             auto _Target = _Head;

  00057	85 d2		 test	 edx, edx

; 1644 :             while (_Target) {

  00059	74 18		 je	 SHORT $LN15@remove
  0005b	0f 1f 44 00 00	 npad	 5
$LL14@remove:

; 1645 :                 auto _Next = _Target->_Next;

  00060	8b 32		 mov	 esi, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00062	6a 0c		 push	 12			; 0000000cH
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0006a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1651 :                 _Target = _Next;

  0006d	8b d6		 mov	 edx, esi
  0006f	85 f6		 test	 esi, esi
  00071	75 ed		 jne	 SHORT $LL14@remove
$LN15@remove:
  00073	5f		 pop	 edi

; 1662 :     }

  00074	5e		 pop	 esi
  00075	5b		 pop	 ebx
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ENDP ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z PROC ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back, COMDAT
; _this$ = ecx

; 1255 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1012 :         if (_Mysize == max_size()) {

  00029	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1012 :         if (_Mysize == max_size()) {

  00032	74 46		 je	 SHORT $LN62@push_back
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00034	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 77   :         return ::operator new(_Bytes);

  00037	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00040	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00047	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0004f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00052	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00054	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1017 :         ++_Mysize;

  00057	ff 46 04	 inc	 DWORD PTR [esi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  0005a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0005d	89 38		 mov	 DWORD PTR [eax], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0005f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  00062	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  00065	89 01		 mov	 DWORD PTR [ecx], eax

; 1257 :     }

  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
$LN62@push_back:

; 1013 :             _Xlength_error("list too long");

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0007f	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN60@push_back:
  00084	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ENDP ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ PROC ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >, COMDAT
; _this$ = ecx

; 1042 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 329  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	6a 0c		 push	 12			; 0000000cH
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1048 :     }

  00036	c3		 ret	 0
??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ENDP ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ
_TEXT	SEGMENT
?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ PROC ; UI::CWindowManager::__ClearReserveDeleteWindowList, COMDAT
; _this$ = ecx

; 804  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00004	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0000a	8b 30		 mov	 esi, DWORD PTR [eax]
  0000c	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 805  : 	for (TWindowContainer::iterator itor = m_ReserveDeleteWindowList.begin(); itor != m_ReserveDeleteWindowList.end(); ++itor)

  0000e	74 19		 je	 SHORT $LN3@ClearReser
$LL23@ClearReser:

; 806  : 	{
; 807  : 		CWindow * pWin = *itor;
; 808  : #ifdef __WINDOW_LEAK_CHECK__
; 809  : 		gs_kSet_pkWnd.erase(pWin);
; 810  : #endif
; 811  : 		delete pWin;

  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00013	85 c9		 test	 ecx, ecx
  00015	74 06		 je	 SHORT $LN2@ClearReser
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	6a 01		 push	 1
  0001b	ff 10		 call	 DWORD PTR [eax]
$LN2@ClearReser:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001f	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]

; 198  :         return this->_Ptr == _Right._Ptr;

  00025	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 805  : 	for (TWindowContainer::iterator itor = m_ReserveDeleteWindowList.begin(); itor != m_ReserveDeleteWindowList.end(); ++itor)

  00027	75 e7		 jne	 SHORT $LL23@ClearReser
$LN3@ClearReser:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  00029	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002c	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00032	8b 00		 mov	 eax, DWORD PTR [eax]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00034	85 c0		 test	 eax, eax
  00036	74 13		 je	 SHORT $LN32@ClearReser
$LL33@ClearReser:

; 329  :             _Pnext = _Pnode->_Next;

  00038	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	6a 0c		 push	 12			; 0000000cH
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00045	8b c6		 mov	 eax, esi
  00047	85 f6		 test	 esi, esi
  00049	75 ed		 jne	 SHORT $LL33@ClearReser
$LN32@ClearReser:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0004b	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00051	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00053	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00059	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  0005c	c7 87 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+140], 0
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 815  : }

  00068	c3		 ret	 0
?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ENDP ; UI::CWindowManager::__ClearReserveDeleteWindowList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
$T2 = 12						; size = 4
$T3 = 12						; size = 4
$T4 = 12						; size = 4
$T5 = 12						; size = 4
$T6 = 12						; size = 4
$T7 = 12						; size = 4
$T8 = 12						; size = 4
$T9 = 12						; size = 4
$T10 = 12						; size = 4
$T11 = 12						; size = 4
$T12 = 12						; size = 4
$T13 = 12						; size = 4
$T14 = 12						; size = 4
$T15 = 12						; size = 4
$T16 = 12						; size = 4
$T17 = 12						; size = 4
$T18 = 12						; size = 4
$T19 = 12						; size = 4
_dwWndType$ = 12					; size = 4
?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z PROC ; UI::CWindowManager::__NewWindow, COMDAT
; _this$ = ecx

; 111  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 112  : 	switch (dwWndType)

  00022	8b 45 0c	 mov	 eax, DWORD PTR _dwWndType$[ebp]
  00025	48		 dec	 eax
  00026	83 f8 10	 cmp	 eax, 16			; 00000010H
  00029	0f 87 dd 03 00
	00		 ja	 $LN21@NewWindow
  0002f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN77@NewWindow[eax*4]
$LN4@NewWindow:

; 113  : 	{
; 114  : 	case WT_SLOT:
; 115  : 		return new CSlotWindow(po);

  00036	68 a4 01 00 00	 push	 420			; 000001a4H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 0c	 mov	 DWORD PTR $T19[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	0f 84 ed 03 00
	00		 je	 $LN57@NewWindow
  00055	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow

; 172  : }

  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 08 00	 ret	 8
$LN5@NewWindow:

; 116  : 		break;
; 117  : 	case WT_GRIDSLOT:
; 118  : 		return new CGridSlotWindow(po);

  00070	68 bc 01 00 00	 push	 444			; 000001bcH
  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	83 c4 04	 add	 esp, 4
  0007d	89 45 0c	 mov	 DWORD PTR $T18[ebp], eax
  00080	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00087	85 c0		 test	 eax, eax
  00089	0f 84 b3 03 00
	00		 je	 $LN57@NewWindow
  0008f	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00092	8b c8		 mov	 ecx, eax
  00094	e8 00 00 00 00	 call	 ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CGridSlotWindow::CGridSlotWindow

; 172  : }

  00099	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a3	59		 pop	 ecx
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
$LN6@NewWindow:

; 119  : 		break;
; 120  : 	case WT_TEXTLINE:
; 121  : 		return new CTextLine(po);

  000aa	68 e8 01 00 00	 push	 488			; 000001e8H
  000af	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b4	83 c4 04	 add	 esp, 4
  000b7	89 45 0c	 mov	 DWORD PTR $T17[ebp], eax
  000ba	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000c1	85 c0		 test	 eax, eax
  000c3	0f 84 79 03 00
	00		 je	 $LN57@NewWindow
  000c9	ff 75 08	 push	 DWORD PTR _po$[ebp]
  000cc	8b c8		 mov	 ecx, eax
  000ce	e8 00 00 00 00	 call	 ??0CTextLine@UI@@QAE@PAU_object@@@Z ; UI::CTextLine::CTextLine

; 172  : }

  000d3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000dd	59		 pop	 ecx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
$LN7@NewWindow:

; 122  : 		break;
; 123  : 	case WT_MARKBOX:
; 124  : 		return new CMarkBox(po);

  000e4	68 34 01 00 00	 push	 308			; 00000134H
  000e9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 45 0c	 mov	 DWORD PTR $T16[ebp], eax
  000f4	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 3f 03 00
	00		 je	 $LN57@NewWindow
  00103	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00106	8b c8		 mov	 ecx, eax
  00108	e8 00 00 00 00	 call	 ??0CMarkBox@UI@@QAE@PAU_object@@@Z ; UI::CMarkBox::CMarkBox

; 172  : }

  0010d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00117	59		 pop	 ecx
  00118	8b e5		 mov	 esp, ebp
  0011a	5d		 pop	 ebp
  0011b	c2 08 00	 ret	 8
$LN8@NewWindow:

; 125  : 		break;
; 126  : 	case WT_IMAGEBOX:
; 127  : 		return new CImageBox(po);

  0011e	68 3c 01 00 00	 push	 316			; 0000013cH
  00123	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00128	83 c4 04	 add	 esp, 4
  0012b	89 45 0c	 mov	 DWORD PTR $T15[ebp], eax
  0012e	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  00135	85 c0		 test	 eax, eax
  00137	0f 84 05 03 00
	00		 je	 $LN57@NewWindow
  0013d	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00140	8b c8		 mov	 ecx, eax
  00142	e8 00 00 00 00	 call	 ??0CImageBox@UI@@QAE@PAU_object@@@Z ; UI::CImageBox::CImageBox

; 172  : }

  00147	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00151	59		 pop	 ecx
  00152	8b e5		 mov	 esp, ebp
  00154	5d		 pop	 ebp
  00155	c2 08 00	 ret	 8
$LN9@NewWindow:

; 128  : 		break;
; 129  : 	case WT_EXP_IMAGEBOX:
; 130  : 		return new CExpandedImageBox(po);

  00158	68 3c 01 00 00	 push	 316			; 0000013cH
  0015d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00162	83 c4 04	 add	 esp, 4
  00165	89 45 0c	 mov	 DWORD PTR $T14[ebp], eax
  00168	c7 45 fc 05 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 5
  0016f	85 c0		 test	 eax, eax
  00171	0f 84 cb 02 00
	00		 je	 $LN57@NewWindow
  00177	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0017a	8b c8		 mov	 ecx, eax
  0017c	e8 00 00 00 00	 call	 ??0CExpandedImageBox@UI@@QAE@PAU_object@@@Z ; UI::CExpandedImageBox::CExpandedImageBox

; 172  : }

  00181	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00184	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018b	59		 pop	 ecx
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 08 00	 ret	 8
$LN10@NewWindow:

; 131  : 		break;
; 132  : 	case WT_ANI_IMAGEBOX:
; 133  : 		return new CAniImageBox(po);

  00192	68 40 01 00 00	 push	 320			; 00000140H
  00197	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0019c	83 c4 04	 add	 esp, 4
  0019f	89 45 0c	 mov	 DWORD PTR $T13[ebp], eax
  001a2	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  001a9	85 c0		 test	 eax, eax
  001ab	0f 84 91 02 00
	00		 je	 $LN57@NewWindow
  001b1	ff 75 08	 push	 DWORD PTR _po$[ebp]
  001b4	8b c8		 mov	 ecx, eax
  001b6	e8 00 00 00 00	 call	 ??0CAniImageBox@UI@@QAE@PAU_object@@@Z ; UI::CAniImageBox::CAniImageBox

; 172  : }

  001bb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c5	59		 pop	 ecx
  001c6	8b e5		 mov	 esp, ebp
  001c8	5d		 pop	 ebp
  001c9	c2 08 00	 ret	 8
$LN11@NewWindow:

; 134  : 		break;
; 135  : 	case WT_BUTTON:
; 136  : 		return new CButton(po);

  001cc	68 60 03 00 00	 push	 864			; 00000360H
  001d1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001d6	83 c4 04	 add	 esp, 4
  001d9	89 45 0c	 mov	 DWORD PTR $T12[ebp], eax
  001dc	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  001e3	85 c0		 test	 eax, eax
  001e5	0f 84 57 02 00
	00		 je	 $LN57@NewWindow
  001eb	ff 75 08	 push	 DWORD PTR _po$[ebp]
  001ee	8b c8		 mov	 ecx, eax
  001f0	e8 00 00 00 00	 call	 ??0CButton@UI@@QAE@PAU_object@@@Z ; UI::CButton::CButton

; 172  : }

  001f5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001f8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001ff	59		 pop	 ecx
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c2 08 00	 ret	 8
$LN12@NewWindow:

; 137  : 		break;
; 138  : 	case WT_RATIOBUTTON:
; 139  : 		return new CRadioButton(po);

  00206	68 60 03 00 00	 push	 864			; 00000360H
  0020b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00210	83 c4 04	 add	 esp, 4
  00213	89 45 0c	 mov	 DWORD PTR $T11[ebp], eax
  00216	c7 45 fc 08 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 8
  0021d	85 c0		 test	 eax, eax
  0021f	0f 84 1d 02 00
	00		 je	 $LN57@NewWindow
  00225	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00228	8b c8		 mov	 ecx, eax
  0022a	e8 00 00 00 00	 call	 ??0CRadioButton@UI@@QAE@PAU_object@@@Z ; UI::CRadioButton::CRadioButton

; 172  : }

  0022f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00232	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00239	59		 pop	 ecx
  0023a	8b e5		 mov	 esp, ebp
  0023c	5d		 pop	 ebp
  0023d	c2 08 00	 ret	 8
$LN13@NewWindow:

; 140  : 		break;
; 141  : 	case WT_TOGGLEBUTTON:
; 142  : 		return new CToggleButton(po);

  00240	68 60 03 00 00	 push	 864			; 00000360H
  00245	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0024a	83 c4 04	 add	 esp, 4
  0024d	89 45 0c	 mov	 DWORD PTR $T10[ebp], eax
  00250	c7 45 fc 09 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 9
  00257	85 c0		 test	 eax, eax
  00259	0f 84 e3 01 00
	00		 je	 $LN57@NewWindow
  0025f	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00262	8b c8		 mov	 ecx, eax
  00264	e8 00 00 00 00	 call	 ??0CToggleButton@UI@@QAE@PAU_object@@@Z ; UI::CToggleButton::CToggleButton

; 172  : }

  00269	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0026c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00273	59		 pop	 ecx
  00274	8b e5		 mov	 esp, ebp
  00276	5d		 pop	 ebp
  00277	c2 08 00	 ret	 8
$LN14@NewWindow:

; 143  : 		break;
; 144  : 	case WT_DRAGBUTTON:
; 145  : 		return new CDragButton(po);

  0027a	68 70 03 00 00	 push	 880			; 00000370H
  0027f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00284	83 c4 04	 add	 esp, 4
  00287	89 45 0c	 mov	 DWORD PTR $T9[ebp], eax
  0028a	c7 45 fc 0a 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 10 ; 0000000aH
  00291	85 c0		 test	 eax, eax
  00293	0f 84 a9 01 00
	00		 je	 $LN57@NewWindow
  00299	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0029c	8b c8		 mov	 ecx, eax
  0029e	e8 00 00 00 00	 call	 ??0CDragButton@UI@@QAE@PAU_object@@@Z ; UI::CDragButton::CDragButton

; 172  : }

  002a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ad	59		 pop	 ecx
  002ae	8b e5		 mov	 esp, ebp
  002b0	5d		 pop	 ebp
  002b1	c2 08 00	 ret	 8
$LN15@NewWindow:

; 146  : 		break;
; 147  : 	case WT_BOX:
; 148  : 		return new CBox(po);

  002b4	68 34 01 00 00	 push	 308			; 00000134H
  002b9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002be	83 c4 04	 add	 esp, 4
  002c1	89 45 0c	 mov	 DWORD PTR $T8[ebp], eax
  002c4	c7 45 fc 0b 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 11 ; 0000000bH
  002cb	85 c0		 test	 eax, eax
  002cd	0f 84 6f 01 00
	00		 je	 $LN57@NewWindow
  002d3	ff 75 08	 push	 DWORD PTR _po$[ebp]
  002d6	8b c8		 mov	 ecx, eax
  002d8	e8 00 00 00 00	 call	 ??0CBox@UI@@QAE@PAU_object@@@Z ; UI::CBox::CBox

; 172  : }

  002dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e7	59		 pop	 ecx
  002e8	8b e5		 mov	 esp, ebp
  002ea	5d		 pop	 ebp
  002eb	c2 08 00	 ret	 8
$LN16@NewWindow:

; 149  : 		break;
; 150  : 	case WT_BAR:
; 151  : 		return new CBar(po);

  002ee	68 34 01 00 00	 push	 308			; 00000134H
  002f3	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002f8	83 c4 04	 add	 esp, 4
  002fb	89 45 0c	 mov	 DWORD PTR $T7[ebp], eax
  002fe	c7 45 fc 0c 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00305	85 c0		 test	 eax, eax
  00307	0f 84 35 01 00
	00		 je	 $LN57@NewWindow
  0030d	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00310	8b c8		 mov	 ecx, eax
  00312	e8 00 00 00 00	 call	 ??0CBar@UI@@QAE@PAU_object@@@Z ; UI::CBar::CBar

; 172  : }

  00317	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00321	59		 pop	 ecx
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 08 00	 ret	 8
$LN17@NewWindow:

; 152  : 		break;
; 153  : 	case WT_LINE:
; 154  : 		return new CLine(po);

  00328	68 34 01 00 00	 push	 308			; 00000134H
  0032d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00332	83 c4 04	 add	 esp, 4
  00335	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  00338	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0033f	85 c0		 test	 eax, eax
  00341	0f 84 fb 00 00
	00		 je	 $LN57@NewWindow
  00347	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0034a	8b c8		 mov	 ecx, eax
  0034c	e8 00 00 00 00	 call	 ??0CLine@UI@@QAE@PAU_object@@@Z ; UI::CLine::CLine

; 172  : }

  00351	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00354	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0035b	59		 pop	 ecx
  0035c	8b e5		 mov	 esp, ebp
  0035e	5d		 pop	 ebp
  0035f	c2 08 00	 ret	 8
$LN18@NewWindow:

; 155  : 		break;
; 156  : 	case WT_BAR3D:
; 157  : 		return new CBar3D(po);

  00362	68 3c 01 00 00	 push	 316			; 0000013cH
  00367	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0036c	83 c4 04	 add	 esp, 4
  0036f	89 45 0c	 mov	 DWORD PTR $T5[ebp], eax
  00372	c7 45 fc 0e 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 14 ; 0000000eH
  00379	85 c0		 test	 eax, eax
  0037b	0f 84 c1 00 00
	00		 je	 $LN57@NewWindow
  00381	ff 75 08	 push	 DWORD PTR _po$[ebp]
  00384	8b c8		 mov	 ecx, eax
  00386	e8 00 00 00 00	 call	 ??0CBar3D@UI@@QAE@PAU_object@@@Z ; UI::CBar3D::CBar3D

; 172  : }

  0038b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0038e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00395	59		 pop	 ecx
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 08 00	 ret	 8
$LN19@NewWindow:

; 158  : 		break;
; 159  : 	case WT_NUMLINE:
; 160  : 		return new CNumberLine(po);

  0039c	68 8c 01 00 00	 push	 396			; 0000018cH
  003a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003a6	83 c4 04	 add	 esp, 4
  003a9	89 45 0c	 mov	 DWORD PTR $T4[ebp], eax
  003ac	c7 45 fc 0f 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  003b3	85 c0		 test	 eax, eax
  003b5	0f 84 87 00 00
	00		 je	 $LN57@NewWindow
  003bb	ff 75 08	 push	 DWORD PTR _po$[ebp]
  003be	8b c8		 mov	 ecx, eax
  003c0	e8 00 00 00 00	 call	 ??0CNumberLine@UI@@QAE@PAU_object@@@Z ; UI::CNumberLine::CNumberLine

; 172  : }

  003c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003cf	59		 pop	 ecx
  003d0	8b e5		 mov	 esp, ebp
  003d2	5d		 pop	 ebp
  003d3	c2 08 00	 ret	 8
$LN20@NewWindow:

; 161  : 		break;
; 162  : #ifdef ENABLE_RT_EXTENSION
; 163  : 	case WT_RENDER_TARGET:
; 164  : 		return new CRenderTarget(po);

  003d6	68 54 01 00 00	 push	 340			; 00000154H
  003db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  003e0	83 c4 04	 add	 esp, 4
  003e3	89 45 0c	 mov	 DWORD PTR $T3[ebp], eax
  003e6	c7 45 fc 10 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 16 ; 00000010H
  003ed	85 c0		 test	 eax, eax
  003ef	74 51		 je	 SHORT $LN57@NewWindow
  003f1	ff 75 08	 push	 DWORD PTR _po$[ebp]
  003f4	8b c8		 mov	 ecx, eax
  003f6	e8 00 00 00 00	 call	 ??0CRenderTarget@UI@@QAE@PAU_object@@@Z ; UI::CRenderTarget::CRenderTarget

; 172  : }

  003fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00405	59		 pop	 ecx
  00406	8b e5		 mov	 esp, ebp
  00408	5d		 pop	 ebp
  00409	c2 08 00	 ret	 8
$LN21@NewWindow:

; 165  : 		break;
; 166  : #endif
; 167  : 	default:
; 168  : 		assert(!"CWindowManager::__NewWindow");
; 169  : 		break;
; 170  : 	}
; 171  : 	return new CWindow(po);

  0040c	68 30 01 00 00	 push	 304			; 00000130H
  00411	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00416	83 c4 04	 add	 esp, 4
  00419	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  0041c	c7 45 fc 11 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 17 ; 00000011H
  00423	85 c0		 test	 eax, eax
  00425	74 1b		 je	 SHORT $LN57@NewWindow
  00427	ff 75 08	 push	 DWORD PTR _po$[ebp]
  0042a	8b c8		 mov	 ecx, eax
  0042c	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow

; 172  : }

  00431	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00434	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0043b	59		 pop	 ecx
  0043c	8b e5		 mov	 esp, ebp
  0043e	5d		 pop	 ebp
  0043f	c2 08 00	 ret	 8
$LN57@NewWindow:
  00442	33 c0		 xor	 eax, eax
  00444	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00447	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0044e	59		 pop	 ecx
  0044f	8b e5		 mov	 esp, ebp
  00451	5d		 pop	 ebp
  00452	c2 08 00	 ret	 8
  00455	0f 1f 00	 npad	 3
$LN77@NewWindow:
  00458	00 00 00 00	 DD	 $LN4@NewWindow
  0045c	00 00 00 00	 DD	 $LN5@NewWindow
  00460	00 00 00 00	 DD	 $LN6@NewWindow
  00464	00 00 00 00	 DD	 $LN7@NewWindow
  00468	00 00 00 00	 DD	 $LN8@NewWindow
  0046c	00 00 00 00	 DD	 $LN9@NewWindow
  00470	00 00 00 00	 DD	 $LN10@NewWindow
  00474	00 00 00 00	 DD	 $LN11@NewWindow
  00478	00 00 00 00	 DD	 $LN12@NewWindow
  0047c	00 00 00 00	 DD	 $LN13@NewWindow
  00480	00 00 00 00	 DD	 $LN14@NewWindow
  00484	00 00 00 00	 DD	 $LN15@NewWindow
  00488	00 00 00 00	 DD	 $LN16@NewWindow
  0048c	00 00 00 00	 DD	 $LN17@NewWindow
  00490	00 00 00 00	 DD	 $LN18@NewWindow
  00494	00 00 00 00	 DD	 $LN19@NewWindow
  00498	00 00 00 00	 DD	 $LN20@NewWindow
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$0:
  00000	68 a4 01 00 00	 push	 420			; 000001a4H
  00005	8b 45 0c	 mov	 eax, DWORD PTR $T19[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$1:
  00012	68 bc 01 00 00	 push	 444			; 000001bcH
  00017	8b 45 0c	 mov	 eax, DWORD PTR $T18[ebp]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$2:
  00024	68 e8 01 00 00	 push	 488			; 000001e8H
  00029	8b 45 0c	 mov	 eax, DWORD PTR $T17[ebp]
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$3:
  00036	68 34 01 00 00	 push	 308			; 00000134H
  0003b	8b 45 0c	 mov	 eax, DWORD PTR $T16[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00044	83 c4 08	 add	 esp, 8
  00047	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$4:
  00048	68 3c 01 00 00	 push	 316			; 0000013cH
  0004d	8b 45 0c	 mov	 eax, DWORD PTR $T15[ebp]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00056	83 c4 08	 add	 esp, 8
  00059	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$5:
  0005a	68 3c 01 00 00	 push	 316			; 0000013cH
  0005f	8b 45 0c	 mov	 eax, DWORD PTR $T14[ebp]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
  0006b	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$6:
  0006c	68 40 01 00 00	 push	 320			; 00000140H
  00071	8b 45 0c	 mov	 eax, DWORD PTR $T13[ebp]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007a	83 c4 08	 add	 esp, 8
  0007d	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$7:
  0007e	68 60 03 00 00	 push	 864			; 00000360H
  00083	8b 45 0c	 mov	 eax, DWORD PTR $T12[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008c	83 c4 08	 add	 esp, 8
  0008f	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$8:
  00090	68 60 03 00 00	 push	 864			; 00000360H
  00095	8b 45 0c	 mov	 eax, DWORD PTR $T11[ebp]
  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009e	83 c4 08	 add	 esp, 8
  000a1	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$9:
  000a2	68 60 03 00 00	 push	 864			; 00000360H
  000a7	8b 45 0c	 mov	 eax, DWORD PTR $T10[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b0	83 c4 08	 add	 esp, 8
  000b3	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$10:
  000b4	68 70 03 00 00	 push	 880			; 00000370H
  000b9	8b 45 0c	 mov	 eax, DWORD PTR $T9[ebp]
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c2	83 c4 08	 add	 esp, 8
  000c5	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$11:
  000c6	68 34 01 00 00	 push	 308			; 00000134H
  000cb	8b 45 0c	 mov	 eax, DWORD PTR $T8[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d4	83 c4 08	 add	 esp, 8
  000d7	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$12:
  000d8	68 34 01 00 00	 push	 308			; 00000134H
  000dd	8b 45 0c	 mov	 eax, DWORD PTR $T7[ebp]
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e6	83 c4 08	 add	 esp, 8
  000e9	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$13:
  000ea	68 34 01 00 00	 push	 308			; 00000134H
  000ef	8b 45 0c	 mov	 eax, DWORD PTR $T6[ebp]
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000f8	83 c4 08	 add	 esp, 8
  000fb	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$14:
  000fc	68 3c 01 00 00	 push	 316			; 0000013cH
  00101	8b 45 0c	 mov	 eax, DWORD PTR $T5[ebp]
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010a	83 c4 08	 add	 esp, 8
  0010d	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$15:
  0010e	68 8c 01 00 00	 push	 396			; 0000018cH
  00113	8b 45 0c	 mov	 eax, DWORD PTR $T4[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0011c	83 c4 08	 add	 esp, 8
  0011f	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$16:
  00120	68 54 01 00 00	 push	 340			; 00000154H
  00125	8b 45 0c	 mov	 eax, DWORD PTR $T3[ebp]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0012e	83 c4 08	 add	 esp, 8
  00131	c3		 ret	 0
__unwindfunclet$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z$17:
  00132	68 30 01 00 00	 push	 304			; 00000130H
  00137	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00140	83 c4 08	 add	 esp, 8
  00143	c3		 ret	 0
  00144	cc		 int	 3
  00145	cc		 int	 3
  00146	cc		 int	 3
  00147	cc		 int	 3
  00148	cc		 int	 3
__ehhandler$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z:
  00149	90		 npad	 1
  0014a	90		 npad	 1
  0014b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0014f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00152	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00155	33 c8		 xor	 ecx, eax
  00157	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0015c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z
  00161	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z ENDP ; UI::CWindowManager::__NewWindow
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z PROC ; UI::CWindowManager::__PickWindow, COMDAT
; _this$ = ecx

; 830  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 831  : 	if (m_pLockWindow)

  00006	8b 4b 64	 mov	 ecx, DWORD PTR [ebx+100]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 07		 je	 SHORT $LN8@PickWindow
  0000d	5b		 pop	 ebx

; 858  : }

  0000e	5d		 pop	 ebp

; 832  : 	{
; 833  : 		return m_pLockWindow->PickWindow(x, y);

  0000f	e9 00 00 00 00	 jmp	 ?PickWindow@CWindow@UI@@QAEPAV12@JJ@Z ; UI::CWindow::PickWindow
$LN8@PickWindow:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00014	8b 83 90 00 00
	00		 mov	 eax, DWORD PTR [ebx+144]
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0001c	8b 30		 mov	 esi, DWORD PTR [eax]
  0001e	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 836  : 	for (TWindowContainer::iterator itor = m_PickAlwaysWindowList.begin(); itor != m_PickAlwaysWindowList.end(); ++itor)

  00020	74 29		 je	 SHORT $LN97@PickWindow
$LL78@PickWindow:

; 837  : 	{
; 838  : 		CWindow * pWindow = *itor;

  00022	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 839  : 		if (pWindow->IsRendering())

  00025	8b cf		 mov	 ecx, edi
  00027	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0002c	84 c0		 test	 al, al
  0002e	74 11		 je	 SHORT $LN2@PickWindow

; 840  : 			if (pWindow->IsIn(x, y))

  00030	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00033	8b cf		 mov	 ecx, edi
  00035	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00038	e8 00 00 00 00	 call	 ?IsIn@CWindow@UI@@QAE_NJJ@Z ; UI::CWindow::IsIn
  0003d	84 c0		 test	 al, al
  0003f	75 42		 jne	 SHORT $LN89@PickWindow
$LN2@PickWindow:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00041	8b 36		 mov	 esi, DWORD PTR [esi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00043	3b b3 90 00 00
	00		 cmp	 esi, DWORD PTR [ebx+144]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 836  : 	for (TWindowContainer::iterator itor = m_PickAlwaysWindowList.begin(); itor != m_PickAlwaysWindowList.end(); ++itor)

  00049	75 d7		 jne	 SHORT $LL78@PickWindow
$LN97@PickWindow:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0004b	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [ebx+156]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 1234 :         : current(_STD move(_Right)) {}

  00051	3b 00		 cmp	 eax, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 846  : 	for (TWindowContainer::reverse_iterator ritor = m_LayerWindowList.rbegin(); ritor != m_LayerWindowList.rend(); ++ritor)

  00053	74 25		 je	 SHORT $LN6@PickWindow
$LL46@PickWindow:

; 849  : 		CWindow * pPickedWindow = pLayer->PickWindow(x, y);

  00055	ff 75 0c	 push	 DWORD PTR _y$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 176  :         const auto _New_ptr = this->_Ptr->_Prev;

  00058	8d 78 04	 lea	 edi, DWORD PTR [eax+4]

; 177  : #if _ITERATOR_DEBUG_LEVEL == 2
; 178  :         const auto _Mycont = static_cast<const _Mylist*>(this->_Getcont());
; 179  :         _STL_ASSERT(_Mycont, "cannot decrement value-initialized list iterator");
; 180  :         _STL_VERIFY(_New_ptr != _Mycont->_Myhead, "cannot decrement begin list iterator");
; 181  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 182  : 
; 183  :         this->_Ptr = _New_ptr;

  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 849  : 		CWindow * pPickedWindow = pLayer->PickWindow(x, y);

  0005d	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00060	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?PickWindow@CWindow@UI@@QAEPAV12@JJ@Z ; UI::CWindow::PickWindow

; 850  : 
; 851  : 		if (pPickedWindow != pLayer)

  0006a	3b c6		 cmp	 eax, esi
  0006c	75 0e		 jne	 SHORT $LN98@PickWindow
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0006e	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [ebx+156]

; 183  :         this->_Ptr = _New_ptr;

  00074	8b 07		 mov	 eax, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00076	3b 01		 cmp	 eax, DWORD PTR [ecx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 846  : 	for (TWindowContainer::reverse_iterator ritor = m_LayerWindowList.rbegin(); ritor != m_LayerWindowList.rend(); ++ritor)

  00078	75 db		 jne	 SHORT $LL46@PickWindow
$LN6@PickWindow:

; 852  : 		{
; 853  : 			return pPickedWindow;
; 854  : 		}
; 855  : 	}
; 856  : 
; 857  : 	return NULL;

  0007a	33 c0		 xor	 eax, eax
$LN98@PickWindow:
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx

; 858  : }

  0007f	5d		 pop	 ebp
  00080	c2 08 00	 ret	 8
$LN89@PickWindow:

; 841  : 			{
; 842  : 				return pWindow;

  00083	8b c7		 mov	 eax, edi
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx

; 858  : }

  00088	5d		 pop	 ebp
  00089	c2 08 00	 ret	 8
?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z ENDP ; UI::CWindowManager::__PickWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z PROC	; UI::CWindowManager::SetMousePosition, COMDAT
; _this$ = ecx

; 861  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 862  : 	if (m_iHres == 0)

  00006	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0000a	74 2e		 je	 SHORT $LN1@SetMousePo

; 863  : 	{
; 864  : 		return;
; 865  : 	}
; 866  : 
; 867  : 	if (m_iVres == 0)

  0000c	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  00010	74 28		 je	 SHORT $LN1@SetMousePo

; 868  : 	{
; 869  : 		return;
; 870  : 	}
; 871  : 
; 872  : 	m_lMouseRealX = x;

  00012	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]

; 873  : 	m_lMouseRealY = y;
; 874  : 	m_lMouseX = m_lWidth * x / m_iHres;

  00015	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00018	0f af c1	 imul	 eax, ecx
  0001b	56		 push	 esi
  0001c	8b 75 0c	 mov	 esi, DWORD PTR _y$[ebp]
  0001f	89 77 20	 mov	 DWORD PTR [edi+32], esi
  00022	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
  00025	99		 cdq
  00026	f7 7f 10	 idiv	 DWORD PTR [edi+16]
  00029	89 47 14	 mov	 DWORD PTR [edi+20], eax

; 875  : 	m_lMouseY = m_lHeight * y / m_iVres;

  0002c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0002f	0f af c6	 imul	 eax, esi
  00032	5e		 pop	 esi
  00033	99		 cdq
  00034	f7 7f 0c	 idiv	 DWORD PTR [edi+12]
  00037	89 47 18	 mov	 DWORD PTR [edi+24], eax
$LN1@SetMousePo:
  0003a	5f		 pop	 edi

; 876  : }

  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ENDP	; UI::CWindowManager::SetMousePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunPressExitKey@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunPressExitKey@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunPressExitKey, COMDAT
; _this$ = ecx

; 1508 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1509 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 09		 je	 SHORT $LN2@RunPressEx

; 1510 : 	{
; 1511 : 		m_pLockWindow->OnPressExitKey();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff a0 a0 00 00
	00		 jmp	 DWORD PTR [eax+160]
$LN2@RunPressEx:

; 1512 : 		return;
; 1513 : 	}
; 1514 : 	if (m_pActiveWindow)

  00013	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00016	85 c9		 test	 ecx, ecx
  00018	74 0c		 je	 SHORT $LN4@RunPressEx

; 1515 : 	{
; 1516 : 		if (m_pActiveWindow->OnPressExitKey())

  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	ff 90 a0 00 00
	00		 call	 DWORD PTR [eax+160]
  00022	85 c0		 test	 eax, eax
  00024	75 0c		 jne	 SHORT $LN1@RunPressEx
$LN4@RunPressEx:

; 1517 : 		{
; 1518 : 			return;
; 1519 : 		}
; 1520 : 	}
; 1521 : 
; 1522 : 	m_pRootWindow->RunPressExitKeyEvent();

  00026	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ?RunPressExitKeyEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunPressExitKeyEvent
$LN1@RunPressEx:
  00032	5e		 pop	 esi

; 1523 : }

  00033	c3		 ret	 0
?RunPressExitKey@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunPressExitKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunPressEscapeKey, COMDAT
; _this$ = ecx

; 1497 : {

  00000	8b c1		 mov	 eax, ecx

; 1498 : 	if (m_pLockWindow)

  00002	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  00005	85 c9		 test	 ecx, ecx
  00007	74 08		 je	 SHORT $LN2@RunPressEs

; 1499 : 	{
; 1500 : 		m_pLockWindow->OnPressEscapeKey();

  00009	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000b	ff a0 9c 00 00
	00		 jmp	 DWORD PTR [eax+156]
$LN2@RunPressEs:

; 1501 : 		return;
; 1502 : 	}
; 1503 : 
; 1504 : 	m_pRootWindow->RunPressEscapeKeyEvent();

  00011	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  00017	e9 00 00 00 00	 jmp	 ?RunPressEscapeKeyEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunPressEscapeKeyEvent
?RunPressEscapeKey@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunPressEscapeKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunPressReturnKey@CWindowManager@UI@@QAE_NXZ
_TEXT	SEGMENT
?RunPressReturnKey@CWindowManager@UI@@QAE_NXZ PROC	; UI::CWindowManager::RunPressReturnKey, COMDAT
; _this$ = ecx

; 1481 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1482 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0f		 je	 SHORT $LN2@RunPressRe

; 1483 : 	{
; 1484 : 		return m_pLockWindow->OnPressReturnKey();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	ff 90 98 00 00
	00		 call	 DWORD PTR [eax+152]
  00012	85 c0		 test	 eax, eax
  00014	5e		 pop	 esi
  00015	0f 95 c0	 setne	 al

; 1494 : }

  00018	c3		 ret	 0
$LN2@RunPressRe:

; 1485 : 	}
; 1486 : 
; 1487 : 	if (m_pRootWindow->RunPressReturnKeyEvent())

  00019	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  0001f	e8 00 00 00 00	 call	 ?RunPressReturnKeyEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunPressReturnKeyEvent
  00024	85 c0		 test	 eax, eax
  00026	74 10		 je	 SHORT $LN3@RunPressRe

; 1488 : 	{
; 1489 : 		m_iIgnoreIMEReturnEndTime = timeGetTime() + 50;

  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  0002e	83 c0 32	 add	 eax, 50			; 00000032H
  00031	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 1490 : 		return true;

  00034	b0 01		 mov	 al, 1
  00036	5e		 pop	 esi

; 1494 : }

  00037	c3		 ret	 0
$LN3@RunPressRe:

; 1491 : 	}
; 1492 : 
; 1493 : 	return false;

  00038	32 c0		 xor	 al, al
  0003a	5e		 pop	 esi

; 1494 : }

  0003b	c3		 ret	 0
?RunPressReturnKey@CWindowManager@UI@@QAE_NXZ ENDP	; UI::CWindowManager::RunPressReturnKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunKeyUp@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
tv584 = -4						; size = 4
_vkey$ = 8						; size = 4
?RunKeyUp@CWindowManager@UI@@QAEXH@Z PROC		; UI::CWindowManager::RunKeyUp, COMDAT
; _this$ = ecx

; 1449 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000a	8d 4d 08	 lea	 ecx, DWORD PTR _vkey$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1449 : {

  0000d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	51		 push	 ecx
  0000f	8d 4d f0	 lea	 ecx, DWORD PTR __Loc$1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1450 : 	TKeyCaptureWindowMap::iterator itor = m_KeyCaptureWindowMap.find(vkey);

  00012	8d 83 80 00 00
	00		 lea	 eax, DWORD PTR [ebx+128]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00018	51		 push	 ecx
  00019	8b c8		 mov	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1450 : 	TKeyCaptureWindowMap::iterator itor = m_KeyCaptureWindowMap.find(vkey);

  0001b	89 45 fc	 mov	 DWORD PTR tv584[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00023	8b 7d f8	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  00026	8b 75 08	 mov	 esi, DWORD PTR _vkey$[ebp]
  00029	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0002d	75 42		 jne	 SHORT $LN2@RunKeyUp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0002f	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00032	7c 3d		 jl	 SHORT $LN2@RunKeyUp

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00034	39 bb 80 00 00
	00		 cmp	 DWORD PTR [ebx+128], edi
  0003a	8d 83 80 00 00
	00		 lea	 eax, DWORD PTR [ebx+128]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1451 : 	if (m_KeyCaptureWindowMap.end() != itor)

  00040	74 2f		 je	 SHORT $LN2@RunKeyUp

; 1452 : 	{
; 1453 : 		CWindow * pKeyCaptureWindow = itor->second;

  00042	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 1454 : 		if (pKeyCaptureWindow)

  00045	85 c9		 test	 ecx, ecx
  00047	74 0c		 je	 SHORT $LN3@RunKeyUp

; 1455 : 		{
; 1456 : 			pKeyCaptureWindow->OnKeyUp(vkey);

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	56		 push	 esi
  0004c	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]
  00052	8b 45 fc	 mov	 eax, DWORD PTR tv584[ebp]
$LN3@RunKeyUp:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00055	57		 push	 edi
  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0005d	6a 18		 push	 24			; 00000018H
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00065	83 c4 08	 add	 esp, 8
  00068	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1478 : }

  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
$LN2@RunKeyUp:

; 1457 : 		}
; 1458 : 
; 1459 : 		m_KeyCaptureWindowMap.erase(itor);
; 1460 : 		return;
; 1461 : 	}
; 1462 : 
; 1463 : 	if (m_pLockWindow)

  00071	8b 4b 64	 mov	 ecx, DWORD PTR [ebx+100]
  00074	85 c9		 test	 ecx, ecx
  00076	74 12		 je	 SHORT $LN4@RunKeyUp

; 1464 : 	{
; 1465 : 		m_pLockWindow->OnKeyUp(vkey);

  00078	8b 01		 mov	 eax, DWORD PTR [ecx]
  0007a	56		 push	 esi
  0007b	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]
  00081	5f		 pop	 edi

; 1478 : }

  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 04 00	 ret	 4
$LN4@RunKeyUp:

; 1466 : 		return;
; 1467 : 	}
; 1468 : 
; 1469 : 	if (m_pActiveWindow)

  0008a	8b 4b 58	 mov	 ecx, DWORD PTR [ebx+88]
  0008d	85 c9		 test	 ecx, ecx
  0008f	74 0d		 je	 SHORT $LN6@RunKeyUp

; 1470 : 	{
; 1471 : 		if (m_pActiveWindow->OnKeyUp(vkey))

  00091	8b 01		 mov	 eax, DWORD PTR [ecx]
  00093	56		 push	 esi
  00094	ff 90 94 00 00
	00		 call	 DWORD PTR [eax+148]
  0009a	85 c0		 test	 eax, eax
  0009c	75 0c		 jne	 SHORT $LN1@RunKeyUp
$LN6@RunKeyUp:

; 1472 : 		{
; 1473 : 			return;
; 1474 : 		}
; 1475 : 	}
; 1476 : 
; 1477 : 	m_pRootWindow->RunKeyUpEvent(vkey);

  0009e	8b 8b 98 00 00
	00		 mov	 ecx, DWORD PTR [ebx+152]
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ?RunKeyUpEvent@CWindow@UI@@QAEHH@Z ; UI::CWindow::RunKeyUpEvent
$LN1@RunKeyUp:

; 1478 : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 04 00	 ret	 4
?RunKeyUp@CWindowManager@UI@@QAEXH@Z ENDP		; UI::CWindowManager::RunKeyUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunKeyDown@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
$T2 = -44						; size = 12
__Loc$3 = -32						; size = 12
$T4 = -28						; size = 8
$T5 = -20						; size = 8
$T6 = -20						; size = 8
$T7 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_vkey$ = 8						; size = 4
?RunKeyDown@CWindowManager@UI@@QAEXH@Z PROC		; UI::CWindowManager::RunKeyDown, COMDAT
; _this$ = ecx

; 1423 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunKeyDown@CWindowManager@UI@@QAEXH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1424 : 	if (m_pLockWindow)

  0002a	8b 4f 64	 mov	 ecx, DWORD PTR [edi+100]
  0002d	85 c9		 test	 ecx, ecx
  0002f	74 3c		 je	 SHORT $LN2@RunKeyDown

; 1425 : 	{
; 1426 : 		m_pLockWindow->OnKeyDown(vkey);

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	8b 75 08	 mov	 esi, DWORD PTR _vkey$[ebp]
  00036	56		 push	 esi
  00037	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0003d	8b 47 64	 mov	 eax, DWORD PTR [edi+100]
$LN185@RunKeyDown:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1446 : }

  00040	89 45 f0	 mov	 DWORD PTR $T7[ebp+4], eax
  00043	8d 8f 80 00 00
	00		 lea	 ecx, DWORD PTR [edi+128]
  00049	8d 45 ec	 lea	 eax, DWORD PTR $T7[ebp]
  0004c	89 75 ec	 mov	 DWORD PTR $T7[ebp], esi
  0004f	50		 push	 eax
  00050	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  00053	50		 push	 eax
  00054	e8 00 00 00 00	 call	 ??$insert@U?$pair@HPAVCWindow@UI@@@std@@$0A@@?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@HPAVCWindow@UI@@@1@@Z ; std::map<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> > >::insert<std::pair<int,UI::CWindow *>,0>
  00059	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00063	59		 pop	 ecx
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 04 00	 ret	 4
$LN2@RunKeyDown:

; 1427 : 		m_KeyCaptureWindowMap.insert(std::make_pair(vkey, m_pLockWindow));
; 1428 : 		return;
; 1429 : 	}
; 1430 : 	if (m_pActiveWindow)

  0006d	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00070	85 c9		 test	 ecx, ecx
  00072	74 23		 je	 SHORT $LN178@RunKeyDown

; 1431 : 		if (m_pActiveWindow->IsShow())

  00074	8b 01		 mov	 eax, DWORD PTR [ecx]
  00076	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00079	ff d0		 call	 eax
  0007b	8b 75 08	 mov	 esi, DWORD PTR _vkey$[ebp]
  0007e	84 c0		 test	 al, al
  00080	74 18		 je	 SHORT $LN5@RunKeyDown

; 1432 : 		{
; 1433 : 			if (m_pActiveWindow->OnKeyDown(vkey))

  00082	8b 4f 58	 mov	 ecx, DWORD PTR [edi+88]
  00085	56		 push	 esi
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	ff 90 90 00 00
	00		 call	 DWORD PTR [eax+144]
  0008e	85 c0		 test	 eax, eax
  00090	74 08		 je	 SHORT $LN5@RunKeyDown
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00092	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1436 : 				return;

  00095	eb a9		 jmp	 SHORT $LN185@RunKeyDown
$LN178@RunKeyDown:

; 1427 : 		m_KeyCaptureWindowMap.insert(std::make_pair(vkey, m_pLockWindow));
; 1428 : 		return;
; 1429 : 	}
; 1430 : 	if (m_pActiveWindow)

  00097	8b 75 08	 mov	 esi, DWORD PTR _vkey$[ebp]
$LN5@RunKeyDown:

; 1437 : 			}
; 1438 : 		}
; 1439 : 
; 1440 : 	CWindow * pKeyCaptureWindow = m_pRootWindow->RunKeyDownEvent(vkey);

  0009a	8b 8f 98 00 00
	00		 mov	 ecx, DWORD PTR [edi+152]
  000a0	56		 push	 esi
  000a1	e8 00 00 00 00	 call	 ?RunKeyDownEvent@CWindow@UI@@QAEPAV12@H@Z ; UI::CWindow::RunKeyDownEvent
  000a6	8b d8		 mov	 ebx, eax

; 1441 : 	if (pKeyCaptureWindow)

  000a8	85 db		 test	 ebx, ebx
  000aa	0f 84 9b 00 00
	00		 je	 $LN155@RunKeyDown
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000b0	8b 97 88 00 00
	00		 mov	 edx, DWORD PTR [edi+136]
  000b6	8b 0a		 mov	 ecx, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5129 :     for (; _First != _Last; ++_First) {

  000b8	3b d1		 cmp	 edx, ecx
  000ba	74 15		 je	 SHORT $LN183@RunKeyDown
  000bc	0f 1f 40 00	 npad	 4
$LL72@RunKeyDown:

; 5130 :         if (*_First == _Val) {

  000c0	39 59 08	 cmp	 DWORD PTR [ecx+8], ebx
  000c3	74 08		 je	 SHORT $LN171@RunKeyDown
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 51   :         _Ptr = _Ptr->_Next;

  000c5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c7	8b c8		 mov	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5129 :     for (; _First != _Last; ++_First) {

  000c9	3b c2		 cmp	 eax, edx
  000cb	75 f3		 jne	 SHORT $LL72@RunKeyDown
$LN171@RunKeyDown:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1442 : 		if (m_ReserveDeleteWindowList.end() == std::find(m_ReserveDeleteWindowList.begin(), m_ReserveDeleteWindowList.end(), pKeyCaptureWindow))

  000cd	3b d1		 cmp	 edx, ecx
  000cf	75 7a		 jne	 SHORT $LN155@RunKeyDown
$LN183@RunKeyDown:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  000d1	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000d4	89 75 ec	 mov	 DWORD PTR $T6[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  000d7	50		 push	 eax
  000d8	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000db	89 5d f0	 mov	 DWORD PTR $T6[ebp+4], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1444 : 			m_KeyCaptureWindowMap.insert(TKeyCaptureWindowMap::value_type(vkey, pKeyCaptureWindow));

  000de	83 ef 80	 sub	 edi, -128		; ffffff80H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  000e1	50		 push	 eax
  000e2	8b cf		 mov	 ecx, edi
  000e4	e8 00 00 00 00	 call	 ??$_Find_lower_bound@H@?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@ABH@Z ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::_Find_lower_bound<int>
  000e9	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000ed	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000f0	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000f5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f9	75 05		 jne	 SHORT $LN176@RunKeyDown
  000fb	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
  000fe	7d 4b		 jge	 SHORT $LN155@RunKeyDown
$LN176@RunKeyDown:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00100	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00107	74 56		 je	 SHORT $LN187@RunKeyDown

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00109	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0010b	89 7d ec	 mov	 DWORD PTR $T5[ebp], edi

; 77   :         return ::operator new(_Bytes);

  0010e	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00110	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00117	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0011e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00123	8b 4d 08	 mov	 ecx, DWORD PTR _vkey$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00126	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00129	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0012c	8b cf		 mov	 ecx, edi
  0012e	50		 push	 eax
  0012f	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00132	89 58 14	 mov	 DWORD PTR [eax+20], ebx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00135	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00138	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0013a	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0013d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00140	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00146	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Insert_node
$LN155@RunKeyDown:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1446 : }

  0014b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0014e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00155	59		 pop	 ecx
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
$LN187@RunKeyDown:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  0015f	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN181@RunKeyDown:
  00164	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunKeyDown@CWindowManager@UI@@QAEXH@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RunKeyDown@CWindowManager@UI@@QAEXH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunKeyDown@CWindowManager@UI@@QAEXH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunKeyDown@CWindowManager@UI@@QAEXH@Z ENDP		; UI::CWindowManager::RunKeyDown
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunCloseReading@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunCloseReading@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunCloseReading, COMDAT
; _this$ = ecx

; 1405 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1406 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunCloseRe

; 1407 : 	{
; 1408 : 		m_pLockWindow->OnIMECloseReadingWndEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 68	 jmp	 DWORD PTR [eax+104]
$LN2@RunCloseRe:

; 1409 : 		return;
; 1410 : 	}
; 1411 : 	if (m_pActiveWindow)

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunCloseRe

; 1412 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunCloseRe

; 1413 : 		{
; 1414 : 			if (m_pActiveWindow->OnIMECloseReadingWndEvent())

  00020	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 68	 jmp	 DWORD PTR [eax+104]
$LN5@RunCloseRe:
  00029	5e		 pop	 esi

; 1415 : 			{
; 1416 : 				return;
; 1417 : 			}
; 1418 : 		}
; 1419 : }

  0002a	c3		 ret	 0
?RunCloseReading@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunCloseReading
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunOpenReading@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunOpenReading@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunOpenReading, COMDAT
; _this$ = ecx

; 1388 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1389 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunOpenRea

; 1390 : 	{
; 1391 : 		m_pLockWindow->OnIMEOpenReadingWndEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 64	 jmp	 DWORD PTR [eax+100]
$LN2@RunOpenRea:

; 1392 : 		return;
; 1393 : 	}
; 1394 : 	if (m_pActiveWindow)

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunOpenRea

; 1395 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunOpenRea

; 1396 : 		{
; 1397 : 			if (m_pActiveWindow->OnIMEOpenReadingWndEvent())

  00020	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 64	 jmp	 DWORD PTR [eax+100]
$LN5@RunOpenRea:
  00029	5e		 pop	 esi

; 1398 : 			{
; 1399 : 				return;
; 1400 : 			}
; 1401 : 		}
; 1402 : }

  0002a	c3		 ret	 0
?RunOpenReading@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunOpenReading
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunCloseCandidate@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunCloseCandidate@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunCloseCandidate, COMDAT
; _this$ = ecx

; 1371 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1372 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunCloseCa

; 1373 : 	{
; 1374 : 		m_pLockWindow->OnIMECloseCandidateListEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 60	 jmp	 DWORD PTR [eax+96]
$LN2@RunCloseCa:

; 1375 : 		return;
; 1376 : 	}
; 1377 : 	if (m_pActiveWindow)

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunCloseCa

; 1378 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunCloseCa

; 1379 : 		{
; 1380 : 			if (m_pActiveWindow->OnIMECloseCandidateListEvent())

  00020	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 60	 jmp	 DWORD PTR [eax+96]
$LN5@RunCloseCa:
  00029	5e		 pop	 esi

; 1381 : 			{
; 1382 : 				return;
; 1383 : 			}
; 1384 : 		}
; 1385 : }

  0002a	c3		 ret	 0
?RunCloseCandidate@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunCloseCandidate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunOpenCandidate@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunOpenCandidate@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunOpenCandidate, COMDAT
; _this$ = ecx

; 1354 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1355 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunOpenCan

; 1356 : 	{
; 1357 : 		m_pLockWindow->OnIMEOpenCandidateListEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 5c	 jmp	 DWORD PTR [eax+92]
$LN2@RunOpenCan:

; 1358 : 		return;
; 1359 : 	}
; 1360 : 	if (m_pActiveWindow)

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunOpenCan

; 1361 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunOpenCan

; 1362 : 		{
; 1363 : 			if (m_pActiveWindow->OnIMEOpenCandidateListEvent())

  00020	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 5c	 jmp	 DWORD PTR [eax+92]
$LN5@RunOpenCan:
  00029	5e		 pop	 esi

; 1364 : 			{
; 1365 : 				return;
; 1366 : 			}
; 1367 : 		}
; 1368 : }

  0002a	c3		 ret	 0
?RunOpenCandidate@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunOpenCandidate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunChangeCodePage@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunChangeCodePage@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunChangeCodePage, COMDAT
; _this$ = ecx

; 1343 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1344 : 	if (m_pActiveWindow)

  00003	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00006	85 c9		 test	 ecx, ecx
  00008	74 12		 je	 SHORT $LN4@RunChangeC

; 1345 : 		if (m_pActiveWindow->IsRendering())

  0000a	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0000f	84 c0		 test	 al, al
  00011	74 09		 je	 SHORT $LN4@RunChangeC

; 1346 : 		{
; 1347 : 			if (m_pActiveWindow->OnIMEChangeCodePage())

  00013	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00016	5e		 pop	 esi
  00017	8b 01		 mov	 eax, DWORD PTR [ecx]
  00019	ff 60 58	 jmp	 DWORD PTR [eax+88]
$LN4@RunChangeC:
  0001c	5e		 pop	 esi

; 1348 : 			{
; 1349 : 				return;
; 1350 : 			}
; 1351 : 		}
; 1352 : }

  0001d	c3		 ret	 0
?RunChangeCodePage@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunChangeCodePage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
_vkey$ = 8						; size = 4
?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z PROC		; UI::CWindowManager::RunIMEKeyDown, COMDAT
; _this$ = ecx

; 1325 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1326 : 	if (m_pLockWindow)

  00006	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 0a		 je	 SHORT $LN2@RunIMEKeyD

; 1327 : 	{
; 1328 : 		m_pLockWindow->OnKeyDown(vkey);

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000f	5e		 pop	 esi

; 1335 : 			{
; 1336 : 				return;
; 1337 : 			}
; 1338 : 		}
; 1339 : 
; 1340 : }

  00010	5d		 pop	 ebp

; 1327 : 	{
; 1328 : 		m_pLockWindow->OnKeyDown(vkey);

  00011	ff a0 90 00 00
	00		 jmp	 DWORD PTR [eax+144]
$LN2@RunIMEKeyD:

; 1329 : 		return;
; 1330 : 	}
; 1331 : 	if (m_pActiveWindow)

  00017	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0001a	85 c9		 test	 ecx, ecx
  0001c	74 13		 je	 SHORT $LN5@RunIMEKeyD

; 1332 : 		if (m_pActiveWindow->IsRendering())

  0001e	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  00023	84 c0		 test	 al, al
  00025	74 0a		 je	 SHORT $LN5@RunIMEKeyD

; 1333 : 		{
; 1334 : 			if (m_pActiveWindow->OnIMEKeyDownEvent(vkey))

  00027	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0002a	5e		 pop	 esi
  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1335 : 			{
; 1336 : 				return;
; 1337 : 			}
; 1338 : 		}
; 1339 : 
; 1340 : }

  0002d	5d		 pop	 ebp

; 1333 : 		{
; 1334 : 			if (m_pActiveWindow->OnIMEKeyDownEvent(vkey))

  0002e	ff 60 54	 jmp	 DWORD PTR [eax+84]
$LN5@RunIMEKeyD:
  00031	5e		 pop	 esi

; 1335 : 			{
; 1336 : 				return;
; 1337 : 			}
; 1338 : 		}
; 1339 : 
; 1340 : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?RunIMEKeyDown@CWindowManager@UI@@QAEXH@Z ENDP		; UI::CWindowManager::RunIMEKeyDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEUpdateSelectionEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunIMEUpdateSelectionEvent@CWindowManager@UI@@QAEXXZ PROC ; UI::CWindowManager::RunIMEUpdateSelectionEvent, COMDAT
; _this$ = ecx

; 1308 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1309 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunIMEUpda

; 1310 : 	{
; 1311 : 		m_pLockWindow->OnIMEUpdateSelectionEvent();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 50	 jmp	 DWORD PTR [eax+80]
$LN2@RunIMEUpda:

; 1312 : 		return;
; 1313 : 	}
; 1314 : 	if (m_pActiveWindow)

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN5@RunIMEUpda

; 1315 : 		if (m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN5@RunIMEUpda

; 1316 : 		{
; 1317 : 			if (m_pActiveWindow->OnIMEUpdateSelectionEvent())

  00020	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 50	 jmp	 DWORD PTR [eax+80]
$LN5@RunIMEUpda:
  00029	5e		 pop	 esi

; 1318 : 			{
; 1319 : 				return;
; 1320 : 			}
; 1321 : 		}
; 1322 : }

  0002a	c3		 ret	 0
?RunIMEUpdateSelectionEvent@CWindowManager@UI@@QAEXXZ ENDP ; UI::CWindowManager::RunIMEUpdateSelectionEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::RunIMEReturnEvent, COMDAT
; _this$ = ecx

; 1285 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1286 : 	if (m_iIgnoreIMEReturnEndTime && timeGetTime() < m_iIgnoreIMEReturnEndTime)

  00003	83 7e 3c 00	 cmp	 DWORD PTR [esi+60], 0
  00007	74 0b		 je	 SHORT $LN2@RunIMERetu
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  0000f	3b 46 3c	 cmp	 eax, DWORD PTR [esi+60]
  00012	72 35		 jb	 SHORT $LN1@RunIMERetu
$LN2@RunIMERetu:

; 1287 : 	{
; 1288 : 		return;
; 1289 : 	}
; 1290 : 	if (m_pLockWindow)

  00014	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $LN3@RunIMERetu

; 1291 : 	{
; 1292 : 		m_pLockWindow->OnIMEReturnEvent();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	5e		 pop	 esi
  0001e	ff 60 4c	 jmp	 DWORD PTR [eax+76]
$LN3@RunIMERetu:

; 1293 : 		return;
; 1294 : 	}
; 1295 : 	if (m_pActiveWindow)

  00021	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00024	85 c9		 test	 ecx, ecx
  00026	74 15		 je	 SHORT $LN6@RunIMERetu

; 1296 : 		if (m_pActiveWindow->IsRendering())

  00028	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0002d	84 c0		 test	 al, al
  0002f	74 0c		 je	 SHORT $LN6@RunIMERetu

; 1297 : 		{
; 1298 : 			if (m_pActiveWindow->OnIMEReturnEvent())

  00031	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00034	8b 01		 mov	 eax, DWORD PTR [ecx]
  00036	ff 50 4c	 call	 DWORD PTR [eax+76]
  00039	85 c0		 test	 eax, eax
  0003b	75 0c		 jne	 SHORT $LN1@RunIMERetu
$LN6@RunIMERetu:

; 1299 : 			{
; 1300 : 				return;
; 1301 : 			}
; 1302 : 		}
; 1303 : 
; 1304 : 	m_pRootWindow->RunIMEReturnEvent();

  0003d	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  00043	5e		 pop	 esi
  00044	e9 00 00 00 00	 jmp	 ?RunIMEReturnEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunIMEReturnEvent
$LN1@RunIMERetu:
  00049	5e		 pop	 esi

; 1305 : }

  0004a	c3		 ret	 0
?RunIMEReturnEvent@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::RunIMEReturnEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
_this$GSCopy$1$ = -48					; size = 4
_pCurrentWindow$1$ = -44				; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?RunIMETabEvent@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunIMETabEvent, COMDAT
; _this$ = ecx

; 1236 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 d0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 1237 : 	if (m_pLockWindow)

  00030	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00033	85 c9		 test	 ecx, ecx
  00035	74 0a		 je	 SHORT $LN5@RunIMETabE

; 1238 : 	{
; 1239 : 		m_pLockWindow->OnIMETabEvent();

  00037	8b 01		 mov	 eax, DWORD PTR [ecx]
  00039	ff 50 48	 call	 DWORD PTR [eax+72]

; 1240 : 		return;

  0003c	e9 ff 00 00 00	 jmp	 $LN3@RunIMETabE
$LN5@RunIMETabE:

; 1241 : 	}
; 1242 : 	if (m_pActiveWindow)

  00041	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00044	85 c9		 test	 ecx, ecx
  00046	74 19		 je	 SHORT $LN8@RunIMETabE

; 1243 : 		if (m_pActiveWindow->IsRendering())

  00048	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0004d	84 c0		 test	 al, al
  0004f	74 10		 je	 SHORT $LN8@RunIMETabE

; 1244 : 		{
; 1245 : 			if (m_pActiveWindow->OnIMETabEvent())

  00051	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00054	8b 01		 mov	 eax, DWORD PTR [ecx]
  00056	ff 50 48	 call	 DWORD PTR [eax+72]
  00059	85 c0		 test	 eax, eax
  0005b	0f 85 df 00 00
	00		 jne	 $LN3@RunIMETabE
$LN8@RunIMETabE:

; 1246 : 			{
; 1247 : 				return;
; 1248 : 			}
; 1249 : 		}
; 1250 : 
; 1251 : 	if (!m_pRootWindow->RunIMETabEvent())

  00061	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  00067	e8 00 00 00 00	 call	 ?RunIMETabEvent@CWindow@UI@@QAEHXZ ; UI::CWindow::RunIMETabEvent
  0006c	85 c0		 test	 eax, eax
  0006e	0f 85 cc 00 00
	00		 jne	 $LN3@RunIMETabE

; 1252 : 	{
; 1253 : 		if (!m_ActiveWindowList.empty())

  00074	39 46 60	 cmp	 DWORD PTR [esi+96], eax
  00077	0f 84 c3 00 00
	00		 je	 $LN3@RunIMETabE
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0007d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1256 : 			ActivateWindow(pWindow);

  00080	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00082	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1255 : 			CWindow * pWindow = *(m_ActiveWindowList.begin());

  00084	8b 78 08	 mov	 edi, DWORD PTR [eax+8]

; 1256 : 			ActivateWindow(pWindow);

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::ActivateWindow

; 1257 : 
; 1258 : 			/////////////////////////////////////////////
; 1259 : 
; 1260 : 			CWindow * pParentWindow = pWindow;
; 1261 : 			CWindow * pCurrentWindow = pWindow->GetParent();

  0008d	8b cf		 mov	 ecx, edi
  0008f	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00094	89 45 d4	 mov	 DWORD PTR _pCurrentWindow$1$[ebp], eax

; 1262 : 
; 1263 : 			DWORD dwMaxLoopCount = 20;
; 1264 : 			for (DWORD i = 0; i < dwMaxLoopCount; ++i)

  00097	33 db		 xor	 ebx, ebx
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@RunIMETabE:

; 1265 : 			{
; 1266 : 				if (!pParentWindow)

  000a0	85 ff		 test	 edi, edi
  000a2	0f 84 98 00 00
	00		 je	 $LN3@RunIMETabE

; 1271 : 				if (pParentWindow == m_LayerWindowMap["GAME"])

  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_04FOKBGDA@GAME@
  000ad	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  000b0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b5	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  000b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000bf	50		 push	 eax
  000c0	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  000c6	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000cb	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1271 : 				if (pParentWindow == m_LayerWindowMap["GAME"])

  000ce	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000d5	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000d7	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  000da	72 28		 jb	 SHORT $LN27@RunIMETabE
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000dc	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000df	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e0	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e8	72 10		 jb	 SHORT $LN37@RunIMETabE

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ea	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ed	83 c1 23	 add	 ecx, 35			; 00000023H
  000f0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000f5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f8	77 62		 ja	 SHORT $LN34@RunIMETabE
$LN37@RunIMETabE:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000fa	51		 push	 ecx
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00101	83 c4 08	 add	 esp, 8
$LN27@RunIMETabE:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00104	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0010b	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00112	c6 45 d8 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1271 : 				if (pParentWindow == m_LayerWindowMap["GAME"])

  00116	3b fe		 cmp	 edi, esi
  00118	74 1a		 je	 SHORT $LN59@RunIMETabE

; 1274 : 					break;
; 1275 : 				}
; 1276 : 
; 1277 : 				pCurrentWindow = pParentWindow;
; 1278 : 				pParentWindow = pCurrentWindow->GetParent();

  0011a	8b cf		 mov	 ecx, edi
  0011c	89 7d d4	 mov	 DWORD PTR _pCurrentWindow$1$[ebp], edi
  0011f	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00124	43		 inc	 ebx
  00125	8b f8		 mov	 edi, eax
  00127	83 fb 14	 cmp	 ebx, 20			; 00000014H
  0012a	73 14		 jae	 SHORT $LN3@RunIMETabE

; 1262 : 
; 1263 : 			DWORD dwMaxLoopCount = 20;
; 1264 : 			for (DWORD i = 0; i < dwMaxLoopCount; ++i)

  0012c	8b 75 d0	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0012f	e9 6c ff ff ff	 jmp	 $LL4@RunIMETabE
$LN59@RunIMETabE:

; 1272 : 				{
; 1273 : 					SetTop(pCurrentWindow);

  00134	8b 45 d4	 mov	 eax, DWORD PTR _pCurrentWindow$1$[ebp]
  00137	8b 4d d0	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0013a	50		 push	 eax
  0013b	e8 00 00 00 00	 call	 ?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::SetTop
$LN3@RunIMETabE:

; 1282 : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00151	33 cd		 xor	 ecx, ebp
  00153	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00158	8b e5		 mov	 esp, ebp
  0015a	5d		 pop	 ebp
  0015b	c3		 ret	 0
$LN34@RunIMETabE:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN65@RunIMETabE:
  00161	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunIMETabEvent@CWindowManager@UI@@QAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunIMETabEvent@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunIMETabEvent
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunIMEUpdate@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?RunIMEUpdate@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::RunIMEUpdate, COMDAT
; _this$ = ecx

; 1216 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1217 : 	if (m_pLockWindow)

  00003	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN2@RunIMEUpda

; 1218 : 	{
; 1219 : 		m_pLockWindow->OnIMEUpdate();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	5e		 pop	 esi
  0000d	ff 60 40	 jmp	 DWORD PTR [eax+64]
$LN2@RunIMEUpda:

; 1220 : 		return;
; 1221 : 	}
; 1222 : 
; 1223 : 	if (!m_pActiveWindow)

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	85 c9		 test	 ecx, ecx
  00015	74 12		 je	 SHORT $LN1@RunIMEUpda

; 1224 : 	{
; 1225 : 		return;
; 1226 : 	}
; 1227 : 	if (!m_pActiveWindow->IsRendering())

  00017	e8 00 00 00 00	 call	 ?IsRendering@CWindow@UI@@QAE_NXZ ; UI::CWindow::IsRendering
  0001c	84 c0		 test	 al, al
  0001e	74 09		 je	 SHORT $LN1@RunIMEUpda

; 1228 : 	{
; 1229 : 		return;
; 1230 : 	}
; 1231 : 
; 1232 : 	m_pActiveWindow->OnIMEUpdate();

  00020	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00023	5e		 pop	 esi
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	ff 60 40	 jmp	 DWORD PTR [eax+64]
$LN1@RunIMEUpda:
  00029	5e		 pop	 esi

; 1233 : }

  0002a	c3		 ret	 0
?RunIMEUpdate@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::RunIMEUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseWheel@CWindowManager@UI@@QAE_NABH@Z
_TEXT	SEGMENT
_nLen$ = 8						; size = 4
?RunMouseWheel@CWindowManager@UI@@QAE_NABH@Z PROC	; UI::CWindowManager::RunMouseWheel, COMDAT
; _this$ = ecx

; 1183 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1184 : 	CWindow* pWin = GetPointWindow();

  00004	8b 71 70	 mov	 esi, DWORD PTR [ecx+112]
  00007	57		 push	 edi

; 1185 : 	while (pWin)

  00008	85 f6		 test	 esi, esi
  0000a	74 20		 je	 SHORT $LN3@RunMouseWh
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _nLen$[ebp]
  0000f	90		 npad	 1
$LL2@RunMouseWh:

; 1186 : 	{
; 1187 : 		if (pWin->OnScrollEvent(nLen))

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	57		 push	 edi
  00015	ff 90 8c 00 00
	00		 call	 DWORD PTR [eax+140]
  0001b	85 c0		 test	 eax, eax
  0001d	75 15		 jne	 SHORT $LN7@RunMouseWh

; 1190 : 		}
; 1191 : 
; 1192 : 		pWin = pWin->GetParent();

  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00026	8b f0		 mov	 esi, eax
  00028	85 f6		 test	 esi, esi
  0002a	75 e4		 jne	 SHORT $LL2@RunMouseWh
$LN3@RunMouseWh:
  0002c	5f		 pop	 edi

; 1193 : 	}
; 1194 : 
; 1195 : 	return FALSE;

  0002d	32 c0		 xor	 al, al

; 1196 : }

  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN7@RunMouseWh:
  00034	5f		 pop	 edi

; 1188 : 		{
; 1189 : 			return TRUE;

  00035	b0 01		 mov	 al, 1

; 1196 : }

  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 04 00	 ret	 4
?RunMouseWheel@CWindowManager@UI@@QAE_NABH@Z ENDP	; UI::CWindowManager::RunMouseWheel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseMiddleButtonUp, COMDAT
; _this$ = ecx

; 1159 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1160 : 	SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1161 : 
; 1162 : 	if (m_pMiddleCaptureWindow)

  00011	8b 4e 7c	 mov	 ecx, DWORD PTR [esi+124]
  00014	85 c9		 test	 ecx, ecx
  00016	74 0c		 je	 SHORT $LN3@RunMouseMi

; 1163 : 	{
; 1164 : 		if (m_pMiddleCaptureWindow->OnMouseMiddleButtonUp())

  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
  00020	85 c0		 test	 eax, eax
  00022	75 0f		 jne	 SHORT $LN6@RunMouseMi
$LN3@RunMouseMi:

; 1165 : 		{
; 1166 : 			m_pMiddleCaptureWindow = NULL;
; 1167 : 			return;
; 1168 : 		}
; 1169 : 	}
; 1170 : 
; 1171 : 	CWindow * pWin = GetPointWindow();

  00024	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]

; 1172 : 	if (!pWin)

  00027	85 c9		 test	 ecx, ecx
  00029	74 0f		 je	 SHORT $LN1@RunMouseMi

; 1173 : 	{
; 1174 : 		return;
; 1175 : 	}
; 1176 : 
; 1177 : 	pWin->OnMouseMiddleButtonUp();

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	ff 90 88 00 00
	00		 call	 DWORD PTR [eax+136]
$LN6@RunMouseMi:

; 1178 : 	m_pMiddleCaptureWindow = NULL;
; 1179 : }

  00033	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
$LN1@RunMouseMi:
  0003a	5e		 pop	 esi
  0003b	5d		 pop	 ebp
  0003c	c2 08 00	 ret	 8
?RunMouseMiddleButtonUp@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseMiddleButtonUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseMiddleButtonDown, COMDAT
; _this$ = ecx

; 1144 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1145 : 	SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1146 : 
; 1147 : 	CWindow * pWin = GetPointWindow();

  00011	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]

; 1148 : 	if (!pWin)

  00014	85 c9		 test	 ecx, ecx
  00016	74 0b		 je	 SHORT $LN1@RunMouseMi

; 1149 : 	{
; 1150 : 		return;
; 1151 : 	}
; 1152 : 
; 1153 : 	m_pMiddleCaptureWindow = pWin;

  00018	89 4e 7c	 mov	 DWORD PTR [esi+124], ecx

; 1154 : 
; 1155 : 	pWin->OnMouseMiddleButtonDown();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	ff 90 84 00 00
	00		 call	 DWORD PTR [eax+132]
$LN1@RunMouseMi:
  00023	5e		 pop	 esi

; 1156 : }

  00024	5d		 pop	 ebp
  00025	c2 08 00	 ret	 8
?RunMouseMiddleButtonDown@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseMiddleButtonDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseRightButtonDoubleClick, COMDAT
; _this$ = ecx

; 1133 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1134 : 	SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1135 : 
; 1136 : 	CWindow * pWin = GetPointWindow();

  00011	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00014	5e		 pop	 esi

; 1137 : 	if (pWin)

  00015	85 c9		 test	 ecx, ecx
  00017	74 08		 je	 SHORT $LN2@RunMouseRi

; 1138 : 	{
; 1139 : 		pWin->OnMouseRightButtonDoubleClick();

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	ff 90 80 00 00
	00		 call	 DWORD PTR [eax+128]
$LN2@RunMouseRi:

; 1140 : 	}
; 1141 : }

  00021	5d		 pop	 ebp
  00022	c2 08 00	 ret	 8
?RunMouseRightButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseRightButtonDoubleClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z PROC	; UI::CWindowManager::RunMouseRightButtonUp, COMDAT
; _this$ = ecx

; 1112 : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1113 : 	if (m_pRightCaptureWindow)

  00003	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00006	85 c9		 test	 ecx, ecx
  00008	74 14		 je	 SHORT $LN3@RunMouseRi

; 1114 : 	{
; 1115 : 		if (m_pRightCaptureWindow->OnMouseRightButtonUp())

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	ff 50 7c	 call	 DWORD PTR [eax+124]
  0000f	85 c0		 test	 eax, eax
  00011	74 0b		 je	 SHORT $LN3@RunMouseRi

; 1116 : 		{
; 1117 : 			m_pRightCaptureWindow = NULL;

  00013	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  0001a	5e		 pop	 esi

; 1130 : }

  0001b	c2 08 00	 ret	 8
$LN3@RunMouseRi:

; 1118 : 			return;
; 1119 : 		}
; 1120 : 	}
; 1121 : 
; 1122 : 	CWindow * pWin = GetPointWindow();

  0001e	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]

; 1123 : 	if (pWin)

  00021	85 c9		 test	 ecx, ecx
  00023	74 05		 je	 SHORT $LN4@RunMouseRi

; 1124 : 	{
; 1125 : 		pWin->OnMouseRightButtonUp();

  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	ff 50 7c	 call	 DWORD PTR [eax+124]
$LN4@RunMouseRi:

; 1126 : 	}
; 1127 : 
; 1128 : 	m_pRightCaptureWindow = NULL;
; 1129 : 	DeattachIcon();

  0002a	8b ce		 mov	 ecx, esi
  0002c	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
  00033	e8 00 00 00 00	 call	 ?DeattachIcon@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::DeattachIcon
  00038	5e		 pop	 esi

; 1130 : }

  00039	c2 08 00	 ret	 8
?RunMouseRightButtonUp@CWindowManager@UI@@QAEXJJ@Z ENDP	; UI::CWindowManager::RunMouseRightButtonUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseRightButtonDown, COMDAT
; _this$ = ecx

; 1084 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1085 : 	SetTopUIWindow();

  00006	e8 00 00 00 00	 call	 ?SetTopUIWindow@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::SetTopUIWindow

; 1086 : 
; 1087 : 	///////////////////////////////////////////////////////////////////////////////////////////
; 1088 : 
; 1089 : 	SetMousePosition(x, y);

  0000b	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0000e	8b ce		 mov	 ecx, esi
  00010	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00013	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1090 : 	CWindow * pWin = GetPointWindow();

  00018	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]

; 1091 : 	if (!pWin)

  0001b	85 c9		 test	 ecx, ecx
  0001d	74 23		 je	 SHORT $LN1@RunMouseRi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  0001f	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00022	c1 e8 04	 shr	 eax, 4
  00025	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1097 : 	if (pWin->IsFlag(CWindow::FLAG_ATTACH))

  00027	74 07		 je	 SHORT $LN3@RunMouseRi

; 1098 : 	{
; 1099 : 		pWin = pWin->GetRoot();

  00029	e8 00 00 00 00	 call	 ?GetRoot@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetRoot
  0002e	8b c8		 mov	 ecx, eax
$LN3@RunMouseRi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00030	8b 41 78	 mov	 eax, DWORD PTR [ecx+120]
  00033	c1 e8 07	 shr	 eax, 7
  00036	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1103 : 	if (!pWin->IsFlag(CWindow::FLAG_NOT_CAPTURE))

  00038	75 03		 jne	 SHORT $LN4@RunMouseRi

; 1104 : 	{
; 1105 : 		m_pRightCaptureWindow = pWin;

  0003a	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
$LN4@RunMouseRi:

; 1106 : 	}
; 1107 : 
; 1108 : 	pWin->OnMouseRightButtonDown();

  0003d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003f	ff 50 78	 call	 DWORD PTR [eax+120]
$LN1@RunMouseRi:
  00042	5e		 pop	 esi

; 1109 : }

  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
?RunMouseRightButtonDown@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseRightButtonDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseLeftButtonDoubleClick, COMDAT
; _this$ = ecx

; 1071 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1072 : 	SetMousePosition(x, y);

  00004	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _x$[ebp]
  0000c	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1073 : 
; 1074 : 	CWindow * pWin = GetPointWindow();

  00011	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00014	5e		 pop	 esi

; 1075 : 	if (!pWin)

  00015	85 c9		 test	 ecx, ecx
  00017	74 05		 je	 SHORT $LN1@RunMouseLe

; 1076 : 	{
; 1077 : 		return;
; 1078 : 	}
; 1079 : 
; 1080 : 	pWin->OnMouseLeftButtonDoubleClick();

  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	ff 50 74	 call	 DWORD PTR [eax+116]
$LN1@RunMouseLe:

; 1081 : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RunMouseLeftButtonDoubleClick@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseLeftButtonDoubleClick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z PROC	; UI::CWindowManager::RunMouseLeftButtonUp, COMDAT
; _this$ = ecx

; 1039 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1040 : 	if (m_bOnceIgnoreMouseLeftButtonUpEventFlag)

  00006	83 7e 34 00	 cmp	 DWORD PTR [esi+52], 0
  0000a	74 12		 je	 SHORT $LN3@RunMouseLe

; 1041 : 	{
; 1042 : 		m_bOnceIgnoreMouseLeftButtonUpEventFlag = FALSE;

  0000c	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0

; 1043 : 
; 1044 : 		if (timeGetTime() < m_iIgnoreEndTime)

  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00019	3b 46 38	 cmp	 eax, DWORD PTR [esi+56]
  0001c	72 30		 jb	 SHORT $LN1@RunMouseLe
$LN3@RunMouseLe:

; 1045 : 		{
; 1046 : 			return;
; 1047 : 		}
; 1048 : 	}
; 1049 : 
; 1050 : 	SetMousePosition(x, y);

  0001e	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  00021	8b ce		 mov	 ecx, esi
  00023	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00026	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1051 : 
; 1052 : 	if (m_pLeftCaptureWindow)

  0002b	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 09		 je	 SHORT $LN5@RunMouseLe

; 1053 : 	{
; 1054 : 		if (m_pLeftCaptureWindow->OnMouseLeftButtonUp())

  00032	8b 01		 mov	 eax, DWORD PTR [ecx]
  00034	ff 50 70	 call	 DWORD PTR [eax+112]
  00037	85 c0		 test	 eax, eax
  00039	75 0c		 jne	 SHORT $LN6@RunMouseLe
$LN5@RunMouseLe:

; 1055 : 		{
; 1056 : 			m_pLeftCaptureWindow = NULL;
; 1057 : 			return;
; 1058 : 		}
; 1059 : 	}
; 1060 : 
; 1061 : 	CWindow * pWin = GetPointWindow();

  0003b	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]

; 1062 : 	if (pWin)

  0003e	85 c9		 test	 ecx, ecx
  00040	74 05		 je	 SHORT $LN6@RunMouseLe

; 1063 : 	{
; 1064 : 		pWin->OnMouseLeftButtonUp();

  00042	8b 01		 mov	 eax, DWORD PTR [ecx]
  00044	ff 50 70	 call	 DWORD PTR [eax+112]
$LN6@RunMouseLe:

; 1065 : 	}
; 1066 : 
; 1067 : 	m_pLeftCaptureWindow = NULL;
; 1068 : }

  00047	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN1@RunMouseLe:
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 08 00	 ret	 8
?RunMouseLeftButtonUp@CWindowManager@UI@@QAEXJJ@Z ENDP	; UI::CWindowManager::RunMouseLeftButtonUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z PROC ; UI::CWindowManager::RunMouseLeftButtonDown, COMDAT
; _this$ = ecx

; 1004 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 1005 : 	SetTopUIWindow();

  00007	e8 00 00 00 00	 call	 ?SetTopUIWindow@CWindowManager@UI@@QAEXXZ ; UI::CWindowManager::SetTopUIWindow

; 1006 : 
; 1007 : 	/////
; 1008 : 
; 1009 : 	SetMousePosition(x, y);

  0000c	ff 75 0c	 push	 DWORD PTR _y$[ebp]
  0000f	8b cf		 mov	 ecx, edi
  00011	ff 75 08	 push	 DWORD PTR _x$[ebp]
  00014	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 1010 : 	CWindow * pWin = GetPointWindow();

  00019	8b 77 70	 mov	 esi, DWORD PTR [edi+112]

; 1011 : 
; 1012 : 	if (!pWin)

  0001c	85 f6		 test	 esi, esi
  0001e	74 43		 je	 SHORT $LN1@RunMouseLe
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00020	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00023	c1 e8 04	 shr	 eax, 4
  00026	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1018 : 	if (pWin->IsFlag(CWindow::FLAG_ATTACH))

  00028	74 09		 je	 SHORT $LN3@RunMouseLe

; 1019 : 	{
; 1020 : 		pWin = pWin->GetRoot();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?GetRoot@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetRoot
  00031	8b f0		 mov	 esi, eax
$LN3@RunMouseLe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00033	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00036	c1 e8 07	 shr	 eax, 7
  00039	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 1024 : 	if (!pWin->IsFlag(CWindow::FLAG_NOT_CAPTURE))

  0003b	75 03		 jne	 SHORT $LN4@RunMouseLe

; 1025 : 	{
; 1026 : 		m_pLeftCaptureWindow = pWin;

  0003d	89 77 74	 mov	 DWORD PTR [edi+116], esi
$LN4@RunMouseLe:

; 1027 : 	}
; 1028 : 
; 1029 : 	m_lDragX = m_lMouseX - pWin->GetRect().left;

  00040	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00043	8b c2		 mov	 eax, edx
  00045	2b 46 34	 sub	 eax, DWORD PTR [esi+52]

; 1030 : 	m_lDragY = m_lMouseY - pWin->GetRect().top;

  00048	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  0004b	89 47 24	 mov	 DWORD PTR [edi+36], eax
  0004e	8b c1		 mov	 eax, ecx
  00050	2b 46 38	 sub	 eax, DWORD PTR [esi+56]

; 1031 : 	m_lPickedX = m_lMouseX;
; 1032 : 	m_lPickedY = m_lMouseY;

  00053	89 4f 30	 mov	 DWORD PTR [edi+48], ecx

; 1033 : 
; 1034 : 	// Event
; 1035 : 	pWin->OnMouseLeftButtonDown();

  00056	8b ce		 mov	 ecx, esi
  00058	89 47 28	 mov	 DWORD PTR [edi+40], eax
  0005b	89 57 2c	 mov	 DWORD PTR [edi+44], edx
  0005e	8b 06		 mov	 eax, DWORD PTR [esi]
  00060	ff 50 6c	 call	 DWORD PTR [eax+108]
$LN1@RunMouseLe:

; 1036 : }

  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5d		 pop	 ebp
  00066	c2 08 00	 ret	 8
?RunMouseLeftButtonDown@CWindowManager@UI@@QAEXJJ@Z ENDP ; UI::CWindowManager::RunMouseLeftButtonDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_limitRect$2 = -48					; size = 16
_pPointWindow$1$ = -32					; size = 4
tv946 = -28						; size = 4
__Old_capacity$1$ = -24					; size = 4
_lx$3 = -24						; size = 4
_this$1$ = -20						; size = 4
_ly$4 = -20						; size = 4
__Result$1$ = -16					; size = 4
tv945 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T5 = 8							; size = 4
_y$2$ = 8						; size = 4
_x$ = 8							; size = 4
$T6 = 12						; size = 4
tv959 = 12						; size = 4
tv934 = 12						; size = 4
_x$2$ = 12						; size = 4
_y$ = 12						; size = 4
?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z PROC		; UI::CWindowManager::RunMouseMove, COMDAT
; _this$ = ecx

; 885  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 ec	 mov	 DWORD PTR _this$1$[ebp], esi

; 886  : 	if (IsAttaching())

  0002c	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00031	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00034	8b 55 0c	 mov	 edx, DWORD PTR _y$[ebp]
  00037	85 c0		 test	 eax, eax
  00039	74 0e		 je	 SHORT $LN5@RunMouseMo

; 887  : 	{
; 888  : 		if (x > m_lWidth)

  0003b	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  0003e	0f 4f 4e 04	 cmovg	 ecx, DWORD PTR [esi+4]

; 889  : 		{
; 890  : 			x = m_lWidth;
; 891  : 		}
; 892  : 		if (y > m_lHeight)

  00042	3b 56 08	 cmp	 edx, DWORD PTR [esi+8]
  00045	0f 4f 56 08	 cmovg	 edx, DWORD PTR [esi+8]
$LN5@RunMouseMo:

; 893  : 		{
; 894  : 			y = m_lHeight;
; 895  : 		}
; 896  : 	}
; 897  : 
; 898  : 	SetMousePosition(x, y);

  00049	52		 push	 edx
  0004a	51		 push	 ecx
  0004b	8b ce		 mov	 ecx, esi
  0004d	e8 00 00 00 00	 call	 ?SetMousePosition@CWindowManager@UI@@AAEXJJ@Z ; UI::CWindowManager::SetMousePosition

; 899  : 	CWindow * pPointWindow = __PickWindow(m_lMouseX, m_lMouseY);

  00052	ff 76 18	 push	 DWORD PTR [esi+24]
  00055	8b ce		 mov	 ecx, esi
  00057	ff 76 14	 push	 DWORD PTR [esi+20]
  0005a	e8 00 00 00 00	 call	 ?__PickWindow@CWindowManager@UI@@AAEPAVCWindow@2@JJ@Z ; UI::CWindowManager::__PickWindow

; 900  : 
; 901  : 	if (g_bShowOverInWindowName)

  0005f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?g_bShowOverInWindowName@@3HA, 0 ; g_bShowOverInWindowName
  00066	8b f8		 mov	 edi, eax
  00068	89 7d e0	 mov	 DWORD PTR _pPointWindow$1$[ebp], edi
  0006b	0f 84 e0 01 00
	00		 je	 $LN96@RunMouseMo

; 902  : 	{
; 903  : 		if (pPointWindow)

  00071	85 ff		 test	 edi, edi
  00073	0f 84 d8 01 00
	00		 je	 $LN96@RunMouseMo

; 904  : 		{
; 905  : 			static std::string strPickWindowName = "";

  00079	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  0007f	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00086	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  0008b	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  0008e	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  00094	0f 8f 2c 03 00
	00		 jg	 $LN153@RunMouseMo
$LN2@RunMouseMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4259 :         return _Mypair._Myval2._Myptr();

  0009a	83 c7 04	 add	 edi, 4
  0009d	89 7d f0	 mov	 DWORD PTR __Result$1$[ebp], edi

; 2292 :         const value_type* _Result = _Bx._Buf;

  000a0	8b d7		 mov	 edx, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  000a2	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  000a6	72 02		 jb	 SHORT $LN142@RunMouseMo

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000a8	8b 17		 mov	 edx, DWORD PTR [edi]
$LN142@RunMouseMo:

; 415  :             return __builtin_strlen(_First);

  000aa	8b ca		 mov	 ecx, edx
  000ac	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000af	89 45 0c	 mov	 DWORD PTR tv934[ebp], eax
$LL145@RunMouseMo:
  000b2	8a 01		 mov	 al, BYTE PTR [ecx]
  000b4	41		 inc	 ecx
  000b5	84 c0		 test	 al, al
  000b7	75 f9		 jne	 SHORT $LL145@RunMouseMo
  000b9	2b 4d 0c	 sub	 ecx, DWORD PTR tv934[ebp]

; 2292 :         const value_type* _Result = _Bx._Buf;

  000bc	b8 00 00 00 00	 mov	 eax, OFFSET ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2301 :         return _BUF_SIZE <= _Myres;

  000c1	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 4817 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  000c8	51		 push	 ecx

; 2293 :         if (_Large_string_engaged()) {

  000c9	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 4817 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  000d0	52		 push	 edx
  000d1	ff 35 10 00 00
	00		 push	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16
  000d7	50		 push	 eax
  000d8	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  000dd	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 906  : 			if (0 != strPickWindowName.compare(pPointWindow->GetName()))

  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 69 01 00
	00		 je	 $LN96@RunMouseMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000e8	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  000ec	8b c7		 mov	 eax, edi

; 2293 :         if (_Large_string_engaged()) {

  000ee	72 02		 jb	 SHORT $LN143@RunMouseMo

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000f0	8b 07		 mov	 eax, DWORD PTR [edi]
$LN143@RunMouseMo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 908  : 				Tracef(" OverInWindowName [%s]\n", pPointWindow->GetName());

  000f2	50		 push	 eax
  000f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MLGEFGCP@?5OverInWindowName?5?$FL?$CFs?$FN?6@
  000f8	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  000fd	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00100	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00104	72 05		 jb	 SHORT $LN73@RunMouseMo

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00106	8b 3f		 mov	 edi, DWORD PTR [edi]
  00108	89 7d f0	 mov	 DWORD PTR __Result$1$[ebp], edi
$LN73@RunMouseMo:

; 415  :             return __builtin_strlen(_First);

  0010b	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0010e	66 90		 npad	 2
$LL146@RunMouseMo:
  00110	8a 07		 mov	 al, BYTE PTR [edi]
  00112	47		 inc	 edi
  00113	84 c0		 test	 al, al
  00115	75 f9		 jne	 SHORT $LL146@RunMouseMo

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00117	8b 15 14 00 00
	00		 mov	 edx, DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20

; 415  :             return __builtin_strlen(_First);

  0011d	2b f9		 sub	 edi, ecx

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0011f	89 55 e8	 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  00122	3b fa		 cmp	 edi, edx
  00124	77 2e		 ja	 SHORT $LN84@RunMouseMo

; 2301 :         return _BUF_SIZE <= _Myres;

  00126	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00129	89 3d 10 00 00
	00		 mov	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0012f	57		 push	 edi
  00130	ff 75 f0	 push	 DWORD PTR __Result$1$[ebp]

; 2283 :         value_type* _Result = _Bx._Buf;

  00133	be 00 00 00 00	 mov	 esi, OFFSET ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 2284 :         if (_Large_string_engaged()) {

  00138	0f 43 35 00 00
	00 00		 cmovae	 esi, DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0013f	56		 push	 esi
  00140	e8 00 00 00 00	 call	 _memmove

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00145	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00149	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3536 :             return *this;

  0014c	8b 75 ec	 mov	 esi, DWORD PTR _this$1$[ebp]
  0014f	e9 fd 00 00 00	 jmp	 $LN96@RunMouseMo
$LN84@RunMouseMo:

; 4903 :         if (_New_size > max_size()) {

  00154	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0015a	0f 87 b9 02 00
	00		 ja	 $LN154@RunMouseMo

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00160	8b cf		 mov	 ecx, edi
  00162	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00165	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0016b	76 1b		 jbe	 SHORT $LN101@RunMouseMo

; 4885 :             return _Max;

  0016d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00172	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  00175	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0017a	50		 push	 eax
  0017b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00180	8b 4d 0c	 mov	 ecx, DWORD PTR $T6[ebp]
  00183	83 c4 04	 add	 esp, 4
  00186	eb 67		 jmp	 SHORT $LN150@RunMouseMo
$LN101@RunMouseMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00188	8b c2		 mov	 eax, edx
  0018a	d1 e8		 shr	 eax, 1
  0018c	89 45 0c	 mov	 DWORD PTR tv959[ebp], eax
  0018f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00194	2b 45 0c	 sub	 eax, DWORD PTR tv959[ebp]
  00197	3b d0		 cmp	 edx, eax
  00199	76 1b		 jbe	 SHORT $LN102@RunMouseMo

; 4889 :             return _Max;

  0019b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  001a0	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  001a3	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001ae	8b 4d 0c	 mov	 ecx, DWORD PTR $T6[ebp]
  001b1	83 c4 04	 add	 esp, 4
  001b4	eb 39		 jmp	 SHORT $LN150@RunMouseMo
$LN102@RunMouseMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001b6	8b 45 0c	 mov	 eax, DWORD PTR tv959[ebp]
  001b9	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  001bb	3b c8		 cmp	 ecx, eax
  001bd	0f 42 c8	 cmovb	 ecx, eax
  001c0	89 4d 0c	 mov	 DWORD PTR $T6[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001c3	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001c6	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001cb	72 0e		 jb	 SHORT $LN109@RunMouseMo

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001cd	50		 push	 eax
  001ce	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001d3	8b 4d 0c	 mov	 ecx, DWORD PTR $T6[ebp]
  001d6	83 c4 04	 add	 esp, 4
  001d9	eb 14		 jmp	 SHORT $LN150@RunMouseMo
$LN109@RunMouseMo:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  001db	85 c0		 test	 eax, eax
  001dd	74 0e		 je	 SHORT $LN110@RunMouseMo

; 77   :         return ::operator new(_Bytes);

  001df	50		 push	 eax
  001e0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  001e5	8b 4d 0c	 mov	 ecx, DWORD PTR $T6[ebp]

; 77   :         return ::operator new(_Bytes);

  001e8	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  001eb	eb 02		 jmp	 SHORT $LN150@RunMouseMo
$LN110@RunMouseMo:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  001ed	33 c0		 xor	 eax, eax
$LN150@RunMouseMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001ef	57		 push	 edi
  001f0	ff 75 f0	 push	 DWORD PTR __Result$1$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  001f3	89 45 08	 mov	 DWORD PTR $T5[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001f6	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  001f7	89 3d 10 00 00
	00		 mov	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, edi

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  001fd	89 0d 14 00 00
	00		 mov	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00203	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00208	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0020b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  0020e	8b 4d e8	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00211	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00215	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00218	72 32		 jb	 SHORT $LN95@RunMouseMo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0021a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00220	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00221	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00223	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00229	72 14		 jb	 SHORT $LN132@RunMouseMo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0022b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0022e	83 c1 23	 add	 ecx, 35			; 00000023H
  00231	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00233	83 c0 fc	 add	 eax, -4			; fffffffcH
  00236	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00239	0f 87 df 01 00
	00		 ja	 $LN155@RunMouseMo
$LN132@RunMouseMo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0023f	51		 push	 ecx
  00240	52		 push	 edx
  00241	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4924 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00246	8b 45 08	 mov	 eax, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00249	83 c4 08	 add	 esp, 8
$LN95@RunMouseMo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 914  : 	if (m_pLeftCaptureWindow)

  0024c	a3 00 00 00 00	 mov	 DWORD PTR ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, eax
$LN96@RunMouseMo:
  00251	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00254	85 ff		 test	 edi, edi
  00256	0f 84 2a 01 00
	00		 je	 $LN22@RunMouseMo
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  0025c	f6 47 78 01	 test	 BYTE PTR [edi+120], 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 918  : 		if (pWin->IsFlag(CWindow::FLAG_MOVABLE))

  00260	0f 84 01 01 00
	00		 je	 $LN10@RunMouseMo

; 919  : 		{
; 920  : 			long x = m_lMouseX - m_lDragX;

  00266	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00269	2b 46 24	 sub	 eax, DWORD PTR [esi+36]
  0026c	89 45 0c	 mov	 DWORD PTR _x$2$[ebp], eax

; 921  : 			long y = m_lMouseY - m_lDragY;

  0026f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00272	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 115  : 	bool			HasParent()		{ return m_pParent ? true : false; }

  00275	83 bf 80 00 00
	00 00		 cmp	 DWORD PTR [edi+128], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 921  : 			long y = m_lMouseY - m_lDragY;

  0027c	89 45 08	 mov	 DWORD PTR _y$2$[ebp], eax

; 922  : 			if (pWin->HasParent())

  0027f	74 20		 je	 SHORT $LN12@RunMouseMo

; 923  : 			{
; 924  : 				x -= pWin->GetParent()->GetRect().left;

  00281	8b cf		 mov	 ecx, edi
  00283	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00288	8b 4d 0c	 mov	 ecx, DWORD PTR _x$2$[ebp]
  0028b	2b 48 34	 sub	 ecx, DWORD PTR [eax+52]
  0028e	89 4d 0c	 mov	 DWORD PTR _x$2$[ebp], ecx

; 925  : 				y -= pWin->GetParent()->GetRect().top;

  00291	8b cf		 mov	 ecx, edi
  00293	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent
  00298	8b 4d 08	 mov	 ecx, DWORD PTR _y$2$[ebp]
  0029b	2b 48 38	 sub	 ecx, DWORD PTR [eax+56]
  0029e	89 4d 08	 mov	 DWORD PTR _y$2$[ebp], ecx
$LN12@RunMouseMo:

; 926  : 			}
; 927  : 
; 928  : 			long lx, ly;
; 929  : 			pWin->GetPosition(&lx, &ly);

  002a1	8d 45 ec	 lea	 eax, DWORD PTR _ly$4[ebp]
  002a4	8b cf		 mov	 ecx, edi
  002a6	50		 push	 eax
  002a7	8d 45 e8	 lea	 eax, DWORD PTR _lx$3[ebp]
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ?GetPosition@CWindow@UI@@QAEXPAJ0@Z ; UI::CWindow::GetPosition
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  002b0	8b 4f 78	 mov	 ecx, DWORD PTR [edi+120]
  002b3	8b c1		 mov	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 934  : 			if (pWin->IsFlag(CWindow::FLAG_RESTRICT_Y))

  002b5	8b 55 08	 mov	 edx, DWORD PTR _y$2$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  002b8	c1 e8 05	 shr	 eax, 5
  002bb	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 930  : 			if (pWin->IsFlag(CWindow::FLAG_RESTRICT_X))

  002bd	8b 45 0c	 mov	 eax, DWORD PTR _x$2$[ebp]
  002c0	0f 45 45 e8	 cmovne	 eax, DWORD PTR _lx$3[ebp]
  002c4	89 45 0c	 mov	 DWORD PTR _x$2$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  002c7	8b c1		 mov	 eax, ecx
  002c9	c1 e8 06	 shr	 eax, 6
  002cc	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 934  : 			if (pWin->IsFlag(CWindow::FLAG_RESTRICT_Y))

  002ce	0f 45 55 ec	 cmovne	 edx, DWORD PTR _ly$4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  002d2	d1 e9		 shr	 ecx, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 934  : 			if (pWin->IsFlag(CWindow::FLAG_RESTRICT_Y))

  002d4	89 55 08	 mov	 DWORD PTR _y$2$[ebp], edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  002d7	f6 c1 01	 test	 cl, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 939  : 			if (pWin->IsFlag(CWindow::FLAG_LIMIT))

  002da	74 70		 je	 SHORT $LN21@RunMouseMo

; 940  : 			{
; 941  : 				RECT limitRect = pWin->GetLimitBias();

  002dc	0f 10 4f 54	 movups	 xmm1, XMMWORD PTR [edi+84]

; 942  : 
; 943  : 				limitRect.right = m_lWidth - limitRect.right;

  002e0	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  002e3	0f 28 c1	 movaps	 xmm0, xmm1
  002e6	66 0f 73 d8 08	 psrldq	 xmm0, 8
  002eb	66 0f 7e c0	 movd	 eax, xmm0

; 944  : 				limitRect.bottom = m_lHeight - limitRect.bottom;

  002ef	0f 28 c1	 movaps	 xmm0, xmm1
  002f2	66 0f 73 d8 0c	 psrldq	 xmm0, 12		; 0000000cH
  002f7	0f 11 4d d0	 movups	 XMMWORD PTR _limitRect$2[ebp], xmm1
  002fb	2b c8		 sub	 ecx, eax
  002fd	89 4d e4	 mov	 DWORD PTR tv946[ebp], ecx
  00300	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00303	66 0f 7e c0	 movd	 eax, xmm0
  00307	2b c8		 sub	 ecx, eax

; 945  : 
; 946  : 				if (x < limitRect.left)

  00309	66 0f 7e c8	 movd	 eax, xmm1
  0030d	89 4d f0	 mov	 DWORD PTR tv945[ebp], ecx
  00310	8b 4d 0c	 mov	 ecx, DWORD PTR _x$2$[ebp]
  00313	3b c8		 cmp	 ecx, eax
  00315	7d 05		 jge	 SHORT $LN16@RunMouseMo

; 947  : 				{
; 948  : 					x = limitRect.left;

  00317	89 45 0c	 mov	 DWORD PTR _x$2$[ebp], eax

; 949  : 				}

  0031a	eb 12		 jmp	 SHORT $LN18@RunMouseMo
$LN16@RunMouseMo:

; 950  : 				else if (x + pWin->GetWidth() >= limitRect.right)

  0031c	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0031f	03 c1		 add	 eax, ecx
  00321	8b 4d e4	 mov	 ecx, DWORD PTR tv946[ebp]
  00324	3b c1		 cmp	 eax, ecx
  00326	7c 06		 jl	 SHORT $LN18@RunMouseMo

; 951  : 				{
; 952  : 					x = limitRect.right - pWin->GetWidth();

  00328	2b 4f 2c	 sub	 ecx, DWORD PTR [edi+44]
  0032b	89 4d 0c	 mov	 DWORD PTR _x$2$[ebp], ecx
$LN18@RunMouseMo:

; 953  : 				}
; 954  : 
; 955  : 				if (y < limitRect.top)

  0032e	8b 45 d4	 mov	 eax, DWORD PTR _limitRect$2[ebp+4]
  00331	3b d0		 cmp	 edx, eax
  00333	7d 04		 jge	 SHORT $LN19@RunMouseMo

; 956  : 				{
; 957  : 					y = limitRect.top;

  00335	8b d0		 mov	 edx, eax

; 958  : 				}

  00337	eb 10		 jmp	 SHORT $LN151@RunMouseMo
$LN19@RunMouseMo:

; 959  : 				else if (y + pWin->GetHeight() >= limitRect.bottom)

  00339	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0033c	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  0033f	3b 45 f0	 cmp	 eax, DWORD PTR tv945[ebp]
  00342	7c 08		 jl	 SHORT $LN21@RunMouseMo

; 960  : 				{
; 961  : 					y = limitRect.bottom - pWin->GetHeight();

  00344	8b 55 f0	 mov	 edx, DWORD PTR tv945[ebp]
  00347	2b d1		 sub	 edx, ecx
$LN151@RunMouseMo:

; 962  : 				}
; 963  : 			}
; 964  : 
; 965  : 			pWin->SetPosition(x, y);

  00349	89 55 08	 mov	 DWORD PTR _y$2$[ebp], edx
$LN21@RunMouseMo:
  0034c	52		 push	 edx
  0034d	ff 75 0c	 push	 DWORD PTR _x$2$[ebp]
  00350	8b cf		 mov	 ecx, edi
  00352	e8 00 00 00 00	 call	 ?SetPosition@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetPosition

; 966  : 			pWin->OnMoveWindow(x, y);

  00357	8b 4d 08	 mov	 ecx, DWORD PTR _y$2$[ebp]
  0035a	8b 07		 mov	 eax, DWORD PTR [edi]
  0035c	51		 push	 ecx
  0035d	ff 75 0c	 push	 DWORD PTR _x$2$[ebp]
  00360	8b cf		 mov	 ecx, edi
  00362	ff 50 44	 call	 DWORD PTR [eax+68]

; 967  : 		}

  00365	eb 1f		 jmp	 SHORT $LN22@RunMouseMo
$LN10@RunMouseMo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 139  : 	bool			IsFlag(DWORD flag)		{ return (m_dwFlag & flag) ? true : false;	}

  00367	8b 47 78	 mov	 eax, DWORD PTR [edi+120]
  0036a	c1 e8 03	 shr	 eax, 3
  0036d	a8 01		 test	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 968  : 		else if (m_pLeftCaptureWindow->IsFlag(CWindow::FLAG_DRAGABLE))

  0036f	74 15		 je	 SHORT $LN22@RunMouseMo

; 969  : 		{
; 970  : 			long x = m_lMouseX - m_lDragX;
; 971  : 			long y = m_lMouseY - m_lDragY;

  00371	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 972  : 			m_pLeftCaptureWindow->OnMouseDrag(x, y);

  00374	8b cf		 mov	 ecx, edi
  00376	2b 46 28	 sub	 eax, DWORD PTR [esi+40]
  00379	8b 17		 mov	 edx, DWORD PTR [edi]
  0037b	50		 push	 eax
  0037c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0037f	2b 46 24	 sub	 eax, DWORD PTR [esi+36]
  00382	50		 push	 eax
  00383	ff 52 28	 call	 DWORD PTR [edx+40]
$LN22@RunMouseMo:

; 973  : 		}
; 974  : 	}
; 975  : 
; 976  : 	if (m_pPointWindow != pPointWindow)

  00386	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00389	8b 7d e0	 mov	 edi, DWORD PTR _pPointWindow$1$[ebp]
  0038c	3b cf		 cmp	 ecx, edi
  0038e	74 17		 je	 SHORT $LN25@RunMouseMo

; 977  : 	{
; 978  : #ifdef _DEBUG
; 979  : 		if (pPointWindow && pPointWindow->GetName())
; 980  : 		{
; 981  : 			Tracenf("PointWindow: %s", pPointWindow->GetName());
; 982  : 		}
; 983  : #endif
; 984  : 		if (m_pPointWindow)

  00390	85 c9		 test	 ecx, ecx
  00392	74 05		 je	 SHORT $LN24@RunMouseMo

; 985  : 		{
; 986  : 			m_pPointWindow->OnMouseOverOut();

  00394	8b 01		 mov	 eax, DWORD PTR [ecx]
  00396	ff 50 30	 call	 DWORD PTR [eax+48]
$LN24@RunMouseMo:

; 987  : 		}
; 988  : 
; 989  : 		m_pPointWindow = pPointWindow;

  00399	89 7e 70	 mov	 DWORD PTR [esi+112], edi

; 990  : 
; 991  : 		if (m_pPointWindow)

  0039c	85 ff		 test	 edi, edi
  0039e	74 07		 je	 SHORT $LN25@RunMouseMo

; 992  : 		{
; 993  : 			m_pPointWindow->OnMouseOverIn();

  003a0	8b 07		 mov	 eax, DWORD PTR [edi]
  003a2	8b cf		 mov	 ecx, edi
  003a4	ff 50 2c	 call	 DWORD PTR [eax+44]
$LN25@RunMouseMo:

; 994  : 		}
; 995  : 	}
; 996  : 
; 997  : 	if (m_pPointWindow)

  003a7	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  003aa	85 c9		 test	 ecx, ecx
  003ac	74 05		 je	 SHORT $LN26@RunMouseMo

; 998  : 	{
; 999  : 		m_pPointWindow->OnMouseOver();

  003ae	8b 01		 mov	 eax, DWORD PTR [ecx]
  003b0	ff 50 34	 call	 DWORD PTR [eax+52]
$LN26@RunMouseMo:

; 1001 : }

  003b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003bd	59		 pop	 ecx
  003be	5f		 pop	 edi
  003bf	5e		 pop	 esi
  003c0	8b e5		 mov	 esp, ebp
  003c2	5d		 pop	 ebp
  003c3	c2 08 00	 ret	 8
$LN153@RunMouseMo:

; 904  : 		{
; 905  : 			static std::string strPickWindowName = "";

  003c6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  003cb	e8 00 00 00 00	 call	 __Init_thread_header
  003d0	83 c4 04	 add	 esp, 4
  003d3	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA, -1
  003da	0f 85 ba fc ff
	ff		 jne	 $LN2@RunMouseMo
  003e0	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  003e5	b9 00 00 00 00	 mov	 ecx, OFFSET ?strPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  003ea	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  003f1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  003f6	68 00 00 00 00	 push	 OFFSET ??__FstrPickWindowName@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@YAXXZ ; `UI::CWindowManager::RunMouseMove'::`17'::`dynamic atexit destructor for 'strPickWindowName''
  003fb	e8 00 00 00 00	 call	 _atexit
  00400	68 00 00 00 00	 push	 OFFSET ?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  00405	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0040c	e8 00 00 00 00	 call	 __Init_thread_footer
  00411	83 c4 08	 add	 esp, 8
  00414	e9 81 fc ff ff	 jmp	 $LN2@RunMouseMo
$LN154@RunMouseMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  00419	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN155@RunMouseMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0041e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN149@RunMouseMo:
  00423	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?BB@??RunMouseMove@CWindowManager@UI@@QAEXJJ@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RunMouseMove@CWindowManager@UI@@QAEXJJ@Z ENDP		; UI::CWindowManager::RunMouseMove
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?UpdateLockedCursor@CWindowManager@UI@@QAE_NHHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_mouseX$ = 8						; size = 4
_mouseY$ = 12						; size = 4
_lpReturnPoint$ = 16					; size = 4
?UpdateLockedCursor@CWindowManager@UI@@QAE_NHHPAUtagPOINT@@@Z PROC ; UI::CWindowManager::UpdateLockedCursor, COMDAT
; _this$ = ecx

; 616  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 617  : 	if (!m_lockedMousePositionWindow)

  00005	83 ba ac 00 00
	00 00		 cmp	 DWORD PTR [edx+172], 0
  0000c	75 06		 jne	 SHORT $LN2@UpdateLock

; 618  : 	{
; 619  : 		return false;

  0000e	32 c0		 xor	 al, al

; 632  : }

  00010	5d		 pop	 ebp
  00011	c2 0c 00	 ret	 12			; 0000000cH
$LN2@UpdateLock:

; 620  : 	}
; 621  : 
; 622  : 	int x_dif = mouseX - m_lockedMousePosition.x;
; 623  : 	int y_dif = mouseY - m_lockedMousePosition.y;
; 624  : 	lpReturnPoint->x = m_lockedMousePosition.x;

  00014	8b 4d 10	 mov	 ecx, DWORD PTR _lpReturnPoint$[ebp]
  00017	8b 82 b0 00 00
	00		 mov	 eax, DWORD PTR [edx+176]
  0001d	56		 push	 esi
  0001e	8b 75 0c	 mov	 esi, DWORD PTR _mouseY$[ebp]
  00021	2b b2 b4 00 00
	00		 sub	 esi, DWORD PTR [edx+180]
  00027	57		 push	 edi
  00028	8b 7d 08	 mov	 edi, DWORD PTR _mouseX$[ebp]
  0002b	2b f8		 sub	 edi, eax
  0002d	89 01		 mov	 DWORD PTR [ecx], eax

; 625  : 	lpReturnPoint->y = m_lockedMousePosition.y;

  0002f	8b 82 b4 00 00
	00		 mov	 eax, DWORD PTR [edx+180]
  00035	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 626  : 
; 627  : 	if (x_dif != 0 || y_dif != 0)

  00038	85 ff		 test	 edi, edi
  0003a	75 04		 jne	 SHORT $LN4@UpdateLock
  0003c	85 f6		 test	 esi, esi
  0003e	74 0d		 je	 SHORT $LN3@UpdateLock
$LN4@UpdateLock:

; 628  : 	{
; 629  : 		m_lockedMousePositionWindow->OnUpdateLockedCursor(x_dif, y_dif);

  00040	8b 8a ac 00 00
	00		 mov	 ecx, DWORD PTR [edx+172]
  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004a	ff 50 18	 call	 DWORD PTR [eax+24]
$LN3@UpdateLock:

; 630  : 	}
; 631  : 	return true;

  0004d	5f		 pop	 edi
  0004e	b0 01		 mov	 al, 1
  00050	5e		 pop	 esi

; 632  : }

  00051	5d		 pop	 ebp
  00052	c2 0c 00	 ret	 12			; 0000000cH
?UpdateLockedCursor@CWindowManager@UI@@QAE_NHHPAUtagPOINT@@@Z ENDP ; UI::CWindowManager::UpdateLockedCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?UnlockCursor@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWindow$ = 8						; size = 4
?UnlockCursor@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::UnlockCursor, COMDAT
; _this$ = ecx

; 606  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 607  : 	if (m_lockedMousePositionWindow != pWindow)

  00003	8b 81 ac 00 00
	00		 mov	 eax, DWORD PTR [ecx+172]
  00009	3b 45 08	 cmp	 eax, DWORD PTR _pWindow$[ebp]
  0000c	75 0a		 jne	 SHORT $LN1@UnlockCurs

; 608  : 	{
; 609  : 		return;
; 610  : 	}
; 611  : 
; 612  : 	m_lockedMousePositionWindow = NULL;

  0000e	c7 81 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+172], 0
$LN1@UnlockCurs:

; 613  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?UnlockCursor@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::UnlockCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?LockCursorOnWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWindow$ = 8						; size = 4
?LockCursorOnWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::LockCursorOnWindow, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 595  : 	if (m_lockedMousePositionWindow != NULL)

  00006	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  0000c	85 c0		 test	 eax, eax
  0000e	74 06		 je	 SHORT $LN2@LockCursor

; 596  : 	{
; 597  : 		UnlockCursor(m_lockedMousePositionWindow);

  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?UnlockCursor@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::UnlockCursor
$LN2@LockCursor:

; 598  : 	}
; 599  : 
; 600  : 	m_lockedMousePositionWindow = pWindow;

  00016	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  00019	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax

; 601  : 	m_lockedMousePosition.x = m_lMouseRealX;

  0001f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00022	89 86 b0 00 00
	00		 mov	 DWORD PTR [esi+176], eax

; 602  : 	m_lockedMousePosition.y = m_lMouseRealY;

  00028	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0002b	89 86 b4 00 00
	00		 mov	 DWORD PTR [esi+180], eax
  00031	5e		 pop	 esi

; 603  : }

  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
?LockCursorOnWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::LockCursorOnWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?Render@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?Render@CWindowManager@UI@@QAEXXZ PROC			; UI::CWindowManager::Render, COMDAT
; _this$ = ecx

; 826  : 	m_pRootWindow->Render();

  00000	8b 89 98 00 00
	00		 mov	 ecx, DWORD PTR [ecx+152]
  00006	e9 00 00 00 00	 jmp	 ?Render@CWindow@UI@@QAEXXZ ; UI::CWindow::Render
?Render@CWindowManager@UI@@QAEXXZ ENDP			; UI::CWindowManager::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?Update@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?Update@CWindowManager@UI@@QAEXXZ PROC			; UI::CWindowManager::Update, COMDAT
; _this$ = ecx

; 818  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 819  : 	__ClearReserveDeleteWindowList();

  00003	e8 00 00 00 00	 call	 ?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ; UI::CWindowManager::__ClearReserveDeleteWindowList

; 820  : 
; 821  : 	m_pRootWindow->Update();

  00008	8b 8e 98 00 00
	00		 mov	 ecx, DWORD PTR [esi+152]
  0000e	5e		 pop	 esi
  0000f	e9 00 00 00 00	 jmp	 ?Update@CWindow@UI@@QAEXXZ ; UI::CWindow::Update
?Update@CWindowManager@UI@@QAEXXZ ENDP			; UI::CWindowManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?ResetCapture@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?ResetCapture@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::ResetCapture, COMDAT
; _this$ = ecx

; 771  : 	m_pLeftCaptureWindow = NULL;

  00000	c7 41 74 00 00
	00 00		 mov	 DWORD PTR [ecx+116], 0

; 772  : 	m_pMiddleCaptureWindow = NULL;

  00007	c7 41 7c 00 00
	00 00		 mov	 DWORD PTR [ecx+124], 0

; 773  : 	m_pRightCaptureWindow = NULL;

  0000e	c7 41 78 00 00
	00 00		 mov	 DWORD PTR [ecx+120], 0

; 774  : }

  00015	c3		 ret	 0
?ResetCapture@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::ResetCapture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetTopUIWindow@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
__Loc$1 = -40						; size = 12
$T2 = -28						; size = 24
__$ArrayPad$ = -4					; size = 4
?SetTopUIWindow@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::SetTopUIWindow, COMDAT
; _this$ = ecx

; 745  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 746  : 	if (m_pLockWindow)

  00013	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00017	0f 85 99 00 00
	00		 jne	 $LN4@SetTopUIWi

; 747  : 	{
; 748  : 		return;
; 749  : 	}
; 750  : 
; 751  : 	TLayerContainer::iterator itor = m_LayerWindowMap.find("UI");

  0001d	53		 push	 ebx
  0001e	57		 push	 edi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_02ELHCDOPK@UI@
  00024	8d 4d e4	 lea	 ecx, DWORD PTR $T2[ebp]
  00027	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002c	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  0002f	50		 push	 eax
  00030	8d 45 d8	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00033	50		 push	 eax
  00034	8d 8e a4 00 00
	00		 lea	 ecx, DWORD PTR [esi+164]
  0003a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003f	8b 7d e0	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  00042	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00046	75 14		 jne	 SHORT $LN10@SetTopUIWi
  00048	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0004b	50		 push	 eax
  0004c	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  0004f	50		 push	 eax
  00050	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00055	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00058	84 c0		 test	 al, al
  0005a	74 06		 je	 SHORT $LN9@SetTopUIWi
$LN10@SetTopUIWi:

; 1372 :         return _Get_scary()->_Myhead;

  0005c	8b be a4 00 00
	00		 mov	 edi, DWORD PTR [esi+164]
$LN9@SetTopUIWi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00062	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp+20]
  00065	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00068	72 28		 jb	 SHORT $LN36@SetTopUIWi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006a	8b 55 e4	 mov	 edx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0006d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006e	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00070	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00076	72 10		 jb	 SHORT $LN46@SetTopUIWi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00078	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0007b	83 c1 23	 add	 ecx, 35			; 00000023H
  0007e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00080	83 c0 fc	 add	 eax, -4			; fffffffcH
  00083	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00086	77 3d		 ja	 SHORT $LN72@SetTopUIWi
$LN46@SetTopUIWi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	51		 push	 ecx
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008f	83 c4 08	 add	 esp, 8
$LN36@SetTopUIWi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  00092	3b be a4 00 00
	00		 cmp	 edi, DWORD PTR [esi+164]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 752  : 	if (itor == m_LayerWindowMap.end())

  00098	74 1a		 je	 SHORT $LN69@SetTopUIWi

; 753  : 	{
; 754  : 		return;
; 755  : 	}
; 756  : 	CWindow * pGameLayer = itor->second;
; 757  : 	CWindow * pTopWindow = pGameLayer->PickTopWindow(m_lMouseX, m_lMouseY);

  0009a	ff 76 18	 push	 DWORD PTR [esi+24]
  0009d	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  000a0	ff 76 14	 push	 DWORD PTR [esi+20]
  000a3	e8 00 00 00 00	 call	 ?PickTopWindow@CWindow@UI@@QAEPAV12@JJ@Z ; UI::CWindow::PickTopWindow

; 758  : 	if (pTopWindow)

  000a8	85 c0		 test	 eax, eax
  000aa	74 08		 je	 SHORT $LN69@SetTopUIWi

; 759  : 	{
; 760  : 		SetTop(pTopWindow);

  000ac	50		 push	 eax
  000ad	8b ce		 mov	 ecx, esi
  000af	e8 00 00 00 00	 call	 ?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::SetTop
$LN69@SetTopUIWi:
  000b4	5f		 pop	 edi
  000b5	5b		 pop	 ebx
$LN4@SetTopUIWi:

; 762  : }

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b9	33 cd		 xor	 ecx, ebp
  000bb	5e		 pop	 esi
  000bc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c3		 ret	 0
$LN72@SetTopUIWi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN70@SetTopUIWi:
  000ca	cc		 int	 3
?SetTopUIWindow@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::SetTopUIWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?IsTop@CWindowManager@UI@@QAE_NPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?IsTop@CWindowManager@UI@@QAE_NPAVCWindow@2@@Z PROC	; UI::CWindowManager::IsTop, COMDAT
; _this$ = ecx

; 735  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 115  : 	bool			HasParent()		{ return m_pParent ? true : false; }

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  00007	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 736  : 	if (!pWin->HasParent())

  0000e	75 07		 jne	 SHORT $LN2@IsTop

; 737  : 	{
; 738  : 		return false;

  00010	32 c0		 xor	 al, al
  00012	5e		 pop	 esi

; 743  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
$LN2@IsTop:

; 739  : 	}
; 740  : 
; 741  : 	CWindow * pParentWindow = pWin->GetParent();

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 742  : 	return pParentWindow->IsTop(pWin);

  0001e	56		 push	 esi
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 ?IsTop@CWindow@UI@@QAE_NPAV12@@Z ; UI::CWindow::IsTop
  00026	5e		 pop	 esi

; 743  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?IsTop@CWindowManager@UI@@QAE_NPAVCWindow@2@@Z ENDP	; UI::CWindowManager::IsTop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC	; UI::CWindowManager::SetTop, COMDAT
; _this$ = ecx

; 722  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 115  : 	bool			HasParent()		{ return m_pParent ? true : false; }

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  00007	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 723  : 	if (!pWin->HasParent())

  0000e	74 0f		 je	 SHORT $LN1@SetTop

; 724  : 	{
; 725  : 		return;
; 726  : 	}
; 727  : 
; 728  : 	CWindow * pParentWindow = pWin->GetParent();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 729  : 	pParentWindow->SetTop(pWin);

  00017	56		 push	 esi
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 ?SetTop@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::SetTop
$LN1@SetTop:
  0001f	5e		 pop	 esi

; 730  : 
; 731  : //		ResetCapture();
; 732  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?SetTop@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP	; UI::CWindowManager::SetTop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ
_TEXT	SEGMENT
?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ PROC ; UI::CWindowManager::GetActivateWindow, COMDAT
; _this$ = ecx

; 766  : 	return m_pActiveWindow;

  00000	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 767  : }

  00003	c3		 ret	 0
?GetActivateWindow@CWindowManager@UI@@QAEPAVCWindow@2@XZ ENDP ; UI::CWindowManager::GetActivateWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?DeactivateWindow@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?DeactivateWindow@CWindowManager@UI@@QAEXXZ PROC	; UI::CWindowManager::DeactivateWindow, COMDAT
; _this$ = ecx

; 701  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 702  : 	if (m_pActiveWindow)

  00003	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00006	85 c9		 test	 ecx, ecx
  00008	74 12		 je	 SHORT $LN4@Deactivate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  0000a	83 7e 60 00	 cmp	 DWORD PTR [esi+96], 0
  0000e	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 704  : 		if (m_ActiveWindowList.empty())

  00010	75 0c		 jne	 SHORT $LN3@Deactivate

; 705  : 		{
; 706  : 			m_pActiveWindow->OnKillFocus();

  00012	ff 50 24	 call	 DWORD PTR [eax+36]

; 707  : 			m_pActiveWindow = NULL;

  00015	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN4@Deactivate:
  0001c	5e		 pop	 esi

; 717  : 		}
; 718  : 	}
; 719  : }

  0001d	c3		 ret	 0
$LN3@Deactivate:

; 708  : 		}
; 709  : 		else
; 710  : 		{
; 711  : 			m_pActiveWindow->OnKillFocus();

  0001e	ff 50 24	 call	 DWORD PTR [eax+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1223 :         return _Mypair._Myval2._Myhead->_Prev->_Myval;

  00021	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00024	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 713  : 			m_pActiveWindow = m_ActiveWindowList.back();

  00026	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00029	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002c	89 46 58	 mov	 DWORD PTR [esi+88], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1273 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Prev);

  0002f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	52		 push	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1418 :         const auto _Result = _Pnode->_Next;

  00033	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1419 :         _Mypair._Myval2._Orphan_ptr2(_Pnode);
; 1420 :         --_Mypair._Myval2._Mysize;

  00035	ff 4e 60	 dec	 DWORD PTR [esi+96]

; 1421 :         _Pnode->_Prev->_Next = _Result;

  00038	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003b	89 08		 mov	 DWORD PTR [eax], ecx

; 1422 :         _Result->_Prev       = _Pnode->_Prev;

  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 716  : 			m_pActiveWindow->OnSetFocus();

  00048	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004b	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 716  : 			m_pActiveWindow->OnSetFocus();

  0004e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00050	5e		 pop	 esi
  00051	ff 60 20	 jmp	 DWORD PTR [eax+32]
?DeactivateWindow@CWindowManager@UI@@QAEXXZ ENDP	; UI::CWindowManager::DeactivateWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::ActivateWindow, COMDAT
; _this$ = ecx

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 679  : 	m_ActiveWindowList.remove(pWin);

  00007	8d 45 08	 lea	 eax, DWORD PTR _pWin$[ebp]
  0000a	57		 push	 edi
  0000b	50		 push	 eax
  0000c	8d 5e 5c	 lea	 ebx, DWORD PTR [esi+92]
  0000f	8b cb		 mov	 ecx, ebx
  00011	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 680  : 
; 681  : 	if (pWin == m_pActiveWindow)

  00016	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00019	8d 7e 58	 lea	 edi, DWORD PTR [esi+88]
  0001c	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  0001f	3b f0		 cmp	 esi, eax
  00021	74 20		 je	 SHORT $LN4@ActivateWi

; 682  : 	{
; 683  : 		return;
; 684  : 	}
; 685  : 
; 686  : 	if (m_pActiveWindow)

  00023	85 c0		 test	 eax, eax
  00025	74 0f		 je	 SHORT $LN3@ActivateWi

; 687  : 	{
; 688  : 		m_ActiveWindowList.push_back(m_pActiveWindow);

  00027	57		 push	 edi
  00028	8b cb		 mov	 ecx, ebx
  0002a	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back

; 689  : 		m_pActiveWindow->OnKillFocus();

  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 24	 call	 DWORD PTR [eax+36]
$LN3@ActivateWi:

; 690  : 	}
; 691  : 
; 692  : 	m_pActiveWindow = pWin;

  00036	89 37		 mov	 DWORD PTR [edi], esi

; 693  : 
; 694  : 	if (m_pActiveWindow)

  00038	85 f6		 test	 esi, esi
  0003a	74 07		 je	 SHORT $LN4@ActivateWi

; 695  : 	{
; 696  : 		m_pActiveWindow->OnSetFocus();

  0003c	8b 06		 mov	 eax, DWORD PTR [esi]
  0003e	8b ce		 mov	 ecx, esi
  00040	ff 50 20	 call	 DWORD PTR [eax+32]
$LN4@ActivateWi:

; 697  : 	}
; 698  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?ActivateWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::ActivateWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?UnlockWindow@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?UnlockWindow@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::UnlockWindow, COMDAT
; _this$ = ecx

; 658  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 659  : 	if (m_pLockWindow)

  00003	83 7e 64 00	 cmp	 DWORD PTR [esi+100], 0
  00007	74 47		 je	 SHORT $LN23@UnlockWind
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  00009	57		 push	 edi
  0000a	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  0000d	85 ff		 test	 edi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 661  : 		if (m_LockWindowList.empty())

  0000f	75 11		 jne	 SHORT $LN3@UnlockWind

; 662  : 		{
; 663  : 			m_pLockWindow = NULL;
; 664  : 			if (m_pActiveWindow)

  00011	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00014	89 7e 64	 mov	 DWORD PTR [esi+100], edi
  00017	85 c9		 test	 ecx, ecx
  00019	74 34		 je	 SHORT $LN41@UnlockWind

; 665  : 			{
; 666  : 				m_pActiveWindow->OnSetFocus();

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	ff 60 20	 jmp	 DWORD PTR [eax+32]
$LN3@UnlockWind:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1223 :         return _Mypair._Myval2._Myhead->_Prev->_Myval;

  00022	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 671  : 			m_pLockWindow = m_LockWindowList.back();

  00027	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	89 46 64	 mov	 DWORD PTR [esi+100], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1420 :         --_Mypair._Myval2._Mysize;

  00030	8d 47 ff	 lea	 eax, DWORD PTR [edi-1]

; 1273 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Prev);

  00033	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00036	52		 push	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1418 :         const auto _Result = _Pnode->_Next;

  00037	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 1420 :         --_Mypair._Myval2._Mysize;

  00039	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1421 :         _Pnode->_Prev->_Next = _Result;

  0003c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0003f	89 08		 mov	 DWORD PTR [eax], ecx

; 1422 :         _Result->_Prev       = _Pnode->_Prev;

  00041	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00044	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00047	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004c	83 c4 08	 add	 esp, 8
$LN41@UnlockWind:
  0004f	5f		 pop	 edi
$LN23@UnlockWind:
  00050	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 675  : }

  00051	c3		 ret	 0
?UnlockWindow@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::UnlockWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC	; UI::CWindowManager::LockWindow, COMDAT
; _this$ = ecx

; 636  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 637  : 	if (m_pActiveWindow)

  00008	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 05		 je	 SHORT $LN2@LockWindow

; 638  : 	{
; 639  : 		m_pActiveWindow->OnKillFocus();

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	ff 50 24	 call	 DWORD PTR [eax+36]
$LN2@LockWindow:

; 640  : 	}
; 641  : 
; 642  : 	m_LockWindowList.remove(pWin);

  00014	8d 45 08	 lea	 eax, DWORD PTR _pWin$[ebp]
  00017	8d 5e 68	 lea	 ebx, DWORD PTR [esi+104]
  0001a	50		 push	 eax
  0001b	8b cb		 mov	 ecx, ebx
  0001d	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 643  : 
; 644  : 	if (m_pLockWindow)

  00022	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00025	83 c6 64	 add	 esi, 100		; 00000064H
  00028	8b 7d 08	 mov	 edi, DWORD PTR _pWin$[ebp]
  0002b	85 c0		 test	 eax, eax
  0002d	74 0c		 je	 SHORT $LN3@LockWindow

; 645  : 	{
; 646  : 		if (m_pLockWindow == pWin)

  0002f	3b c7		 cmp	 eax, edi
  00031	74 0a		 je	 SHORT $LN1@LockWindow

; 647  : 		{
; 648  : 			return;
; 649  : 		}
; 650  : 
; 651  : 		m_LockWindowList.push_back(m_pLockWindow);

  00033	56		 push	 esi
  00034	8b cb		 mov	 ecx, ebx
  00036	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
$LN3@LockWindow:

; 652  : 	}
; 653  : 
; 654  : 	m_pLockWindow = pWin;

  0003b	89 3e		 mov	 DWORD PTR [esi], edi
$LN1@LockWindow:
  0003d	5f		 pop	 edi

; 655  : }

  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?LockWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP	; UI::CWindowManager::LockWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ PROC ; UI::CWindowManager::OnceIgnoreMouseLeftButtonUpEvent, COMDAT
; _this$ = ecx

; 587  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 588  : 	m_bOnceIgnoreMouseLeftButtonUpEventFlag = TRUE;

  00003	c7 46 34 01 00
	00 00		 mov	 DWORD PTR [esi+52], 1

; 589  : 	m_iIgnoreEndTime = timeGetTime() + 500;

  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00010	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  00015	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00018	5e		 pop	 esi

; 590  : }

  00019	c3		 ret	 0
?OnceIgnoreMouseLeftButtonUpEvent@CWindowManager@UI@@QAEXXZ ENDP ; UI::CWindowManager::OnceIgnoreMouseLeftButtonUpEvent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z
_TEXT	SEGMENT
_bFlag$ = 8						; size = 4
?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z PROC	; UI::CWindowManager::SetAttachingFlag, COMDAT
; _this$ = ecx

; 540  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 541  : 	m_bAttachingFlag = bFlag;

  00003	8b 45 08	 mov	 eax, DWORD PTR _bFlag$[ebp]
  00006	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 542  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z ENDP	; UI::CWindowManager::SetAttachingFlag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?DeattachIcon@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?DeattachIcon@CWindowManager@UI@@QAEXXZ PROC		; UI::CWindowManager::DeattachIcon, COMDAT
; _this$ = ecx

; 545  : {

  00000	56		 push	 esi

; 546  : 	SetAttachingFlag(FALSE);

  00001	6a 00		 push	 0
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?SetAttachingFlag@CWindowManager@UI@@QAEXH@Z ; UI::CWindowManager::SetAttachingFlag

; 547  : 	if (m_poMouseHandler)

  0000a	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0000e	74 16		 je	 SHORT $LN2@DeattachIc

; 548  : 	{
; 549  : 		PyCallClassMemberFunc(m_poMouseHandler, "DeattachObject", BuildEmptyTuple());

  00010	e8 00 00 00 00	 call	 ?BuildEmptyTuple@UI@@YAPAU_object@@XZ ; UI::BuildEmptyTuple
  00015	50		 push	 eax
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KLAFPINF@DeattachObject@
  0001b	ff 76 40	 push	 DWORD PTR [esi+64]
  0001e	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@DeattachIc:

; 550  : 	}
; 551  : }

  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?DeattachIcon@CWindowManager@UI@@QAEXXZ ENDP		; UI::CWindowManager::DeattachIcon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
_dwIndex$ = 12						; size = 4
_dwSlotNumber$ = 16					; size = 4
_byWidth$ = 20						; size = 1
_byHeight$ = 24						; size = 1
?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z PROC		; UI::CWindowManager::AttachIcon, COMDAT
; _this$ = ecx

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 530  : 	m_bAttachingFlag = TRUE;
; 531  : 	m_dwAttachingType = dwType;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwType$[ebp]
  00006	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 532  : 	m_dwAttachingIndex = dwIndex;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _dwIndex$[ebp]
  0000c	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 533  : 	m_dwAttachingSlotNumber = dwSlotNumber;

  0000f	8b 45 10	 mov	 eax, DWORD PTR _dwSlotNumber$[ebp]
  00012	89 41 50	 mov	 DWORD PTR [ecx+80], eax

; 534  : 
; 535  : 	m_byAttachingIconWidth = byWidth;

  00015	8a 45 14	 mov	 al, BYTE PTR _byWidth$[ebp]
  00018	88 41 54	 mov	 BYTE PTR [ecx+84], al

; 536  : 	m_byAttachingIconHeight = byHeight;

  0001b	8a 45 18	 mov	 al, BYTE PTR _byHeight$[ebp]
  0001e	c7 41 44 01 00
	00 00		 mov	 DWORD PTR [ecx+68], 1
  00025	88 41 55	 mov	 BYTE PTR [ecx+85], al

; 537  : }

  00028	5d		 pop	 ebp
  00029	c2 14 00	 ret	 20			; 00000014H
?AttachIcon@CWindowManager@UI@@QAEXKKKEE@Z ENDP		; UI::CWindowManager::AttachIcon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z
_TEXT	SEGMENT
_pbyWidth$ = 8						; size = 4
_pbyHeight$ = 12					; size = 4
?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z PROC ; UI::CWindowManager::GetAttachingIconSize, COMDAT
; _this$ = ecx

; 523  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 524  : 	*pbyWidth = m_byAttachingIconWidth;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pbyWidth$[ebp]
  00006	8a 51 54	 mov	 dl, BYTE PTR [ecx+84]
  00009	88 10		 mov	 BYTE PTR [eax], dl

; 525  : 	*pbyHeight = m_byAttachingIconHeight;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pbyHeight$[ebp]
  0000e	8a 49 55	 mov	 cl, BYTE PTR [ecx+85]
  00011	88 08		 mov	 BYTE PTR [eax], cl

; 526  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ENDP ; UI::CWindowManager::GetAttachingIconSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ PROC	; UI::CWindowManager::GetAttachingSlotNumber, COMDAT
; _this$ = ecx

; 519  : 	return m_dwAttachingSlotNumber;

  00000	8b 41 50	 mov	 eax, DWORD PTR [ecx+80]

; 520  : }

  00003	c3		 ret	 0
?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ENDP	; UI::CWindowManager::GetAttachingSlotNumber
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingIndex@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingIndex@CWindowManager@UI@@QAEKXZ PROC	; UI::CWindowManager::GetAttachingIndex, COMDAT
; _this$ = ecx

; 514  : 	return m_dwAttachingIndex;

  00000	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]

; 515  : }

  00003	c3		 ret	 0
?GetAttachingIndex@CWindowManager@UI@@QAEKXZ ENDP	; UI::CWindowManager::GetAttachingIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAttachingType@CWindowManager@UI@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingType@CWindowManager@UI@@QAEKXZ PROC	; UI::CWindowManager::GetAttachingType, COMDAT
; _this$ = ecx

; 509  : 	return m_dwAttachingType;

  00000	8b 41 48	 mov	 eax, DWORD PTR [ecx+72]

; 510  : }

  00003	c3		 ret	 0
?GetAttachingType@CWindowManager@UI@@QAEKXZ ENDP	; UI::CWindowManager::GetAttachingType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?IsAttaching@CWindowManager@UI@@QAEHXZ
_TEXT	SEGMENT
?IsAttaching@CWindowManager@UI@@QAEHXZ PROC		; UI::CWindowManager::IsAttaching, COMDAT
; _this$ = ecx

; 504  : 	return m_bAttachingFlag;

  00000	8b 41 44	 mov	 eax, DWORD PTR [ecx+68]

; 505  : }

  00003	c3		 ret	 0
?IsAttaching@CWindowManager@UI@@QAEHXZ ENDP		; UI::CWindowManager::IsAttaching
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_itor$ = -4						; size = 4
__Successor$1 = 8					; size = 4
_pWindow$ = 8						; size = 4
?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::NotifyDestroyWindow, COMDAT
; _this$ = ecx

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 423  : 	if (pWindow == m_pActiveWindow)

  00004	8b 45 08	 mov	 eax, DWORD PTR _pWindow$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	3b 46 58	 cmp	 eax, DWORD PTR [esi+88]
  0000e	75 07		 jne	 SHORT $LN5@NotifyDest

; 424  : 	{
; 425  : 		m_pActiveWindow = NULL;

  00010	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN5@NotifyDest:

; 426  : 	}
; 427  : 
; 428  : 	if (pWindow == m_pPointWindow)

  00017	3b 46 70	 cmp	 eax, DWORD PTR [esi+112]
  0001a	75 07		 jne	 SHORT $LN6@NotifyDest

; 429  : 	{
; 430  : 		m_pPointWindow = NULL;

  0001c	c7 46 70 00 00
	00 00		 mov	 DWORD PTR [esi+112], 0
$LN6@NotifyDest:

; 431  : 	}
; 432  : 
; 433  : 	if (pWindow == m_pLeftCaptureWindow)

  00023	3b 46 74	 cmp	 eax, DWORD PTR [esi+116]
  00026	75 07		 jne	 SHORT $LN7@NotifyDest

; 434  : 	{
; 435  : 		m_pLeftCaptureWindow = NULL;

  00028	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
$LN7@NotifyDest:

; 436  : 	}
; 437  : 
; 438  : 	if (pWindow == m_pMiddleCaptureWindow)

  0002f	3b 46 7c	 cmp	 eax, DWORD PTR [esi+124]
  00032	75 07		 jne	 SHORT $LN8@NotifyDest

; 439  : 	{
; 440  : 		m_pMiddleCaptureWindow = NULL;

  00034	c7 46 7c 00 00
	00 00		 mov	 DWORD PTR [esi+124], 0
$LN8@NotifyDest:

; 441  : 	}
; 442  : 
; 443  : 	if (pWindow == m_pRightCaptureWindow)

  0003b	3b 46 78	 cmp	 eax, DWORD PTR [esi+120]
  0003e	75 07		 jne	 SHORT $LN9@NotifyDest

; 444  : 	{
; 445  : 		m_pRightCaptureWindow = NULL;

  00040	c7 46 78 00 00
	00 00		 mov	 DWORD PTR [esi+120], 0
$LN9@NotifyDest:

; 446  : 	}
; 447  : 
; 448  : 	if (pWindow == m_pLockWindow)

  00047	3b 46 64	 cmp	 eax, DWORD PTR [esi+100]
  0004a	75 07		 jne	 SHORT $LN10@NotifyDest

; 449  : 	{
; 450  : 		m_pLockWindow = NULL;

  0004c	c7 46 64 00 00
	00 00		 mov	 DWORD PTR [esi+100], 0
$LN10@NotifyDest:

; 451  : 	}
; 452  : 
; 453  : #ifdef ENABLE_RT_EXTENSION
; 454  : 	if (pWindow == m_lockedMousePositionWindow)

  00053	3b 86 ac 00 00
	00		 cmp	 eax, DWORD PTR [esi+172]
  00059	75 0a		 jne	 SHORT $LN11@NotifyDest

; 455  : 	{
; 456  : 		m_lockedMousePositionWindow = NULL;

  0005b	c7 86 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+172], 0
$LN11@NotifyDest:

; 457  : 	}
; 458  : #endif
; 459  : 
; 460  : 	m_LockWindowList.remove(pWindow);

  00065	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00068	50		 push	 eax
  00069	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
  0006c	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 461  : 	m_ActiveWindowList.remove(pWindow);

  00071	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00074	50		 push	 eax
  00075	8d 4e 5c	 lea	 ecx, DWORD PTR [esi+92]
  00078	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove

; 462  : 	m_PickAlwaysWindowList.remove(pWindow);

  0007d	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00080	50		 push	 eax
  00081	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  00087	e8 00 00 00 00	 call	 ?remove@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@ABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::remove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0008c	8b 86 80 00 00
	00		 mov	 eax, DWORD PTR [esi+128]
  00092	8d be 80 00 00
	00		 lea	 edi, DWORD PTR [esi+128]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00098	8b 30		 mov	 esi, DWORD PTR [eax]
  0009a	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi
  0009d	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 465  : 	for (; itor != m_KeyCaptureWindowMap.end();)

  0009f	74 3f		 je	 SHORT $LN3@NotifyDest
  000a1	53		 push	 ebx
  000a2	8b 5d 08	 mov	 ebx, DWORD PTR _pWindow$[ebp]
$LL2@NotifyDest:

; 466  : 	{
; 467  : 		if (pWindow == itor->second)

  000a5	3b 5e 14	 cmp	 ebx, DWORD PTR [esi+20]
  000a8	75 26		 jne	 SHORT $LN12@NotifyDest
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1286 :         ++_Successor; // save successor iterator for return

  000aa	8d 4d 08	 lea	 ecx, DWORD PTR __Successor$1[ebp]
  000ad	89 75 08	 mov	 DWORD PTR __Successor$1[ebp], esi
  000b0	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  000b5	56		 push	 esi
  000b6	8b cf		 mov	 ecx, edi
  000b8	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000bd	6a 18		 push	 24			; 00000018H
  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 469  : 			itor = m_KeyCaptureWindowMap.erase(itor);

  000c5	8b 75 08	 mov	 esi, DWORD PTR __Successor$1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c8	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 469  : 			itor = m_KeyCaptureWindowMap.erase(itor);

  000cb	89 75 fc	 mov	 DWORD PTR _itor$[ebp], esi

; 470  : 		}

  000ce	eb 0b		 jmp	 SHORT $LN78@NotifyDest
$LN12@NotifyDest:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  000d0	8d 4d fc	 lea	 ecx, DWORD PTR _itor$[ebp]
  000d3	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >,std::_Iterator_base0>::operator++
  000d8	8b 75 fc	 mov	 esi, DWORD PTR _itor$[ebp]
$LN78@NotifyDest:

; 233  :         return this->_Ptr == _Right._Ptr;

  000db	3b 37		 cmp	 esi, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 465  : 	for (; itor != m_KeyCaptureWindowMap.end();)

  000dd	75 c6		 jne	 SHORT $LL2@NotifyDest
  000df	5b		 pop	 ebx
$LN3@NotifyDest:
  000e0	5f		 pop	 edi

; 471  : 		else
; 472  : 		{
; 473  : 			++itor;
; 474  : 		}
; 475  : 	}
; 476  : }

  000e1	5e		 pop	 esi
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::NotifyDestroyWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWin$ = 8						; size = 4
?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::DestroyWindow, COMDAT
; _this$ = ecx

; 479  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 480  : 	NotifyDestroyWindow(pWin);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWin$[ebp]
  00007	57		 push	 edi
  00008	56		 push	 esi
  00009	8b f9		 mov	 edi, ecx
  0000b	e8 00 00 00 00	 call	 ?NotifyDestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ; UI::CWindowManager::NotifyDestroyWindow
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 115  : 	bool			HasParent()		{ return m_pParent ? true : false; }

  00010	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 481  : 	if (pWin->HasParent())

  00017	74 0f		 je	 SHORT $LN2@DestroyWin

; 482  : 	{
; 483  : 		CWindow * pParentWin = pWin->GetParent();

  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 484  : 		pParentWin->DeleteChild(pWin);

  00020	56		 push	 esi
  00021	8b c8		 mov	 ecx, eax
  00023	e8 00 00 00 00	 call	 ?DeleteChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::DeleteChild
$LN2@DestroyWin:

; 485  : 	}
; 486  : 	pWin->Clear();

  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 ?Clear@CWindow@UI@@QAEXXZ ; UI::CWindow::Clear

; 487  : 	m_ReserveDeleteWindowList.push_back(pWin);

  0002f	8d 45 08	 lea	 eax, DWORD PTR _pWin$[ebp]
  00032	50		 push	 eax
  00033	8d 8f 88 00 00
	00		 lea	 ecx, DWORD PTR [edi+136]
  00039	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 488  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?DestroyWindow@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::DestroyWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_layer$GSCopy$1$ = -44					; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_object$ = 8						; size = 4
_layer$ = 12						; size = 4
?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterRenderTarget, COMDAT
; _this$ = ecx

; 412  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _layer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _object$[ebp]

; 413  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(layer));
; 414  : 
; 415  : 	auto window = static_cast<CWindow*>(new CRenderTarget(object));

  00033	68 54 01 00 00	 push	 340			; 00000154H
  00038	89 45 d4	 mov	 DWORD PTR _layer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterRe
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CRenderTarget@UI@@QAE@PAU_object@@@Z ; UI::CRenderTarget::CRenderTarget
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterRe
$LN3@RegisterRe:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterRe:

; 416  : 	m_LayerWindowMap[layer]->AddChild(window);

  0005f	ff 75 d4	 push	 DWORD PTR _layer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterRe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterRe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterRe
$LN29@RegisterRe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterRe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 417  : 	return window;

  000bf	8b c7		 mov	 eax, edi

; 418  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterRe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterRe:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 54 01 00 00	 push	 340			; 00000154H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterRenderTarget
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterNumberLine, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 399  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 400  : 
; 401  : 	CWindow * pWin = new CNumberLine(po);

  00033	68 8c 01 00 00	 push	 396			; 0000018cH
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterNu
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CNumberLine@UI@@QAE@PAU_object@@@Z ; UI::CNumberLine::CNumberLine
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterNu
$LN3@RegisterNu:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterNu:

; 402  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterNu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterNu

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterNu
$LN29@RegisterNu:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterNu:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 407  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 408  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterNu:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterNu:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 8c 01 00 00	 push	 396			; 0000018cH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterNumberLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterNumberLine
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterBar3D, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 386  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 387  : 
; 388  : 	CWindow * pWin = new CBar3D(po);

  00033	68 3c 01 00 00	 push	 316			; 0000013cH
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterBa
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CBar3D@UI@@QAE@PAU_object@@@Z ; UI::CBar3D::CBar3D
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterBa
$LN3@RegisterBa:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterBa:

; 389  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterBa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterBa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterBa
$LN29@RegisterBa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterBa:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 394  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 395  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterBa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterBa:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 3c 01 00 00	 push	 316			; 0000013cH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBar3D@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterBar3D
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterLine, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 373  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 374  : 
; 375  : 	CWindow * pWin = new CLine(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterLi
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CLine@UI@@QAE@PAU_object@@@Z ; UI::CLine::CLine
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterLi
$LN3@RegisterLi:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterLi:

; 376  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterLi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterLi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterLi
$LN29@RegisterLi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterLi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 381  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 382  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterLi:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterLine
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterBar, COMDAT
; _this$ = ecx

; 359  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 360  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 361  : 
; 362  : 	CWindow * pWin = new CBar(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterBa
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CBar@UI@@QAE@PAU_object@@@Z ; UI::CBar::CBar
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterBa
$LN3@RegisterBa:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterBa:

; 363  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterBa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterBa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterBa
$LN29@RegisterBa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterBa:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 368  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 369  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterBa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterBa:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBar@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterBar
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterWikiRenderTarget, COMDAT
; _this$ = ecx

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 346  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 347  : 
; 348  : 	CWindow* pWin = new CUiWikiRenderTarget(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterWi
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CUiWikiRenderTarget@UI@@QAE@PAU_object@@@Z ; UI::CUiWikiRenderTarget::CUiWikiRenderTarget
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterWi
$LN3@RegisterWi:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterWi:

; 349  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterWi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterWi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterWi
$LN29@RegisterWi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterWi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 354  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 355  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterWi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterWi:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterWikiRenderTarget@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterWikiRenderTarget
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterBox, COMDAT
; _this$ = ecx

; 331  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 332  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 333  : 
; 334  : 	CWindow * pWin = new CBox(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterBo
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CBox@UI@@QAE@PAU_object@@@Z ; UI::CBox::CBox
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterBo
$LN3@RegisterBo:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterBo:

; 335  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterBo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterBo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterBo
$LN29@RegisterBo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterBo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 340  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 341  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterBo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterBo:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterDragButton, COMDAT
; _this$ = ecx

; 318  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 319  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 320  : 
; 321  : 	CWindow * pWin = new CDragButton(po);

  00033	68 70 03 00 00	 push	 880			; 00000370H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterDr
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CDragButton@UI@@QAE@PAU_object@@@Z ; UI::CDragButton::CDragButton
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterDr
$LN3@RegisterDr:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterDr:

; 322  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterDr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterDr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterDr
$LN29@RegisterDr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterDr:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 327  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 328  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterDr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterDr:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 70 03 00 00	 push	 880			; 00000370H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterDragButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterDragButton
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterToggleButton, COMDAT
; _this$ = ecx

; 305  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 306  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 307  : 
; 308  : 	CWindow * pWin = new CToggleButton(po);

  00033	68 60 03 00 00	 push	 864			; 00000360H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterTo
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CToggleButton@UI@@QAE@PAU_object@@@Z ; UI::CToggleButton::CToggleButton
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterTo
$LN3@RegisterTo:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterTo:

; 309  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterTo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterTo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterTo
$LN29@RegisterTo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterTo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 314  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 315  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterTo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterTo:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 60 03 00 00	 push	 864			; 00000360H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterToggleButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterToggleButton
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterRadioButton, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 293  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 294  : 
; 295  : 	CWindow * pWin = new CRadioButton(po);

  00033	68 60 03 00 00	 push	 864			; 00000360H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterRa
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CRadioButton@UI@@QAE@PAU_object@@@Z ; UI::CRadioButton::CRadioButton
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterRa
$LN3@RegisterRa:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterRa:

; 296  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterRa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterRa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterRa
$LN29@RegisterRa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterRa:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 301  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 302  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterRa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterRa:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 60 03 00 00	 push	 864			; 00000360H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterRadioButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterRadioButton
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterButton, COMDAT
; _this$ = ecx

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 280  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 281  : 
; 282  : 	CWindow * pWin = new CButton(po);

  00033	68 60 03 00 00	 push	 864			; 00000360H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterBu
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CButton@UI@@QAE@PAU_object@@@Z ; UI::CButton::CButton
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterBu
$LN3@RegisterBu:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterBu:

; 283  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterBu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterBu

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterBu
$LN29@RegisterBu:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterBu:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 288  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 289  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterBu:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterBu:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 60 03 00 00	 push	 864			; 00000360H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterButton@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterButton
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterAniImageBox, COMDAT
; _this$ = ecx

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 267  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 268  : 
; 269  : 	CWindow * pWin = new CAniImageBox(po);

  00033	68 40 01 00 00	 push	 320			; 00000140H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterAn
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CAniImageBox@UI@@QAE@PAU_object@@@Z ; UI::CAniImageBox::CAniImageBox
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterAn
$LN3@RegisterAn:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterAn:

; 270  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterAn
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterAn

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterAn
$LN29@RegisterAn:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterAn:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 275  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 276  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterAn:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterAn:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 40 01 00 00	 push	 320			; 00000140H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterAniImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterAniImageBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterExpandedImageBox, COMDAT
; _this$ = ecx

; 253  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 254  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 255  : 
; 256  : 	CWindow * pWin = new CExpandedImageBox(po);

  00033	68 3c 01 00 00	 push	 316			; 0000013cH
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterEx
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CExpandedImageBox@UI@@QAE@PAU_object@@@Z ; UI::CExpandedImageBox::CExpandedImageBox
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterEx
$LN3@RegisterEx:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterEx:

; 257  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterEx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterEx

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterEx
$LN29@RegisterEx:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterEx:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 262  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 263  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterEx:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterEx:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 3c 01 00 00	 push	 316			; 0000013cH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterExpandedImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterExpandedImageBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterImageBox, COMDAT
; _this$ = ecx

; 227  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 228  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 229  : 
; 230  : 	CWindow * pWin = new CImageBox(po);

  00033	68 3c 01 00 00	 push	 316			; 0000013cH
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterIm
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CImageBox@UI@@QAE@PAU_object@@@Z ; UI::CImageBox::CImageBox
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterIm
$LN3@RegisterIm:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterIm:

; 231  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterIm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterIm

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterIm
$LN29@RegisterIm:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterIm:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 236  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 237  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterIm:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterIm:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 3c 01 00 00	 push	 316			; 0000013cH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterImageBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterImageBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterMarkBox, COMDAT
; _this$ = ecx

; 240  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 241  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 242  : 
; 243  : 	CWindow * pWin = new CMarkBox(po);

  00033	68 34 01 00 00	 push	 308			; 00000134H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterMa
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CMarkBox@UI@@QAE@PAU_object@@@Z ; UI::CMarkBox::CMarkBox
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterMa
$LN3@RegisterMa:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterMa:

; 244  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterMa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterMa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterMa
$LN29@RegisterMa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterMa:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 249  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 250  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterMa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterMa:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 34 01 00 00	 push	 308			; 00000134H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterMarkBox@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterMarkBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterTextLine, COMDAT
; _this$ = ecx

; 214  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 215  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 216  : 
; 217  : 	CWindow * pWin = new CTextLine(po);

  00033	68 e8 01 00 00	 push	 488			; 000001e8H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterTe
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CTextLine@UI@@QAE@PAU_object@@@Z ; UI::CTextLine::CTextLine
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterTe
$LN3@RegisterTe:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterTe:

; 218  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterTe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterTe
$LN29@RegisterTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterTe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 223  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 224  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterTe:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 e8 01 00 00	 push	 488			; 000001e8H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterTextLine@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterTextLine
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterGridSlotWindow, COMDAT
; _this$ = ecx

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 202  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 203  : 
; 204  : 	CWindow * pWin = new CGridSlotWindow(po);

  00033	68 bc 01 00 00	 push	 444			; 000001bcH
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterGr
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CGridSlotWindow::CGridSlotWindow
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterGr
$LN3@RegisterGr:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterGr:

; 205  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterGr
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterGr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterGr
$LN29@RegisterGr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterGr:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 210  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 211  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterGr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterGr:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 bc 01 00 00	 push	 444			; 000001bcH
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterGridSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterGridSlotWindow
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterSlotWindow, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 189  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 190  : 
; 191  : 	CWindow * pWin = new CSlotWindow(po);

  00033	68 a4 01 00 00	 push	 420			; 000001a4H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterSl
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterSl
$LN3@RegisterSl:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterSl:

; 192  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterSl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterSl

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterSl
$LN29@RegisterSl:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterSl:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 197  : 	return pWin;

  000bf	8b c7		 mov	 eax, edi

; 198  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterSl:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterSl:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 a4 01 00 00	 push	 420			; 000001a4H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterSlotWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterSlotWindow
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
_TEXT	SEGMENT
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_dwWndType$ = 12					; size = 4
_c_szLayer$ = 16					; size = 4
?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z PROC ; UI::CWindowManager::RegisterTypeWindow, COMDAT
; _this$ = ecx

; 175  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _dwWndType$[ebp]
  00030	8b 55 08	 mov	 edx, DWORD PTR _po$[ebp]
  00033	8b 75 10	 mov	 esi, DWORD PTR _c_szLayer$[ebp]

; 176  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 177  : 
; 178  : 	CWindow * pWin = __NewWindow(po, dwWndType);

  00036	50		 push	 eax
  00037	52		 push	 edx
  00038	e8 00 00 00 00	 call	 ?__NewWindow@CWindowManager@UI@@AAEPAVCWindow@2@PAU_object@@K@Z ; UI::CWindowManager::__NewWindow

; 179  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0003d	56		 push	 esi
  0003e	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00041	8b d8		 mov	 ebx, eax
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00052	50		 push	 eax
  00053	8d 8f a4 00 00
	00		 lea	 ecx, DWORD PTR [edi+164]
  00059	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  0005e	53		 push	 ebx
  0005f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00061	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00066	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
  00069	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0006c	72 28		 jb	 SHORT $LN16@RegisterTy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006e	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00071	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00072	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00074	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007a	72 10		 jb	 SHORT $LN26@RegisterTy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0007c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0007f	83 c1 23	 add	 ecx, 35			; 00000023H
  00082	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00084	83 c0 fc	 add	 eax, -4			; fffffffcH
  00087	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0008a	77 2a		 ja	 SHORT $LN35@RegisterTy
$LN26@RegisterTy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0008c	51		 push	 ecx
  0008d	52		 push	 edx
  0008e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00093	83 c4 08	 add	 esp, 8
$LN16@RegisterTy:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 184  : 	return pWin;

  00096	8b c3		 mov	 eax, ebx

; 185  : }

  00098	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a2	59		 pop	 ecx
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 0c 00	 ret	 12			; 0000000cH
$LN35@RegisterTy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b6	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN33@RegisterTy:
  000bb	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterTypeWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@KPBD@Z ENDP ; UI::CWindowManager::RegisterTypeWindow
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
_TEXT	SEGMENT
$T2 = -48						; size = 4
_c_szLayer$GSCopy$1$ = -44				; size = 4
$T3 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_po$ = 8						; size = 4
_c_szLayer$ = 12					; size = 4
?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z PROC ; UI::CWindowManager::RegisterWindow, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	8b 45 0c	 mov	 eax, DWORD PTR _c_szLayer$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _po$[ebp]

; 100  : 	assert(m_LayerWindowMap.end() != m_LayerWindowMap.find(c_szLayer));
; 101  : 
; 102  : 	CWindow * pWin = new CWindow(po);

  00033	68 30 01 00 00	 push	 304			; 00000130H
  00038	89 45 d4	 mov	 DWORD PTR _c_szLayer$GSCopy$1$[ebp], eax
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 d0	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	85 c0		 test	 eax, eax
  0004f	74 0c		 je	 SHORT $LN3@RegisterWi
  00051	56		 push	 esi
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow
  00059	8b f8		 mov	 edi, eax
  0005b	eb 02		 jmp	 SHORT $LN4@RegisterWi
$LN3@RegisterWi:
  0005d	33 ff		 xor	 edi, edi
$LN4@RegisterWi:

; 103  : 	m_LayerWindowMap[c_szLayer]->AddChild(pWin);

  0005f	ff 75 d4	 push	 DWORD PTR _c_szLayer$GSCopy$1$[ebp]
  00062	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00065	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00074	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0007b	50		 push	 eax
  0007c	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  00082	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAEAAPAVCWindow@UI@@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::operator[]
  00087	57		 push	 edi
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp+20]
  00092	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00095	72 28		 jb	 SHORT $LN19@RegisterWi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00097	8b 55 d8	 mov	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0009a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 10		 jb	 SHORT $LN29@RegisterWi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a8	83 c1 23	 add	 ecx, 35			; 00000023H
  000ab	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b3	77 2a		 ja	 SHORT $LN38@RegisterWi
$LN29@RegisterWi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b5	51		 push	 ecx
  000b6	52		 push	 edx
  000b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000bc	83 c4 08	 add	 esp, 8
$LN19@RegisterWi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 107  : 	return (pWin);

  000bf	8b c7		 mov	 eax, edi

; 108  : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	5f		 pop	 edi
  000cd	5e		 pop	 esi
  000ce	5b		 pop	 ebx
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN38@RegisterWi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@RegisterWi:
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$0:
  00000	68 30 01 00 00	 push	 304			; 00000130H
  00005	8b 45 d0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z$1:
  00012	8d 4d d8	 lea	 ecx, DWORD PTR $T3[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterWindow@CWindowManager@UI@@QAEPAVCWindow@2@PAU_object@@PBD@Z ENDP ; UI::CWindowManager::RegisterWindow
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z
_TEXT	SEGMENT
_pWindow$ = 8						; size = 4
?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z PROC ; UI::CWindowManager::SetPickAlways, COMDAT
; _this$ = ecx

; 582  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 583  : 	m_PickAlwaysWindowList.push_back(pWindow);

  00003	8d 45 08	 lea	 eax, DWORD PTR _pWindow$[ebp]
  00006	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?push_back@?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAEXABQAVCWindow@UI@@@Z ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::push_back

; 584  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?SetPickAlways@CWindowManager@UI@@QAEXPAVCWindow@2@@Z ENDP ; UI::CWindowManager::SetPickAlways
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z
_TEXT	SEGMENT
_pWindow$ = 8						; size = 4
_pParentWindow$ = 12					; size = 4
?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z PROC	; UI::CWindowManager::SetParent, COMDAT
; _this$ = ecx

; 554  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 555  : 	if (!pWindow)

  00004	8b 75 08	 mov	 esi, DWORD PTR _pWindow$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 2d		 je	 SHORT $LN1@SetParent

; 556  : 	{
; 557  : 		assert(!"CWindowManager::SetParent - There is no self window!");
; 558  : 		return;
; 559  : 	}
; 560  : 	if (!pParentWindow)

  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR _pParentWindow$[ebp]
  0000f	85 ff		 test	 edi, edi
  00011	74 24		 je	 SHORT $LN9@SetParent
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 115  : 	bool			HasParent()		{ return m_pParent ? true : false; }

  00013	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 566  : 	if (pWindow->HasParent())

  0001a	74 13		 je	 SHORT $LN4@SetParent

; 567  : 	{
; 568  : 		CWindow * pOldParentWindow = pWindow->GetParent();

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?GetParent@CWindow@UI@@QAEPAV12@XZ ; UI::CWindow::GetParent

; 569  : 
; 570  : 		if (pParentWindow == pOldParentWindow)

  00023	3b f8		 cmp	 edi, eax
  00025	74 10		 je	 SHORT $LN9@SetParent

; 571  : 		{
; 572  : 			return;
; 573  : 		}
; 574  : 
; 575  : 		pOldParentWindow->DeleteChild(pWindow);

  00027	56		 push	 esi
  00028	8b c8		 mov	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?DeleteChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::DeleteChild
$LN4@SetParent:

; 576  : 	}
; 577  : 
; 578  : 	pParentWindow->AddChild(pWindow);

  0002f	56		 push	 esi
  00030	8b cf		 mov	 ecx, edi
  00032	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
$LN9@SetParent:
  00037	5f		 pop	 edi
$LN1@SetParent:
  00038	5e		 pop	 esi

; 579  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?SetParent@CWindowManager@UI@@QAEXPAVCWindow@2@0@Z ENDP	; UI::CWindowManager::SetParent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdlib.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdlib.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdlib.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?IsDragging@CWindowManager@UI@@QAEHXZ
_TEXT	SEGMENT
?IsDragging@CWindowManager@UI@@QAEHXZ PROC		; UI::CWindowManager::IsDragging, COMDAT
; _this$ = ecx

; 493  : 	long ldy = abs(m_lMouseY - m_lPickedY);

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	2b 41 30	 sub	 eax, DWORD PTR [ecx+48]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdlib.h

; 365  :         return labs(_X);

  00006	99		 cdq
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 491  : {

  00007	56		 push	 esi
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdlib.h

; 365  :         return labs(_X);

  00008	8b f0		 mov	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 492  : 	long ldx = abs(m_lMouseX - m_lPickedX);

  0000a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0000d	2b 41 2c	 sub	 eax, DWORD PTR [ecx+44]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdlib.h

; 365  :         return labs(_X);

  00010	33 f2		 xor	 esi, edx
  00012	2b f2		 sub	 esi, edx
  00014	99		 cdq
  00015	33 c2		 xor	 eax, edx
  00017	2b c2		 sub	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 494  : 	if (ldx + ldy < 10)

  00019	03 f0		 add	 esi, eax
  0001b	33 c0		 xor	 eax, eax
  0001d	83 fe 0a	 cmp	 esi, 10			; 0000000aH
  00020	5e		 pop	 esi
  00021	0f 9d c0	 setge	 al

; 495  : 	{
; 496  : 		return FALSE;
; 497  : 	}
; 498  : 
; 499  : 	return TRUE;
; 500  : }

  00024	c3		 ret	 0
?IsDragging@CWindowManager@UI@@QAEHXZ ENDP		; UI::CWindowManager::IsDragging
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z
_TEXT	SEGMENT
_rx$ = 8						; size = 4
_ry$ = 12						; size = 4
?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z PROC	; UI::CWindowManager::GetMousePosition, COMDAT
; _this$ = ecx

; 879  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 880  : 	rx = m_lMouseX;

  00003	8b 45 08	 mov	 eax, DWORD PTR _rx$[ebp]
  00006	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00009	89 10		 mov	 DWORD PTR [eax], edx

; 881  : 	ry = m_lMouseY;

  0000b	8b 45 0c	 mov	 eax, DWORD PTR _ry$[ebp]
  0000e	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00011	89 08		 mov	 DWORD PTR [eax], ecx

; 882  : }

  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
?GetMousePosition@CWindowManager@UI@@QAEXAAJ0@Z ENDP	; UI::CWindowManager::GetMousePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z
_TEXT	SEGMENT
_poMouseHandler$ = 8					; size = 4
?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z PROC ; UI::CWindowManager::SetMouseHandler, COMDAT
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 95   : 	m_poMouseHandler = poMouseHandler;

  00003	8b 45 08	 mov	 eax, DWORD PTR _poMouseHandler$[ebp]
  00006	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 96   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetMouseHandler@CWindowManager@UI@@QAEXPAU_object@@@Z ENDP ; UI::CWindowManager::SetMouseHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetResolution@CWindowManager@UI@@QAEXHH@Z
_TEXT	SEGMENT
_hres$ = 8						; size = 4
_vres$ = 12						; size = 4
?SetResolution@CWindowManager@UI@@QAEXHH@Z PROC		; UI::CWindowManager::SetResolution, COMDAT
; _this$ = ecx

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 778  : 	if (hres <= 0 || vres <= 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _hres$[ebp]
  00006	85 d2		 test	 edx, edx
  00008	7e 0d		 jle	 SHORT $LN3@SetResolut
  0000a	8b 45 0c	 mov	 eax, DWORD PTR _vres$[ebp]
  0000d	85 c0		 test	 eax, eax
  0000f	7e 06		 jle	 SHORT $LN3@SetResolut

; 779  : 	{
; 780  : 		return;
; 781  : 	}
; 782  : 
; 783  : 	m_iHres = hres;

  00011	89 51 10	 mov	 DWORD PTR [ecx+16], edx

; 784  : 	m_iVres = vres;

  00014	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN3@SetResolut:

; 785  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetResolution@CWindowManager@UI@@QAEXHH@Z ENDP		; UI::CWindowManager::SetResolution
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z
_TEXT	SEGMENT
_lWidth$ = 8						; size = 4
_lHeight$ = 12						; size = 4
?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z PROC		; UI::CWindowManager::SetScreenSize, COMDAT
; _this$ = ecx

; 793  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 794  : 	m_lWidth	= lWidth;

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _lWidth$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 795  : 	m_lHeight	= lHeight;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _lHeight$[ebp]
  0000e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00011	89 4f 08	 mov	 DWORD PTR [edi+8], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00014	8b 87 a4 00 00
	00		 mov	 eax, DWORD PTR [edi+164]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0001a	8b 30		 mov	 esi, DWORD PTR [eax]
  0001c	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 797  : 	for (TLayerContainer::iterator itor = m_LayerWindowMap.begin(); itor != m_LayerWindowMap.end(); ++itor)

  0001e	74 57		 je	 SHORT $LN3@SetScreenS
$LL26@SetScreenS:

; 798  : 	{
; 799  : 		itor->second->SetSize(lWidth, lHeight);

  00020	51		 push	 ecx
  00021	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00024	53		 push	 ebx
  00025	e8 00 00 00 00	 call	 ?SetSize@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetSize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00031	74 21		 je	 SHORT $LN25@SetScreenS

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00033	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00036	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003a	75 14		 jne	 SHORT $LN58@SetScreenS
  0003c	0f 1f 40 00	 npad	 4
$LL23@SetScreenS:
  00040	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00043	75 0b		 jne	 SHORT $LN58@SetScreenS

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00045	8b f0		 mov	 esi, eax
  00047	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f0		 je	 SHORT $LL23@SetScreenS
$LN58@SetScreenS:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00050	8b f0		 mov	 esi, eax

; 58   :         } else {

  00052	eb 18		 jmp	 SHORT $LN30@SetScreenS
$LN25@SetScreenS:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00054	8b f0		 mov	 esi, eax

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00056	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00058	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0005c	75 0e		 jne	 SHORT $LN30@SetScreenS
  0005e	66 90		 npad	 2
$LL29@SetScreenS:
  00060	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00062	8b f1		 mov	 esi, ecx
  00064	8b c8		 mov	 ecx, eax
  00066	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006a	74 f4		 je	 SHORT $LL29@SetScreenS
$LN30@SetScreenS:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 797  : 	for (TLayerContainer::iterator itor = m_LayerWindowMap.begin(); itor != m_LayerWindowMap.end(); ++itor)

  0006c	8b 4d 0c	 mov	 ecx, DWORD PTR _lHeight$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  0006f	3b b7 a4 00 00
	00		 cmp	 esi, DWORD PTR [edi+164]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 797  : 	for (TLayerContainer::iterator itor = m_LayerWindowMap.begin(); itor != m_LayerWindowMap.end(); ++itor)

  00075	75 a9		 jne	 SHORT $LL26@SetScreenS
$LN3@SetScreenS:
  00077	5f		 pop	 edi

; 800  : 	}
; 801  : }

  00078	5e		 pop	 esi
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c2 08 00	 ret	 8
?SetScreenSize@CWindowManager@UI@@QAEXJJ@Z ENDP		; UI::CWindowManager::SetScreenSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?GetAspect@CWindowManager@UI@@QAEMXZ
_TEXT	SEGMENT
tv134 = -4						; size = 4
?GetAspect@CWindowManager@UI@@QAEMXZ PROC		; UI::CWindowManager::GetAspect, COMDAT
; _this$ = ecx

; 788  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	66 0f 6e 49 10	 movd	 xmm1, DWORD PTR [ecx+16]
  00009	66 0f 6e 41 0c	 movd	 xmm0, DWORD PTR [ecx+12]

; 789  : 	return (m_iHres) / float(m_iVres);

  0000e	0f 5b c9	 cvtdq2ps xmm1, xmm1
  00011	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00014	f3 0f 5e c8	 divss	 xmm1, xmm0
  00018	f3 0f 11 4d fc	 movss	 DWORD PTR tv134[ebp], xmm1
  0001d	d9 45 fc	 fld	 DWORD PTR tv134[ebp]

; 790  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?GetAspect@CWindowManager@UI@@QAEMXZ ENDP		; UI::CWindowManager::GetAspect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ?Destroy@CWindowManager@UI@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CWindowManager@UI@@QAEXXZ PROC			; UI::CWindowManager::Destroy, COMDAT
; _this$ = ecx

; 81   : 	__ClearReserveDeleteWindowList();

  00000	e9 00 00 00 00	 jmp	 ?__ClearReserveDeleteWindowList@CWindowManager@UI@@AAEXXZ ; UI::CWindowManager::__ClearReserveDeleteWindowList
?Destroy@CWindowManager@UI@@QAEXXZ ENDP			; UI::CWindowManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Stl.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Stl.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ??1CWindowManager@UI@@UAE@XZ
_TEXT	SEGMENT
__Head$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CWindowManager@UI@@UAE@XZ PROC			; UI::CWindowManager::~CWindowManager, COMDAT
; _this$ = ecx

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CWindowManager@UI@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx

; 68   : 	Py_DECREF(gs_poEmptyTuple);

  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?gs_poEmptyTuple@UI@@3PAU_object@@A
  0002e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CWindowManager@UI@@6B@
  00034	83 01 ff	 add	 DWORD PTR [ecx], -1
  00037	75 0c		 jne	 SHORT $LN2@CWindowMan
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	51		 push	 ecx
  0003d	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00040	ff d0		 call	 eax
  00042	83 c4 04	 add	 esp, 4
$LN2@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00045	8b bb a4 00 00
	00		 mov	 edi, DWORD PTR [ebx+164]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 70   : 	stl_wipe_second(m_LayerWindowMap);

  0004b	8d 93 a4 00 00
	00		 lea	 edx, DWORD PTR [ebx+164]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00051	8b 37		 mov	 esi, DWORD PTR [edi]
  00053	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Stl.h

; 75   : 	for (auto i = container.begin(); i != container.end(); ++i)

  00055	74 5b		 je	 SHORT $LN12@CWindowMan
$LL37@CWindowMan:

; 76   : 	{
; 77   : 		delete i->second;

  00057	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0005a	85 c9		 test	 ecx, ecx
  0005c	74 0c		 je	 SHORT $LN11@CWindowMan
  0005e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00060	6a 01		 push	 1
  00062	ff 10		 call	 DWORD PTR [eax]
  00064	8d 93 a4 00 00
	00		 lea	 edx, DWORD PTR [ebx+164]
$LN11@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0006a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00071	74 21		 je	 SHORT $LN36@CWindowMan

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00073	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00076	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0007a	75 14		 jne	 SHORT $LN35@CWindowMan
  0007c	0f 1f 40 00	 npad	 4
$LL34@CWindowMan:
  00080	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00083	75 0b		 jne	 SHORT $LN35@CWindowMan

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00085	8b f0		 mov	 esi, eax
  00087	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008e	74 f0		 je	 SHORT $LL34@CWindowMan
$LN35@CWindowMan:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00090	8b f0		 mov	 esi, eax

; 58   :         } else {

  00092	eb 18		 jmp	 SHORT $LN449@CWindowMan
$LN36@CWindowMan:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00094	8b f0		 mov	 esi, eax

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00096	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00098	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0009c	75 0e		 jne	 SHORT $LN449@CWindowMan
  0009e	66 90		 npad	 2
$LL40@CWindowMan:
  000a0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  000a2	8b f1		 mov	 esi, ecx
  000a4	8b c8		 mov	 ecx, eax
  000a6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000aa	74 f4		 je	 SHORT $LL40@CWindowMan
$LN449@CWindowMan:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000ac	8b 3a		 mov	 edi, DWORD PTR [edx]

; 233  :         return this->_Ptr == _Right._Ptr;

  000ae	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Stl.h

; 75   : 	for (auto i = container.begin(); i != container.end(); ++i)

  000b0	75 a5		 jne	 SHORT $LL37@CWindowMan
$LN12@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000b2	ff 77 04	 push	 DWORD PTR [edi+4]
  000b5	8b ca		 mov	 ecx, edx
  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  000bd	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1359 :         _Head->_Left    = _Head;

  000c0	89 3f		 mov	 DWORD PTR [edi], edi

; 1360 :         _Head->_Right   = _Head;

  000c2	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1361 :         _Scary->_Mysize = 0;

  000c5	8d bb a4 00 00
	00		 lea	 edi, DWORD PTR [ebx+164]
  000cb	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000d2	8b cf		 mov	 ecx, edi
  000d4	8b 37		 mov	 esi, DWORD PTR [edi]
  000d6	ff 76 04	 push	 DWORD PTR [esi+4]
  000d9	57		 push	 edi
  000da	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  000df	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  000e2	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  000e4	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  000e7	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  000ee	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [ebx+156]

; 325  :         _Head->_Prev->_Next = nullptr;

  000f4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000f7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  000fd	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  000ff	85 c0		 test	 eax, eax
  00101	74 13		 je	 SHORT $LN65@CWindowMan
$LL66@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  00103	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00105	6a 0c		 push	 12			; 0000000cH
  00107	50		 push	 eax
  00108	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0010d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00110	8b c6		 mov	 eax, esi
  00112	85 f6		 test	 esi, esi
  00114	75 ed		 jne	 SHORT $LL66@CWindowMan
$LN65@CWindowMan:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00116	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [ebx+156]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 73   : 	m_KeyCaptureWindowMap.clear();

  0011c	8d bb 80 00 00
	00		 lea	 edi, DWORD PTR [ebx+128]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00122	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00124	8b 83 9c 00 00
	00		 mov	 eax, DWORD PTR [ebx+156]
  0012a	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  0012d	c7 83 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+160], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  00137	8b 07		 mov	 eax, DWORD PTR [edi]
  00139	89 45 f0	 mov	 DWORD PTR __Head$1$[ebp], eax

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0013c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0013f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00143	75 23		 jne	 SHORT $LN98@CWindowMan
$LL97@CWindowMan:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00145	ff 76 08	 push	 DWORD PTR [esi+8]
  00148	8b cf		 mov	 ecx, edi
  0014a	57		 push	 edi
  0014b	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBHPAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBHPAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<int const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<int const ,UI::CWindow *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00150	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00152	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00154	6a 18		 push	 24			; 00000018H
  00156	50		 push	 eax
  00157	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0015c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0015f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00163	74 e0		 je	 SHORT $LL97@CWindowMan
  00165	8b 45 f0	 mov	 eax, DWORD PTR __Head$1$[ebp]
$LN98@CWindowMan:

; 1358 :         _Head->_Parent  = _Head;

  00168	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1359 :         _Head->_Left    = _Head;

  0016b	89 00		 mov	 DWORD PTR [eax], eax

; 1360 :         _Head->_Right   = _Head;

  0016d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 1361 :         _Scary->_Mysize = 0;

  00170	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 75   : 	delete m_pRootWindow;

  00177	8b 8b 98 00 00
	00		 mov	 ecx, DWORD PTR [ebx+152]
  0017d	85 c9		 test	 ecx, ecx
  0017f	74 06		 je	 SHORT $LN8@CWindowMan
  00181	8b 01		 mov	 eax, DWORD PTR [ecx]
  00183	6a 01		 push	 1
  00185	ff 10		 call	 DWORD PTR [eax]
$LN8@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00187	8d b3 a4 00 00
	00		 lea	 esi, DWORD PTR [ebx+164]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 76   : 	m_pRootWindow = NULL;

  0018d	c7 83 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+152], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00197	8b 06		 mov	 eax, DWORD PTR [esi]
  00199	8b ce		 mov	 ecx, esi
  0019b	ff 70 04	 push	 DWORD PTR [eax+4]
  0019e	56		 push	 esi
  0019f	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001a4	6a 2c		 push	 44			; 0000002cH
  001a6	ff 36		 push	 DWORD PTR [esi]
  001a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  001ad	8b 8b 9c 00 00
	00		 mov	 ecx, DWORD PTR [ebx+156]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001b3	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  001b6	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001b9	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  001bf	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  001c1	85 c0		 test	 eax, eax
  001c3	74 13		 je	 SHORT $LN163@CWindowMan
$LL164@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  001c5	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001c7	6a 0c		 push	 12			; 0000000cH
  001c9	50		 push	 eax
  001ca	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001cf	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  001d2	8b c6		 mov	 eax, esi
  001d4	85 f6		 test	 esi, esi
  001d6	75 ed		 jne	 SHORT $LL164@CWindowMan
$LN163@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001d8	6a 0c		 push	 12			; 0000000cH
  001da	ff b3 9c 00 00
	00		 push	 DWORD PTR [ebx+156]
  001e0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  001e5	8b 8b 90 00 00
	00		 mov	 ecx, DWORD PTR [ebx+144]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001eb	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  001ee	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001f1	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  001f7	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  001f9	85 c0		 test	 eax, eax
  001fb	74 16		 je	 SHORT $LN218@CWindowMan
  001fd	0f 1f 00	 npad	 3
$LL219@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  00200	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00202	6a 0c		 push	 12			; 0000000cH
  00204	50		 push	 eax
  00205	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0020d	8b c6		 mov	 eax, esi
  0020f	85 f6		 test	 esi, esi
  00211	75 ed		 jne	 SHORT $LL219@CWindowMan
$LN218@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00213	6a 0c		 push	 12			; 0000000cH
  00215	ff b3 90 00 00
	00		 push	 DWORD PTR [ebx+144]
  0021b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00220	8b 8b 88 00 00
	00		 mov	 ecx, DWORD PTR [ebx+136]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00226	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  00229	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0022c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00232	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00234	85 c0		 test	 eax, eax
  00236	74 13		 je	 SHORT $LN273@CWindowMan
$LL274@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  00238	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0023a	6a 0c		 push	 12			; 0000000cH
  0023c	50		 push	 eax
  0023d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00242	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00245	8b c6		 mov	 eax, esi
  00247	85 f6		 test	 esi, esi
  00249	75 ed		 jne	 SHORT $LL274@CWindowMan
$LN273@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0024b	6a 0c		 push	 12			; 0000000cH
  0024d	ff b3 88 00 00
	00		 push	 DWORD PTR [ebx+136]
  00253	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00258	83 c4 08	 add	 esp, 8
  0025b	8b cf		 mov	 ecx, edi
  0025d	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >::~_Tree<std::_Tmap_traits<int,UI::CWindow *,std::less<int>,std::allocator<std::pair<int const ,UI::CWindow *> >,0> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00262	8b 4b 68	 mov	 ecx, DWORD PTR [ebx+104]

; 325  :         _Head->_Prev->_Next = nullptr;

  00265	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00268	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0026e	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00270	85 c0		 test	 eax, eax
  00272	74 13		 je	 SHORT $LN331@CWindowMan
$LL332@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  00274	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00276	6a 0c		 push	 12			; 0000000cH
  00278	50		 push	 eax
  00279	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0027e	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00281	8b c6		 mov	 eax, esi
  00283	85 f6		 test	 esi, esi
  00285	75 ed		 jne	 SHORT $LL332@CWindowMan
$LN331@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00287	6a 0c		 push	 12			; 0000000cH
  00289	ff 73 68	 push	 DWORD PTR [ebx+104]
  0028c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00291	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00294	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  00297	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0029a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  002a0	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002a2	85 c0		 test	 eax, eax
  002a4	74 13		 je	 SHORT $LN386@CWindowMan
$LL387@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  002a6	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002a8	6a 0c		 push	 12			; 0000000cH
  002aa	50		 push	 eax
  002ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b0	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002b3	8b c6		 mov	 eax, esi
  002b5	85 f6		 test	 esi, esi
  002b7	75 ed		 jne	 SHORT $LL387@CWindowMan
$LN386@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002b9	6a 0c		 push	 12			; 0000000cH
  002bb	ff 73 5c	 push	 DWORD PTR [ebx+92]
  002be	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 19   : 	{

  002c3	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7?$CSingleton@VCWindowManager@UI@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002c9	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 21   : 		ms_singleton = 0;

  002cc	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, 0 ; CSingleton<UI::CWindowManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 77   : }

  002d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e0	59		 pop	 ecx
  002e1	5f		 pop	 edi
  002e2	5e		 pop	 esi
  002e3	5b		 pop	 ebx
  002e4	8b e5		 mov	 esp, ebp
  002e6	5d		 pop	 ebp
  002e7	c3		 ret	 0
  002e8	cc		 int	 3
  002e9	cc		 int	 3
  002ea	cc		 int	 3
  002eb	cc		 int	 3
  002ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CWindowManager@UI@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CWindowManager@UI@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CWindowManager@UI@@UAE@XZ ENDP			; UI::CWindowManager::~CWindowManager
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp
;	COMDAT ??0CWindowManager@UI@@QAE@XZ
_TEXT	SEGMENT
__Result$2 = -96					; size = 8
$T3 = -88						; size = 4
_this$GSCopy$ = -84					; size = 4
__Op$4 = -80						; size = 8
_layer$1$ = -72						; size = 4
__Where$1$ = -68					; size = 4
_this$ = -68						; size = 4
_this$ = -68						; size = 4
$T5 = -68						; size = 4
_this$ = -68						; size = 4
$T6 = -64						; size = 28
_layerTbl$ = -36					; size = 20
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0CWindowManager@UI@@QAE@XZ PROC			; UI::CWindowManager::CWindowManager, COMDAT
; _this$ = ecx

; 43   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CWindowManager@UI@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d bc	 mov	 DWORD PTR _this$[ebp], ebx
  00030	89 5d ac	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00033	89 1d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, ebx ; CSingleton<UI::CWindowManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  00039	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7CWindowManager@UI@@6B@

; 37   : 	m_iVres(0),

  0003f	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0

; 36   : 	m_iHres(0),

  00046	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 39   : 	m_bOnceIgnoreMouseLeftButtonUpEventFlag(FALSE),

  0004d	c7 43 34 00 00
	00 00		 mov	 DWORD PTR [ebx+52], 0

; 38   : 	m_iIgnoreIMEReturnEndTime(0),

  00054	c7 43 3c 00 00
	00 00		 mov	 DWORD PTR [ebx+60], 0

; 35   : 	m_poMouseHandler(NULL),

  0005b	c7 43 40 00 00
	00 00		 mov	 DWORD PTR [ebx+64], 0

; 31   : 	m_bAttachingFlag(FALSE),

  00062	c7 43 44 00 00
	00 00		 mov	 DWORD PTR [ebx+68], 0

; 32   : 	m_dwAttachingType(0),

  00069	c7 43 48 00 00
	00 00		 mov	 DWORD PTR [ebx+72], 0

; 33   : 	m_dwAttachingIndex(0),

  00070	c7 43 4c 00 00
	00 00		 mov	 DWORD PTR [ebx+76], 0

; 34   : 	m_dwAttachingSlotNumber(0),

  00077	c7 43 50 00 00
	00 00		 mov	 DWORD PTR [ebx+80], 0

; 25   : 	m_pActiveWindow(NULL),

  0007e	c7 43 58 00 00
	00 00		 mov	 DWORD PTR [ebx+88], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00085	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0008e	c7 43 5c 00 00
	00 00		 mov	 DWORD PTR [ebx+92], 0
  00095	c7 43 60 00 00
	00 00		 mov	 DWORD PTR [ebx+96], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0009c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  000a1	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  000a3	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  000a6	89 43 5c	 mov	 DWORD PTR [ebx+92], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 30   : 	m_pLockWindow(NULL),

  000a9	c7 43 64 00 00
	00 00		 mov	 DWORD PTR [ebx+100], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000b0	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  000b2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  000b6	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [ebx+104], 0
  000bd	c7 43 6c 00 00
	00 00		 mov	 DWORD PTR [ebx+108], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000c4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  000c9	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  000cb	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  000ce	89 43 68	 mov	 DWORD PTR [ebx+104], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  000d1	8d b3 80 00 00
	00		 lea	 esi, DWORD PTR [ebx+128]
  000d7	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [ebx+112], 0
  000de	c7 43 74 00 00
	00 00		 mov	 DWORD PTR [ebx+116], 0
  000e5	c7 43 78 00 00
	00 00		 mov	 DWORD PTR [ebx+120], 0
  000ec	c7 43 7c 00 00
	00 00		 mov	 DWORD PTR [ebx+124], 0
  000f3	89 75 bc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000f6	6a 18		 push	 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  000f8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000fc	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00102	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00109	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0010e	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00110	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00113	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00116	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0011c	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0011e	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  00120	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00124	c7 83 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+136], 0
  0012e	c7 83 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+140], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00138	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0013d	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0013f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00142	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00148	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  0014a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0014e	c7 83 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+144], 0
  00158	c7 83 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+148], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00162	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00167	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00169	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  0016c	89 83 90 00 00
	00		 mov	 DWORD PTR [ebx+144], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00172	6a 0c		 push	 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  00174	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00178	c7 83 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+156], 0
  00182	c7 83 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+160], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0018c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00191	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00193	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00196	89 83 9c 00 00
	00		 mov	 DWORD PTR [ebx+156], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 43   : {

  0019c	8d b3 a4 00 00
	00		 lea	 esi, DWORD PTR [ebx+164]
  001a2	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001a6	89 75 bc	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001a9	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001af	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001b1	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  001bd	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  001bf	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  001c2	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  001c5	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  001cb	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 44   : 	m_pRootWindow = new CWindow(NULL);

  001cd	68 30 01 00 00	 push	 304			; 00000130H
  001d2	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  001d6	c7 83 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+172], 0
  001e0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001e5	83 c4 20	 add	 esp, 32			; 00000020H
  001e8	89 45 bc	 mov	 DWORD PTR $T5[ebp], eax
  001eb	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  001ef	85 c0		 test	 eax, eax
  001f1	74 0b		 je	 SHORT $LN6@CWindowMan
  001f3	6a 00		 push	 0
  001f5	8b c8		 mov	 ecx, eax
  001f7	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow
  001fc	eb 02		 jmp	 SHORT $LN7@CWindowMan
$LN6@CWindowMan:
  001fe	33 c0		 xor	 eax, eax
$LN7@CWindowMan:

; 45   : 	m_pRootWindow->SetName("root");

  00200	68 00 00 00 00	 push	 OFFSET ??_C@_04NBFCGMPH@root@
  00205	8b c8		 mov	 ecx, eax
  00207	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0020b	89 83 98 00 00
	00		 mov	 DWORD PTR [ebx+152], eax
  00211	e8 00 00 00 00	 call	 ?SetName@CWindow@UI@@QAEXPBD@Z ; UI::CWindow::SetName

; 46   : 	m_pRootWindow->Show();

  00216	8b 8b 98 00 00
	00		 mov	 ecx, DWORD PTR [ebx+152]
  0021c	e8 00 00 00 00	 call	 ?Show@CWindow@UI@@QAEXXZ ; UI::CWindow::Show

; 50   : 	for (DWORD layer = 0; layer < sizeof(layerTbl) / sizeof(layerTbl[0]); layer++)

  00221	33 ff		 xor	 edi, edi
  00223	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp], OFFSET ??_C@_04FOKBGDA@GAME@
  0022a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+4], OFFSET ??_C@_09CHAIFIBB@UI_BOTTOM@
  00231	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+8], OFFSET ??_C@_02ELHCDOPK@UI@
  00238	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+12], OFFSET ??_C@_08MLMBKENF@TOP_MOST@
  0023f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _layerTbl$[ebp+16], OFFSET ??_C@_07PCOOAIOD@CURTAIN@
  00246	89 7d b8	 mov	 DWORD PTR _layer$1$[ebp], edi
  00249	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@CWindowMan:

; 52   : 		CWindow * pLayer = new CLayer(NULL);

  00250	68 30 01 00 00	 push	 304			; 00000130H
  00255	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0025a	8b f0		 mov	 esi, eax
  0025c	83 c4 04	 add	 esp, 4
  0025f	89 75 a8	 mov	 DWORD PTR $T3[ebp], esi
  00262	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00266	85 f6		 test	 esi, esi
  00268	74 11		 je	 SHORT $LN8@CWindowMan
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h

; 287  : 	CLayer(PyObject * ppyObject) : CWindow(ppyObject) {}

  0026a	6a 00		 push	 0
  0026c	8b ce		 mov	 ecx, esi
  0026e	e8 00 00 00 00	 call	 ??0CWindow@UI@@QAE@PAU_object@@@Z ; UI::CWindow::CWindow
  00273	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLayer@UI@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 52   : 		CWindow * pLayer = new CLayer(NULL);

  00279	eb 02		 jmp	 SHORT $LN9@CWindowMan
$LN8@CWindowMan:
  0027b	33 f6		 xor	 esi, esi
$LN9@CWindowMan:

; 53   : 		pLayer->SetName(layerTbl[layer]);

  0027d	8b 7c bd dc	 mov	 edi, DWORD PTR _layerTbl$[ebp+edi*4]
  00281	8b ce		 mov	 ecx, esi
  00283	57		 push	 edi
  00284	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00288	e8 00 00 00 00	 call	 ?SetName@CWindow@UI@@QAEXPBD@Z ; UI::CWindow::SetName

; 54   : 		pLayer->Show();

  0028d	8b ce		 mov	 ecx, esi
  0028f	e8 00 00 00 00	 call	 ?Show@CWindow@UI@@QAEXXZ ; UI::CWindow::Show
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00294	57		 push	 edi
  00295	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  00298	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0029d	89 75 d8	 mov	 DWORD PTR $T6[ebp+24], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1230 :         const auto _Result = _Emplace(_STD move(_Val));

  002a0	8d 45 c0	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 55   : 		m_LayerWindowMap.insert(TLayerContainer::value_type(layerTbl[layer], pLayer));

  002a3	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1230 :         const auto _Result = _Emplace(_STD move(_Val));

  002a7	50		 push	 eax
  002a8	8d 45 a0	 lea	 eax, DWORD PTR __Result$2[ebp]
  002ab	50		 push	 eax
  002ac	8d 8b a4 00 00
	00		 lea	 ecx, DWORD PTR [ebx+164]
  002b2	e8 00 00 00 00	 call	 ??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,UI::CWindow *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >,0> >::_Emplace<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,UI::CWindow *> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  002b7	8b 4d d4	 mov	 ecx, DWORD PTR $T6[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 55   : 		m_LayerWindowMap.insert(TLayerContainer::value_type(layerTbl[layer], pLayer));

  002ba	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  002be	83 f9 10	 cmp	 ecx, 16			; 00000010H
  002c1	72 2c		 jb	 SHORT $LN49@CWindowMan
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002c3	8b 55 c0	 mov	 edx, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  002c6	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002c7	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002c9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002cf	72 14		 jb	 SHORT $LN59@CWindowMan

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002d1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002d4	83 c1 23	 add	 ecx, 35			; 00000023H
  002d7	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002d9	83 c0 fc	 add	 eax, -4			; fffffffcH
  002dc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002df	0f 87 23 01 00
	00		 ja	 $LN56@CWindowMan
$LN59@CWindowMan:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002e5	51		 push	 ecx
  002e6	52		 push	 edx
  002e7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ec	83 c4 08	 add	 esp, 8
$LN49@CWindowMan:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 56   : 		m_pRootWindow->AddChild(pLayer);

  002ef	8b 8b 98 00 00
	00		 mov	 ecx, DWORD PTR [ebx+152]
  002f5	56		 push	 esi
  002f6	e8 00 00 00 00	 call	 ?AddChild@CWindow@UI@@QAEXPAV12@@Z ; UI::CWindow::AddChild
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  002fb	81 bb a0 00 00
	00 55 55 55 15	 cmp	 DWORD PTR [ebx+160], 357913941 ; 15555555H

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00305	8d bb 9c 00 00
	00		 lea	 edi, DWORD PTR [ebx+156]
  0030b	8b 07		 mov	 eax, DWORD PTR [edi]
  0030d	89 45 bc	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1012 :         if (_Mysize == max_size()) {

  00310	0f 84 e8 00 00
	00		 je	 $LN367@CWindowMan
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00316	89 7d b0	 mov	 DWORD PTR __Op$4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  00319	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0031b	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0031f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00326	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  0032b	8b 55 bc	 mov	 edx, DWORD PTR __Where$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0032e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 587  :     }

  00331	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7

; 603  :         this->_Ptr            = pointer{};

  00335	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0033c	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 1017 :         ++_Mysize;

  0033f	ff 47 04	 inc	 DWORD PTR [edi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00342	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 50   : 	for (DWORD layer = 0; layer < sizeof(layerTbl) / sizeof(layerTbl[0]); layer++)

  00345	8b 7d b8	 mov	 edi, DWORD PTR _layer$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00348	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 50   : 	for (DWORD layer = 0; layer < sizeof(layerTbl) / sizeof(layerTbl[0]); layer++)

  0034a	47		 inc	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0034b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 604  :         _Insert_before->_Prev = _Result;

  0034e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  00351	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 50   : 	for (DWORD layer = 0; layer < sizeof(layerTbl) / sizeof(layerTbl[0]); layer++)

  00353	89 7d b8	 mov	 DWORD PTR _layer$1$[ebp], edi
  00356	83 ff 05	 cmp	 edi, 5
  00359	0f 82 f1 fe ff
	ff		 jb	 $LL4@CWindowMan
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0035f	8b 4b 5c	 mov	 ecx, DWORD PTR [ebx+92]

; 325  :         _Head->_Prev->_Next = nullptr;

  00362	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00365	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0036b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0036d	85 c0		 test	 eax, eax
  0036f	74 13		 je	 SHORT $LN127@CWindowMan
$LL128@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  00371	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00373	6a 0c		 push	 12			; 0000000cH
  00375	50		 push	 eax
  00376	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0037b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0037e	8b c6		 mov	 eax, esi
  00380	85 f6		 test	 esi, esi
  00382	75 ed		 jne	 SHORT $LL128@CWindowMan
$LN127@CWindowMan:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00384	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  00387	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00389	8b 43 5c	 mov	 eax, DWORD PTR [ebx+92]
  0038c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  0038f	c7 43 60 00 00
	00 00		 mov	 DWORD PTR [ebx+96], 0

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00396	8b 4b 68	 mov	 ecx, DWORD PTR [ebx+104]

; 325  :         _Head->_Prev->_Next = nullptr;

  00399	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0039c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  003a2	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  003a4	85 c0		 test	 eax, eax
  003a6	74 13		 je	 SHORT $LN159@CWindowMan
$LL160@CWindowMan:

; 329  :             _Pnext = _Pnode->_Next;

  003a8	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  003aa	6a 0c		 push	 12			; 0000000cH
  003ac	50		 push	 eax
  003ad	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003b2	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  003b5	8b c6		 mov	 eax, esi
  003b7	85 f6		 test	 esi, esi
  003b9	75 ed		 jne	 SHORT $LL160@CWindowMan
$LN159@CWindowMan:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  003bb	8b 4b 68	 mov	 ecx, DWORD PTR [ebx+104]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 63   : 	gs_poEmptyTuple = Py_BuildValue("()");

  003be	68 00 00 00 00	 push	 OFFSET ??_C@_02HCKGKOFO@?$CI?$CJ@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  003c3	89 09		 mov	 DWORD PTR [ecx], ecx

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  003c5	8b 4b 68	 mov	 ecx, DWORD PTR [ebx+104]
  003c8	89 49 04	 mov	 DWORD PTR [ecx+4], ecx

; 1490 :         _My_data._Mysize        = 0;

  003cb	c7 43 6c 00 00
	00 00		 mov	 DWORD PTR [ebx+108], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindowManager.cpp

; 63   : 	gs_poEmptyTuple = Py_BuildValue("()");

  003d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  003d8	a3 00 00 00 00	 mov	 DWORD PTR ?gs_poEmptyTuple@UI@@3PAU_object@@A, eax
  003dd	83 c4 04	 add	 esp, 4

; 64   : }

  003e0	8b c3		 mov	 eax, ebx
  003e2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003e5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ec	59		 pop	 ecx
  003ed	5f		 pop	 edi
  003ee	5e		 pop	 esi
  003ef	5b		 pop	 ebx
  003f0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003f3	33 cd		 xor	 ecx, ebp
  003f5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003fa	8b e5		 mov	 esp, ebp
  003fc	5d		 pop	 ebp
  003fd	c3		 ret	 0
$LN367@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1013 :             _Xlength_error("list too long");

  003fe	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00403	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN56@CWindowMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00408	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN387@CWindowMan:
  0040d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$0:
  00000	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ ; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$1:
  00008	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	83 c1 5c	 add	 ecx, 92			; 0000005cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$2:
  00013	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00016	83 c1 68	 add	 ecx, 104		; 00000068H
  00019	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$3:
  0001e	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00021	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00027	e9 00 00 00 00	 jmp	 ??1?$map@HPAVCWindow@UI@@U?$less@H@std@@V?$allocator@U?$pair@$$CBHPAVCWindow@UI@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$4:
  0002c	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0002f	81 c1 88 00 00
	00		 add	 ecx, 136		; 00000088H
  00035	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$5:
  0003a	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0003d	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00043	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$6:
  00048	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0004b	81 c1 9c 00 00
	00		 add	 ecx, 156		; 0000009cH
  00051	e9 00 00 00 00	 jmp	 ??1?$list@PAVCWindow@UI@@V?$allocator@PAVCWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CWindow *,std::allocator<UI::CWindow *> >::~list<UI::CWindow *,std::allocator<UI::CWindow *> >
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$7:
  00056	8b 4d ac	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00059	81 c1 a4 00 00
	00		 add	 ecx, 164		; 000000a4H
  0005f	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$8:
  00064	68 30 01 00 00	 push	 304			; 00000130H
  00069	8b 45 bc	 mov	 eax, DWORD PTR $T5[ebp]
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
  00075	c3		 ret	 0
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$9:
  00076	68 30 01 00 00	 push	 304			; 00000130H
  0007b	8b 45 a8	 mov	 eax, DWORD PTR $T3[ebp]
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00084	83 c4 08	 add	 esp, 8
  00087	c3		 ret	 0
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$10:
  00088	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  0008b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCWindow@UI@@@std@@QAE@XZ
__unwindfunclet$??0CWindowManager@UI@@QAE@XZ$15:
  00090	8d 4d b0	 lea	 ecx, DWORD PTR __Op$4[ebp]
  00093	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CWindow *,void *> > >
  00098	cc		 int	 3
  00099	cc		 int	 3
  0009a	cc		 int	 3
  0009b	cc		 int	 3
  0009c	cc		 int	 3
__ehhandler$??0CWindowManager@UI@@QAE@XZ:
  0009d	90		 npad	 1
  0009e	90		 npad	 1
  0009f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000a3	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000a6	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  000a9	33 c8		 xor	 ecx, eax
  000ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b0	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000b3	33 c8		 xor	 ecx, eax
  000b5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ba	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CWindowManager@UI@@QAE@XZ
  000bf	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CWindowManager@UI@@QAE@XZ ENDP			; UI::CWindowManager::CWindowManager
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z PROC	; CSingleton<UI::CWindowManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCWindowManager@UI@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, 0 ; CSingleton<UI::CWindowManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCWindowManager@UI@@@@UAEPAXI@Z ENDP	; CSingleton<UI::CWindowManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ PROC	; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCWindowManager@UI@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A, 0 ; CSingleton<UI::CWindowManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCWindowManager@UI@@@@UAE@XZ ENDP	; CSingleton<UI::CWindowManager>::~CSingleton<UI::CWindowManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2674 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 415  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2740 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memmove

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00054	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4885 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN42@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN42@basic_stri
$LN30@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN42@basic_stri
$LN31@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN42@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN40@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
