; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\Distribute\PythonGraphicTextModule.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?initgrpText@@YAXXZ				; initgrpText
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
PUBLIC	?grpTextGenerate@@YAPAU_object@@PAU1@0@Z	; grpTextGenerate
PUBLIC	?grpTextDestroy@@YAPAU_object@@PAU1@0@Z		; grpTextDestroy
PUBLIC	?grpTextGetSize@@YAPAU_object@@PAU1@0@Z		; grpTextGetSize
PUBLIC	?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z	; grpTextSetPosition
PUBLIC	?grpTextSetText@@YAPAU_object@@PAU1@0@Z		; grpTextSetText
PUBLIC	?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z	; grpTextSetSecret
PUBLIC	?grpTextOutline@@YAPAU_object@@PAU1@0@Z		; grpTextOutline
PUBLIC	?grpTextGetText@@YAPAU_object@@PAU1@0@Z		; grpTextGetText
PUBLIC	?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z	; grpTextSetFontName
PUBLIC	?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z	; grpTextSetFontColor
PUBLIC	?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z	; grpTextSetOutLineColor
PUBLIC	?grpTextRender@@YAPAU_object@@PAU1@0@Z		; grpTextRender
PUBLIC	?grpTextUpdate@@YAPAU_object@@PAU1@0@Z		; grpTextUpdate
PUBLIC	?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z	; grpTextShowCursor
PUBLIC	?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z	; grpTextHideCursor
PUBLIC	?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z	; grpSetHorizontalAlign
PUBLIC	?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z	; grpSetVerticalAlign
PUBLIC	?grpSetMax@@YAPAU_object@@PAU1@0@Z		; grpSetMax
PUBLIC	?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z ; grpGetSplitingTextLineCount
PUBLIC	?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z	; grpGetSplitingTextLine
PUBLIC	?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z ; grpTextPixelPositionToCharacterPosition
PUBLIC	?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z	; ConvertMoneyText
PUBLIC	??$__std_find_trivial@DD@@YAPADPAD0D@Z		; __std_find_trivial<char,char>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@		; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_04FAHLGLIA@?4fnt@				; `string'
PUBLIC	??_C@_01OCOKONAJ@L@				; `string'
PUBLIC	??_C@_06LMAGPFNF@Update@			; `string'
PUBLIC	??_C@_06EPLDPNDB@Render@			; `string'
PUBLIC	??_C@_08PDEEPOLG@Generate@			; `string'
PUBLIC	??_C@_07BDCAJABG@Destroy@			; `string'
PUBLIC	??_C@_0M@MCELKPNO@SetFontName@			; `string'
PUBLIC	??_C@_0N@MKCFOAAE@SetFontColor@			; `string'
PUBLIC	??_C@_0BA@MNDFNKJH@SetOutLineColor@		; `string'
PUBLIC	??_C@_09CAFHEMDD@SetSecret@			; `string'
PUBLIC	??_C@_0L@HBNEJDMM@SetOutline@			; `string'
PUBLIC	??_C@_07NIJDBDAG@SetText@			; `string'
PUBLIC	??_C@_07CAGCCMNH@GetText@			; `string'
PUBLIC	??_C@_07IIMJLIAB@GetSize@			; `string'
PUBLIC	??_C@_0M@GKIFPNAD@SetPosition@			; `string'
PUBLIC	??_C@_0L@BIENLPGM@ShowCursor@			; `string'
PUBLIC	??_C@_0L@MGJDDPFG@HideCursor@			; `string'
PUBLIC	??_C@_0BD@FCLDCEMA@SetHorizontalAlign@		; `string'
PUBLIC	??_C@_0BB@NKHPOFIC@SetVerticalAlign@		; `string'
PUBLIC	??_C@_06ODEINJEE@SetMax@			; `string'
PUBLIC	??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@	; `string'
PUBLIC	??_C@_0BE@NHLLEHMO@GetSplitingTextLine@		; `string'
PUBLIC	??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@ ; `string'
PUBLIC	??_C@_0BB@KPFHIMDK@ConvertMoneyText@		; `string'
PUBLIC	??_C@_07OAPMKONH@grpText@			; `string'
PUBLIC	__real@43e0000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	___std_find_trivial_1@12:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__PyTuple_Size:PROC
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	__imp__Py_InitModule4:PROC
EXTRN	?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z:PROC ; PyTuple_GetString
EXTRN	?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z:PROC ; PyTuple_GetInteger
EXTRN	?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z:PROC	; PyTuple_GetFloat
EXTRN	?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z:PROC ; PyTuple_GetBoolean
EXTRN	?Py_BuildException@@YAPAU_object@@PBDZZ:PROC	; Py_BuildException
EXTRN	?Py_BadArgument@@YAPAU_object@@XZ:PROC		; Py_BadArgument
EXTRN	?Py_BuildNone@@YAPAU_object@@XZ:PROC		; Py_BuildNone
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?Update@CGraphicTextInstance@@QAEXXZ:PROC	; CGraphicTextInstance::Update
EXTRN	?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z:PROC ; CGraphicTextInstance::Render
EXTRN	?ShowCursor@CGraphicTextInstance@@QAEXXZ:PROC	; CGraphicTextInstance::ShowCursor
EXTRN	?HideCursor@CGraphicTextInstance@@QAEXXZ:PROC	; CGraphicTextInstance::HideCursor
EXTRN	?SetColor@CGraphicTextInstance@@QAEXK@Z:PROC	; CGraphicTextInstance::SetColor
EXTRN	?SetColor@CGraphicTextInstance@@QAEXMMMM@Z:PROC	; CGraphicTextInstance::SetColor
EXTRN	?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z:PROC ; CGraphicTextInstance::SetOutLineColor
EXTRN	?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z:PROC ; CGraphicTextInstance::SetHorizonalAlign
EXTRN	?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z:PROC ; CGraphicTextInstance::SetVerticalAlign
EXTRN	?SetMax@CGraphicTextInstance@@QAEXH@Z:PROC	; CGraphicTextInstance::SetMax
EXTRN	?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z:PROC ; CGraphicTextInstance::SetTextPointer
EXTRN	?SetValue@CGraphicTextInstance@@QAEXPBDI@Z:PROC	; CGraphicTextInstance::SetValue
EXTRN	?SetPosition@CGraphicTextInstance@@QAEXMMM@Z:PROC ; CGraphicTextInstance::SetPosition
EXTRN	?SetSecret@CGraphicTextInstance@@QAEX_N@Z:PROC	; CGraphicTextInstance::SetSecret
EXTRN	?SetOutline@CGraphicTextInstance@@QAEX_N@Z:PROC	; CGraphicTextInstance::SetOutline
EXTRN	?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z:PROC ; CGraphicTextInstance::GetTextSize
EXTRN	?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:PROC ; CGraphicTextInstance::GetValueStringReference
EXTRN	?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z:PROC ; CGraphicTextInstance::PixelPositionToCharacterPosition
EXTRN	?New@CGraphicTextInstance@@SAPAV1@XZ:PROC	; CGraphicTextInstance::New
EXTRN	?Delete@CGraphicTextInstance@@SAXPAV1@@Z:PROC	; CGraphicTextInstance::Delete
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	__aullrem:PROC
EXTRN	__dtol3:PROC
EXTRN	__ultod3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+18
CONST	ENDS
;	COMDAT ??_C@_07OAPMKONH@grpText@
CONST	SEGMENT
??_C@_07OAPMKONH@grpText@ DB 'grpText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KPFHIMDK@ConvertMoneyText@
CONST	SEGMENT
??_C@_0BB@KPFHIMDK@ConvertMoneyText@ DB 'ConvertMoneyText', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@
CONST	SEGMENT
??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@ DB 'PixelPositionToCh'
	DB	'aracterPosition', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NHLLEHMO@GetSplitingTextLine@
CONST	SEGMENT
??_C@_0BE@NHLLEHMO@GetSplitingTextLine@ DB 'GetSplitingTextLine', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@
CONST	SEGMENT
??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@ DB 'GetSplitingTextLineCount'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODEINJEE@SetMax@
CONST	SEGMENT
??_C@_06ODEINJEE@SetMax@ DB 'SetMax', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKHPOFIC@SetVerticalAlign@
CONST	SEGMENT
??_C@_0BB@NKHPOFIC@SetVerticalAlign@ DB 'SetVerticalAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FCLDCEMA@SetHorizontalAlign@
CONST	SEGMENT
??_C@_0BD@FCLDCEMA@SetHorizontalAlign@ DB 'SetHorizontalAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGJDDPFG@HideCursor@
CONST	SEGMENT
??_C@_0L@MGJDDPFG@HideCursor@ DB 'HideCursor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BIENLPGM@ShowCursor@
CONST	SEGMENT
??_C@_0L@BIENLPGM@ShowCursor@ DB 'ShowCursor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKIFPNAD@SetPosition@
CONST	SEGMENT
??_C@_0M@GKIFPNAD@SetPosition@ DB 'SetPosition', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IIMJLIAB@GetSize@
CONST	SEGMENT
??_C@_07IIMJLIAB@GetSize@ DB 'GetSize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAGCCMNH@GetText@
CONST	SEGMENT
??_C@_07CAGCCMNH@GetText@ DB 'GetText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NIJDBDAG@SetText@
CONST	SEGMENT
??_C@_07NIJDBDAG@SetText@ DB 'SetText', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HBNEJDMM@SetOutline@
CONST	SEGMENT
??_C@_0L@HBNEJDMM@SetOutline@ DB 'SetOutline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CAFHEMDD@SetSecret@
CONST	SEGMENT
??_C@_09CAFHEMDD@SetSecret@ DB 'SetSecret', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MNDFNKJH@SetOutLineColor@
CONST	SEGMENT
??_C@_0BA@MNDFNKJH@SetOutLineColor@ DB 'SetOutLineColor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MKCFOAAE@SetFontColor@
CONST	SEGMENT
??_C@_0N@MKCFOAAE@SetFontColor@ DB 'SetFontColor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MCELKPNO@SetFontName@
CONST	SEGMENT
??_C@_0M@MCELKPNO@SetFontName@ DB 'SetFontName', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BDCAJABG@Destroy@
CONST	SEGMENT
??_C@_07BDCAJABG@Destroy@ DB 'Destroy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDEEPOLG@Generate@
CONST	SEGMENT
??_C@_08PDEEPOLG@Generate@ DB 'Generate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPLDPNDB@Render@
CONST	SEGMENT
??_C@_06EPLDPNDB@Render@ DB 'Render', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMAGPFNF@Update@
CONST	SEGMENT
??_C@_06LMAGPFNF@Update@ DB 'Update', 00H		; `string'
CONST	ENDS
;	COMDAT ?s_methods@?1??initgrpText@@YAXXZ@4PAUPyMethodDef@@A
_DATA	SEGMENT
?s_methods@?1??initgrpText@@YAXXZ@4PAUPyMethodDef@@A DD FLAT:??_C@_06LMAGPFNF@Update@ ; `initgrpText'::`2'::s_methods
	DD	FLAT:?grpTextUpdate@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06EPLDPNDB@Render@
	DD	FLAT:?grpTextRender@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_08PDEEPOLG@Generate@
	DD	FLAT:?grpTextGenerate@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07BDCAJABG@Destroy@
	DD	FLAT:?grpTextDestroy@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@MCELKPNO@SetFontName@
	DD	FLAT:?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0N@MKCFOAAE@SetFontColor@
	DD	FLAT:?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BA@MNDFNKJH@SetOutLineColor@
	DD	FLAT:?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_09CAFHEMDD@SetSecret@
	DD	FLAT:?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@HBNEJDMM@SetOutline@
	DD	FLAT:?grpTextOutline@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07NIJDBDAG@SetText@
	DD	FLAT:?grpTextSetText@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07CAGCCMNH@GetText@
	DD	FLAT:?grpTextGetText@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_07IIMJLIAB@GetSize@
	DD	FLAT:?grpTextGetSize@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0M@GKIFPNAD@SetPosition@
	DD	FLAT:?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@BIENLPGM@ShowCursor@
	DD	FLAT:?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0L@MGJDDPFG@HideCursor@
	DD	FLAT:?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BD@FCLDCEMA@SetHorizontalAlign@
	DD	FLAT:?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@NKHPOFIC@SetVerticalAlign@
	DD	FLAT:?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_06ODEINJEE@SetMax@
	DD	FLAT:?grpSetMax@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BJ@JAMBOGDP@GetSplitingTextLineCount@
	DD	FLAT:?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BE@NHLLEHMO@GetSplitingTextLine@
	DD	FLAT:?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0CB@NLPGLAHJ@PixelPositionToCharacterPositio@
	DD	FLAT:?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	FLAT:??_C@_0BB@KPFHIMDK@ConvertMoneyText@
	DD	FLAT:?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z
	DD	01H
	ORG $+4
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
_DATA	ENDS
;	COMDAT ??_C@_01OCOKONAJ@L@
CONST	SEGMENT
??_C@_01OCOKONAJ@L@ DB 'L', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04FAHLGLIA@?4fnt@
CONST	SEGMENT
??_C@_04FAHLGLIA@?4fnt@ DB '.fnt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@
CONST	SEGMENT
??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@ DB '(i, i)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z$0
__ehfuncinfo$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z$0
__ehfuncinfo$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z$0
__ehfuncinfo$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$__std_find_trivial@DD@@YAPADPAD0D@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 1
??$__std_find_trivial@DD@@YAPADPAD0D@Z PROC		; __std_find_trivial<char,char>, COMDAT

; 100  : _Ty* __std_find_trivial(_Ty* _First, _Ty* _Last, const _TVal _Val) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  :     if constexpr (_STD is_pointer_v<_TVal> || _STD is_null_pointer_v<_TVal>) {
; 102  :         return __std_find_trivial(_First, _Last, reinterpret_cast<uintptr_t>(_Val));
; 103  :     } else if constexpr (sizeof(_Ty) == 1) {
; 104  :         return const_cast<_Ty*>(

  00003	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  00006	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  00009	ff 75 08	 push	 DWORD PTR __First$[ebp]
  0000c	e8 00 00 00 00	 call	 ___std_find_trivial_1@12

; 105  :             static_cast<const _Ty*>(__std_find_trivial_1(_First, _Last, static_cast<uint8_t>(_Val))));
; 106  :     } else if constexpr (sizeof(_Ty) == 2) {
; 107  :         return const_cast<_Ty*>(
; 108  :             static_cast<const _Ty*>(__std_find_trivial_2(_First, _Last, static_cast<uint16_t>(_Val))));
; 109  :     } else if constexpr (sizeof(_Ty) == 4) {
; 110  :         return const_cast<_Ty*>(
; 111  :             static_cast<const _Ty*>(__std_find_trivial_4(_First, _Last, static_cast<uint32_t>(_Val))));
; 112  :     } else if constexpr (sizeof(_Ty) == 8) {
; 113  :         return const_cast<_Ty*>(
; 114  :             static_cast<const _Ty*>(__std_find_trivial_8(_First, _Last, static_cast<uint64_t>(_Val))));
; 115  :     } else {
; 116  :         static_assert(_STD _Always_false<_Ty>, "Unexpected size");
; 117  :     }
; 118  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
??$__std_find_trivial@DD@@YAPADPAD0D@Z ENDP		; __std_find_trivial<char,char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_szString$ = -60					; size = 4
_value$2$ = -56						; size = 4
_value$1$ = -52						; size = 4
tv1419 = -48						; size = 8
_val$ = -48						; size = 8
_value$ = -48						; size = 8
__Count$1$ = -44					; size = 4
_szMoney$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z PROC		; ConvertMoneyText, COMDAT

; 507  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 45 0c	 mov	 eax, DWORD PTR _poArgs$[ebp]

; 508  : 	char* szString;
; 509  : 	if (!(PyTuple_GetString(poArgs, 0, &szString)))

  0002e	8d 4d c4	 lea	 ecx, DWORD PTR _szString$[ebp]
  00031	51		 push	 ecx
  00032	6a 00		 push	 0
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	84 c0		 test	 al, al
  0003f	75 0a		 jne	 SHORT $LN2@ConvertMon

; 510  : 	{
; 511  : 		return Py_BadArgument();

  00041	e8 00 00 00 00	 call	 ?Py_BadArgument@@YAPAU_object@@XZ ; Py_BadArgument
  00046	e9 79 02 00 00	 jmp	 $LN1@ConvertMon
$LN2@ConvertMon:

; 514  : 	std::string szMoney(szString);

  0004b	ff 75 c4	 push	 DWORD PTR _szString$[ebp]
  0004e	8d 4d d8	 lea	 ecx, DWORD PTR _szMoney$[ebp]
  00051	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00056	8b 5d ec	 mov	 ebx, DWORD PTR _szMoney$[ebp+20]

; 2283 :         value_type* _Result = _Bx._Buf;

  00059	8d 4d d8	 lea	 ecx, DWORD PTR _szMoney$[ebp]

; 2284 :         if (_Large_string_engaged()) {

  0005c	8b 75 d8	 mov	 esi, DWORD PTR _szMoney$[ebp]

; 2283 :         value_type* _Result = _Bx._Buf;

  0005f	8d 45 d8	 lea	 eax, DWORD PTR _szMoney$[ebp]

; 4073 :         return iterator(

  00062	8b 55 e8	 mov	 edx, DWORD PTR _szMoney$[ebp+16]

; 2301 :         return _BUF_SIZE <= _Myres;

  00065	83 fb 10	 cmp	 ebx, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 514  : 	std::string szMoney(szString);

  00068	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2284 :         if (_Large_string_engaged()) {

  0006f	0f 43 ce	 cmovae	 ecx, esi

; 4073 :         return iterator(

  00072	03 ca		 add	 ecx, edx

; 2301 :         return _BUF_SIZE <= _Myres;

  00074	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00077	0f 43 c6	 cmovae	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 3226 :     for (; _UFirst != _ULast; ++_UFirst) {

  0007a	3b c1		 cmp	 eax, ecx
  0007c	74 18		 je	 SHORT $LN32@ConvertMon
  0007e	66 90		 npad	 2
$LL236@ConvertMon:

; 3227 :         if (*_UFirst == _Oldval) {

  00080	80 38 2c	 cmp	 BYTE PTR [eax], 44	; 0000002cH
  00083	75 03		 jne	 SHORT $LN237@ConvertMon

; 3228 :             *_UFirst = _Newval;

  00085	c6 00 2e	 mov	 BYTE PTR [eax], 46	; 0000002eH
$LN237@ConvertMon:

; 3226 :     for (; _UFirst != _ULast; ++_UFirst) {

  00088	40		 inc	 eax
  00089	3b c1		 cmp	 eax, ecx
  0008b	75 f3		 jne	 SHORT $LL236@ConvertMon
  0008d	8b 5d ec	 mov	 ebx, DWORD PTR _szMoney$[ebp+20]
  00090	8b 75 d8	 mov	 esi, DWORD PTR _szMoney$[ebp]
  00093	8b 55 e8	 mov	 edx, DWORD PTR _szMoney$[ebp+16]
$LN32@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00096	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  00099	8d 7d d8	 lea	 edi, DWORD PTR _szMoney$[ebp]
  0009c	8d 4d d8	 lea	 ecx, DWORD PTR _szMoney$[ebp]

; 2284 :         if (_Large_string_engaged()) {

  0009f	0f 43 fe	 cmovae	 edi, esi

; 4073 :         return iterator(

  000a2	03 fa		 add	 edi, edx

; 2301 :         return _BUF_SIZE <= _Myres;

  000a4	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  000a7	0f 43 ce	 cmovae	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5299 :         _Iter_diff_t<_InIt> _Count = 0;

  000aa	33 d2		 xor	 edx, edx

; 5300 : 
; 5301 :         for (; _UFirst != _ULast; ++_UFirst) {

  000ac	3b cf		 cmp	 ecx, edi
  000ae	74 1f		 je	 SHORT $LN3@ConvertMon
$LL239@ConvertMon:
  000b0	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH
  000b3	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000b6	0f 45 c2	 cmovne	 eax, edx
  000b9	41		 inc	 ecx
  000ba	8b d0		 mov	 edx, eax
  000bc	3b cf		 cmp	 ecx, edi
  000be	75 f0		 jne	 SHORT $LL239@ConvertMon
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 517  : 	if (std::count(szMoney.begin(), szMoney.end(), '.') > 1)

  000c0	83 fa 01	 cmp	 edx, 1
  000c3	7e 0a		 jle	 SHORT $LN3@ConvertMon

; 518  : 	{
; 519  : 		return Py_BuildNone();

  000c5	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000ca	e9 c1 01 00 00	 jmp	 $LN267@ConvertMon
$LN3@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4073 :         return iterator(

  000cf	8b 55 e8	 mov	 edx, DWORD PTR _szMoney$[ebp+16]

; 2283 :         value_type* _Result = _Bx._Buf;

  000d2	8d 45 d8	 lea	 eax, DWORD PTR _szMoney$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  000d5	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  000d8	8d 4d d8	 lea	 ecx, DWORD PTR _szMoney$[ebp]

; 2284 :         if (_Large_string_engaged()) {

  000db	0f 43 c6	 cmovae	 eax, esi

; 4073 :         return iterator(

  000de	03 d0		 add	 edx, eax

; 2301 :         return _BUF_SIZE <= _Myres;

  000e0	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  000e3	0f 43 ce	 cmovae	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5299 :         _Iter_diff_t<_InIt> _Count = 0;

  000e6	33 f6		 xor	 esi, esi

; 5300 : 
; 5301 :         for (; _UFirst != _ULast; ++_UFirst) {

  000e8	3b ca		 cmp	 ecx, edx
  000ea	74 14		 je	 SHORT $LN116@ConvertMon
  000ec	0f 1f 40 00	 npad	 4
$LL242@ConvertMon:
  000f0	80 39 6b	 cmp	 BYTE PTR [ecx], 107	; 0000006bH
  000f3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000f6	0f 45 c6	 cmovne	 eax, esi
  000f9	41		 inc	 ecx
  000fa	8b f0		 mov	 esi, eax
  000fc	3b ca		 cmp	 ecx, edx
  000fe	75 f0		 jne	 SHORT $LL242@ConvertMon
$LN116@ConvertMon:
  00100	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 523  : 	ULL value = 0;

  00103	66 0f 13 45 d0	 movlpd	 QWORD PTR _value$[ebp], xmm0

; 524  : 	if (k > 0)

  00108	85 f6		 test	 esi, esi
  0010a	0f 84 fc 00 00
	00		 je	 $LN261@ConvertMon

; 497  : 	out = base;

  00110	33 c0		 xor	 eax, eax
  00112	c7 45 cc e8 03
	00 00		 mov	 DWORD PTR _value$1$[ebp], 1000 ; 000003e8H

; 525  : 	{
; 526  : 		__pow(1000, min(3, k), value);

  00119	b9 03 00 00 00	 mov	 ecx, 3

; 497  : 	out = base;

  0011e	89 45 c8	 mov	 DWORD PTR _value$2$[ebp], eax

; 525  : 	{
; 526  : 		__pow(1000, min(3, k), value);

  00121	3b f1		 cmp	 esi, ecx
  00123	0f 47 f1	 cmova	 esi, ecx
  00126	33 ff		 xor	 edi, edi

; 499  : 	while (p != 1)

  00128	83 fe 01	 cmp	 esi, 1
  0012b	74 43		 je	 SHORT $LN129@ConvertMon
  0012d	bb e8 03 00 00	 mov	 ebx, 1000		; 000003e8H
$LL128@ConvertMon:

; 500  : 	{
; 501  : 		out = (out * base) % MOD;

  00132	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00137	f7 e1		 mul	 ecx
  00139	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  0013e	8b c8		 mov	 ecx, eax
  00140	8b c3		 mov	 eax, ebx
  00142	f7 e2		 mul	 edx
  00144	6a 00		 push	 0
  00146	68 07 ca 9a 3b	 push	 1000000007		; 3b9aca07H
  0014b	03 ca		 add	 ecx, edx
  0014d	51		 push	 ecx
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 __aullrem

; 502  : 		p -= 1;

  00154	83 c6 ff	 add	 esi, -1
  00157	8b d8		 mov	 ebx, eax
  00159	8b c2		 mov	 eax, edx
  0015b	83 d7 ff	 adc	 edi, -1
  0015e	83 fe 01	 cmp	 esi, 1
  00161	75 cf		 jne	 SHORT $LL128@ConvertMon

; 498  : 
; 499  : 	while (p != 1)

  00163	85 ff		 test	 edi, edi
  00165	75 cb		 jne	 SHORT $LL128@ConvertMon
  00167	89 5d cc	 mov	 DWORD PTR _value$1$[ebp], ebx
  0016a	8b 5d ec	 mov	 ebx, DWORD PTR _szMoney$[ebp+20]
  0016d	89 55 c8	 mov	 DWORD PTR _value$2$[ebp], edx
$LN129@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2284 :         if (_Large_string_engaged()) {

  00170	8b 4d d8	 mov	 ecx, DWORD PTR _szMoney$[ebp]
  00173	8d 45 d8	 lea	 eax, DWORD PTR _szMoney$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  00176	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  00179	8d 75 d8	 lea	 esi, DWORD PTR _szMoney$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5107 :             const auto _Result    = __std_find_trivial(_First_ptr, _To_address(_Last), _Val);

  0017c	6a 6b		 push	 107			; 0000006bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2284 :         if (_Large_string_engaged()) {

  0017e	0f 43 c1	 cmovae	 eax, ecx

; 4073 :         return iterator(

  00181	03 45 e8	 add	 eax, DWORD PTR _szMoney$[ebp+16]

; 2301 :         return _BUF_SIZE <= _Myres;

  00184	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 4073 :         return iterator(

  00187	89 45 d4	 mov	 DWORD PTR __Count$1$[ebp], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  0018a	8d 45 d8	 lea	 eax, DWORD PTR _szMoney$[ebp]

; 2284 :         if (_Large_string_engaged()) {

  0018d	0f 43 f1	 cmovae	 esi, ecx

; 4073 :         return iterator(

  00190	03 75 e8	 add	 esi, DWORD PTR _szMoney$[ebp+16]

; 2301 :         return _BUF_SIZE <= _Myres;

  00193	83 fb 10	 cmp	 ebx, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5107 :             const auto _Result    = __std_find_trivial(_First_ptr, _To_address(_Last), _Val);

  00196	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2284 :         if (_Large_string_engaged()) {

  00197	0f 43 c1	 cmovae	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5107 :             const auto _Result    = __std_find_trivial(_First_ptr, _To_address(_Last), _Val);

  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ??$__std_find_trivial@DD@@YAPADPAD0D@Z ; __std_find_trivial<char,char>
  001a0	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 2050 :     auto _UNext       = _UFirst;

  001a3	8b f8		 mov	 edi, eax

; 2051 :     if (_UFirst != _ULast) {

  001a5	3b c6		 cmp	 eax, esi
  001a7	74 16		 je	 SHORT $LN166@ConvertMon

; 2052 :         while (++_UFirst != _ULast) {

  001a9	40		 inc	 eax
  001aa	3b c6		 cmp	 eax, esi
  001ac	74 11		 je	 SHORT $LN166@ConvertMon
  001ae	66 90		 npad	 2
$LL165@ConvertMon:

; 2053 :             if (!(*_UFirst == _Val)) {

  001b0	8a 08		 mov	 cl, BYTE PTR [eax]
  001b2	80 f9 6b	 cmp	 cl, 107			; 0000006bH
  001b5	74 03		 je	 SHORT $LN168@ConvertMon

; 2054 :                 *_UNext = _STD move(*_UFirst);

  001b7	88 0f		 mov	 BYTE PTR [edi], cl

; 2055 :                 ++_UNext;

  001b9	47		 inc	 edi
$LN168@ConvertMon:

; 2052 :         while (++_UFirst != _ULast) {

  001ba	40		 inc	 eax
  001bb	3b c6		 cmp	 eax, esi
  001bd	75 f1		 jne	 SHORT $LL165@ConvertMon
$LN166@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  001bf	83 7d ec 10	 cmp	 DWORD PTR _szMoney$[ebp+20], 16 ; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  001c3	8d 45 d8	 lea	 eax, DWORD PTR _szMoney$[ebp]

; 3822 :         _Erase_noexcept(_Off, static_cast<size_type>(_Last._Ptr - _First._Ptr));

  001c6	8b 5d d4	 mov	 ebx, DWORD PTR __Count$1$[ebp]

; 2283 :         value_type* _Result = _Bx._Buf;

  001c9	8d 4d d8	 lea	 ecx, DWORD PTR _szMoney$[ebp]

; 2284 :         if (_Large_string_engaged()) {

  001cc	0f 43 45 d8	 cmovae	 eax, DWORD PTR _szMoney$[ebp]

; 3821 :         const auto _Off = static_cast<size_type>(_Unfancy(_First._Ptr) - _Mypair._Myval2._Myptr());

  001d0	8b f7		 mov	 esi, edi
  001d2	2b f0		 sub	 esi, eax

; 3822 :         _Erase_noexcept(_Off, static_cast<size_type>(_Last._Ptr - _First._Ptr));

  001d4	2b df		 sub	 ebx, edi

; 2335 :         return (_STD min)(_Size, _Mysize - _Off);

  001d6	8b 7d e8	 mov	 edi, DWORD PTR _szMoney$[ebp+16]
  001d9	8b c7		 mov	 eax, edi
  001db	2b c6		 sub	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  001dd	3b c3		 cmp	 eax, ebx
  001df	0f 42 d8	 cmovb	 ebx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  001e2	83 7d ec 10	 cmp	 DWORD PTR _szMoney$[ebp+20], 16 ; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  001e6	0f 43 4d d8	 cmovae	 ecx, DWORD PTR _szMoney$[ebp]

; 3792 :         const size_type _New_size = _Old_size - _Count;

  001ea	2b fb		 sub	 edi, ebx
  001ec	03 ce		 add	 ecx, esi

; 3793 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  001ee	8b c7		 mov	 eax, edi
  001f0	2b c6		 sub	 eax, esi
  001f2	40		 inc	 eax

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001f3	50		 push	 eax

; 3793 :         _Traits::move(_Erase_at, _Erase_at + _Count, _New_size - _Off + 1); // move suffix + null up

  001f4	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001f7	50		 push	 eax
  001f8	51		 push	 ecx
  001f9	e8 00 00 00 00	 call	 _memmove
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 524  : 	if (k > 0)

  001fe	8b 5d ec	 mov	 ebx, DWORD PTR _szMoney$[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00201	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 524  : 	if (k > 0)

  00204	8b 75 c8	 mov	 esi, DWORD PTR _value$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3795 :         _Mypair._Myval2._Mysize = _New_size;

  00207	89 7d e8	 mov	 DWORD PTR _szMoney$[ebp+16], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 524  : 	if (k > 0)

  0020a	eb 09		 jmp	 SHORT $LN200@ConvertMon
$LN261@ConvertMon:
  0020c	8b 45 d0	 mov	 eax, DWORD PTR _value$[ebp]
  0020f	8b 75 d4	 mov	 esi, DWORD PTR _value$[ebp+4]
  00212	89 45 cc	 mov	 DWORD PTR _value$1$[ebp], eax
$LN200@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00215	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00218	8d 45 d8	 lea	 eax, DWORD PTR _szMoney$[ebp]

; 2293 :         if (_Large_string_engaged()) {

  0021b	0f 43 45 d8	 cmovae	 eax, DWORD PTR _szMoney$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 530  : 	long double val = ::atof(szMoney.c_str());

  0021f	50		 push	 eax
  00220	e8 00 00 00 00	 call	 _atof

; 531  : 	return Py_BuildValue("L", static_cast<ULL>(val * value));

  00225	8b 4d cc	 mov	 ecx, DWORD PTR _value$1$[ebp]
  00228	83 c4 04	 add	 esp, 4
  0022b	8b d6		 mov	 edx, esi
  0022d	dd 5d d0	 fstp	 QWORD PTR _val$[ebp]
  00230	e8 00 00 00 00	 call	 __ultod3
  00235	0f 28 c8	 movaps	 xmm1, xmm0
  00238	0f 57 c0	 xorps	 xmm0, xmm0
  0023b	f2 0f 59 4d d0	 mulsd	 xmm1, QWORD PTR _val$[ebp]
  00240	66 0f 13 45 d0	 movlpd	 QWORD PTR tv1419[ebp], xmm0
  00245	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@43e0000000000000
  0024d	66 0f 2f c8	 comisd	 xmm1, xmm0
  00251	72 1b		 jb	 SHORT $LN262@ConvertMon
  00253	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00257	66 0f 2f c1	 comisd	 xmm0, xmm1
  0025b	76 11		 jbe	 SHORT $LN262@ConvertMon
  0025d	8b 75 d0	 mov	 esi, DWORD PTR tv1419[ebp]
  00260	8b 7d d4	 mov	 edi, DWORD PTR tv1419[ebp+4]
  00263	83 c6 00	 add	 esi, 0
  00266	81 d7 00 00 00
	80		 adc	 edi, -2147483648	; 80000000H
  0026c	eb 06		 jmp	 SHORT $LN255@ConvertMon
$LN262@ConvertMon:
  0026e	8b 7d d4	 mov	 edi, DWORD PTR tv1419[ebp+4]
  00271	8b 75 d0	 mov	 esi, DWORD PTR tv1419[ebp]
$LN255@ConvertMon:
  00274	0f 28 c1	 movaps	 xmm0, xmm1
  00277	e8 00 00 00 00	 call	 __dtol3
  0027c	03 c6		 add	 eax, esi
  0027e	13 d7		 adc	 edx, edi
  00280	52		 push	 edx
  00281	50		 push	 eax
  00282	68 00 00 00 00	 push	 OFFSET ??_C@_01OCOKONAJ@L@
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0028d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN267@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00290	8b 4d ec	 mov	 ecx, DWORD PTR _szMoney$[ebp+20]
  00293	8b f0		 mov	 esi, eax
  00295	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00298	72 28		 jb	 SHORT $LN76@ConvertMon
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029a	8b 55 d8	 mov	 edx, DWORD PTR _szMoney$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0029d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029e	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002a0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002a6	72 10		 jb	 SHORT $LN86@ConvertMon

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002a8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002ab	83 c1 23	 add	 ecx, 35			; 00000023H
  002ae	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002b0	83 c0 fc	 add	 eax, -4			; fffffffcH
  002b3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002b6	77 28		 ja	 SHORT $LN269@ConvertMon
$LN86@ConvertMon:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002b8	51		 push	 ecx
  002b9	52		 push	 edx
  002ba	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002bf	83 c4 08	 add	 esp, 8
$LN76@ConvertMon:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 531  : 	return Py_BuildValue("L", static_cast<ULL>(val * value));

  002c2	8b c6		 mov	 eax, esi
$LN1@ConvertMon:

; 532  : }

  002c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ce	59		 pop	 ecx
  002cf	5f		 pop	 edi
  002d0	5e		 pop	 esi
  002d1	5b		 pop	 ebx
  002d2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d5	33 cd		 xor	 ecx, ebp
  002d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002dc	8b e5		 mov	 esp, ebp
  002de	5d		 pop	 ebp
  002df	c3		 ret	 0
$LN269@ConvertMon:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002e0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN266@ConvertMon:
  002e5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _szMoney$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ConvertMoneyText@@YAPAU_object@@PAU1@0@Z ENDP		; ConvertMoneyText
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iPixelPosition$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z PROC ; grpTextPixelPositionToCharacterPosition, COMDAT

; 471  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 472  : 	CGraphicTextInstance * pTextInstance;
; 473  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextPix
$LN5@grpTextPix:

; 487  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextPix:

; 474  : 	{
; 475  : 		return Py_BuildException();
; 476  : 	}
; 477  : 
; 478  : 	int iPixelPosition;
; 479  : 	if (!PyTuple_GetInteger(poArgs, 1, &iPixelPosition))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iPixelPosition$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextPix

; 480  : 	{
; 481  : 		return Py_BuildException();
; 482  : 	}
; 483  : 
; 484  : 	int iCharacterPosition = pTextInstance->PixelPositionToCharacterPosition(iPixelPosition);

  0003e	ff 75 fc	 push	 DWORD PTR _iPixelPosition$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?PixelPositionToCharacterPosition@CGraphicTextInstance@@QAEHH@Z ; CGraphicTextInstance::PixelPositionToCharacterPosition

; 485  : 
; 486  : 	return Py_BuildValue("i", iCharacterPosition);

  00049	50		 push	 eax
  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00055	83 c4 08	 add	 esp, 8

; 487  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?grpTextPixelPositionToCharacterPosition@@YAPAU_object@@PAU1@0@Z ENDP ; grpTextPixelPositionToCharacterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iLineLimitation$ = -72					; size = 4
_iGettingLine$ = -68					; size = 4
__Old_capacity$1$ = -64					; size = 4
tv94 = -64						; size = 4
_szText$ = -60						; size = 4
_iLineCount$1$ = -56					; size = 4
_i$1$ = -52						; size = 4
_iPosition$1$ = -48					; size = 4
__Ch$1$ = -41						; size = 1
_strLine$ = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z PROC	; grpGetSplitingTextLine, COMDAT

; 402  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]

; 403  : 	char * szText;
; 404  : 	if (!PyTuple_GetString(poArgs, 0, &szText))

  0002e	8d 45 c4	 lea	 eax, DWORD PTR _szText$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003d	84 c0		 test	 al, al
  0003f	75 0f		 jne	 SHORT $LN5@grpGetSpli
$LN125@grpGetSpli:

; 468  : }

  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00048	83 c4 04	 add	 esp, 4
  0004b	e9 69 02 00 00	 jmp	 $LN1@grpGetSpli
$LN5@grpGetSpli:

; 405  : 	{
; 406  : 		return Py_BuildException();
; 407  : 	}
; 408  : 
; 409  : 	int iLineLimitation;
; 410  : 	if (!PyTuple_GetInteger(poArgs, 1, &iLineLimitation))

  00050	8d 45 b8	 lea	 eax, DWORD PTR _iLineLimitation$[ebp]
  00053	50		 push	 eax
  00054	6a 01		 push	 1
  00056	56		 push	 esi
  00057	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005f	84 c0		 test	 al, al
  00061	74 de		 je	 SHORT $LN125@grpGetSpli

; 411  : 	{
; 412  : 		return Py_BuildException();
; 413  : 	}
; 414  : 
; 415  : 	int iGettingLine;
; 416  : 	if (!PyTuple_GetInteger(poArgs, 2, &iGettingLine))

  00063	8d 45 bc	 lea	 eax, DWORD PTR _iGettingLine$[ebp]
  00066	50		 push	 eax
  00067	6a 02		 push	 2
  00069	56		 push	 esi
  0006a	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0006f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00072	84 c0		 test	 al, al
  00074	74 cb		 je	 SHORT $LN125@grpGetSpli

; 417  : 	{
; 418  : 		return Py_BuildException();
; 419  : 	}
; 420  : 
; 421  : 	std::string strLine = "";

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0007b	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 422  : 	int iPosition = 0;
; 423  : 	int iLineCount = 0;
; 424  : 
; 425  : 	for (DWORD i = 0; i < strlen(szText);)

  00083	8b 75 c4	 mov	 esi, DWORD PTR _szText$[ebp]
  00086	33 db		 xor	 ebx, ebx
  00088	33 c9		 xor	 ecx, ecx
  0008a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00091	33 d2		 xor	 edx, edx
  00093	89 5d d0	 mov	 DWORD PTR _iPosition$1$[ebp], ebx
  00096	89 4d c8	 mov	 DWORD PTR _iLineCount$1$[ebp], ecx
  00099	89 55 cc	 mov	 DWORD PTR _i$1$[ebp], edx
  0009c	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  0009f	90		 npad	 1
$LL117@grpGetSpli:
  000a0	8a 06		 mov	 al, BYTE PTR [esi]
  000a2	46		 inc	 esi
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL117@grpGetSpli
  000a7	2b f7		 sub	 esi, edi
  000a9	0f 84 bc 01 00
	00		 je	 $LN119@grpGetSpli
  000af	90		 npad	 1
$LL2@grpGetSpli:

; 426  : 	{
; 427  : 		if ('|' == szText[i])

  000b0	8b 75 c4	 mov	 esi, DWORD PTR _szText$[ebp]
  000b3	03 f2		 add	 esi, edx
  000b5	8a 06		 mov	 al, BYTE PTR [esi]
  000b7	88 45 d7	 mov	 BYTE PTR __Ch$1$[ebp], al
  000ba	3c 7c		 cmp	 al, 124			; 0000007cH
  000bc	75 11		 jne	 SHORT $LN8@grpGetSpli

; 428  : 		{
; 429  : 			i += 1;

  000be	42		 inc	 edx

; 430  : 
; 431  : 			if (iPosition > 0)
; 432  : 			{
; 433  : 				++iLineCount;
; 434  : 			}
; 435  : 			iPosition = 0;

  000bf	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000c2	85 db		 test	 ebx, ebx
  000c4	0f 4e c1	 cmovle	 eax, ecx
  000c7	89 45 c8	 mov	 DWORD PTR _iLineCount$1$[ebp], eax

; 436  : 			continue;

  000ca	e9 79 01 00 00	 jmp	 $LN122@grpGetSpli
$LN8@grpGetSpli:

; 437  : 		}
; 438  : 
; 439  : 		if (szText[i] & 0x80)

  000cf	84 c0		 test	 al, al
  000d1	79 20		 jns	 SHORT $LN10@grpGetSpli

; 440  : 		{
; 441  : 			if (iLineCount == iGettingLine)

  000d3	3b 4d bc	 cmp	 ecx, DWORD PTR _iGettingLine$[ebp]
  000d6	75 11		 jne	 SHORT $LN12@grpGetSpli

; 442  : 			{
; 443  : 				strLine.append(szText + i, 2);

  000d8	6a 02		 push	 2
  000da	56		 push	 esi
  000db	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  000de	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000e3	8b 55 cc	 mov	 edx, DWORD PTR _i$1$[ebp]
  000e6	8b 4d c8	 mov	 ecx, DWORD PTR _iLineCount$1$[ebp]
$LN12@grpGetSpli:

; 444  : 			}
; 445  : 
; 446  : 			i += 2;
; 447  : 			iPosition += 2;

  000e9	b8 02 00 00 00	 mov	 eax, 2

; 448  : 		}

  000ee	e9 42 01 00 00	 jmp	 $LN11@grpGetSpli
$LN10@grpGetSpli:

; 449  : 		else
; 450  : 		{
; 451  : 			if (iLineCount == iGettingLine)

  000f3	3b 4d bc	 cmp	 ecx, DWORD PTR _iGettingLine$[ebp]
  000f6	0f 85 34 01 00
	00		 jne	 $LN65@grpGetSpli
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4198 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  000fc	8b 5d ec	 mov	 ebx, DWORD PTR _strLine$[ebp+20]
  000ff	8b 7d e8	 mov	 edi, DWORD PTR _strLine$[ebp+16]
  00102	89 5d c0	 mov	 DWORD PTR __Old_capacity$1$[ebp], ebx
  00105	3b fb		 cmp	 edi, ebx

; 4199 :         if (_Old_size < _Mypair._Myval2._Myres) {

  00107	73 20		 jae	 SHORT $LN55@grpGetSpli

; 4200 :             _ASAN_STRING_MODIFY(1);
; 4201 :             _Mypair._Myval2._Mysize = _Old_size + 1;

  00109	8d 47 01	 lea	 eax, DWORD PTR [edi+1]

; 2301 :         return _BUF_SIZE <= _Myres;

  0010c	83 fb 10	 cmp	 ebx, 16			; 00000010H

; 4203 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  0010f	8a 5d d7	 mov	 bl, BYTE PTR __Ch$1$[ebp]
  00112	89 45 e8	 mov	 DWORD PTR _strLine$[ebp+16], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  00115	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 2284 :         if (_Large_string_engaged()) {

  00118	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]

; 4203 :             _Traits::assign(_Ptr[_Old_size], _Ch);

  0011c	88 1c 38	 mov	 BYTE PTR [eax+edi], bl

; 4204 :             _Traits::assign(_Ptr[_Old_size + 1], _Elem());

  0011f	c6 44 38 01 00	 mov	 BYTE PTR [eax+edi+1], 0

; 4205 :             return;

  00124	e9 04 01 00 00	 jmp	 $LN123@grpGetSpli
$LN55@grpGetSpli:

; 4938 :         const size_type _Old_size = _My_data._Mysize;

  00129	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0012e	2b c7		 sub	 eax, edi

; 4939 :         if (max_size() - _Old_size < _Size_increase) {

  00130	83 f8 01	 cmp	 eax, 1
  00133	0f 82 9c 01 00
	00		 jb	 $LN112@grpGetSpli

; 4941 :         }
; 4942 : 
; 4943 :         const size_type _New_size     = _Old_size + _Size_increase;

  00139	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0013c	83 ce 0f	 or	 esi, 15			; 0000000fH
  0013f	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00145	76 17		 jbe	 SHORT $LN70@grpGetSpli

; 4885 :             return _Max;

  00147	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0014c	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00151	50		 push	 eax
  00152	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00157	83 c4 04	 add	 esp, 4
  0015a	8b d8		 mov	 ebx, eax
  0015c	eb 58		 jmp	 SHORT $LN77@grpGetSpli
$LN70@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0015e	8b cb		 mov	 ecx, ebx
  00160	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00165	d1 e9		 shr	 ecx, 1
  00167	2b c1		 sub	 eax, ecx
  00169	3b d8		 cmp	 ebx, eax
  0016b	76 17		 jbe	 SHORT $LN71@grpGetSpli

; 4889 :             return _Max;

  0016d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00172	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00177	50		 push	 eax
  00178	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0017d	83 c4 04	 add	 esp, 4
  00180	8b d8		 mov	 ebx, eax
  00182	eb 32		 jmp	 SHORT $LN77@grpGetSpli
$LN71@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00184	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00187	3b f0		 cmp	 esi, eax
  00189	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4947 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0018c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0018f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00194	72 0d		 jb	 SHORT $LN78@grpGetSpli

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00196	50		 push	 eax
  00197	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0019c	83 c4 04	 add	 esp, 4
  0019f	8b d8		 mov	 ebx, eax
  001a1	eb 13		 jmp	 SHORT $LN77@grpGetSpli
$LN78@grpGetSpli:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  001a3	85 c0		 test	 eax, eax
  001a5	74 0d		 je	 SHORT $LN79@grpGetSpli

; 77   :         return ::operator new(_Bytes);

  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001ad	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  001b0	8b d8		 mov	 ebx, eax
  001b2	eb 02		 jmp	 SHORT $LN77@grpGetSpli
$LN79@grpGetSpli:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  001b4	33 db		 xor	 ebx, ebx
$LN77@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4959 :         if (_BUF_SIZE <= _Old_capacity) {

  001b6	83 7d c0 10	 cmp	 DWORD PTR __Old_capacity$1$[ebp], 16 ; 00000010H
  001ba	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  001bd	89 45 e8	 mov	 DWORD PTR _strLine$[ebp+16], eax
  001c0	89 75 ec	 mov	 DWORD PTR _strLine$[ebp+20], esi
  001c3	57		 push	 edi
  001c4	72 46		 jb	 SHORT $LN64@grpGetSpli

; 4960 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  001c6	8b 75 d8	 mov	 esi, DWORD PTR _strLine$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001c9	56		 push	 esi
  001ca	53		 push	 ebx
  001cb	e8 00 00 00 00	 call	 _memcpy

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  001d0	8b 4d c0	 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001d3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4212 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001d6	8a 45 d7	 mov	 al, BYTE PTR __Ch$1$[ebp]

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  001d9	41		 inc	 ecx

; 4212 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  001da	88 04 1f	 mov	 BYTE PTR [edi+ebx], al

; 4213 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  001dd	c6 44 1f 01 00	 mov	 BYTE PTR [edi+ebx+1], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001e2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001e8	72 16		 jb	 SHORT $LN101@grpGetSpli

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001ea	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  001ed	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001f0	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f2	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001f5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f8	0f 87 dc 00 00
	00		 ja	 $LN43@grpGetSpli

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001fe	8b f2		 mov	 esi, edx
$LN101@grpGetSpli:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00200	51		 push	 ecx
  00201	56		 push	 esi
  00202	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00207	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4964 :         } else {

  0020a	eb 18		 jmp	 SHORT $LN124@grpGetSpli
$LN64@grpGetSpli:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0020c	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]
  0020f	50		 push	 eax
  00210	53		 push	 ebx
  00211	e8 00 00 00 00	 call	 _memcpy

; 4212 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  00216	8a 45 d7	 mov	 al, BYTE PTR __Ch$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00219	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4212 :                 _Traits::assign(_New_ptr[_Old_size], _Ch);

  0021c	88 04 1f	 mov	 BYTE PTR [edi+ebx], al

; 4213 :                 _Traits::assign(_New_ptr[_Old_size + 1], _Elem());

  0021f	c6 44 1f 01 00	 mov	 BYTE PTR [edi+ebx+1], 0
$LN124@grpGetSpli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 457  : 			iPosition += 1;

  00224	8b 4d c8	 mov	 ecx, DWORD PTR _iLineCount$1$[ebp]
  00227	8b 55 cc	 mov	 edx, DWORD PTR _i$1$[ebp]
  0022a	89 5d d8	 mov	 DWORD PTR _strLine$[ebp], ebx
$LN123@grpGetSpli:
  0022d	8b 5d d0	 mov	 ebx, DWORD PTR _iPosition$1$[ebp]
$LN65@grpGetSpli:
  00230	b8 01 00 00 00	 mov	 eax, 1
$LN11@grpGetSpli:

; 458  : 		}
; 459  : 
; 460  : 		if (iPosition >= iLineLimitation)

  00235	03 d8		 add	 ebx, eax
  00237	03 d0		 add	 edx, eax
  00239	89 55 cc	 mov	 DWORD PTR _i$1$[ebp], edx
  0023c	89 5d d0	 mov	 DWORD PTR _iPosition$1$[ebp], ebx
  0023f	3b 5d b8	 cmp	 ebx, DWORD PTR _iLineLimitation$[ebp]
  00242	7c 0c		 jl	 SHORT $LN14@grpGetSpli

; 461  : 		{
; 462  : 			++iLineCount;

  00244	41		 inc	 ecx
  00245	89 4d c8	 mov	 DWORD PTR _iLineCount$1$[ebp], ecx
$LN122@grpGetSpli:

; 422  : 	int iPosition = 0;
; 423  : 	int iLineCount = 0;
; 424  : 
; 425  : 	for (DWORD i = 0; i < strlen(szText);)

  00248	33 db		 xor	 ebx, ebx
  0024a	89 55 cc	 mov	 DWORD PTR _i$1$[ebp], edx
  0024d	89 5d d0	 mov	 DWORD PTR _iPosition$1$[ebp], ebx
$LN14@grpGetSpli:
  00250	8b 45 c4	 mov	 eax, DWORD PTR _szText$[ebp]
  00253	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LL118@grpGetSpli:
  00256	8a 08		 mov	 cl, BYTE PTR [eax]
  00258	40		 inc	 eax
  00259	84 c9		 test	 cl, cl
  0025b	75 f9		 jne	 SHORT $LL118@grpGetSpli
  0025d	2b c6		 sub	 eax, esi
  0025f	3b d0		 cmp	 edx, eax
  00261	73 08		 jae	 SHORT $LN119@grpGetSpli
  00263	8b 4d c8	 mov	 ecx, DWORD PTR _iLineCount$1$[ebp]
  00266	e9 45 fe ff ff	 jmp	 $LL2@grpGetSpli
$LN119@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0026b	83 7d ec 10	 cmp	 DWORD PTR _strLine$[ebp+20], 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  0026f	8d 45 d8	 lea	 eax, DWORD PTR _strLine$[ebp]

; 2293 :         if (_Large_string_engaged()) {

  00272	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLine$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 467  : 	return Py_BuildValue("s", strLine.c_str());

  00276	50		 push	 eax
  00277	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  0027c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00282	8b 4d ec	 mov	 ecx, DWORD PTR _strLine$[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 467  : 	return Py_BuildValue("s", strLine.c_str());

  00285	83 c4 08	 add	 esp, 8
  00288	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0028a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0028d	72 28		 jb	 SHORT $LN36@grpGetSpli
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0028f	8b 55 d8	 mov	 edx, DWORD PTR _strLine$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00292	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00293	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00295	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0029b	72 10		 jb	 SHORT $LN46@grpGetSpli

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0029d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002a0	83 c1 23	 add	 ecx, 35			; 00000023H
  002a3	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ab	77 2d		 ja	 SHORT $LN43@grpGetSpli
$LN46@grpGetSpli:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002ad	51		 push	 ecx
  002ae	52		 push	 edx
  002af	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b4	83 c4 08	 add	 esp, 8
$LN36@grpGetSpli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 467  : 	return Py_BuildValue("s", strLine.c_str());

  002b7	8b c6		 mov	 eax, esi
$LN1@grpGetSpli:

; 468  : }

  002b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002c3	59		 pop	 ecx
  002c4	5f		 pop	 edi
  002c5	5e		 pop	 esi
  002c6	5b		 pop	 ebx
  002c7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002ca	33 cd		 xor	 ecx, ebp
  002cc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002d1	8b e5		 mov	 esp, ebp
  002d3	5d		 pop	 ebp
  002d4	c3		 ret	 0
$LN112@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4940 :             _Xlen_string(); // result too long

  002d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN43@grpGetSpli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002da	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN121@grpGetSpli:
  002df	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _strLine$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?grpGetSplitingTextLine@@YAPAU_object@@PAU1@0@Z ENDP	; grpGetSplitingTextLine
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_iLineLimitation$ = -12					; size = 4
tv307 = -8						; size = 4
tv302 = -8						; size = 4
tv82 = -8						; size = 4
_szText$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z PROC ; grpGetSplitingTextLineCount, COMDAT

; 344  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 345  : 	char * szText;
; 346  : 	if (!PyTuple_GetString(poArgs, 0, &szText))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _szText$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN5@grpGetSpli
$LN20@grpGetSpli:

; 399  : }

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN5@grpGetSpli:

; 347  : 	{
; 348  : 		return Py_BuildException();
; 349  : 	}
; 350  : 
; 351  : 	int iLineLimitation;
; 352  : 	if (!PyTuple_GetInteger(poArgs, 1, &iLineLimitation))

  0002c	8d 45 f4	 lea	 eax, DWORD PTR _iLineLimitation$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN20@grpGetSpli

; 353  : 	{
; 354  : 		return Py_BuildException();
; 355  : 	}
; 356  : 
; 357  : 	int iPosition = 0;
; 358  : 	int iLineCount = 0;
; 359  : 
; 360  : 	for (DWORD i = 0; i < strlen(szText);)

  0003f	53		 push	 ebx
  00040	8b 5d fc	 mov	 ebx, DWORD PTR _szText$[ebp]
  00043	33 f6		 xor	 esi, esi
  00045	8b cb		 mov	 ecx, ebx
  00047	57		 push	 edi
  00048	33 ff		 xor	 edi, edi
  0004a	33 d2		 xor	 edx, edx
  0004c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0004f	89 45 f8	 mov	 DWORD PTR tv302[ebp], eax
$LL17@grpGetSpli:
  00052	8a 01		 mov	 al, BYTE PTR [ecx]
  00054	41		 inc	 ecx
  00055	84 c0		 test	 al, al
  00057	75 f9		 jne	 SHORT $LL17@grpGetSpli
  00059	2b 4d f8	 sub	 ecx, DWORD PTR tv302[ebp]
  0005c	74 42		 je	 SHORT $LN3@grpGetSpli
  0005e	66 90		 npad	 2
$LL2@grpGetSpli:

; 361  : 	{
; 362  : 		if ('|' == szText[i])

  00060	8a 04 1a	 mov	 al, BYTE PTR [edx+ebx]
  00063	3c 7c		 cmp	 al, 124			; 0000007cH
  00065	75 0d		 jne	 SHORT $LN7@grpGetSpli

; 363  : 		{
; 364  : 			i += 1;

  00067	42		 inc	 edx

; 365  : 
; 366  : 			if (iPosition > 0)
; 367  : 			{
; 368  : 				++iLineCount;
; 369  : 			}
; 370  : 
; 371  : 			iPosition = 0;

  00068	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0006b	85 ff		 test	 edi, edi
  0006d	0f 4e c6	 cmovle	 eax, esi
  00070	8b f0		 mov	 esi, eax

; 372  : 			continue;

  00072	eb 14		 jmp	 SHORT $LN19@grpGetSpli
$LN7@grpGetSpli:

; 373  : 		}
; 374  : 
; 375  : 		if (szText[i] & 0x80)
; 376  : 		{
; 377  : 			i += 2;
; 378  : 			iPosition += 2;
; 379  : 		}
; 380  : 		else
; 381  : 		{
; 382  : 			i += 1;
; 383  : 			iPosition += 1;
; 384  : 		}
; 385  : 
; 386  : 		if (iPosition >= iLineLimitation)

  00074	0f be c0	 movsx	 eax, al
  00077	c1 f8 1f	 sar	 eax, 31			; 0000001fH
  0007a	83 e0 01	 and	 eax, 1
  0007d	40		 inc	 eax
  0007e	03 f8		 add	 edi, eax
  00080	03 d0		 add	 edx, eax
  00082	3b 7d f4	 cmp	 edi, DWORD PTR _iLineLimitation$[ebp]
  00085	7c 03		 jl	 SHORT $LN11@grpGetSpli

; 387  : 		{
; 388  : 			++iLineCount;

  00087	46		 inc	 esi
$LN19@grpGetSpli:

; 353  : 	{
; 354  : 		return Py_BuildException();
; 355  : 	}
; 356  : 
; 357  : 	int iPosition = 0;
; 358  : 	int iLineCount = 0;
; 359  : 
; 360  : 	for (DWORD i = 0; i < strlen(szText);)

  00088	33 ff		 xor	 edi, edi
$LN11@grpGetSpli:
  0008a	8b c3		 mov	 eax, ebx
  0008c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0008f	89 4d f8	 mov	 DWORD PTR tv307[ebp], ecx
$LL18@grpGetSpli:
  00092	8a 08		 mov	 cl, BYTE PTR [eax]
  00094	40		 inc	 eax
  00095	84 c9		 test	 cl, cl
  00097	75 f9		 jne	 SHORT $LL18@grpGetSpli
  00099	2b 45 f8	 sub	 eax, DWORD PTR tv307[ebp]
  0009c	3b d0		 cmp	 edx, eax
  0009e	72 c0		 jb	 SHORT $LL2@grpGetSpli
$LN3@grpGetSpli:

; 389  : 			iPosition = 0;
; 390  : 		}
; 391  : 	}
; 392  : 
; 393  : 	if (iPosition > 0)
; 394  : 	{
; 395  : 		++iLineCount;
; 396  : 	}
; 397  : 
; 398  : 	return Py_BuildValue("i", iLineCount);

  000a0	85 ff		 test	 edi, edi
  000a2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  000a5	0f 4e c6	 cmovle	 eax, esi
  000a8	50		 push	 eax
  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  000ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  000b4	83 c4 08	 add	 esp, 8
  000b7	5f		 pop	 edi
  000b8	5b		 pop	 ebx
  000b9	5e		 pop	 esi

; 399  : }

  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
?grpGetSplitingTextLineCount@@YAPAU_object@@PAU1@0@Z ENDP ; grpGetSplitingTextLineCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpSetMax@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iValue$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpSetMax@@YAPAU_object@@PAU1@0@Z PROC			; grpSetMax, COMDAT

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 327  : 	CGraphicTextInstance* pTextInstance;
; 328  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpSetMax
$LN5@grpSetMax:

; 341  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpSetMax:

; 329  : 	{
; 330  : 		return Py_BuildException();
; 331  : 	}
; 332  : 
; 333  : 	int iValue;
; 334  : 	if (!PyTuple_GetInteger(poArgs, 1, &iValue))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iValue$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpSetMax

; 335  : 	{
; 336  : 		return Py_BuildException();
; 337  : 	}
; 338  : 
; 339  : 	pTextInstance->SetMax(iValue);

  0003e	ff 75 fc	 push	 DWORD PTR _iValue$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetMax@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetMax

; 340  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 341  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpSetMax@@YAPAU_object@@PAU1@0@Z ENDP			; grpSetMax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iAlign$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z PROC	; grpSetVerticalAlign, COMDAT

; 308  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 309  : 	CGraphicTextInstance* pTextInstance;
; 310  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpSetVert
$LN5@grpSetVert:

; 323  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpSetVert:

; 311  : 	{
; 312  : 		return Py_BuildException();
; 313  : 	}
; 314  : 
; 315  : 	int iAlign;
; 316  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAlign))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAlign$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpSetVert

; 317  : 	{
; 318  : 		return Py_BuildException();
; 319  : 	}
; 320  : 
; 321  : 	pTextInstance->SetVerticalAlign(iAlign);

  0003e	ff 75 fc	 push	 DWORD PTR _iAlign$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetVerticalAlign@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetVerticalAlign

; 322  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 323  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpSetVerticalAlign@@YAPAU_object@@PAU1@0@Z ENDP	; grpSetVerticalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_iAlign$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z PROC	; grpSetHorizontalAlign, COMDAT

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 291  : 	CGraphicTextInstance* pTextInstance;
; 292  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpSetHori
$LN5@grpSetHori:

; 305  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpSetHori:

; 293  : 	{
; 294  : 		return Py_BuildException();
; 295  : 	}
; 296  : 
; 297  : 	int iAlign;
; 298  : 	if (!PyTuple_GetInteger(poArgs, 1, &iAlign))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _iAlign$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpSetHori

; 299  : 	{
; 300  : 		return Py_BuildException();
; 301  : 	}
; 302  : 
; 303  : 	pTextInstance->SetHorizonalAlign(iAlign);

  0003e	ff 75 fc	 push	 DWORD PTR _iAlign$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetHorizonalAlign@CGraphicTextInstance@@QAEXH@Z ; CGraphicTextInstance::SetHorizonalAlign

; 304  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 305  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpSetHorizontalAlign@@YAPAU_object@@PAU1@0@Z ENDP	; grpSetHorizontalAlign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z PROC		; grpTextHideCursor, COMDAT

; 278  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 279  : 	CGraphicTextInstance* pTextInstance;
; 280  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextHid

; 281  : 	{
; 282  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 287  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextHid:

; 283  : 	}
; 284  : 
; 285  : 	pTextInstance->HideCursor();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?HideCursor@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::HideCursor

; 286  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 287  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextHideCursor@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextHideCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z PROC		; grpTextShowCursor, COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 267  : 	CGraphicTextInstance* pTextInstance;
; 268  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextSho

; 269  : 	{
; 270  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 275  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextSho:

; 271  : 	}
; 272  : 
; 273  : 	pTextInstance->ShowCursor();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?ShowCursor@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::ShowCursor

; 274  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 275  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextShowCursor@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextShowCursor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextUpdate@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextUpdate@@YAPAU_object@@PAU1@0@Z PROC		; grpTextUpdate, COMDAT

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 255  : 	CGraphicTextInstance* pTextInstance;
; 256  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextUpd

; 257  : 	{
; 258  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 263  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextUpd:

; 259  : 	}
; 260  : 
; 261  : 	pTextInstance->Update();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Update@CGraphicTextInstance@@QAEXXZ ; CGraphicTextInstance::Update

; 262  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 263  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextUpdate@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextRender@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextRender@@YAPAU_object@@PAU1@0@Z PROC		; grpTextRender, COMDAT

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 243  : 	CGraphicTextInstance* pTextInstance;
; 244  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	6a 00		 push	 0
  00017	84 c0		 test	 al, al
  00019	75 0c		 jne	 SHORT $LN2@grpTextRen

; 245  : 	{
; 246  : 		return Py_BuildException();

  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 251  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextRen:

; 247  : 	}
; 248  : 
; 249  : 	pTextInstance->Render();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Render@CGraphicTextInstance@@QAEXPAUtagRECT@@@Z ; CGraphicTextInstance::Render

; 250  : 	return Py_BuildNone();

  0002f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 251  : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?grpTextRender@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -20					; size = 4
_fRed$ = -16						; size = 4
_fGreen$ = -12						; size = 4
_fBlue$ = -8						; size = 4
_fAlpha$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetOutLineColor, COMDAT

; 207  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 208  : 	CGraphicTextInstance* pTextInstance;
; 209  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 ec	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN2@grpTextSet
$LN8@grpTextSet:

; 238  : }

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@grpTextSet:

; 210  : 	{
; 211  : 		return Py_BuildException();
; 212  : 	}
; 213  : 
; 214  : 	float fRed;
; 215  : 	if (!PyTuple_GetFloat(poArgs, 1, &fRed))

  0002c	8d 45 f0	 lea	 eax, DWORD PTR _fRed$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN8@grpTextSet

; 216  : 	{
; 217  : 		return Py_BuildException();
; 218  : 	}
; 219  : 	float fGreen;
; 220  : 	if (!PyTuple_GetFloat(poArgs, 2, &fGreen))

  0003f	8d 45 f4	 lea	 eax, DWORD PTR _fGreen$[ebp]
  00042	50		 push	 eax
  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	84 c0		 test	 al, al
  00050	74 cb		 je	 SHORT $LN8@grpTextSet

; 221  : 	{
; 222  : 		return Py_BuildException();
; 223  : 	}
; 224  : 	float fBlue;
; 225  : 	if (!PyTuple_GetFloat(poArgs, 3, &fBlue))

  00052	8d 45 f8	 lea	 eax, DWORD PTR _fBlue$[ebp]
  00055	50		 push	 eax
  00056	6a 03		 push	 3
  00058	56		 push	 esi
  00059	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	84 c0		 test	 al, al
  00063	74 b8		 je	 SHORT $LN8@grpTextSet

; 226  : 	{
; 227  : 		return Py_BuildException();
; 228  : 	}
; 229  : 
; 230  : 	float fAlpha;
; 231  : 	if (!PyTuple_GetFloat(poArgs, 4, &fAlpha))

  00065	8d 45 fc	 lea	 eax, DWORD PTR _fAlpha$[ebp]
  00068	50		 push	 eax
  00069	6a 04		 push	 4
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  00071	83 c4 0c	 add	 esp, 12			; 0000000cH
  00074	84 c0		 test	 al, al
  00076	74 a5		 je	 SHORT $LN8@grpTextSet

; 232  : 	{
; 233  : 		return Py_BuildException();
; 234  : 	}
; 235  : 
; 236  : 	pTextInstance->SetOutLineColor(fRed, fGreen, fBlue, fAlpha);

  00078	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fAlpha$[ebp]
  0007d	83 ec 10	 sub	 esp, 16			; 00000010H
  00080	8b 4d ec	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00083	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00089	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fBlue$[ebp]
  0008e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00094	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fGreen$[ebp]
  00099	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0009f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fRed$[ebp]
  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?SetOutLineColor@CGraphicTextInstance@@QAEXMMMM@Z ; CGraphicTextInstance::SetOutLineColor

; 237  : 	return Py_BuildNone();

  000ae	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000b3	5e		 pop	 esi

; 238  : }

  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
?grpTextSetOutLineColor@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetOutLineColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_fRed$1 = -16						; size = 4
_fGreen$2 = -12						; size = 4
_fBlue$3 = -8						; size = 4
_iColor$4 = -8						; size = 4
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetFontColor, COMDAT

; 163  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 164  : 	CGraphicTextInstance* pTextInstance;
; 165  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	0f 84 c0 00 00
	00		 je	 $LN6@grpTextSet

; 166  : 	{
; 167  : 		return Py_BuildException();
; 168  : 	}
; 169  : 
; 170  : 	if (2 == PyTuple_Size(poArgs))

  00021	56		 push	 esi
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  00028	83 c4 04	 add	 esp, 4
  0002b	83 f8 02	 cmp	 eax, 2
  0002e	75 2c		 jne	 SHORT $LN3@grpTextSet

; 171  : 	{
; 172  : 		int iColor;
; 173  : 		if (!PyTuple_GetInteger(poArgs, 1, &iColor))

  00030	8d 45 f8	 lea	 eax, DWORD PTR _iColor$4[ebp]
  00033	50		 push	 eax
  00034	6a 01		 push	 1
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	84 c0		 test	 al, al
  00041	0f 84 9a 00 00
	00		 je	 $LN6@grpTextSet

; 174  : 		{
; 175  : 			return Py_BuildException();
; 176  : 		}
; 177  : 		pTextInstance->SetColor(DWORD(iColor));

  00047	ff 75 f8	 push	 DWORD PTR _iColor$4[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0004d	e8 00 00 00 00	 call	 ?SetColor@CGraphicTextInstance@@QAEXK@Z ; CGraphicTextInstance::SetColor

; 197  : 	}
; 198  : 	else
; 199  : 	{
; 200  : 		return Py_BuildException();
; 201  : 	}
; 202  : 
; 203  : 	return Py_BuildNone();

  00052	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  00057	5e		 pop	 esi

; 204  : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
$LN3@grpTextSet:

; 178  : 	}
; 179  : 	else if (4 == PyTuple_Size(poArgs))

  0005c	56		 push	 esi
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PyTuple_Size
  00063	83 c4 04	 add	 esp, 4
  00066	83 f8 04	 cmp	 eax, 4
  00069	75 76		 jne	 SHORT $LN6@grpTextSet

; 180  : 	{
; 181  : 		float fRed;
; 182  : 		if (!PyTuple_GetFloat(poArgs, 1, &fRed))

  0006b	8d 45 f0	 lea	 eax, DWORD PTR _fRed$1[ebp]
  0006e	50		 push	 eax
  0006f	6a 01		 push	 1
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	84 c0		 test	 al, al
  0007c	74 63		 je	 SHORT $LN6@grpTextSet

; 183  : 		{
; 184  : 			return Py_BuildException();
; 185  : 		}
; 186  : 		float fGreen;
; 187  : 		if (!PyTuple_GetFloat(poArgs, 2, &fGreen))

  0007e	8d 45 f4	 lea	 eax, DWORD PTR _fGreen$2[ebp]
  00081	50		 push	 eax
  00082	6a 02		 push	 2
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	84 c0		 test	 al, al
  0008f	74 50		 je	 SHORT $LN6@grpTextSet

; 188  : 		{
; 189  : 			return Py_BuildException();
; 190  : 		}
; 191  : 		float fBlue;
; 192  : 		if (!PyTuple_GetFloat(poArgs, 3, &fBlue))

  00091	8d 45 f8	 lea	 eax, DWORD PTR _fBlue$3[ebp]
  00094	50		 push	 eax
  00095	6a 03		 push	 3
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ?PyTuple_GetFloat@@YA_NPAU_object@@HPAM@Z ; PyTuple_GetFloat
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	84 c0		 test	 al, al
  000a2	74 3d		 je	 SHORT $LN6@grpTextSet

; 193  : 		{
; 194  : 			return Py_BuildException();
; 195  : 		}
; 196  : 		pTextInstance->SetColor(fRed, fGreen, fBlue);

  000a4	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _fBlue$3[ebp]
  000a9	83 ec 10	 sub	 esp, 16			; 00000010H
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  000af	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000b7	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000bd	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _fGreen$2[ebp]
  000c2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c8	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _fRed$1[ebp]
  000cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d2	e8 00 00 00 00	 call	 ?SetColor@CGraphicTextInstance@@QAEXMMMM@Z ; CGraphicTextInstance::SetColor

; 197  : 	}
; 198  : 	else
; 199  : 	{
; 200  : 		return Py_BuildException();
; 201  : 	}
; 202  : 
; 203  : 	return Py_BuildNone();

  000d7	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000dc	5e		 pop	 esi

; 204  : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
$LN6@grpTextSet:
  000e1	6a 00		 push	 0
  000e3	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  000e8	83 c4 04	 add	 esp, 4
  000eb	5e		 pop	 esi
  000ec	8b e5		 mov	 esp, ebp
  000ee	5d		 pop	 ebp
  000ef	c3		 ret	 0
?grpTextSetFontColor@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetFontColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -48					; size = 4
_szFontName$ = -44					; size = 4
_stFontName$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetFontName, COMDAT

; 141  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]

; 142  : 	CGraphicTextInstance* pTextInstance;
; 143  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  0002c	8d 45 d0	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  0002f	50		 push	 eax
  00030	6a 00		 push	 0
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	75 0c		 jne	 SHORT $LN2@grpTextSet
$LN20@grpTextSet:

; 160  : }

  0003f	6a 00		 push	 0
  00041	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00046	83 c4 04	 add	 esp, 4
  00049	eb 65		 jmp	 SHORT $LN1@grpTextSet
$LN2@grpTextSet:

; 144  : 	{
; 145  : 		return Py_BuildException();
; 146  : 	}
; 147  : 
; 148  : 	char* szFontName;
; 149  : 	if (!PyTuple_GetString(poArgs, 1, &szFontName))

  0004b	8d 45 d4	 lea	 eax, DWORD PTR _szFontName$[ebp]
  0004e	50		 push	 eax
  0004f	6a 01		 push	 1
  00051	56		 push	 esi
  00052	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00057	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005a	84 c0		 test	 al, al
  0005c	74 e1		 je	 SHORT $LN20@grpTextSet

; 154  : 	std::string stFontName = szFontName;

  0005e	ff 75 d4	 push	 DWORD PTR _szFontName$[ebp]
  00061	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
  00064	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00069	6a 04		 push	 4
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_04FAHLGLIA@?4fnt@
  00070	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 154  : 	std::string stFontName = szFontName;

  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007a	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2301 :         return _BUF_SIZE <= _Myres;

  0007f	83 7d ec 10	 cmp	 DWORD PTR _stFontName$[ebp+20], 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00083	8d 45 d8	 lea	 eax, DWORD PTR _stFontName$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 157  : 	CResource* pResource = CResourceManager::Instance().GetResourcePointer(stFontName.c_str());

  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0008c	0f 43 45 d8	 cmovae	 eax, DWORD PTR _stFontName$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 157  : 	CResource* pResource = CResourceManager::Instance().GetResourcePointer(stFontName.c_str());

  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 158  : 	pTextInstance->SetTextPointer(static_cast<CGraphicText*>(pResource));

  00096	8b 4d d0	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ?SetTextPointer@CGraphicTextInstance@@QAEXPAVCGraphicText@@@Z ; CGraphicTextInstance::SetTextPointer

; 159  : 	return Py_BuildNone();

  0009f	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  000a4	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
  000a7	8b f0		 mov	 esi, eax
  000a9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ae	8b c6		 mov	 eax, esi
$LN1@grpTextSet:

; 160  : }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5e		 pop	 esi
  000bc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	33 cd		 xor	 ecx, ebp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _stFontName$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?grpTextSetFontName@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetFontName
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextGetText@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextGetText@@YAPAU_object@@PAU1@0@Z PROC		; grpTextGetText, COMDAT

; 130  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 131  : 	CGraphicTextInstance* pTextInstance;
; 132  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextGet

; 133  : 	{
; 134  : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 138  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextGet:

; 137  : 	return Py_BuildValue("s", pTextInstance->GetValueStringReference().c_str());

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?GetValueStringReference@CGraphicTextInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicTextInstance::GetValueStringReference
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0002f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00033	72 02		 jb	 SHORT $LN7@grpTextGet

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@grpTextGet:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp

; 137  : 	return Py_BuildValue("s", pTextInstance->GetValueStringReference().c_str());

  00037	50		 push	 eax
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_01LKDEMHDF@s@
  0003d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00043	83 c4 08	 add	 esp, 8

; 138  : }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
?grpTextGetText@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextGetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextOutline@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_bValue$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextOutline@@YAPAU_object@@PAU1@0@Z PROC		; grpTextOutline, COMDAT

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 113  : 	CGraphicTextInstance* pTextInstance;
; 114  : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextOut
$LN5@grpTextOut:

; 127  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextOut:

; 115  : 	{
; 116  : 		return Py_BuildException();
; 117  : 	}
; 118  : 
; 119  : 	bool bValue;
; 120  : 	if (!PyTuple_GetBoolean(poArgs, 1, &bValue))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _bValue$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z ; PyTuple_GetBoolean
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextOut

; 121  : 	{
; 122  : 		return Py_BuildException();
; 123  : 	}
; 124  : 
; 125  : 	pTextInstance->SetOutline(bValue);

  0003e	ff 75 fc	 push	 DWORD PTR _bValue$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetOutline@CGraphicTextInstance@@QAEX_N@Z ; CGraphicTextInstance::SetOutline

; 126  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 127  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpTextOutline@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextOutline
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_bValue$ = -4						; size = 1
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z PROC		; grpTextSetSecret, COMDAT

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 95   : 	CGraphicTextInstance* pTextInstance;
; 96   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextSet
$LN5@grpTextSet:

; 109  : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextSet:

; 97   : 	{
; 98   : 		return Py_BuildException();
; 99   : 	}
; 100  : 
; 101  : 	bool bValue;
; 102  : 	if (!PyTuple_GetBoolean(poArgs, 1, &bValue))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _bValue$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetBoolean@@YA_NPAU_object@@HPA_N@Z ; PyTuple_GetBoolean
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextSet

; 103  : 	{
; 104  : 		return Py_BuildException();
; 105  : 	}
; 106  : 
; 107  : 	pTextInstance->SetSecret(bValue);

  0003e	ff 75 fc	 push	 DWORD PTR _bValue$[ebp]
  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00044	e8 00 00 00 00	 call	 ?SetSecret@CGraphicTextInstance@@QAEX_N@Z ; CGraphicTextInstance::SetSecret

; 108  : 	return Py_BuildNone();

  00049	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 109  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
?grpTextSetSecret@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextSetSecret
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetText@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -8					; size = 4
_szText$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetText@@YAPAU_object@@PAU1@0@Z PROC		; grpTextSetText, COMDAT

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 77   : 	CGraphicTextInstance* pTextInstance;
; 78   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f8	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextSet
$LN5@grpTextSet:

; 91   : }

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextSet:

; 79   : 	{
; 80   : 		return Py_BuildException();
; 81   : 	}
; 82   : 
; 83   : 	char* szText;
; 84   : 	if (!PyTuple_GetString(poArgs, 1, &szText))

  00029	8d 45 fc	 lea	 eax, DWORD PTR _szText$[ebp]
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  00032	e8 00 00 00 00	 call	 ?PyTuple_GetString@@YA_NPAU_object@@HPAPAD@Z ; PyTuple_GetString
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003a	84 c0		 test	 al, al
  0003c	74 dd		 je	 SHORT $LN5@grpTextSet

; 85   : 	{
; 86   : 		return Py_BuildException();
; 87   : 	}
; 88   : 
; 89   : 	pTextInstance->SetValue(szText);

  0003e	8b 4d f8	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  00041	6a ff		 push	 -1
  00043	ff 75 fc	 push	 DWORD PTR _szText$[ebp]
  00046	e8 00 00 00 00	 call	 ?SetValue@CGraphicTextInstance@@QAEXPBDI@Z ; CGraphicTextInstance::SetValue

; 90   : 	return Py_BuildNone();

  0004b	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 91   : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c3		 ret	 0
?grpTextSetText@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextSetText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -12					; size = 4
_ix$ = -8						; size = 4
_iy$ = -4						; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z PROC	; grpTextSetPosition, COMDAT

; 53   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 54   : 	CGraphicTextInstance* pTextInstance;
; 55   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 f4	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _poArgs$[ebp]
  0000d	50		 push	 eax
  0000e	6a 00		 push	 0
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	84 c0		 test	 al, al
  0001b	75 0f		 jne	 SHORT $LN2@grpTextSet
$LN6@grpTextSet:

; 73   : }

  0001d	6a 00		 push	 0
  0001f	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN2@grpTextSet:

; 56   : 	{
; 57   : 		return Py_BuildException();
; 58   : 	}
; 59   : 
; 60   : 	int ix;
; 61   : 	if (!PyTuple_GetInteger(poArgs, 1, &ix))

  0002c	8d 45 f8	 lea	 eax, DWORD PTR _ix$[ebp]
  0002f	50		 push	 eax
  00030	6a 01		 push	 1
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	84 c0		 test	 al, al
  0003d	74 de		 je	 SHORT $LN6@grpTextSet

; 62   : 	{
; 63   : 		return Py_BuildException();
; 64   : 	}
; 65   : 	int iy;
; 66   : 	if (!PyTuple_GetInteger(poArgs, 2, &iy))

  0003f	8d 45 fc	 lea	 eax, DWORD PTR _iy$[ebp]
  00042	50		 push	 eax
  00043	6a 02		 push	 2
  00045	56		 push	 esi
  00046	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	84 c0		 test	 al, al
  00050	74 cb		 je	 SHORT $LN6@grpTextSet

; 67   : 	{
; 68   : 		return Py_BuildException();
; 69   : 	}
; 70   : 
; 71   : 	pTextInstance->SetPosition((float) ix, (float) iy);

  00052	66 0f 6e 45 fc	 movd	 xmm0, DWORD PTR _iy$[ebp]
  00057	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0005d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00060	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00068	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0006e	66 0f 6e 45 f8	 movd	 xmm0, DWORD PTR _ix$[ebp]
  00073	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00076	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007b	e8 00 00 00 00	 call	 ?SetPosition@CGraphicTextInstance@@QAEXMMM@Z ; CGraphicTextInstance::SetPosition

; 72   : 	return Py_BuildNone();

  00080	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone
  00085	5e		 pop	 esi

; 73   : }

  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
?grpTextSetPosition@@YAPAU_object@@PAU1@0@Z ENDP	; grpTextSetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextGetSize@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_width$ = -12						; size = 4
_height$ = -8						; size = 4
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextGetSize@@YAPAU_object@@PAU1@0@Z PROC		; grpTextGetSize, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 41   : 	CGraphicTextInstance* pTextInstance;
; 42   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00009	50		 push	 eax
  0000a	6a 00		 push	 0
  0000c	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000f	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH
  00017	84 c0		 test	 al, al
  00019	75 0e		 jne	 SHORT $LN2@grpTextGet

; 43   : 	{
; 44   : 		return Py_BuildException();

  0001b	6a 00		 push	 0
  0001d	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00022	83 c4 04	 add	 esp, 4

; 50   : }

  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
$LN2@grpTextGet:

; 45   : 	}
; 46   : 
; 47   : 	int width, height;
; 48   : 	pTextInstance->GetTextSize(&width, &height);

  00029	8b 4d fc	 mov	 ecx, DWORD PTR _pTextInstance$[ebp]
  0002c	8d 45 f8	 lea	 eax, DWORD PTR _height$[ebp]
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR _width$[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?GetTextSize@CGraphicTextInstance@@QAEXPAH0@Z ; CGraphicTextInstance::GetTextSize

; 49   : 	return Py_BuildValue("(i, i)", width, height);

  00039	ff 75 f8	 push	 DWORD PTR _height$[ebp]
  0003c	ff 75 f4	 push	 DWORD PTR _width$[ebp]
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06BGHJALJH@?$CIi?0?5i?$CJ@
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 50   : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?grpTextGetSize@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextGetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextDestroy@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_pTextInstance$ = -4					; size = 4
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextDestroy@@YAPAU_object@@PAU1@0@Z PROC		; grpTextDestroy, COMDAT

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 29   : 	CGraphicTextInstance* pTextInstance;
; 30   : 	if (!PyTuple_GetTextInstance(poArgs, 0, &pTextInstance))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pTextInstance$[ebp]
  00007	50		 push	 eax
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _poArgs$[ebp]
  0000d	e8 00 00 00 00	 call	 ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ; PyTuple_GetTextInstance
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH
  00015	84 c0		 test	 al, al
  00017	75 0e		 jne	 SHORT $LN2@grpTextDes

; 31   : 	{
; 32   : 		return Py_BuildException();

  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?Py_BuildException@@YAPAU_object@@PBDZZ ; Py_BuildException
  00020	83 c4 04	 add	 esp, 4

; 37   : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
$LN2@grpTextDes:

; 33   : 	}
; 34   : 
; 35   : 	CGraphicTextInstance::Delete(pTextInstance);

  00027	ff 75 fc	 push	 DWORD PTR _pTextInstance$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Delete@CGraphicTextInstance@@SAXPAV1@@Z ; CGraphicTextInstance::Delete
  0002f	83 c4 04	 add	 esp, 4

; 36   : 	return Py_BuildNone();

  00032	e8 00 00 00 00	 call	 ?Py_BuildNone@@YAPAU_object@@XZ ; Py_BuildNone

; 37   : }

  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
?grpTextDestroy@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?grpTextGenerate@@YAPAU_object@@PAU1@0@Z
_TEXT	SEGMENT
_poSelf$ = 8						; size = 4
_poArgs$ = 12						; size = 4
?grpTextGenerate@@YAPAU_object@@PAU1@0@Z PROC		; grpTextGenerate, COMDAT

; 23   : 	CGraphicTextInstance * pTextInstance = CGraphicTextInstance::New();

  00000	e8 00 00 00 00	 call	 ?New@CGraphicTextInstance@@SAPAV1@XZ ; CGraphicTextInstance::New

; 24   : 	return Py_BuildValue("i", pTextInstance);

  00005	50		 push	 eax
  00006	68 00 00 00 00	 push	 OFFSET ??_C@_01KBJDNOO@i@
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00011	83 c4 08	 add	 esp, 8

; 25   : }

  00014	c3		 ret	 0
?grpTextGenerate@@YAPAU_object@@PAU1@0@Z ENDP		; grpTextGenerate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z
_TEXT	SEGMENT
_handle$ = -4						; size = 4
_poArgs$ = 8						; size = 4
_pos$ = 12						; size = 4
_ppTextInstance$ = 16					; size = 4
?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z PROC ; PyTuple_GetTextInstance, COMDAT

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 5    : 	int handle;
; 6    : 	if (!PyTuple_GetInteger(poArgs, pos, &handle))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _handle$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _pos$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _poArgs$[ebp]
  0000e	e8 00 00 00 00	 call	 ?PyTuple_GetInteger@@YA_NPAU_object@@HPAH@Z ; PyTuple_GetInteger
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
  00016	84 c0		 test	 al, al
  00018	74 12		 je	 SHORT $LN5@PyTuple_Ge

; 7    : 	{
; 8    : 		return false;
; 9    : 	}
; 10   : 
; 11   : 	if (!handle)

  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _handle$[ebp]
  0001d	85 c9		 test	 ecx, ecx
  0001f	74 0b		 je	 SHORT $LN5@PyTuple_Ge

; 14   : 	}
; 15   : 
; 16   : 	*ppTextInstance = (CGraphicTextInstance*)handle;

  00021	8b 45 10	 mov	 eax, DWORD PTR _ppTextInstance$[ebp]
  00024	89 08		 mov	 DWORD PTR [eax], ecx

; 17   : 
; 18   : 	return true;

  00026	b0 01		 mov	 al, 1

; 19   : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
$LN5@PyTuple_Ge:

; 12   : 	{
; 13   : 		return false;

  0002c	32 c0		 xor	 al, al

; 19   : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?PyTuple_GetTextInstance@@YA_NPAU_object@@HPAPAVCGraphicTextInstance@@@Z ENDP ; PyTuple_GetTextInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGraphicTextModule.cpp
;	COMDAT ?initgrpText@@YAXXZ
_TEXT	SEGMENT
?initgrpText@@YAXXZ PROC				; initgrpText, COMDAT

; 537  : 	static PyMethodDef s_methods[] =
; 538  : 	{
; 539  : 		{ "Update",								grpTextUpdate,								METH_VARARGS },
; 540  : 		{ "Render",								grpTextRender,								METH_VARARGS },
; 541  : 		{ "Generate",							grpTextGenerate,							METH_VARARGS },
; 542  : 		{ "Destroy",							grpTextDestroy,								METH_VARARGS },
; 543  : 		{ "SetFontName",						grpTextSetFontName,							METH_VARARGS },
; 544  : 		{ "SetFontColor",						grpTextSetFontColor,						METH_VARARGS },
; 545  : 		{ "SetOutLineColor",					grpTextSetOutLineColor,						METH_VARARGS },
; 546  : 		{ "SetSecret",							grpTextSetSecret,							METH_VARARGS },
; 547  : 		{ "SetOutline",							grpTextOutline,								METH_VARARGS },
; 548  : 		{ "SetText",							grpTextSetText,								METH_VARARGS },
; 549  : 		{ "GetText",							grpTextGetText,								METH_VARARGS },
; 550  : 		{ "GetSize",							grpTextGetSize,								METH_VARARGS },
; 551  : 		{ "SetPosition",						grpTextSetPosition,							METH_VARARGS },
; 552  : 		{ "ShowCursor",							grpTextShowCursor,							METH_VARARGS },
; 553  : 		{ "HideCursor",							grpTextHideCursor,							METH_VARARGS },
; 554  : 		{ "SetHorizontalAlign",					grpSetHorizontalAlign,						METH_VARARGS },
; 555  : 		{ "SetVerticalAlign",					grpSetVerticalAlign,						METH_VARARGS },
; 556  : 		{ "SetMax",								grpSetMax,									METH_VARARGS },
; 557  : 		{ "GetSplitingTextLineCount",			grpGetSplitingTextLineCount,				METH_VARARGS },
; 558  : 		{ "GetSplitingTextLine",				grpGetSplitingTextLine,						METH_VARARGS },
; 559  : 		{ "PixelPositionToCharacterPosition",	grpTextPixelPositionToCharacterPosition,	METH_VARARGS },
; 560  : 
; 561  : 		{ "ConvertMoneyText",					ConvertMoneyText,							METH_VARARGS },
; 562  : 
; 563  : 		{ NULL, NULL, NULL },
; 564  : 	};
; 565  : 
; 566  : 	Py_InitModule("grpText", s_methods);

  00000	68 f5 03 00 00	 push	 1013			; 000003f5H
  00005	6a 00		 push	 0
  00007	6a 00		 push	 0
  00009	68 00 00 00 00	 push	 OFFSET ?s_methods@?1??initgrpText@@YAXXZ@4PAUPyMethodDef@@A
  0000e	68 00 00 00 00	 push	 OFFSET ??_C@_07OAPMKONH@grpText@
  00013	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_InitModule4
  00019	83 c4 14	 add	 esp, 20			; 00000014H

; 567  : }

  0001c	c3		 ret	 0
?initgrpText@@YAXXZ ENDP				; initgrpText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv509 = -12						; size = 4
$T1 = -8						; size = 4
tv521 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv514 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3422 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3423 :         // append [_Ptr, _Ptr + _Count)
; 3424 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3425 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3426 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3427 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3428 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3429 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3430 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3443 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4939 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4941 :         }
; 4942 : 
; 4943 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4885 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv514[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv514[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4889 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv514[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4947 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 77   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4959 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR $T1[ebp], 16	; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv521[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv509[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4960 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv521[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv509[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00123	41		 inc	 ecx

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3434 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4940 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2674 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 415  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2740 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memmove

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00054	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4885 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN42@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN42@basic_stri
$LN30@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN42@basic_stri
$LN31@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN42@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN40@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
