; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\Distribute\PythonGridSlotWindow.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?OnUpdateRenderBox@CWindow@UI@@UAEXXZ		; UI::CWindow::OnUpdateRenderBox
PUBLIC	?OnChangePosition@CWindow@UI@@UAEXXZ		; UI::CWindow::OnChangePosition
PUBLIC	?SetColor@CWindow@UI@@UAEXK@Z			; UI::CWindow::SetColor
PUBLIC	?IsWindow@CWindow@UI@@UAEHXZ			; UI::CWindow::IsWindow
PUBLIC	?Type@CGridSlotWindow@UI@@SAKXZ			; UI::CGridSlotWindow::Type
PUBLIC	??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z	; UI::CGridSlotWindow::CGridSlotWindow
PUBLIC	??1CGridSlotWindow@UI@@UAE@XZ			; UI::CGridSlotWindow::~CGridSlotWindow
PUBLIC	?Destroy@CGridSlotWindow@UI@@QAEXXZ		; UI::CGridSlotWindow::Destroy
PUBLIC	?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z ; UI::CGridSlotWindow::ArrangeGridSlot
PUBLIC	?__Initialize@CGridSlotWindow@UI@@IAEXXZ	; UI::CGridSlotWindow::__Initialize
PUBLIC	?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z ; UI::CGridSlotWindow::GetPickedSlotPointer
PUBLIC	?OnMouseOver@CGridSlotWindow@UI@@MAEXXZ		; UI::CGridSlotWindow::OnMouseOver
PUBLIC	?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetPickedSlotPointer
PUBLIC	?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
PUBLIC	?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
PUBLIC	?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ; UI::CGridSlotWindow::GetPickedGridSlotPosition
PUBLIC	?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::CheckMoving
PUBLIC	?OnIsType@CGridSlotWindow@UI@@MAEHK@Z		; UI::CGridSlotWindow::OnIsType
PUBLIC	?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ	; UI::CGridSlotWindow::OnRefreshSlot
PUBLIC	?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ	; UI::CGridSlotWindow::OnRenderPickingSlot
PUBLIC	?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
PUBLIC	??_GCGridSlotWindow@UI@@UAEPAXI@Z		; UI::CGridSlotWindow::`scalar deleting destructor'
PUBLIC	??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
PUBLIC	?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::push_back
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
PUBLIC	??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGridSlotWindow@UI@@6B@			; UI::CGridSlotWindow::`vftable'
PUBLIC	??_C@_03LIHNMIHG@?$CIi?$CJ@			; `string'
PUBLIC	??_C@_0N@CBOPEHFH@OnOverInItem@			; `string'
PUBLIC	??_C@_0BA@BFEGLPNH@CGridSlotWindow@		; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_R1A@?0A@EA@CWindow@UI@@8			; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWindow@UI@@@8				; UI::CWindow `RTTI Type Descriptor'
PUBLIC	??_R3CWindow@UI@@8				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWindow@UI@@8				; UI::CWindow::`RTTI Base Class Array'
PUBLIC	??_R4CGridSlotWindow@UI@@6B@			; UI::CGridSlotWindow::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGridSlotWindow@UI@@@8			; UI::CGridSlotWindow `RTTI Type Descriptor'
PUBLIC	??_R3CGridSlotWindow@UI@@8			; UI::CGridSlotWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGridSlotWindow@UI@@8			; UI::CGridSlotWindow::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGridSlotWindow@UI@@8		; UI::CGridSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CSlotWindow@UI@@8			; UI::CSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCSlotWindow@UI@@@8			; UI::CSlotWindow `RTTI Type Descriptor'
PUBLIC	??_R3CSlotWindow@UI@@8				; UI::CSlotWindow::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSlotWindow@UI@@8				; UI::CSlotWindow::`RTTI Base Class Array'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	__imp__Py_BuildValue:PROC
EXTRN	?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z:PROC ; PyCallClassMemberFunc
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	?RenderBar2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBar2d
EXTRN	?SetDiffuseColor@CScreen@@QAEXMMMM@Z:PROC	; CScreen::SetDiffuseColor
EXTRN	?IsAttaching@CWindowManager@UI@@QAEHXZ:PROC	; UI::CWindowManager::IsAttaching
EXTRN	?GetAttachingIndex@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingIndex
EXTRN	?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ:PROC ; UI::CWindowManager::GetAttachingSlotNumber
EXTRN	?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z:PROC ; UI::CWindowManager::GetAttachingIconSize
EXTRN	?SetSize@CWindow@UI@@QAEXJJ@Z:PROC		; UI::CWindow::SetSize
EXTRN	?GetMouseLocalPosition@CWindow@UI@@QAEXAAJ0@Z:PROC ; UI::CWindow::GetMouseLocalPosition
EXTRN	?IsShow@CWindow@UI@@UAE_NXZ:PROC		; UI::CWindow::IsShow
EXTRN	?OnAfterRender@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnAfterRender
EXTRN	?OnUpdateLockedCursor@CWindow@UI@@UAEXHJ@Z:PROC	; UI::CWindow::OnUpdateLockedCursor
EXTRN	?OnSetFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnSetFocus
EXTRN	?OnKillFocus@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnKillFocus
EXTRN	?OnMouseDrag@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMouseDrag
EXTRN	?OnMouseOverIn@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnMouseOverIn
EXTRN	?OnDrop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnDrop
EXTRN	?OnTop@CWindow@UI@@UAEXXZ:PROC			; UI::CWindow::OnTop
EXTRN	?OnIMEUpdate@CWindow@UI@@UAEXXZ:PROC		; UI::CWindow::OnIMEUpdate
EXTRN	?OnMoveWindow@CWindow@UI@@UAEXJJ@Z:PROC		; UI::CWindow::OnMoveWindow
EXTRN	?OnIMETabEvent@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnIMETabEvent
EXTRN	?OnIMEReturnEvent@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEReturnEvent
EXTRN	?OnIMEUpdateSelectionEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEUpdateSelectionEvent
EXTRN	?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z:PROC	; UI::CWindow::OnIMEKeyDownEvent
EXTRN	?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnIMEChangeCodePage
EXTRN	?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenCandidateListEvent
EXTRN	?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseCandidateListEvent
EXTRN	?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMEOpenReadingWndEvent
EXTRN	?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnIMECloseReadingWndEvent
EXTRN	?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseRightButtonUp
EXTRN	?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseRightButtonDoubleClick
EXTRN	?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ:PROC ; UI::CWindow::OnMouseMiddleButtonDown
EXTRN	?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnMouseMiddleButtonUp
EXTRN	?OnScrollEvent@CWindow@UI@@UAEHABH@Z:PROC	; UI::CWindow::OnScrollEvent
EXTRN	?OnKeyDown@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyDown
EXTRN	?OnKeyUp@CWindow@UI@@UAEHH@Z:PROC		; UI::CWindow::OnKeyUp
EXTRN	?OnPressReturnKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressReturnKey
EXTRN	?OnPressEscapeKey@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::OnPressEscapeKey
EXTRN	?OnPressExitKey@CWindow@UI@@UAEHXZ:PROC		; UI::CWindow::OnPressExitKey
EXTRN	?iSetRenderingRect@CWindow@UI@@UAEXHHHH@Z:PROC	; UI::CWindow::iSetRenderingRect
EXTRN	?SetRenderingRect@CWindow@UI@@UAEXMMMM@Z:PROC	; UI::CWindow::SetRenderingRect
EXTRN	?GetRenderingWidth@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::GetRenderingWidth
EXTRN	?GetRenderingHeight@CWindow@UI@@UAEHXZ:PROC	; UI::CWindow::GetRenderingHeight
EXTRN	?OnSetRenderingRect@CWindow@UI@@EAEXXZ:PROC	; UI::CWindow::OnSetRenderingRect
EXTRN	??0CSlotWindow@UI@@QAE@PAU_object@@@Z:PROC	; UI::CSlotWindow::CSlotWindow
EXTRN	??1CSlotWindow@UI@@UAE@XZ:PROC			; UI::CSlotWindow::~CSlotWindow
EXTRN	?Destroy@CSlotWindow@UI@@QAEXXZ:PROC		; UI::CSlotWindow::Destroy
EXTRN	?AppendSlot@CSlotWindow@UI@@QAEXKHHHH@Z:PROC	; UI::CSlotWindow::AppendSlot
EXTRN	?OnOverOutItem@CSlotWindow@UI@@QAEXXZ:PROC	; UI::CSlotWindow::OnOverOutItem
EXTRN	?OnUpdate@CSlotWindow@UI@@MAEXXZ:PROC		; UI::CSlotWindow::OnUpdate
EXTRN	?OnRender@CSlotWindow@UI@@MAEXXZ:PROC		; UI::CSlotWindow::OnRender
EXTRN	?OnMouseLeftButtonDown@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonDown
EXTRN	?OnMouseLeftButtonUp@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonUp
EXTRN	?OnMouseRightButtonDown@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseRightButtonDown
EXTRN	?OnMouseLeftButtonDoubleClick@CSlotWindow@UI@@MAEHXZ:PROC ; UI::CSlotWindow::OnMouseLeftButtonDoubleClick
EXTRN	?OnMouseOverOut@CSlotWindow@UI@@MAEXXZ:PROC	; UI::CSlotWindow::OnMouseOverOut
EXTRN	?OnRenderSelectedSlot@CSlotWindow@UI@@MAEXXZ:PROC ; UI::CSlotWindow::OnRenderSelectedSlot
EXTRN	?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z:PROC ; UI::CSlotWindow::GetSlotPointer
EXTRN	?GetPickedSlotPointer@CSlotWindow@UI@@MAEHPAPAUSSlot@12@@Z:PROC ; UI::CSlotWindow::GetPickedSlotPointer
EXTRN	?OnIsType@CSlotWindow@UI@@MAEHK@Z:PROC		; UI::CSlotWindow::OnIsType
EXTRN	??_ECGridSlotWindow@UI@@UAEPAXI@Z:PROC		; UI::CGridSlotWindow::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A DD 01H DUP (?) ; CSingleton<CPythonGraphic>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A DD 01H DUP (?) ; CSingleton<UI::CWindowManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
_BSS	SEGMENT
?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA DD 01H DUP (?) ; `UI::CGridSlotWindow::Type'::`2'::s_Type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA DD 01H DUP (?) ; `UI::CGridSlotWindow::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_R2CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R2CSlotWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CSlotWindow@UI@@8 ; UI::CSlotWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R3CSlotWindow@UI@@8 DD 00H				; UI::CSlotWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSlotWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCSlotWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CSlotWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSlotWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CSlotWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSlotWindow@UI@@8 DD FLAT:??_R0?AVCSlotWindow@UI@@@8 ; UI::CSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGridSlotWindow@UI@@8 DD FLAT:??_R0?AVCGridSlotWindow@UI@@@8 ; UI::CGridSlotWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R2CGridSlotWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CGridSlotWindow@UI@@8 ; UI::CGridSlotWindow::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSlotWindow@UI@@8
	DD	FLAT:??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R3CGridSlotWindow@UI@@8
rdata$r	SEGMENT
??_R3CGridSlotWindow@UI@@8 DD 00H			; UI::CGridSlotWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGridSlotWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCGridSlotWindow@UI@@@8 DD FLAT:??_7type_info@@6B@ ; UI::CGridSlotWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGridSlotWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGridSlotWindow@UI@@6B@
rdata$r	SEGMENT
??_R4CGridSlotWindow@UI@@6B@ DD 00H			; UI::CGridSlotWindow::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGridSlotWindow@UI@@@8
	DD	FLAT:??_R3CGridSlotWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R2CWindow@UI@@8
rdata$r	SEGMENT
??_R2CWindow@UI@@8 DD FLAT:??_R1A@?0A@EA@CWindow@UI@@8	; UI::CWindow::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CWindow@UI@@8
rdata$r	SEGMENT
??_R3CWindow@UI@@8 DD 00H				; UI::CWindow::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWindow@UI@@@8
data$rs	SEGMENT
??_R0?AVCWindow@UI@@@8 DD FLAT:??_7type_info@@6B@	; UI::CWindow `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWindow@UI@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CWindow@UI@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWindow@UI@@8 DD FLAT:??_R0?AVCWindow@UI@@@8 ; UI::CWindow::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWindow@UI@@8
rdata$r	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BFEGLPNH@CGridSlotWindow@
CONST	SEGMENT
??_C@_0BA@BFEGLPNH@CGridSlotWindow@ DB 'CGridSlotWindow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CBOPEHFH@OnOverInItem@
CONST	SEGMENT
??_C@_0N@CBOPEHFH@OnOverInItem@ DB 'OnOverInItem', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LIHNMIHG@?$CIi?$CJ@
CONST	SEGMENT
??_C@_03LIHNMIHG@?$CIi?$CJ@ DB '(i)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CGridSlotWindow@UI@@6B@
CONST	SEGMENT
??_7CGridSlotWindow@UI@@6B@ DD FLAT:??_R4CGridSlotWindow@UI@@6B@ ; UI::CGridSlotWindow::`vftable'
	DD	FLAT:??_ECGridSlotWindow@UI@@UAEPAXI@Z
	DD	FLAT:?IsShow@CWindow@UI@@UAE_NXZ
	DD	FLAT:?OnRender@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnAfterRender@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnUpdateRenderBox@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnUpdate@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnUpdateLockedCursor@CWindow@UI@@UAEXHJ@Z
	DD	FLAT:?OnChangePosition@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnSetFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnKillFocus@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseDrag@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnMouseOverIn@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMouseOverOut@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnMouseOver@CGridSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnDrop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnTop@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnIMEUpdate@CWindow@UI@@UAEXXZ
	DD	FLAT:?OnMoveWindow@CWindow@UI@@UAEXJJ@Z
	DD	FLAT:?OnIMETabEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEReturnEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEUpdateSelectionEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEKeyDownEvent@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnIMEChangeCodePage@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseCandidateListEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMEOpenReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnIMECloseReadingWndEvent@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseLeftButtonDown@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseLeftButtonUp@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseLeftButtonDoubleClick@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseRightButtonDown@CSlotWindow@UI@@MAEHXZ
	DD	FLAT:?OnMouseRightButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseRightButtonDoubleClick@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonDown@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnMouseMiddleButtonUp@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnScrollEvent@CWindow@UI@@UAEHABH@Z
	DD	FLAT:?OnKeyDown@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnKeyUp@CWindow@UI@@UAEHH@Z
	DD	FLAT:?OnPressReturnKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressEscapeKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnPressExitKey@CWindow@UI@@UAEHXZ
	DD	FLAT:?SetColor@CWindow@UI@@UAEXK@Z
	DD	FLAT:?OnIsType@CGridSlotWindow@UI@@MAEHK@Z
	DD	FLAT:?IsWindow@CWindow@UI@@UAEHXZ
	DD	FLAT:?iSetRenderingRect@CWindow@UI@@UAEXHHHH@Z
	DD	FLAT:?SetRenderingRect@CWindow@UI@@UAEXMMMM@Z
	DD	FLAT:?GetRenderingWidth@CWindow@UI@@UAEHXZ
	DD	FLAT:?GetRenderingHeight@CWindow@UI@@UAEHXZ
	DD	FLAT:?OnSetRenderingRect@CWindow@UI@@EAEXXZ
	DD	FLAT:?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
	DD	FLAT:?OnRenderSelectedSlot@CSlotWindow@UI@@MAEXXZ
	DD	FLAT:?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
	DD	FLAT:?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z$0
__ehfuncinfo$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAUSSlot@CSlotWindow@UI@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@1@ABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAUSSlot@CSlotWindow@UI@@@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEPAU?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@1@QAU21@ABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z$1
__ehfuncinfo$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ$0
__ehfuncinfo$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$1
__ehfuncinfo$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z$0
__ehfuncinfo$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGridSlotWindow@UI@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGridSlotWindow@UI@@SAKXZ$0
__ehfuncinfo$?Type@CGridSlotWindow@UI@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGridSlotWindow@UI@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z PROC ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ENDP ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z PROC ; std::_Zero_range<UI::CSlotWindow::SSlot * *>, COMDAT

; 1878 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1879 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1880 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1881 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1882 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ENDP ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
tv486 = 8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00012	0f 87 ec 00 00
	00		 ja	 $LN76@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00020	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	89 4d fc	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0002d	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00030	8b d1		 mov	 edx, ecx
  00032	d1 ea		 shr	 edx, 1
  00034	2b c2		 sub	 eax, edx
  00036	3b c8		 cmp	 ecx, eax
  00038	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0003a	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00040	89 45 08	 mov	 DWORD PTR tv486[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00043	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f8		 mov	 edi, eax
  0004d	eb 43		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00052	3b c3		 cmp	 eax, ebx
  00054	73 1c		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00056	8b c3		 mov	 eax, ebx
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00058	c1 e0 02	 shl	 eax, 2
  0005b	89 45 08	 mov	 DWORD PTR tv486[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b f8		 mov	 edi, eax
  00070	eb 20		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00072	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00077	0f 87 8c 00 00
	00		 ja	 $LN77@Resize_rea
  0007d	eb d9		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  0007f	85 c0		 test	 eax, eax
  00081	74 0d		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00089	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0008c	8b f8		 mov	 edi, eax
  0008e	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00090	33 ff		 xor	 edi, edi
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00092	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);

  00095	8b c3		 mov	 eax, ebx
  00097	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00099	8d 0c 97	 lea	 ecx, DWORD PTR [edi+edx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);

  0009c	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0009f	50		 push	 eax
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a6	57		 push	 edi
  000a7	ff 76 04	 push	 DWORD PTR [esi+4]
  000aa	ff 36		 push	 DWORD PTR [esi]
  000ac	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSSlot@CSlotWindow@UI@@PAPAU123@@std@@YAPAPAUSSlot@CSlotWindow@UI@@PAPAU123@00@Z ; std::_Copy_memmove<UI::CSlotWindow::SSlot * *,UI::CSlotWindow::SSlot * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000b1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b3	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000b6	85 c0		 test	 eax, eax
  000b8	74 2c		 je	 SHORT $LN59@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ba	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000bd	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c8	72 12		 jb	 SHORT $LN69@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ca	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000cd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d8	77 25		 ja	 SHORT $LN66@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000da	8b c2		 mov	 eax, edx
$LN69@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000dc	51		 push	 ecx
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e3	83 c4 08	 add	 esp, 8
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  000e6	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  000e9	89 3e		 mov	 DWORD PTR [esi], edi
  000eb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  000ee	8b 45 08	 mov	 eax, DWORD PTR tv486[ebp]
  000f1	03 c7		 add	 eax, edi
  000f3	5f		 pop	 edi
  000f4	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx

; 1611 :     }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 08 00	 ret	 8
$LN66@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  00104	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
$LN77@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00109	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN74@Resize_rea:
  0010e	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z PROC ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::push_back, COMDAT
; _this$ = ecx

; 1255 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1012 :         if (_Mysize == max_size()) {

  00029	81 7e 04 55 55
	55 15		 cmp	 DWORD PTR [esi+4], 357913941 ; 15555555H

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00030	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1012 :         if (_Mysize == max_size()) {

  00032	74 46		 je	 SHORT $LN62@push_back
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00034	89 75 ec	 mov	 DWORD PTR __Op$2[ebp], esi

; 77   :         return ::operator new(_Bytes);

  00037	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00040	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00047	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0004f	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00052	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00054	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1017 :         ++_Mysize;

  00057	ff 46 04	 inc	 DWORD PTR [esi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  0005a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0005d	89 38		 mov	 DWORD PTR [eax], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0005f	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  00062	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  00065	89 01		 mov	 DWORD PTR [ecx], eax

; 1257 :     }

  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
$LN62@push_back:

; 1013 :             _Xlength_error("list too long");

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  0007f	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN60@push_back:
  00084	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z ENDP ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::push_back
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ PROC ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >, COMDAT
; _this$ = ecx

; 1042 :     ~list() noexcept {

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	8b 17		 mov	 edx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  00005	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00008	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0000e	8b 02		 mov	 eax, DWORD PTR [edx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00010	85 c0		 test	 eax, eax
  00012	74 15		 je	 SHORT $LN7@list
  00014	56		 push	 esi
$LL8@list:

; 329  :             _Pnext = _Pnode->_Next;

  00015	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 0c		 push	 12			; 0000000cH
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00022	8b c6		 mov	 eax, esi
  00024	85 f6		 test	 esi, esi
  00026	75 ed		 jne	 SHORT $LL8@list
  00028	5e		 pop	 esi
$LN7@list:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	6a 0c		 push	 12			; 0000000cH
  0002b	ff 37		 push	 DWORD PTR [edi]
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
  00035	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1048 :     }

  00036	c3		 ret	 0
??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ENDP ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGridSlotWindow@UI@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGridSlotWindow@UI@@UAEPAXI@Z PROC			; UI::CGridSlotWindow::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGridSlotWindow@UI@@UAE@XZ ; UI::CGridSlotWindow::~CGridSlotWindow
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 bc 01 00 00	 push	 444			; 000001bcH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCGridSlotWindow@UI@@UAEPAXI@Z ENDP			; UI::CGridSlotWindow::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ PROC ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@CAXXZ ENDP ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_SlotList$ = -48					; size = 8
tv1039 = -40						; size = 4
tv1036 = -36						; size = 4
_Rect$1$sroa$608$1$ = -32				; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
_Rect$1$sroa$609$1$ = -20				; size = 4
_pCenterSlot$5 = -20					; size = 4
_byWidth$ = -14						; size = 1
_byHeight$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ PROC	; UI::CGridSlotWindow::OnRenderPickingSlot, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 9    : 	if (!UI::CWindowManager::Instance().IsAttaching())

  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00030	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00035	85 c0		 test	 eax, eax
  00037	0f 84 da 02 00
	00		 je	 $LN67@OnRenderPi

; 10   : 	{
; 11   : 		return;
; 12   : 	}
; 13   : 
; 14   : 	BYTE byWidth, byHeight;
; 15   : 	UI::CWindowManager::Instance().GetAttachingIconSize(&byWidth, &byHeight);

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00043	8d 45 f3	 lea	 eax, DWORD PTR _byHeight$[ebp]
  00046	50		 push	 eax
  00047	8d 45 f2	 lea	 eax, DWORD PTR _byWidth$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00050	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00052	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp], 0
  00059	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00060	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00065	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00068	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0006a	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  0006d	89 45 d0	 mov	 DWORD PTR _SlotList$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 18   : 	if (GetPickedSlotList(byWidth, byHeight, &SlotList))

  00070	8d 45 d0	 lea	 eax, DWORD PTR _SlotList$[ebp]
  00073	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007a	50		 push	 eax
  0007b	0f b6 45 f3	 movzx	 eax, BYTE PTR _byHeight$[ebp]
  0007f	8b cf		 mov	 ecx, edi
  00081	50		 push	 eax
  00082	0f b6 45 f2	 movzx	 eax, BYTE PTR _byWidth$[ebp]
  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
  0008c	85 c0		 test	 eax, eax
  0008e	0f 84 51 02 00
	00		 je	 $LN6@OnRenderPi

; 19   : 	{
; 20   : 		DWORD dwSlotNumber = UI::CWindowManager::Instance().GetAttachingSlotNumber();

  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  0009a	e8 00 00 00 00	 call	 ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber

; 21   : 		DWORD dwItemIndex = UI::CWindowManager::Instance().GetAttachingIndex();

  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  000a5	8b f0		 mov	 esi, eax
  000a7	e8 00 00 00 00	 call	 ?GetAttachingIndex@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingIndex

; 22   : 
; 23   : 		if (m_isUseMode)

  000ac	83 bf 50 01 00
	00 00		 cmp	 DWORD PTR [edi+336], 0
  000b3	8b d8		 mov	 ebx, eax
  000b5	0f 84 d1 00 00
	00		 je	 $LN9@OnRenderPi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000bb	8b 4d d0	 mov	 ecx, DWORD PTR _SlotList$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 27   : 			if (GetSlotPointer(pSlot->dwCenterSlotNumber, &pCenterSlot))

  000be	8d 45 ec	 lea	 eax, DWORD PTR _pCenterSlot$5[ebp]
  000c1	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000c2	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 25   : 			TSlot * pSlot = *SlotList.begin();

  000c4	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 27   : 			if (GetSlotPointer(pSlot->dwCenterSlotNumber, &pCenterSlot))

  000c7	ff 71 08	 push	 DWORD PTR [ecx+8]
  000ca	8b cf		 mov	 ecx, edi
  000cc	e8 00 00 00 00	 call	 ?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetSlotPointer
  000d1	85 c0		 test	 eax, eax
  000d3	0f 84 b3 00 00
	00		 je	 $LN9@OnRenderPi

; 28   : 				if (pCenterSlot->isItem)

  000d9	8b 45 ec	 mov	 eax, DWORD PTR _pCenterSlot$5[ebp]
  000dc	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000e0	0f 84 a6 00 00
	00		 je	 $LN9@OnRenderPi

; 29   : 				{
; 30   : 					if (m_isUsableItem)

  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  000ec	83 ec 10	 sub	 esp, 16			; 00000010H
  000ef	83 bf 54 01 00
	00 00		 cmp	 DWORD PTR [edi+340], 0
  000f6	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  000fe	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00106	74 0a		 je	 SHORT $LN10@OnRenderPi

; 31   : 					{
; 32   : 						CPythonGraphic::Instance().SetDiffuseColor(1.0f, 1.0f, 0.0f, 0.5f);

  00108	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H

; 33   : 					}

  00110	eb 08		 jmp	 SHORT $LN161@OnRenderPi
$LN10@OnRenderPi:

; 34   : 					else
; 35   : 					{
; 36   : 						CPythonGraphic::Instance().SetDiffuseColor(1.0f, 0.0f, 0.0f, 0.5f);

  00112	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
$LN161@OnRenderPi:

; 37   : 					}
; 38   : 
; 39   : 					CPythonGraphic::Instance().RenderBar2d(	m_rect.left + pCenterSlot->ixPosition,

  0011a	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00121	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
  00126	8b 4d ec	 mov	 ecx, DWORD PTR _pCenterSlot$5[ebp]
  00129	83 ec 14	 sub	 esp, 20			; 00000014H
  0012c	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
  0012f	8b 7f 34	 mov	 edi, DWORD PTR [edi+52]
  00132	0f b6 41 35	 movzx	 eax, BYTE PTR [ecx+53]
  00136	8b 71 28	 mov	 esi, DWORD PTR [ecx+40]
  00139	8b 59 24	 mov	 ebx, DWORD PTR [ecx+36]
  0013c	c1 e0 05	 shl	 eax, 5
  0013f	03 c2		 add	 eax, edx
  00141	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  00149	03 c6		 add	 eax, esi
  0014b	66 0f 6e c0	 movd	 xmm0, eax
  0014f	0f b6 41 34	 movzx	 eax, BYTE PTR [ecx+52]
  00153	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00156	c1 e0 05	 shl	 eax, 5
  00159	03 c7		 add	 eax, edi
  0015b	03 c3		 add	 eax, ebx
  0015d	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00163	66 0f 6e c0	 movd	 xmm0, eax
  00167	8d 04 32	 lea	 eax, DWORD PTR [edx+esi]
  0016a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0016d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00173	66 0f 6e c0	 movd	 xmm0, eax
  00177	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  0017a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0017d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00183	66 0f 6e c0	 movd	 xmm0, eax
  00187	e9 46 01 00 00	 jmp	 $LN162@OnRenderPi
$LN9@OnRenderPi:

; 40   : 															m_rect.top + pCenterSlot->iyPosition,
; 41   : 															m_rect.left + pCenterSlot->ixPosition + pCenterSlot->byxPlacedItemSize * ITEM_WIDTH,
; 42   : 															m_rect.top + pCenterSlot->iyPosition + pCenterSlot->byyPlacedItemSize * ITEM_HEIGHT);
; 43   : 					return;
; 44   : 				}
; 45   : 		}
; 46   : 
; 47   : 		if (CheckMoving(dwSlotNumber, dwItemIndex, SlotList))

  0018c	8d 45 d0	 lea	 eax, DWORD PTR _SlotList$[ebp]
  0018f	8b cf		 mov	 ecx, edi
  00191	50		 push	 eax
  00192	53		 push	 ebx
  00193	56		 push	 esi
  00194	e8 00 00 00 00	 call	 ?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::CheckMoving
  00199	85 c0		 test	 eax, eax
  0019b	74 1d		 je	 SHORT $LN12@OnRenderPi

; 48   : 		{
; 49   : 			CPythonGraphic::Instance().SetDiffuseColor(1.0f, 1.0f, 1.0f, 0.5f);

  0019d	83 ec 10	 sub	 esp, 16			; 00000010H
  001a0	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  001a8	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  001b0	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H

; 50   : 		}

  001b8	eb 51		 jmp	 SHORT $LN163@OnRenderPi
$LN12@OnRenderPi:

; 51   : 		else if (m_isSwitchMode && m_isSwitchableItem)

  001ba	83 bf 58 01 00
	00 00		 cmp	 DWORD PTR [edi+344], 0
  001c1	74 2d		 je	 SHORT $LN14@OnRenderPi
  001c3	83 bf 5c 01 00
	00 00		 cmp	 DWORD PTR [edi+348], 0
  001ca	74 24		 je	 SHORT $LN14@OnRenderPi

; 52   : 		{
; 53   : 			CPythonGraphic::Instance().SetDiffuseColor(0.22f, 0.67f, 0.65f, 0.5f);

  001cc	83 ec 10	 sub	 esp, 16			; 00000010H
  001cf	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  001d7	c7 44 24 08 66
	66 26 3f	 mov	 DWORD PTR [esp+8], 1059481190 ; 3f266666H
  001df	c7 44 24 04 1f
	85 2b 3f	 mov	 DWORD PTR [esp+4], 1059816735 ; 3f2b851fH
  001e7	c7 04 24 ae 47
	61 3e		 mov	 DWORD PTR [esp], 1046562734 ; 3e6147aeH

; 54   : 		}

  001ee	eb 22		 jmp	 SHORT $LN164@OnRenderPi
$LN14@OnRenderPi:

; 55   : 		else
; 56   : 		{
; 57   : 			CPythonGraphic::Instance().SetDiffuseColor(1.0f, 0.0f, 0.0f, 0.5f);

  001f0	83 ec 10	 sub	 esp, 16			; 00000010H
  001f3	c7 44 24 0c 00
	00 00 3f	 mov	 DWORD PTR [esp+12], 1056964608 ; 3f000000H
  001fb	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00203	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
$LN163@OnRenderPi:

; 58   : 		}
; 59   : 
; 60   : 		RECT Rect;
; 61   : 		Rect.left = m_rect.right;

  0020b	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
$LN164@OnRenderPi:
  00212	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  00218	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0021d	8b 45 d0	 mov	 eax, DWORD PTR _SlotList$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 63   : 		Rect.right = 0;

  00220	33 f6		 xor	 esi, esi
  00222	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]

; 64   : 		Rect.bottom = 0;

  00225	33 d2		 xor	 edx, edx
  00227	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  0022a	89 4d ec	 mov	 DWORD PTR _Rect$1$sroa$609$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0022d	8b 00		 mov	 eax, DWORD PTR [eax]
  0022f	3b 45 d0	 cmp	 eax, DWORD PTR _SlotList$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 66   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  00232	74 68		 je	 SHORT $LN3@OnRenderPi

; 69   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  00234	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00237	89 4d e8	 mov	 DWORD PTR $T4[ebp], ecx

; 70   : 			Rect.top = min(Rect.top, m_rect.top + pSlot->iyPosition);

  0023a	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  0023d	89 4d e4	 mov	 DWORD PTR $T3[ebp], ecx
  00240	8b 4d ec	 mov	 ecx, DWORD PTR _Rect$1$sroa$609$1$[ebp]
$LL98@OnRenderPi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 151  :         return this->_Ptr->_Myval;

  00243	89 55 d8	 mov	 DWORD PTR tv1039[ebp], edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 68   : 			TSlot * pSlot = *itor;

  00246	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 151  :         return this->_Ptr->_Myval;

  00249	89 75 dc	 mov	 DWORD PTR tv1036[ebp], esi
  0024c	8b f3		 mov	 esi, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 69   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  0024e	8b 5d e8	 mov	 ebx, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00251	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 69   : 			Rect.left = min(Rect.left, m_rect.left + pSlot->ixPosition);

  00253	8b 7a 24	 mov	 edi, DWORD PTR [edx+36]
  00256	03 df		 add	 ebx, edi

; 70   : 			Rect.top = min(Rect.top, m_rect.top + pSlot->iyPosition);

  00258	3b cb		 cmp	 ecx, ebx
  0025a	0f 4c d9	 cmovl	 ebx, ecx
  0025d	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  00260	89 5d ec	 mov	 DWORD PTR _Rect$1$sroa$609$1$[ebp], ebx
  00263	8b 5a 28	 mov	 ebx, DWORD PTR [edx+40]
  00266	03 cb		 add	 ecx, ebx

; 71   : 			Rect.right = max(Rect.right, m_rect.left + pSlot->ixPosition + pSlot->byxPlacedItemSize * ITEM_WIDTH);

  00268	3b f1		 cmp	 esi, ecx
  0026a	0f 4c ce	 cmovl	 ecx, esi
  0026d	89 4d e0	 mov	 DWORD PTR _Rect$1$sroa$608$1$[ebp], ecx
  00270	0f b6 4a 34	 movzx	 ecx, BYTE PTR [edx+52]
  00274	c1 e1 05	 shl	 ecx, 5
  00277	8d 34 39	 lea	 esi, DWORD PTR [ecx+edi]
  0027a	03 75 e8	 add	 esi, DWORD PTR $T4[ebp]

; 72   : 			Rect.bottom = max(Rect.bottom, m_rect.top + pSlot->iyPosition + pSlot->byxPlacedItemSize * ITEM_HEIGHT);

  0027d	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  00280	39 75 dc	 cmp	 DWORD PTR tv1036[ebp], esi
  00283	8b 4d ec	 mov	 ecx, DWORD PTR _Rect$1$sroa$609$1$[ebp]
  00286	0f 4f 75 dc	 cmovg	 esi, DWORD PTR tv1036[ebp]
  0028a	03 55 e4	 add	 edx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0028d	39 55 d8	 cmp	 DWORD PTR tv1039[ebp], edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 66   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  00290	8b 5d e0	 mov	 ebx, DWORD PTR _Rect$1$sroa$608$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00293	0f 4f 55 d8	 cmovg	 edx, DWORD PTR tv1039[ebp]

; 198  :         return this->_Ptr == _Right._Ptr;

  00297	3b 45 d0	 cmp	 eax, DWORD PTR _SlotList$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 66   : 		for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  0029a	75 a7		 jne	 SHORT $LL98@OnRenderPi
$LN3@OnRenderPi:

; 73   : 		}
; 74   : 
; 75   : 		CPythonGraphic::Instance().RenderBar2d(Rect.left, Rect.top, Rect.right, Rect.bottom);

  0029c	83 ec 14	 sub	 esp, 20			; 00000014H
  0029f	66 0f 6e c2	 movd	 xmm0, edx
  002a3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002a6	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  002ae	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  002b4	66 0f 6e c6	 movd	 xmm0, esi
  002b8	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002bb	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002c1	66 0f 6e c3	 movd	 xmm0, ebx
  002c5	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002c8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002ce	66 0f 6e c1	 movd	 xmm0, ecx
$LN162@OnRenderPi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  002d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCPythonGraphic@@@@0PAVCPythonGraphic@@A ; CSingleton<CPythonGraphic>::ms_singleton
  002d8	0f 5b c0	 cvtdq2ps xmm0, xmm0
  002db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e0	e8 00 00 00 00	 call	 ?RenderBar2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBar2d
$LN6@OnRenderPi:
  002e5	8b 4d d0	 mov	 ecx, DWORD PTR _SlotList$[ebp]

; 325  :         _Head->_Prev->_Next = nullptr;

  002e8	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002eb	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  002f1	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002f3	85 c0		 test	 eax, eax
  002f5	74 13		 je	 SHORT $LN33@OnRenderPi
$LL34@OnRenderPi:

; 329  :             _Pnext = _Pnode->_Next;

  002f7	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002f9	6a 0c		 push	 12			; 0000000cH
  002fb	50		 push	 eax
  002fc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00301	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00304	8b c6		 mov	 eax, esi
  00306	85 f6		 test	 esi, esi
  00308	75 ed		 jne	 SHORT $LL34@OnRenderPi
$LN33@OnRenderPi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0030a	6a 0c		 push	 12			; 0000000cH
  0030c	ff 75 d0	 push	 DWORD PTR _SlotList$[ebp]
  0030f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00314	83 c4 08	 add	 esp, 8
$LN67@OnRenderPi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 77   : }

  00317	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00321	59		 pop	 ecx
  00322	5f		 pop	 edi
  00323	5e		 pop	 esi
  00324	5b		 pop	 ebx
  00325	8b e5		 mov	 esp, ebp
  00327	5d		 pop	 ebp
  00328	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _SlotList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnRenderPickingSlot@CGridSlotWindow@UI@@MAEXXZ ENDP	; UI::CGridSlotWindow::OnRenderPickingSlot
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_pSubSlot$1 = -20					; size = 4
_pSlot$2 = -16						; size = 4
_this$1$ = -12						; size = 4
_y$2$ = -8						; size = 4
_pSlot$3 = -8						; size = 4
_x$2$ = -4						; size = 4
?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ PROC		; UI::CGridSlotWindow::OnRefreshSlot, COMDAT
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 369  : 	DWORD x, y;
; 370  : 
; 371  : 	for (x = 0; x < m_dwxCount; ++x)

  0000a	33 db		 xor	 ebx, ebx
  0000c	89 75 f4	 mov	 DWORD PTR _this$1$[ebp], esi
  0000f	39 9e a4 01 00
	00		 cmp	 DWORD PTR [esi+420], ebx
  00015	0f 86 fc 00 00
	00		 jbe	 $LN9@OnRefreshS
  0001b	57		 push	 edi
  0001c	0f 1f 40 00	 npad	 4
$LL4@OnRefreshS:

; 372  : 		for (y = 0; y < m_dwyCount; ++y)

  00020	33 ff		 xor	 edi, edi
  00022	39 be a8 01 00
	00		 cmp	 DWORD PTR [esi+424], edi
  00028	76 29		 jbe	 SHORT $LN2@OnRefreshS
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@OnRefreshS:

; 373  : 		{
; 374  : 			TSlot * pSlot;
; 375  : 			if (!GetGridSlotPointer(x, y, &pSlot))

  00030	8d 45 f8	 lea	 eax, DWORD PTR _pSlot$3[ebp]
  00033	8b ce		 mov	 ecx, esi
  00035	50		 push	 eax
  00036	57		 push	 edi
  00037	53		 push	 ebx
  00038	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0003d	85 c0		 test	 eax, eax
  0003f	74 09		 je	 SHORT $LN5@OnRefreshS

; 376  : 			{
; 377  : 				continue;
; 378  : 			}
; 379  : 
; 380  : 			pSlot->dwCenterSlotNumber = pSlot->dwSlotNumber;

  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pSlot$3[ebp]
  00044	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00047	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN5@OnRefreshS:

; 372  : 		for (y = 0; y < m_dwyCount; ++y)

  0004a	47		 inc	 edi
  0004b	3b be a8 01 00
	00		 cmp	 edi, DWORD PTR [esi+424]
  00051	72 dd		 jb	 SHORT $LL7@OnRefreshS
$LN2@OnRefreshS:

; 369  : 	DWORD x, y;
; 370  : 
; 371  : 	for (x = 0; x < m_dwxCount; ++x)

  00053	8b 86 a4 01 00
	00		 mov	 eax, DWORD PTR [esi+420]
  00059	43		 inc	 ebx
  0005a	3b d8		 cmp	 ebx, eax
  0005c	72 c2		 jb	 SHORT $LL4@OnRefreshS

; 381  : 		}
; 382  : 
; 383  : 	for (x = 0; x < m_dwxCount; ++x)

  0005e	33 db		 xor	 ebx, ebx
  00060	89 5d fc	 mov	 DWORD PTR _x$2$[ebp], ebx
  00063	85 c0		 test	 eax, eax
  00065	0f 84 ab 00 00
	00		 je	 $LN53@OnRefreshS
  0006b	0f 1f 44 00 00	 npad	 5
$LL10@OnRefreshS:

; 384  : 		for (y = 0; y < m_dwyCount; ++y)

  00070	33 c0		 xor	 eax, eax
  00072	89 45 f8	 mov	 DWORD PTR _y$2$[ebp], eax
  00075	39 86 a8 01 00
	00		 cmp	 DWORD PTR [esi+424], eax
  0007b	0f 86 85 00 00
	00		 jbe	 $LN8@OnRefreshS
$LL13@OnRefreshS:

; 385  : 		{
; 386  : 			TSlot * pSlot;
; 387  : 			if (!GetGridSlotPointer(x, y, &pSlot))

  00081	8d 4d f0	 lea	 ecx, DWORD PTR _pSlot$2[ebp]
  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	53		 push	 ebx
  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0008e	85 c0		 test	 eax, eax
  00090	74 61		 je	 SHORT $LN11@OnRefreshS

; 388  : 			{
; 389  : 				continue;
; 390  : 			}
; 391  : 
; 392  : 			if (pSlot->isItem)

  00092	8b 7d f0	 mov	 edi, DWORD PTR _pSlot$2[ebp]
  00095	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00099	0f 84 7e 00 00
	00		 je	 $LN22@OnRefreshS

; 393  : 			{
; 394  : 				for (DWORD xSub = 0; xSub < pSlot->byxPlacedItemSize; ++xSub)

  0009f	33 db		 xor	 ebx, ebx
  000a1	38 5f 34	 cmp	 BYTE PTR [edi+52], bl
  000a4	76 4a		 jbe	 SHORT $LN52@OnRefreshS
$LL16@OnRefreshS:

; 395  : 					for (DWORD ySub = 0; ySub < pSlot->byyPlacedItemSize; ++ySub)

  000a6	33 f6		 xor	 esi, esi
  000a8	80 7f 35 00	 cmp	 BYTE PTR [edi+53], 0
  000ac	76 36		 jbe	 SHORT $LN14@OnRefreshS
  000ae	66 90		 npad	 2
$LL19@OnRefreshS:

; 396  : 					{
; 397  : 						TSlot * pSubSlot;
; 398  : 						if (!GetGridSlotPointer(x + xSub, y + ySub, &pSubSlot))

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b3	8d 45 ec	 lea	 eax, DWORD PTR _pSubSlot$1[ebp]
  000b6	50		 push	 eax
  000b7	8b 45 f8	 mov	 eax, DWORD PTR _y$2$[ebp]
  000ba	03 c6		 add	 eax, esi
  000bc	50		 push	 eax
  000bd	8b 45 fc	 mov	 eax, DWORD PTR _x$2$[ebp]
  000c0	03 c3		 add	 eax, ebx
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  000c8	85 c0		 test	 eax, eax
  000ca	74 0f		 je	 SHORT $LN17@OnRefreshS

; 399  : 						{
; 400  : 							continue;
; 401  : 						}
; 402  : 
; 403  : 						pSubSlot->dwCenterSlotNumber = pSlot->dwSlotNumber;

  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _pSubSlot$1[ebp]
  000cf	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000d2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 404  : 						pSubSlot->dwItemIndex = pSlot->dwItemIndex;

  000d5	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000d8	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
$LN17@OnRefreshS:

; 395  : 					for (DWORD ySub = 0; ySub < pSlot->byyPlacedItemSize; ++ySub)

  000db	0f b6 47 35	 movzx	 eax, BYTE PTR [edi+53]
  000df	46		 inc	 esi
  000e0	3b f0		 cmp	 esi, eax
  000e2	72 cc		 jb	 SHORT $LL19@OnRefreshS
$LN14@OnRefreshS:

; 393  : 			{
; 394  : 				for (DWORD xSub = 0; xSub < pSlot->byxPlacedItemSize; ++xSub)

  000e4	0f b6 47 34	 movzx	 eax, BYTE PTR [edi+52]
  000e8	43		 inc	 ebx
  000e9	3b d8		 cmp	 ebx, eax
  000eb	72 b9		 jb	 SHORT $LL16@OnRefreshS

; 405  : 					}
; 406  : 			}

  000ed	8b 75 f4	 mov	 esi, DWORD PTR _this$1$[ebp]
$LN52@OnRefreshS:

; 384  : 		for (y = 0; y < m_dwyCount; ++y)

  000f0	8b 5d fc	 mov	 ebx, DWORD PTR _x$2$[ebp]
$LN11@OnRefreshS:
  000f3	8b 45 f8	 mov	 eax, DWORD PTR _y$2$[ebp]
  000f6	40		 inc	 eax
  000f7	89 45 f8	 mov	 DWORD PTR _y$2$[ebp], eax
  000fa	3b 86 a8 01 00
	00		 cmp	 eax, DWORD PTR [esi+424]
  00100	0f 82 7b ff ff
	ff		 jb	 $LL13@OnRefreshS
$LN8@OnRefreshS:

; 381  : 		}
; 382  : 
; 383  : 	for (x = 0; x < m_dwxCount; ++x)

  00106	43		 inc	 ebx
  00107	89 5d fc	 mov	 DWORD PTR _x$2$[ebp], ebx
  0010a	3b 9e a4 01 00
	00		 cmp	 ebx, DWORD PTR [esi+420]
  00110	0f 82 5a ff ff
	ff		 jb	 $LL10@OnRefreshS
$LN53@OnRefreshS:
  00116	5f		 pop	 edi
$LN9@OnRefreshS:
  00117	5e		 pop	 esi

; 410  : 			}
; 411  : 		}
; 412  : }

  00118	5b		 pop	 ebx
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN22@OnRefreshS:

; 407  : 			else
; 408  : 			{
; 409  : 				pSlot->dwItemIndex = 0;

  0011d	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  00124	eb cd		 jmp	 SHORT $LN11@OnRefreshS
?OnRefreshSlot@CGridSlotWindow@UI@@MAEXXZ ENDP		; UI::CGridSlotWindow::OnRefreshSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnIsType@CGridSlotWindow@UI@@MAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?OnIsType@CGridSlotWindow@UI@@MAEHK@Z PROC		; UI::CGridSlotWindow::OnIsType, COMDAT
; _this$ = ecx

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 465  : 	if (CGridSlotWindow::Type() == dwType)

  00006	e8 00 00 00 00	 call	 ?Type@CGridSlotWindow@UI@@SAKXZ ; UI::CGridSlotWindow::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwType$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 0a		 jne	 SHORT $LN2@OnIsType

; 466  : 	{
; 467  : 		return TRUE;

  00012	b8 01 00 00 00	 mov	 eax, 1
  00017	5e		 pop	 esi

; 471  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@OnIsType:

; 468  : 	}
; 469  : 
; 470  : 	return CSlotWindow::OnIsType(dwType);

  0001c	52		 push	 edx
  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?OnIsType@CSlotWindow@UI@@MAEHK@Z ; UI::CSlotWindow::OnIsType
  00024	5e		 pop	 esi

; 471  : }

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?OnIsType@CGridSlotWindow@UI@@MAEHK@Z ENDP		; UI::CGridSlotWindow::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
_TEXT	SEGMENT
_dwSlotNumber$ = 8					; size = 4
_dwItemIndex$ = 12					; size = 4
_c_rSlotList$ = 16					; size = 4
?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z PROC ; UI::CGridSlotWindow::CheckMoving, COMDAT
; _this$ = ecx

; 415  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 416  : 	if (m_dwSlotStyle != SLOT_STYLE_PICK_UP)

  00003	83 b9 34 01 00
	00 01		 cmp	 DWORD PTR [ecx+308], 1
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	75 32		 jne	 SHORT $LN37@CheckMovin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1091 :         return const_iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _c_rSlotList$[ebp]
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00014	8b 01		 mov	 eax, DWORD PTR [ecx]
  00016	3b c1		 cmp	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 421  : 	for (std::list<TSlot*>::const_iterator itor = c_rSlotList.begin(); itor != c_rSlotList.end(); ++itor)

  00018	74 27		 je	 SHORT $LN37@CheckMovin
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _dwItemIndex$[ebp]
  0001d	0f 1f 00	 npad	 3
$LL24@CheckMovin:

; 422  : 	{
; 423  : 		TSlot * pSlot = *itor;

  00020	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 424  : 
; 425  : 		if (dwSlotNumber != pSlot->dwCenterSlotNumber)

  00023	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00026	39 75 08	 cmp	 DWORD PTR _dwSlotNumber$[ebp], esi
  00029	74 10		 je	 SHORT $LN2@CheckMovin

; 426  : 		{
; 427  : 			if (0 != pSlot->dwItemIndex || pSlot->dwCenterSlotNumber != pSlot->dwSlotNumber)

  0002b	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
  0002e	85 ff		 test	 edi, edi
  00030	75 05		 jne	 SHORT $LN8@CheckMovin
  00032	3b 72 04	 cmp	 esi, DWORD PTR [edx+4]
  00035	74 04		 je	 SHORT $LN2@CheckMovin
$LN8@CheckMovin:

; 428  : 			{
; 429  : 				if (dwItemIndex != pSlot->dwItemIndex)

  00037	3b df		 cmp	 ebx, edi
  00039	75 12		 jne	 SHORT $LN32@CheckMovin
$LN2@CheckMovin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0003b	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  0003d	3b c1		 cmp	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 421  : 	for (std::list<TSlot*>::const_iterator itor = c_rSlotList.begin(); itor != c_rSlotList.end(); ++itor)

  0003f	75 df		 jne	 SHORT $LL24@CheckMovin
$LN37@CheckMovin:
  00041	5f		 pop	 edi

; 430  : 				{
; 431  : 					return false;
; 432  : 				}
; 433  : 			}
; 434  : 		}
; 435  : 	}
; 436  : 
; 437  : 	return true;
; 438  : }

  00042	5e		 pop	 esi
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
$LN32@CheckMovin:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	33 c0		 xor	 eax, eax
  00051	5b		 pop	 ebx
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?CheckMoving@CGridSlotWindow@UI@@IAEHKKABV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ENDP ; UI::CGridSlotWindow::CheckMoving
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z
_TEXT	SEGMENT
_pSlot$1 = -8						; size = 4
_x$1$ = -4						; size = 4
_ixLocal$ = 8						; size = 4
_iyLocal$ = 12						; size = 4
_pix$ = 16						; size = 4
_piy$ = 20						; size = 4
?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z PROC ; UI::CGridSlotWindow::GetPickedGridSlotPosition, COMDAT
; _this$ = ecx

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi

; 317  : 	for (DWORD x = 0; x < m_dwxCount; ++x)

  0000b	33 ff		 xor	 edi, edi
  0000d	89 7d fc	 mov	 DWORD PTR _x$1$[ebp], edi
  00010	39 bb a4 01 00
	00		 cmp	 DWORD PTR [ebx+420], edi
  00016	76 68		 jbe	 SHORT $LN24@GetPickedG
  00018	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@GetPickedG:

; 318  : 		for (DWORD y = 0; y < m_dwyCount; ++y)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 a8 01 00
	00		 cmp	 DWORD PTR [ebx+424], esi
  00028	76 4a		 jbe	 SHORT $LN2@GetPickedG
  0002a	66 0f 1f 44 00
	00		 npad	 6
$LL7@GetPickedG:

; 319  : 		{
; 320  : 			TSlot * pSlot;
; 321  : 			if (!GetGridSlotPointer(x, y, &pSlot))

  00030	8d 45 f8	 lea	 eax, DWORD PTR _pSlot$1[ebp]
  00033	8b cb		 mov	 ecx, ebx
  00035	50		 push	 eax
  00036	56		 push	 esi
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  0003d	85 c0		 test	 eax, eax
  0003f	74 2a		 je	 SHORT $LN5@GetPickedG

; 322  : 			{
; 323  : 				continue;
; 324  : 			}
; 325  : 
; 326  : 			if (ixLocal >= pSlot->ixPosition)

  00041	8b 4d f8	 mov	 ecx, DWORD PTR _pSlot$1[ebp]
  00044	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00047	39 55 08	 cmp	 DWORD PTR _ixLocal$[ebp], edx
  0004a	7c 1f		 jl	 SHORT $LN5@GetPickedG

; 327  : 				if (iyLocal >= pSlot->iyPosition)

  0004c	8b 79 28	 mov	 edi, DWORD PTR [ecx+40]
  0004f	39 7d 0c	 cmp	 DWORD PTR _iyLocal$[ebp], edi
  00052	7c 14		 jl	 SHORT $LN27@GetPickedG

; 328  : 					if (ixLocal <= pSlot->ixPosition + pSlot->ixCellSize)

  00054	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  00057	03 c2		 add	 eax, edx
  00059	39 45 08	 cmp	 DWORD PTR _ixLocal$[ebp], eax
  0005c	7f 0a		 jg	 SHORT $LN27@GetPickedG

; 329  : 						if (iyLocal <= pSlot->iyPosition + pSlot->iyCellSize)

  0005e	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00061	03 c7		 add	 eax, edi
  00063	39 45 0c	 cmp	 DWORD PTR _iyLocal$[ebp], eax
  00066	7e 23		 jle	 SHORT $LN16@GetPickedG
$LN27@GetPickedG:

; 318  : 		for (DWORD y = 0; y < m_dwyCount; ++y)

  00068	8b 7d fc	 mov	 edi, DWORD PTR _x$1$[ebp]
$LN5@GetPickedG:
  0006b	46		 inc	 esi
  0006c	3b b3 a8 01 00
	00		 cmp	 esi, DWORD PTR [ebx+424]
  00072	72 bc		 jb	 SHORT $LL7@GetPickedG
$LN2@GetPickedG:

; 317  : 	for (DWORD x = 0; x < m_dwxCount; ++x)

  00074	47		 inc	 edi
  00075	89 7d fc	 mov	 DWORD PTR _x$1$[ebp], edi
  00078	3b bb a4 01 00
	00		 cmp	 edi, DWORD PTR [ebx+420]
  0007e	72 a0		 jb	 SHORT $LL4@GetPickedG
$LN24@GetPickedG:
  00080	5f		 pop	 edi

; 334  : 						}
; 335  : 		}
; 336  : 
; 337  : 	return FALSE;
; 338  : }

  00081	5e		 pop	 esi
  00082	33 c0		 xor	 eax, eax
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 10 00	 ret	 16			; 00000010H
$LN16@GetPickedG:

; 330  : 						{
; 331  : 							*pix = x;

  0008b	8b 45 10	 mov	 eax, DWORD PTR _pix$[ebp]
  0008e	8b 4d fc	 mov	 ecx, DWORD PTR _x$1$[ebp]
  00091	5f		 pop	 edi
  00092	89 08		 mov	 DWORD PTR [eax], ecx

; 332  : 							*piy = y;

  00094	8b 45 14	 mov	 eax, DWORD PTR _piy$[ebp]
  00097	89 30		 mov	 DWORD PTR [eax], esi

; 333  : 							return TRUE;

  00099	b8 01 00 00 00	 mov	 eax, 1

; 334  : 						}
; 335  : 		}
; 336  : 
; 337  : 	return FALSE;
; 338  : }

  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	8b e5		 mov	 esp, ebp
  000a2	5d		 pop	 ebp
  000a3	c2 10 00	 ret	 16			; 00000010H
?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ENDP ; UI::CGridSlotWindow::GetPickedGridSlotPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_ix$ = 8						; size = 4
_iy$ = 12						; size = 4
_ppSlot$ = 16						; size = 4
?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetGridSlotPointer, COMDAT
; _this$ = ecx

; 303  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 304  : 	DWORD dwSlotIndex = ix + iy * m_dwxCount;

  00003	8b 91 a4 01 00
	00		 mov	 edx, DWORD PTR [ecx+420]
  00009	0f af 55 0c	 imul	 edx, DWORD PTR _iy$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 81 b4 01 00
	00		 mov	 eax, DWORD PTR [ecx+436]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 303  : {

  00013	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00014	8b b1 b0 01 00
	00		 mov	 esi, DWORD PTR [ecx+432]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 304  : 	DWORD dwSlotIndex = ix + iy * m_dwxCount;

  0001f	03 55 08	 add	 edx, DWORD PTR _ix$[ebp]

; 305  : 	if (dwSlotIndex >= m_SlotVector.size())

  00022	3b d0		 cmp	 edx, eax
  00024	72 07		 jb	 SHORT $LN2@GetGridSlo

; 306  : 	{
; 307  : 		return FALSE;

  00026	33 c0		 xor	 eax, eax
  00028	5e		 pop	 esi

; 313  : }

  00029	5d		 pop	 ebp
  0002a	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetGridSlo:

; 308  : 	}
; 309  : 
; 310  : 	*ppSlot = m_SlotVector[dwSlotIndex];

  0002d	8b 45 10	 mov	 eax, DWORD PTR _ppSlot$[ebp]
  00030	8b 0c 96	 mov	 ecx, DWORD PTR [esi+edx*4]
  00033	5e		 pop	 esi
  00034	89 08		 mov	 DWORD PTR [eax], ecx

; 311  : 
; 312  : 	return TRUE;

  00036	b8 01 00 00 00	 mov	 eax, 1

; 313  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetGridSlotPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -36						; size = 8
_pSlot$3 = -32						; size = 4
_ix$ = -32						; size = 4
_lx$ = -28						; size = 4
_ly$ = -24						; size = 4
_iyEnd$2$ = -20						; size = 4
_iy$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pSlot$1$ = 8						; size = 4
_ixEnd$1$ = 8						; size = 4
tv1309 = 8						; size = 4
_iWidth$ = 8						; size = 4
_pMainSlot$1$ = 12					; size = 4
_iyStart$2$ = 12					; size = 4
_iHeight$ = 12						; size = 4
_pSlotPointerList$ = 16					; size = 4
?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z PROC ; UI::CGridSlotWindow::GetPickedSlotList, COMDAT
; _this$ = ecx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi

; 192  : 	long lx, ly;
; 193  : 	GetMouseLocalPosition(lx, ly);

  0002d	8d 45 e8	 lea	 eax, DWORD PTR _ly$[ebp]
  00030	50		 push	 eax
  00031	8d 45 e4	 lea	 eax, DWORD PTR _lx$[ebp]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ?GetMouseLocalPosition@CWindow@UI@@QAEXAAJ0@Z ; UI::CWindow::GetMouseLocalPosition

; 194  : 
; 195  : 	if (lx < 0)

  0003a	8b 4d e4	 mov	 ecx, DWORD PTR _lx$[ebp]
  0003d	85 c9		 test	 ecx, ecx
  0003f	0f 88 45 02 00
	00		 js	 $LN29@GetPickedS

; 196  : 	{
; 197  : 		return FALSE;
; 198  : 	}
; 199  : 	if (ly < 0)

  00045	8b 45 e8	 mov	 eax, DWORD PTR _ly$[ebp]
  00048	85 c0		 test	 eax, eax
  0004a	0f 88 3a 02 00
	00		 js	 $LN29@GetPickedS

; 200  : 	{
; 201  : 		return FALSE;
; 202  : 	}
; 203  : 	if (lx >= GetWidth())

  00050	3b 4f 2c	 cmp	 ecx, DWORD PTR [edi+44]
  00053	0f 8d 31 02 00
	00		 jge	 $LN29@GetPickedS

; 204  : 	{
; 205  : 		return FALSE;
; 206  : 	}
; 207  : 	if (ly >= GetHeight())

  00059	3b 47 30	 cmp	 eax, DWORD PTR [edi+48]
  0005c	0f 8d 28 02 00
	00		 jge	 $LN29@GetPickedS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00062	8b 5d 10	 mov	 ebx, DWORD PTR _pSlotPointerList$[ebp]
  00065	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 325  :         _Head->_Prev->_Next = nullptr;

  00067	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0006a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00070	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00072	85 c0		 test	 eax, eax
  00074	74 13		 je	 SHORT $LN113@GetPickedS
$LL114@GetPickedS:

; 329  :             _Pnext = _Pnode->_Next;

  00076	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00078	6a 0c		 push	 12			; 0000000cH
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00080	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00083	8b c6		 mov	 eax, esi
  00085	85 f6		 test	 esi, esi
  00087	75 ed		 jne	 SHORT $LL114@GetPickedS
$LN113@GetPickedS:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00089	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 215  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  0008b	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0008d	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00091	89 40 04	 mov	 DWORD PTR [eax+4], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 215  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  00094	8d 45 ec	 lea	 eax, DWORD PTR _iy$[ebp]
  00097	50		 push	 eax
  00098	8d 45 e0	 lea	 eax, DWORD PTR _ix$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1490 :         _My_data._Mysize        = 0;

  0009b	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 215  : 	if (GetPickedGridSlotPosition(lx, ly, &ix, &iy))

  000a2	50		 push	 eax
  000a3	ff 75 e8	 push	 DWORD PTR _ly$[ebp]
  000a6	ff 75 e4	 push	 DWORD PTR _lx$[ebp]
  000a9	e8 00 00 00 00	 call	 ?GetPickedGridSlotPosition@CGridSlotWindow@UI@@IAEHHHPAH0@Z ; UI::CGridSlotWindow::GetPickedGridSlotPosition
  000ae	85 c0		 test	 eax, eax
  000b0	0f 84 d4 01 00
	00		 je	 $LN29@GetPickedS

; 216  : 	{
; 217  : 		int ixHalfStep = (iWidth / 2);

  000b6	8b 45 08	 mov	 eax, DWORD PTR _iWidth$[ebp]
  000b9	99		 cdq
  000ba	2b c2		 sub	 eax, edx
  000bc	d1 f8		 sar	 eax, 1

; 218  : 		//int iyHalfStep = (iHeight / 2);
; 219  : 
; 220  : 		int ixStart = int(ix) - int(ixHalfStep - (ixHalfStep % 2));

  000be	8b d0		 mov	 edx, eax
  000c0	81 e2 01 00 00
	80		 and	 edx, -2147483647	; 80000001H
  000c6	79 05		 jns	 SHORT $LN247@GetPickedS
  000c8	4a		 dec	 edx
  000c9	83 ca fe	 or	 edx, -2			; fffffffeH
  000cc	42		 inc	 edx
$LN247@GetPickedS:
  000cd	8b 4d e0	 mov	 ecx, DWORD PTR _ix$[ebp]
  000d0	2b d0		 sub	 edx, eax
  000d2	03 d1		 add	 edx, ecx

; 221  : 		int ixEnd = int(ix) + int(ixHalfStep);
; 222  : 
; 223  : 		int iyStart = 0, iyEnd = 0;

  000d4	33 f6		 xor	 esi, esi
  000d6	89 55 08	 mov	 DWORD PTR tv1309[ebp], edx
  000d9	33 d2		 xor	 edx, edx
  000db	8d 3c 08	 lea	 edi, DWORD PTR [eax+ecx]

; 224  : 
; 225  : 		if (1 == iHeight)

  000de	8b 45 0c	 mov	 eax, DWORD PTR _iHeight$[ebp]
  000e1	83 f8 01	 cmp	 eax, 1
  000e4	75 07		 jne	 SHORT $LN16@GetPickedS

; 226  : 		{
; 227  : 			iyStart = iy;

  000e6	8b 55 ec	 mov	 edx, DWORD PTR _iy$[ebp]

; 228  : 			iyEnd = iy;

  000e9	8b f2		 mov	 esi, edx

; 229  : 		}

  000eb	eb 1b		 jmp	 SHORT $LN20@GetPickedS
$LN16@GetPickedS:

; 230  : 		else if (2 == iHeight)

  000ed	83 f8 02	 cmp	 eax, 2
  000f0	75 08		 jne	 SHORT $LN18@GetPickedS

; 231  : 		{
; 232  : 			iyStart = iy;

  000f2	8b 55 ec	 mov	 edx, DWORD PTR _iy$[ebp]
  000f5	8d 72 01	 lea	 esi, DWORD PTR [edx+1]

; 233  : 			iyEnd = iy + 1;
; 234  : 		}

  000f8	eb 0e		 jmp	 SHORT $LN20@GetPickedS
$LN18@GetPickedS:

; 235  : 		else if (3 == iHeight)

  000fa	83 f8 03	 cmp	 eax, 3
  000fd	75 09		 jne	 SHORT $LN20@GetPickedS

; 236  : 		{
; 237  : 			iyStart = iy - 1;

  000ff	8b 45 ec	 mov	 eax, DWORD PTR _iy$[ebp]
  00102	8d 50 ff	 lea	 edx, DWORD PTR [eax-1]

; 238  : 			iyEnd = iy + 1;

  00105	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$LN20@GetPickedS:

; 239  : 		}
; 240  : 
; 241  : 		if (ixStart < 0)
; 242  : 		{
; 243  : 			ixEnd += -ixStart;
; 244  : 			ixStart = 0;
; 245  : 		}
; 246  : 
; 247  : 		if (iyStart < 0)

  00108	8b 4d 08	 mov	 ecx, DWORD PTR tv1309[ebp]
  0010b	8b c7		 mov	 eax, edi
  0010d	2b c1		 sub	 eax, ecx
  0010f	85 c9		 test	 ecx, ecx
  00111	0f 49 c7	 cmovns	 eax, edi
  00114	33 ff		 xor	 edi, edi
  00116	85 c9		 test	 ecx, ecx
  00118	89 45 08	 mov	 DWORD PTR _ixEnd$1$[ebp], eax
  0011b	0f 49 f9	 cmovns	 edi, ecx

; 248  : 		{
; 249  : 			iyEnd += -iyStart;
; 250  : 			iyStart = 0;
; 251  : 		}
; 252  : 
; 253  : 		if (DWORD(ixEnd) >= m_dwxCount)

  0011e	8b ce		 mov	 ecx, esi
  00120	2b ca		 sub	 ecx, edx
  00122	85 d2		 test	 edx, edx
  00124	0f 49 ce	 cmovns	 ecx, esi
  00127	33 f6		 xor	 esi, esi
  00129	85 d2		 test	 edx, edx
  0012b	89 4d ec	 mov	 DWORD PTR _iyEnd$2$[ebp], ecx
  0012e	0f 49 f2	 cmovns	 esi, edx
  00131	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  00134	89 75 0c	 mov	 DWORD PTR _iyStart$2$[ebp], esi
  00137	3b 82 a4 01 00
	00		 cmp	 eax, DWORD PTR [edx+420]
  0013d	72 0c		 jb	 SHORT $LN23@GetPickedS

; 254  : 		{
; 255  : 			int ixTemporary = DWORD(ixEnd) - m_dwxCount + 1;

  0013f	2b 82 a4 01 00
	00		 sub	 eax, DWORD PTR [edx+420]
  00145	40		 inc	 eax

; 256  : 			ixStart -= ixTemporary;

  00146	2b f8		 sub	 edi, eax

; 257  : 			ixEnd -= ixTemporary;

  00148	29 45 08	 sub	 DWORD PTR _ixEnd$1$[ebp], eax
$LN23@GetPickedS:

; 258  : 		}
; 259  : 
; 260  : 		if (DWORD(iyEnd) >= m_dwyCount)

  0014b	3b 8a a8 01 00
	00		 cmp	 ecx, DWORD PTR [edx+424]
  00151	72 13		 jb	 SHORT $LN24@GetPickedS

; 261  : 		{
; 262  : 			int iyTemporary = DWORD(iyEnd) - m_dwyCount + 1;

  00153	8b c1		 mov	 eax, ecx
  00155	2b 82 a8 01 00
	00		 sub	 eax, DWORD PTR [edx+424]
  0015b	40		 inc	 eax

; 263  : 			iyStart -= iyTemporary;

  0015c	2b f0		 sub	 esi, eax

; 264  : 			iyEnd -= iyTemporary;

  0015e	2b c8		 sub	 ecx, eax
  00160	89 75 0c	 mov	 DWORD PTR _iyStart$2$[ebp], esi
  00163	89 4d ec	 mov	 DWORD PTR _iyEnd$2$[ebp], ecx
$LN24@GetPickedS:

; 265  : 		}
; 266  : 
; 267  : 		for (int i = ixStart; i <= ixEnd; ++i)

  00166	8b 45 08	 mov	 eax, DWORD PTR _ixEnd$1$[ebp]
  00169	3b f8		 cmp	 edi, eax
  0016b	7f 3a		 jg	 SHORT $LN3@GetPickedS
  0016d	0f 1f 00	 npad	 3
$LL4@GetPickedS:

; 268  : 			for (int j = iyStart; j <= iyEnd; ++j)

  00170	39 4d 0c	 cmp	 DWORD PTR _iyStart$2$[ebp], ecx
  00173	7f 2a		 jg	 SHORT $LN2@GetPickedS
$LL7@GetPickedS:

; 269  : 			{
; 270  : 				TSlot * pSlot;
; 271  : 				if (GetGridSlotPointer(DWORD(i), DWORD(j), &pSlot))

  00175	8d 45 e0	 lea	 eax, DWORD PTR _pSlot$3[ebp]
  00178	8b ca		 mov	 ecx, edx
  0017a	50		 push	 eax
  0017b	56		 push	 esi
  0017c	57		 push	 edi
  0017d	e8 00 00 00 00	 call	 ?GetGridSlotPointer@CGridSlotWindow@UI@@IAEHHHPAPAUSSlot@CSlotWindow@2@@Z ; UI::CGridSlotWindow::GetGridSlotPointer
  00182	85 c0		 test	 eax, eax
  00184	74 0b		 je	 SHORT $LN5@GetPickedS

; 272  : 				{
; 273  : 					pSlotPointerList->push_back(pSlot);

  00186	8d 45 e0	 lea	 eax, DWORD PTR _pSlot$3[ebp]
  00189	8b cb		 mov	 ecx, ebx
  0018b	50		 push	 eax
  0018c	e8 00 00 00 00	 call	 ?push_back@?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAEXABQAUSSlot@CSlotWindow@UI@@@Z ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::push_back
$LN5@GetPickedS:

; 268  : 			for (int j = iyStart; j <= iyEnd; ++j)

  00191	8b 4d ec	 mov	 ecx, DWORD PTR _iyEnd$2$[ebp]
  00194	46		 inc	 esi
  00195	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
  00198	3b f1		 cmp	 esi, ecx
  0019a	7e d9		 jle	 SHORT $LL7@GetPickedS
  0019c	8b 45 08	 mov	 eax, DWORD PTR _ixEnd$1$[ebp]
$LN2@GetPickedS:

; 265  : 		}
; 266  : 
; 267  : 		for (int i = ixStart; i <= ixEnd; ++i)

  0019f	8b 75 0c	 mov	 esi, DWORD PTR _iyStart$2$[ebp]
  001a2	47		 inc	 edi
  001a3	3b f8		 cmp	 edi, eax
  001a5	7e c9		 jle	 SHORT $LL4@GetPickedS
$LN3@GetPickedS:

; 274  : 				}
; 275  : 			}
; 276  : 
; 277  : 		if (m_isUseMode && 1 == pSlotPointerList->size())

  001a7	83 ba 50 01 00
	00 00		 cmp	 DWORD PTR [edx+336], 0
  001ae	0f 84 ba 00 00
	00		 je	 $LN244@GetPickedS
  001b4	83 7b 04 01	 cmp	 DWORD PTR [ebx+4], 1
  001b8	0f 85 b0 00 00
	00		 jne	 $LN244@GetPickedS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  001be	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  001c0	8b b2 b0 01 00
	00		 mov	 esi, DWORD PTR [edx+432]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001c6	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 279  : 			TSlot * pMainSlot = *pSlotPointerList->begin();

  001c8	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cb	89 4d 0c	 mov	 DWORD PTR _pMainSlot$1$[ebp], ecx

; 282  : 			for (; itor != m_SlotVector.end(); ++itor)

  001ce	3b b2 b4 01 00
	00		 cmp	 esi, DWORD PTR [edx+436]
  001d4	0f 84 94 00 00
	00		 je	 $LN244@GetPickedS
  001da	66 0f 1f 44 00
	00		 npad	 6
$LL46@GetPickedS:

; 283  : 			{
; 284  : 				TSlot * pSlot = *itor;

  001e0	8b 06		 mov	 eax, DWORD PTR [esi]
  001e2	89 45 08	 mov	 DWORD PTR _pSlot$1$[ebp], eax

; 285  : 				if (pSlot->dwCenterSlotNumber == pMainSlot->dwCenterSlotNumber)

  001e5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001e8	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  001eb	75 6e		 jne	 SHORT $LN8@GetPickedS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001ed	8b 3b		 mov	 edi, DWORD PTR [ebx]
  001ef	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5129 :     for (; _First != _Last; ++_First) {

  001f1	3b f8		 cmp	 edi, eax
  001f3	74 17		 je	 SHORT $LN250@GetPickedS
  001f5	8b 5d 08	 mov	 ebx, DWORD PTR _pSlot$1$[ebp]
$LL106@GetPickedS:

; 5130 :         if (*_First == _Val) {

  001f8	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  001fb	74 08		 je	 SHORT $LN245@GetPickedS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 51   :         _Ptr = _Ptr->_Next;

  001fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  001ff	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5129 :     for (; _First != _Last; ++_First) {

  00201	3b cf		 cmp	 ecx, edi
  00203	75 f3		 jne	 SHORT $LL106@GetPickedS
$LN245@GetPickedS:
  00205	8b 5d 10	 mov	 ebx, DWORD PTR _pSlotPointerList$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 286  : 					if (pSlotPointerList->end() == std::find(pSlotPointerList->begin(), pSlotPointerList->end(), pSlot))

  00208	3b f8		 cmp	 edi, eax
  0020a	75 4f		 jne	 SHORT $LN8@GetPickedS
$LN250@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  0020c	81 7b 04 55 55
	55 15		 cmp	 DWORD PTR [ebx+4], 357913941 ; 15555555H
  00213	0f 84 87 00 00
	00		 je	 $LN223@GetPickedS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00219	89 5d dc	 mov	 DWORD PTR __Op$2[ebp], ebx

; 77   :         return ::operator new(_Bytes);

  0021c	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0021e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00225	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0022c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00231	8b 4d 08	 mov	 ecx, DWORD PTR _pSlot$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00234	83 c4 04	 add	 esp, 4
  00237	8b 55 f0	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 587  :     }

  0023a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00241	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1017 :         ++_Mysize;

  00244	ff 43 04	 inc	 DWORD PTR [ebx+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00247	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  0024a	89 38		 mov	 DWORD PTR [eax], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  0024c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  0024f	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00252	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 605  :         _Insert_after->_Next  = _Result;

  00259	89 01		 mov	 DWORD PTR [ecx], eax
$LN8@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 74   :         ++_Ptr;

  0025b	83 c6 04	 add	 esi, 4

; 156  :         return _Ptr == _Right._Ptr;

  0025e	3b b2 b4 01 00
	00		 cmp	 esi, DWORD PTR [edx+436]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 282  : 			for (; itor != m_SlotVector.end(); ++itor)

  00264	74 08		 je	 SHORT $LN244@GetPickedS
  00266	8b 4d 0c	 mov	 ecx, DWORD PTR _pMainSlot$1$[ebp]
  00269	e9 72 ff ff ff	 jmp	 $LL46@GetPickedS
$LN244@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  0026e	33 c0		 xor	 eax, eax
  00270	39 43 04	 cmp	 DWORD PTR [ebx+4], eax
  00273	0f 95 c0	 setne	 al
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 300  : }

  00276	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00279	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00280	59		 pop	 ecx
  00281	5f		 pop	 edi
  00282	5e		 pop	 esi
  00283	5b		 pop	 ebx
  00284	8b e5		 mov	 esp, ebp
  00286	5d		 pop	 ebp
  00287	c2 0c 00	 ret	 12			; 0000000cH
$LN29@GetPickedS:

; 287  : 					{
; 288  : 						pSlotPointerList->push_back(pSlot);
; 289  : 					}
; 290  : 			}
; 291  : 		}
; 292  : 
; 293  : 		if (!pSlotPointerList->empty())
; 294  : 		{
; 295  : 			return TRUE;
; 296  : 		}
; 297  : 	}
; 298  : 
; 299  : 	return FALSE;

  0028a	33 c0		 xor	 eax, eax

; 300  : }

  0028c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0028f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00296	59		 pop	 ecx
  00297	5f		 pop	 edi
  00298	5e		 pop	 esi
  00299	5b		 pop	 ebx
  0029a	8b e5		 mov	 esp, ebp
  0029c	5d		 pop	 ebp
  0029d	c2 0c 00	 ret	 12			; 0000000cH
$LN223@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1013 :             _Xlength_error("list too long");

  002a0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  002a5	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN248@GetPickedS:
  002aa	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z$1:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAUSSlot@CSlotWindow@UI@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<UI::CSlotWindow::SSlot *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotList
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z
_TEXT	SEGMENT
_ppSlot$ = 8						; size = 4
?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z PROC ; UI::CGridSlotWindow::GetPickedSlotPointer, COMDAT
; _this$ = ecx

; 108  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 109  : 	return GetPickedSlotPointer(ppSlot, true);

  00003	6a 01		 push	 1
  00005	ff 75 08	 push	 DWORD PTR _ppSlot$[ebp]
  00008	e8 00 00 00 00	 call	 ?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z ; UI::CGridSlotWindow::GetPickedSlotPointer

; 110  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?GetPickedSlotPointer@CGridSlotWindow@UI@@MAEHPAPAUSSlot@CSlotWindow@2@@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?OnMouseOver@CGridSlotWindow@UI@@MAEXXZ
_TEXT	SEGMENT
_pSlot$1 = -8						; size = 4
_pRealSlot$2 = -4					; size = 4
?OnMouseOver@CGridSlotWindow@UI@@MAEXXZ PROC		; UI::CGridSlotWindow::OnMouseOver, COMDAT
; _this$ = ecx

; 80   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 81   : 	CWindow* pPointWindow = UI::CWindowManager::Instance().GetPointWindow();
; 82   : 	if (this == pPointWindow)

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	3b 70 70	 cmp	 esi, DWORD PTR [eax+112]
  00011	75 7d		 jne	 SHORT $LN5@OnMouseOve

; 83   : 	{
; 84   : 		TSlot* pSlot;
; 85   : 		if (GetPickedSlotPointer(&pSlot))

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	8d 4d f8	 lea	 ecx, DWORD PTR _pSlot$1[ebp]
  00018	51		 push	 ecx
  00019	8b ce		 mov	 ecx, esi
  0001b	ff 90 cc 00 00
	00		 call	 DWORD PTR [eax+204]
  00021	85 c0		 test	 eax, eax
  00023	74 6b		 je	 SHORT $LN5@OnMouseOve

; 86   : 		{
; 87   : 			TSlot* pRealSlot;
; 88   : 			if (GetPickedSlotPointer(&pRealSlot, false) && pRealSlot->dwSlotNumber == m_dwOverSlotRealNumber && m_dwToolTipSlotNumber == 0)

  00025	6a 00		 push	 0
  00027	8d 45 fc	 lea	 eax, DWORD PTR _pRealSlot$2[ebp]
  0002a	8b ce		 mov	 ecx, esi
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z ; UI::CGridSlotWindow::GetPickedSlotPointer
  00032	85 c0		 test	 eax, eax
  00034	74 17		 je	 SHORT $LN4@OnMouseOve
  00036	8b 45 fc	 mov	 eax, DWORD PTR _pRealSlot$2[ebp]
  00039	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0003c	3b 86 ac 01 00
	00		 cmp	 eax, DWORD PTR [esi+428]
  00042	75 09		 jne	 SHORT $LN4@OnMouseOve
  00044	83 be 48 01 00
	00 00		 cmp	 DWORD PTR [esi+328], 0
  0004b	74 54		 je	 SHORT $LN1@OnMouseOve
$LN4@OnMouseOve:

; 89   : 			{
; 90   : 				return;
; 91   : 			}
; 92   : 
; 93   : 			if (pSlot->isItem)

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _pSlot$1[ebp]
  00050	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00054	74 3a		 je	 SHORT $LN5@OnMouseOve

; 94   : 			{
; 95   : 				PyCallClassMemberFunc(m_poHandler, "OnOverInItem", Py_BuildValue("(i)", pSlot->dwSlotNumber));

  00056	ff 70 04	 push	 DWORD PTR [eax+4]
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_03LIHNMIHG@?$CIi?$CJ@
  0005e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Py_BuildValue
  00064	50		 push	 eax
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CBOPEHFH@OnOverInItem@
  0006a	ff 76 7c	 push	 DWORD PTR [esi+124]
  0006d	e8 00 00 00 00	 call	 ?PyCallClassMemberFunc@@YA_NPAU_object@@PBD0@Z ; PyCallClassMemberFunc

; 96   : 				m_dwToolTipSlotNumber = 0; // otherwise OnOverOutItem will be ignored
; 97   : 				m_dwOverSlotRealNumber = pRealSlot->dwSlotNumber;

  00072	8b 45 fc	 mov	 eax, DWORD PTR _pRealSlot$2[ebp]
  00075	83 c4 14	 add	 esp, 20			; 00000014H
  00078	c7 86 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+328], 0
  00082	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00085	89 86 ac 01 00
	00		 mov	 DWORD PTR [esi+428], eax
  0008b	5e		 pop	 esi

; 105  : }

  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN5@OnMouseOve:

; 98   : 				return;
; 99   : 			}
; 100  : 		}
; 101  : 	}
; 102  : 
; 103  : 	m_dwOverSlotRealNumber = MAXDWORD;
; 104  : 	OnOverOutItem();

  00090	8b ce		 mov	 ecx, esi
  00092	c7 86 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+428], -1
  0009c	e8 00 00 00 00	 call	 ?OnOverOutItem@CSlotWindow@UI@@QAEXXZ ; UI::CSlotWindow::OnOverOutItem
$LN1@OnMouseOve:
  000a1	5e		 pop	 esi

; 105  : }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c3		 ret	 0
?OnMouseOver@CGridSlotWindow@UI@@MAEXXZ ENDP		; UI::CGridSlotWindow::OnMouseOver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z
_TEXT	SEGMENT
_SlotList$ = -28					; size = 8
_this$1$ = -20						; size = 4
_byWidth$ = -14						; size = 1
_byHeight$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
_ppSlot$ = 8						; size = 4
_pCenterSlot$2 = 12					; size = 4
_focusItem$ = 12					; size = 1
?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z PROC ; UI::CGridSlotWindow::GetPickedSlotPointer, COMDAT
; _this$ = ecx

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 114  : 	if (!UI::CWindowManager::Instance().IsAttaching())

  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00033	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00038	85 c0		 test	 eax, eax
  0003a	75 1e		 jne	 SHORT $LN5@GetPickedS

; 115  : 	{
; 116  : 		return CSlotWindow::GetPickedSlotPointer(ppSlot);

  0003c	ff 75 08	 push	 DWORD PTR _ppSlot$[ebp]
  0003f	8b cb		 mov	 ecx, ebx
  00041	e8 00 00 00 00	 call	 ?GetPickedSlotPointer@CSlotWindow@UI@@MAEHPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetPickedSlotPointer

; 188  : }

  00046	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00049	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00050	59		 pop	 ecx
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN5@GetPickedS:

; 117  : 	}
; 118  : 
; 119  : 	BYTE byWidth, byHeight;
; 120  : 	UI::CWindowManager::Instance().GetAttachingIconSize(&byWidth, &byHeight);

  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00060	8d 45 f3	 lea	 eax, DWORD PTR _byHeight$[ebp]
  00063	50		 push	 eax
  00064	8d 45 f2	 lea	 eax, DWORD PTR _byWidth$[ebp]
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ?GetAttachingIconSize@CWindowManager@UI@@QAEXPAE0@Z ; UI::CWindowManager::GetAttachingIconSize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0006d	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0006f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp], 0
  00076	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _SlotList$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0007d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00082	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00085	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00087	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  0008a	89 45 e4	 mov	 DWORD PTR _SlotList$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 123  : 	if (!GetPickedSlotList(byWidth, byHeight, &SlotList))

  0008d	8d 45 e4	 lea	 eax, DWORD PTR _SlotList$[ebp]
  00090	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00097	50		 push	 eax
  00098	0f b6 45 f3	 movzx	 eax, BYTE PTR _byHeight$[ebp]
  0009c	8b cb		 mov	 ecx, ebx
  0009e	50		 push	 eax
  0009f	0f b6 45 f2	 movzx	 eax, BYTE PTR _byWidth$[ebp]
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?GetPickedSlotList@CGridSlotWindow@UI@@IAEHHHPAV?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@@Z ; UI::CGridSlotWindow::GetPickedSlotList
  000a9	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
  000ac	85 c0		 test	 eax, eax
  000ae	74 68		 je	 SHORT $LN163@GetPickedS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000b0	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 128  : 	TSlot * pMinSlot = NULL;

  000b2	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000b4	3b c7		 cmp	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 132  : 	for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  000b6	74 60		 je	 SHORT $LN163@GetPickedS
  000b8	8a 5d 0c	 mov	 bl, BYTE PTR _focusItem$[ebp]
  000bb	0f 1f 44 00 00	 npad	 5
$LL95@GetPickedS:

; 133  : 	{
; 134  : 		TSlot * pSlot = *itor;

  000c0	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 135  : 
; 136  : 		if (!pMinSlot)

  000c3	85 f6		 test	 esi, esi
  000c5	75 04		 jne	 SHORT $LN7@GetPickedS

; 137  : 		{
; 138  : 			pMinSlot = pSlot;

  000c7	8b f2		 mov	 esi, edx

; 139  : 		}

  000c9	eb 1d		 jmp	 SHORT $LN2@GetPickedS
$LN7@GetPickedS:

; 140  : 		else
; 141  : 		{
; 142  : 			if (pSlot->dwSlotNumber < pMinSlot->dwSlotNumber)

  000cb	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ce	3b 4e 04	 cmp	 ecx, DWORD PTR [esi+4]
  000d1	73 04		 jae	 SHORT $LN9@GetPickedS

; 143  : 			{
; 144  : 				pMinSlot = pSlot;

  000d3	8b f2		 mov	 esi, edx

; 145  : 			}

  000d5	eb 11		 jmp	 SHORT $LN2@GetPickedS
$LN9@GetPickedS:

; 146  : 			else
; 147  : 			{
; 148  : 				if (focusItem && !pMinSlot->isItem && pSlot->isItem)

  000d7	84 db		 test	 bl, bl
  000d9	74 0d		 je	 SHORT $LN2@GetPickedS
  000db	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000df	75 07		 jne	 SHORT $LN2@GetPickedS
  000e1	83 7a 10 00	 cmp	 DWORD PTR [edx+16], 0
  000e5	0f 45 f2	 cmovne	 esi, edx
$LN2@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  000e8	8b 00		 mov	 eax, DWORD PTR [eax]

; 198  :         return this->_Ptr == _Right._Ptr;

  000ea	3b c7		 cmp	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 132  : 	for (std::list<TSlot*>::iterator itor = SlotList.begin(); itor != SlotList.end(); ++itor)

  000ec	75 d2		 jne	 SHORT $LL95@GetPickedS

; 149  : 				{
; 150  : 					pMinSlot = pSlot;
; 151  : 				}
; 152  : 			}
; 153  : 		}
; 154  : 	}
; 155  : 
; 156  : 	if (!pMinSlot)

  000ee	85 f6		 test	 esi, esi
  000f0	74 26		 je	 SHORT $LN163@GetPickedS

; 157  : 	{
; 158  : 		return FALSE;
; 159  : 	}
; 160  : 	else
; 161  : 	{
; 162  : 		if (!focusItem)

  000f2	84 db		 test	 bl, bl
  000f4	75 0c		 jne	 SHORT $LN14@GetPickedS

; 163  : 		{
; 164  : 			*ppSlot = pMinSlot;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _ppSlot$[ebp]

; 165  : 			return TRUE;

  000f9	bb 01 00 00 00	 mov	 ebx, 1
  000fe	89 30		 mov	 DWORD PTR [eax], esi
  00100	eb 18		 jmp	 SHORT $LN23@GetPickedS
$LN14@GetPickedS:

; 166  : 		}
; 167  : 
; 168  : 		TSlot * pCenterSlot;
; 169  : 		if (!GetSlotPointer(pMinSlot->dwCenterSlotNumber, &pCenterSlot))

  00102	8b 4d ec	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00105	8d 45 0c	 lea	 eax, DWORD PTR _pCenterSlot$2[ebp]
  00108	50		 push	 eax
  00109	ff 76 08	 push	 DWORD PTR [esi+8]
  0010c	e8 00 00 00 00	 call	 ?GetSlotPointer@CSlotWindow@UI@@IAEHKPAPAUSSlot@12@@Z ; UI::CSlotWindow::GetSlotPointer
  00111	85 c0		 test	 eax, eax
  00113	75 51		 jne	 SHORT $LN15@GetPickedS

; 170  : 		{
; 171  : 			return FALSE;

  00115	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
$LN163@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  00118	33 db		 xor	 ebx, ebx
$LN23@GetPickedS:
  0011a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0011d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00123	8b 07		 mov	 eax, DWORD PTR [edi]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00125	85 c0		 test	 eax, eax
  00127	74 1a		 je	 SHORT $LN42@GetPickedS
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL43@GetPickedS:

; 329  :             _Pnext = _Pnode->_Next;

  00130	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00132	6a 0c		 push	 12			; 0000000cH
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0013d	8b c6		 mov	 eax, esi
  0013f	85 f6		 test	 esi, esi
  00141	75 ed		 jne	 SHORT $LL43@GetPickedS
$LN42@GetPickedS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00143	6a 0c		 push	 12			; 0000000cH
  00145	ff 75 e4	 push	 DWORD PTR _SlotList$[ebp]
  00148	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014d	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 187  : 	return TRUE;

  00150	8b c3		 mov	 eax, ebx

; 188  : }

  00152	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00155	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015c	59		 pop	 ecx
  0015d	5f		 pop	 edi
  0015e	5e		 pop	 esi
  0015f	5b		 pop	 ebx
  00160	8b e5		 mov	 esp, ebp
  00162	5d		 pop	 ebp
  00163	c2 08 00	 ret	 8
$LN15@GetPickedS:

; 172  : 		}
; 173  : 
; 174  : 		*ppSlot = pCenterSlot;

  00166	8b 7d 08	 mov	 edi, DWORD PTR _ppSlot$[ebp]
  00169	8b 45 0c	 mov	 eax, DWORD PTR _pCenterSlot$2[ebp]
  0016c	89 07		 mov	 DWORD PTR [edi], eax

; 175  : 
; 176  : 		if (UI::CWindowManager::Instance().IsAttaching())

  0016e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00174	e8 00 00 00 00	 call	 ?IsAttaching@CWindowManager@UI@@QAEHXZ ; UI::CWindowManager::IsAttaching
  00179	85 c0		 test	 eax, eax
  0017b	74 15		 je	 SHORT $LN17@GetPickedS

; 177  : 		{
; 178  : 			DWORD dwSlotNumber = UI::CWindowManager::Instance().GetAttachingSlotNumber();

  0017d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCWindowManager@UI@@@@0PAVCWindowManager@UI@@A ; CSingleton<UI::CWindowManager>::ms_singleton
  00183	e8 00 00 00 00	 call	 ?GetAttachingSlotNumber@CWindowManager@UI@@QAEKXZ ; UI::CWindowManager::GetAttachingSlotNumber

; 179  : 
; 180  : 			if (dwSlotNumber == pCenterSlot->dwSlotNumber)

  00188	8b 4d 0c	 mov	 ecx, DWORD PTR _pCenterSlot$2[ebp]
  0018b	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  0018e	75 02		 jne	 SHORT $LN17@GetPickedS

; 181  : 			{
; 182  : 				*ppSlot = pMinSlot;

  00190	89 37		 mov	 DWORD PTR [edi], esi
$LN17@GetPickedS:

; 187  : 	return TRUE;

  00192	8b 7d e4	 mov	 edi, DWORD PTR _SlotList$[ebp]
  00195	bb 01 00 00 00	 mov	 ebx, 1
  0019a	e9 7b ff ff ff	 jmp	 $LN23@GetPickedS
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _SlotList$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$list@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@QAE@XZ ; std::list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::~list<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetPickedSlotPointer@CGridSlotWindow@UI@@QAEHPAPAUSSlot@CSlotWindow@2@_N@Z ENDP ; UI::CGridSlotWindow::GetPickedSlotPointer
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?__Initialize@CGridSlotWindow@UI@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CGridSlotWindow@UI@@IAEXXZ PROC		; UI::CGridSlotWindow::__Initialize, COMDAT
; _this$ = ecx

; 451  : 	m_dwxCount = 0;

  00000	c7 81 a4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+420], 0

; 452  : 	m_dwyCount = 0;

  0000a	c7 81 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+424], 0

; 453  : 
; 454  : 	m_dwOverSlotRealNumber = MAXDWORD;

  00014	c7 81 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+428], -1

; 455  : }

  0001e	c3		 ret	 0
?__Initialize@CGridSlotWindow@UI@@IAEXXZ ENDP		; UI::CGridSlotWindow::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z
_TEXT	SEGMENT
tv625 = -24						; size = 4
tv628 = -20						; size = 4
tv624 = -16						; size = 4
$T1 = -12						; size = 4
_x$1$ = -12						; size = 4
_this$1$ = -8						; size = 4
$T2 = -1						; size = 1
_dwStartIndex$ = 8					; size = 4
_dwxCount$ = 12						; size = 4
_dwyCount$ = 16						; size = 4
_ixSlotSize$ = 20					; size = 4
_iySlotSize$ = 24					; size = 4
tv650 = 28						; size = 4
_ixTemporarySize$ = 28					; size = 4
tv627 = 32						; size = 4
_iyTemporarySize$ = 32					; size = 4
?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z PROC	; UI::CGridSlotWindow::ArrangeGridSlot, COMDAT
; _this$ = ecx

; 341  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx

; 342  : 	Destroy();

  0000c	e8 00 00 00 00	 call	 ?Destroy@CGridSlotWindow@UI@@QAEXXZ ; UI::CGridSlotWindow::Destroy

; 343  : 
; 344  : 	m_dwxCount = dwxCount;

  00011	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _dwxCount$[ebp]

; 345  : 	m_dwyCount = dwyCount;
; 346  : 
; 347  : 	m_SlotVector.clear();

  00017	8d ba b0 01 00
	00		 lea	 edi, DWORD PTR [edx+432]
  0001d	8b 75 10	 mov	 esi, DWORD PTR _dwyCount$[ebp]
  00020	89 9a a4 01 00
	00		 mov	 DWORD PTR [edx+420], ebx
  00026	89 b2 a8 01 00
	00		 mov	 DWORD PTR [edx+424], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002f	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00031	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00034	3b c8		 cmp	 ecx, eax
  00036	74 08		 je	 SHORT $LN33@ArrangeGri

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00038	89 4f 04	 mov	 DWORD PTR [edi+4], ecx
  0003b	8b c1		 mov	 eax, ecx
  0003d	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
$LN33@ArrangeGri:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 348  : 	m_SlotVector.resize(dwxCount * dwyCount);

  00040	8b cb		 mov	 ecx, ebx
  00042	0f af ce	 imul	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00045	8b f0		 mov	 esi, eax
  00047	8b 07		 mov	 eax, DWORD PTR [edi]
  00049	2b f0		 sub	 esi, eax
  0004b	c1 fe 02	 sar	 esi, 2

; 1621 :         if (_Newsize < _Oldsize) { // trim

  0004e	3b ce		 cmp	 ecx, esi
  00050	73 08		 jae	 SHORT $LN39@ArrangeGri

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00052	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00055	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1627 :             return;

  00058	eb 34		 jmp	 SHORT $LN40@ArrangeGri
$LN39@ArrangeGri:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  0005a	76 32		 jbe	 SHORT $LN40@ArrangeGri

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0005c	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005f	2b 07		 sub	 eax, DWORD PTR [edi]
  00061	c1 f8 02	 sar	 eax, 2

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00064	3b c8		 cmp	 ecx, eax
  00066	76 0e		 jbe	 SHORT $LN41@ArrangeGri

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00068	8d 45 ff	 lea	 eax, DWORD PTR $T2[ebp]
  0006b	50		 push	 eax
  0006c	51		 push	 ecx
  0006d	8b cf		 mov	 ecx, edi
  0006f	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@PAUSSlot@CSlotWindow@UI@@V?$allocator@PAUSSlot@CSlotWindow@UI@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<UI::CSlotWindow::SSlot *,std::allocator<UI::CSlotWindow::SSlot *> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00074	eb 15		 jmp	 SHORT $LN66@ArrangeGri
$LN41@ArrangeGri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);

  00076	8b 45 f4	 mov	 eax, DWORD PTR $T1[ebp]
  00079	2b ce		 sub	 ecx, esi
  0007b	8d 34 88	 lea	 esi, DWORD PTR [eax+ecx*4]
  0007e	56		 push	 esi
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Zero_range@PAPAUSSlot@CSlotWindow@UI@@@std@@YAPAPAUSSlot@CSlotWindow@UI@@QAPAU123@0@Z ; std::_Zero_range<UI::CSlotWindow::SSlot * *>
  00085	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00088	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN66@ArrangeGri:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 350  : 	for (DWORD x = 0; x < dwxCount; ++x)

  0008b	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN40@ArrangeGri:
  0008e	8b 75 20	 mov	 esi, DWORD PTR _iyTemporarySize$[ebp]
  00091	33 c9		 xor	 ecx, ecx
  00093	8b 7d 1c	 mov	 edi, DWORD PTR _ixTemporarySize$[ebp]
  00096	03 75 18	 add	 esi, DWORD PTR _iySlotSize$[ebp]
  00099	03 7d 14	 add	 edi, DWORD PTR _ixSlotSize$[ebp]
  0009c	89 4d f4	 mov	 DWORD PTR _x$1$[ebp], ecx
  0009f	89 75 f0	 mov	 DWORD PTR tv624[ebp], esi
  000a2	89 7d e8	 mov	 DWORD PTR tv625[ebp], edi
  000a5	85 db		 test	 ebx, ebx
  000a7	74 7d		 je	 SHORT $LN63@ArrangeGri
  000a9	8b 75 10	 mov	 esi, DWORD PTR _dwyCount$[ebp]
  000ac	33 c0		 xor	 eax, eax
  000ae	89 45 20	 mov	 DWORD PTR tv627[ebp], eax
$LL4@ArrangeGri:

; 351  : 		for (DWORD y = 0; y < dwyCount; ++y)

  000b1	85 f6		 test	 esi, esi
  000b3	74 61		 je	 SHORT $LN2@ArrangeGri
  000b5	c1 e3 02	 shl	 ebx, 2
  000b8	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  000bf	89 5d ec	 mov	 DWORD PTR tv628[ebp], ebx
  000c2	33 f6		 xor	 esi, esi
  000c4	8b 5d 08	 mov	 ebx, DWORD PTR _dwStartIndex$[ebp]
  000c7	03 d9		 add	 ebx, ecx
  000c9	8b 4d 10	 mov	 ecx, DWORD PTR _dwyCount$[ebp]
  000cc	89 4d 1c	 mov	 DWORD PTR tv650[ebp], ecx
  000cf	90		 npad	 1
$LL7@ArrangeGri:

; 352  : 		{
; 353  : 			DWORD dwIndex = dwStartIndex + x + y * dwxCount;
; 354  : 			int ixPosition = x * (ixSlotSize + ixTemporarySize);
; 355  : 			int iyPosition = y * (iySlotSize + iyTemporarySize);
; 356  : 
; 357  : 			AppendSlot(dwIndex, ixPosition, iyPosition, ixSlotSize, iySlotSize);

  000d0	ff 75 18	 push	 DWORD PTR _iySlotSize$[ebp]
  000d3	8b ca		 mov	 ecx, edx
  000d5	ff 75 14	 push	 DWORD PTR _ixSlotSize$[ebp]
  000d8	56		 push	 esi
  000d9	50		 push	 eax
  000da	53		 push	 ebx
  000db	e8 00 00 00 00	 call	 ?AppendSlot@CSlotWindow@UI@@QAEXKHHHH@Z ; UI::CSlotWindow::AppendSlot
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 1234 :         : current(_STD move(_Right)) {}

  000e0	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 351  : 		for (DWORD y = 0; y < dwyCount; ++y)

  000e3	03 75 f0	 add	 esi, DWORD PTR tv624[ebp]
  000e6	03 5d 0c	 add	 ebx, DWORD PTR _dwxCount$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 1234 :         : current(_STD move(_Right)) {}

  000e9	8b 82 40 01 00
	00		 mov	 eax, DWORD PTR [edx+320]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 183  :         this->_Ptr = _New_ptr;

  000ef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 359  : 			m_SlotVector[x + y * dwxCount] = &(*m_SlotList.rbegin());

  000f2	8b 82 b0 01 00
	00		 mov	 eax, DWORD PTR [edx+432]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 183  :         this->_Ptr = _New_ptr;

  000f8	83 c1 08	 add	 ecx, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 359  : 			m_SlotVector[x + y * dwxCount] = &(*m_SlotList.rbegin());

  000fb	89 0c 07	 mov	 DWORD PTR [edi+eax], ecx
  000fe	03 7d ec	 add	 edi, DWORD PTR tv628[ebp]
  00101	83 6d 1c 01	 sub	 DWORD PTR tv650[ebp], 1
  00105	8b 45 20	 mov	 eax, DWORD PTR tv627[ebp]
  00108	75 c6		 jne	 SHORT $LL7@ArrangeGri
  0010a	8b 4d f4	 mov	 ecx, DWORD PTR _x$1$[ebp]
  0010d	8b 5d 0c	 mov	 ebx, DWORD PTR _dwxCount$[ebp]
  00110	8b 7d e8	 mov	 edi, DWORD PTR tv625[ebp]
  00113	8b 75 10	 mov	 esi, DWORD PTR _dwyCount$[ebp]
$LN2@ArrangeGri:

; 350  : 	for (DWORD x = 0; x < dwxCount; ++x)

  00116	41		 inc	 ecx
  00117	03 c7		 add	 eax, edi
  00119	89 4d f4	 mov	 DWORD PTR _x$1$[ebp], ecx
  0011c	89 45 20	 mov	 DWORD PTR tv627[ebp], eax
  0011f	3b cb		 cmp	 ecx, ebx
  00121	72 8e		 jb	 SHORT $LL4@ArrangeGri
  00123	8b 75 f0	 mov	 esi, DWORD PTR tv624[ebp]
$LN63@ArrangeGri:

; 360  : 		}
; 361  : 
; 362  : 	int iWidth = dwxCount * (ixSlotSize + ixTemporarySize);
; 363  : 	int iHeight = dwyCount * (iySlotSize + iyTemporarySize);

  00126	0f af 75 10	 imul	 esi, DWORD PTR _dwyCount$[ebp]

; 364  : 	SetSize(iWidth, iHeight);

  0012a	8b ca		 mov	 ecx, edx
  0012c	0f af fb	 imul	 edi, ebx
  0012f	56		 push	 esi
  00130	57		 push	 edi
  00131	e8 00 00 00 00	 call	 ?SetSize@CWindow@UI@@QAEXJJ@Z ; UI::CWindow::SetSize
  00136	5f		 pop	 edi
  00137	5e		 pop	 esi
  00138	5b		 pop	 ebx

; 365  : }

  00139	8b e5		 mov	 esp, ebp
  0013b	5d		 pop	 ebp
  0013c	c2 1c 00	 ret	 28			; 0000001cH
?ArrangeGridSlot@CGridSlotWindow@UI@@QAEXKKKHHHH@Z ENDP	; UI::CGridSlotWindow::ArrangeGridSlot
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?Destroy@CGridSlotWindow@UI@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGridSlotWindow@UI@@QAEXXZ PROC		; UI::CGridSlotWindow::Destroy, COMDAT
; _this$ = ecx

; 441  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 442  : 	CSlotWindow::Destroy();

  00003	e8 00 00 00 00	 call	 ?Destroy@CSlotWindow@UI@@QAEXXZ ; UI::CSlotWindow::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00008	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  0000e	3b 86 b4 01 00
	00		 cmp	 eax, DWORD PTR [esi+436]
  00014	74 06		 je	 SHORT $LN3@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00016	89 86 b4 01 00
	00		 mov	 DWORD PTR [esi+436], eax
$LN3@Destroy:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 446  : 	__Initialize();

  0001c	8b ce		 mov	 ecx, esi
  0001e	5e		 pop	 esi
  0001f	e9 00 00 00 00	 jmp	 ?__Initialize@CGridSlotWindow@UI@@IAEXXZ ; UI::CGridSlotWindow::__Initialize
?Destroy@CGridSlotWindow@UI@@QAEXXZ ENDP		; UI::CGridSlotWindow::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ??1CGridSlotWindow@UI@@UAE@XZ
_TEXT	SEGMENT
??1CGridSlotWindow@UI@@UAE@XZ PROC			; UI::CGridSlotWindow::~CGridSlotWindow, COMDAT
; _this$ = ecx

; 478  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridSlotWindow@UI@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 86 b0 01 00
	00		 mov	 eax, DWORD PTR [esi+432]
  0000f	85 c0		 test	 eax, eax
  00011	74 4d		 je	 SHORT $LN6@CGridSlotW

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 8e b8 01 00
	00		 mov	 ecx, DWORD PTR [esi+440]
  00019	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00024	72 12		 jb	 SHORT $LN22@CGridSlotW

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00026	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00029	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00031	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00034	77 32		 ja	 SHORT $LN19@CGridSlotW

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00036	8b c2		 mov	 eax, edx
$LN22@CGridSlotW:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	51		 push	 ecx
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0003f	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00049	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004c	c7 86 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+436], 0

; 2114 :             _Myend   = nullptr;

  00056	c7 86 b8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+440], 0
$LN6@CGridSlotW:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 479  : }

  00060	8b ce		 mov	 ecx, esi
  00062	5e		 pop	 esi
  00063	e9 00 00 00 00	 jmp	 ??1CSlotWindow@UI@@UAE@XZ ; UI::CSlotWindow::~CSlotWindow
$LN19@CGridSlotW:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@CGridSlotW:
  0006d	cc		 int	 3
??1CGridSlotWindow@UI@@UAE@XZ ENDP			; UI::CGridSlotWindow::~CGridSlotWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ppyObject$ = 8						; size = 4
??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z PROC		; UI::CGridSlotWindow::CGridSlotWindow, COMDAT
; _this$ = ecx

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 08	 push	 DWORD PTR _ppyObject$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	e8 00 00 00 00	 call	 ??0CSlotWindow@UI@@QAE@PAU_object@@@Z ; UI::CSlotWindow::CSlotWindow
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGridSlotWindow@UI@@6B@

; 475  : }

  00018	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0001a	c7 86 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+432], 0
  00024	c7 86 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+436], 0
  0002e	c7 86 b8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+440], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp

; 475  : }

  00038	5e		 pop	 esi
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??0CGridSlotWindow@UI@@QAE@PAU_object@@@Z ENDP		; UI::CGridSlotWindow::CGridSlotWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonGridSlotWindow.cpp
;	COMDAT ?Type@CGridSlotWindow@UI@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGridSlotWindow@UI@@SAKXZ PROC			; UI::CGridSlotWindow::Type, COMDAT

; 458  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGridSlotWindow@UI@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 459  : 	static int s_Type = GetCRC32("CGridSlotWindow", strlen("CGridSlotWindow"));

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 460  : 	return s_Type;
; 461  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 459  : 	static int s_Type = GetCRC32("CGridSlotWindow", strlen("CGridSlotWindow"));

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	6a 0f		 push	 15			; 0000000fH
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BFEGLPNH@CGridSlotWindow@
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?s_Type@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA, eax
  00085	e8 00 00 00 00	 call	 __Init_thread_footer
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb af		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGridSlotWindow@UI@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGridSlotWindow@UI@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGridSlotWindow@UI@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGridSlotWindow@UI@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGridSlotWindow@UI@@SAKXZ ENDP			; UI::CGridSlotWindow::Type
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?IsWindow@CWindow@UI@@UAEHXZ
_TEXT	SEGMENT
?IsWindow@CWindow@UI@@UAEHXZ PROC			; UI::CWindow::IsWindow, COMDAT
; _this$ = ecx

; 224  : 	virtual BOOL	IsWindow() { return TRUE; }

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?IsWindow@CWindow@UI@@UAEHXZ ENDP			; UI::CWindow::IsWindow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?SetColor@CWindow@UI@@UAEXK@Z
_TEXT	SEGMENT
_dwColor$ = 8						; size = 4
?SetColor@CWindow@UI@@UAEXK@Z PROC			; UI::CWindow::SetColor, COMDAT
; _this$ = ecx

; 220  : 	virtual void	SetColor(DWORD dwColor) {}

  00000	c2 04 00	 ret	 4
?SetColor@CWindow@UI@@UAEXK@Z ENDP			; UI::CWindow::SetColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?OnChangePosition@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnChangePosition@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnChangePosition, COMDAT
; _this$ = ecx

; 159  : 	virtual void	OnChangePosition() {}

  00000	c2 00 00	 ret	 0
?OnChangePosition@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnChangePosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterPythonLib\PythonWindow.h
;	COMDAT ?OnUpdateRenderBox@CWindow@UI@@UAEXXZ
_TEXT	SEGMENT
?OnUpdateRenderBox@CWindow@UI@@UAEXXZ PROC		; UI::CWindow::OnUpdateRenderBox, COMDAT
; _this$ = ecx

; 153  : 	virtual void	OnUpdateRenderBox() {}

  00000	c2 00 00	 ret	 0
?OnUpdateRenderBox@CWindow@UI@@UAEXXZ ENDP		; UI::CWindow::OnUpdateRenderBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
