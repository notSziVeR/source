; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\Distribute\BoundaryShapeManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate
PUBLIC	?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
PUBLIC	??1SBoundaryShape@@QAE@XZ			; SBoundaryShape::~SBoundaryShape
PUBLIC	??0CBoundaryShapeManager@@QAE@XZ		; CBoundaryShapeManager::CBoundaryShapeManager
PUBLIC	??1CBoundaryShapeManager@@UAE@XZ		; CBoundaryShapeManager::~CBoundaryShapeManager
PUBLIC	?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z	; CBoundaryShapeManager::LoadBsfFile
PUBLIC	?PointInside@CBoundaryShapeManager@@QAE_NMM@Z	; CBoundaryShapeManager::PointInside
PUBLIC	?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z	; CBoundaryShapeManager::RandomPoint
PUBLIC	?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
PUBLIC	?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ; std::allocator<SBoundaryShape>::deallocate
PUBLIC	??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
PUBLIC	?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
PUBLIC	??_GCBoundaryShapeManager@@UAEPAXI@Z		; CBoundaryShapeManager::`scalar deleting destructor'
PUBLIC	??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
PUBLIC	??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
PUBLIC	?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
PUBLIC	?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
PUBLIC	??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
PUBLIC	??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
PUBLIC	??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
PUBLIC	??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
PUBLIC	??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
PUBLIC	??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
PUBLIC	??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`vftable'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CBoundaryShapeManager@@6B@			; CBoundaryShapeManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBoundaryShapeManager@@@8		; CBoundaryShapeManager `RTTI Type Descriptor'
PUBLIC	??_R3CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBoundaryShapeManager@@8			; CBoundaryShapeManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBoundaryShapeManager@@8		; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	??_ECBoundaryShapeManager@@UAEPAXI@Z:PROC	; CBoundaryShapeManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_R1A@?0A@EA@CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBoundaryShapeManager@@8 DD FLAT:??_R0?AVCBoundaryShapeManager@@@8 ; CBoundaryShapeManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R2CBoundaryShapeManager@@8 DD FLAT:??_R1A@?0A@EA@CBoundaryShapeManager@@8 ; CBoundaryShapeManager::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBoundaryShapeManager@@8
rdata$r	SEGMENT
??_R3CBoundaryShapeManager@@8 DD 00H			; CBoundaryShapeManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBoundaryShapeManager@@@8
data$rs	SEGMENT
??_R0?AVCBoundaryShapeManager@@@8 DD FLAT:??_7type_info@@6B@ ; CBoundaryShapeManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBoundaryShapeManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBoundaryShapeManager@@6B@
rdata$r	SEGMENT
??_R4CBoundaryShapeManager@@6B@ DD 00H			; CBoundaryShapeManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBoundaryShapeManager@@@8
	DD	FLAT:??_R3CBoundaryShapeManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Could not open ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of bou'
	DB	'ndaries', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of con'
	DB	'tours', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read number of poi'
	DB	'nts', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
CONST	SEGMENT
??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@ DB 'Error in CBoun'
	DB	'daryShapeManager::LoadBsfFile(): Failed to read point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_7CBoundaryShapeManager@@6B@
CONST	SEGMENT
??_7CBoundaryShapeManager@@6B@ DD FLAT:??_R4CBoundaryShapeManager@@6B@ ; CBoundaryShapeManager::`vftable'
	DD	FLAT:??_ECBoundaryShapeManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@PAV12@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@PAV10@00AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z$1
__ehfuncinfo$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Construct_n@ABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@ABQAV12@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXIABQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$2
__ehfuncinfo$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0
__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z$3
__ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$17 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0
__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$17
__ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SBoundaryShape@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SBoundaryShape@@QAE@ABU0@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0SBoundaryShape@@QAE@ABU0@@Z$2
__ehfuncinfo$??0SBoundaryShape@@QAE@ABU0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SBoundaryShape@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z$1
__ehfuncinfo$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >, COMDAT
; _this$ = ecx

; 34   :         if (_Target) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	0f 85 00 00 00
	00		 jne	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy

; 35   :             _Target->_Tidy();
; 36   :         }
; 37   :     }

  0000a	c3		 ret	 0
??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT
; _this$ = ecx

; 1657 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

  00000	56		 push	 esi

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 947  :         for (; _First != _Last; ++_First) {

  00007	3b f7		 cmp	 esi, edi
  00009	74 13		 je	 SHORT $LN5@Uninitiali
  0000b	0f 1f 44 00 00	 npad	 5
$LL6@Uninitiali:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00017	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Uninitiali
$LN5@Uninitiali:
  0001e	5f		 pop	 edi

; 1659 :     }

  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z PROC ; std::_Copy_memmove<SPoint *,SPoint *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ENDP ; std::_Copy_memmove<SPoint *,SPoint *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	57		 push	 edi

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000d	74 3f		 je	 SHORT $LN49@Uninitiali

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000f	53		 push	 ebx
  00010	8b df		 mov	 ebx, edi
  00012	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00015	56		 push	 esi
  00016	2b d8		 sub	 ebx, eax
$LL4@Uninitiali:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00018	8b 11		 mov	 edx, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  0001a	8d 49 0c	 lea	 ecx, DWORD PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001d	8b 71 f8	 mov	 esi, DWORD PTR [ecx-8]
  00020	8b 41 f0	 mov	 eax, DWORD PTR [ecx-16]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	c7 41 f8 00 00
	00 00		 mov	 DWORD PTR [ecx-8], 0
  0002a	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00031	c7 41 f0 00 00
	00 00		 mov	 DWORD PTR [ecx-16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00038	89 54 0b f4	 mov	 DWORD PTR [ebx+ecx-12], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0003c	8d 51 fc	 lea	 edx, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0003f	89 07		 mov	 DWORD PTR [edi], eax
  00041	89 77 08	 mov	 DWORD PTR [edi+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00044	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00047	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  0004a	75 cc		 jne	 SHORT $LL4@Uninitiali

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1808 :     }
; 1809 : 
; 1810 :     return _Backout._Release();

  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx
$LN49@Uninitiali:

; 1811 : }

  0004e	8b c7		 mov	 eax, edi
  00050	5f		 pop	 edi
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
tv613 = 16						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z PROC ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	57		 push	 edi

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0000a	3b 45 0c	 cmp	 eax, DWORD PTR __Last$[ebp]
  0000d	74 6d		 je	 SHORT $LN55@Uninitiali

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0000f	8b d7		 mov	 edx, edi
  00011	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00014	53		 push	 ebx
  00015	2b d0		 sub	 edx, eax
  00017	8d 5f 0c	 lea	 ebx, DWORD PTR [edi+12]
  0001a	56		 push	 esi
  0001b	89 55 10	 mov	 DWORD PTR tv613[ebp], edx
  0001e	66 90		 npad	 2
$LL4@Uninitiali:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00022	8d 49 24	 lea	 ecx, DWORD PTR [ecx+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00025	8b 41 d8	 mov	 eax, DWORD PTR [ecx-40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00028	8d 5b 24	 lea	 ebx, DWORD PTR [ebx+36]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0002b	8b 71 e0	 mov	 esi, DWORD PTR [ecx-32]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0002e	c7 41 e0 00 00
	00 00		 mov	 DWORD PTR [ecx-32], 0
  00035	c7 41 dc 00 00
	00 00		 mov	 DWORD PTR [ecx-36], 0
  0003c	c7 41 d8 00 00
	00 00		 mov	 DWORD PTR [ecx-40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00043	89 07		 mov	 DWORD PTR [edi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00045	83 c7 24	 add	 edi, 36			; 00000024H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00048	8b 45 10	 mov	 eax, DWORD PTR tv613[ebp]
  0004b	89 73 d8	 mov	 DWORD PTR [ebx-40], esi
  0004e	89 54 08 dc	 mov	 DWORD PTR [eax+ecx-36], edx
  00052	f3 0f 7e 41 e4	 movq	 xmm0, QWORD PTR [ecx-28]
  00057	66 0f d6 43 dc	 movq	 QWORD PTR [ebx-36], xmm0
  0005c	8b 41 ec	 mov	 eax, DWORD PTR [ecx-20]
  0005f	89 43 e4	 mov	 DWORD PTR [ebx-28], eax
  00062	f3 0f 7e 41 f0	 movq	 xmm0, QWORD PTR [ecx-16]
  00067	66 0f d6 43 e8	 movq	 QWORD PTR [ebx-24], xmm0
  0006c	8b 51 f8	 mov	 edx, DWORD PTR [ecx-8]
  0006f	89 53 f0	 mov	 DWORD PTR [ebx-16], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00072	8d 51 fc	 lea	 edx, DWORD PTR [ecx-4]
  00075	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  00078	75 a6		 jne	 SHORT $LL4@Uninitiali

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1808 :     }
; 1809 : 
; 1810 :     return _Backout._Release();

  0007a	5e		 pop	 esi
  0007b	5b		 pop	 ebx
$LN55@Uninitiali:

; 1811 : }

  0007c	8b c7		 mov	 eax, edi
  0007e	5f		 pop	 edi
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ENDP ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
_TEXT	SEGMENT
__Backout$2 = -32					; size = 12
__Guard$3 = -20						; size = 4
__Last$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>, COMDAT

; 673  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00028	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  0002b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00030	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00033	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00039	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00040	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00047	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004a	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0004c	f7 e9		 imul	 ecx
  0004e	d1 fa		 sar	 edx, 1
  00050	8b c2		 mov	 eax, edx
  00052	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00055	03 c2		 add	 eax, edx

; 2128 :         if (_Count != 0) {

  00057	0f 84 91 00 00
	00		 je	 $LN65@construct

; 2069 :         if (_Newcapacity > max_size()) {

  0005d	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00062	0f 87 b8 00 00
	00		 ja	 $LN81@construct
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00068	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  0006b	c1 e7 02	 shl	 edi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006e	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00074	72 0d		 jb	 SHORT $LN28@construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007c	83 c4 04	 add	 esp, 4
  0007f	8b f0		 mov	 esi, eax
  00081	eb 13		 jmp	 SHORT $LN27@construct
$LN28@construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00083	85 ff		 test	 edi, edi
  00085	74 0d		 je	 SHORT $LN29@construct

; 77   :         return ::operator new(_Bytes);

  00087	57		 push	 edi
  00088	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008d	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00090	8b f0		 mov	 esi, eax
  00092	eb 02		 jmp	 SHORT $LN27@construct
$LN29@construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00094	33 f6		 xor	 esi, esi
$LN27@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2053 :         _Myfirst           = _Newvec;

  00096	89 33		 mov	 DWORD PTR [ebx], esi

; 2054 :         _Mylast            = _Newvec;
; 2055 :         _Myend             = _Newvec + _Newcapacity;

  00098	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0009b	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  0009e	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 2130 :             _Tidy_guard<vector> _Guard{this};

  000a1	89 5d ec	 mov	 DWORD PTR __Guard$3[ebp], ebx

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000a4	8b 7d 10	 mov	 edi, DWORD PTR _<_Args_0>$[ebp]
  000a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000ae	89 75 e0	 mov	 DWORD PTR __Backout$2[ebp], esi
  000b1	89 75 e4	 mov	 DWORD PTR __Backout$2[ebp+4], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000b4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000b7	8b 3f		 mov	 edi, DWORD PTR [edi]
  000b9	89 45 f0	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000bc	89 5d e8	 mov	 DWORD PTR __Backout$2[ebp+8], ebx

; 1715 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  000bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  000c3	3b f8		 cmp	 edi, eax
  000c5	74 21		 je	 SHORT $LN38@construct
  000c7	8b d8		 mov	 ebx, eax
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL39@construct:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d0	57		 push	 edi
  000d1	8b ce		 mov	 ecx, esi
  000d3	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >

; 1664 :         ++_Last;

  000d8	83 c6 0c	 add	 esi, 12			; 0000000cH

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  000db	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1664 :         ++_Last;

  000de	89 75 e4	 mov	 DWORD PTR __Backout$2[ebp+4], esi

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  000e1	3b fb		 cmp	 edi, ebx
  000e3	75 eb		 jne	 SHORT $LL39@construct
  000e5	8b 5d 0c	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN38@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000e8	89 73 04	 mov	 DWORD PTR [ebx+4], esi
  000eb	8b 75 10	 mov	 esi, DWORD PTR _<_Args_0>$[ebp]
$LN65@construct:
  000ee	f3 0f 7e 46 0c	 movq	 xmm0, QWORD PTR [esi+12]
  000f3	66 0f d6 43 0c	 movq	 QWORD PTR [ebx+12], xmm0
  000f8	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000fb	89 43 14	 mov	 DWORD PTR [ebx+20], eax
  000fe	f3 0f 7e 46 18	 movq	 xmm0, QWORD PTR [esi+24]
  00103	66 0f d6 43 18	 movq	 QWORD PTR [ebx+24], xmm0
  00108	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0010b	89 43 20	 mov	 DWORD PTR [ebx+32], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 682  :     }

  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c3		 ret	 0
$LN81@construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2070 :             _Xlength();

  00120	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
$LN79@construct:
  00125	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Guard$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >::~_Tidy_guard<std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > > >
__unwindfunclet$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z$2:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::~_Uninitialized_backout_al<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
_TEXT	SEGMENT
__Constructed_last$ = -44				; size = 4
_this$ = -40						; size = 4
__Newsize$1$ = -36					; size = 4
tv461 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv475 = -28						; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$1$ = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d d8	 mov	 DWORD PTR _this$[ebp], ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 33		 mov	 esi, DWORD PTR [ebx]
  00032	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	d1 fa		 sar	 edx, 1
  00045	8b c2		 mov	 eax, edx
  00047	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004a	03 c2		 add	 eax, edx
  0004c	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0004f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00054	f7 e9		 imul	 ecx
  00056	d1 fa		 sar	 edx, 1
  00058	8b c2		 mov	 eax, edx
  0005a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005d	03 c2		 add	 eax, edx

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0005f	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00064	0f 84 9a 01 00
	00		 je	 $LN76@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0006d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00070	2b ce		 sub	 ecx, esi

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00072	89 7d dc	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00075	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007a	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007c	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00081	d1 fa		 sar	 edx, 1
  00083	8b ca		 mov	 ecx, edx
  00085	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00088	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008a	8b d1		 mov	 edx, ecx
  0008c	d1 ea		 shr	 edx, 1
  0008e	2b c2		 sub	 eax, edx
  00090	3b c8		 cmp	 ecx, eax
  00092	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00094	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00099	c7 45 ec 55 55
	55 15		 mov	 DWORD PTR __Newcapacity$[ebp], 357913941 ; 15555555H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a0	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  000a1	89 45 e4	 mov	 DWORD PTR tv475[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	83 c4 04	 add	 esp, 4
  000ac	8b f8		 mov	 edi, eax
  000ae	eb 4c		 jmp	 SHORT $LN73@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b0	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000b3	8b f7		 mov	 esi, edi
  000b5	3b c7		 cmp	 eax, edi
  000b7	0f 43 f0	 cmovae	 esi, eax
  000ba	81 fe 55 55 55
	15		 cmp	 esi, 357913941		; 15555555H
  000c0	0f 87 43 01 00
	00		 ja	 $LN77@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000c6	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  000c9	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cc	c1 e0 02	 shl	 eax, 2
  000cf	89 45 e4	 mov	 DWORD PTR tv475[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d7	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000df	83 c4 04	 add	 esp, 4
  000e2	8b f8		 mov	 edi, eax
  000e4	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000e6	85 c0		 test	 eax, eax
  000e8	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f0	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000f3	8b f8		 mov	 edi, eax
  000f5	eb 02		 jmp	 SHORT $LN74@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000f7	33 ff		 xor	 edi, edi
$LN74@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000f9	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN73@Emplace_re:
  000fc	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000ff	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00102	89 7d e8	 mov	 DWORD PTR $T2[ebp], edi

; 896  :         pointer _Constructed_first      = _Constructed_last;
; 897  : 
; 898  :         _TRY_BEGIN

  00105	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0010f	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00112	8d 70 0c	 lea	 esi, DWORD PTR [eax+12]
  00115	89 45 e0	 mov	 DWORD PTR tv461[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00118	8b c8		 mov	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  0011a	89 75 d4	 mov	 DWORD PTR __Constructed_last$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0011d	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00122	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00125	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00128	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0012a	3b d0		 cmp	 edx, eax
  0012c	75 04		 jne	 SHORT $LN4@Emplace_re

; 903  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 904  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  0012e	8b f7		 mov	 esi, edi

; 905  :             } else {
; 906  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 907  :             }
; 908  :         } else { // provide basic guarantee

  00130	eb 12		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 909  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00132	53		 push	 ebx
  00133	57		 push	 edi
  00134	52		 push	 edx
  00135	51		 push	 ecx
  00136	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >

; 910  :             _Constructed_first = _Newvec;
; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0013b	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0013e	83 c4 10	 add	 esp, 16			; 00000010H
  00141	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
$LN5@Emplace_re:
  00144	53		 push	 ebx
  00145	56		 push	 esi
  00146	50		 push	 eax
  00147	51		 push	 ecx
  00148	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@YAPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@0PAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::vector<SPoint,std::allocator<SPoint> > *,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0014d	8b 33		 mov	 esi, DWORD PTR [ebx]

; 910  :             _Constructed_first = _Newvec;
; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0014f	83 c4 10	 add	 esp, 16			; 00000010H

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00152	85 f6		 test	 esi, esi
  00154	74 5a		 je	 SHORT $LN51@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00156	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00159	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0015c	3b f0		 cmp	 esi, eax
  0015e	74 0f		 je	 SHORT $LN37@Emplace_re
$LL38@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00160	8b ce		 mov	 ecx, esi
  00162	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00167	83 c6 0c	 add	 esi, 12			; 0000000cH
  0016a	3b 75 08	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  0016d	75 f1		 jne	 SHORT $LL38@Emplace_re
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0016f	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00172	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00177	8b 33		 mov	 esi, DWORD PTR [ebx]
  00179	2b ce		 sub	 ecx, esi
  0017b	f7 e9		 imul	 ecx
  0017d	d1 fa		 sar	 edx, 1
  0017f	8b c2		 mov	 eax, edx
  00181	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00184	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00186	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00189	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0018c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00192	72 12		 jb	 SHORT $LN61@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00194	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00197	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0019a	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0019f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a2	77 6a		 ja	 SHORT $LN58@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a4	8b f2		 mov	 esi, edx
$LN61@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001a6	51		 push	 ecx
  001a7	56		 push	 esi
  001a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ad	83 c4 08	 add	 esp, 8
$LN51@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001b0	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  001b3	89 3b		 mov	 DWORD PTR [ebx], edi
  001b5	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  001b8	8b 45 e0	 mov	 eax, DWORD PTR tv461[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001bb	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  001be	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  001c1	8b 4d e4	 mov	 ecx, DWORD PTR tv475[ebp]
  001c4	03 cf		 add	 ecx, edi
  001c6	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 921  :     }

  001c9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d3	59		 pop	 ecx
  001d4	5f		 pop	 edi
  001d5	5e		 pop	 esi
  001d6	5b		 pop	 ebx
  001d7	8b e5		 mov	 esp, ebp
  001d9	5d		 pop	 ebp
  001da	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z$0:

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001dd	8b 75 d8	 mov	 esi, DWORD PTR _this$[ebp]
  001e0	8b 45 d4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001e3	56		 push	 esi
  001e4	50		 push	 eax
  001e5	50		 push	 eax
  001e6	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
  001eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 915  :         _Al.deallocate(_Newvec, _Newcapacity);

  001ee	8b ce		 mov	 ecx, esi
  001f0	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001f3	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  001f6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate

; 916  :         _RERAISE;

  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN76@Emplace_re:

; 888  :             _Xlength();

  00204	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00209	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN58@Emplace_re:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0020e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN72@Emplace_re:
  00213	cc		 int	 3
  00214	cc		 int	 3
  00215	cc		 int	 3
  00216	cc		 int	 3
  00217	cc		 int	 3
  00218	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Constructed_last$ = -44				; size = 4
_this$ = -40						; size = 4
__Newsize$1$ = -36					; size = 4
tv461 = -32						; size = 4
__Whereoff$1$ = -32					; size = 4
tv475 = -28						; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$1$ = 8						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d d8	 mov	 DWORD PTR _this$[ebp], edi

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 37		 mov	 esi, DWORD PTR [edi]
  00032	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00037	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003d	2b d6		 sub	 edx, esi
  0003f	f7 ea		 imul	 edx
  00041	2b ce		 sub	 ecx, esi
  00043	c1 fa 03	 sar	 edx, 3
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 e0	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 03	 sar	 edx, 3
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00061	3d c7 71 1c 07	 cmp	 eax, 119304647		; 071c71c7H
  00066	0f 84 9f 01 00
	00		 je	 $LN77@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006c	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0006f	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00072	2b ce		 sub	 ecx, esi

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00074	89 5d dc	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00077	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0007c	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007e	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 03	 sar	 edx, 3
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00097	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0009c	c7 45 ec c7 71
	1c 07		 mov	 DWORD PTR __Newcapacity$[ebp], 119304647 ; 071c71c7H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  000a4	89 45 e4	 mov	 DWORD PTR tv475[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ac	83 c4 04	 add	 esp, 4
  000af	8b d8		 mov	 ebx, eax
  000b1	eb 4c		 jmp	 SHORT $LN74@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000b6	8b f3		 mov	 esi, ebx
  000b8	3b c3		 cmp	 eax, ebx
  000ba	0f 43 f0	 cmovae	 esi, eax
  000bd	81 fe c7 71 1c
	07		 cmp	 esi, 119304647		; 071c71c7H
  000c3	0f 87 47 01 00
	00		 ja	 $LN78@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000c9	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  000cc	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cf	c1 e0 02	 shl	 eax, 2
  000d2	89 45 e4	 mov	 DWORD PTR tv475[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d5	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000da	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e2	83 c4 04	 add	 esp, 4
  000e5	8b d8		 mov	 ebx, eax
  000e7	eb 16		 jmp	 SHORT $LN74@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000e9	85 c0		 test	 eax, eax
  000eb	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000ed	50		 push	 eax
  000ee	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f3	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000f6	8b d8		 mov	 ebx, eax
  000f8	eb 02		 jmp	 SHORT $LN75@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000fa	33 db		 xor	 ebx, ebx
$LN75@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000fc	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN74@Emplace_re:
  000ff	8b 45 e0	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 896  :         pointer _Constructed_first      = _Constructed_last;
; 897  : 
; 898  :         _TRY_BEGIN
; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00102	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
  00105	89 5d e8	 mov	 DWORD PTR $T2[ebp], ebx
  00108	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0010f	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00112	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  00115	50		 push	 eax
  00116	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  00119	89 45 e0	 mov	 DWORD PTR tv461[ebp], eax
  0011c	57		 push	 edi
  0011d	89 75 d4	 mov	 DWORD PTR __Constructed_last$[ebp], esi
  00120	e8 00 00 00 00	 call	 ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00125	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH
  0012b	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  0012e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00130	3b d0		 cmp	 edx, eax
  00132	75 04		 jne	 SHORT $LN4@Emplace_re

; 903  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 904  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00134	8b f3		 mov	 esi, ebx

; 905  :             } else {
; 906  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 907  :             }
; 908  :         } else { // provide basic guarantee

  00136	eb 12		 jmp	 SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 909  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00138	57		 push	 edi
  00139	53		 push	 ebx
  0013a	52		 push	 edx
  0013b	51		 push	 ecx
  0013c	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >

; 910  :             _Constructed_first = _Newvec;
; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00141	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00144	83 c4 10	 add	 esp, 16			; 00000010H
  00147	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
$LN5@Emplace_re:
  0014a	57		 push	 edi
  0014b	56		 push	 esi
  0014c	50		 push	 eax
  0014d	51		 push	 ecx
  0014e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@YAPAUSBoundaryShape@@QAU1@0PAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Uninitialized_move<SBoundaryShape *,std::allocator<SBoundaryShape> >

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00153	8b 37		 mov	 esi, DWORD PTR [edi]

; 910  :             _Constructed_first = _Newvec;
; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00155	83 c4 10	 add	 esp, 16			; 00000010H

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00158	85 f6		 test	 esi, esi
  0015a	74 5b		 je	 SHORT $LN52@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0015c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0015f	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00162	3b f0		 cmp	 esi, eax
  00164	74 0f		 je	 SHORT $LN35@Emplace_re
$LL36@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00166	8b ce		 mov	 ecx, esi
  00168	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0016d	83 c6 24	 add	 esi, 36			; 00000024H
  00170	3b 75 08	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  00173	75 f1		 jne	 SHORT $LL36@Emplace_re
$LN35@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00175	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00178	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0017d	8b 37		 mov	 esi, DWORD PTR [edi]
  0017f	2b ce		 sub	 ecx, esi
  00181	f7 e9		 imul	 ecx
  00183	c1 fa 03	 sar	 edx, 3
  00186	8b c2		 mov	 eax, edx
  00188	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018b	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0018d	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00190	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00193	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00199	72 12		 jb	 SHORT $LN62@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a1	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a3	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001a9	77 6a		 ja	 SHORT $LN59@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ab	8b f2		 mov	 esi, edx
$LN62@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001ad	51		 push	 ecx
  001ae	56		 push	 esi
  001af	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b4	83 c4 08	 add	 esp, 8
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001b7	8b 45 dc	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  001ba	89 1f		 mov	 DWORD PTR [edi], ebx
  001bc	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]

; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  001bf	8b 45 e0	 mov	 eax, DWORD PTR tv461[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001c2	8d 0c 8b	 lea	 ecx, DWORD PTR [ebx+ecx*4]
  001c5	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  001c8	8b 4d e4	 mov	 ecx, DWORD PTR tv475[ebp]
  001cb	03 cb		 add	 ecx, ebx
  001cd	89 4f 08	 mov	 DWORD PTR [edi+8], ecx

; 921  :     }

  001d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001da	59		 pop	 ecx
  001db	5f		 pop	 edi
  001dc	5e		 pop	 esi
  001dd	5b		 pop	 ebx
  001de	8b e5		 mov	 esp, ebp
  001e0	5d		 pop	 ebp
  001e1	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z$0:

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  001e4	8b 75 d8	 mov	 esi, DWORD PTR _this$[ebp]
  001e7	8b 45 d4	 mov	 eax, DWORD PTR __Constructed_last$[ebp]
  001ea	56		 push	 esi
  001eb	50		 push	 eax
  001ec	50		 push	 eax
  001ed	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ; std::_Destroy_range<std::allocator<SBoundaryShape> >
  001f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 915  :         _Al.deallocate(_Newvec, _Newcapacity);

  001f5	8b ce		 mov	 ecx, esi
  001f7	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001fa	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  001fd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ; std::allocator<SBoundaryShape>::deallocate

; 916  :         _RERAISE;

  00202	6a 00		 push	 0
  00204	6a 00		 push	 0
  00206	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN77@Emplace_re:

; 888  :             _Xlength();

  0020b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
$LN78@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00210	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN59@Emplace_re:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00215	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN73@Emplace_re:
  0021a	cc		 int	 3
  0021b	cc		 int	 3
  0021c	cc		 int	 3
  0021d	cc		 int	 3
  0021e	cc		 int	 3
  0021f	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv589 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv606 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00015	2b d7		 sub	 edx, edi

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b cf		 sub	 ecx, edi
  0001e	d1 fa		 sar	 edx, 1
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002f	f7 e9		 imul	 ecx
  00031	d1 fa		 sar	 edx, 1
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0003d	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00042	0f 84 3b 01 00
	00		 je	 $LN96@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0004b	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004e	2b cf		 sub	 ecx, edi
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00057	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005c	d1 fa		 sar	 edx, 1
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00065	8b d1		 mov	 edx, ecx
  00067	d1 ea		 shr	 edx, 1
  00069	2b c2		 sub	 eax, edx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  0006f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00075	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b f8		 mov	 edi, eax
  00082	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00087	8b ce		 mov	 ecx, esi
  00089	3b c6		 cmp	 eax, esi
  0008b	0f 43 c8	 cmovae	 ecx, eax
  0008e	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00094	0f 87 ee 00 00
	00		 ja	 $LN97@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0009a	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0009d	c1 e0 02	 shl	 eax, 2
  000a0	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a3	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a8	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b0	83 c4 04	 add	 esp, 4
  000b3	8b f8		 mov	 edi, eax
  000b5	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b7	85 c0		 test	 eax, eax
  000b9	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c1	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c4	8b f8		 mov	 edi, eax
  000c6	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c8	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ca	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000cd	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000d0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d3	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d9	89 75 f8	 mov	 DWORD PTR tv589[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000dc	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000e0	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  000e4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e7	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ea	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000ed	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ef	3b d1		 cmp	 edx, ecx
  000f1	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f3	8b f7		 mov	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000f5	eb 14		 jmp	 SHORT $LN79@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f7	57		 push	 edi
  000f8	52		 push	 edx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>
  000ff	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00108	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN79@Emplace_re:
  0010b	56		 push	 esi
  0010c	51		 push	 ecx
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00113	8b 33		 mov	 esi, DWORD PTR [ebx]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00118	85 f6		 test	 esi, esi
  0011a	74 3f		 je	 SHORT $LN39@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0011c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0011f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00124	2b ce		 sub	 ecx, esi
  00126	f7 e9		 imul	 ecx
  00128	d1 fa		 sar	 edx, 1
  0012a	8b c2		 mov	 eax, edx
  0012c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012f	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00131	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00134	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00137	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0013d	72 12		 jb	 SHORT $LN49@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00142	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00145	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00147	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0014a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0014d	77 2f		 ja	 SHORT $LN46@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014f	8b f2		 mov	 esi, edx
$LN49@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00151	51		 push	 ecx
  00152	56		 push	 esi
  00153	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00158	83 c4 08	 add	 esp, 8
$LN39@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0015b	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0015e	40		 inc	 eax
  0015f	89 3b		 mov	 DWORD PTR [ebx], edi
  00161	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00164	8b 45 f8	 mov	 eax, DWORD PTR tv589[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00167	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  0016a	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  0016d	8b 4d fc	 mov	 ecx, DWORD PTR tv606[ebp]
  00170	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00174	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00177	5b		 pop	 ebx

; 921  :     }

  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 08 00	 ret	 8
$LN46@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00183	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00188	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0018d	cc		 int	 3
??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00017	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0001e	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@@std@@YAXPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@0@QAV10@AAV?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SBoundaryShape> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00017	83 c6 24	 add	 esi, 36			; 00000024H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0001e	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Destroy_range@V?$allocator@USBoundaryShape@@@std@@@std@@YAXPAUSBoundaryShape@@QAU1@AAV?$allocator@USBoundaryShape@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2730 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2731 :         auto& _My_data = _Mypair._Myval2;
; 2732 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2733 : 
; 2734 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2735 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2736 :         } else {
; 2737 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2738 :         }
; 2739 : 
; 2740 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN29@Construct

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2749 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2751 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2752 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2753 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2754 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2755 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4885 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN27@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN27@Construct
$LN18@Construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 77   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN27@Construct
$LN19@Construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN27@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2782 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN29@Construct:

; 2741 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN26@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2099 :         auto& _Al         = _Getal();
; 2100 :         auto& _My_data    = _Mypair._Myval2;
; 2101 :         pointer& _Myfirst = _My_data._Myfirst;
; 2102 :         pointer& _Mylast  = _My_data._Mylast;
; 2103 :         pointer& _Myend   = _My_data._Myend;
; 2104 : 
; 2105 :         _My_data._Orphan_all();
; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN2@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN18@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN15@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN18@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 2116 :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Tidy:
  00065	cc		 int	 3
?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ PROC ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 830  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ENDP ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >, COMDAT
; _this$ = ecx

; 746  :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 747  :         const auto& _Right_data = _Right._Mypair._Myval2;
; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00004	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 747  :         const auto& _Right_data = _Right._Mypair._Myval2;
; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00021	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00024	2b 08		 sub	 ecx, DWORD PTR [eax]
  00026	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002b	f7 e9		 imul	 ecx
  0002d	d1 fa		 sar	 edx, 1
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	03 c2		 add	 eax, edx

; 2128 :         if (_Count != 0) {

  00036	74 75		 je	 SHORT $LN45@vector

; 2069 :         if (_Newcapacity > max_size()) {

  00038	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0003d	77 77		 ja	 SHORT $LN50@vector
  0003f	53		 push	 ebx
  00040	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00041	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00044	c1 e6 02	 shl	 esi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00047	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0004d	72 0d		 jb	 SHORT $LN23@vector

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004f	56		 push	 esi
  00050	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00055	83 c4 04	 add	 esp, 4
  00058	8b d8		 mov	 ebx, eax
  0005a	eb 13		 jmp	 SHORT $LN22@vector
$LN23@vector:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0005c	85 f6		 test	 esi, esi
  0005e	74 0d		 je	 SHORT $LN24@vector

; 77   :         return ::operator new(_Bytes);

  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00066	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00069	8b d8		 mov	 ebx, eax
  0006b	eb 02		 jmp	 SHORT $LN22@vector
$LN24@vector:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0006d	33 db		 xor	 ebx, ebx
$LN22@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2053 :         _Myfirst           = _Newvec;

  0006f	89 1f		 mov	 DWORD PTR [edi], ebx

; 2054 :         _Mylast            = _Newvec;
; 2055 :         _Myend             = _Newvec + _Newcapacity;

  00071	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00074	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00077	89 47 08	 mov	 DWORD PTR [edi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1691 :     auto _UFirst = _Get_unwrapped(_STD move(_First));

  0007a	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  0007d	53		 push	 ebx
  0007e	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00081	8b 30		 mov	 esi, DWORD PTR [eax]
  00083	57		 push	 edi
  00084	56		 push	 esi
  00085	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSPoint@@PAU1@@std@@YAPAUSPoint@@PAU1@00@Z ; std::_Copy_memmove<SPoint *,SPoint *>

; 1705 :                 _Dest += _ULast - _UFirst;

  0008a	2b fe		 sub	 edi, esi
  0008c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00091	f7 ef		 imul	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  00093	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  00096	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1705 :                 _Dest += _ULast - _UFirst;

  00099	d1 fa		 sar	 edx, 1
  0009b	8b c2		 mov	 eax, edx
  0009d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a0	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000a2	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1705 :                 _Dest += _ULast - _UFirst;

  000a3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000a6	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000a9	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000ac	5b		 pop	 ebx
$LN45@vector:

; 749  :         _Construct_n(_Count, _Right_data._Myfirst, _Right_data._Mylast);
; 750  :     }

  000ad	8b c7		 mov	 eax, edi
  000af	5f		 pop	 edi
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
$LN50@vector:

; 2070 :             _Xlength();

  000b6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@CAXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Xlength
$LN48@vector:
  000bb	cc		 int	 3
??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCBoundaryShapeManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBoundaryShapeManager@@UAEPAXI@Z PROC		; CBoundaryShapeManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CBoundaryShapeManager@@UAE@XZ ; CBoundaryShapeManager::~CBoundaryShapeManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCBoundaryShapeManager@@UAEPAXI@Z ENDP		; CBoundaryShapeManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@CAXXZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ PROC ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6d		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0e		 je	 SHORT $LN8@vector
$LL9@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00019	83 c6 24	 add	 esi, 36			; 00000024H
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00020	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00023	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00028	8b 37		 mov	 esi, DWORD PTR [edi]
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	c1 fa 03	 sar	 edx, 3
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0003c	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00045	72 12		 jb	 SHORT $LN35@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00047	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0004a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004d	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00052	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00055	77 23		 ja	 SHORT $LN32@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00057	8b f2		 mov	 esi, edx
$LN35@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00059	51		 push	 ecx
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00060	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00066	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00069	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00070	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  00077	5f		 pop	 edi

; 835  :     }

  00078	5e		 pop	 esi
  00079	c3		 ret	 0
$LN32@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN44@vector:
  0007f	cc		 int	 3
??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ENDP ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z PROC ; std::allocator<SBoundaryShape>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 831  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@USBoundaryShape@@@std@@QAEXQAUSBoundaryShape@@I@Z ENDP ; std::allocator<SBoundaryShape>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
$T2 = 8							; size = 4
_sShape$ = 8						; size = 4
_fX$ = 12						; size = 4
_fY$ = 16						; size = 4
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z PROC ; CBoundaryShapeManager::PointInShape, COMDAT
; _this$ = ecx

; 122  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b 45 08	 mov	 eax, DWORD PTR _sShape$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 122  : {

  00007	53		 push	 ebx
  00008	57		 push	 edi

; 123  : 	bool bInside = false;

  00009	32 db		 xor	 bl, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000b	8b 38		 mov	 edi, DWORD PTR [eax]
  0000d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00010	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00015	2b cf		 sub	 ecx, edi
  00017	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi
  0001a	f7 e9		 imul	 ecx
  0001c	d1 fa		 sar	 edx, 1
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 125  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  00028	0f 84 a7 00 00
	00		 je	 $LN93@PointInSha
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0002e	f3 0f 10 65 10	 movss	 xmm4, DWORD PTR _fY$[ebp]
  00033	f3 0f 10 75 0c	 movss	 xmm6, DWORD PTR _fX$[ebp]
  00038	56		 push	 esi
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@PointInSha:

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00040	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00043	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00048	8b 37		 mov	 esi, DWORD PTR [edi]
  0004a	2b ce		 sub	 ecx, esi
  0004c	f7 e9		 imul	 ecx
  0004e	d1 fa		 sar	 edx, 1
  00050	8b fa		 mov	 edi, edx
  00052	c1 ef 1f	 shr	 edi, 31			; 0000001fH
  00055	03 fa		 add	 edi, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 127  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  00057	74 68		 je	 SHORT $LN2@PointInSha
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00059	8d 4f ff	 lea	 ecx, DWORD PTR [edi-1]
  0005c	33 c0		 xor	 eax, eax
  0005e	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  00061	c1 e1 02	 shl	 ecx, 2
$LL7@PointInSha:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 130  : 				 ((sShape.m_vContours[k][j][1] <= fY) && (fY < sShape.m_vContours[k][i][1]))) &&

  00064	f3 0f 10 6c 30
	04		 movss	 xmm5, DWORD PTR [eax+esi+4]
  0006a	0f 2f e5	 comiss	 xmm4, xmm5
  0006d	72 0b		 jb	 SHORT $LN92@PointInSha
  0006f	f3 0f 10 5c 31
	04		 movss	 xmm3, DWORD PTR [ecx+esi+4]
  00075	0f 2f dc	 comiss	 xmm3, xmm4
  00078	77 10		 ja	 SHORT $LN91@PointInSha
$LN92@PointInSha:
  0007a	f3 0f 10 5c 31
	04		 movss	 xmm3, DWORD PTR [ecx+esi+4]
  00080	0f 2f e3	 comiss	 xmm4, xmm3
  00083	72 32		 jb	 SHORT $LN5@PointInSha
  00085	0f 2f ec	 comiss	 xmm5, xmm4
  00088	76 2d		 jbe	 SHORT $LN5@PointInSha
$LN91@PointInSha:
  0008a	f3 0f 10 14 30	 movss	 xmm2, DWORD PTR [eax+esi]
  0008f	f3 0f 5c dd	 subss	 xmm3, xmm5
  00093	0f 28 cc	 movaps	 xmm1, xmm4
  00096	0f 28 c2	 movaps	 xmm0, xmm2
  00099	f3 0f 5c cd	 subss	 xmm1, xmm5
  0009d	f3 0f 5c c2	 subss	 xmm0, xmm2
  000a1	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000a5	f3 0f 5e cb	 divss	 xmm1, xmm3
  000a9	f3 0f 58 ca	 addss	 xmm1, xmm2
  000ad	0f 2f ce	 comiss	 xmm1, xmm6
  000b0	76 05		 jbe	 SHORT $LN5@PointInSha

; 131  : 				  (fX < (sShape.m_vContours[k][i][0] - sShape.m_vContours[k][i][0]) * (fY - sShape.m_vContours[k][i][1]) / (sShape.m_vContours[k][j][1] - sShape.m_vContours[k][i][1]) + sShape.m_vContours[k][i][0]))
; 132  : 			{
; 133  : 				bInside = !bInside;

  000b2	84 db		 test	 bl, bl
  000b4	0f 94 c3	 sete	 bl
$LN5@PointInSha:

; 127  : 		for (DWORD i = 0, j = sShape.m_vContours[k].size() - 1; i < sShape.m_vContours[k].size(); j = i++)

  000b7	8b c8		 mov	 ecx, eax
  000b9	83 c0 0c	 add	 eax, 12			; 0000000cH
  000bc	83 ef 01	 sub	 edi, 1
  000bf	75 a3		 jne	 SHORT $LL7@PointInSha
$LN2@PointInSha:

; 125  : 	for (DWORD k = 0; k < sShape.m_vContours.size(); ++k)

  000c1	8b 7d 08	 mov	 edi, DWORD PTR $T2[ebp]
  000c4	83 c7 0c	 add	 edi, 12			; 0000000cH
  000c7	83 6d fc 01	 sub	 DWORD PTR $T1[ebp], 1
  000cb	89 7d 08	 mov	 DWORD PTR $T2[ebp], edi
  000ce	0f 85 6c ff ff
	ff		 jne	 $LL4@PointInSha

; 134  : 			}
; 135  : 		}
; 136  : 	}
; 137  : 
; 138  : 	return bInside;

  000d4	5e		 pop	 esi
$LN93@PointInSha:
  000d5	5f		 pop	 edi

; 139  : }

  000d6	8a c3		 mov	 al, bl
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ENDP ; CBoundaryShapeManager::PointInShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z
_TEXT	SEGMENT
tv90 = 8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z PROC	; CBoundaryShapeManager::RandomPoint, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 143  : 	bool bSuccess = false;

  0000b	32 c9		 xor	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000d	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00010	2b 53 04	 sub	 edx, DWORD PTR [ebx+4]
  00013	f7 ea		 imul	 edx
  00015	c1 fa 03	 sar	 edx, 3
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 145  : 	if (m_vBoundaries.size() > 0)

  0001f	74 7b		 je	 SHORT $LN10@RandomPoin

; 146  : 	{
; 147  : 		int nIndex = random_range(0, m_vBoundaries.size() - 1);

  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	48		 dec	 eax
  00024	50		 push	 eax
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0002c	8d 0c c0	 lea	 ecx, DWORD PTR [eax+eax*8]
  0002f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 150  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  00032	f3 0f 10 44 88
	18		 movss	 xmm0, DWORD PTR [eax+ecx*4+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00038	8d 3c 88	 lea	 edi, DWORD PTR [eax+ecx*4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 150  : 		fX = frandom(sShape.m_afMin[0], sShape.m_afMax[0]);

  0003b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00041	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00050	8b 75 08	 mov	 esi, DWORD PTR _fX$[ebp]
  00053	d9 1e		 fstp	 DWORD PTR [esi]

; 151  : 		fY = frandom(sShape.m_afMin[1], sShape.m_afMax[1]);

  00055	f3 0f 10 47 1c	 movss	 xmm0, DWORD PTR [edi+28]
  0005a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00060	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0006f	8b 45 0c	 mov	 eax, DWORD PTR _fY$[ebp]

; 152  : 
; 153  : 		bSuccess = PointInShape(sShape, fX, fY);

  00072	8b cb		 mov	 ecx, ebx
  00074	d9 5d 08	 fstp	 DWORD PTR tv90[ebp]
  00077	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv90[ebp]
  0007c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00082	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00086	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0008a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008f	57		 push	 edi
  00090	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape

; 154  : 	}
; 155  : 
; 156  : 	return bSuccess;

  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx

; 157  : }

  00098	5d		 pop	 ebp
  00099	c2 08 00	 ret	 8
$LN10@RandomPoin:

; 154  : 	}
; 155  : 
; 156  : 	return bSuccess;

  0009c	8a c1		 mov	 al, cl
  0009e	5b		 pop	 ebx

; 157  : }

  0009f	5d		 pop	 ebp
  000a0	c2 08 00	 ret	 8
?RandomPoint@CBoundaryShapeManager@@QAE_NAAM0@Z ENDP	; CBoundaryShapeManager::RandomPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?PointInside@CBoundaryShapeManager@@QAE_NMM@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv183 = -4						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z PROC	; CBoundaryShapeManager::PointInside, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00009	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 112  : {

  0000e	53		 push	 ebx
  0000f	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00010	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 113  : 	bool bInside = false;

  00013	32 db		 xor	 bl, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00015	2b d6		 sub	 edx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 112  : {

  00017	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001a	f7 ea		 imul	 edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 112  : {

  0001c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001d	c1 fa 03	 sar	 edx, 3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 115  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  00020	33 ff		 xor	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00022	8b c2		 mov	 eax, edx
  00024	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00027	03 c2		 add	 eax, edx
  00029	89 45 fc	 mov	 DWORD PTR tv183[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 115  : 	for (DWORD i = 0; i < m_vBoundaries.size() && !bInside; ++i)

  0002c	74 32		 je	 SHORT $LN14@PointInsid
  0002e	66 90		 npad	 2
$LL4@PointInsid:
  00030	84 db		 test	 bl, bl
  00032	75 2c		 jne	 SHORT $LN14@PointInsid

; 116  : 		bInside = PointInShape(m_vBoundaries[i], fX, fY);

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fY$[ebp]
  00039	83 ec 08	 sub	 esp, 8
  0003c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fX$[ebp]
  00047	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ?PointInShape@CBoundaryShapeManager@@AAE_NAAUSBoundaryShape@@MM@Z ; CBoundaryShapeManager::PointInShape
  00052	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00055	47		 inc	 edi
  00056	83 c6 24	 add	 esi, 36			; 00000024H
  00059	8a d8		 mov	 bl, al
  0005b	3b 7d fc	 cmp	 edi, DWORD PTR tv183[ebp]
  0005e	72 d0		 jb	 SHORT $LL4@PointInsid
$LN14@PointInsid:
  00060	5f		 pop	 edi

; 117  : 
; 118  : 	return bInside;
; 119  : }

  00061	5e		 pop	 esi
  00062	8a c3		 mov	 al, bl
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
?PointInside@CBoundaryShapeManager@@QAE_NMM@Z ENDP	; CBoundaryShapeManager::PointInside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
_TEXT	SEGMENT
_nNumContours$2 = -140					; size = 4
_nNumBoundaries$3 = -136				; size = 4
$T4 = -132						; size = 1
_this$GSCopy$ = -132					; size = 4
_nNumPoints$5 = -128					; size = 4
_i$1$ = -124						; size = 4
_j$1$ = -120						; size = 4
_this$GSCopy$1$ = -116					; size = 4
_pFile$1$ = -112					; size = 4
_bSuccess$ = -106					; size = 1
_bSuccess$1$ = -105					; size = 1
$T6 = -104						; size = 24
_vPoints$7 = -92					; size = 12
$T8 = -80						; size = 24
_sPoint$9 = -68						; size = 12
_sShape$10 = -56					; size = 36
$T11 = -44						; size = 24
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pszFilename$ = 8					; size = 4
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z PROC	; CBoundaryShapeManager::LoadBsfFile, COMDAT
; _this$ = ecx

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	8b f9		 mov	 edi, ecx
  00033	89 7d 8c	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00036	8b 75 08	 mov	 esi, DWORD PTR _pszFilename$[ebp]

; 19   : 	bool bSuccess = true;

  00039	b0 01		 mov	 al, 1

; 20   : 	try
; 21   : 	{
; 22   : 		FILE* pFile = fopen(pszFilename, "rb");

  0003b	68 00 00 00 00	 push	 OFFSET ??_C@_02JDPG@rb@
  00040	56		 push	 esi
  00041	89 bd 7c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$[ebp], edi
  00047	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  0004a	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00054	e8 00 00 00 00	 call	 _fopen
  00059	83 c4 08	 add	 esp, 8
  0005c	89 45 90	 mov	 DWORD PTR _pFile$1$[ebp], eax

; 23   : 		if (pFile)

  0005f	85 c0		 test	 eax, eax
  00061	0f 84 95 02 00
	00		 je	 $LN15@LoadBsfFil

; 24   : 		{
; 25   : 			unsigned int nNumBoundaries;
; 26   : 			if (fread(&nNumBoundaries, sizeof(unsigned int), 1, pFile) == 1)

  00067	8b f0		 mov	 esi, eax
  00069	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _nNumBoundaries$3[ebp]
  0006f	56		 push	 esi
  00070	6a 01		 push	 1
  00072	6a 04		 push	 4
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 _fread
  0007a	83 c4 10	 add	 esp, 16			; 00000010H
  0007d	83 f8 01	 cmp	 eax, 1
  00080	0f 85 54 02 00
	00		 jne	 $LN17@LoadBsfFil

; 28   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  00086	33 c0		 xor	 eax, eax
$LN267@LoadBsfFil:
  00088	89 45 84	 mov	 DWORD PTR _i$1$[ebp], eax
  0008b	3b 85 78 ff ff
	ff		 cmp	 eax, DWORD PTR _nNumBoundaries$3[ebp]
  00091	0f 83 54 02 00
	00		 jae	 $LN18@LoadBsfFil
  00097	80 7d 97 00	 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  0009b	0f 84 4a 02 00
	00		 je	 $LN18@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000a1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _sShape$10[ebp], 0
  000a8	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _sShape$10[ebp+4], 0
  000af	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _sShape$10[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 33   : 					if (fread(&nNumContours, sizeof(unsigned int), 1, pFile) == 1)

  000b6	56		 push	 esi
  000b7	6a 01		 push	 1
  000b9	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _nNumContours$2[ebp]
  000bf	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000c3	6a 04		 push	 4
  000c5	50		 push	 eax
  000c6	e8 00 00 00 00	 call	 _fread
  000cb	83 c4 10	 add	 esp, 16			; 00000010H
  000ce	83 f8 01	 cmp	 eax, 1
  000d1	0f 85 d9 01 00
	00		 jne	 $LN19@LoadBsfFil

; 35   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  000d7	33 c0		 xor	 eax, eax
$LN266@LoadBsfFil:
  000d9	89 45 88	 mov	 DWORD PTR _j$1$[ebp], eax
  000dc	3b 85 74 ff ff
	ff		 cmp	 eax, DWORD PTR _nNumContours$2[ebp]
  000e2	0f 83 9c 01 00
	00		 jae	 $LN6@LoadBsfFil
  000e8	80 7d 97 00	 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  000ec	0f 84 92 01 00
	00		 je	 $LN6@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000f2	33 f6		 xor	 esi, esi
  000f4	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vPoints$7[ebp], 0
  000fb	89 75 a8	 mov	 DWORD PTR _vPoints$7[ebp+4], esi
  000fe	89 75 ac	 mov	 DWORD PTR _vPoints$7[ebp+8], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 39   : 							if (fread(&nNumPoints, sizeof(unsigned int), 1, pFile) == 1)

  00101	ff 75 90	 push	 DWORD PTR _pFile$1$[ebp]
  00104	8d 45 80	 lea	 eax, DWORD PTR _nNumPoints$5[ebp]
  00107	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  0010b	6a 01		 push	 1
  0010d	6a 04		 push	 4
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 _fread
  00115	83 c4 10	 add	 esp, 16			; 00000010H
  00118	83 f8 01	 cmp	 eax, 1
  0011b	0f 85 39 01 00
	00		 jne	 $LN21@LoadBsfFil

; 40   : 							{
; 41   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  00121	33 ff		 xor	 edi, edi
$LL10@LoadBsfFil:
  00123	3b 7d 80	 cmp	 edi, DWORD PTR _nNumPoints$5[ebp]
  00126	0f 83 02 01 00
	00		 jae	 $LN9@LoadBsfFil
  0012c	80 7d 97 00	 cmp	 BYTE PTR _bSuccess$1$[ebp], 0
  00130	0f 84 f8 00 00
	00		 je	 $LN9@LoadBsfFil

; 42   : 								{
; 43   : 									SPoint sPoint;
; 44   : 
; 45   : 									if (fread(sPoint.m_afData, sizeof(float), 3, pFile) == 3)

  00136	ff 75 90	 push	 DWORD PTR _pFile$1$[ebp]
  00139	8d 45 bc	 lea	 eax, DWORD PTR _sPoint$9[ebp]
  0013c	6a 03		 push	 3
  0013e	6a 04		 push	 4
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 _fread
  00146	83 c4 10	 add	 esp, 16			; 00000010H
  00149	83 f8 03	 cmp	 eax, 3
  0014c	0f 85 be 00 00
	00		 jne	 $LN23@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00152	3b 75 ac	 cmp	 esi, DWORD PTR _vPoints$7[ebp+8]
  00155	74 17		 je	 SHORT $LN233@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00157	f3 0f 7e 45 bc	 movq	 xmm0, QWORD PTR _sPoint$9[ebp]
  0015c	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00160	8b 45 c4	 mov	 eax, DWORD PTR _sPoint$9[ebp+8]
  00163	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  00166	83 c6 0c	 add	 esi, 12			; 0000000cH
  00169	89 75 a8	 mov	 DWORD PTR _vPoints$7[ebp+4], esi

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0016c	eb 10		 jmp	 SHORT $LN232@LoadBsfFil
$LN233@LoadBsfFil:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0016e	8d 45 bc	 lea	 eax, DWORD PTR _sPoint$9[ebp]
  00171	50		 push	 eax
  00172	56		 push	 esi
  00173	8d 4d a4	 lea	 ecx, DWORD PTR _vPoints$7[ebp]
  00176	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSPoint@@@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEPAUSPoint@@QAU2@ABU2@@Z ; std::vector<SPoint,std::allocator<SPoint> >::_Emplace_reallocate<SPoint const &>
  0017b	8b 75 a8	 mov	 esi, DWORD PTR _vPoints$7[ebp+4]
$LN232@LoadBsfFil:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 48   : 										if (j == 0 && k == 0)

  0017e	83 7d 88 00	 cmp	 DWORD PTR _j$1$[ebp], 0
  00182	75 1f		 jne	 SHORT $LN25@LoadBsfFil
  00184	85 ff		 test	 edi, edi
  00186	75 1b		 jne	 SHORT $LN25@LoadBsfFil

; 49   : 										{
; 50   : 											memcpy(sShape.m_afMin, sPoint.m_afData, 3 * sizeof(float));

  00188	f3 0f 7e 45 bc	 movq	 xmm0, QWORD PTR _sPoint$9[ebp]
  0018d	47		 inc	 edi
  0018e	8b 45 c4	 mov	 eax, DWORD PTR _sPoint$9[ebp+8]
  00191	66 0f d6 45 d4	 movq	 QWORD PTR _sShape$10[ebp+12], xmm0
  00196	89 45 dc	 mov	 DWORD PTR _sShape$10[ebp+20], eax

; 51   : 											memcpy(sShape.m_afMax, sPoint.m_afData, 3 * sizeof(float));

  00199	66 0f d6 45 e0	 movq	 QWORD PTR _sShape$10[ebp+24], xmm0
  0019e	89 45 e8	 mov	 DWORD PTR _sShape$10[ebp+32], eax
  001a1	eb 80		 jmp	 SHORT $LL10@LoadBsfFil
$LN25@LoadBsfFil:

; 52   : 										}
; 53   : 										else
; 54   : 										{
; 55   : 											for (int l = 0; l < 3; ++l)
; 56   : 											{
; 57   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001a3	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _sShape$10[ebp+12]
  001a8	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _sPoint$9[ebp]
  001ad	0f 2f c1	 comiss	 xmm0, xmm1
  001b0	76 07		 jbe	 SHORT $LN27@LoadBsfFil

; 58   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001b2	f3 0f 11 4d d4	 movss	 DWORD PTR _sShape$10[ebp+12], xmm1
  001b7	eb 0b		 jmp	 SHORT $LN11@LoadBsfFil
$LN27@LoadBsfFil:

; 59   : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001b9	0f 2f 4d e0	 comiss	 xmm1, DWORD PTR _sShape$10[ebp+24]
  001bd	76 05		 jbe	 SHORT $LN11@LoadBsfFil

; 60   : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  001bf	f3 0f 11 4d e0	 movss	 DWORD PTR _sShape$10[ebp+24], xmm1
$LN11@LoadBsfFil:

; 52   : 										}
; 53   : 										else
; 54   : 										{
; 55   : 											for (int l = 0; l < 3; ++l)
; 56   : 											{
; 57   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001c4	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _sShape$10[ebp+16]
  001c9	f3 0f 10 4d c0	 movss	 xmm1, DWORD PTR _sPoint$9[ebp+4]
  001ce	0f 2f c1	 comiss	 xmm0, xmm1
  001d1	76 07		 jbe	 SHORT $LN253@LoadBsfFil

; 58   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001d3	f3 0f 11 4d d8	 movss	 DWORD PTR _sShape$10[ebp+16], xmm1
  001d8	eb 0b		 jmp	 SHORT $LN254@LoadBsfFil
$LN253@LoadBsfFil:

; 59   : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001da	0f 2f 4d e4	 comiss	 xmm1, DWORD PTR _sShape$10[ebp+28]
  001de	76 05		 jbe	 SHORT $LN254@LoadBsfFil

; 60   : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  001e0	f3 0f 11 4d e4	 movss	 DWORD PTR _sShape$10[ebp+28], xmm1
$LN254@LoadBsfFil:

; 52   : 										}
; 53   : 										else
; 54   : 										{
; 55   : 											for (int l = 0; l < 3; ++l)
; 56   : 											{
; 57   : 												if (sPoint.m_afData[l] < sShape.m_afMin[l])

  001e5	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _sShape$10[ebp+20]
  001ea	f3 0f 10 4d c4	 movss	 xmm1, DWORD PTR _sPoint$9[ebp+8]
  001ef	0f 2f c1	 comiss	 xmm0, xmm1
  001f2	76 0b		 jbe	 SHORT $LN256@LoadBsfFil

; 58   : 													sShape.m_afMin[l] = sPoint.m_afData[l];

  001f4	f3 0f 11 4d dc	 movss	 DWORD PTR _sShape$10[ebp+20], xmm1
  001f9	47		 inc	 edi
  001fa	e9 24 ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN256@LoadBsfFil:

; 59   : 												else if (sPoint.m_afData[l] > sShape.m_afMax[l])

  001ff	0f 2f 4d e8	 comiss	 xmm1, DWORD PTR _sShape$10[ebp+32]
  00203	76 23		 jbe	 SHORT $LN8@LoadBsfFil

; 60   : 													sShape.m_afMax[l] = sPoint.m_afData[l];

  00205	f3 0f 11 4d e8	 movss	 DWORD PTR _sShape$10[ebp+32], xmm1
  0020a	47		 inc	 edi
  0020b	e9 13 ff ff ff	 jmp	 $LL10@LoadBsfFil
$LN23@LoadBsfFil:

; 61   : 											}
; 62   : 										}
; 63   : 									}
; 64   : 									else
; 65   : 									{
; 66   : 										m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read point";

  00210	8b 45 8c	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00213	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@GKKDMKOH@Error?5in?5CBoundaryShapeManager?3@
  00218	8d 48 10	 lea	 ecx, DWORD PTR [eax+16]
  0021b	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 67   : 										bSuccess = false;

  00220	32 c0		 xor	 al, al
  00222	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  00225	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN8@LoadBsfFil:

; 40   : 							{
; 41   : 								for (unsigned int k = 0; k < nNumPoints && bSuccess; ++k)

  00228	47		 inc	 edi
  00229	e9 f5 fe ff ff	 jmp	 $LL10@LoadBsfFil
$LN9@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0022e	8b 75 cc	 mov	 esi, DWORD PTR _sShape$10[ebp+4]
  00231	8d 45 a4	 lea	 eax, DWORD PTR _vPoints$7[ebp]
  00234	50		 push	 eax
  00235	3b 75 d0	 cmp	 esi, DWORD PTR _sShape$10[ebp+8]
  00238	74 12		 je	 SHORT $LN45@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0023a	8b ce		 mov	 ecx, esi
  0023c	e8 00 00 00 00	 call	 ??0?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SPoint,std::allocator<SPoint> >::vector<SPoint,std::allocator<SPoint> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00241	8b 7d 8c	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]

; 869  :         ++_Mylast;

  00244	83 c6 0c	 add	 esi, 12			; 0000000cH
  00247	89 75 cc	 mov	 DWORD PTR _sShape$10[ebp+4], esi

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0024a	eb 23		 jmp	 SHORT $LN22@LoadBsfFil
$LN45@LoadBsfFil:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0024c	56		 push	 esi
  0024d	8d 4d c8	 lea	 ecx, DWORD PTR _sShape$10[ebp]
  00250	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEPAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@1@QAV21@ABV21@@Z ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Emplace_reallocate<std::vector<SPoint,std::allocator<SPoint> > const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 72   : 							}

  00255	8b 7d 8c	 mov	 edi, DWORD PTR _this$GSCopy$1$[ebp]
  00258	eb 15		 jmp	 SHORT $LN22@LoadBsfFil
$LN21@LoadBsfFil:

; 73   : 							else
; 74   : 							{
; 75   : 								m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of points";

  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@MFJNADHG@Error?5in?5CBoundaryShapeManager?3@
  0025f	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  00262	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 76   : 								bSuccess = false;

  00267	32 c0		 xor	 al, al
  00269	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  0026c	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN22@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  0026f	8d 4d a4	 lea	 ecx, DWORD PTR _vPoints$7[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 79   : 						}

  00272	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00276	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 35   : 						for (unsigned int j = 0; j < nNumContours && bSuccess; ++j)

  0027b	8b 45 88	 mov	 eax, DWORD PTR _j$1$[ebp]
  0027e	40		 inc	 eax
  0027f	e9 55 fe ff ff	 jmp	 $LN266@LoadBsfFil
$LN6@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00284	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00287	8d 55 c8	 lea	 edx, DWORD PTR _sShape$10[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 80   : 						m_vBoundaries.push_back(sShape);

  0028a	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0028d	52		 push	 edx
  0028e	50		 push	 eax
  0028f	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  00292	74 12		 je	 SHORT $LN59@LoadBsfFil

; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  00294	51		 push	 ecx
  00295	e8 00 00 00 00	 call	 ??$construct@USBoundaryShape@@ABU1@@?$_Default_allocator_traits@V?$allocator@USBoundaryShape@@@std@@@std@@SAXAAV?$allocator@USBoundaryShape@@@1@QAUSBoundaryShape@@ABU3@@Z ; std::_Default_allocator_traits<std::allocator<SBoundaryShape> >::construct<SBoundaryShape,SBoundaryShape const &>

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0029a	8b 75 90	 mov	 esi, DWORD PTR _pFile$1$[ebp]

; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);

  0029d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 869  :         ++_Mylast;

  002a0	83 47 08 24	 add	 DWORD PTR [edi+8], 36	; 00000024H

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  002a4	eb 1f		 jmp	 SHORT $LN20@LoadBsfFil
$LN59@LoadBsfFil:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  002a6	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSBoundaryShape@@@?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@AAEPAUSBoundaryShape@@QAU2@ABU2@@Z ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::_Emplace_reallocate<SBoundaryShape const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 81   : 					}

  002ab	8b 75 90	 mov	 esi, DWORD PTR _pFile$1$[ebp]
  002ae	eb 15		 jmp	 SHORT $LN20@LoadBsfFil
$LN19@LoadBsfFil:

; 82   : 					else
; 83   : 					{
; 84   : 						m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of contours";

  002b0	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@HDPHEENE@Error?5in?5CBoundaryShapeManager?3@
  002b5	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  002b8	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 85   : 						bSuccess = false;

  002bd	32 c0		 xor	 al, al
  002bf	88 45 97	 mov	 BYTE PTR _bSuccess$1$[ebp], al
  002c2	88 45 96	 mov	 BYTE PTR _bSuccess$[ebp], al
$LN20@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  002c5	8d 4d c8	 lea	 ecx, DWORD PTR _sShape$10[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 87   : 				}

  002c8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  002cc	e8 00 00 00 00	 call	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 28   : 				for (unsigned int i = 0; i < nNumBoundaries && bSuccess; ++i)

  002d1	8b 45 84	 mov	 eax, DWORD PTR _i$1$[ebp]
  002d4	40		 inc	 eax
  002d5	e9 ae fd ff ff	 jmp	 $LN267@LoadBsfFil
$LN17@LoadBsfFil:

; 88   : 			}
; 89   : 			else
; 90   : 			{
; 91   : 				m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Failed to read number of boundaries";

  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@HJGPFIJI@Error?5in?5CBoundaryShapeManager?3@
  002df	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  002e2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 92   : 				bSuccess = false;

  002e7	c6 45 97 00	 mov	 BYTE PTR _bSuccess$1$[ebp], 0
$LN18@LoadBsfFil:

; 93   : 			}
; 94   : 			fclose(pFile);

  002eb	56		 push	 esi
  002ec	e8 00 00 00 00	 call	 _fclose

; 95   : 		}

  002f1	8a 45 97	 mov	 al, BYTE PTR _bSuccess$1$[ebp]
  002f4	83 c4 04	 add	 esp, 4
  002f7	e9 a1 01 00 00	 jmp	 $LN127@LoadBsfFil
$LN15@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  002fc	8b ce		 mov	 ecx, esi

; 2349 :     size_type _Mysize = 0; // current length of string

  002fe	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+16], 0
  00305	0f 57 c0	 xorps	 xmm0, xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00308	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+20], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0030f	0f 11 45 d4	 movups	 XMMWORD PTR $T11[ebp], xmm0

; 415  :             return __builtin_strlen(_First);

  00313	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL261@LoadBsfFil:
  00316	8a 01		 mov	 al, BYTE PTR [ecx]
  00318	41		 inc	 ecx
  00319	84 c0		 test	 al, al
  0031b	75 f9		 jne	 SHORT $LL261@LoadBsfFil
  0031d	2b ca		 sub	 ecx, edx

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0031f	51		 push	 ecx
  00320	56		 push	 esi
  00321	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]
  00324	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 98   : 			m_strCurrentError = std::string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + std::string(pszFilename);

  00329	0f 57 c0	 xorps	 xmm0, xmm0
  0032c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00330	6a 40		 push	 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00332	0f 11 45 b0	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00336	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 2770 :         _My_data._Myres               = _BUF_SIZE - 1;

  0033d	c7 45 c4 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00344	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00349	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00350	8b c8		 mov	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2781 :         _My_data._Mysize = _Count;

  00352	c7 45 c0 3e 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 62 ; 0000003eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00359	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0035c	89 4d b0	 mov	 DWORD PTR $T8[ebp], ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  0035f	c7 45 c4 3f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 63 ; 0000003fH

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00366	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00369	0f 10 05 10 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+16
  00370	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0
  00374	0f 10 05 20 00
	00 00		 movups	 xmm0, XMMWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+32
  0037b	0f 11 41 20	 movups	 XMMWORD PTR [ecx+32], xmm0
  0037f	f3 0f 7e 05 30
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+48
  00387	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  0038c	a1 38 00 00 00	 mov	 eax, DWORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+56
  00391	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  00394	66 a1 3c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0DP@CJLCLEKC@Error?5in?5CBoundaryShapeManager?3@+60
  0039a	66 89 41 3c	 mov	 WORD PTR [ecx+60], ax

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0039e	c6 41 3e 00	 mov	 BYTE PTR [ecx+62], 0

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  003a2	8d 45 d4	 lea	 eax, DWORD PTR $T11[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 98   : 			m_strCurrentError = std::string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + std::string(pszFilename);

  003a5	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  003a9	50		 push	 eax
  003aa	8d 45 b0	 lea	 eax, DWORD PTR $T8[ebp]
  003ad	50		 push	 eax
  003ae	ff b5 7c ff ff
	ff		 push	 DWORD PTR $T4[ebp]
  003b4	8d 4d 98	 lea	 ecx, DWORD PTR $T6[ebp]
  003b7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 98   : 			m_strCurrentError = std::string("Error in CBoundaryShapeManager::LoadBsfFile(): Could not open ") + std::string(pszFilename);

  003bc	8d 77 10	 lea	 esi, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3102 :         if (this == _STD addressof(_Right)) {

  003bf	8d 45 98	 lea	 eax, DWORD PTR $T6[ebp]
  003c2	3b f0		 cmp	 esi, eax
  003c4	74 23		 je	 SHORT $LN262@LoadBsfFil

; 3103 :             return *this;
; 3104 :         }
; 3105 : 
; 3106 :         auto& _Al                 = _Getal();
; 3107 :         auto& _Right_al           = _Right._Getal();
; 3108 :         constexpr auto _Pocma_val = _Choose_pocma_v<_Alty>;
; 3109 :         if constexpr (_Pocma_val == _Pocma_values::_Propagate_allocators) {
; 3110 :             if (_Al != _Right_al) {
; 3111 :                 // intentionally slams into noexcept on OOM, TRANSITION, VSO-466800
; 3112 :                 _Mypair._Myval2._Orphan_all();
; 3113 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 3114 :             }
; 3115 :         } else if constexpr (_Pocma_val == _Pocma_values::_No_propagate_allocators) {
; 3116 :             if (_Al != _Right_al) {
; 3117 :                 assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 3118 :                 return *this;
; 3119 :             }
; 3120 :         }
; 3121 : 
; 3122 :         _Tidy_deallocate();

  003c6	8b ce		 mov	 ecx, esi
  003c8	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  003cd	0f 10 45 98	 movups	 xmm0, XMMWORD PTR $T6[ebp]

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  003d1	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003d6	c6 45 98 00	 mov	 BYTE PTR $T6[ebp], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  003da	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  003dd	f3 0f 7e 45 a8	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  003e2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 3102 :         if (this == _STD addressof(_Right)) {

  003e7	eb 03		 jmp	 SHORT $LN148@LoadBsfFil
$LN262@LoadBsfFil:
  003e9	8b 4d ac	 mov	 ecx, DWORD PTR $T6[ebp+20]
$LN148@LoadBsfFil:

; 2301 :         return _BUF_SIZE <= _Myres;

  003ec	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  003ef	72 2c		 jb	 SHORT $LN161@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f1	8b 55 98	 mov	 edx, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003f4	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003f5	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003f7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003fd	72 14		 jb	 SHORT $LN171@LoadBsfFil

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003ff	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00402	83 c1 23	 add	 ecx, 35			; 00000023H
  00405	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00407	83 c0 fc	 add	 eax, -4			; fffffffcH
  0040a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0040d	0f 87 a8 00 00
	00		 ja	 $LN222@LoadBsfFil
$LN171@LoadBsfFil:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00413	51		 push	 ecx
  00414	52		 push	 edx
  00415	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0041a	83 c4 08	 add	 esp, 8
$LN161@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0041d	8b 4d c4	 mov	 ecx, DWORD PTR $T8[ebp+20]
  00420	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00423	72 28		 jb	 SHORT $LN188@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00425	8b 55 b0	 mov	 edx, DWORD PTR $T8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00428	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00429	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0042b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00431	72 10		 jb	 SHORT $LN198@LoadBsfFil

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00433	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00436	83 c1 23	 add	 ecx, 35			; 00000023H
  00439	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0043b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0043e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00441	77 78		 ja	 SHORT $LN222@LoadBsfFil
$LN198@LoadBsfFil:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00443	51		 push	 ecx
  00444	52		 push	 edx
  00445	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0044a	83 c4 08	 add	 esp, 8
$LN188@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0044d	8b 4d e8	 mov	 ecx, DWORD PTR $T11[ebp+20]
  00450	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00453	72 28		 jb	 SHORT $LN215@LoadBsfFil
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00455	8b 55 d4	 mov	 edx, DWORD PTR $T11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00458	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00459	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0045b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00461	72 10		 jb	 SHORT $LN225@LoadBsfFil

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00463	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00466	83 c1 23	 add	 ecx, 35			; 00000023H
  00469	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0046b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0046e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00471	77 48		 ja	 SHORT $LN222@LoadBsfFil
$LN225@LoadBsfFil:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00473	51		 push	 ecx
  00474	52		 push	 edx
  00475	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0047a	83 c4 08	 add	 esp, 8
$LN215@LoadBsfFil:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 99   : 			bSuccess = false;

  0047d	32 c0		 xor	 al, al

; 100  : 		}
; 101  : 	}

  0047f	eb 1c		 jmp	 SHORT $LN127@LoadBsfFil
__catch$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$0:

; 102  : 	
; 103  : 	catch(...)
; 104  : 	{
; 105  : 		m_strCurrentError = "Error in CBoundaryShapeManager::LoadBsfFile(): Unknown exception";

  00481	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00487	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KDBLFLMN@Error?5in?5CBoundaryShapeManager?3@
  0048c	8d 49 10	 lea	 ecx, DWORD PTR [ecx+16]
  0048f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 106  : 	}

  00494	b8 00 00 00 00	 mov	 eax, $LN263@LoadBsfFil
  00499	c3		 ret	 0
$LN263@LoadBsfFil:
  0049a	8a 45 96	 mov	 al, BYTE PTR _bSuccess$[ebp]
$LN127@LoadBsfFil:

; 109  : }

  0049d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  004a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004a7	59		 pop	 ecx
  004a8	5f		 pop	 edi
  004a9	5e		 pop	 esi
  004aa	5b		 pop	 ebx
  004ab	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004ae	33 cd		 xor	 ecx, ebp
  004b0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004b5	8b e5		 mov	 esp, ebp
  004b7	5d		 pop	 ebp
  004b8	c2 04 00	 ret	 4
$LN222@LoadBsfFil:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004bb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN265@LoadBsfFil:
  004c0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _sShape$10[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SBoundaryShape@@QAE@XZ
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$3:
  00008	8d 4d a4	 lea	 ecx, DWORD PTR _vPoints$7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@QAE@XZ ; std::vector<SPoint,std::allocator<SPoint> >::~vector<SPoint,std::allocator<SPoint> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$4:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T11[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z$5:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR $T8[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0003e	33 c8		 xor	 ecx, eax
  00040	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00045	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z
  0004a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadBsfFile@CBoundaryShapeManager@@QAE_NPBD@Z ENDP	; CBoundaryShapeManager::LoadBsfFile
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??1CBoundaryShapeManager@@UAE@XZ
_TEXT	SEGMENT
??1CBoundaryShapeManager@@UAE@XZ PROC			; CBoundaryShapeManager::~CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CBoundaryShapeManager@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00009	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0000c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0000f	72 28		 jb	 SHORT $LN15@CBoundaryS
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00014	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN25@CBoundaryS

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 27		 ja	 SHORT $LN22@CBoundaryS

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN25@CBoundaryS:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN15@CBoundaryS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00039	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 15   : }

  00040	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00043	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004a	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 15   : }

  0004e	5e		 pop	 esi
  0004f	e9 00 00 00 00	 jmp	 ??1?$vector@USBoundaryShape@@V?$allocator@USBoundaryShape@@@std@@@std@@QAE@XZ ; std::vector<SBoundaryShape,std::allocator<SBoundaryShape> >::~vector<SBoundaryShape,std::allocator<SBoundaryShape> >
$LN22@CBoundaryS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@CBoundaryS:
  00059	cc		 int	 3
??1CBoundaryShapeManager@@UAE@XZ ENDP			; CBoundaryShapeManager::~CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp
;	COMDAT ??0CBoundaryShapeManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBoundaryShapeManager@@QAE@XZ PROC			; CBoundaryShapeManager::CBoundaryShapeManager, COMDAT
; _this$ = ecx

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CBoundaryShapeManager@@6B@
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000d	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 10   : }

  00014	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00024	0f 11 41 10	 movups	 XMMWORD PTR [ecx+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  00028	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0002f	c7 41 24 0f 00
	00 00		 mov	 DWORD PTR [ecx+36], 15	; 0000000fH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 8    : {

  00036	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00039	c6 41 10 00	 mov	 BYTE PTR [ecx+16], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\BoundaryShapeManager.cpp

; 10   : }

  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
??0CBoundaryShapeManager@@QAE@XZ ENDP			; CBoundaryShapeManager::CBoundaryShapeManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1SBoundaryShape@@QAE@XZ
_TEXT	SEGMENT
??1SBoundaryShape@@QAE@XZ PROC				; SBoundaryShape::~SBoundaryShape, COMDAT
; _this$ = ecx

; 830  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
??1SBoundaryShape@@QAE@XZ ENDP				; SBoundaryShape::~SBoundaryShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2099 :         auto& _Al         = _Getal();
; 2100 :         auto& _My_data    = _Mypair._Myval2;
; 2101 :         pointer& _Myfirst = _My_data._Myfirst;
; 2102 :         pointer& _Mylast  = _My_data._Mylast;
; 2103 :         pointer& _Myend   = _My_data._Myend;
; 2104 : 
; 2105 :         _My_data._Orphan_all();
; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6c		 je	 SHORT $LN2@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0e		 je	 SHORT $LN6@Tidy
$LL7@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@AAEXXZ ; std::vector<SPoint,std::allocator<SPoint> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00019	83 c6 0c	 add	 esi, 12			; 0000000cH
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL7@Tidy
$LN6@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00020	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00023	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00028	8b 37		 mov	 esi, DWORD PTR [edi]
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	d1 fa		 sar	 edx, 1
  00031	8b c2		 mov	 eax, edx
  00033	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00036	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00038	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0003b	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00044	72 12		 jb	 SHORT $LN30@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00046	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00049	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004c	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004e	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00051	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00054	77 23		 ja	 SHORT $LN27@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00056	8b f2		 mov	 esi, edx
$LN30@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	51		 push	 ecx
  00059	56		 push	 esi
  0005a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0005f	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00065	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00068	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  0006f	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 2116 :     }

  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	c3		 ret	 0
$LN27@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00079	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN38@Tidy:
  0007e	cc		 int	 3
?_Tidy@?$vector@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@V?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::vector<SPoint,std::allocator<SPoint> >,std::allocator<std::vector<SPoint,std::allocator<SPoint> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z PROC ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  0000c	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8

; 831  :     }

  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@V?$vector@USPoint@@V?$allocator@USPoint@@@std@@@std@@@std@@QAEXQAV?$vector@USPoint@@V?$allocator@USPoint@@@std@@@2@I@Z ENDP ; std::allocator<std::vector<SPoint,std::allocator<SPoint> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 5007 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5008 :         auto& _My_data = _Mypair._Myval2;
; 5009 :         _My_data._Orphan_all();
; 5010 :         _ASAN_STRING_REMOVE(*this);
; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN10@Tidy_deall
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN20@Tidy_deall

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN17@Tidy_deall

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN20@Tidy_deall:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN10@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 5023 :     }

  00044	c3		 ret	 0
$LN17@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN24@Tidy_deall:
  0004a	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3357 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]

; 3357 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 415  :             return __builtin_strlen(_First);

  0000b	8b f2		 mov	 esi, edx

; 3357 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	8b d9		 mov	 ebx, ecx
  0000f	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL64@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL64@operator
  0001a	2b f1		 sub	 esi, ecx

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0001f	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN8@operator

; 2283 :         value_type* _Result = _Bx._Buf;

  00026	8b fb		 mov	 edi, ebx

; 2301 :         return _BUF_SIZE <= _Myres;

  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002b	72 02		 jb	 SHORT $LN11@operator

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN11@operator:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	57		 push	 edi

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 3358 :         return assign(_Ptr);

  00041	8b c3		 mov	 eax, ebx
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 3359 :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@operator:

; 4903 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 d4 00 00
	00		 ja	 $LN68@operator

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00058	8b fe		 mov	 edi, esi
  0005a	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 15		 jbe	 SHORT $LN25@operator

; 4885 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	83 c4 04	 add	 esp, 4
  00078	eb 52		 jmp	 SHORT $LN66@operator
$LN25@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007a	8b d1		 mov	 edx, ecx
  0007c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00081	d1 ea		 shr	 edx, 1
  00083	2b c2		 sub	 eax, edx
  00085	3b c8		 cmp	 ecx, eax
  00087	76 15		 jbe	 SHORT $LN26@operator

; 4889 :             return _Max;

  00089	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	eb 2e		 jmp	 SHORT $LN66@operator
$LN26@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000a1	3b f8		 cmp	 edi, eax
  000a3	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ae	72 0b		 jb	 SHORT $LN33@operator

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b6	83 c4 04	 add	 esp, 4
  000b9	eb 11		 jmp	 SHORT $LN66@operator
$LN33@operator:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000bb	85 c0		 test	 eax, eax
  000bd	74 0b		 je	 SHORT $LN34@operator

; 77   :         return ::operator new(_Bytes);

  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c5	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c8	eb 02		 jmp	 SHORT $LN66@operator
$LN34@operator:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000ca	33 c0		 xor	 eax, eax
$LN66@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	56		 push	 esi
  000cd	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000d0	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d3	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000d4	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000d7	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000da	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000df	8b 7d fc	 mov	 edi, DWORD PTR $T2[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000e5	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e8	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000ec	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ef	72 29		 jb	 SHORT $LN19@operator

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000f1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fc	72 12		 jb	 SHORT $LN56@operator

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fe	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00101	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00104	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00106	83 c0 fc	 add	 eax, -4			; fffffffcH
  00109	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010c	77 19		 ja	 SHORT $LN53@operator

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010e	8b c2		 mov	 eax, edx
$LN56@operator:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00110	51		 push	 ecx
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00117	83 c4 08	 add	 esp, 8
$LN19@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3539 :         return _Reallocate_for(

  0011a	89 3b		 mov	 DWORD PTR [ebx], edi

; 3358 :         return assign(_Ptr);

  0011c	8b c3		 mov	 eax, ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 3359 :     }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN53@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00127	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN68@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  0012c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN65@operator:
  00131	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
__New_capacity$2$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2949 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2956 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2950 :         auto& _My_data    = _Mypair._Myval2;
; 2951 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2952 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2953 :         _Left_data._Orphan_all();
; 2954 :         _Right_data._Orphan_all();
; 2955 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 2956 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2957 : 
; 2958 :         const auto _Left_capacity  = _Left_data._Myres;
; 2959 :         const auto _Right_capacity = _Right_data._Myres;
; 2960 :         // overflow is OK due to max_size() checks:
; 2961 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2962 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 2963 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN93@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN93@basic_stri

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2283 :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  0006b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN57@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN57@basic_stri:

; 2301 :         return _BUF_SIZE <= _Myres;

  00073	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00077	72 02		 jb	 SHORT $LN62@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN62@basic_stri:

; 2964 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2965 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2966 :             _Take_contents(_Left);
; 2967 :             const auto _Ptr = _My_data._Myptr();
; 2968 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Right_size));
; 2969 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax

; 2964 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2965 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2966 :             _Take_contents(_Left);
; 2967 :             const auto _Ptr = _My_data._Myptr();
; 2968 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Right_size));
; 2969 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy

; 2970 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN93@basic_stri:

; 2971 :             return;
; 2972 :         }
; 2973 : 
; 2974 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 2975 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN92@basic_stri

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2989 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Left_size));
; 2990 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 2976 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2977 :             // At this point, we have tested:
; 2978 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2979 :             // therefore: (by De Morgan's Laws)
; 2980 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2981 :             // therefore: (by the distributive property)
; 2982 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2983 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2984 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2985 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2986 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2987 :             _Take_contents(_Right);
; 2988 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx

; 2989 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Left_size));
; 2990 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  000d7	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  000db	72 02		 jb	 SHORT $LN85@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN85@basic_stri:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy

; 2991 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2992 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN92@basic_stri:

; 2993 :             return;
; 2994 :         }
; 2995 : 
; 2996 :         // can't use either buffer, reallocate
; 2997 :         const auto _Max = max_size();
; 2998 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 ae 00 00
	00		 jb	 $LN100@basic_stri

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 0e		 jbe	 SHORT $LN15@basic_stri

; 4885 :             return _Max;

  0011a	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __New_capacity$2$[ebp], 2147483647 ; 7fffffffH
  00121	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00126	eb 18		 jmp	 SHORT $LN94@basic_stri
$LN15@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00128	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0012d	3b c2		 cmp	 eax, edx
  0012f	0f 42 c2	 cmovb	 eax, edx
  00132	89 45 f8	 mov	 DWORD PTR __New_capacity$2$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3005 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00135	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00138	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0013e	72 13		 jb	 SHORT $LN23@basic_stri
$LN94@basic_stri:

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00146	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00149	8b d0		 mov	 edx, eax
  0014b	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$2$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	eb 1c		 jmp	 SHORT $LN98@basic_stri
$LN23@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00153	85 d2		 test	 edx, edx
  00155	74 16		 je	 SHORT $LN24@basic_stri

; 77   :         return ::operator new(_Bytes);

  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00160	8b d0		 mov	 edx, eax
  00162	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00165	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00168	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$2$[ebp]
  0016b	eb 05		 jmp	 SHORT $LN22@basic_stri
$LN24@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0016d	33 d2		 xor	 edx, edx
$LN98@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3012 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016f	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
$LN22@basic_stri:

; 3013 :         _My_data._Mysize = _New_size;

  00172	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00175	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2284 :         if (_Large_string_engaged()) {

  00178	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 3012 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0017b	89 16		 mov	 DWORD PTR [esi], edx

; 3014 :         _My_data._Myres  = _New_capacity;

  0017d	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 2301 :         return _BUF_SIZE <= _Myres;

  00180	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00184	72 02		 jb	 SHORT $LN29@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00186	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN29@basic_stri:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00188	51		 push	 ecx
  00189	57		 push	 edi
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memcpy
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  00193	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00197	72 02		 jb	 SHORT $LN36@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00199	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN36@basic_stri:

; 3015 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 3016 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 3017 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0019b	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0019e	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019f	50		 push	 eax

; 3015 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 3016 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 3017 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001a3	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a6	53		 push	 ebx
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _memcpy

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	8b c6		 mov	 eax, esi
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN100@basic_stri:

; 2999 :             _Xlen_string();

  001bb	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@basic_stri:
  001c0	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
