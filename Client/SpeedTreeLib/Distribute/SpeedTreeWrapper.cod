; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\Distribute\SpeedTreeWrapper.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA	; CSpeedTreeWrapper::ms_bSelfShadowOn
PUBLIC	?m_unNumWrappersActive@CSpeedTreeWrapper@@0IA	; CSpeedTreeWrapper::m_unNumWrappersActive
PUBLIC	?ms_lpBranchVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A ; CSpeedTreeWrapper::ms_lpBranchVertexShader
PUBLIC	?ms_lpLeafVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A ; CSpeedTreeWrapper::ms_lpLeafVertexShader
_BSS	SEGMENT
?m_unNumWrappersActive@CSpeedTreeWrapper@@0IA DD 01H DUP (?) ; CSpeedTreeWrapper::m_unNumWrappersActive
?ms_lpBranchVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A DD 01H DUP (?) ; CSpeedTreeWrapper::ms_lpBranchVertexShader
?ms_lpLeafVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A DD 01H DUP (?) ; CSpeedTreeWrapper::ms_lpLeafVertexShader
_BSS	ENDS
_DATA	SEGMENT
?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA DB 01H	; CSpeedTreeWrapper::ms_bSelfShadowOn
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0CSpeedTreeMaterial@@QAE@XZ			; CSpeedTreeMaterial::CSpeedTreeMaterial
PUBLIC	?Set@CSpeedTreeMaterial@@QAEXPBM@Z		; CSpeedTreeMaterial::Set
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?OnClear@CGraphicObjectInstance@@UAEXXZ		; CGraphicObjectInstance::OnClear
PUBLIC	?OnUpdate@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnUpdate
PUBLIC	?OnDeform@CGraphicObjectInstance@@UAEXXZ	; CGraphicObjectInstance::OnDeform
PUBLIC	?GetType@CSpeedTreeWrapper@@UBEHXZ		; CSpeedTreeWrapper::GetType
PUBLIC	?GetCollisionObjectCount@CSpeedTreeWrapper@@IAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
PUBLIC	?GetCollisionObject@CSpeedTreeWrapper@@IAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ; CSpeedTreeWrapper::GetCollisionObject
PUBLIC	?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ; CSpeedTreeWrapper::OnUpdateCollisionData
PUBLIC	?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z ; CSpeedTreeWrapper::OnUpdateHeighInstance
PUBLIC	?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z ; CSpeedTreeWrapper::OnGetObjectHeight
PUBLIC	?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z ; CSpeedTreeWrapper::GetBoundingSphere
PUBLIC	?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z	; CSpeedTreeWrapper::SetPosition
PUBLIC	?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::CalculateBBox
PUBLIC	?OnRender@CSpeedTreeWrapper@@UAEXXZ		; CSpeedTreeWrapper::OnRender
PUBLIC	?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderPCBlocker
PUBLIC	?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnBlendRender
PUBLIC	?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderToShadowMap
PUBLIC	?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ	; CSpeedTreeWrapper::OnRenderShadow
PUBLIC	??0CSpeedTreeWrapper@@QAE@XZ			; CSpeedTreeWrapper::CSpeedTreeWrapper
PUBLIC	??1CSpeedTreeWrapper@@UAE@XZ			; CSpeedTreeWrapper::~CSpeedTreeWrapper
PUBLIC	?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z	; CSpeedTreeWrapper::LoadTree
PUBLIC	?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType
PUBLIC	?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType
PUBLIC	?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::SetupLeafForTreeType
PUBLIC	?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ	; CSpeedTreeWrapper::EndLeafForTreeType
PUBLIC	?RenderBranches@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::RenderBranches
PUBLIC	?RenderFronds@CSpeedTreeWrapper@@QBEXXZ		; CSpeedTreeWrapper::RenderFronds
PUBLIC	?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ		; CSpeedTreeWrapper::RenderLeaves
PUBLIC	?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ	; CSpeedTreeWrapper::RenderBillboards
PUBLIC	?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ; CSpeedTreeWrapper::GetInstances
PUBLIC	?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ	; CSpeedTreeWrapper::MakeInstance
PUBLIC	?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z	; CSpeedTreeWrapper::DeleteInstance
PUBLIC	?Advance@CSpeedTreeWrapper@@QAEXXZ		; CSpeedTreeWrapper::Advance
PUBLIC	?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ	; CSpeedTreeWrapper::CleanUpMemory
PUBLIC	?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ		; CSpeedTreeWrapper::SetupBuffers
PUBLIC	?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupBranchBuffers
PUBLIC	?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupFrondBuffers
PUBLIC	?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ	; CSpeedTreeWrapper::SetupLeafBuffers
PUBLIC	?PositionTree@CSpeedTreeWrapper@@ABEXXZ		; CSpeedTreeWrapper::PositionTree
PUBLIC	?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
PUBLIC	?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z ; CSpeedTreeWrapper::SetShaderConstants
PUBLIC	??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
PUBLIC	?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
PUBLIC	??_GCSpeedTreeWrapper@@UAEPAXI@Z		; CSpeedTreeWrapper::`scalar deleting destructor'
PUBLIC	?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
PUBLIC	??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7CSpeedTreeWrapper@@6B@			; CSpeedTreeWrapper::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@	; `string'
PUBLIC	??_C@_04LIKELABK@?4dds@				; `string'
PUBLIC	??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@ ; `string'
PUBLIC	??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSpeedTreeWrapper@@6B@			; CSpeedTreeWrapper::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSpeedTreeWrapper@@@8			; CSpeedTreeWrapper `RTTI Type Descriptor'
PUBLIC	??_R3CSpeedTreeWrapper@@8			; CSpeedTreeWrapper::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSpeedTreeWrapper@@8			; CSpeedTreeWrapper::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSpeedTreeWrapper@@8		; CSpeedTreeWrapper::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicObjectInstance@@8		; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicObjectInstance@@@8		; CGraphicObjectInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicObjectInstance@@8			; CGraphicObjectInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f666666
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??0SGeometry@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::SGeometry::SGeometry
EXTRN	??1SGeometry@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::SGeometry::~SGeometry
EXTRN	??0STextures@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::STextures::STextures
EXTRN	??1STextures@CSpeedTreeRT@@QAE@XZ:PROC		; CSpeedTreeRT::STextures::~STextures
EXTRN	??0CSpeedTreeRT@@QAE@XZ:PROC			; CSpeedTreeRT::CSpeedTreeRT
EXTRN	??1CSpeedTreeRT@@QAE@XZ:PROC			; CSpeedTreeRT::~CSpeedTreeRT
EXTRN	??2CSpeedTreeRT@@SAPAXI@Z:PROC			; CSpeedTreeRT::operator new
EXTRN	??3CSpeedTreeRT@@SAXPAX@Z:PROC			; CSpeedTreeRT::operator delete
EXTRN	?Compute@CSpeedTreeRT@@QAE_NPBMI_N@Z:PROC	; CSpeedTreeRT::Compute
EXTRN	?MakeInstance@CSpeedTreeRT@@QAEPAV1@XZ:PROC	; CSpeedTreeRT::MakeInstance
EXTRN	?DeleteTransientData@CSpeedTreeRT@@QAEXXZ:PROC	; CSpeedTreeRT::DeleteTransientData
EXTRN	?LoadTree@CSpeedTreeRT@@QAE_NPBD@Z:PROC		; CSpeedTreeRT::LoadTree
EXTRN	?LoadTree@CSpeedTreeRT@@QAE_NPBEI@Z:PROC	; CSpeedTreeRT::LoadTree
EXTRN	?SetTreeSize@CSpeedTreeRT@@QAEXMM@Z:PROC	; CSpeedTreeRT::SetTreeSize
EXTRN	?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetTreePosition
EXTRN	?SetTreePosition@CSpeedTreeRT@@QAEXMMM@Z:PROC	; CSpeedTreeRT::SetTreePosition
EXTRN	?SetBranchLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetBranchLightingMethod
EXTRN	?SetLeafLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetLeafLightingMethod
EXTRN	?SetFrondLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z:PROC ; CSpeedTreeRT::SetFrondLightingMethod
EXTRN	?GetLeafLightingAdjustment@CSpeedTreeRT@@QBEMXZ:PROC ; CSpeedTreeRT::GetLeafLightingAdjustment
EXTRN	?GetBranchMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetBranchMaterial
EXTRN	?GetLeafMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetLeafMaterial
EXTRN	?GetFrondMaterial@CSpeedTreeRT@@QBEPBMXZ:PROC	; CSpeedTreeRT::GetFrondMaterial
EXTRN	?SetLeafRockingState@CSpeedTreeRT@@QAEX_N@Z:PROC ; CSpeedTreeRT::SetLeafRockingState
EXTRN	?SetNumLeafRockingGroups@CSpeedTreeRT@@QAEXI@Z:PROC ; CSpeedTreeRT::SetNumLeafRockingGroups
EXTRN	?SetLeafWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetLeafWindMethod
EXTRN	?SetBranchWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetBranchWindMethod
EXTRN	?SetFrondWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z:PROC ; CSpeedTreeRT::SetFrondWindMethod
EXTRN	?SetDropToBillboard@CSpeedTreeRT@@SAX_N@Z:PROC	; CSpeedTreeRT::SetDropToBillboard
EXTRN	?GetNumBranchLodLevels@CSpeedTreeRT@@QBEGXZ:PROC ; CSpeedTreeRT::GetNumBranchLodLevels
EXTRN	?GetNumLeafLodLevels@CSpeedTreeRT@@QBEGXZ:PROC	; CSpeedTreeRT::GetNumLeafLodLevels
EXTRN	?GetNumFrondLodLevels@CSpeedTreeRT@@QBEGXZ:PROC	; CSpeedTreeRT::GetNumFrondLodLevels
EXTRN	?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z:PROC ; CSpeedTreeRT::GetGeometry
EXTRN	?GetTextures@CSpeedTreeRT@@QBEXAAUSTextures@1@@Z:PROC ; CSpeedTreeRT::GetTextures
EXTRN	?SetTextureFlip@CSpeedTreeRT@@SAX_N@Z:PROC	; CSpeedTreeRT::SetTextureFlip
EXTRN	?GetCurrentError@CSpeedTreeRT@@SAPBDXZ:PROC	; CSpeedTreeRT::GetCurrentError
EXTRN	?GetBoundingBox@CSpeedTreeRT@@QBEXPAM@Z:PROC	; CSpeedTreeRT::GetBoundingBox
EXTRN	?GetCollisionObjectCount@CSpeedTreeRT@@QAEIXZ:PROC ; CSpeedTreeRT::GetCollisionObjectCount
EXTRN	?GetCollisionObject@CSpeedTreeRT@@QAEXIAAW4ECollisionObjectType@1@PAM1@Z:PROC ; CSpeedTreeRT::GetCollisionObject
EXTRN	_D3DXVec4Transform@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z:PROC ; CStateManager::SetSamplerState
EXTRN	?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z:PROC ; CStateManager::SetVertexShader
EXTRN	?SetFVF@CStateManager@@QAEXK@Z:PROC		; CStateManager::SetFVF
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z:PROC ; CStateManager::SetVertexShaderConstant
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::GetRenderState
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	??0CGraphicObjectInstance@@QAE@XZ:PROC		; CGraphicObjectInstance::CGraphicObjectInstance
EXTRN	??1CGraphicObjectInstance@@UAE@XZ:PROC		; CGraphicObjectInstance::~CGraphicObjectInstance
EXTRN	?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z:PROC ; CGraphicObjectInstance::SetPosition
EXTRN	?Clear@CGraphicObjectInstance@@QAEXXZ:PROC	; CGraphicObjectInstance::Clear
EXTRN	?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ:PROC ; CGraphicObjectInstance::GetTransform
EXTRN	?OnInitialize@CGraphicObjectInstance@@UAEXXZ:PROC ; CGraphicObjectInstance::OnInitialize
EXTRN	?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z:PROC ; CGraphicObjectInstance::AddCollision
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTextureReference
EXTRN	?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ:PROC ; CGraphicImageInstance::GetGraphicImagePointer
EXTRN	??_ECSpeedTreeWrapper@@UAEPAXI@Z:PROC		; CSpeedTreeWrapper::`vector deleting destructor'
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_faceCount@CGraphicBase@@1KA:DWORD		; CGraphicBase::ms_faceCount
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R2CGraphicObjectInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8 ; CGraphicObjectInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R3CGraphicObjectInstance@@8 DD 00H			; CGraphicObjectInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicObjectInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicObjectInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicObjectInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicObjectInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicObjectInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicObjectInstance@@8 DD FLAT:??_R0?AVCGraphicObjectInstance@@@8 ; CGraphicObjectInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicObjectInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSpeedTreeWrapper@@8 DD FLAT:??_R0?AVCSpeedTreeWrapper@@@8 ; CSpeedTreeWrapper::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R2CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R2CSpeedTreeWrapper@@8 DD FLAT:??_R1A@?0A@EA@CSpeedTreeWrapper@@8 ; CSpeedTreeWrapper::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicObjectInstance@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSpeedTreeWrapper@@8
rdata$r	SEGMENT
??_R3CSpeedTreeWrapper@@8 DD 00H			; CSpeedTreeWrapper::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSpeedTreeWrapper@@@8
data$rs	SEGMENT
??_R0?AVCSpeedTreeWrapper@@@8 DD FLAT:??_7type_info@@6B@ ; CSpeedTreeWrapper `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSpeedTreeWrapper@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSpeedTreeWrapper@@6B@
rdata$r	SEGMENT
??_R4CSpeedTreeWrapper@@6B@ DD 00H			; CSpeedTreeWrapper::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSpeedTreeWrapper@@@8
	DD	FLAT:??_R3CSpeedTreeWrapper@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@ DB 'SpeedTreeRT Error: '
	DB	'%s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@
CONST	SEGMENT
??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@ DB 0aH, 'Fatal '
	DB	'Error, cannot compute tree [%s]', 0aH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LIKELABK@?4dds@
CONST	SEGMENT
??_C@_04LIKELABK@?4dds@ DB '.dds', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@
CONST	SEGMENT
??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@ DB 'SpeedTreeRT Error: %s'
	DB	00H						; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+3
?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA DD 0242H		; D3DFVF_SPEEDTREE_BRANCH_VERTEX
?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA DD 0142H		; D3DFVF_SPEEDTREE_LEAF_VERTEX
?D3DFVF_SPEEDTREE_BILLBOARD_VERTEX@@3KA DD 0142H	; D3DFVF_SPEEDTREE_BILLBOARD_VERTEX
_DATA	ENDS
;	COMDAT ??_7CSpeedTreeWrapper@@6B@
CONST	SEGMENT
??_7CSpeedTreeWrapper@@6B@ DD FLAT:??_R4CSpeedTreeWrapper@@6B@ ; CSpeedTreeWrapper::`vftable'
	DD	FLAT:??_ECSpeedTreeWrapper@@UAEPAXI@Z
	DD	FLAT:?GetType@CSpeedTreeWrapper@@UBEHXZ
	DD	FLAT:?OnInitialize@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z
	DD	FLAT:?OnRender@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ
	DD	FLAT:?OnClear@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdate@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnDeform@CGraphicObjectInstance@@UAEXXZ
	DD	FLAT:?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
	DD	FLAT:?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z
	DD	FLAT:?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z
	DD	FLAT:?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z
	DD	FLAT:?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ$0
__ehfuncinfo$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ$0
__ehfuncinfo$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z DD 019930522H
	DD	013H
	DD	FLAT:__unwindtable$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$9
	DD	09H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$12
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$13
	DD	0dH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$15
	DD	0fH
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$16
	DD	010H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$17
	DD	011H
	DD	FLAT:__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$18
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSpeedTreeWrapper@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CSpeedTreeWrapper@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CSpeedTreeWrapper@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CSpeedTreeWrapper@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2730 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2731 :         auto& _My_data = _Mypair._Myval2;
; 2732 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2733 : 
; 2734 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2735 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2736 :         } else {
; 2737 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2738 :         }
; 2739 : 
; 2740 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN29@Construct

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2749 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2751 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2752 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2753 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2754 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2755 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4885 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN27@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN27@Construct
$LN18@Construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 77   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN27@Construct
$LN19@Construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN27@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2782 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN29@Construct:

; 2741 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN26@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 4
_str$ = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4646 :         return static_cast<size_type>(

  00006	8b 75 0c	 mov	 esi, DWORD PTR _str$[ebp]

; 2292 :         const value_type* _Result = _Bx._Buf;

  00009	8b d6		 mov	 edx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 218  : {

  0000b	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0000c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 4646 :         return static_cast<size_type>(

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2293 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN98@NoExtensio

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 16		 mov	 edx, DWORD PTR [esi]
$LN98@NoExtensio:

; 695  :     if (_Hay_size != 0) { // room for match, look for it

  00017	85 c0		 test	 eax, eax
  00019	74 5e		 je	 SHORT $LN97@NoExtensio
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0001b	83 c9 ff	 or	 ecx, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001e	48		 dec	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0001f	3b c1		 cmp	 eax, ecx
  00021	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00024	03 ca		 add	 ecx, edx

; 465  :         return _Left == _Right;

  00026	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 697  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00029	74 0f		 je	 SHORT $LN90@NoExtensio
  0002b	0f 1f 44 00 00	 npad	 5
$LL16@NoExtensio:

; 699  :             }
; 700  : 
; 701  :             if (_Match_try == _Haystack) {

  00030	3b ca		 cmp	 ecx, edx
  00032	74 45		 je	 SHORT $LN97@NoExtensio

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00034	49		 dec	 ecx

; 465  :         return _Left == _Right;

  00035	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 697  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00038	75 f6		 jne	 SHORT $LL16@NoExtensio
$LN90@NoExtensio:

; 698  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0003a	2b ca		 sub	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 221  : 	if (std::string::npos != npos) {

  0003c	83 f9 ff	 cmp	 ecx, -1
  0003f	74 38		 je	 SHORT $LN97@NoExtensio
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00041	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0004a	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00051	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00058	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
  0005b	0f 42 4e 10	 cmovb	 ecx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00063	72 02		 jb	 SHORT $LN44@NoExtensio

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00065	8b 36		 mov	 esi, DWORD PTR [esi]
$LN44@NoExtensio:

; 2646 :         _Construct<_Construct_strategy::_From_ptr>(

  00067	51		 push	 ecx
  00068	56		 push	 esi
  00069	8b cb		 mov	 ecx, ebx
  0006b	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  00070	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 226  : }

  00071	5e		 pop	 esi
  00072	8b c3		 mov	 eax, ebx
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN97@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00079	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00082	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00089	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00090	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00094	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00097	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 2293 :         if (_Large_string_engaged()) {

  0009a	72 02		 jb	 SHORT $LN60@NoExtensio

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0009c	8b 36		 mov	 esi, DWORD PTR [esi]
$LN60@NoExtensio:

; 2740 :         if (_Count > max_size()) {

  0009e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000a3	0f 87 a5 00 00
	00		 ja	 $LN103@NoExtensio

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  000a9	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  000b0	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b3	73 18		 jae	 SHORT $LN66@NoExtensio

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000b5	6a 10		 push	 16			; 00000010H
  000b7	56		 push	 esi
  000b8	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  000b9	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000bc	e8 00 00 00 00	 call	 _memmove
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 226  : }

  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	8b c3		 mov	 eax, ebx
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
$LN66@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000cd	8b f8		 mov	 edi, eax
  000cf	83 cf 0f	 or	 edi, 15			; 0000000fH
  000d2	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000d8	76 1a		 jbe	 SHORT $LN74@NoExtensio

; 4885 :             return _Max;

  000da	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000df	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ea	8b d0		 mov	 edx, eax
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  000f2	eb 3b		 jmp	 SHORT $LN80@NoExtensio
$LN74@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000f4	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000f9	3b f9		 cmp	 edi, ecx
  000fb	0f 42 f9	 cmovb	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000fe	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00101	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00107	72 10		 jb	 SHORT $LN81@NoExtensio

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0010f	8b d0		 mov	 edx, eax
  00111	83 c4 04	 add	 esp, 4
  00114	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00117	eb 16		 jmp	 SHORT $LN80@NoExtensio
$LN81@NoExtensio:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00119	85 c9		 test	 ecx, ecx
  0011b	74 10		 je	 SHORT $LN82@NoExtensio

; 77   :         return ::operator new(_Bytes);

  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00123	8b d0		 mov	 edx, eax

; 77   :         return ::operator new(_Bytes);

  00125	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00128	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  0012b	eb 02		 jmp	 SHORT $LN80@NoExtensio
$LN82@NoExtensio:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0012d	33 d2		 xor	 edx, edx
$LN80@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  0012f	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00132	89 13		 mov	 DWORD PTR [ebx], edx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00134	51		 push	 ecx
  00135	56		 push	 esi
  00136	52		 push	 edx

; 2781 :         _My_data._Mysize = _Count;

  00137	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 2782 :         _My_data._Myres  = _New_capacity;

  0013a	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013d	e8 00 00 00 00	 call	 _memcpy
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 226  : }

  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
  00145	8b c3		 mov	 eax, ebx
  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
$LN103@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2741 :             _Xlen_string(); // result too long

  0014e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN100@NoExtensio:
  00153	cc		 int	 3
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h
;	COMDAT ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -1032				; size = 4
_szPath$ = -1028					; size = 1024
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_str$ = 12						; size = 4
?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::GetPath, COMDAT

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	89 9d f8 fb ff
	ff		 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], ebx

; 187  : 	char szPath[1024];
; 188  : 	szPath[0] = '\0';
; 189  : 
; 190  : 	size_t nLength = str.length();

  00020	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00023	c6 85 fc fb ff
	ff 00		 mov	 BYTE PTR _szPath$[ebp], 0

; 191  : 
; 192  : 	if (nLength > 0)

  0002a	85 c0		 test	 eax, eax
  0002c	74 28		 je	 SHORT $LN3@GetPath

; 193  : 	{
; 194  : 		for (size_t i = nLength - 1; i >= 0; i--)

  0002e	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0002f	8b 72 14	 mov	 esi, DWORD PTR [edx+20]
$LN75@GetPath:

; 2283 :         value_type* _Result = _Bx._Buf;

  00032	48		 dec	 eax
  00033	8b ca		 mov	 ecx, edx

; 2301 :         return _BUF_SIZE <= _Myres;

  00035	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00038	72 02		 jb	 SHORT $LN71@GetPath

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN71@GetPath:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 196  : 			if (str[i] == '/' || str[i] == '\\')

  0003c	80 3c 01 2f	 cmp	 BYTE PTR [ecx+eax], 47	; 0000002fH
  00040	74 5a		 je	 SHORT $LN10@GetPath
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2283 :         value_type* _Result = _Bx._Buf;

  00042	8b ca		 mov	 ecx, edx

; 2301 :         return _BUF_SIZE <= _Myres;

  00044	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00047	72 02		 jb	 SHORT $LN70@GetPath

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00049	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN70@GetPath:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 196  : 			if (str[i] == '/' || str[i] == '\\')

  0004b	80 3c 01 5c	 cmp	 BYTE PTR [ecx+eax], 92	; 0000005cH
  0004f	74 4b		 je	 SHORT $LN10@GetPath

; 203  : 			}
; 204  : 
; 205  : 			if (0 == i) {

  00051	85 c0		 test	 eax, eax
  00053	75 dd		 jne	 SHORT $LN75@GetPath
$LN73@GetPath:
  00055	5e		 pop	 esi
$LN3@GetPath:
  00056	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00059	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00062	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 415  :             return __builtin_strlen(_First);

  00069	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0006c	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
$LL72@GetPath:

; 415  :             return __builtin_strlen(_First);

  00073	8a 01		 mov	 al, BYTE PTR [ecx]
  00075	41		 inc	 ecx
  00076	84 c0		 test	 al, al
  00078	75 f9		 jne	 SHORT $LL72@GetPath
  0007a	2b ca		 sub	 ecx, edx

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007c	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]
  00082	51		 push	 ecx
  00083	50		 push	 eax
  00084	8b cb		 mov	 ecx, ebx
  00086	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 211  : }

  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	8b c3		 mov	 eax, ebx
  00090	33 cd		 xor	 ecx, ebp
  00092	5b		 pop	 ebx
  00093	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN10@GetPath:
  0009c	57		 push	 edi

; 198  : 				for (size_t j = 0; j < i + 1; j++) {

  0009d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  000a0	85 ff		 test	 edi, edi
  000a2	74 2f		 je	 SHORT $LN61@GetPath
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2284 :         if (_Large_string_engaged()) {

  000a4	8d 85 fc fb ff
	ff		 lea	 eax, DWORD PTR _szPath$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  000aa	83 fe 10	 cmp	 esi, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  000ad	72 0e		 jb	 SHORT $LN58@GetPath
  000af	57		 push	 edi
  000b0	ff 32		 push	 DWORD PTR [edx]
  000b2	50		 push	 eax
  000b3	e8 00 00 00 00	 call	 _memcpy
  000b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  000bb	eb 16		 jmp	 SHORT $LN61@GetPath
$LN58@GetPath:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Filename.h

; 198  : 				for (size_t j = 0; j < i + 1; j++) {

  000bd	33 f6		 xor	 esi, esi
  000bf	2b d0		 sub	 edx, eax
$LL59@GetPath:

; 199  : 					szPath[j] = str[j];

  000c1	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR _szPath$[ebp]
  000c7	03 ce		 add	 ecx, esi
  000c9	46		 inc	 esi
  000ca	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  000cd	88 01		 mov	 BYTE PTR [ecx], al
  000cf	3b f7		 cmp	 esi, edi
  000d1	72 ee		 jb	 SHORT $LL59@GetPath
$LN61@GetPath:

; 200  : }
; 201  : 				szPath[i+1] = '\0';

  000d3	81 ff 00 04 00
	00		 cmp	 edi, 1024		; 00000400H
  000d9	73 0e		 jae	 SHORT $LN15@GetPath
  000db	c6 84 3d fc fb
	ff ff 00	 mov	 BYTE PTR _szPath$[ebp+edi], 0
  000e3	5f		 pop	 edi

; 202  : 				break;

  000e4	e9 6c ff ff ff	 jmp	 $LN73@GetPath
$LN15@GetPath:

; 200  : }
; 201  : 				szPath[i+1] = '\0';

  000e9	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN74@GetPath:
  000ee	cc		 int	 3
?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::GetPath
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSpeedTreeWrapper@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSpeedTreeWrapper@@UAEPAXI@Z PROC			; CSpeedTreeWrapper::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSpeedTreeWrapper@@UAE@XZ ; CSpeedTreeWrapper::~CSpeedTreeWrapper
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 44 04 00 00	 push	 1092			; 00000444H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSpeedTreeWrapper@@UAEPAXI@Z ENDP			; CSpeedTreeWrapper::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@CAXXZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ PROC ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 835  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z
_TEXT	SEGMENT
_afMaterial$ = -52					; size = 32
_afUsefulConstants$ = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
_pMaterial$ = 8						; size = 4
?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z PROC	; CSpeedTreeWrapper::SetShaderConstants, COMDAT
; _this$ = ecx

; 802  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 803  :     const float afUsefulConstants[] =
; 804  :     {
; 805  :         m_pSpeedTree->GetLeafLightingAdjustment(), 0.0f, 0.0f, 0.0f

  00010	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  00016	56		 push	 esi
  00017	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  0001a	e8 00 00 00 00	 call	 ?GetLeafLightingAdjustment@CSpeedTreeRT@@QBEMXZ ; CSpeedTreeRT::GetLeafLightingAdjustment

; 806  :     };
; 807  :     STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_LeafLightingAdjustment, afUsefulConstants, 1);

  0001f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00025	8d 45 ec	 lea	 eax, DWORD PTR _afUsefulConstants$[ebp]
  00028	6a 01		 push	 1
  0002a	50		 push	 eax
  0002b	6a 46		 push	 70			; 00000046H
  0002d	d9 5d ec	 fstp	 DWORD PTR _afUsefulConstants$[ebp]
  00030	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+4], 0
  00037	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+8], 0
  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _afUsefulConstants$[ebp+12], 0
  00045	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 808  : 
; 809  :     const float afMaterial[] =
; 810  :     {
; 811  :         pMaterial[0], pMaterial[1], pMaterial[2], 1.0f,

  0004a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 812  :         pMaterial[3], pMaterial[4], pMaterial[5], 1.0f
; 813  :     };
; 814  :     STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_Material, afMaterial, 2);

  0004e	8d 45 cc	 lea	 eax, DWORD PTR _afMaterial$[ebp]
  00051	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00057	f3 0f 11 45 cc	 movss	 DWORD PTR _afMaterial$[ebp], xmm0
  0005c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00061	f3 0f 11 45 d0	 movss	 DWORD PTR _afMaterial$[ebp+4], xmm0
  00066	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0006b	f3 0f 11 45 d4	 movss	 DWORD PTR _afMaterial$[ebp+8], xmm0
  00070	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  00075	f3 0f 11 45 dc	 movss	 DWORD PTR _afMaterial$[ebp+16], xmm0
  0007a	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0007f	6a 02		 push	 2
  00081	f3 0f 11 45 e0	 movss	 DWORD PTR _afMaterial$[ebp+20], xmm0
  00086	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  0008b	50		 push	 eax
  0008c	6a 4a		 push	 74			; 0000004aH
  0008e	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR _afMaterial$[ebp+12], 1065353216 ; 3f800000H
  00095	f3 0f 11 45 e4	 movss	 DWORD PTR _afMaterial$[ebp+24], xmm0
  0009a	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR _afMaterial$[ebp+28], 1065353216 ; 3f800000H
  000a1	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 815  : }

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a9	33 cd		 xor	 ecx, ebp
  000ab	5e		 pop	 esi
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 04 00	 ret	 4
?SetShaderConstants@CSpeedTreeWrapper@@ABEXPBM@Z ENDP	; CSpeedTreeWrapper::SetShaderConstants
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
_pFilename$ = 8						; size = 4
_rImage$ = 12						; size = 4
?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z PROC ; CSpeedTreeWrapper::LoadTexture, COMDAT

; 791  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 792  :     CResource* pResource = CResourceManager::Instance().GetResourcePointer(pFilename);

  00003	ff 75 08	 push	 DWORD PTR _pFilename$[ebp]
  00006	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0000c	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 793  :     rImage.SetImagePointer(static_cast<CGraphicImage*>(pResource));

  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _rImage$[ebp]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 794  : 
; 795  :     if (rImage.IsEmpty())

  0001a	8b 4d 0c	 mov	 ecx, DWORD PTR _rImage$[ebp]
  0001d	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  00022	84 c0		 test	 al, al
  00024	0f 94 c0	 sete	 al

; 796  :         return false;
; 797  : 
; 798  :     return true;
; 799  : }

  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ENDP ; CSpeedTreeWrapper::LoadTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?PositionTree@CSpeedTreeWrapper@@ABEXXZ
_TEXT	SEGMENT
_vecConstant$ = -96					; size = 16
_vecPosition$$sroa$142$1$ = -80				; size = 4
_vecPosition$$sroa$314$1$ = -76				; size = 4
_vecPosition$$sroa$323$1$ = -72				; size = 4
_matTranslation$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?PositionTree@CSpeedTreeWrapper@@ABEXXZ PROC		; CSpeedTreeWrapper::PositionTree, COMDAT
; _this$ = ecx

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 781  :     D3DXVECTOR3 vecPosition = m_pSpeedTree->GetTreePosition();

  00010	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  00016	e8 00 00 00 00	 call	 ?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetTreePosition

; 784  :     D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  0001b	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 279  :     z = pf[2];

  0001e	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00023	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00028	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 784  :     D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  0002c	8d 45 bc	 lea	 eax, DWORD PTR _matTranslation$[ebp]
  0002f	f3 0f 11 5c 24
	08		 movss	 DWORD PTR [esp+8], xmm3
  00035	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  0003b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00040	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 277  :     x = pf[0];

  00041	f3 0f 11 4d b8	 movss	 DWORD PTR _vecPosition$$sroa$323$1$[ebp], xmm1

; 278  :     y = pf[1];

  00046	f3 0f 11 55 b4	 movss	 DWORD PTR _vecPosition$$sroa$314$1$[ebp], xmm2

; 279  :     z = pf[2];

  0004b	f3 0f 11 5d b0	 movss	 DWORD PTR _vecPosition$$sroa$142$1$[ebp], xmm3

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00050	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+56], 0
  00057	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+52], 0
  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+48], 0
  00065	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+44], 0
  0006c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+36], 0
  00073	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+32], 0
  0007a	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+28], 0
  00081	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+24], 0
  00088	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+16], 0
  0008f	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+12], 0
  00096	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+8], 0
  0009d	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _matTranslation$[ebp+4], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000a4	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+60], 1065353216 ; 3f800000H
  000ab	c7 45 e4 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+40], 1065353216 ; 3f800000H
  000b2	c7 45 d0 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp+20], 1065353216 ; 3f800000H
  000b9	c7 45 bc 00 00
	80 3f		 mov	 DWORD PTR _matTranslation$[ebp], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 784  :     D3DXMatrixTranslation(&matTranslation, vecPosition.x, vecPosition.y, vecPosition.z);

  000c0	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 785  :     STATEMANAGER.SetTransform(D3DTS_WORLD, &matTranslation);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	8d 45 bc	 lea	 eax, DWORD PTR _matTranslation$[ebp]
  000ce	50		 push	 eax
  000cf	68 00 01 00 00	 push	 256			; 00000100H
  000d4	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 539  :     x = fx;

  000d9	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$323$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 787  :     STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000de	8d 45 a0	 lea	 eax, DWORD PTR _vecConstant$[ebp]
  000e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 539  :     x = fx;

  000e7	f3 0f 11 45 a0	 movss	 DWORD PTR _vecConstant$[ebp], xmm0

; 540  :     y = fy;

  000ec	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$314$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 787  :     STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000f1	6a 01		 push	 1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 540  :     y = fy;

  000f3	f3 0f 11 45 a4	 movss	 DWORD PTR _vecConstant$[ebp+4], xmm0

; 541  :     z = fz;

  000f8	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR _vecPosition$$sroa$142$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 787  :     STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  000fd	50		 push	 eax
  000fe	6a 34		 push	 52			; 00000034H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 541  :     z = fz;

  00100	f3 0f 11 45 a8	 movss	 DWORD PTR _vecConstant$[ebp+8], xmm0

; 542  :     w = fw;

  00105	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vecConstant$[ebp+12], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 787  :     STATEMANAGER.SetVertexShaderConstant(c_nVertexShader_TreePos, (float*)&vecConstant, 1);

  0010c	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 788  : }

  00111	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00114	33 cd		 xor	 ecx, ebp
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?PositionTree@CSpeedTreeWrapper@@ABEXXZ ENDP		; CSpeedTreeWrapper::PositionTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_usLeafCount$1$ = -20					; size = 4
_unLod$1$ = -16						; size = 4
_pVertexBuffer$1 = -12					; size = 4
_unLeaf$1$ = -8						; size = 4
tv1769 = -4						; size = 4
tv1744 = -4						; size = 4
?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupLeafBuffers, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 491  :     const short anVertexIndices[6] = { 0, 1, 2, 0, 2, 3 };
; 492  :     m_usNumLeafLods = m_pSpeedTree->GetNumLeafLodLevels();

  0000a	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  00010	e8 00 00 00 00	 call	 ?GetNumLeafLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumLeafLodLevels
  00015	66 89 86 d0 02
	00 00		 mov	 WORD PTR [esi+720], ax

; 493  :     m_pLeafVertexBuffer = new LPDIRECT3DVERTEXBUFFER9[m_usNumLeafLods];

  0001c	33 c9		 xor	 ecx, ecx
  0001e	0f b7 c0	 movzx	 eax, ax
  00021	ba 04 00 00 00	 mov	 edx, 4
  00026	f7 e2		 mul	 edx
  00028	0f 90 c1	 seto	 cl
  0002b	f7 d9		 neg	 ecx
  0002d	0b c8		 or	 ecx, eax
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00035	89 86 d4 02 00
	00		 mov	 DWORD PTR [esi+724], eax

; 494  :     m_pLeavesUpdatedByCpu = new bool[m_usNumLeafLods];

  0003b	0f b7 86 d0 02
	00 00		 movzx	 eax, WORD PTR [esi+720]
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00048	89 86 d8 02 00
	00		 mov	 DWORD PTR [esi+728], eax

; 495  : 
; 496  :     for (unsigned int unLod = 0; unLod < m_usNumLeafLods; ++unLod)

  0004e	33 db		 xor	 ebx, ebx
  00050	33 c0		 xor	 eax, eax
  00052	89 5d f0	 mov	 DWORD PTR _unLod$1$[ebp], ebx
  00055	83 c4 08	 add	 esp, 8
  00058	66 3b 86 d0 02
	00 00		 cmp	 ax, WORD PTR [esi+720]
  0005f	0f 83 05 03 00
	00		 jae	 $LN3@SetupLeafB
  00065	57		 push	 edi
$LL4@SetupLeafB:

; 497  :     {
; 498  :         m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry, -1, -1, unLod);

  00066	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  0006c	53		 push	 ebx
  0006d	6a ff		 push	 -1
  0006f	6a ff		 push	 -1
  00071	6a 04		 push	 4
  00073	ff b6 a8 02 00
	00		 push	 DWORD PTR [esi+680]
  00079	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 499  :         m_pLeavesUpdatedByCpu[unLod] = false;

  0007e	8b 86 d8 02 00
	00		 mov	 eax, DWORD PTR [esi+728]
  00084	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 500  :         unsigned short usLeafCount = m_pGeometryCache->m_sLeaves0.m_usLeafCount;

  00088	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  0008e	0f b7 88 84 00
	00 00		 movzx	 ecx, WORD PTR [eax+132]
  00095	89 4d ec	 mov	 DWORD PTR _usLeafCount$1$[ebp], ecx

; 501  :         if (usLeafCount < 1)

  00098	83 f9 01	 cmp	 ecx, 1
  0009b	0f 82 b5 02 00
	00		 jb	 $LN2@SetupLeafB

; 502  :             continue;
; 503  : 
; 504  :         SFVFLeafVertex* pVertexBuffer = NULL;
; 505  :         ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_SYSTEMMEM, &m_pLeafVertexBuffer[unLod], NULL);

  000a1	8d 04 9d 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*4]
  000a8	0f b7 f9	 movzx	 edi, cx
  000ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000b1	89 45 fc	 mov	 DWORD PTR tv1744[ebp], eax
  000b4	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  000ba	03 45 fc	 add	 eax, DWORD PTR tv1744[ebp]
  000bd	6a 00		 push	 0
  000bf	50		 push	 eax
  000c0	6a 02		 push	 2
  000c2	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA
  000c8	8d 04 ff	 lea	 eax, DWORD PTR [edi+edi*8]
  000cb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$1[ebp], 0
  000d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d4	68 00 02 00 00	 push	 512			; 00000200H
  000d9	c1 e0 04	 shl	 eax, 4
  000dc	50		 push	 eax
  000dd	51		 push	 ecx
  000de	ff 52 68	 call	 DWORD PTR [edx+104]

; 506  :         m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<void**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);

  000e1	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  000e7	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  000ee	68 00 28 00 00	 push	 10240			; 00002800H
  000f3	8d 55 f4	 lea	 edx, DWORD PTR _pVertexBuffer$1[ebp]
  000f6	52		 push	 edx
  000f7	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  000fa	6a 00		 push	 0
  000fc	6a 00		 push	 0
  000fe	50		 push	 eax
  000ff	8b 08		 mov	 ecx, DWORD PTR [eax]
  00101	ff 51 2c	 call	 DWORD PTR [ecx+44]
  00104	33 c9		 xor	 ecx, ecx
  00106	89 4d f8	 mov	 DWORD PTR _unLeaf$1$[ebp], ecx

; 507  :         SFVFLeafVertex* pVertex = pVertexBuffer;
; 508  :         for (unsigned int unLeaf = 0; unLeaf < usLeafCount; ++unLeaf)

  00109	85 ff		 test	 edi, edi
  0010b	0f 84 2f 02 00
	00		 je	 $LN29@SetupLeafB

; 502  :             continue;
; 503  : 
; 504  :         SFVFLeafVertex* pVertexBuffer = NULL;
; 505  :         ms_lpd3dDevice->CreateVertexBuffer(usLeafCount * 6 * sizeof(SFVFLeafVertex), D3DUSAGE_DYNAMIC, D3DFVF_SPEEDTREE_LEAF_VERTEX, D3DPOOL_SYSTEMMEM, &m_pLeafVertexBuffer[unLod], NULL);

  00111	8b 5d f4	 mov	 ebx, DWORD PTR _pVertexBuffer$1[ebp]
  00114	33 d2		 xor	 edx, edx
  00116	89 55 fc	 mov	 DWORD PTR tv1769[ebp], edx
  00119	83 c3 10	 add	 ebx, 16			; 00000010H
  0011c	0f 1f 40 00	 npad	 4
$LL7@SetupLeafB:

; 509  :         {
; 510  :             const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = &(m_pGeometryCache->m_sLeaves0);

  00120	8b be a8 02 00
	00		 mov	 edi, DWORD PTR [esi+680]

; 511  :             for (unsigned int unVert = 0; unVert < 6; ++unVert)
; 512  :             {
; 513  :                 memcpy(pVertex->m_vPosition, &(pLeaf->m_pCenterCoords[unLeaf * 3]), 3 * sizeof(float));

  00126	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0012c	f3 0f 7e 04 10	 movq	 xmm0, QWORD PTR [eax+edx]
  00131	66 0f d6 43 f0	 movq	 QWORD PTR [ebx-16], xmm0
  00136	8b 44 10 08	 mov	 eax, DWORD PTR [eax+edx+8]
  0013a	89 43 f8	 mov	 DWORD PTR [ebx-8], eax

; 514  :                 pVertex->m_dwDiffuseColor = AGBR2ARGB(pLeaf->m_pColors[unLeaf]);

  0013d	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  00143	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00146	8b c2		 mov	 eax, edx
  00148	c1 e8 10	 shr	 eax, 16			; 00000010H
  0014b	0f b6 c8	 movzx	 ecx, al
  0014e	0f b6 c2	 movzx	 eax, dl
  00151	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  00157	c1 e0 10	 shl	 eax, 16			; 00000010H
  0015a	03 c8		 add	 ecx, eax
  0015c	03 ca		 add	 ecx, edx

; 515  :                 memcpy(pVertex->m_fTexCoords, &(pLeaf->m_pLeafMapTexCoords[unLeaf][anVertexIndices[unVert] * 2]), 2 * sizeof(float));

  0015e	8b 55 f8	 mov	 edx, DWORD PTR _unLeaf$1$[ebp]
  00161	89 4b fc	 mov	 DWORD PTR [ebx-4], ecx
  00164	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0016a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0016d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00172	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00175	89 0b		 mov	 DWORD PTR [ebx], ecx
  00177	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0017d	03 45 fc	 add	 eax, DWORD PTR tv1769[ebp]
  00180	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00184	66 0f d6 43 08	 movq	 QWORD PTR [ebx+8], xmm0
  00189	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0018c	89 43 10	 mov	 DWORD PTR [ebx+16], eax
  0018f	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  00195	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00198	8b c2		 mov	 eax, edx
  0019a	c1 e8 10	 shr	 eax, 16			; 00000010H
  0019d	0f b6 c8	 movzx	 ecx, al
  001a0	0f b6 c2	 movzx	 eax, dl
  001a3	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  001a9	c1 e0 10	 shl	 eax, 16			; 00000010H
  001ac	03 c8		 add	 ecx, eax
  001ae	03 ca		 add	 ecx, edx
  001b0	8b 55 f8	 mov	 edx, DWORD PTR _unLeaf$1$[ebp]
  001b3	89 4b 14	 mov	 DWORD PTR [ebx+20], ecx
  001b6	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  001bc	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  001bf	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001c2	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001c5	89 43 1c	 mov	 DWORD PTR [ebx+28], eax
  001c8	89 4b 18	 mov	 DWORD PTR [ebx+24], ecx
  001cb	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  001d1	03 45 fc	 add	 eax, DWORD PTR tv1769[ebp]
  001d4	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001d8	66 0f d6 43 20	 movq	 QWORD PTR [ebx+32], xmm0
  001dd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  001e0	89 43 28	 mov	 DWORD PTR [ebx+40], eax
  001e3	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  001e9	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  001ec	8b c2		 mov	 eax, edx
  001ee	c1 e8 10	 shr	 eax, 16			; 00000010H
  001f1	0f b6 c8	 movzx	 ecx, al
  001f4	0f b6 c2	 movzx	 eax, dl
  001f7	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  001fd	c1 e0 10	 shl	 eax, 16			; 00000010H
  00200	03 c8		 add	 ecx, eax
  00202	03 ca		 add	 ecx, edx
  00204	8b 55 f8	 mov	 edx, DWORD PTR _unLeaf$1$[ebp]
  00207	89 4b 2c	 mov	 DWORD PTR [ebx+44], ecx
  0020a	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00210	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00213	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00216	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00219	89 43 34	 mov	 DWORD PTR [ebx+52], eax
  0021c	89 4b 30	 mov	 DWORD PTR [ebx+48], ecx
  0021f	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  00225	03 45 fc	 add	 eax, DWORD PTR tv1769[ebp]
  00228	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0022c	66 0f d6 43 38	 movq	 QWORD PTR [ebx+56], xmm0
  00231	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00234	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  00237	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  0023d	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00240	8b c2		 mov	 eax, edx
  00242	c1 e8 10	 shr	 eax, 16			; 00000010H
  00245	8d 9b 90 00 00
	00		 lea	 ebx, DWORD PTR [ebx+144]
  0024b	0f b6 c8	 movzx	 ecx, al
  0024e	0f b6 c2	 movzx	 eax, dl
  00251	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  00257	c1 e0 10	 shl	 eax, 16			; 00000010H
  0025a	03 c8		 add	 ecx, eax
  0025c	03 ca		 add	 ecx, edx
  0025e	8b 55 f8	 mov	 edx, DWORD PTR _unLeaf$1$[ebp]
  00261	89 4b b4	 mov	 DWORD PTR [ebx-76], ecx
  00264	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  0026a	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0026d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00272	89 43 bc	 mov	 DWORD PTR [ebx-68], eax
  00275	89 4b b8	 mov	 DWORD PTR [ebx-72], ecx
  00278	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0027e	03 45 fc	 add	 eax, DWORD PTR tv1769[ebp]
  00281	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00285	66 0f d6 43 c0	 movq	 QWORD PTR [ebx-64], xmm0
  0028a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0028d	89 43 c8	 mov	 DWORD PTR [ebx-56], eax
  00290	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  00296	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00299	8b c2		 mov	 eax, edx
  0029b	c1 e8 10	 shr	 eax, 16			; 00000010H
  0029e	0f b6 c8	 movzx	 ecx, al
  002a1	0f b6 c2	 movzx	 eax, dl
  002a4	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  002aa	c1 e0 10	 shl	 eax, 16			; 00000010H
  002ad	03 c8		 add	 ecx, eax
  002af	03 ca		 add	 ecx, edx
  002b1	8b 55 f8	 mov	 edx, DWORD PTR _unLeaf$1$[ebp]
  002b4	89 4b cc	 mov	 DWORD PTR [ebx-52], ecx
  002b7	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  002bd	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  002c0	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  002c3	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  002c6	89 43 d4	 mov	 DWORD PTR [ebx-44], eax
  002c9	89 4b d0	 mov	 DWORD PTR [ebx-48], ecx
  002cc	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  002d2	03 45 fc	 add	 eax, DWORD PTR tv1769[ebp]
  002d5	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  002d9	66 0f d6 43 d8	 movq	 QWORD PTR [ebx-40], xmm0
  002de	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  002e1	89 43 e0	 mov	 DWORD PTR [ebx-32], eax
  002e4	8b 87 9c 00 00
	00		 mov	 eax, DWORD PTR [edi+156]
  002ea	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  002ed	8b c2		 mov	 eax, edx
  002ef	c1 e8 10	 shr	 eax, 16			; 00000010H
  002f2	0f b6 c8	 movzx	 ecx, al
  002f5	0f b6 c2	 movzx	 eax, dl
  002f8	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  002fe	c1 e0 10	 shl	 eax, 16			; 00000010H
  00301	03 c8		 add	 ecx, eax
  00303	03 ca		 add	 ecx, edx
  00305	8b 55 fc	 mov	 edx, DWORD PTR tv1769[ebp]
  00308	89 4b e4	 mov	 DWORD PTR [ebx-28], ecx
  0030b	83 c2 0c	 add	 edx, 12			; 0000000cH
  0030e	8b 87 94 00 00
	00		 mov	 eax, DWORD PTR [edi+148]
  00314	8b 7d f8	 mov	 edi, DWORD PTR _unLeaf$1$[ebp]
  00317	89 55 fc	 mov	 DWORD PTR tv1769[ebp], edx
  0031a	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0031d	47		 inc	 edi
  0031e	89 7d f8	 mov	 DWORD PTR _unLeaf$1$[ebp], edi
  00321	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  00324	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00327	89 4b e8	 mov	 DWORD PTR [ebx-24], ecx
  0032a	8b 4d ec	 mov	 ecx, DWORD PTR _usLeafCount$1$[ebp]
  0032d	89 43 ec	 mov	 DWORD PTR [ebx-20], eax
  00330	0f b7 c1	 movzx	 eax, cx
  00333	8b cf		 mov	 ecx, edi
  00335	3b f8		 cmp	 edi, eax
  00337	0f 82 e3 fd ff
	ff		 jb	 $LL7@SetupLeafB
  0033d	8b 5d f0	 mov	 ebx, DWORD PTR _unLod$1$[ebp]
$LN29@SetupLeafB:

; 516  :                 ++pVertex;
; 517  :             }
; 518  : 
; 519  :         }
; 520  :         m_pLeafVertexBuffer[unLod]->Unlock();

  00340	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  00346	8d 0c 9d 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*4]
  0034d	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  00350	50		 push	 eax
  00351	8b 08		 mov	 ecx, DWORD PTR [eax]
  00353	ff 51 30	 call	 DWORD PTR [ecx+48]
$LN2@SetupLeafB:

; 495  : 
; 496  :     for (unsigned int unLod = 0; unLod < m_usNumLeafLods; ++unLod)

  00356	0f b7 86 d0 02
	00 00		 movzx	 eax, WORD PTR [esi+720]
  0035d	43		 inc	 ebx
  0035e	89 5d f0	 mov	 DWORD PTR _unLod$1$[ebp], ebx
  00361	3b d8		 cmp	 ebx, eax
  00363	0f 82 fd fc ff
	ff		 jb	 $LL4@SetupLeafB
  00369	5f		 pop	 edi
$LN3@SetupLeafB:
  0036a	5e		 pop	 esi

; 521  :     }
; 522  : }

  0036b	5b		 pop	 ebx
  0036c	8b e5		 mov	 esp, ebp
  0036e	5d		 pop	 ebp
  0036f	c3		 ret	 0
?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupLeafBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
tv771 = -20						; size = 4
_i$1$ = -16						; size = 4
tv797 = -12						; size = 4
_i$1$ = -8						; size = 4
_pIndexBuffer$1 = -8					; size = 4
_pVertexBuffer$2 = -4					; size = 4
?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupFrondBuffers, COMDAT
; _this$ = ecx

; 443  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 444  :     CSpeedTreeRT::SGeometry::SIndexed* pFronds = &(m_pGeometryCache->m_sFronds);

  0000a	8b b7 a8 02 00
	00		 mov	 esi, DWORD PTR [edi+680]
  00010	89 75 f4	 mov	 DWORD PTR tv797[ebp], esi

; 445  :     m_unFrondVertexCount = pFronds->m_usVertexCount;

  00013	0f b7 56 4c	 movzx	 edx, WORD PTR [esi+76]
  00017	89 97 c0 02 00
	00		 mov	 DWORD PTR [edi+704], edx

; 446  : 
; 447  :     if (m_unFrondVertexCount > 1)

  0001d	83 fa 01	 cmp	 edx, 1
  00020	0f 86 61 02 00
	00		 jbe	 $LN8@SetupFrond

; 448  :     {
; 449  :         SFVFBranchVertex* pVertexBuffer = NULL;
; 450  :         ms_lpd3dDevice->CreateVertexBuffer(m_unFrondVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_DYNAMIC | D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_SYSTEMMEM, &m_pFrondVertexBuffer, NULL);

  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0002b	53		 push	 ebx
  0002c	6a 00		 push	 0
  0002e	8d 9f bc 02 00
	00		 lea	 ebx, DWORD PTR [edi+700]
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$2[ebp], 0
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	53		 push	 ebx
  0003e	6a 02		 push	 2
  00040	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00046	c1 e2 05	 shl	 edx, 5
  00049	68 08 02 00 00	 push	 520			; 00000208H
  0004e	52		 push	 edx
  0004f	50		 push	 eax
  00050	ff 51 68	 call	 DWORD PTR [ecx+104]

; 451  :         m_pFrondVertexBuffer->Lock(0, 0, reinterpret_cast<void**>(&pVertexBuffer), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);

  00053	8b 03		 mov	 eax, DWORD PTR [ebx]
  00055	8d 55 fc	 lea	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  00058	68 00 28 00 00	 push	 10240			; 00002800H
  0005d	52		 push	 edx
  0005e	6a 00		 push	 0
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	6a 00		 push	 0
  00064	50		 push	 eax
  00065	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 452  : 
; 453  :         for (unsigned short i = 0; i < m_unFrondVertexCount; ++i)

  00068	83 bf c0 02 00
	00 00		 cmp	 DWORD PTR [edi+704], 0
  0006f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00076	0f 86 99 00 00
	00		 jbe	 $LN3@SetupFrond
  0007c	8b 55 fc	 mov	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  0007f	33 db		 xor	 ebx, ebx
$LL4@SetupFrond:

; 454  :         {
; 455  :             memcpy(&pVertexBuffer->m_vPosition, &(pFronds->m_pCoords[i * 3]), 3 * sizeof(float));

  00081	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00084	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  00087	f3 0f 7e 04 81	 movq	 xmm0, QWORD PTR [ecx+eax*4]
  0008c	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  00090	8b 4c 81 08	 mov	 ecx, DWORD PTR [ecx+eax*4+8]
  00094	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00097	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 456  :             pVertexBuffer->m_dwDiffuseColor = AGBR2ARGB(pFronds->m_pColors[i]);

  0009a	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0009d	8b 14 98	 mov	 edx, DWORD PTR [eax+ebx*4]
  000a0	8b c2		 mov	 eax, edx
  000a2	c1 e8 10	 shr	 eax, 16			; 00000010H
  000a5	0f b6 c8	 movzx	 ecx, al
  000a8	0f b6 c2	 movzx	 eax, dl
  000ab	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  000b1	c1 e0 10	 shl	 eax, 16			; 00000010H
  000b4	03 c8		 add	 ecx, eax
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000b9	03 ca		 add	 ecx, edx
  000bb	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 457  :             pVertexBuffer->m_fShadowCoords[0] = pFronds->m_pTexCoords1[i * 2];

  000be	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  000c1	8b 0c d8	 mov	 ecx, DWORD PTR [eax+ebx*8]
  000c4	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000c7	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 458  :             pVertexBuffer->m_fShadowCoords[1] = pFronds->m_pTexCoords1[i * 2 + 1];

  000ca	8b 46 68	 mov	 eax, DWORD PTR [esi+104]
  000cd	8b 4c d8 04	 mov	 ecx, DWORD PTR [eax+ebx*8+4]
  000d1	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000d4	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 459  :             pVertexBuffer->m_fTexCoords[0] = pFronds->m_pTexCoords0[i * 2];

  000d7	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  000da	8b 0c d8	 mov	 ecx, DWORD PTR [eax+ebx*8]
  000dd	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000e0	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 460  :             pVertexBuffer->m_fTexCoords[1] = pFronds->m_pTexCoords0[i * 2 + 1];

  000e3	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  000e6	8b 4c d8 04	 mov	 ecx, DWORD PTR [eax+ebx*8+4]
  000ea	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000ed	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  000f0	8b 45 f8	 mov	 eax, DWORD PTR _i$1$[ebp]

; 461  :             ++pVertexBuffer;

  000f3	8b 55 fc	 mov	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  000f6	40		 inc	 eax
  000f7	83 c2 20	 add	 edx, 32			; 00000020H
  000fa	0f b7 d8	 movzx	 ebx, ax
  000fd	89 55 fc	 mov	 DWORD PTR _pVertexBuffer$2[ebp], edx
  00100	89 45 f8	 mov	 DWORD PTR _i$1$[ebp], eax
  00103	3b 9f c0 02 00
	00		 cmp	 ebx, DWORD PTR [edi+704]
  00109	0f 82 72 ff ff
	ff		 jb	 $LL4@SetupFrond
  0010f	8d 9f bc 02 00
	00		 lea	 ebx, DWORD PTR [edi+700]
$LN3@SetupFrond:

; 462  :         }
; 463  :         m_pFrondVertexBuffer->Unlock();

  00115	8b 03		 mov	 eax, DWORD PTR [ebx]
  00117	50		 push	 eax
  00118	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011a	ff 51 30	 call	 DWORD PTR [ecx+48]

; 464  :         m_unNumFrondLods = m_pSpeedTree->GetNumFrondLodLevels();

  0011d	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00123	e8 00 00 00 00	 call	 ?GetNumFrondLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumFrondLodLevels
  00128	0f b7 c0	 movzx	 eax, ax

; 465  :         m_pFrondIndexCounts = new unsigned short[m_unNumFrondLods];

  0012b	33 c9		 xor	 ecx, ecx
  0012d	89 87 c4 02 00
	00		 mov	 DWORD PTR [edi+708], eax
  00133	ba 02 00 00 00	 mov	 edx, 2
  00138	f7 e2		 mul	 edx
  0013a	0f 90 c1	 seto	 cl
  0013d	f7 d9		 neg	 ecx
  0013f	0b c8		 or	 ecx, eax
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00147	89 87 cc 02 00
	00		 mov	 DWORD PTR [edi+716], eax

; 466  :         m_pFrondIndexBuffers = new LPDIRECT3DINDEXBUFFER9[m_unNumFrondLods];

  0014d	33 c9		 xor	 ecx, ecx
  0014f	8b 87 c4 02 00
	00		 mov	 eax, DWORD PTR [edi+708]
  00155	ba 04 00 00 00	 mov	 edx, 4
  0015a	f7 e2		 mul	 edx
  0015c	0f 90 c1	 seto	 cl
  0015f	f7 d9		 neg	 ecx
  00161	0b c8		 or	 ecx, eax
  00163	51		 push	 ecx
  00164	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00169	89 87 c8 02 00
	00		 mov	 DWORD PTR [edi+712], eax
  0016f	83 c4 08	 add	 esp, 8

; 467  : 
; 468  :         for (unsigned short i = 0; i < m_unNumFrondLods; ++i)

  00172	33 c0		 xor	 eax, eax
  00174	89 45 f0	 mov	 DWORD PTR _i$1$[ebp], eax
  00177	39 87 c4 02 00
	00		 cmp	 DWORD PTR [edi+708], eax
  0017d	0f 86 ea 00 00
	00		 jbe	 $LN6@SetupFrond
  00183	33 db		 xor	 ebx, ebx
$LL7@SetupFrond:

; 469  :         {
; 470  :             m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry, -1, i);

  00185	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0018b	6a ff		 push	 -1
  0018d	50		 push	 eax
  0018e	6a ff		 push	 -1
  00190	6a 02		 push	 2
  00192	ff b7 a8 02 00
	00		 push	 DWORD PTR [edi+680]
  00198	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 471  :             if (pFronds->m_usNumStrips > 0)

  0019d	66 83 7e 40 00	 cmp	 WORD PTR [esi+64], 0
  001a2	76 12		 jbe	 SHORT $LN9@SetupFrond

; 472  :                 m_pFrondIndexCounts[i] = pFronds->m_pStripLengths[0];

  001a4	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001a7	8b 8f cc 02 00
	00		 mov	 ecx, DWORD PTR [edi+716]
  001ad	66 8b 00	 mov	 ax, WORD PTR [eax]
  001b0	66 89 04 59	 mov	 WORD PTR [ecx+ebx*2], ax
  001b4	eb 0c		 jmp	 SHORT $LN10@SetupFrond
$LN9@SetupFrond:

; 473  :             else
; 474  :                 m_pFrondIndexCounts[i] = 0;

  001b6	8b 87 cc 02 00
	00		 mov	 eax, DWORD PTR [edi+716]
  001bc	33 c9		 xor	 ecx, ecx
  001be	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx
$LN10@SetupFrond:

; 475  : 
; 476  :             if (m_pFrondIndexCounts[i] > 0)

  001c2	8b 87 cc 02 00
	00		 mov	 eax, DWORD PTR [edi+716]
  001c8	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  001cc	89 45 ec	 mov	 DWORD PTR tv771[ebp], eax
  001cf	66 85 c0	 test	 ax, ax
  001d2	0f 84 7f 00 00
	00		 je	 $LN5@SetupFrond

; 477  :             {
; 478  :                 ms_lpd3dDevice->CreateIndexBuffer(m_pFrondIndexCounts[i] * sizeof(unsigned short), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_MANAGED, &m_pFrondIndexBuffers[i], NULL);

  001d8	8b 87 c8 02 00
	00		 mov	 eax, DWORD PTR [edi+712]
  001de	8d 34 9d 00 00
	00 00		 lea	 esi, DWORD PTR [ebx*4]
  001e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  001eb	03 c6		 add	 eax, esi
  001ed	6a 00		 push	 0
  001ef	50		 push	 eax
  001f0	8b 45 ec	 mov	 eax, DWORD PTR tv771[ebp]
  001f3	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f5	6a 01		 push	 1
  001f7	6a 65		 push	 101			; 00000065H
  001f9	0f b7 c0	 movzx	 eax, ax
  001fc	6a 08		 push	 8
  001fe	03 c0		 add	 eax, eax
  00200	50		 push	 eax
  00201	51		 push	 ecx
  00202	ff 52 6c	 call	 DWORD PTR [edx+108]

; 479  :                 unsigned short* pIndexBuffer = NULL;
; 480  :                 m_pFrondIndexBuffers[i]->Lock(0, 0, reinterpret_cast<void**>(&pIndexBuffer), 0);

  00205	8b 87 c8 02 00
	00		 mov	 eax, DWORD PTR [edi+712]
  0020b	8d 55 f8	 lea	 edx, DWORD PTR _pIndexBuffer$1[ebp]
  0020e	6a 00		 push	 0
  00210	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pIndexBuffer$1[ebp], 0
  00217	52		 push	 edx
  00218	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0021b	6a 00		 push	 0
  0021d	6a 00		 push	 0
  0021f	50		 push	 eax
  00220	8b 08		 mov	 ecx, DWORD PTR [eax]
  00222	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 481  :                 memcpy(pIndexBuffer, pFronds->m_pStrips[0], m_pFrondIndexCounts[i] * sizeof(unsigned short));

  00225	8b 87 cc 02 00
	00		 mov	 eax, DWORD PTR [edi+716]
  0022b	0f b7 04 58	 movzx	 eax, WORD PTR [eax+ebx*2]
  0022f	03 c0		 add	 eax, eax
  00231	50		 push	 eax
  00232	8b 45 f4	 mov	 eax, DWORD PTR tv797[ebp]
  00235	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  00238	ff 30		 push	 DWORD PTR [eax]
  0023a	ff 75 f8	 push	 DWORD PTR _pIndexBuffer$1[ebp]
  0023d	e8 00 00 00 00	 call	 _memcpy

; 482  :                 m_pFrondIndexBuffers[i]->Unlock();

  00242	8b 87 c8 02 00
	00		 mov	 eax, DWORD PTR [edi+712]
  00248	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024b	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  0024e	50		 push	 eax
  0024f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00251	ff 51 30	 call	 DWORD PTR [ecx+48]
  00254	8b 75 f4	 mov	 esi, DWORD PTR tv797[ebp]
$LN5@SetupFrond:

; 467  : 
; 468  :         for (unsigned short i = 0; i < m_unNumFrondLods; ++i)

  00257	8b 45 f0	 mov	 eax, DWORD PTR _i$1$[ebp]
  0025a	40		 inc	 eax
  0025b	0f b7 d8	 movzx	 ebx, ax
  0025e	89 45 f0	 mov	 DWORD PTR _i$1$[ebp], eax
  00261	3b 9f c4 02 00
	00		 cmp	 ebx, DWORD PTR [edi+708]
  00267	0f 82 18 ff ff
	ff		 jb	 $LL7@SetupFrond
$LN6@SetupFrond:

; 483  :             }
; 484  :         }
; 485  :         m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry, -1, 0);

  0026d	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00273	6a ff		 push	 -1
  00275	6a 00		 push	 0
  00277	6a ff		 push	 -1
  00279	6a 02		 push	 2
  0027b	ff b7 a8 02 00
	00		 push	 DWORD PTR [edi+680]
  00281	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry
  00286	5b		 pop	 ebx
$LN8@SetupFrond:

; 486  :     }
; 487  : }

  00287	5f		 pop	 edi
  00288	5e		 pop	 esi
  00289	8b e5		 mov	 esp, ebp
  0028b	5d		 pop	 ebp
  0028c	c3		 ret	 0
?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupFrondBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
_pIndexBuffer$1 = -12					; size = 4
tv621 = -8						; size = 4
_unNumLodLevels$1$ = -8					; size = 4
_pVertexBuffer$2 = -4					; size = 4
?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ PROC	; CSpeedTreeWrapper::SetupBranchBuffers, COMDAT
; _this$ = ecx

; 402  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 403  :     CSpeedTreeRT::SGeometry::SIndexed* pBranches = &(m_pGeometryCache->m_sBranches);

  0000a	8b 9f a8 02 00
	00		 mov	 ebx, DWORD PTR [edi+680]

; 404  :     m_unBranchVertexCount = pBranches->m_usVertexCount;

  00010	0f b7 53 10	 movzx	 edx, WORD PTR [ebx+16]
  00014	89 97 b0 02 00
	00		 mov	 DWORD PTR [edi+688], edx

; 405  : 
; 406  :     if (m_unBranchVertexCount > 1)

  0001a	83 fa 01	 cmp	 edx, 1
  0001d	0f 86 eb 01 00
	00		 jbe	 $LN8@SetupBranc

; 407  :     {
; 408  :         SFVFBranchVertex* pVertexBuffer = NULL;
; 409  :         ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pBranchVertexBuffer, NULL);

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00028	56		 push	 esi
  00029	6a 00		 push	 0
  0002b	8d b7 ac 02 00
	00		 lea	 esi, DWORD PTR [edi+684]
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertexBuffer$2[ebp], 0
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	56		 push	 esi
  0003b	6a 01		 push	 1
  0003d	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00043	c1 e2 05	 shl	 edx, 5
  00046	6a 08		 push	 8
  00048	52		 push	 edx
  00049	50		 push	 eax
  0004a	ff 51 68	 call	 DWORD PTR [ecx+104]

; 410  :         m_pBranchVertexBuffer->Lock(0, 0, reinterpret_cast<void**>(&pVertexBuffer), 0);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
  0004f	8d 55 fc	 lea	 edx, DWORD PTR _pVertexBuffer$2[ebp]
  00052	6a 00		 push	 0
  00054	52		 push	 edx
  00055	6a 00		 push	 0
  00057	8b 08		 mov	 ecx, DWORD PTR [eax]
  00059	6a 00		 push	 0
  0005b	50		 push	 eax
  0005c	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 411  :         for (unsigned int i = 0; i < m_unBranchVertexCount; ++i)

  0005f	33 f6		 xor	 esi, esi
  00061	39 b7 b0 02 00
	00		 cmp	 DWORD PTR [edi+688], esi
  00067	0f 86 9e 00 00
	00		 jbe	 $LN3@SetupBranc

; 407  :     {
; 408  :         SFVFBranchVertex* pVertexBuffer = NULL;
; 409  :         ms_lpd3dDevice->CreateVertexBuffer(m_unBranchVertexCount * sizeof(SFVFBranchVertex), D3DUSAGE_WRITEONLY, D3DFVF_SPEEDTREE_BRANCH_VERTEX, D3DPOOL_MANAGED, &m_pBranchVertexBuffer, NULL);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00070	33 d2		 xor	 edx, edx
  00072	89 55 f8	 mov	 DWORD PTR tv621[ebp], edx
  00075	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@SetupBranc:

; 412  :         {
; 413  :             memcpy(&pVertexBuffer->m_vPosition, &(pBranches->m_pCoords[i * 3]), 3 * sizeof(float));

  00080	8b 4b 24	 mov	 ecx, DWORD PTR [ebx+36]
  00083	f3 0f 7e 04 11	 movq	 xmm0, QWORD PTR [ecx+edx]
  00088	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0008c	8b 4c 11 08	 mov	 ecx, DWORD PTR [ecx+edx+8]
  00090	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  00093	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 414  :             pVertexBuffer->m_dwDiffuseColor = AGBR2ARGB(pBranches->m_pColors[i]);

  00096	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00099	8b 14 b0	 mov	 edx, DWORD PTR [eax+esi*4]
  0009c	8b c2		 mov	 eax, edx
  0009e	c1 e8 10	 shr	 eax, 16			; 00000010H
  000a1	0f b6 c8	 movzx	 ecx, al
  000a4	0f b6 c2	 movzx	 eax, dl
  000a7	81 e2 00 ff 00
	ff		 and	 edx, -16711936		; ff00ff00H
  000ad	c1 e0 10	 shl	 eax, 16			; 00000010H
  000b0	03 c8		 add	 ecx, eax
  000b2	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000b5	03 ca		 add	 ecx, edx
  000b7	8b 55 f8	 mov	 edx, DWORD PTR tv621[ebp]
  000ba	83 c2 0c	 add	 edx, 12			; 0000000cH
  000bd	89 55 f8	 mov	 DWORD PTR tv621[ebp], edx
  000c0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 415  :             pVertexBuffer->m_fShadowCoords[0] = pBranches->m_pTexCoords1[i * 2];

  000c3	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000c6	8b 0c f0	 mov	 ecx, DWORD PTR [eax+esi*8]
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000cc	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 416  :             pVertexBuffer->m_fShadowCoords[1] = pBranches->m_pTexCoords1[i * 2 + 1];

  000cf	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000d2	8b 4c f0 04	 mov	 ecx, DWORD PTR [eax+esi*8+4]
  000d6	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000d9	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 417  :             pVertexBuffer->m_fTexCoords[0] = pBranches->m_pTexCoords0[i * 2];

  000dc	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  000df	8b 0c f0	 mov	 ecx, DWORD PTR [eax+esi*8]
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000e5	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 418  :             pVertexBuffer->m_fTexCoords[1] = pBranches->m_pTexCoords0[i * 2 + 1];

  000e8	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  000eb	8b 4c f0 04	 mov	 ecx, DWORD PTR [eax+esi*8+4]
  000ef	46		 inc	 esi
  000f0	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000f3	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 419  :             ++pVertexBuffer;

  000f6	8b 45 fc	 mov	 eax, DWORD PTR _pVertexBuffer$2[ebp]
  000f9	83 c0 20	 add	 eax, 32			; 00000020H
  000fc	89 45 fc	 mov	 DWORD PTR _pVertexBuffer$2[ebp], eax
  000ff	3b b7 b0 02 00
	00		 cmp	 esi, DWORD PTR [edi+688]
  00105	0f 82 75 ff ff
	ff		 jb	 $LL4@SetupBranc
$LN3@SetupBranc:

; 420  :         }
; 421  :         m_pBranchVertexBuffer->Unlock();

  0010b	8b 87 ac 02 00
	00		 mov	 eax, DWORD PTR [edi+684]
  00111	50		 push	 eax
  00112	8b 08		 mov	 ecx, DWORD PTR [eax]
  00114	ff 51 30	 call	 DWORD PTR [ecx+48]

; 422  : 
; 423  :         unsigned int unNumLodLevels = m_pSpeedTree->GetNumBranchLodLevels();

  00117	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0011d	e8 00 00 00 00	 call	 ?GetNumBranchLodLevels@CSpeedTreeRT@@QBEGXZ ; CSpeedTreeRT::GetNumBranchLodLevels
  00122	0f b7 c0	 movzx	 eax, ax

; 424  :         m_pBranchIndexCounts = new unsigned short[unNumLodLevels];

  00125	33 c9		 xor	 ecx, ecx
  00127	89 45 f8	 mov	 DWORD PTR _unNumLodLevels$1$[ebp], eax
  0012a	ba 02 00 00 00	 mov	 edx, 2
  0012f	f7 e2		 mul	 edx
  00131	0f 90 c1	 seto	 cl
  00134	f7 d9		 neg	 ecx
  00136	0b c8		 or	 ecx, eax
  00138	51		 push	 ecx
  00139	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 425  :         for (unsigned int i = 0; i < unNumLodLevels; ++i)

  0013e	33 f6		 xor	 esi, esi
  00140	89 87 b8 02 00
	00		 mov	 DWORD PTR [edi+696], eax
  00146	83 c4 04	 add	 esp, 4
  00149	39 75 f8	 cmp	 DWORD PTR _unNumLodLevels$1$[ebp], esi
  0014c	76 45		 jbe	 SHORT $LN20@SetupBranc
  0014e	66 90		 npad	 2
$LL7@SetupBranc:

; 426  :         {
; 427  :             m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry, (short)i);

  00150	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00156	6a ff		 push	 -1
  00158	6a ff		 push	 -1
  0015a	56		 push	 esi
  0015b	6a 01		 push	 1
  0015d	ff b7 a8 02 00
	00		 push	 DWORD PTR [edi+680]
  00163	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 428  :             if (pBranches->m_usNumStrips > 0)

  00168	66 83 7b 04 00	 cmp	 WORD PTR [ebx+4], 0
  0016d	76 12		 jbe	 SHORT $LN9@SetupBranc

; 429  :                 m_pBranchIndexCounts[i] = pBranches->m_pStripLengths[0];

  0016f	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00172	8b 8f b8 02 00
	00		 mov	 ecx, DWORD PTR [edi+696]
  00178	66 8b 00	 mov	 ax, WORD PTR [eax]
  0017b	66 89 04 71	 mov	 WORD PTR [ecx+esi*2], ax
  0017f	eb 0c		 jmp	 SHORT $LN5@SetupBranc
$LN9@SetupBranc:

; 430  :             else
; 431  :                 m_pBranchIndexCounts[i] = 0;

  00181	8b 87 b8 02 00
	00		 mov	 eax, DWORD PTR [edi+696]
  00187	33 c9		 xor	 ecx, ecx
  00189	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
$LN5@SetupBranc:

; 425  :         for (unsigned int i = 0; i < unNumLodLevels; ++i)

  0018d	46		 inc	 esi
  0018e	3b 75 f8	 cmp	 esi, DWORD PTR _unNumLodLevels$1$[ebp]
  00191	72 bd		 jb	 SHORT $LL7@SetupBranc
$LN20@SetupBranc:

; 432  :         }
; 433  :         m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry, 0);

  00193	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00199	6a ff		 push	 -1
  0019b	6a ff		 push	 -1
  0019d	6a 00		 push	 0
  0019f	6a 01		 push	 1
  001a1	ff b7 a8 02 00
	00		 push	 DWORD PTR [edi+680]
  001a7	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 434  :         ms_lpd3dDevice->CreateIndexBuffer(m_pBranchIndexCounts[0] * sizeof(unsigned short), D3DUSAGE_WRITEONLY, D3DFMT_INDEX16, D3DPOOL_MANAGED, &m_pBranchIndexBuffer, NULL);

  001ac	8b 87 b8 02 00
	00		 mov	 eax, DWORD PTR [edi+696]
  001b2	8d b7 b4 02 00
	00		 lea	 esi, DWORD PTR [edi+692]
  001b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  001be	6a 00		 push	 0
  001c0	56		 push	 esi
  001c1	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c6	03 c0		 add	 eax, eax
  001c8	6a 01		 push	 1
  001ca	6a 65		 push	 101			; 00000065H
  001cc	6a 08		 push	 8
  001ce	50		 push	 eax
  001cf	51		 push	 ecx
  001d0	ff 52 6c	 call	 DWORD PTR [edx+108]

; 435  :         unsigned short* pIndexBuffer = NULL;
; 436  :         m_pBranchIndexBuffer->Lock(0, 0, reinterpret_cast<void**>(&pIndexBuffer), 0);

  001d3	8b 06		 mov	 eax, DWORD PTR [esi]
  001d5	8d 55 f4	 lea	 edx, DWORD PTR _pIndexBuffer$1[ebp]
  001d8	6a 00		 push	 0
  001da	52		 push	 edx
  001db	6a 00		 push	 0
  001dd	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _pIndexBuffer$1[ebp], 0
  001e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e6	6a 00		 push	 0
  001e8	50		 push	 eax
  001e9	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 437  :         memcpy(pIndexBuffer, pBranches->m_pStrips[0], pBranches->m_pStripLengths[0] * sizeof(unsigned short));

  001ec	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  001ef	0f b7 00	 movzx	 eax, WORD PTR [eax]
  001f2	03 c0		 add	 eax, eax
  001f4	50		 push	 eax
  001f5	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  001f8	ff 30		 push	 DWORD PTR [eax]
  001fa	ff 75 f4	 push	 DWORD PTR _pIndexBuffer$1[ebp]
  001fd	e8 00 00 00 00	 call	 _memcpy

; 438  :         m_pBranchIndexBuffer->Unlock();

  00202	8b 06		 mov	 eax, DWORD PTR [esi]
  00204	83 c4 0c	 add	 esp, 12			; 0000000cH
  00207	8b 08		 mov	 ecx, DWORD PTR [eax]
  00209	50		 push	 eax
  0020a	ff 51 30	 call	 DWORD PTR [ecx+48]
  0020d	5e		 pop	 esi
$LN8@SetupBranc:

; 439  :     }
; 440  : }

  0020e	5f		 pop	 edi
  0020f	5b		 pop	 ebx
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP	; CSpeedTreeWrapper::SetupBranchBuffers
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ PROC		; CSpeedTreeWrapper::SetupBuffers, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx

; 393  :     if (m_pGeometryCache == NULL)

  00026	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  0002c	85 c0		 test	 eax, eax
  0002e	75 33		 jne	 SHORT $LN2@SetupBuffe

; 394  :         m_pGeometryCache = new CSpeedTreeRT::SGeometry;

  00030	68 20 01 00 00	 push	 288			; 00000120H
  00035	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	85 c0		 test	 eax, eax
  00049	74 09		 je	 SHORT $LN4@SetupBuffe
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ??0SGeometry@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::SGeometry::SGeometry
  00052	eb 02		 jmp	 SHORT $LN5@SetupBuffe
$LN4@SetupBuffe:
  00054	33 c0		 xor	 eax, eax
$LN5@SetupBuffe:
  00056	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0005d	89 86 a8 02 00
	00		 mov	 DWORD PTR [esi+680], eax
$LN2@SetupBuffe:

; 395  :     m_pSpeedTree->GetGeometry(*m_pGeometryCache);

  00063	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  00069	6a ff		 push	 -1
  0006b	6a ff		 push	 -1
  0006d	6a ff		 push	 -1
  0006f	6a 0f		 push	 15			; 0000000fH
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 396  :     SetupBranchBuffers();

  00077	8b ce		 mov	 ecx, esi
  00079	e8 00 00 00 00	 call	 ?SetupBranchBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupBranchBuffers

; 397  :     SetupFrondBuffers();

  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?SetupFrondBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupFrondBuffers

; 398  :     SetupLeafBuffers();

  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?SetupLeafBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupLeafBuffers

; 399  : }

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5e		 pop	 esi
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ$0:
  00000	68 20 01 00 00	 push	 288			; 00000120H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ ENDP		; CSpeedTreeWrapper::SetupBuffers
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ PROC		; CSpeedTreeWrapper::CleanUpMemory, COMDAT
; _this$ = ecx

; 775  :     if (!m_bIsInstance)

  00000	80 b9 94 02 00
	00 00		 cmp	 BYTE PTR [ecx+660], 0
  00007	75 0b		 jne	 SHORT $LN2@CleanUpMem

; 776  :         m_pSpeedTree->DeleteTransientData();

  00009	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  0000f	e9 00 00 00 00	 jmp	 ?DeleteTransientData@CSpeedTreeRT@@QAEXXZ ; CSpeedTreeRT::DeleteTransientData
$LN2@CleanUpMem:

; 777  : }

  00014	c3		 ret	 0
?CleanUpMemory@CSpeedTreeWrapper@@QAEXXZ ENDP		; CSpeedTreeWrapper::CleanUpMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?Advance@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?Advance@CSpeedTreeWrapper@@QAEXXZ PROC			; CSpeedTreeWrapper::Advance, COMDAT
; _this$ = ecx

; 524  : void CSpeedTreeWrapper::Advance(void){}

  00000	c2 00 00	 ret	 0
?Advance@CSpeedTreeWrapper@@QAEXXZ ENDP			; CSpeedTreeWrapper::Advance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z
_TEXT	SEGMENT
_pInstance$ = 8						; size = 4
?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z PROC	; CSpeedTreeWrapper::DeleteInstance, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00007	8b b3 98 02 00
	00		 mov	 esi, DWORD PTR [ebx+664]
  0000d	8b 83 9c 02 00
	00		 mov	 eax, DWORD PTR [ebx+668]
  00013	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 579  :     while (itor != m_vInstances.end())

  00015	74 43		 je	 SHORT $LN3@DeleteInst

; 582  :         {
; 583  :             delete pInstance;

  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _pInstance$[ebp]
  0001b	0f 1f 44 00 00	 npad	 5
$LL2@DeleteInst:

; 580  :     {
; 581  :         if (*itor == pInstance)

  00020	39 3e		 cmp	 DWORD PTR [esi], edi
  00022	75 2e		 jne	 SHORT $LN4@DeleteInst

; 582  :         {
; 583  :             delete pInstance;

  00024	85 ff		 test	 edi, edi
  00026	74 08		 je	 SHORT $LN7@DeleteInst
  00028	8b 07		 mov	 eax, DWORD PTR [edi]
  0002a	8b cf		 mov	 ecx, edi
  0002c	6a 01		 push	 1
  0002e	ff 10		 call	 DWORD PTR [eax]
$LN7@DeleteInst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4207 :             return _Copy_memmove(_First, _Last, _Dest);

  00030	56		 push	 esi
  00031	ff b3 9c 02 00
	00		 push	 DWORD PTR [ebx+668]
  00037	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSpeedTreeWrapper@@PAPAV1@@std@@YAPAPAVCSpeedTreeWrapper@@PAPAV1@00@Z ; std::_Copy_memmove<CSpeedTreeWrapper * *,CSpeedTreeWrapper * *>
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1795 :         --_Mylast;

  00043	83 83 9c 02 00
	00 fc		 add	 DWORD PTR [ebx+668], -4	; fffffffcH
  0004a	8b 83 9c 02 00
	00		 mov	 eax, DWORD PTR [ebx+668]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 585  :         }

  00050	eb 03		 jmp	 SHORT $LN33@DeleteInst
$LN4@DeleteInst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 74   :         ++_Ptr;

  00052	83 c6 04	 add	 esi, 4
$LN33@DeleteInst:

; 156  :         return _Ptr == _Right._Ptr;

  00055	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 579  :     while (itor != m_vInstances.end())

  00057	75 c7		 jne	 SHORT $LL2@DeleteInst
  00059	5f		 pop	 edi
$LN3@DeleteInst:
  0005a	5e		 pop	 esi

; 586  :         else
; 587  :             ++itor;
; 588  :     }
; 589  : }

  0005b	5b		 pop	 ebx
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
?DeleteInstance@CSpeedTreeWrapper@@QAEXPAV1@@Z ENDP	; CSpeedTreeWrapper::DeleteInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pInstance$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ PROC	; CSpeedTreeWrapper::MakeInstance, COMDAT
; _this$ = ecx

; 527  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 528  :     CSpeedTreeWrapper* pInstance = new CSpeedTreeWrapper;

  00027	68 44 04 00 00	 push	 1092			; 00000444H
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00031	83 c4 04	 add	 esp, 4
  00034	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	85 c0		 test	 eax, eax
  00040	74 0b		 je	 SHORT $LN6@MakeInstan
  00042	8b c8		 mov	 ecx, eax
  00044	e8 00 00 00 00	 call	 ??0CSpeedTreeWrapper@@QAE@XZ ; CSpeedTreeWrapper::CSpeedTreeWrapper
  00049	8b f8		 mov	 edi, eax
  0004b	eb 02		 jmp	 SHORT $LN7@MakeInstan
$LN6@MakeInstan:
  0004d	33 ff		 xor	 edi, edi
$LN7@MakeInstan:

; 529  :     pInstance->m_bIsInstance = true;

  0004f	c6 87 94 02 00
	00 01		 mov	 BYTE PTR [edi+660], 1

; 530  :     pInstance->m_pSpeedTree = m_pSpeedTree->MakeInstance();

  00056	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  0005c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00063	89 7d f0	 mov	 DWORD PTR _pInstance$[ebp], edi
  00066	e8 00 00 00 00	 call	 ?MakeInstance@CSpeedTreeRT@@QAEPAV1@XZ ; CSpeedTreeRT::MakeInstance
  0006b	89 87 8c 02 00
	00		 mov	 DWORD PTR [edi+652], eax

; 531  :     if (pInstance->m_pSpeedTree)

  00071	85 c0		 test	 eax, eax
  00073	0f 84 58 02 00
	00		 je	 $LN2@MakeInstan

; 532  :     {
; 533  :         pInstance->m_cBranchMaterial = m_cBranchMaterial;

  00079	0f 10 86 00 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+768]

; 534  :         pInstance->m_cLeafMaterial = m_cLeafMaterial;
; 535  :         pInstance->m_cFrondMaterial = m_cFrondMaterial;
; 536  :         pInstance->m_CompositeImageInstance.SetImagePointer(m_CompositeImageInstance.GetGraphicImagePointer());

  00080	8d 8e 1c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1052]
  00086	0f 11 87 00 03
	00 00		 movups	 XMMWORD PTR [edi+768], xmm0
  0008d	0f 10 86 10 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+784]
  00094	0f 11 87 10 03
	00 00		 movups	 XMMWORD PTR [edi+784], xmm0
  0009b	0f 10 86 20 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+800]
  000a2	0f 11 87 20 03
	00 00		 movups	 XMMWORD PTR [edi+800], xmm0
  000a9	0f 10 86 30 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+816]
  000b0	0f 11 87 30 03
	00 00		 movups	 XMMWORD PTR [edi+816], xmm0
  000b7	8b 86 40 03 00
	00		 mov	 eax, DWORD PTR [esi+832]
  000bd	89 87 40 03 00
	00		 mov	 DWORD PTR [edi+832], eax
  000c3	0f 10 86 44 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+836]
  000ca	0f 11 87 44 03
	00 00		 movups	 XMMWORD PTR [edi+836], xmm0
  000d1	0f 10 86 54 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+852]
  000d8	0f 11 87 54 03
	00 00		 movups	 XMMWORD PTR [edi+852], xmm0
  000df	0f 10 86 64 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+868]
  000e6	0f 11 87 64 03
	00 00		 movups	 XMMWORD PTR [edi+868], xmm0
  000ed	0f 10 86 74 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+884]
  000f4	0f 11 87 74 03
	00 00		 movups	 XMMWORD PTR [edi+884], xmm0
  000fb	8b 86 84 03 00
	00		 mov	 eax, DWORD PTR [esi+900]
  00101	89 87 84 03 00
	00		 mov	 DWORD PTR [edi+900], eax
  00107	0f 10 86 88 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+904]
  0010e	0f 11 87 88 03
	00 00		 movups	 XMMWORD PTR [edi+904], xmm0
  00115	0f 10 86 98 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+920]
  0011c	0f 11 87 98 03
	00 00		 movups	 XMMWORD PTR [edi+920], xmm0
  00123	0f 10 86 a8 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+936]
  0012a	0f 11 87 a8 03
	00 00		 movups	 XMMWORD PTR [edi+936], xmm0
  00131	0f 10 86 b8 03
	00 00		 movups	 xmm0, XMMWORD PTR [esi+952]
  00138	0f 11 87 b8 03
	00 00		 movups	 XMMWORD PTR [edi+952], xmm0
  0013f	8b 86 c8 03 00
	00		 mov	 eax, DWORD PTR [esi+968]
  00145	89 87 c8 03 00
	00		 mov	 DWORD PTR [edi+968], eax
  0014b	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  00150	50		 push	 eax
  00151	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  00157	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 537  :         pInstance->m_BranchImageInstance.SetImagePointer(m_BranchImageInstance.GetGraphicImagePointer());

  0015c	8d 8e cc 03 00
	00		 lea	 ecx, DWORD PTR [esi+972]
  00162	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  00167	50		 push	 eax
  00168	8d 8f cc 03 00
	00		 lea	 ecx, DWORD PTR [edi+972]
  0016e	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 538  :         if (!m_ShadowImageInstance.IsEmpty())

  00173	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  00179	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0017e	84 c0		 test	 al, al
  00180	75 17		 jne	 SHORT $LN4@MakeInstan

; 539  :             pInstance->m_ShadowImageInstance.SetImagePointer(m_ShadowImageInstance.GetGraphicImagePointer());

  00182	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  00188	e8 00 00 00 00	 call	 ?GetGraphicImagePointer@CGraphicImageInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicImageInstance::GetGraphicImagePointer
  0018d	50		 push	 eax
  0018e	8d 8f f4 03 00
	00		 lea	 ecx, DWORD PTR [edi+1012]
  00194	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN4@MakeInstan:

; 540  :         pInstance->m_pTextureInfo = m_pTextureInfo;

  00199	8b 86 90 02 00
	00		 mov	 eax, DWORD PTR [esi+656]

; 541  :         pInstance->m_pGeometryCache = m_pGeometryCache;
; 542  :         pInstance->m_pBranchIndexBuffer = m_pBranchIndexBuffer;
; 543  :         pInstance->m_pBranchIndexCounts = m_pBranchIndexCounts;
; 544  :         pInstance->m_pBranchVertexBuffer = m_pBranchVertexBuffer;
; 545  :         pInstance->m_unBranchVertexCount = m_unBranchVertexCount;
; 546  :         pInstance->m_pFrondIndexBuffers = m_pFrondIndexBuffers;
; 547  :         pInstance->m_unNumFrondLods = m_unNumFrondLods;
; 548  :         pInstance->m_pFrondIndexCounts = m_pFrondIndexCounts;
; 549  :         pInstance->m_pFrondVertexBuffer = m_pFrondVertexBuffer;
; 550  :         pInstance->m_unFrondVertexCount = m_unFrondVertexCount;
; 551  :         pInstance->m_pLeafVertexBuffer = m_pLeafVertexBuffer;
; 552  :         pInstance->m_usNumLeafLods = m_usNumLeafLods;
; 553  :         pInstance->m_pLeavesUpdatedByCpu = m_pLeavesUpdatedByCpu;
; 554  :         memcpy(pInstance->m_afPos, m_afPos, 3 * sizeof(float));
; 555  :         memcpy(pInstance->m_afBoundingBox, m_afBoundingBox, 6 * sizeof(float));
; 556  :         pInstance->m_pInstanceOf = this;
; 557  :         m_vInstances.push_back(pInstance);

  0019f	8d 8e 98 02 00
	00		 lea	 ecx, DWORD PTR [esi+664]
  001a5	89 87 90 02 00
	00		 mov	 DWORD PTR [edi+656], eax
  001ab	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  001b1	89 87 a8 02 00
	00		 mov	 DWORD PTR [edi+680], eax
  001b7	8b 86 b4 02 00
	00		 mov	 eax, DWORD PTR [esi+692]
  001bd	89 87 b4 02 00
	00		 mov	 DWORD PTR [edi+692], eax
  001c3	8b 86 b8 02 00
	00		 mov	 eax, DWORD PTR [esi+696]
  001c9	89 87 b8 02 00
	00		 mov	 DWORD PTR [edi+696], eax
  001cf	8b 86 ac 02 00
	00		 mov	 eax, DWORD PTR [esi+684]
  001d5	89 87 ac 02 00
	00		 mov	 DWORD PTR [edi+684], eax
  001db	8b 86 b0 02 00
	00		 mov	 eax, DWORD PTR [esi+688]
  001e1	89 87 b0 02 00
	00		 mov	 DWORD PTR [edi+688], eax
  001e7	8b 86 c8 02 00
	00		 mov	 eax, DWORD PTR [esi+712]
  001ed	89 87 c8 02 00
	00		 mov	 DWORD PTR [edi+712], eax
  001f3	8b 86 c4 02 00
	00		 mov	 eax, DWORD PTR [esi+708]
  001f9	89 87 c4 02 00
	00		 mov	 DWORD PTR [edi+708], eax
  001ff	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  00205	89 87 cc 02 00
	00		 mov	 DWORD PTR [edi+716], eax
  0020b	8b 86 bc 02 00
	00		 mov	 eax, DWORD PTR [esi+700]
  00211	89 87 bc 02 00
	00		 mov	 DWORD PTR [edi+700], eax
  00217	8b 86 c0 02 00
	00		 mov	 eax, DWORD PTR [esi+704]
  0021d	89 87 c0 02 00
	00		 mov	 DWORD PTR [edi+704], eax
  00223	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  00229	89 87 d4 02 00
	00		 mov	 DWORD PTR [edi+724], eax
  0022f	66 8b 86 d0 02
	00 00		 mov	 ax, WORD PTR [esi+720]
  00236	66 89 87 d0 02
	00 00		 mov	 WORD PTR [edi+720], ax
  0023d	8b 86 d8 02 00
	00		 mov	 eax, DWORD PTR [esi+728]
  00243	89 87 d8 02 00
	00		 mov	 DWORD PTR [edi+728], eax
  00249	f3 0f 7e 86 dc
	02 00 00	 movq	 xmm0, QWORD PTR [esi+732]
  00251	66 0f d6 87 dc
	02 00 00	 movq	 QWORD PTR [edi+732], xmm0
  00259	8b 86 e4 02 00
	00		 mov	 eax, DWORD PTR [esi+740]
  0025f	89 87 e4 02 00
	00		 mov	 DWORD PTR [edi+740], eax
  00265	0f 10 86 e8 02
	00 00		 movups	 xmm0, XMMWORD PTR [esi+744]
  0026c	0f 11 87 e8 02
	00 00		 movups	 XMMWORD PTR [edi+744], xmm0
  00273	f3 0f 7e 86 f8
	02 00 00	 movq	 xmm0, QWORD PTR [esi+760]
  0027b	66 0f d6 87 f8
	02 00 00	 movq	 QWORD PTR [edi+760], xmm0
  00283	89 b7 a4 02 00
	00		 mov	 DWORD PTR [edi+676], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00289	8b 86 9c 02 00
	00		 mov	 eax, DWORD PTR [esi+668]
  0028f	3b 86 a0 02 00
	00		 cmp	 eax, DWORD PTR [esi+672]
  00295	74 1c		 je	 SHORT $LN14@MakeInstan

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00297	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 566  :     return pInstance;

  00299	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  0029b	83 86 9c 02 00
	00 04		 add	 DWORD PTR [esi+668], 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 567  : }

  002a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ac	59		 pop	 ecx
  002ad	5f		 pop	 edi
  002ae	5e		 pop	 esi
  002af	8b e5		 mov	 esp, ebp
  002b1	5d		 pop	 ebp
  002b2	c3		 ret	 0
$LN14@MakeInstan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  002b3	8d 55 f0	 lea	 edx, DWORD PTR _pInstance$[ebp]
  002b6	52		 push	 edx
  002b7	50		 push	 eax
  002b8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSpeedTreeWrapper@@@?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@AAEPAPAVCSpeedTreeWrapper@@QAPAV2@ABQAV2@@Z ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::_Emplace_reallocate<CSpeedTreeWrapper * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 566  :     return pInstance;

  002bd	8b 45 f0	 mov	 eax, DWORD PTR _pInstance$[ebp]

; 567  : }

  002c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002ca	59		 pop	 ecx
  002cb	5f		 pop	 edi
  002cc	5e		 pop	 esi
  002cd	8b e5		 mov	 esp, ebp
  002cf	5d		 pop	 ebp
  002d0	c3		 ret	 0
$LN2@MakeInstan:

; 558  :     }
; 559  :     else
; 560  :     {
; 561  :         fprintf(stderr, "SpeedTreeRT Error: %s\n", m_pSpeedTree->GetCurrentError());

  002d1	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  002d6	6a 02		 push	 2
  002d8	8b f0		 mov	 esi, eax
  002da	e8 00 00 00 00	 call	 ___acrt_iob_func
  002df	56		 push	 esi
  002e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NANCELHN@SpeedTreeRT?5Error?3?5?$CFs?6@
  002e5	50		 push	 eax
  002e6	e8 00 00 00 00	 call	 _fprintf

; 562  :         delete pInstance;

  002eb	8b 07		 mov	 eax, DWORD PTR [edi]
  002ed	83 c4 10	 add	 esp, 16			; 00000010H
  002f0	8b cf		 mov	 ecx, edi
  002f2	6a 01		 push	 1
  002f4	ff 10		 call	 DWORD PTR [eax]

; 566  :     return pInstance;

  002f6	33 c0		 xor	 eax, eax

; 567  : }

  002f8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00302	59		 pop	 ecx
  00303	5f		 pop	 edi
  00304	5e		 pop	 esi
  00305	8b e5		 mov	 esp, ebp
  00307	5d		 pop	 ebp
  00308	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ$0:
  00000	68 44 04 00 00	 push	 1092			; 00000444H
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MakeInstance@CSpeedTreeWrapper@@QAEPAV1@XZ ENDP	; CSpeedTreeWrapper::MakeInstance
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z
_TEXT	SEGMENT
_nCount$ = 8						; size = 4
?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z PROC	; CSpeedTreeWrapper::GetInstances, COMDAT
; _this$ = ecx

; 570  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00003	8b 91 9c 02 00
	00		 mov	 edx, DWORD PTR [ecx+668]
  00009	2b 91 98 02 00
	00		 sub	 edx, DWORD PTR [ecx+664]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 571  :     nCount = m_vInstances.size();

  0000f	8b 45 08	 mov	 eax, DWORD PTR _nCount$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00012	c1 fa 02	 sar	 edx, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 571  :     nCount = m_vInstances.size();

  00015	89 10		 mov	 DWORD PTR [eax], edx

; 572  :     return nCount ? &(m_vInstances[0]) : NULL;

  00017	85 d2		 test	 edx, edx
  00019	74 0a		 je	 SHORT $LN3@GetInstanc
  0001b	8b 81 98 02 00
	00		 mov	 eax, DWORD PTR [ecx+664]

; 573  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
$LN3@GetInstanc:

; 572  :     return nCount ? &(m_vInstances[0]) : NULL;

  00025	33 c0		 xor	 eax, eax

; 573  : }

  00027	5d		 pop	 ebp
  00028	c2 04 00	 ret	 4
?GetInstances@CSpeedTreeWrapper@@QAEPAPAV1@AAI@Z ENDP	; CSpeedTreeWrapper::GetInstances
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
_sVertex$1 = -100					; size = 96
_sVertex$2 = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::RenderBillboards, COMDAT
; _this$ = ecx

; 725  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 726  : #ifdef WRAPPER_BILLBOARD_MODE
; 727  :     PositionTree();

  00013	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 728  :     struct SBillboardVertex
; 729  :     {
; 730  :         float fX, fY, fZ;
; 731  :         DWORD dColor;
; 732  :         float fU, fV;
; 733  :     };
; 734  : 
; 735  :     m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BillboardGeometry);

  00018	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  0001e	6a ff		 push	 -1
  00020	6a ff		 push	 -1
  00022	6a ff		 push	 -1
  00024	6a 08		 push	 8
  00026	ff b6 a8 02 00
	00		 push	 DWORD PTR [esi+680]
  0002c	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 736  : 
; 737  :     if (m_pGeometryCache->m_sBillboard0.m_bIsActive)

  00031	8b 96 a8 02 00
	00		 mov	 edx, DWORD PTR [esi+680]
  00037	80 ba f0 00 00
	00 00		 cmp	 BYTE PTR [edx+240], 0
  0003e	0f 84 25 01 00
	00		 je	 $LN2@RenderBill

; 738  :     {
; 739  :         const float* pCoords = m_pGeometryCache->m_sBillboard0.m_pCoords;

  00044	8b 82 f8 00 00
	00		 mov	 eax, DWORD PTR [edx+248]

; 740  :         const float* pTexCoords = m_pGeometryCache->m_sBillboard0.m_pTexCoords;

  0004a	8b 8a f4 00 00
	00		 mov	 ecx, DWORD PTR [edx+244]

; 741  :         SBillboardVertex sVertex[4] =
; 742  :         {
; 743  :             { pCoords[0], pCoords[1], pCoords[2], 0xffffff, pTexCoords[0], pTexCoords[1] },

  00050	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00054	f3 0f 11 45 9c	 movss	 DWORD PTR _sVertex$2[ebp], xmm0
  00059	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0005e	f3 0f 11 45 a0	 movss	 DWORD PTR _sVertex$2[ebp+4], xmm0
  00063	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00068	f3 0f 11 45 a4	 movss	 DWORD PTR _sVertex$2[ebp+8], xmm0
  0006d	c7 45 a8 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$2[ebp+12], 16777215 ; 00ffffffH
  00074	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00078	f3 0f 11 45 ac	 movss	 DWORD PTR _sVertex$2[ebp+16], xmm0
  0007d	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00082	f3 0f 11 45 b0	 movss	 DWORD PTR _sVertex$2[ebp+20], xmm0

; 744  :             { pCoords[3], pCoords[4], pCoords[5], 0xffffff, pTexCoords[2], pTexCoords[3] },

  00087	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0008c	f3 0f 11 45 b4	 movss	 DWORD PTR _sVertex$2[ebp+24], xmm0
  00091	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  00096	f3 0f 11 45 b8	 movss	 DWORD PTR _sVertex$2[ebp+28], xmm0
  0009b	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  000a0	f3 0f 11 45 bc	 movss	 DWORD PTR _sVertex$2[ebp+32], xmm0
  000a5	c7 45 c0 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$2[ebp+36], 16777215 ; 00ffffffH
  000ac	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  000b1	f3 0f 11 45 c4	 movss	 DWORD PTR _sVertex$2[ebp+40], xmm0
  000b6	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  000bb	f3 0f 11 45 c8	 movss	 DWORD PTR _sVertex$2[ebp+44], xmm0

; 745  :             { pCoords[6], pCoords[7], pCoords[8], 0xffffff, pTexCoords[4], pTexCoords[5] },

  000c0	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000c5	f3 0f 11 45 cc	 movss	 DWORD PTR _sVertex$2[ebp+48], xmm0
  000ca	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  000cf	f3 0f 11 45 d0	 movss	 DWORD PTR _sVertex$2[ebp+52], xmm0
  000d4	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  000d9	f3 0f 11 45 d4	 movss	 DWORD PTR _sVertex$2[ebp+56], xmm0
  000de	c7 45 d8 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$2[ebp+60], 16777215 ; 00ffffffH
  000e5	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  000ea	f3 0f 11 45 dc	 movss	 DWORD PTR _sVertex$2[ebp+64], xmm0
  000ef	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  000f4	f3 0f 11 45 e0	 movss	 DWORD PTR _sVertex$2[ebp+68], xmm0

; 746  :             { pCoords[9], pCoords[10], pCoords[11], 0xffffff, pTexCoords[6], pTexCoords[7] },

  000f9	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  000fe	f3 0f 11 45 e4	 movss	 DWORD PTR _sVertex$2[ebp+72], xmm0
  00103	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  00108	f3 0f 11 4d e8	 movss	 DWORD PTR _sVertex$2[ebp+76], xmm1
  0010d	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00112	f3 0f 11 4d ec	 movss	 DWORD PTR _sVertex$2[ebp+80], xmm1
  00117	c7 45 f0 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$2[ebp+84], 16777215 ; 00ffffffH
  0011e	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  00123	f3 0f 11 4d f4	 movss	 DWORD PTR _sVertex$2[ebp+88], xmm1
  00128	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  0012d	f3 0f 11 4d f8	 movss	 DWORD PTR _sVertex$2[ebp+92], xmm1

; 747  :         };
; 748  :         STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sBillboard0.m_fAlphaTestValue));

  00132	f3 0f 10 82 fc
	00 00 00	 movss	 xmm0, DWORD PTR [edx+252]
  0013a	e8 00 00 00 00	 call	 __ftol3
  0013f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00145	50		 push	 eax
  00146	6a 18		 push	 24			; 00000018H
  00148	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 749  : 
; 750  :         ms_faceCount += 2;
; 751  :         STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));

  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00153	8d 45 9c	 lea	 eax, DWORD PTR _sVertex$2[ebp]
  00156	83 05 00 00 00
	00 02		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 2 ; CGraphicBase::ms_faceCount
  0015d	6a 18		 push	 24			; 00000018H
  0015f	50		 push	 eax
  00160	6a 02		 push	 2
  00162	6a 06		 push	 6
  00164	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
$LN2@RenderBill:

; 752  :     }
; 753  : 
; 754  :     if (m_pGeometryCache->m_sBillboard1.m_bIsActive)

  00169	8b 96 a8 02 00
	00		 mov	 edx, DWORD PTR [esi+680]
  0016f	5e		 pop	 esi
  00170	80 ba 00 01 00
	00 00		 cmp	 BYTE PTR [edx+256], 0
  00177	0f 84 25 01 00
	00		 je	 $LN3@RenderBill

; 755  :     {
; 756  :         const float* pCoords = m_pGeometryCache->m_sBillboard1.m_pCoords;

  0017d	8b 82 08 01 00
	00		 mov	 eax, DWORD PTR [edx+264]

; 757  :         const float* pTexCoords = m_pGeometryCache->m_sBillboard1.m_pTexCoords;

  00183	8b 8a 04 01 00
	00		 mov	 ecx, DWORD PTR [edx+260]

; 758  :         SBillboardVertex sVertex[4] =
; 759  :         {
; 760  :             { pCoords[0], pCoords[1], pCoords[2], 0xffffff, pTexCoords[0], pTexCoords[1] },

  00189	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0018d	f3 0f 11 45 9c	 movss	 DWORD PTR _sVertex$1[ebp], xmm0
  00192	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00197	f3 0f 11 45 a0	 movss	 DWORD PTR _sVertex$1[ebp+4], xmm0
  0019c	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001a1	f3 0f 11 45 a4	 movss	 DWORD PTR _sVertex$1[ebp+8], xmm0
  001a6	c7 45 a8 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$1[ebp+12], 16777215 ; 00ffffffH
  001ad	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001b1	f3 0f 11 45 ac	 movss	 DWORD PTR _sVertex$1[ebp+16], xmm0
  001b6	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  001bb	f3 0f 11 45 b0	 movss	 DWORD PTR _sVertex$1[ebp+20], xmm0

; 761  :             { pCoords[3], pCoords[4], pCoords[5], 0xffffff, pTexCoords[2], pTexCoords[3] },

  001c0	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001c5	f3 0f 11 45 b4	 movss	 DWORD PTR _sVertex$1[ebp+24], xmm0
  001ca	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  001cf	f3 0f 11 45 b8	 movss	 DWORD PTR _sVertex$1[ebp+28], xmm0
  001d4	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  001d9	f3 0f 11 45 bc	 movss	 DWORD PTR _sVertex$1[ebp+32], xmm0
  001de	c7 45 c0 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$1[ebp+36], 16777215 ; 00ffffffH
  001e5	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  001ea	f3 0f 11 45 c4	 movss	 DWORD PTR _sVertex$1[ebp+40], xmm0
  001ef	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  001f4	f3 0f 11 45 c8	 movss	 DWORD PTR _sVertex$1[ebp+44], xmm0

; 762  :             { pCoords[6], pCoords[7], pCoords[8], 0xffffff, pTexCoords[4], pTexCoords[5] },

  001f9	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  001fe	f3 0f 11 45 cc	 movss	 DWORD PTR _sVertex$1[ebp+48], xmm0
  00203	f3 0f 10 40 1c	 movss	 xmm0, DWORD PTR [eax+28]
  00208	f3 0f 11 45 d0	 movss	 DWORD PTR _sVertex$1[ebp+52], xmm0
  0020d	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00212	f3 0f 11 45 d4	 movss	 DWORD PTR _sVertex$1[ebp+56], xmm0
  00217	c7 45 d8 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$1[ebp+60], 16777215 ; 00ffffffH
  0021e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00223	f3 0f 11 45 dc	 movss	 DWORD PTR _sVertex$1[ebp+64], xmm0
  00228	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0022d	f3 0f 11 45 e0	 movss	 DWORD PTR _sVertex$1[ebp+68], xmm0

; 763  :             { pCoords[9], pCoords[10], pCoords[11], 0xffffff, pTexCoords[6], pTexCoords[7] },

  00232	f3 0f 10 40 24	 movss	 xmm0, DWORD PTR [eax+36]
  00237	f3 0f 11 45 e4	 movss	 DWORD PTR _sVertex$1[ebp+72], xmm0
  0023c	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  00241	f3 0f 11 4d e8	 movss	 DWORD PTR _sVertex$1[ebp+76], xmm1
  00246	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  0024b	f3 0f 11 4d ec	 movss	 DWORD PTR _sVertex$1[ebp+80], xmm1
  00250	c7 45 f0 ff ff
	ff 00		 mov	 DWORD PTR _sVertex$1[ebp+84], 16777215 ; 00ffffffH
  00257	f3 0f 10 49 18	 movss	 xmm1, DWORD PTR [ecx+24]
  0025c	f3 0f 11 4d f4	 movss	 DWORD PTR _sVertex$1[ebp+88], xmm1
  00261	f3 0f 10 49 1c	 movss	 xmm1, DWORD PTR [ecx+28]
  00266	f3 0f 11 4d f8	 movss	 DWORD PTR _sVertex$1[ebp+92], xmm1

; 764  :         };
; 765  :         STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_sBillboard1.m_fAlphaTestValue));

  0026b	f3 0f 10 82 0c
	01 00 00	 movss	 xmm0, DWORD PTR [edx+268]
  00273	e8 00 00 00 00	 call	 __ftol3
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0027e	50		 push	 eax
  0027f	6a 18		 push	 24			; 00000018H
  00281	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 766  : 
; 767  :         ms_faceCount += 2;
; 768  :         STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, sVertex, sizeof(SBillboardVertex));

  00286	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028c	8d 45 9c	 lea	 eax, DWORD PTR _sVertex$1[ebp]
  0028f	83 05 00 00 00
	00 02		 add	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, 2 ; CGraphicBase::ms_faceCount
  00296	6a 18		 push	 24			; 00000018H
  00298	50		 push	 eax
  00299	6a 02		 push	 2
  0029b	6a 06		 push	 6
  0029d	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
$LN3@RenderBill:

; 769  :     }
; 770  : #endif
; 771  : }

  002a2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a5	33 cd		 xor	 ecx, ebp
  002a7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ac	8b e5		 mov	 esp, ebp
  002ae	5d		 pop	 ebp
  002af	c3		 ret	 0
?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::RenderBillboards
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
_unLod$1$ = -52						; size = 4
_this$1$ = -48						; size = 4
_vec3$5$sroa$462$1$ = -44				; size = 4
_vec3$5$sroa$460$1$ = -40				; size = 4
_vec3$5$sroa$461$1$ = -36				; size = 4
tv1020 = -32						; size = 4
tv1016 = -28						; size = 4
_unLeafLevel$1$ = -24					; size = 4
_i$1$ = -24						; size = 4
tv1018 = -20						; size = 4
_vecCenter$1$sroa$493$1$ = -16				; size = 4
_vecCenter$1$sroa$492$1$ = -12				; size = 4
_vecCenter$1$sroa$473$1$ = -8				; size = 4
_pVertex$6 = -4						; size = 4
?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderLeaves, COMDAT
; _this$ = ecx

; 671  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi

; 672  :     m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry);

  00008	6a ff		 push	 -1
  0000a	6a ff		 push	 -1
  0000c	8b f9		 mov	 edi, ecx
  0000e	6a ff		 push	 -1
  00010	6a 04		 push	 4
  00012	89 7d d0	 mov	 DWORD PTR _this$1$[ebp], edi
  00015	ff b7 a8 02 00
	00		 push	 DWORD PTR [edi+680]
  0001b	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00021	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry
  00026	33 d2		 xor	 edx, edx
  00028	89 55 e8	 mov	 DWORD PTR _i$1$[ebp], edx
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@RenderLeav:

; 676  :     {
; 677  :         const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = (i == 0) ? &m_pGeometryCache->m_sLeaves0 : &m_pGeometryCache->m_sLeaves1;

  00030	8b 87 a8 02 00
	00		 mov	 eax, DWORD PTR [edi+680]

; 678  :         int unLod = pLeaf->m_nDiscreteLodLevel;

  00036	85 d2		 test	 edx, edx
  00038	8d 88 b4 00 00
	00		 lea	 ecx, DWORD PTR [eax+180]
  0003e	8d 70 78	 lea	 esi, DWORD PTR [eax+120]
  00041	0f 45 f1	 cmovne	 esi, ecx

; 679  : 
; 680  :         if (pLeaf->m_bIsActive && pLeaf->m_usLeafCount > 0)

  00044	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00047	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0004a	89 4d cc	 mov	 DWORD PTR _unLod$1$[ebp], ecx
  0004d	0f 84 13 02 00
	00		 je	 $LN2@RenderLeav
  00053	66 83 7e 0c 00	 cmp	 WORD PTR [esi+12], 0
  00058	0f 86 08 02 00
	00		 jbe	 $LN2@RenderLeav

; 681  :         {
; 682  :             SFVFLeafVertex* pVertex = NULL;
; 683  :             m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<void**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);

  0005e	8b 87 d4 02 00
	00		 mov	 eax, DWORD PTR [edi+724]
  00064	8d 55 fc	 lea	 edx, DWORD PTR _pVertex$6[ebp]
  00067	68 00 28 00 00	 push	 10240			; 00002800H
  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _pVertex$6[ebp], 0
  00073	52		 push	 edx
  00074	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00077	6a 00		 push	 0
  00079	6a 00		 push	 0
  0007b	50		 push	 eax
  0007c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007e	ff 51 2c	 call	 DWORD PTR [ecx+44]

; 684  :             for (unsigned int unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)

  00081	33 c0		 xor	 eax, eax
  00083	33 c9		 xor	 ecx, ecx
  00085	66 3b 46 0c	 cmp	 ax, WORD PTR [esi+12]
  00089	0f 83 c2 01 00
	00		 jae	 $LN6@RenderLeav

; 681  :         {
; 682  :             SFVFLeafVertex* pVertex = NULL;
; 683  :             m_pLeafVertexBuffer[unLod]->Lock(0, 0, reinterpret_cast<void**>(&pVertex), D3DLOCK_DISCARD | D3DLOCK_NOSYSLOCK);

  0008f	8b 7d fc	 mov	 edi, DWORD PTR _pVertex$6[ebp]
  00092	33 d2		 xor	 edx, edx
  00094	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL7@RenderLeav:

; 685  :             {
; 686  :                 D3DXVECTOR3 vecCenter(&(pLeaf->m_pCenterCoords[unLeaf * 3]));

  000a0	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 278  :     y = pf[1];

  000a3	f3 0f 10 44 10
	04		 movss	 xmm0, DWORD PTR [eax+edx+4]
  000a9	f3 0f 10 14 10	 movss	 xmm2, DWORD PTR [eax+edx]
  000ae	f3 0f 11 45 f8	 movss	 DWORD PTR _vecCenter$1$sroa$473$1$[ebp], xmm0

; 279  :     z = pf[2];

  000b3	f3 0f 10 44 10
	08		 movss	 xmm0, DWORD PTR [eax+edx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 687  :                 D3DXVECTOR3 vec0(&pLeaf->m_pLeafMapCoords[unLeaf][0]);

  000b9	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 277  :     x = pf[0];

  000bc	f3 0f 11 55 f0	 movss	 DWORD PTR _vecCenter$1$sroa$493$1$[ebp], xmm2

; 279  :     z = pf[2];

  000c1	f3 0f 11 45 f4	 movss	 DWORD PTR _vecCenter$1$sroa$492$1$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 687  :                 D3DXVECTOR3 vec0(&pLeaf->m_pLeafMapCoords[unLeaf][0]);

  000c6	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 277  :     x = pf[0];

  000c9	f3 0f 10 48 30	 movss	 xmm1, DWORD PTR [eax+48]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  000ce	f3 0f 58 10	 addss	 xmm2, DWORD PTR [eax]

; 277  :     x = pf[0];

  000d2	f3 0f 10 60 10	 movss	 xmm4, DWORD PTR [eax+16]

; 278  :     y = pf[1];

  000d7	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]

; 279  :     z = pf[2];

  000dc	f3 0f 10 58 18	 movss	 xmm3, DWORD PTR [eax+24]

; 277  :     x = pf[0];

  000e1	f3 0f 10 68 20	 movss	 xmm5, DWORD PTR [eax+32]

; 278  :     y = pf[1];

  000e6	f3 0f 10 70 24	 movss	 xmm6, DWORD PTR [eax+36]

; 279  :     z = pf[2];

  000eb	f3 0f 10 78 28	 movss	 xmm7, DWORD PTR [eax+40]

; 277  :     x = pf[0];

  000f0	f3 0f 11 4d d4	 movss	 DWORD PTR _vec3$5$sroa$462$1$[ebp], xmm1

; 278  :     y = pf[1];

  000f5	f3 0f 10 48 34	 movss	 xmm1, DWORD PTR [eax+52]
  000fa	f3 0f 11 4d dc	 movss	 DWORD PTR _vec3$5$sroa$461$1$[ebp], xmm1

; 279  :     z = pf[2];

  000ff	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  00104	f3 0f 11 4d d8	 movss	 DWORD PTR _vec3$5$sroa$460$1$[ebp], xmm1

; 304  :     x = fx;

  00109	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vecCenter$1$sroa$473$1$[ebp]
  0010e	f3 0f 58 48 04	 addss	 xmm1, DWORD PTR [eax+4]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00113	f3 0f 11 55 e4	 movss	 DWORD PTR tv1016[ebp], xmm2

; 304  :     x = fx;

  00118	f3 0f 11 4d ec	 movss	 DWORD PTR tv1018[ebp], xmm1

; 305  :     y = fy;

  0011d	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _vecCenter$1$sroa$492$1$[ebp]
  00122	f3 0f 58 48 08	 addss	 xmm1, DWORD PTR [eax+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 692  :                 (pVertex++)->m_vPosition = vecCenter + vec0;

  00127	f3 0f 11 17	 movss	 DWORD PTR [edi], xmm2
  0012b	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  0012e	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR tv1018[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 305  :     y = fy;

  00133	f3 0f 11 4d e0	 movss	 DWORD PTR tv1020[ebp], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 692  :                 (pVertex++)->m_vPosition = vecCenter + vec0;

  00138	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  0013d	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00140	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vecCenter$1$sroa$492$1$[ebp]
  00145	f3 0f 58 d3	 addss	 xmm2, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 695  :                 (pVertex++)->m_vPosition = vecCenter + vec0;

  00149	f3 0f 10 5d e4	 movss	 xmm3, DWORD PTR tv1016[ebp]
  0014e	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
  00153	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00156	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vecCenter$1$sroa$473$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 692  :                 (pVertex++)->m_vPosition = vecCenter + vec0;

  0015b	83 c0 18	 add	 eax, 24			; 00000018H
  0015e	89 45 fc	 mov	 DWORD PTR _pVertex$6[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00161	f3 0f 58 c8	 addss	 xmm1, xmm0
  00165	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _vecCenter$1$sroa$493$1$[ebp]
  0016a	f3 0f 58 c4	 addss	 xmm0, xmm4
  0016e	f3 0f 10 65 f0	 movss	 xmm4, DWORD PTR _vecCenter$1$sroa$493$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 693  :                 (pVertex++)->m_vPosition = vecCenter + vec1;

  00173	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00177	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 693  :                 (pVertex++)->m_vPosition = vecCenter + vec1;

  0017a	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0017d	f3 0f 58 c5	 addss	 xmm0, xmm5
  00181	f3 0f 10 6d f4	 movss	 xmm5, DWORD PTR _vecCenter$1$sroa$492$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 693  :                 (pVertex++)->m_vPosition = vecCenter + vec1;

  00186	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  0018b	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0018e	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _vecCenter$1$sroa$473$1$[ebp]
  00193	f3 0f 58 ce	 addss	 xmm1, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 693  :                 (pVertex++)->m_vPosition = vecCenter + vec1;

  00197	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0019c	0f 28 d5	 movaps	 xmm2, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 693  :                 (pVertex++)->m_vPosition = vecCenter + vec1;

  0019f	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001a2	f3 0f 58 d7	 addss	 xmm2, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 693  :                 (pVertex++)->m_vPosition = vecCenter + vec1;

  001a6	83 c0 18	 add	 eax, 24			; 00000018H
  001a9	89 45 fc	 mov	 DWORD PTR _pVertex$6[ebp], eax

; 694  :                 (pVertex++)->m_vPosition = vecCenter + vec2;

  001ac	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001b0	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  001b3	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  001b8	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  001bb	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2
  001c0	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  001c3	83 c0 18	 add	 eax, 24			; 00000018H
  001c6	89 45 fc	 mov	 DWORD PTR _pVertex$6[ebp], eax

; 695  :                 (pVertex++)->m_vPosition = vecCenter + vec0;

  001c9	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  001cd	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  001d0	f3 0f 10 5d ec	 movss	 xmm3, DWORD PTR tv1018[ebp]
  001d5	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3
  001da	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  001dd	f3 0f 10 5d e0	 movss	 xmm3, DWORD PTR tv1020[ebp]
  001e2	f3 0f 11 58 08	 movss	 DWORD PTR [eax+8], xmm3
  001e7	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  001ea	83 c0 18	 add	 eax, 24			; 00000018H
  001ed	89 45 fc	 mov	 DWORD PTR _pVertex$6[ebp], eax

; 696  :                 (pVertex++)->m_vPosition = vecCenter + vec2;

  001f0	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001f4	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001f7	f3 0f 58 65 d4	 addss	 xmm4, DWORD PTR _vec3$5$sroa$462$1$[ebp]
  001fc	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _vecCenter$1$sroa$473$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 684  :             for (unsigned int unLeaf = 0; unLeaf < pLeaf->m_usLeafCount; ++unLeaf)

  00201	41		 inc	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00202	f3 0f 58 45 dc	 addss	 xmm0, DWORD PTR _vec3$5$sroa$461$1$[ebp]
  00207	f3 0f 58 6d d8	 addss	 xmm5, DWORD PTR _vec3$5$sroa$460$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 696  :                 (pVertex++)->m_vPosition = vecCenter + vec2;

  0020c	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00211	83 c2 0c	 add	 edx, 12			; 0000000cH
  00214	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  00217	f3 0f 11 50 08	 movss	 DWORD PTR [eax+8], xmm2
  0021c	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  0021f	83 c0 18	 add	 eax, 24			; 00000018H
  00222	89 45 fc	 mov	 DWORD PTR _pVertex$6[ebp], eax

; 697  :                 (pVertex++)->m_vPosition = vecCenter + vec3;

  00225	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  00229	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  0022c	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00231	8b 45 fc	 mov	 eax, DWORD PTR _pVertex$6[ebp]
  00234	f3 0f 11 68 08	 movss	 DWORD PTR [eax+8], xmm5
  00239	8b 7d fc	 mov	 edi, DWORD PTR _pVertex$6[ebp]
  0023c	0f b7 46 0c	 movzx	 eax, WORD PTR [esi+12]
  00240	83 c7 18	 add	 edi, 24			; 00000018H
  00243	89 7d fc	 mov	 DWORD PTR _pVertex$6[ebp], edi
  00246	3b c8		 cmp	 ecx, eax
  00248	0f 82 52 fe ff
	ff		 jb	 $LL7@RenderLeav
  0024e	8b 7d d0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN6@RenderLeav:

; 698  :             }
; 699  :             m_pLeafVertexBuffer[unLod]->Unlock();

  00251	8b 87 d4 02 00
	00		 mov	 eax, DWORD PTR [edi+724]
  00257	8b 4d cc	 mov	 ecx, DWORD PTR _unLod$1$[ebp]
  0025a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  0025d	50		 push	 eax
  0025e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00260	ff 51 30	 call	 DWORD PTR [ecx+48]
  00263	8b 55 e8	 mov	 edx, DWORD PTR _i$1$[ebp]
$LN2@RenderLeav:

; 673  : 
; 674  : #if !defined WRAPPER_USE_NO_WIND || defined WRAPPER_USE_CPU_LEAF_PLACEMENT
; 675  :     for (unsigned int i = 0; i < 2; ++i)

  00266	42		 inc	 edx
  00267	89 55 e8	 mov	 DWORD PTR _i$1$[ebp], edx
  0026a	83 fa 02	 cmp	 edx, 2
  0026d	0f 82 bd fd ff
	ff		 jb	 $LL4@RenderLeav

; 700  :         }
; 701  : #endif
; 702  :     }
; 703  : 
; 704  :     PositionTree();

  00273	8b cf		 mov	 ecx, edi
  00275	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree
  0027a	33 c0		 xor	 eax, eax
  0027c	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  00281	89 45 e8	 mov	 DWORD PTR _unLeafLevel$1$[ebp], eax
$LL10@RenderLeav:

; 706  :     {
; 707  :         const CSpeedTreeRT::SGeometry::SLeaf* pLeaf = (unLeafLevel == 0) ?
; 708  :             &m_pGeometryCache->m_sLeaves0 : pLeaf = &m_pGeometryCache->m_sLeaves1;
; 709  :     
; 710  :         int unLod = pLeaf->m_nDiscreteLodLevel;

  00284	85 c0		 test	 eax, eax
  00286	be 78 00 00 00	 mov	 esi, 120		; 00000078H
  0028b	0f 45 f1	 cmovne	 esi, ecx
  0028e	03 b7 a8 02 00
	00		 add	 esi, DWORD PTR [edi+680]
  00294	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 711  :         if (unLod > -1 && pLeaf->m_bIsActive && pLeaf->m_usLeafCount > 0)

  00297	83 f9 ff	 cmp	 ecx, -1
  0029a	7e 66		 jle	 SHORT $LN8@RenderLeav
  0029c	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0029f	74 61		 je	 SHORT $LN8@RenderLeav
  002a1	66 83 7e 0c 00	 cmp	 WORD PTR [esi+12], 0
  002a6	76 5a		 jbe	 SHORT $LN8@RenderLeav

; 712  :         {
; 713  :             STATEMANAGER.SetStreamSource(0, m_pLeafVertexBuffer[unLod], sizeof(SFVFLeafVertex));

  002a8	8b 87 d4 02 00
	00		 mov	 eax, DWORD PTR [edi+724]
  002ae	6a 18		 push	 24			; 00000018H
  002b0	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  002b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b9	6a 00		 push	 0
  002bb	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource

; 714  :             STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(pLeaf->m_fAlphaTestValue));

  002c0	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  002c5	e8 00 00 00 00	 call	 __ftol3
  002ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d0	50		 push	 eax
  002d1	6a 18		 push	 24			; 00000018H
  002d3	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 715  :     
; 716  :             ms_faceCount += pLeaf->m_usLeafCount * 2;

  002d8	0f b7 4e 0c	 movzx	 ecx, WORD PTR [esi+12]
  002dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  002e1	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 717  :             STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLELIST, 0, pLeaf->m_usLeafCount * 2);

  002e4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ea	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount
  002ef	0f b7 46 0c	 movzx	 eax, WORD PTR [esi+12]
  002f3	03 c0		 add	 eax, eax
  002f5	50		 push	 eax
  002f6	6a 00		 push	 0
  002f8	6a 04		 push	 4
  002fa	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
  002ff	8b 45 e8	 mov	 eax, DWORD PTR _unLeafLevel$1$[ebp]
$LN8@RenderLeav:

; 705  :     for (unsigned int unLeafLevel = 0; unLeafLevel < 2; ++unLeafLevel)

  00302	40		 inc	 eax
  00303	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  00308	89 45 e8	 mov	 DWORD PTR _unLeafLevel$1$[ebp], eax
  0030b	83 f8 02	 cmp	 eax, 2
  0030e	0f 82 70 ff ff
	ff		 jb	 $LL10@RenderLeav

; 718  :         }
; 719  :     }
; 720  : }

  00314	5f		 pop	 edi
  00315	5e		 pop	 esi
  00316	8b e5		 mov	 esp, ebp
  00318	5d		 pop	 ebp
  00319	c3		 ret	 0
?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderLeaves
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?RenderFronds@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderFronds, COMDAT
; _this$ = ecx

; 644  : {

  00000	56		 push	 esi

; 645  :     m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_FrondGeometry);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	6a ff		 push	 -1
  00009	6a 02		 push	 2
  0000b	ff b6 a8 02 00
	00		 push	 DWORD PTR [esi+680]
  00011	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  00017	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 646  : 
; 647  :     if (m_pGeometryCache->m_fFrondAlphaTestValue > 0.0f)

  0001c	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00022	f3 0f 10 40 74	 movss	 xmm0, DWORD PTR [eax+116]
  00027	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0002e	0f 86 ab 00 00
	00		 jbe	 $LN3@RenderFron

; 648  :     {
; 649  :         PositionTree();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 650  :         STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_fFrondAlphaTestValue));

  0003b	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00041	f3 0f 10 40 74	 movss	 xmm0, DWORD PTR [eax+116]
  00046	e8 00 00 00 00	 call	 __ftol3
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	50		 push	 eax
  00052	6a 18		 push	 24			; 00000018H
  00054	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 651  :         if (m_pFrondIndexCounts &&
; 652  :             m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel > -1 &&

  00059	8b 96 cc 02 00
	00		 mov	 edx, DWORD PTR [esi+716]
  0005f	85 d2		 test	 edx, edx
  00061	74 7c		 je	 SHORT $LN3@RenderFron
  00063	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00069	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  0006c	83 f9 ff	 cmp	 ecx, -1
  0006f	7e 6e		 jle	 SHORT $LN3@RenderFron
  00071	66 83 3c 4a 00	 cmp	 WORD PTR [edx+ecx*2], 0
  00076	76 67		 jbe	 SHORT $LN3@RenderFron

; 653  :             m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] > 0)
; 654  :         {
; 655  :             STATEMANAGER.SetIndices(m_pFrondIndexBuffers[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel], 0);

  00078	8b 86 c8 02 00
	00		 mov	 eax, DWORD PTR [esi+712]
  0007e	6a 00		 push	 0
  00080	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  00083	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00089	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices

; 656  : 
; 657  :             ms_faceCount += m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] - 2;

  0008e	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]

; 658  :             STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, m_pGeometryCache->m_sFronds.m_usVertexCount, 0, m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] - 2);

  00094	6a 00		 push	 0
  00096	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00099	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  0009f	0f b7 0c 48	 movzx	 ecx, WORD PTR [eax+ecx*2]
  000a3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  000a8	83 c0 fe	 add	 eax, -2			; fffffffeH
  000ab	03 c1		 add	 eax, ecx
  000ad	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount
  000b2	8b 96 a8 02 00
	00		 mov	 edx, DWORD PTR [esi+680]
  000b8	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  000be	8b 4a 3c	 mov	 ecx, DWORD PTR [edx+60]
  000c1	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	83 e8 02	 sub	 eax, 2
  000ce	50		 push	 eax
  000cf	0f b7 42 4c	 movzx	 eax, WORD PTR [edx+76]
  000d3	6a 00		 push	 0
  000d5	50		 push	 eax
  000d6	6a 00		 push	 0
  000d8	6a 05		 push	 5
  000da	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN3@RenderFron:

; 659  :         }
; 660  :     }
; 661  : }

  000df	5e		 pop	 esi
  000e0	c3		 ret	 0
?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderFronds
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?RenderBranches@CSpeedTreeWrapper@@QBEXXZ PROC		; CSpeedTreeWrapper::RenderBranches, COMDAT
; _this$ = ecx

; 610  : {

  00000	56		 push	 esi

; 611  :     m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_BranchGeometry);

  00001	6a ff		 push	 -1
  00003	6a ff		 push	 -1
  00005	8b f1		 mov	 esi, ecx
  00007	6a ff		 push	 -1
  00009	6a 01		 push	 1
  0000b	ff b6 a8 02 00
	00		 push	 DWORD PTR [esi+680]
  00011	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  00017	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 612  : 
; 613  :     if (m_pGeometryCache->m_fBranchAlphaTestValue > 0.0f)

  0001c	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00022	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00027	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0002e	0f 86 84 00 00
	00		 jbe	 $LN3@RenderBran

; 614  :     {
; 615  :         PositionTree();

  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?PositionTree@CSpeedTreeWrapper@@ABEXXZ ; CSpeedTreeWrapper::PositionTree

; 616  :         STATEMANAGER.SetRenderState(D3DRS_ALPHAREF, DWORD(m_pGeometryCache->m_fBranchAlphaTestValue));

  0003b	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00041	f3 0f 10 40 38	 movss	 xmm0, DWORD PTR [eax+56]
  00046	e8 00 00 00 00	 call	 __ftol3
  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	50		 push	 eax
  00052	6a 18		 push	 24			; 00000018H
  00054	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 617  :         if (m_pBranchIndexCounts &&
; 618  :             m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel > -1 &&

  00059	8b 8e b8 02 00
	00		 mov	 ecx, DWORD PTR [esi+696]
  0005f	85 c9		 test	 ecx, ecx
  00061	74 55		 je	 SHORT $LN3@RenderBran
  00063	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00069	8b 00		 mov	 eax, DWORD PTR [eax]
  0006b	83 f8 ff	 cmp	 eax, -1
  0006e	7e 48		 jle	 SHORT $LN3@RenderBran
  00070	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00074	66 85 c0	 test	 ax, ax
  00077	74 3f		 je	 SHORT $LN3@RenderBran

; 619  :             m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] > 0)
; 620  :         {
; 621  :             ms_faceCount += m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] - 2;

  00079	8b c8		 mov	 ecx, eax
  0007b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_faceCount@CGraphicBase@@1KA ; CGraphicBase::ms_faceCount
  00080	83 c0 fe	 add	 eax, -2			; fffffffeH
  00083	03 c1		 add	 eax, ecx
  00085	a3 00 00 00 00	 mov	 DWORD PTR ?ms_faceCount@CGraphicBase@@1KA, eax ; CGraphicBase::ms_faceCount

; 622  :             STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP, 0, m_pGeometryCache->m_sBranches.m_usVertexCount, 0, m_pBranchIndexCounts[m_pGeometryCache->m_sBranches.m_nDiscreteLodLevel] - 2);

  0008a	8b 96 a8 02 00
	00		 mov	 edx, DWORD PTR [esi+680]
  00090	8b 86 b8 02 00
	00		 mov	 eax, DWORD PTR [esi+696]
  00096	6a 00		 push	 0
  00098	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0009a	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a4	83 e8 02	 sub	 eax, 2
  000a7	50		 push	 eax
  000a8	0f b7 42 10	 movzx	 eax, WORD PTR [edx+16]
  000ac	6a 00		 push	 0
  000ae	50		 push	 eax
  000af	6a 00		 push	 0
  000b1	6a 05		 push	 5
  000b3	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN3@RenderBran:

; 623  :         }
; 624  :     }
; 625  : }

  000b8	5e		 pop	 esi
  000b9	c3		 ret	 0
?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ENDP		; CSpeedTreeWrapper::RenderBranches
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ
_TEXT	SEGMENT
?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ PROC	; CSpeedTreeWrapper::EndLeafForTreeType, COMDAT
; _this$ = ecx

; 722  : void CSpeedTreeWrapper::EndLeafForTreeType(void){}

  00000	c2 00 00	 ret	 0
?EndLeafForTreeType@CSpeedTreeWrapper@@QAEXXZ ENDP	; CSpeedTreeWrapper::EndLeafForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupLeafForTreeType, COMDAT
; _this$ = ecx

; 664  : {

  00000	57		 push	 edi

; 665  :     if (!m_CompositeImageInstance.IsEmpty())

  00001	8d b9 1c 04 00
	00		 lea	 edi, DWORD PTR [ecx+1052]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0000e	84 c0		 test	 al, al
  00010	75 20		 jne	 SHORT $LN2@SetupLeafF

; 666  :         STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  00012	56		 push	 esi
  00013	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00019	8b cf		 mov	 ecx, edi
  0001b	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00027	50		 push	 eax
  00028	6a 00		 push	 0
  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
  00031	5e		 pop	 esi
$LN2@SetupLeafF:

; 667  :     STATEMANAGER.SetTexture(1, NULL);

  00032	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00038	6a 00		 push	 0
  0003a	6a 01		 push	 1
  0003c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
  00041	5f		 pop	 edi

; 668  : }

  00042	c3		 ret	 0
?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupLeafForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupFrondForTreeType, COMDAT
; _this$ = ecx

; 628  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 629  :     LPDIRECT3DTEXTURE9 lpd3dTexture;
; 630  : 
; 631  :     if ((lpd3dTexture = m_CompositeImageInstance.GetTextureReference().GetD3DTexture()))

  00003	8d 8e 1c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1052]
  00009	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00015	85 c0		 test	 eax, eax
  00017	74 0e		 je	 SHORT $LN2@SetupFrond

; 632  :         STATEMANAGER.SetTexture(0, lpd3dTexture);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
$LN2@SetupFrond:

; 633  : 
; 634  :     if ((lpd3dTexture = m_ShadowImageInstance.GetTextureReference().GetD3DTexture()))

  00027	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  0002d	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00039	85 c0		 test	 eax, eax
  0003b	74 0e		 je	 SHORT $LN3@SetupFrond

; 635  :         STATEMANAGER.SetTexture(1, lpd3dTexture);

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00043	50		 push	 eax
  00044	6a 01		 push	 1
  00046	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
$LN3@SetupFrond:

; 636  : 
; 637  :     if (m_pGeometryCache->m_sFronds.m_usVertexCount > 0)

  0004b	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  00051	66 83 78 4c 00	 cmp	 WORD PTR [eax+76], 0
  00056	76 15		 jbe	 SHORT $LN4@SetupFrond

; 638  :     {
; 639  :         STATEMANAGER.SetStreamSource(0, m_pFrondVertexBuffer, sizeof(SFVFBranchVertex));

  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005e	6a 20		 push	 32			; 00000020H
  00060	ff b6 bc 02 00
	00		 push	 DWORD PTR [esi+700]
  00066	6a 00		 push	 0
  00068	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource
$LN4@SetupFrond:

; 640  :     }
; 641  : }

  0006d	5e		 pop	 esi
  0006e	c3		 ret	 0
?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupFrondForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ
_TEXT	SEGMENT
?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ PROC	; CSpeedTreeWrapper::SetupBranchForTreeType, COMDAT
; _this$ = ecx

; 592  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 593  :     LPDIRECT3DTEXTURE9 lpd3dTexture;
; 594  :     if ((lpd3dTexture = m_BranchImageInstance.GetTextureReference().GetD3DTexture()))

  00003	8d 8e cc 03 00
	00		 lea	 ecx, DWORD PTR [esi+972]
  00009	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00015	85 c0		 test	 eax, eax
  00017	74 0e		 je	 SHORT $LN2@SetupBranc

; 595  :         STATEMANAGER.SetTexture(0, lpd3dTexture);

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
$LN2@SetupBranc:

; 596  : 
; 597  :     if (ms_bSelfShadowOn && (lpd3dTexture = m_ShadowImageInstance.GetTextureReference().GetD3DTexture()))

  00027	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?ms_bSelfShadowOn@CSpeedTreeWrapper@@2_NA, 0 ; CSpeedTreeWrapper::ms_bSelfShadowOn
  0002e	74 19		 je	 SHORT $LN3@SetupBranc
  00030	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  00036	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00042	85 c0		 test	 eax, eax
  00044	74 03		 je	 SHORT $LN3@SetupBranc

; 598  :         STATEMANAGER.SetTexture(1, lpd3dTexture);

  00046	50		 push	 eax
  00047	eb 02		 jmp	 SHORT $LN7@SetupBranc
$LN3@SetupBranc:

; 599  :     else
; 600  :         STATEMANAGER.SetTexture(1, NULL);

  00049	6a 00		 push	 0
$LN7@SetupBranc:

; 601  : 
; 602  :     if (m_pGeometryCache->m_sBranches.m_usVertexCount > 0)

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	6a 01		 push	 1
  00053	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
  00058	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  0005e	66 83 78 10 00	 cmp	 WORD PTR [eax+16], 0
  00063	76 28		 jbe	 SHORT $LN5@SetupBranc

; 603  :     {
; 604  :         STATEMANAGER.SetStreamSource(0, m_pBranchVertexBuffer, sizeof(SFVFBranchVertex));

  00065	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006b	6a 20		 push	 32			; 00000020H
  0006d	ff b6 ac 02 00
	00		 push	 DWORD PTR [esi+684]
  00073	6a 00		 push	 0
  00075	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource

; 605  :         STATEMANAGER.SetIndices(m_pBranchIndexBuffer, 0);

  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00080	6a 00		 push	 0
  00082	ff b6 b4 02 00
	00		 push	 DWORD PTR [esi+692]
  00088	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices
$LN5@SetupBranc:

; 606  :     }
; 607  : }

  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ENDP	; CSpeedTreeWrapper::SetupBranchForTreeType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
_TEXT	SEGMENT
_pszSptFile$GSCopy$1$ = -292				; size = 4
_bSuccess$1$ = -285					; size = 1
$T2 = -284						; size = 4
$T3 = -284						; size = 4
$T4 = -284						; size = 1
$T5 = -284						; size = 1
tv2194 = -284						; size = 4
$T6 = -284						; size = 1
$T7 = -284						; size = 4
$T8 = -280						; size = 24
$T9 = -256						; size = 24
$T10 = -232						; size = 24
$T11 = -208						; size = 24
$T12 = -184						; size = 24
$T13 = -184						; size = 24
$T14 = -160						; size = 24
$T15 = -160						; size = 24
$T16 = -136						; size = 24
$T17 = -112						; size = 24
$T18 = -112						; size = 24
$T19 = -88						; size = 24
$T20 = -88						; size = 24
$T21 = -88						; size = 24
$T22 = -64						; size = 24
$T23 = -64						; size = 24
$T24 = -40						; size = 24
$T25 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszSptFile$ = 8					; size = 4
_c_pbBlock$ = 12					; size = 4
_uiBlockSize$ = 16					; size = 4
_nSeed$ = 20						; size = 4
_fSize$ = 24						; size = 4
_fSizeVariance$ = 28					; size = 4
?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z PROC	; CSpeedTreeWrapper::LoadTree, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b f9		 mov	 edi, ecx
  0002f	8b 45 08	 mov	 eax, DWORD PTR _pszSptFile$[ebp]
  00032	8b 75 0c	 mov	 esi, DWORD PTR _c_pbBlock$[ebp]

; 334  :     bool bSuccess = false;
; 335  : 
; 336  : #ifdef WRAPPER_FLIP_T_TEXCOORD
; 337  :     m_pSpeedTree->SetTextureFlip(true);

  00035	6a 01		 push	 1
  00037	89 85 dc fe ff
	ff		 mov	 DWORD PTR _pszSptFile$GSCopy$1$[ebp], eax
  0003d	c6 85 e3 fe ff
	ff 00		 mov	 BYTE PTR _bSuccess$1$[ebp], 0
  00044	e8 00 00 00 00	 call	 ?SetTextureFlip@CSpeedTreeRT@@SAX_N@Z ; CSpeedTreeRT::SetTextureFlip

; 338  : #endif
; 339  : 
; 340  :     if (!m_pSpeedTree->LoadTree(c_pbBlock, uiBlockSize))

  00049	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0004f	83 c4 04	 add	 esp, 4
  00052	ff 75 10	 push	 DWORD PTR _uiBlockSize$[ebp]
  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeRT@@QAE_NPBEI@Z ; CSpeedTreeRT::LoadTree
  0005b	84 c0		 test	 al, al
  0005d	75 30		 jne	 SHORT $LN3@LoadTree

; 341  :     {
; 342  :         if (!m_pSpeedTree->LoadTree(pszSptFile))

  0005f	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _pszSptFile$GSCopy$1$[ebp]
  00065	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0006b	52		 push	 edx
  0006c	e8 00 00 00 00	 call	 ?LoadTree@CSpeedTreeRT@@QAE_NPBD@Z ; CSpeedTreeRT::LoadTree
  00071	84 c0		 test	 al, al
  00073	75 1a		 jne	 SHORT $LN3@LoadTree

; 343  :         {
; 344  :             TraceError("SpeedTreeRT Error: %s", CSpeedTreeRT::GetCurrentError());

  00075	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  0007a	50		 push	 eax
  0007b	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FCIIGDPL@SpeedTreeRT?5Error?3?5?$CFs@
  00080	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00085	83 c4 08	 add	 esp, 8

; 345  :             return false;

  00088	32 c0		 xor	 al, al
  0008a	e9 de 07 00 00	 jmp	 $LN1@LoadTree
$LN3@LoadTree:

; 346  :         }
; 347  :     }
; 348  : 
; 349  :     m_pSpeedTree->SetBranchLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  0008f	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00095	6a 01		 push	 1
  00097	e8 00 00 00 00	 call	 ?SetBranchLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetBranchLightingMethod

; 350  :     m_pSpeedTree->SetLeafLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  0009c	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  000a2	6a 01		 push	 1
  000a4	e8 00 00 00 00	 call	 ?SetLeafLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetLeafLightingMethod

; 351  :     m_pSpeedTree->SetFrondLightingMethod(CSpeedTreeRT::LIGHT_STATIC);

  000a9	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  000af	6a 01		 push	 1
  000b1	e8 00 00 00 00	 call	 ?SetFrondLightingMethod@CSpeedTreeRT@@QAEXW4ELightingMethod@1@@Z ; CSpeedTreeRT::SetFrondLightingMethod

; 352  : 
; 353  : #ifdef WRAPPER_USE_NO_WIND
; 354  :     m_pSpeedTree->SetBranchWindMethod(CSpeedTreeRT::WIND_NONE);

  000b6	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  000bc	6a 02		 push	 2
  000be	e8 00 00 00 00	 call	 ?SetBranchWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetBranchWindMethod

; 355  :     m_pSpeedTree->SetLeafWindMethod(CSpeedTreeRT::WIND_NONE);

  000c3	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  000c9	6a 02		 push	 2
  000cb	e8 00 00 00 00	 call	 ?SetLeafWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetLeafWindMethod

; 356  :     m_pSpeedTree->SetFrondWindMethod(CSpeedTreeRT::WIND_NONE);

  000d0	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  000d6	6a 02		 push	 2
  000d8	e8 00 00 00 00	 call	 ?SetFrondWindMethod@CSpeedTreeRT@@QAEXW4EWindMethod@1@@Z ; CSpeedTreeRT::SetFrondWindMethod

; 357  : #endif
; 358  : 
; 359  :     m_pSpeedTree->SetNumLeafRockingGroups(1);

  000dd	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  000e3	6a 01		 push	 1
  000e5	e8 00 00 00 00	 call	 ?SetNumLeafRockingGroups@CSpeedTreeRT@@QAEXI@Z ; CSpeedTreeRT::SetNumLeafRockingGroups

; 360  : 
; 361  :     if (fSize >= 0.0f && fSizeVariance >= 0.0f)

  000ea	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _fSize$[ebp]
  000ef	0f 57 c9	 xorps	 xmm1, xmm1
  000f2	0f 2f d1	 comiss	 xmm2, xmm1
  000f5	72 23		 jb	 SHORT $LN4@LoadTree
  000f7	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fSizeVariance$[ebp]
  000fc	0f 2f c1	 comiss	 xmm0, xmm1
  000ff	72 19		 jb	 SHORT $LN4@LoadTree

; 362  :         m_pSpeedTree->SetTreeSize(fSize, fSizeVariance);

  00101	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00107	83 ec 08	 sub	 esp, 8
  0010a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00110	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00115	e8 00 00 00 00	 call	 ?SetTreeSize@CSpeedTreeRT@@QAEXMM@Z ; CSpeedTreeRT::SetTreeSize
$LN4@LoadTree:

; 363  : 
; 364  :     if (m_pSpeedTree->Compute(NULL, nSeed))

  0011a	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00120	6a 01		 push	 1
  00122	ff 75 14	 push	 DWORD PTR _nSeed$[ebp]
  00125	6a 00		 push	 0
  00127	e8 00 00 00 00	 call	 ?Compute@CSpeedTreeRT@@QAE_NPBMI_N@Z ; CSpeedTreeRT::Compute
  0012c	84 c0		 test	 al, al
  0012e	0f 84 16 07 00
	00		 je	 $LN5@LoadTree

; 365  :     {
; 366  :         m_pSpeedTree->GetBoundingBox(m_afBoundingBox);

  00134	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0013a	8d 87 e8 02 00
	00		 lea	 eax, DWORD PTR [edi+744]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 ?GetBoundingBox@CSpeedTreeRT@@QBEXPAM@Z ; CSpeedTreeRT::GetBoundingBox

; 367  :         m_pSpeedTree->SetLeafRockingState(true);

  00146	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0014c	6a 01		 push	 1
  0014e	e8 00 00 00 00	 call	 ?SetLeafRockingState@CSpeedTreeRT@@QAEX_N@Z ; CSpeedTreeRT::SetLeafRockingState

; 368  :         CSpeedTreeRT::SetDropToBillboard(true);

  00153	6a 01		 push	 1
  00155	e8 00 00 00 00	 call	 ?SetDropToBillboard@CSpeedTreeRT@@SAX_N@Z ; CSpeedTreeRT::SetDropToBillboard

; 369  :         m_cBranchMaterial.Set(m_pSpeedTree->GetBranchMaterial());

  0015a	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00160	83 c4 04	 add	 esp, 4
  00163	e8 00 00 00 00	 call	 ?GetBranchMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetBranchMaterial
  00168	50		 push	 eax
  00169	8d 8f 00 03 00
	00		 lea	 ecx, DWORD PTR [edi+768]
  0016f	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 370  :         m_cFrondMaterial.Set(m_pSpeedTree->GetFrondMaterial());

  00174	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  0017a	e8 00 00 00 00	 call	 ?GetFrondMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetFrondMaterial
  0017f	50		 push	 eax
  00180	8d 8f 88 03 00
	00		 lea	 ecx, DWORD PTR [edi+904]
  00186	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 371  :         m_cLeafMaterial.Set(m_pSpeedTree->GetLeafMaterial());

  0018b	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  00191	e8 00 00 00 00	 call	 ?GetLeafMaterial@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetLeafMaterial
  00196	50		 push	 eax
  00197	8d 8f 44 03 00
	00		 lea	 ecx, DWORD PTR [edi+836]
  0019d	e8 00 00 00 00	 call	 ?Set@CSpeedTreeMaterial@@QAEXPBM@Z ; CSpeedTreeMaterial::Set

; 372  :         float fHeight = m_afBoundingBox[5] - m_afBoundingBox[2];
; 373  :         m_pTextureInfo = new CSpeedTreeRT::STextures;

  001a2	6a 1c		 push	 28			; 0000001cH
  001a4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001a9	83 c4 04	 add	 esp, 4
  001ac	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  001b2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001b9	85 c0		 test	 eax, eax
  001bb	74 09		 je	 SHORT $LN10@LoadTree
  001bd	8b c8		 mov	 ecx, eax
  001bf	e8 00 00 00 00	 call	 ??0STextures@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::STextures::STextures
  001c4	eb 02		 jmp	 SHORT $LN11@LoadTree
$LN10@LoadTree:
  001c6	33 c0		 xor	 eax, eax
$LN11@LoadTree:

; 374  :         m_pSpeedTree->GetTextures(*m_pTextureInfo);

  001c8	8b 8f 8c 02 00
	00		 mov	 ecx, DWORD PTR [edi+652]
  001ce	50		 push	 eax
  001cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001d6	89 87 90 02 00
	00		 mov	 DWORD PTR [edi+656], eax
  001dc	e8 00 00 00 00	 call	 ?GetTextures@CSpeedTreeRT@@QBEXAAUSTextures@1@@Z ; CSpeedTreeRT::GetTextures

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  001e1	8b 87 90 02 00
	00		 mov	 eax, DWORD PTR [edi+656]
  001e7	0f 57 c0	 xorps	 xmm0, xmm0
  001ea	8b 10		 mov	 edx, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  001ec	8b ca		 mov	 ecx, edx

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  001ee	0f 11 45 90	 movups	 XMMWORD PTR $T18[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  001f2	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  001f9	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T18[ebp+20], 0

; 415  :             return __builtin_strlen(_First);

  00200	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL479@LoadTree:
  00203	8a 01		 mov	 al, BYTE PTR [ecx]
  00205	41		 inc	 ecx
  00206	84 c0		 test	 al, al
  00208	75 f9		 jne	 SHORT $LL479@LoadTree
  0020a	2b ce		 sub	 ecx, esi

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0020c	51		 push	 ecx
  0020d	52		 push	 edx
  0020e	8d 4d 90	 lea	 ecx, DWORD PTR $T18[ebp]
  00211	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00216	8d 45 90	 lea	 eax, DWORD PTR $T18[ebp]
  00219	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00220	50		 push	 eax
  00221	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00227	50		 push	 eax
  00228	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0022d	83 c4 08	 add	 esp, 8
  00230	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00236	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _pszSptFile$GSCopy$1$[ebp]
  0023c	0f 57 c0	 xorps	 xmm0, xmm0
  0023f	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00241	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00245	0f 11 45 c0	 movups	 XMMWORD PTR $T23[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00249	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00250	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T23[ebp+20], 0

; 415  :             return __builtin_strlen(_First);

  00257	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0025a	66 0f 1f 44 00
	00		 npad	 6
$LL480@LoadTree:
  00260	8a 01		 mov	 al, BYTE PTR [ecx]
  00262	41		 inc	 ecx
  00263	84 c0		 test	 al, al
  00265	75 f9		 jne	 SHORT $LL480@LoadTree
  00267	2b ca		 sub	 ecx, edx

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00269	51		 push	 ecx
  0026a	56		 push	 esi
  0026b	8d 4d c0	 lea	 ecx, DWORD PTR $T23[ebp]
  0026e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00273	8d 45 c0	 lea	 eax, DWORD PTR $T23[ebp]
  00276	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0027a	50		 push	 eax
  0027b	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00281	50		 push	 eax
  00282	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  00287	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0028a	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T3[ebp]
  00290	8d 4d a8	 lea	 ecx, DWORD PTR $T21[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00293	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  00297	50		 push	 eax
  00298	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T6[ebp]
  0029e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002a3	6a 04		 push	 4
  002a5	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  002aa	8d 4d a8	 lea	 ecx, DWORD PTR $T21[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  002ad	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002b1	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2349 :     size_type _Mysize = 0; // current length of string

  002b6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 0
  002bd	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002c0	0f 11 45 d8	 movups	 XMMWORD PTR $T25[ebp], xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  002c4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002cb	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  002ce	0f 11 45 d8	 movups	 XMMWORD PTR $T25[ebp], xmm0
  002d2	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  002d7	66 0f d6 45 e8	 movq	 QWORD PTR $T25[ebp+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  002dc	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  002e3	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002ea	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2293 :         if (_Large_string_engaged()) {

  002ed	83 7d ec 10	 cmp	 DWORD PTR $T25[ebp+20], 16 ; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  002f1	8d 87 cc 03 00
	00		 lea	 eax, DWORD PTR [edi+972]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  002f7	8d 4d d8	 lea	 ecx, DWORD PTR $T25[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  002fa	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  002fe	0f 43 4d d8	 cmovae	 ecx, DWORD PTR $T25[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00302	50		 push	 eax
  00303	51		 push	 ecx
  00304	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00309	8b 4d ec	 mov	 ecx, DWORD PTR $T25[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  0030c	83 c4 08	 add	 esp, 8
  0030f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00313	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00316	72 2c		 jb	 SHORT $LN111@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00318	8b 55 d8	 mov	 edx, DWORD PTR $T25[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0031b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0031c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0031e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00324	72 14		 jb	 SHORT $LN121@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00326	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00329	83 c1 23	 add	 ecx, 35			; 00000023H
  0032c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0032e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00331	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00334	0f 87 50 05 00
	00		 ja	 $LN173@LoadTree
$LN121@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0033a	51		 push	 ecx
  0033b	52		 push	 edx
  0033c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00341	83 c4 08	 add	 esp, 8
$LN111@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00344	8d 4d a8	 lea	 ecx, DWORD PTR $T21[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00347	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0034e	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00355	c6 45 d8 00	 mov	 BYTE PTR $T25[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  00359	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0035e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00364	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00369	8b 4d d4	 mov	 ecx, DWORD PTR $T23[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  0036c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00370	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00373	72 2c		 jb	 SHORT $LN139@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00375	8b 55 c0	 mov	 edx, DWORD PTR $T23[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00378	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00379	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0037b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00381	72 14		 jb	 SHORT $LN149@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00383	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00386	83 c1 23	 add	 ecx, 35			; 00000023H
  00389	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0038b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0038e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00391	0f 87 f3 04 00
	00		 ja	 $LN173@LoadTree
$LN149@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00397	51		 push	 ecx
  00398	52		 push	 edx
  00399	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0039e	83 c4 08	 add	 esp, 8
$LN139@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  003a1	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  003a7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  003ac	8b 4d a4	 mov	 ecx, DWORD PTR $T18[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 375  :         LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pBranchTextureFilename)) + ".dds").c_str(), m_BranchImageInstance);

  003af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  003b6	83 f9 10	 cmp	 ecx, 16			; 00000010H
  003b9	72 2c		 jb	 SHORT $LN166@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003bb	8b 55 90	 mov	 edx, DWORD PTR $T18[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  003be	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  003bf	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  003c1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003c7	72 14		 jb	 SHORT $LN176@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003c9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003cc	83 c1 23	 add	 ecx, 35			; 00000023H
  003cf	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003d1	83 c0 fc	 add	 eax, -4			; fffffffcH
  003d4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003d7	0f 87 ad 04 00
	00		 ja	 $LN173@LoadTree
$LN176@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  003dd	51		 push	 ecx
  003de	52		 push	 edx
  003df	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003e4	83 c4 08	 add	 esp, 8
$LN166@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 377  :         if (m_pTextureInfo->m_pSelfShadowFilename != NULL)

  003e7	8b 87 90 02 00
	00		 mov	 eax, DWORD PTR [edi+656]
  003ed	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  003f0	85 d2		 test	 edx, edx
  003f2	0f 84 08 02 00
	00		 je	 $LN315@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  003f8	8b ca		 mov	 ecx, edx

; 2349 :     size_type _Mysize = 0; // current length of string

  003fa	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+16], 0
  00401	0f 57 c0	 xorps	 xmm0, xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00404	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+20], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0040b	0f 11 45 a8	 movups	 XMMWORD PTR $T20[ebp], xmm0

; 415  :             return __builtin_strlen(_First);

  0040f	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL481@LoadTree:
  00412	8a 01		 mov	 al, BYTE PTR [ecx]
  00414	41		 inc	 ecx
  00415	84 c0		 test	 al, al
  00417	75 f9		 jne	 SHORT $LL481@LoadTree
  00419	2b ce		 sub	 ecx, esi

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0041b	51		 push	 ecx
  0041c	52		 push	 edx
  0041d	8d 4d a8	 lea	 ecx, DWORD PTR $T20[ebp]
  00420	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00425	8d 45 a8	 lea	 eax, DWORD PTR $T20[ebp]
  00428	c7 45 fc 07 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 7
  0042f	50		 push	 eax
  00430	8d 85 18 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0043c	83 c4 08	 add	 esp, 8
  0043f	89 85 e4 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00445	8b b5 dc fe ff
	ff		 mov	 esi, DWORD PTR _pszSptFile$GSCopy$1$[ebp]
  0044b	0f 57 c0	 xorps	 xmm0, xmm0
  0044e	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00450	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00454	0f 11 45 90	 movups	 XMMWORD PTR $T17[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00458	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0045f	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T17[ebp+20], 0

; 415  :             return __builtin_strlen(_First);

  00466	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00469	0f 1f 80 00 00
	00 00		 npad	 7
$LL482@LoadTree:
  00470	8a 01		 mov	 al, BYTE PTR [ecx]
  00472	41		 inc	 ecx
  00473	84 c0		 test	 al, al
  00475	75 f9		 jne	 SHORT $LL482@LoadTree
  00477	2b ca		 sub	 ecx, edx

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00479	51		 push	 ecx
  0047a	56		 push	 esi
  0047b	8d 4d 90	 lea	 ecx, DWORD PTR $T17[ebp]
  0047e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00483	8d 45 90	 lea	 eax, DWORD PTR $T17[ebp]
  00486	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0048a	50		 push	 eax
  0048b	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  00491	50		 push	 eax
  00492	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  00497	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  0049a	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T2[ebp]
  004a0	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  004a6	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  004aa	50		 push	 eax
  004ab	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T5[ebp]
  004b1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004b6	6a 04		 push	 4
  004b8	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  004bd	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  004c3	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004c7	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2349 :     size_type _Mysize = 0; // current length of string

  004cc	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T24[ebp+16], 0
  004d3	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  004d6	0f 11 45 d8	 movups	 XMMWORD PTR $T24[ebp], xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  004da	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T24[ebp+20], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  004e1	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  004e4	0f 11 45 d8	 movups	 XMMWORD PTR $T24[ebp], xmm0
  004e8	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  004ed	66 0f d6 45 e8	 movq	 QWORD PTR $T24[ebp+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  004f2	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  004f9	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00500	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2293 :         if (_Large_string_engaged()) {

  00503	83 7d ec 10	 cmp	 DWORD PTR $T24[ebp+20], 16 ; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00507	8d 87 f4 03 00
	00		 lea	 eax, DWORD PTR [edi+1012]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  0050d	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00510	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00514	0f 43 4d d8	 cmovae	 ecx, DWORD PTR $T24[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00518	50		 push	 eax
  00519	51		 push	 ecx
  0051a	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0051f	8b 4d ec	 mov	 ecx, DWORD PTR $T24[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00522	83 c4 08	 add	 esp, 8
  00525	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00529	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0052c	72 2c		 jb	 SHORT $LN261@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0052e	8b 55 d8	 mov	 edx, DWORD PTR $T24[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00531	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00532	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00534	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0053a	72 14		 jb	 SHORT $LN271@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0053c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0053f	83 c1 23	 add	 ecx, 35			; 00000023H
  00542	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00544	83 c0 fc	 add	 eax, -4			; fffffffcH
  00547	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0054a	0f 87 3f 03 00
	00		 ja	 $LN322@LoadTree
$LN271@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00550	51		 push	 ecx
  00551	52		 push	 edx
  00552	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00557	83 c4 08	 add	 esp, 8
$LN261@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  0055a	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00560	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T24[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00567	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T24[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0056e	c6 45 d8 00	 mov	 BYTE PTR $T24[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00572	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00577	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0057d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00582	8b 4d a4	 mov	 ecx, DWORD PTR $T17[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  00585	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00589	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0058c	72 2c		 jb	 SHORT $LN288@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0058e	8b 55 90	 mov	 edx, DWORD PTR $T17[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00591	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00592	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00594	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0059a	72 14		 jb	 SHORT $LN298@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0059c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0059f	83 c1 23	 add	 ecx, 35			; 00000023H
  005a2	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005a4	83 c0 fc	 add	 eax, -4			; fffffffcH
  005a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005aa	0f 87 df 02 00
	00		 ja	 $LN322@LoadTree
$LN298@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  005b0	51		 push	 ecx
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005b7	83 c4 08	 add	 esp, 8
$LN288@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  005ba	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  005c0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  005c5	8b 4d bc	 mov	 ecx, DWORD PTR $T20[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 378  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pSelfShadowFilename)) + ".dds").c_str(), m_ShadowImageInstance);

  005c8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  005cf	83 f9 10	 cmp	 ecx, 16			; 00000010H
  005d2	72 2c		 jb	 SHORT $LN315@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005d4	8b 55 a8	 mov	 edx, DWORD PTR $T20[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  005d7	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  005d8	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005da	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  005e0	72 14		 jb	 SHORT $LN325@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  005e2	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  005e5	83 c1 23	 add	 ecx, 35			; 00000023H
  005e8	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  005ea	83 c0 fc	 add	 eax, -4			; fffffffcH
  005ed	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  005f0	0f 87 99 02 00
	00		 ja	 $LN322@LoadTree
$LN325@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  005f6	51		 push	 ecx
  005f7	52		 push	 edx
  005f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005fd	83 c4 08	 add	 esp, 8
$LN315@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 380  :         if (m_pTextureInfo->m_pCompositeFilename)

  00600	8b 87 90 02 00
	00		 mov	 eax, DWORD PTR [edi+656]
  00606	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00609	85 d2		 test	 edx, edx
  0060b	0f 84 2e 02 00
	00		 je	 $LN457@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00611	8b ca		 mov	 ecx, edx

; 2349 :     size_type _Mysize = 0; // current length of string

  00613	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 0
  0061a	0f 57 c0	 xorps	 xmm0, xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0061d	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00624	0f 11 45 c0	 movups	 XMMWORD PTR $T22[ebp], xmm0

; 415  :             return __builtin_strlen(_First);

  00628	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0062b	0f 1f 44 00 00	 npad	 5
$LL483@LoadTree:
  00630	8a 01		 mov	 al, BYTE PTR [ecx]
  00632	41		 inc	 ecx
  00633	84 c0		 test	 al, al
  00635	75 f9		 jne	 SHORT $LL483@LoadTree
  00637	2b ce		 sub	 ecx, esi

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00639	51		 push	 ecx
  0063a	52		 push	 edx
  0063b	8d 4d c0	 lea	 ecx, DWORD PTR $T22[ebp]
  0063e	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00643	8d 45 c0	 lea	 eax, DWORD PTR $T22[ebp]
  00646	c7 45 fc 0d 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 13 ; 0000000dH
  0064d	50		 push	 eax
  0064e	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  00654	50		 push	 eax
  00655	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  0065a	83 c4 08	 add	 esp, 8
  0065d	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0065f	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _pszSptFile$GSCopy$1$[ebp]
  00665	0f 57 c0	 xorps	 xmm0, xmm0
  00668	8b ca		 mov	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  0066a	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0066e	0f 11 45 a8	 movups	 XMMWORD PTR $T19[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00672	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00679	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T19[ebp+20], 0

; 415  :             return __builtin_strlen(_First);

  00680	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00683	89 85 e4 fe ff
	ff		 mov	 DWORD PTR tv2194[ebp], eax
  00689	0f 1f 80 00 00
	00 00		 npad	 7
$LL484@LoadTree:
  00690	8a 01		 mov	 al, BYTE PTR [ecx]
  00692	41		 inc	 ecx
  00693	84 c0		 test	 al, al
  00695	75 f9		 jne	 SHORT $LL484@LoadTree
  00697	2b 8d e4 fe ff
	ff		 sub	 ecx, DWORD PTR tv2194[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0069d	51		 push	 ecx
  0069e	52		 push	 edx
  0069f	8d 4d a8	 lea	 ecx, DWORD PTR $T19[ebp]
  006a2	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  006a7	8d 45 a8	 lea	 eax, DWORD PTR $T19[ebp]
  006aa	c6 45 fc 0f	 mov	 BYTE PTR __$EHRec$[ebp+8], 15 ; 0000000fH
  006ae	50		 push	 eax
  006af	8d 85 00 ff ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 ?GetPath@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::GetPath
  006bb	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  006be	56		 push	 esi
  006bf	50		 push	 eax
  006c0	ff b5 e4 fe ff
	ff		 push	 DWORD PTR $T4[ebp]
  006c6	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  006cc	c6 45 fc 10	 mov	 BYTE PTR __$EHRec$[ebp+8], 16 ; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  006d0	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006d5	6a 04		 push	 4
  006d7	68 00 00 00 00	 push	 OFFSET ??_C@_04LIKELABK@?4dds@
  006dc	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  006e2	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  006e6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2349 :     size_type _Mysize = 0; // current length of string

  006eb	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 0
  006f2	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  006f5	0f 11 85 78 ff
	ff ff		 movups	 XMMWORD PTR $T16[ebp], xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  006fc	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00703	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00706	0f 11 85 78 ff
	ff ff		 movups	 XMMWORD PTR $T16[ebp], xmm0
  0070d	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00712	66 0f d6 45 88	 movq	 QWORD PTR $T16[ebp+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  00717	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0071e	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00725	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2293 :         if (_Large_string_engaged()) {

  00728	83 7d 8c 10	 cmp	 DWORD PTR $T16[ebp+20], 16 ; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  0072c	8d 87 1c 04 00
	00		 lea	 eax, DWORD PTR [edi+1052]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  00732	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00738	c6 45 fc 12	 mov	 BYTE PTR __$EHRec$[ebp+8], 18 ; 00000012H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0073c	0f 43 8d 78 ff
	ff ff		 cmovae	 ecx, DWORD PTR $T16[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00743	50		 push	 eax
  00744	51		 push	 ecx
  00745	e8 00 00 00 00	 call	 ?LoadTexture@CSpeedTreeWrapper@@CA_NPBDAAVCGraphicImageInstance@@@Z ; CSpeedTreeWrapper::LoadTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0074a	8b 4d 8c	 mov	 ecx, DWORD PTR $T16[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  0074d	83 c4 08	 add	 esp, 8
  00750	c6 45 fc 11	 mov	 BYTE PTR __$EHRec$[ebp+8], 17 ; 00000011H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00754	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00757	72 2f		 jb	 SHORT $LN410@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00759	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR $T16[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0075f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00760	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00762	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00768	72 14		 jb	 SHORT $LN420@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0076a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0076d	83 c1 23	 add	 ecx, 35			; 00000023H
  00770	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00772	83 c0 fc	 add	 eax, -4			; fffffffcH
  00775	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00778	0f 87 16 01 00
	00		 ja	 $LN471@LoadTree
$LN420@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0077e	51		 push	 ecx
  0077f	52		 push	 edx
  00780	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00785	83 c4 08	 add	 esp, 8
$LN410@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  00788	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0078e	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T16[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00795	c7 45 8c 0f 00
	00 00		 mov	 DWORD PTR $T16[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0079c	c6 85 78 ff ff
	ff 00		 mov	 BYTE PTR $T16[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  007a3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  007a8	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  007ae	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  007b3	8b 4d bc	 mov	 ecx, DWORD PTR $T19[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  007b6	c6 45 fc 0e	 mov	 BYTE PTR __$EHRec$[ebp+8], 14 ; 0000000eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  007ba	83 f9 10	 cmp	 ecx, 16			; 00000010H
  007bd	72 2c		 jb	 SHORT $LN437@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007bf	8b 55 a8	 mov	 edx, DWORD PTR $T19[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  007c2	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007c3	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007c5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  007cb	72 14		 jb	 SHORT $LN447@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007cd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  007d0	83 c1 23	 add	 ecx, 35			; 00000023H
  007d3	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007d5	83 c0 fc	 add	 eax, -4			; fffffffcH
  007d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007db	0f 87 b3 00 00
	00		 ja	 $LN471@LoadTree
$LN447@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  007e1	51		 push	 ecx
  007e2	52		 push	 edx
  007e3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007e8	83 c4 08	 add	 esp, 8
$LN437@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  007eb	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  007f1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  007f6	8b 4d d4	 mov	 ecx, DWORD PTR $T22[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 381  :             LoadTexture((CFileNameHelper::GetPath(std::string(pszSptFile)) + CFileNameHelper::NoExtension(std::string(m_pTextureInfo->m_pCompositeFilename)) + ".dds").c_str(), m_CompositeImageInstance);

  007f9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00800	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00803	72 28		 jb	 SHORT $LN464@LoadTree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00805	8b 55 c0	 mov	 edx, DWORD PTR $T22[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00808	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00809	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0080b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00811	72 10		 jb	 SHORT $LN474@LoadTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00813	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00816	83 c1 23	 add	 ecx, 35			; 00000023H
  00819	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0081b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0081e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00821	77 71		 ja	 SHORT $LN471@LoadTree
$LN474@LoadTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00823	51		 push	 ecx
  00824	52		 push	 edx
  00825	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0082a	83 c4 08	 add	 esp, 8
$LN464@LoadTree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0082d	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T22[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00834	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T22[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0083b	c6 45 c0 00	 mov	 BYTE PTR $T22[ebp], 0
$LN457@LoadTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 382  :         SetupBuffers();

  0083f	8b cf		 mov	 ecx, edi
  00841	e8 00 00 00 00	 call	 ?SetupBuffers@CSpeedTreeWrapper@@AAEXXZ ; CSpeedTreeWrapper::SetupBuffers

; 383  :         bSuccess = true;

  00846	b0 01		 mov	 al, 1

; 384  :     }

  00848	eb 23		 jmp	 SHORT $LN1@LoadTree
$LN5@LoadTree:

; 385  :     else
; 386  :         fprintf(stderr, "\nFatal Error, cannot compute tree [%s]\n\n", CSpeedTreeRT::GetCurrentError());

  0084a	e8 00 00 00 00	 call	 ?GetCurrentError@CSpeedTreeRT@@SAPBDXZ ; CSpeedTreeRT::GetCurrentError
  0084f	6a 02		 push	 2
  00851	8b f0		 mov	 esi, eax
  00853	e8 00 00 00 00	 call	 ___acrt_iob_func
  00858	56		 push	 esi
  00859	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@CEEBAJFC@?6Fatal?5Error?0?5cannot?5compute?5tr@
  0085e	50		 push	 eax
  0085f	e8 00 00 00 00	 call	 _fprintf
  00864	8a 85 e3 fe ff
	ff		 mov	 al, BYTE PTR _bSuccess$1$[ebp]
  0086a	83 c4 10	 add	 esp, 16			; 00000010H
$LN1@LoadTree:

; 389  : }

  0086d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00870	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00877	59		 pop	 ecx
  00878	5f		 pop	 edi
  00879	5e		 pop	 esi
  0087a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0087d	33 cd		 xor	 ecx, ebp
  0087f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00884	8b e5		 mov	 esp, ebp
  00886	5d		 pop	 ebp
  00887	c2 18 00	 ret	 24			; 00000018H
$LN173@LoadTree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0088a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN322@LoadTree:
  0088f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN471@LoadTree:
  00894	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN486@LoadTree:
  00899	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$0:
  00000	6a 1c		 push	 28			; 0000001cH
  00002	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$1:
  00012	8d 4d 90	 lea	 ecx, DWORD PTR $T18[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$2:
  0001a	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00020	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$3:
  00025	8d 4d c0	 lea	 ecx, DWORD PTR $T23[ebp]
  00028	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$4:
  0002d	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$5:
  00038	8d 4d a8	 lea	 ecx, DWORD PTR $T21[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$6:
  00040	8d 4d d8	 lea	 ecx, DWORD PTR $T25[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$7:
  00048	8d 4d a8	 lea	 ecx, DWORD PTR $T20[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$8:
  00050	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$9:
  0005b	8d 4d 90	 lea	 ecx, DWORD PTR $T17[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$10:
  00063	8d 8d 48 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00069	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$11:
  0006e	8d 8d 60 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00074	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$12:
  00079	8d 4d d8	 lea	 ecx, DWORD PTR $T24[ebp]
  0007c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$13:
  00081	8d 4d c0	 lea	 ecx, DWORD PTR $T22[ebp]
  00084	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$14:
  00089	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0008f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$15:
  00094	8d 4d a8	 lea	 ecx, DWORD PTR $T19[ebp]
  00097	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$16:
  0009c	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  000a2	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$17:
  000a7	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  000ad	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z$18:
  000b2	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  000b8	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000bd	cc		 int	 3
  000be	cc		 int	 3
  000bf	cc		 int	 3
  000c0	cc		 int	 3
  000c1	cc		 int	 3
__ehhandler$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z:
  000c2	90		 npad	 1
  000c3	90		 npad	 1
  000c4	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000c8	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000cb	8b 8a dc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-292]
  000d1	33 c8		 xor	 ecx, eax
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000db	33 c8		 xor	 ecx, eax
  000dd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z
  000e7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadTree@CSpeedTreeWrapper@@QAE_NPBDPBEIIMM@Z ENDP	; CSpeedTreeWrapper::LoadTree
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ??1CSpeedTreeWrapper@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSpeedTreeWrapper@@UAE@XZ PROC			; CSpeedTreeWrapper::~CSpeedTreeWrapper, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSpeedTreeWrapper@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx

; 291  :     if (!m_bIsInstance)

  00027	80 be 94 02 00
	00 00		 cmp	 BYTE PTR [esi+660], 0
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeWrapper@@6B@
  00034	0f 85 f4 01 00
	00		 jne	 $LN24@CSpeedTree

; 292  :     {
; 293  :         if (m_unBranchVertexCount > 0)

  0003a	83 be b0 02 00
	00 00		 cmp	 DWORD PTR [esi+688], 0
  00041	76 51		 jbe	 SHORT $LN12@CSpeedTree

; 294  :         {
; 295  :             SAFE_RELEASE(m_pBranchVertexBuffer);

  00043	8b 8e ac 02 00
	00		 mov	 ecx, DWORD PTR [esi+684]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 10		 je	 SHORT $LN10@CSpeedTree
  0004d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004f	51		 push	 ecx
  00050	ff 50 08	 call	 DWORD PTR [eax+8]
  00053	c7 86 ac 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+684], 0
$LN10@CSpeedTree:

; 296  :             SAFE_RELEASE(m_pBranchIndexBuffer);

  0005d	8b 8e b4 02 00
	00		 mov	 ecx, DWORD PTR [esi+692]
  00063	85 c9		 test	 ecx, ecx
  00065	74 10		 je	 SHORT $LN11@CSpeedTree
  00067	8b 01		 mov	 eax, DWORD PTR [ecx]
  00069	51		 push	 ecx
  0006a	ff 50 08	 call	 DWORD PTR [eax+8]
  0006d	c7 86 b4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+692], 0
$LN11@CSpeedTree:

; 297  :             SAFE_DELETE_ARRAY(m_pBranchIndexCounts);

  00077	8b 86 b8 02 00
	00		 mov	 eax, DWORD PTR [esi+696]
  0007d	85 c0		 test	 eax, eax
  0007f	74 13		 je	 SHORT $LN12@CSpeedTree
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00087	83 c4 04	 add	 esp, 4
  0008a	c7 86 b8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+696], 0
$LN12@CSpeedTree:

; 298  :         }
; 299  : 
; 300  :         if (m_unFrondVertexCount > 0)

  00094	83 be c0 02 00
	00 00		 cmp	 DWORD PTR [esi+704], 0
  0009b	0f 86 9f 00 00
	00		 jbe	 $LN18@CSpeedTree

; 301  :         {
; 302  :             SAFE_RELEASE(m_pFrondVertexBuffer);

  000a1	8b 8e bc 02 00
	00		 mov	 ecx, DWORD PTR [esi+700]
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 10		 je	 SHORT $LN14@CSpeedTree
  000ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ad	51		 push	 ecx
  000ae	ff 50 08	 call	 DWORD PTR [eax+8]
  000b1	c7 86 bc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+700], 0
$LN14@CSpeedTree:

; 303  :             for (unsigned int i = 0; i < m_unNumFrondLods; ++i)

  000bb	33 ff		 xor	 edi, edi
  000bd	39 be c4 02 00
	00		 cmp	 DWORD PTR [esi+708], edi
  000c3	76 41		 jbe	 SHORT $LN76@CSpeedTree
  000c5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@CSpeedTree:

; 304  :                 if (m_pFrondIndexCounts[i] > 0)

  000d0	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  000d6	66 83 3c 78 00	 cmp	 WORD PTR [eax+edi*2], 0
  000db	76 20		 jbe	 SHORT $LN2@CSpeedTree

; 305  :                     SAFE_RELEASE(m_pFrondIndexBuffers[i]);

  000dd	8b 86 c8 02 00
	00		 mov	 eax, DWORD PTR [esi+712]
  000e3	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  000e6	85 c9		 test	 ecx, ecx
  000e8	74 13		 je	 SHORT $LN2@CSpeedTree
  000ea	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ec	51		 push	 ecx
  000ed	ff 50 08	 call	 DWORD PTR [eax+8]
  000f0	8b 86 c8 02 00
	00		 mov	 eax, DWORD PTR [esi+712]
  000f6	c7 04 b8 00 00
	00 00		 mov	 DWORD PTR [eax+edi*4], 0
$LN2@CSpeedTree:

; 303  :             for (unsigned int i = 0; i < m_unNumFrondLods; ++i)

  000fd	47		 inc	 edi
  000fe	3b be c4 02 00
	00		 cmp	 edi, DWORD PTR [esi+708]
  00104	72 ca		 jb	 SHORT $LL4@CSpeedTree
$LN76@CSpeedTree:

; 306  :             SAFE_DELETE_ARRAY(m_pFrondIndexBuffers);

  00106	8b 86 c8 02 00
	00		 mov	 eax, DWORD PTR [esi+712]
  0010c	85 c0		 test	 eax, eax
  0010e	74 13		 je	 SHORT $LN17@CSpeedTree
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00116	83 c4 04	 add	 esp, 4
  00119	c7 86 c8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+712], 0
$LN17@CSpeedTree:

; 307  :             SAFE_DELETE_ARRAY(m_pFrondIndexCounts);

  00123	8b 86 cc 02 00
	00		 mov	 eax, DWORD PTR [esi+716]
  00129	85 c0		 test	 eax, eax
  0012b	74 13		 je	 SHORT $LN18@CSpeedTree
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00133	83 c4 04	 add	 esp, 4
  00136	c7 86 cc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+716], 0
$LN18@CSpeedTree:

; 308  :         }
; 309  : 
; 310  :         for (unsigned short i = 0; i < m_usNumLeafLods; ++i)

  00140	33 c0		 xor	 eax, eax
  00142	33 ff		 xor	 edi, edi
  00144	66 3b 86 d0 02
	00 00		 cmp	 ax, WORD PTR [esi+720]
  0014b	73 58		 jae	 SHORT $LN77@CSpeedTree
  0014d	0f 1f 00	 npad	 3
$LL7@CSpeedTree:

; 311  :         {
; 312  :             m_pSpeedTree->GetGeometry(*m_pGeometryCache, SpeedTree_LeafGeometry, -1, -1, i);

  00150	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  00156	57		 push	 edi
  00157	6a ff		 push	 -1
  00159	6a ff		 push	 -1
  0015b	6a 04		 push	 4
  0015d	ff b6 a8 02 00
	00		 push	 DWORD PTR [esi+680]
  00163	e8 00 00 00 00	 call	 ?GetGeometry@CSpeedTreeRT@@QAEXAAUSGeometry@1@KFFF@Z ; CSpeedTreeRT::GetGeometry

; 313  : 
; 314  :             if (m_pGeometryCache->m_sLeaves0.m_usLeafCount > 0)

  00168	8b 86 a8 02 00
	00		 mov	 eax, DWORD PTR [esi+680]
  0016e	66 83 b8 84 00
	00 00 00	 cmp	 WORD PTR [eax+132], 0
  00176	76 23		 jbe	 SHORT $LN5@CSpeedTree

; 315  :                 SAFE_RELEASE(m_pLeafVertexBuffer[i]);

  00178	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  0017e	0f b7 df	 movzx	 ebx, di
  00181	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]
  00184	85 c9		 test	 ecx, ecx
  00186	74 13		 je	 SHORT $LN5@CSpeedTree
  00188	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018a	51		 push	 ecx
  0018b	ff 50 08	 call	 DWORD PTR [eax+8]
  0018e	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  00194	c7 04 98 00 00
	00 00		 mov	 DWORD PTR [eax+ebx*4], 0
$LN5@CSpeedTree:

; 308  :         }
; 309  : 
; 310  :         for (unsigned short i = 0; i < m_usNumLeafLods; ++i)

  0019b	47		 inc	 edi
  0019c	66 3b be d0 02
	00 00		 cmp	 di, WORD PTR [esi+720]
  001a3	72 ab		 jb	 SHORT $LL7@CSpeedTree
$LN77@CSpeedTree:

; 316  :         }
; 317  : 
; 318  :         SAFE_DELETE_ARRAY(m_pLeavesUpdatedByCpu);

  001a5	8b 86 d8 02 00
	00		 mov	 eax, DWORD PTR [esi+728]
  001ab	85 c0		 test	 eax, eax
  001ad	74 13		 je	 SHORT $LN21@CSpeedTree
  001af	50		 push	 eax
  001b0	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001b5	83 c4 04	 add	 esp, 4
  001b8	c7 86 d8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+728], 0
$LN21@CSpeedTree:

; 319  :         SAFE_DELETE_ARRAY(m_pLeafVertexBuffer);

  001c2	8b 86 d4 02 00
	00		 mov	 eax, DWORD PTR [esi+724]
  001c8	85 c0		 test	 eax, eax
  001ca	74 13		 je	 SHORT $LN22@CSpeedTree
  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  001d2	83 c4 04	 add	 esp, 4
  001d5	c7 86 d4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+724], 0
$LN22@CSpeedTree:

; 320  : 
; 321  :         SAFE_DELETE(m_pTextureInfo);

  001df	8b be 90 02 00
	00		 mov	 edi, DWORD PTR [esi+656]
  001e5	85 ff		 test	 edi, edi
  001e7	74 1c		 je	 SHORT $LN23@CSpeedTree
  001e9	8b cf		 mov	 ecx, edi
  001eb	e8 00 00 00 00	 call	 ??1STextures@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::STextures::~STextures
  001f0	6a 1c		 push	 28			; 0000001cH
  001f2	57		 push	 edi
  001f3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001f8	83 c4 08	 add	 esp, 8
  001fb	c7 86 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+656], 0
$LN23@CSpeedTree:

; 322  :         SAFE_DELETE(m_pGeometryCache);

  00205	8b be a8 02 00
	00		 mov	 edi, DWORD PTR [esi+680]
  0020b	85 ff		 test	 edi, edi
  0020d	74 1f		 je	 SHORT $LN24@CSpeedTree
  0020f	8b cf		 mov	 ecx, edi
  00211	e8 00 00 00 00	 call	 ??1SGeometry@CSpeedTreeRT@@QAE@XZ ; CSpeedTreeRT::SGeometry::~SGeometry
  00216	68 20 01 00 00	 push	 288			; 00000120H
  0021b	57		 push	 edi
  0021c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00221	83 c4 08	 add	 esp, 8
  00224	c7 86 a8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+680], 0
$LN24@CSpeedTree:

; 323  :     }
; 324  :     SAFE_DELETE(m_pSpeedTree);

  0022e	8b be 8c 02 00
	00		 mov	 edi, DWORD PTR [esi+652]
  00234	85 ff		 test	 edi, edi
  00236	74 1a		 je	 SHORT $LN25@CSpeedTree
  00238	8b cf		 mov	 ecx, edi
  0023a	e8 00 00 00 00	 call	 ??1CSpeedTreeRT@@QAE@XZ	; CSpeedTreeRT::~CSpeedTreeRT
  0023f	57		 push	 edi
  00240	e8 00 00 00 00	 call	 ??3CSpeedTreeRT@@SAXPAX@Z ; CSpeedTreeRT::operator delete
  00245	83 c4 04	 add	 esp, 4
  00248	c7 86 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+652], 0
$LN25@CSpeedTree:

; 325  : 
; 326  :     --m_unNumWrappersActive;

  00252	ff 0d 00 00 00
	00		 dec	 DWORD PTR ?m_unNumWrappersActive@CSpeedTreeWrapper@@0IA ; CSpeedTreeWrapper::m_unNumWrappersActive

; 327  : 
; 328  : 
; 329  :     Clear();

  00258	8b ce		 mov	 ecx, esi
  0025a	e8 00 00 00 00	 call	 ?Clear@CGraphicObjectInstance@@QAEXXZ ; CGraphicObjectInstance::Clear

; 330  : }

  0025f	8d 8e 1c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1052]
  00265	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0026a	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  00270	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00275	8d 8e cc 03 00
	00		 lea	 ecx, DWORD PTR [esi+972]
  0027b	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00280	8b 86 98 02 00
	00		 mov	 eax, DWORD PTR [esi+664]
  00286	85 c0		 test	 eax, eax
  00288	74 4d		 je	 SHORT $LN36@CSpeedTree

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0028a	8b 8e a0 02 00
	00		 mov	 ecx, DWORD PTR [esi+672]
  00290	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00292	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00295	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0029b	72 12		 jb	 SHORT $LN52@CSpeedTree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0029d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002a0	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  002a3	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ab	77 43		 ja	 SHORT $LN49@CSpeedTree

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  002ad	8b c2		 mov	 eax, edx
$LN52@CSpeedTree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002af	51		 push	 ecx
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  002b6	c7 86 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+664], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002c0	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  002c3	c7 86 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+668], 0

; 2114 :             _Myend   = nullptr;

  002cd	c7 86 a0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+672], 0
$LN36@CSpeedTree:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 330  : }

  002d7	8b ce		 mov	 ecx, esi
  002d9	e8 00 00 00 00	 call	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
  002de	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002e8	59		 pop	 ecx
  002e9	5f		 pop	 edi
  002ea	5e		 pop	 esi
  002eb	5b		 pop	 ebx
  002ec	8b e5		 mov	 esp, ebp
  002ee	5d		 pop	 ebp
  002ef	c3		 ret	 0
$LN49@CSpeedTree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002f0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN83@CSpeedTree:
  002f5	cc		 int	 3
  002f6	cc		 int	 3
  002f7	cc		 int	 3
  002f8	cc		 int	 3
  002f9	cc		 int	 3
  002fa	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSpeedTreeWrapper@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSpeedTreeWrapper@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSpeedTreeWrapper@@UAE@XZ ENDP			; CSpeedTreeWrapper::~CSpeedTreeWrapper
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ??0CSpeedTreeWrapper@@QAE@XZ
_TEXT	SEGMENT
$T2 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSpeedTreeWrapper@@QAE@XZ PROC			; CSpeedTreeWrapper::CSpeedTreeWrapper, COMDAT
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSpeedTreeWrapper@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	e8 00 00 00 00	 call	 ??0CGraphicObjectInstance@@QAE@XZ ; CGraphicObjectInstance::CGraphicObjectInstance

; 21   :     m_pSpeedTree(new CSpeedTreeRT),

  00030	68 9c 00 00 00	 push	 156			; 0000009cH
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSpeedTreeWrapper@@6B@
  00042	e8 00 00 00 00	 call	 ??2CSpeedTreeRT@@SAPAXI@Z ; CSpeedTreeRT::operator new
  00047	83 c4 04	 add	 esp, 4
  0004a	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0004d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00051	85 c0		 test	 eax, eax
  00053	74 09		 je	 SHORT $LN3@CSpeedTree
  00055	8b c8		 mov	 ecx, eax
  00057	e8 00 00 00 00	 call	 ??0CSpeedTreeRT@@QAE@XZ	; CSpeedTreeRT::CSpeedTreeRT
  0005c	eb 02		 jmp	 SHORT $LN4@CSpeedTree
$LN3@CSpeedTree:
  0005e	33 c0		 xor	 eax, eax
$LN4@CSpeedTree:
  00060	89 86 8c 02 00
	00		 mov	 DWORD PTR [esi+652], eax

; 26   :     m_unNumFrondLods(0),
; 27   :     m_pBranchIndexCounts(NULL),
; 28   :     m_pBranchIndexBuffer(NULL),
; 29   :     m_pBranchVertexBuffer(NULL),
; 30   :     m_pFrondIndexCounts(NULL),
; 31   :     m_pFrondIndexBuffers(NULL),
; 32   :     m_pFrondVertexBuffer(NULL),
; 33   :     m_pLeafVertexBuffer(NULL),
; 34   :     m_pLeavesUpdatedByCpu(NULL),
; 35   :     m_unBranchVertexCount(0),
; 36   :     m_unFrondVertexCount(0),
; 37   :     m_pTextureInfo(NULL)

  00066	c7 86 90 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+656], 0

; 22   :     m_bIsInstance(false),

  00070	c6 86 94 02 00
	00 00		 mov	 BYTE PTR [esi+660], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00077	c7 86 98 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+664], 0
  00081	c7 86 9c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+668], 0
  0008b	c7 86 a0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+672], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 25   :     m_usNumLeafLods(0),

  00095	33 c0		 xor	 eax, eax
  00097	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 38   : {

  0009b	8d 8e 00 03 00
	00		 lea	 ecx, DWORD PTR [esi+768]
  000a1	c7 86 a4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+676], 0
  000ab	c7 86 a8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+680], 0
  000b5	c7 86 ac 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+684], 0
  000bf	c7 86 b0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+688], 0
  000c9	c7 86 b4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+692], 0
  000d3	c7 86 b8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+696], 0
  000dd	c7 86 bc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+700], 0
  000e7	c7 86 c0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+704], 0
  000f1	c7 86 c4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+708], 0
  000fb	c7 86 c8 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+712], 0
  00105	c7 86 cc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+716], 0
  0010f	66 89 86 d0 02
	00 00		 mov	 WORD PTR [esi+720], ax
  00116	89 86 d4 02 00
	00		 mov	 DWORD PTR [esi+724], eax
  0011c	89 86 d8 02 00
	00		 mov	 DWORD PTR [esi+728], eax
  00122	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  00127	8d 8e 44 03 00
	00		 lea	 ecx, DWORD PTR [esi+836]
  0012d	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  00132	8d 8e 88 03 00
	00		 lea	 ecx, DWORD PTR [esi+904]
  00138	e8 00 00 00 00	 call	 ??0CSpeedTreeMaterial@@QAE@XZ ; CSpeedTreeMaterial::CSpeedTreeMaterial
  0013d	8d 8e cc 03 00
	00		 lea	 ecx, DWORD PTR [esi+972]
  00143	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  00148	8d 8e f4 03 00
	00		 lea	 ecx, DWORD PTR [esi+1012]
  0014e	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00152	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  00157	8d 8e 1c 04 00
	00		 lea	 ecx, DWORD PTR [esi+1052]
  0015d	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00161	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 39   :     m_afPos[0] = m_afPos[1] = m_afPos[2] = 0.0f;

  00166	c7 86 e4 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+740], 0

; 40   :     m_unNumWrappersActive++;
; 41   : }

  00170	8b c6		 mov	 eax, esi
  00172	c7 86 e0 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+736], 0
  0017c	c7 86 dc 02 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+732], 0
  00186	ff 05 00 00 00
	00		 inc	 DWORD PTR ?m_unNumWrappersActive@CSpeedTreeWrapper@@0IA ; CSpeedTreeWrapper::m_unNumWrappersActive
  0018c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00196	59		 pop	 ecx
  00197	5e		 pop	 esi
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicObjectInstance@@UAE@XZ ; CGraphicObjectInstance::~CGraphicObjectInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$1:
  00008	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3CSpeedTreeRT@@SAXPAX@Z ; CSpeedTreeRT::operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 98 02 00
	00		 add	 ecx, 664		; 00000298H
  0001c	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCSpeedTreeWrapper@@V?$allocator@PAVCSpeedTreeWrapper@@@std@@@std@@QAE@XZ ; std::vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >::~vector<CSpeedTreeWrapper *,std::allocator<CSpeedTreeWrapper *> >
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 cc 03 00
	00		 add	 ecx, 972		; 000003ccH
  0002a	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
__unwindfunclet$??0CSpeedTreeWrapper@@QAE@XZ$4:
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	81 c1 f4 03 00
	00		 add	 ecx, 1012		; 000003f4H
  00038	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
__ehhandler$??0CSpeedTreeWrapper@@QAE@XZ:
  00042	90		 npad	 1
  00043	90		 npad	 1
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSpeedTreeWrapper@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSpeedTreeWrapper@@QAE@XZ ENDP			; CSpeedTreeWrapper::CSpeedTreeWrapper
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnRenderShadow, COMDAT
; _this$ = ecx

; 49   :     virtual void				OnRenderShadow() {}

  00000	c2 00 00	 ret	 0
?OnRenderShadow@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnRenderShadow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ PROC	; CSpeedTreeWrapper::OnRenderToShadowMap, COMDAT
; _this$ = ecx

; 48   :     virtual void				OnRenderToShadowMap() {}

  00000	c2 00 00	 ret	 0
?OnRenderToShadowMap@CSpeedTreeWrapper@@UAEXXZ ENDP	; CSpeedTreeWrapper::OnRenderToShadowMap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnBlendRender, COMDAT
; _this$ = ecx

; 47   :     virtual void				OnBlendRender() {}

  00000	c2 00 00	 ret	 0
?OnBlendRender@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnBlendRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
_dwFogEnable$1$ = -12					; size = 4
_dwLighting$1$ = -8					; size = 4
_dwAlphaBlendEnable$1$ = -4				; size = 4
?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ PROC	; CSpeedTreeWrapper::OnRenderPCBlocker, COMDAT
; _this$ = ecx

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 45   :     STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00009	6a 02		 push	 2
  0000b	6a 02		 push	 2
  0000d	8b f9		 mov	 edi, ecx
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 00		 push	 0
  00017	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 46   :     STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00022	6a 00		 push	 0
  00024	6a 03		 push	 3
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 47   :     STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00033	6a 04		 push	 4
  00035	6a 01		 push	 1
  00037	6a 00		 push	 0
  00039	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 48   :     STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0003e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00044	6a 02		 push	 2
  00046	6a 05		 push	 5
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 49   :     STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00055	6a 00		 push	 0
  00057	6a 06		 push	 6
  00059	6a 00		 push	 0
  0005b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 50   :     STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00066	6a 04		 push	 4
  00068	6a 04		 push	 4
  0006a	6a 00		 push	 0
  0006c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 51   :     STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00071	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00077	6a 02		 push	 2
  00079	6a 05		 push	 5
  0007b	6a 01		 push	 1
  0007d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 52   :     STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00088	6a 01		 push	 1
  0008a	6a 06		 push	 6
  0008c	6a 01		 push	 1
  0008e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 53   :     STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

  00093	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00099	6a 04		 push	 4
  0009b	6a 04		 push	 4
  0009d	6a 01		 push	 1
  0009f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 54   : 
; 55   :     DWORD dwLighting = STATEMANAGER.GetRenderState(D3DRS_LIGHTING);

  000a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000aa	68 89 00 00 00	 push	 137			; 00000089H
  000af	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 56   :     DWORD dwFogEnable = STATEMANAGER.GetRenderState(D3DRS_FOGENABLE);

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ba	6a 1c		 push	 28			; 0000001cH
  000bc	89 45 f8	 mov	 DWORD PTR _dwLighting$1$[ebp], eax
  000bf	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 57   :     DWORD dwAlphaBlendEnable = STATEMANAGER.GetRenderState(D3DRS_ALPHABLENDENABLE);

  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ca	6a 1b		 push	 27			; 0000001bH
  000cc	89 45 f4	 mov	 DWORD PTR _dwFogEnable$1$[ebp], eax
  000cf	e8 00 00 00 00	 call	 ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState

; 58   :     STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000da	6a 00		 push	 0
  000dc	68 89 00 00 00	 push	 137			; 00000089H
  000e1	89 45 fc	 mov	 DWORD PTR _dwAlphaBlendEnable$1$[ebp], eax
  000e4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 59   :     STATEMANAGER.SaveRenderState(D3DRS_COLORVERTEX, TRUE);

  000e9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ef	6a 01		 push	 1
  000f1	68 8d 00 00 00	 push	 141			; 0000008dH
  000f6	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 60   :     STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  000fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00101	6a 01		 push	 1
  00103	6a 1b		 push	 27			; 0000001bH
  00105	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 61   :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  0010a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00110	6a 01		 push	 1
  00112	6a 0f		 push	 15			; 0000000fH
  00114	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 62   :     STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  00119	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011f	6a 05		 push	 5
  00121	6a 19		 push	 25			; 00000019H
  00123	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 63   :     STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012e	6a 02		 push	 2
  00130	6a 16		 push	 22			; 00000016H
  00132	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 64   :     STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, FALSE);

  00137	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013d	6a 00		 push	 0
  0013f	6a 1c		 push	 28			; 0000001cH
  00141	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 65   :     STATEMANAGER.SetFVF(D3DFVF_SPEEDTREE_BRANCH_VERTEX);

  00146	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  0014c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00152	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 66   :     STATEMANAGER.SetVertexShader(ms_lpBranchVertexShader);

  00157	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpBranchVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A ; CSpeedTreeWrapper::ms_lpBranchVertexShader
  0015d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00163	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 67   :     {
; 68   :         LPDIRECT3DTEXTURE9 lpd3dTexture;
; 69   :         if ((lpd3dTexture = m_BranchImageInstance.GetTextureReference().GetD3DTexture()))

  00168	8d 8f cc 03 00
	00		 lea	 ecx, DWORD PTR [edi+972]
  0016e	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00173	8b c8		 mov	 ecx, eax
  00175	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  0017a	85 c0		 test	 eax, eax
  0017c	74 0e		 je	 SHORT $LN2@OnRenderPC

; 70   :             STATEMANAGER.SetTexture(0, lpd3dTexture);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00184	50		 push	 eax
  00185	6a 00		 push	 0
  00187	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
$LN2@OnRenderPC:

; 71   : 
; 72   :         if (m_pGeometryCache->m_sBranches.m_usVertexCount > 0)

  0018c	8b 87 a8 02 00
	00		 mov	 eax, DWORD PTR [edi+680]
  00192	66 83 78 10 00	 cmp	 WORD PTR [eax+16], 0
  00197	76 2f		 jbe	 SHORT $LN3@OnRenderPC

; 73   :         {
; 74   :             STATEMANAGER.SetStreamSource(0, m_pBranchVertexBuffer, sizeof(SFVFBranchVertex));

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019f	6a 20		 push	 32			; 00000020H
  001a1	ff b7 ac 02 00
	00		 push	 DWORD PTR [edi+684]
  001a7	6a 00		 push	 0
  001a9	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource

; 75   :             STATEMANAGER.SetIndices(m_pBranchIndexBuffer, 0);

  001ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b4	6a 00		 push	 0
  001b6	ff b7 b4 02 00
	00		 push	 DWORD PTR [edi+692]
  001bc	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices

; 76   :             RenderBranches();

  001c1	8b cf		 mov	 ecx, edi
  001c3	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches
$LN3@OnRenderPC:

; 77   :         }
; 78   :     }
; 79   : 
; 80   :     STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  001c8	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ce	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  001d4	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  001d9	8b c8		 mov	 ecx, eax
  001db	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  001e0	50		 push	 eax
  001e1	6a 00		 push	 0
  001e3	8b ce		 mov	 ecx, esi
  001e5	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 81   :     STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  001ea	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f0	6a 01		 push	 1
  001f2	6a 16		 push	 22			; 00000016H
  001f4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 82   :     {
; 83   :         if (m_pGeometryCache->m_sFronds.m_usVertexCount > 0 &&
; 84   :             m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel > -1 &&

  001f9	8b 8f a8 02 00
	00		 mov	 ecx, DWORD PTR [edi+680]
  001ff	66 83 79 4c 00	 cmp	 WORD PTR [ecx+76], 0
  00204	0f 86 81 00 00
	00		 jbe	 $LN4@OnRenderPC
  0020a	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]
  0020d	83 f9 ff	 cmp	 ecx, -1
  00210	7e 79		 jle	 SHORT $LN4@OnRenderPC
  00212	8b 87 cc 02 00
	00		 mov	 eax, DWORD PTR [edi+716]
  00218	66 83 3c 48 00	 cmp	 WORD PTR [eax+ecx*2], 0
  0021d	76 6c		 jbe	 SHORT $LN4@OnRenderPC

; 85   :             m_pFrondIndexCounts[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel] > 0)
; 86   :         {
; 87   :             if (!m_CompositeImageInstance.IsEmpty())

  0021f	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  00225	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0022a	84 c0		 test	 al, al
  0022c	75 22		 jne	 SHORT $LN5@OnRenderPC

; 88   :                 STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  0022e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00234	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  0023a	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0023f	8b c8		 mov	 ecx, eax
  00241	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00246	50		 push	 eax
  00247	6a 00		 push	 0
  00249	8b ce		 mov	 ecx, esi
  0024b	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
$LN5@OnRenderPC:

; 89   : 
; 90   :             STATEMANAGER.SetStreamSource(0, m_pFrondVertexBuffer, sizeof(SFVFBranchVertex));

  00250	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00256	6a 20		 push	 32			; 00000020H
  00258	ff b7 bc 02 00
	00		 push	 DWORD PTR [edi+700]
  0025e	6a 00		 push	 0
  00260	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource

; 91   :             STATEMANAGER.SetIndices(m_pFrondIndexBuffers[m_pGeometryCache->m_sFronds.m_nDiscreteLodLevel], 0);

  00265	8b 87 a8 02 00
	00		 mov	 eax, DWORD PTR [edi+680]
  0026b	6a 00		 push	 0
  0026d	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  00270	8b 87 c8 02 00
	00		 mov	 eax, DWORD PTR [edi+712]
  00276	ff 34 88	 push	 DWORD PTR [eax+ecx*4]
  00279	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0027f	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices

; 92   :             RenderFronds();

  00284	8b cf		 mov	 ecx, edi
  00286	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds
$LN4@OnRenderPC:

; 93   :         }
; 94   :     }
; 95   :     {
; 96   :         STATEMANAGER.SetFVF(D3DFVF_SPEEDTREE_LEAF_VERTEX);

  0028b	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA
  00291	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00297	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 97   :         STATEMANAGER.SetVertexShader(ms_lpLeafVertexShader);

  0029c	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpLeafVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A ; CSpeedTreeWrapper::ms_lpLeafVertexShader
  002a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a8	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 98   : 
; 99   :         if (!m_CompositeImageInstance.IsEmpty())

  002ad	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  002b3	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  002b8	84 c0		 test	 al, al
  002ba	75 22		 jne	 SHORT $LN6@OnRenderPC

; 100  :             STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  002bc	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c2	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  002c8	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  002cd	8b c8		 mov	 ecx, eax
  002cf	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  002d4	50		 push	 eax
  002d5	6a 00		 push	 0
  002d7	8b ce		 mov	 ecx, esi
  002d9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
$LN6@OnRenderPC:

; 101  : 
; 102  :         RenderLeaves();

  002de	8b cf		 mov	 ecx, edi
  002e0	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves

; 103  :         EndLeafForTreeType();
; 104  :     }
; 105  : 
; 106  :     STATEMANAGER.SetVertexShader(NULL);

  002e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002eb	6a 00		 push	 0
  002ed	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 107  :     STATEMANAGER.SetFVF(D3DFVF_SPEEDTREE_BILLBOARD_VERTEX);

  002f2	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BILLBOARD_VERTEX@@3KA
  002f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002fe	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 108  :     STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  00303	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00309	6a 00		 push	 0
  0030b	68 89 00 00 00	 push	 137			; 00000089H
  00310	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 109  :     STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00315	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0031b	6a 00		 push	 0
  0031d	68 8d 00 00 00	 push	 141			; 0000008dH
  00322	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 110  :     RenderBillboards();

  00327	8b cf		 mov	 ecx, edi
  00329	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards

; 111  : 
; 112  :     STATEMANAGER.RestoreRenderState(D3DRS_COLORVERTEX);

  0032e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00334	68 8d 00 00 00	 push	 141			; 0000008dH
  00339	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 113  :     STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  0033e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00344	6a 16		 push	 22			; 00000016H
  00346	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 114  :     STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  0034b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00351	6a 0f		 push	 15			; 0000000fH
  00353	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 115  :     STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00358	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0035e	6a 19		 push	 25			; 00000019H
  00360	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 116  :     STATEMANAGER.SetRenderState(D3DRS_ALPHABLENDENABLE, dwAlphaBlendEnable);

  00365	ff 75 fc	 push	 DWORD PTR _dwAlphaBlendEnable$1$[ebp]
  00368	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0036e	6a 1b		 push	 27			; 0000001bH
  00370	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 117  :     STATEMANAGER.SetRenderState(D3DRS_LIGHTING, dwLighting);

  00375	ff 75 f8	 push	 DWORD PTR _dwLighting$1$[ebp]
  00378	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0037e	68 89 00 00 00	 push	 137			; 00000089H
  00383	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 118  :     STATEMANAGER.SetRenderState(D3DRS_FOGENABLE, dwFogEnable);

  00388	ff 75 f4	 push	 DWORD PTR _dwFogEnable$1$[ebp]
  0038b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00391	6a 1c		 push	 28			; 0000001cH
  00393	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 119  : 
; 120  :     STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  00398	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0039e	6a 02		 push	 2
  003a0	6a 04		 push	 4
  003a2	6a 01		 push	 1
  003a4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  003a9	5f		 pop	 edi
  003aa	5e		 pop	 esi
  003ab	5b		 pop	 ebx

; 121  : }

  003ac	8b e5		 mov	 esp, ebp
  003ae	5d		 pop	 ebp
  003af	c3		 ret	 0
?OnRenderPCBlocker@CSpeedTreeWrapper@@UAEXXZ ENDP	; CSpeedTreeWrapper::OnRenderPCBlocker
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnRender@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
?OnRender@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::OnRender, COMDAT
; _this$ = ecx

; 124  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 125  :     STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00002	6a 02		 push	 2
  00004	6a 02		 push	 2
  00006	8b f9		 mov	 edi, ecx
  00008	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000e	6a 00		 push	 0
  00010	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 126  :     STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001b	6a 00		 push	 0
  0001d	6a 03		 push	 3
  0001f	6a 00		 push	 0
  00021	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 127  :     STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002c	6a 04		 push	 4
  0002e	6a 01		 push	 1
  00030	6a 00		 push	 0
  00032	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 128  :     STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00037	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003d	6a 02		 push	 2
  0003f	6a 05		 push	 5
  00041	6a 00		 push	 0
  00043	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 129  :     STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004e	6a 00		 push	 0
  00050	6a 06		 push	 6
  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 130  :     STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

  00059	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005f	6a 04		 push	 4
  00061	6a 04		 push	 4
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 131  :     STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_MODULATE);

  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00070	6a 04		 push	 4
  00072	6a 01		 push	 1
  00074	6a 01		 push	 1
  00076	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 132  :     STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00081	6a 02		 push	 2
  00083	6a 02		 push	 2
  00085	6a 01		 push	 1
  00087	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 133  :     STATEMANAGER.SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_CURRENT);

  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00092	6a 01		 push	 1
  00094	6a 03		 push	 3
  00096	6a 01		 push	 1
  00098	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 134  :     STATEMANAGER.SetSamplerState(1, D3DSAMP_ADDRESSU, D3DTADDRESS_WRAP);

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a3	6a 01		 push	 1
  000a5	6a 01		 push	 1
  000a7	6a 01		 push	 1
  000a9	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 135  :     STATEMANAGER.SetSamplerState(1, D3DSAMP_ADDRESSV, D3DTADDRESS_WRAP);

  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b4	6a 01		 push	 1
  000b6	6a 02		 push	 2
  000b8	6a 01		 push	 1
  000ba	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 136  :     STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c5	6a 00		 push	 0
  000c7	68 89 00 00 00	 push	 137			; 00000089H
  000cc	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 137  :     STATEMANAGER.SaveRenderState(D3DRS_COLORVERTEX, TRUE);

  000d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000d7	6a 01		 push	 1
  000d9	68 8d 00 00 00	 push	 141			; 0000008dH
  000de	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 138  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, TRUE);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e9	6a 01		 push	 1
  000eb	6a 0f		 push	 15			; 0000000fH
  000ed	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 139  :     STATEMANAGER.SaveRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATER);

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f8	6a 05		 push	 5
  000fa	6a 19		 push	 25			; 00000019H
  000fc	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 140  :     STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  00101	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00107	6a 02		 push	 2
  00109	6a 16		 push	 22			; 00000016H
  0010b	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 141  :     STATEMANAGER.SaveRenderState(D3DRS_FOGENABLE, FALSE);

  00110	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00116	6a 00		 push	 0
  00118	6a 1c		 push	 28			; 0000001cH
  0011a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 142  :     STATEMANAGER.SetFVF(D3DFVF_SPEEDTREE_BRANCH_VERTEX);

  0011f	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BRANCH_VERTEX@@3KA
  00125	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012b	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 143  :     STATEMANAGER.SetVertexShader(ms_lpBranchVertexShader);

  00130	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpBranchVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A ; CSpeedTreeWrapper::ms_lpBranchVertexShader
  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013c	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 144  : 
; 145  :     SetupBranchForTreeType();

  00141	8b cf		 mov	 ecx, edi
  00143	e8 00 00 00 00	 call	 ?SetupBranchForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupBranchForTreeType

; 146  :     RenderBranches();

  00148	8b cf		 mov	 ecx, edi
  0014a	e8 00 00 00 00	 call	 ?RenderBranches@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBranches

; 147  : 
; 148  :     STATEMANAGER.SetTexture(0, m_CompositeImageInstance.GetTextureReference().GetD3DTexture());

  0014f	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00155	8d 8f 1c 04 00
	00		 lea	 ecx, DWORD PTR [edi+1052]
  0015b	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  00160	8b c8		 mov	 ecx, eax
  00162	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00167	50		 push	 eax
  00168	6a 00		 push	 0
  0016a	8b ce		 mov	 ecx, esi
  0016c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 149  :     STATEMANAGER.SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

  00171	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00177	6a 01		 push	 1
  00179	6a 16		 push	 22			; 00000016H
  0017b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 150  : 
; 151  :     SetupFrondForTreeType();

  00180	8b cf		 mov	 ecx, edi
  00182	e8 00 00 00 00	 call	 ?SetupFrondForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupFrondForTreeType

; 152  :     RenderFronds();

  00187	8b cf		 mov	 ecx, edi
  00189	e8 00 00 00 00	 call	 ?RenderFronds@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderFronds

; 153  : 
; 154  :     STATEMANAGER.SetFVF(D3DFVF_SPEEDTREE_LEAF_VERTEX);

  0018e	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_LEAF_VERTEX@@3KA
  00194	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019a	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 155  :     STATEMANAGER.SetVertexShader(ms_lpLeafVertexShader);

  0019f	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpLeafVertexShader@CSpeedTreeWrapper@@0PAUIDirect3DVertexShader9@@A ; CSpeedTreeWrapper::ms_lpLeafVertexShader
  001a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ab	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 156  : 
; 157  :     SetupLeafForTreeType();

  001b0	8b cf		 mov	 ecx, edi
  001b2	e8 00 00 00 00	 call	 ?SetupLeafForTreeType@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::SetupLeafForTreeType

; 158  :     RenderLeaves();

  001b7	8b cf		 mov	 ecx, edi
  001b9	e8 00 00 00 00	 call	 ?RenderLeaves@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderLeaves

; 159  :     EndLeafForTreeType();
; 160  : 
; 161  :     STATEMANAGER.SetVertexShader(NULL);

  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c4	6a 00		 push	 0
  001c6	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 162  :     STATEMANAGER.SetFVF(D3DFVF_SPEEDTREE_BILLBOARD_VERTEX);

  001cb	ff 35 00 00 00
	00		 push	 DWORD PTR ?D3DFVF_SPEEDTREE_BILLBOARD_VERTEX@@3KA
  001d1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d7	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 163  :     STATEMANAGER.SetRenderState(D3DRS_LIGHTING, FALSE);

  001dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e2	6a 00		 push	 0
  001e4	68 89 00 00 00	 push	 137			; 00000089H
  001e9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 164  :     STATEMANAGER.SetRenderState(D3DRS_COLORVERTEX, FALSE);

  001ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f4	6a 00		 push	 0
  001f6	68 8d 00 00 00	 push	 141			; 0000008dH
  001fb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 165  :     RenderBillboards();

  00200	8b cf		 mov	 ecx, edi
  00202	e8 00 00 00 00	 call	 ?RenderBillboards@CSpeedTreeWrapper@@QBEXXZ ; CSpeedTreeWrapper::RenderBillboards

; 166  : 
; 167  :     STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00207	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020d	68 89 00 00 00	 push	 137			; 00000089H
  00212	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 168  :     STATEMANAGER.RestoreRenderState(D3DRS_COLORVERTEX);

  00217	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0021d	68 8d 00 00 00	 push	 141			; 0000008dH
  00222	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 169  :     STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE);

  00227	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0022d	6a 0f		 push	 15			; 0000000fH
  0022f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 170  :     STATEMANAGER.RestoreRenderState(D3DRS_ALPHAFUNC);

  00234	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0023a	6a 19		 push	 25			; 00000019H
  0023c	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 171  :     STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE);

  00241	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00247	6a 16		 push	 22			; 00000016H
  00249	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 172  :     STATEMANAGER.RestoreRenderState(D3DRS_FOGENABLE);

  0024e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00254	6a 1c		 push	 28			; 0000001cH
  00256	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
  0025b	5f		 pop	 edi
  0025c	5e		 pop	 esi

; 173  : }

  0025d	c3		 ret	 0
?OnRender@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ
_TEXT	SEGMENT
$T1 = -24						; size = 16
$T2 = -24						; size = 16
$T3 = -24						; size = 16
$T4 = -24						; size = 16
$T5 = -24						; size = 16
$T6 = -24						; size = 16
$T7 = -24						; size = 16
$T8 = -24						; size = 16
_c_rmatTransform$1$ = -8				; size = 4
_i$1$ = -4						; size = 4
?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ PROC		; CSpeedTreeWrapper::CalculateBBox, COMDAT
; _this$ = ecx

; 234  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 239  :     fZ = m_afBoundingBox[5] - m_afBoundingBox[2];
; 240  : 
; 241  :     m_v3BBoxMin.x = -fX / 2.0f;

  00006	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 541  :     z = fz;

  00011	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+8], 0

; 542  :     w = fw;

  00018	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T8[ebp+12], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 234  : {

  0001f	57		 push	 edi

; 235  :     float fX, fY, fZ;
; 236  : 
; 237  :     fX = m_afBoundingBox[3] - m_afBoundingBox[0];

  00020	f3 0f 10 ae f4
	02 00 00	 movss	 xmm5, DWORD PTR [esi+756]

; 238  :     fY = m_afBoundingBox[4] - m_afBoundingBox[1];

  00028	f3 0f 10 a6 f8
	02 00 00	 movss	 xmm4, DWORD PTR [esi+760]
  00030	f3 0f 5c ae e8
	02 00 00	 subss	 xmm5, DWORD PTR [esi+744]
  00038	f3 0f 5c a6 ec
	02 00 00	 subss	 xmm4, DWORD PTR [esi+748]

; 242  :     m_v3BBoxMin.y = -fY / 2.0f;
; 243  :     m_v3BBoxMin.z = 0.0f;

  00040	c7 86 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+336], 0
  0004a	0f 28 d5	 movaps	 xmm2, xmm5

; 244  :     m_v3BBoxMax.x = fX / 2.0f;

  0004d	f3 0f 59 e9	 mulss	 xmm5, xmm1
  00051	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  00058	0f 28 dc	 movaps	 xmm3, xmm4
  0005b	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
  00062	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00066	f3 0f 59 d9	 mulss	 xmm3, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 539  :     x = fx;

  0006a	f3 0f 11 55 e8	 movss	 DWORD PTR $T8[ebp], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 245  :     m_v3BBoxMax.y = fY / 2.0f;

  0006f	f3 0f 59 e1	 mulss	 xmm4, xmm1
  00073	f3 0f 10 8e fc
	02 00 00	 movss	 xmm1, DWORD PTR [esi+764]
  0007b	f3 0f 5c 8e f0
	02 00 00	 subss	 xmm1, DWORD PTR [esi+752]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 540  :     y = fy;

  00083	f3 0f 11 5d ec	 movss	 DWORD PTR $T8[ebp+4], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 248  :     m_v4TBBox[0] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  00088	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T8[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 541  :     z = fz;

  0008c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+8], 0
  00093	f3 0f 11 55 e8	 movss	 DWORD PTR $T7[ebp], xmm2
  00098	f3 0f 11 65 ec	 movss	 DWORD PTR $T7[ebp+4], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 248  :     m_v4TBBox[0] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  0009d	0f 11 86 b0 00
	00 00		 movups	 XMMWORD PTR [esi+176], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  000a4	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T7[ebp+12], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 249  :     m_v4TBBox[1] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000ab	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T7[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 541  :     z = fz;

  000af	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T6[ebp+8], 0
  000b6	f3 0f 11 6d e8	 movss	 DWORD PTR $T6[ebp], xmm5
  000bb	f3 0f 11 5d ec	 movss	 DWORD PTR $T6[ebp+4], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 249  :     m_v4TBBox[1] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000c0	0f 11 86 c0 00
	00 00		 movups	 XMMWORD PTR [esi+192], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  000c7	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T6[ebp+12], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 250  :     m_v4TBBox[2] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  000ce	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 541  :     z = fz;

  000d2	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0
  000d9	f3 0f 11 6d e8	 movss	 DWORD PTR $T5[ebp], xmm5
  000de	f3 0f 11 65 ec	 movss	 DWORD PTR $T5[ebp+4], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 250  :     m_v4TBBox[2] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMin.z, 1.0f);

  000e3	0f 11 86 d0 00
	00 00		 movups	 XMMWORD PTR [esi+208], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  000ea	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T5[ebp+12], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 251  :     m_v4TBBox[3] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  000f1	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  000f5	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T4[ebp+12], 1065353216 ; 3f800000H
  000fc	f3 0f 11 55 e8	 movss	 DWORD PTR $T4[ebp], xmm2
  00101	f3 0f 11 5d ec	 movss	 DWORD PTR $T4[ebp+4], xmm3
  00106	f3 0f 11 4d f0	 movss	 DWORD PTR $T4[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 251  :     m_v4TBBox[3] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMin.z, 1.0f);

  0010b	0f 11 86 e0 00
	00 00		 movups	 XMMWORD PTR [esi+224], xmm0

; 252  :     m_v4TBBox[4] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00112	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  00116	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T3[ebp+12], 1065353216 ; 3f800000H
  0011d	f3 0f 11 55 e8	 movss	 DWORD PTR $T3[ebp], xmm2
  00122	f3 0f 11 65 ec	 movss	 DWORD PTR $T3[ebp+4], xmm4
  00127	f3 0f 11 4d f0	 movss	 DWORD PTR $T3[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 252  :     m_v4TBBox[4] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  0012c	0f 11 86 f0 00
	00 00		 movups	 XMMWORD PTR [esi+240], xmm0

; 253  :     m_v4TBBox[5] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  00133	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  00137	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T2[ebp+12], 1065353216 ; 3f800000H
  0013e	f3 0f 11 6d e8	 movss	 DWORD PTR $T2[ebp], xmm5
  00143	f3 0f 11 5d ec	 movss	 DWORD PTR $T2[ebp+4], xmm3
  00148	f3 0f 11 4d f0	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 253  :     m_v4TBBox[5] = D3DXVECTOR4(m_v3BBoxMin.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  0014d	0f 11 86 00 01
	00 00		 movups	 XMMWORD PTR [esi+256], xmm0

; 254  :     m_v4TBBox[6] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00154	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 542  :     w = fw;

  00158	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR $T1[ebp+12], 1065353216 ; 3f800000H
  0015f	f3 0f 11 6d e8	 movss	 DWORD PTR $T1[ebp], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 254  :     m_v4TBBox[6] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMin.y, m_v3BBoxMax.z, 1.0f);

  00164	0f 11 86 10 01
	00 00		 movups	 XMMWORD PTR [esi+272], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 540  :     y = fy;

  0016b	f3 0f 11 65 ec	 movss	 DWORD PTR $T1[ebp+4], xmm4

; 541  :     z = fz;

  00170	f3 0f 11 4d f0	 movss	 DWORD PTR $T1[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 255  :     m_v4TBBox[7] = D3DXVECTOR4(m_v3BBoxMax.x, m_v3BBoxMax.y, m_v3BBoxMax.z, 1.0f);

  00175	0f 10 45 e8	 movups	 xmm0, XMMWORD PTR $T1[ebp]
  00179	f3 0f 11 96 48
	01 00 00	 movss	 DWORD PTR [esi+328], xmm2
  00181	f3 0f 11 9e 4c
	01 00 00	 movss	 DWORD PTR [esi+332], xmm3
  00189	f3 0f 11 ae 54
	01 00 00	 movss	 DWORD PTR [esi+340], xmm5
  00191	f3 0f 11 a6 58
	01 00 00	 movss	 DWORD PTR [esi+344], xmm4
  00199	f3 0f 11 8e 5c
	01 00 00	 movss	 DWORD PTR [esi+348], xmm1
  001a1	0f 11 86 20 01
	00 00		 movups	 XMMWORD PTR [esi+288], xmm0

; 256  : 
; 257  :     const D3DXMATRIX& c_rmatTransform = GetTransform();

  001a8	e8 00 00 00 00	 call	 ?GetTransform@CGraphicObjectInstance@@QAEAAUD3DXMATRIX@@XZ ; CGraphicObjectInstance::GetTransform
  001ad	8b d0		 mov	 edx, eax
  001af	33 c9		 xor	 ecx, ecx
  001b1	89 55 f8	 mov	 DWORD PTR _c_rmatTransform$1$[ebp], edx
$LN34@CalculateB:

; 260  :     {
; 261  :         D3DXVec4Transform(&m_v4TBBox[i], &m_v4TBBox[i], &c_rmatTransform);

  001b4	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  001b7	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@CalculateB:
  001c0	8b f9		 mov	 edi, ecx
  001c2	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
  001c8	c1 e7 04	 shl	 edi, 4
  001cb	03 c7		 add	 eax, edi
  001cd	52		 push	 edx
  001ce	50		 push	 eax
  001cf	50		 push	 eax
  001d0	e8 00 00 00 00	 call	 _D3DXVec4Transform@12
  001d5	8b 4d fc	 mov	 ecx, DWORD PTR _i$1$[ebp]
  001d8	8d 51 0b	 lea	 edx, DWORD PTR [ecx+11]
  001db	03 d2		 add	 edx, edx

; 262  :         if (0 == i)

  001dd	85 c9		 test	 ecx, ecx
  001df	75 4b		 jne	 SHORT $LN5@CalculateB

; 263  :         {
; 264  :             m_v3TBBoxMin.x = m_v4TBBox[i].x;

  001e1	8b 86 b0 00 00
	00		 mov	 eax, DWORD PTR [esi+176]

; 265  :             m_v3TBBoxMin.y = m_v4TBBox[i].y;
; 266  :             m_v3TBBoxMin.z = m_v4TBBox[i].z;
; 267  :             m_v3TBBoxMax.x = m_v4TBBox[i].x;
; 268  :             m_v3TBBoxMax.y = m_v4TBBox[i].y;
; 269  :             m_v3TBBoxMax.z = m_v4TBBox[i].z;

  001e7	41		 inc	 ecx
  001e8	89 86 30 01 00
	00		 mov	 DWORD PTR [esi+304], eax
  001ee	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  001f6	f3 0f 11 8e 34
	01 00 00	 movss	 DWORD PTR [esi+308], xmm1
  001fe	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00206	f3 0f 11 86 38
	01 00 00	 movss	 DWORD PTR [esi+312], xmm0
  0020e	8b 04 d6	 mov	 eax, DWORD PTR [esi+edx*8]

; 270  :         }

  00211	8b 55 f8	 mov	 edx, DWORD PTR _c_rmatTransform$1$[ebp]
  00214	89 86 3c 01 00
	00		 mov	 DWORD PTR [esi+316], eax
  0021a	f3 0f 11 8e 40
	01 00 00	 movss	 DWORD PTR [esi+320], xmm1
  00222	f3 0f 11 86 44
	01 00 00	 movss	 DWORD PTR [esi+324], xmm0
  0022a	eb 88		 jmp	 SHORT $LN34@CalculateB
$LN5@CalculateB:

; 271  :         else
; 272  :         {
; 273  :             if (m_v3TBBoxMin.x > m_v4TBBox[i].x)

  0022c	f3 0f 10 0c d6	 movss	 xmm1, DWORD PTR [esi+edx*8]
  00231	f3 0f 10 86 30
	01 00 00	 movss	 xmm0, DWORD PTR [esi+304]
  00239	0f 2f c1	 comiss	 xmm0, xmm1
  0023c	76 08		 jbe	 SHORT $LN7@CalculateB

; 274  :                 m_v3TBBoxMin.x = m_v4TBBox[i].x;

  0023e	f3 0f 11 8e 30
	01 00 00	 movss	 DWORD PTR [esi+304], xmm1
$LN7@CalculateB:

; 275  :             if (m_v3TBBoxMax.x < m_v4TBBox[i].x)

  00246	f3 0f 10 04 d6	 movss	 xmm0, DWORD PTR [esi+edx*8]
  0024b	0f 2f 86 3c 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+316]
  00252	76 08		 jbe	 SHORT $LN8@CalculateB

; 276  :                 m_v3TBBoxMax.x = m_v4TBBox[i].x;

  00254	f3 0f 11 86 3c
	01 00 00	 movss	 DWORD PTR [esi+316], xmm0
$LN8@CalculateB:

; 277  :             if (m_v3TBBoxMin.y > m_v4TBBox[i].y)

  0025c	f3 0f 10 8c 37
	b4 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+180]
  00265	f3 0f 10 86 34
	01 00 00	 movss	 xmm0, DWORD PTR [esi+308]
  0026d	0f 2f c1	 comiss	 xmm0, xmm1
  00270	76 08		 jbe	 SHORT $LN9@CalculateB

; 278  :                 m_v3TBBoxMin.y = m_v4TBBox[i].y;

  00272	f3 0f 11 8e 34
	01 00 00	 movss	 DWORD PTR [esi+308], xmm1
$LN9@CalculateB:

; 279  :             if (m_v3TBBoxMax.y < m_v4TBBox[i].y)

  0027a	f3 0f 10 84 37
	b4 00 00 00	 movss	 xmm0, DWORD PTR [edi+esi+180]
  00283	0f 2f 86 40 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+320]
  0028a	76 08		 jbe	 SHORT $LN10@CalculateB

; 280  :                 m_v3TBBoxMax.y = m_v4TBBox[i].y;

  0028c	f3 0f 11 86 40
	01 00 00	 movss	 DWORD PTR [esi+320], xmm0
$LN10@CalculateB:

; 281  :             if (m_v3TBBoxMin.z > m_v4TBBox[i].z)

  00294	f3 0f 10 8c 37
	b8 00 00 00	 movss	 xmm1, DWORD PTR [edi+esi+184]
  0029d	f3 0f 10 86 38
	01 00 00	 movss	 xmm0, DWORD PTR [esi+312]
  002a5	0f 2f c1	 comiss	 xmm0, xmm1
  002a8	76 08		 jbe	 SHORT $LN11@CalculateB

; 282  :                 m_v3TBBoxMin.z = m_v4TBBox[i].z;

  002aa	f3 0f 11 8e 38
	01 00 00	 movss	 DWORD PTR [esi+312], xmm1
$LN11@CalculateB:

; 283  :             if (m_v3TBBoxMax.z < m_v4TBBox[i].z)

  002b2	f3 0f 10 84 37
	b8 00 00 00	 movss	 xmm0, DWORD PTR [edi+esi+184]
  002bb	0f 2f 86 44 01
	00 00		 comiss	 xmm0, DWORD PTR [esi+324]
  002c2	76 08		 jbe	 SHORT $LN2@CalculateB

; 284  :                 m_v3TBBoxMax.z = m_v4TBBox[i].z;

  002c4	f3 0f 11 86 44
	01 00 00	 movss	 DWORD PTR [esi+324], xmm0
$LN2@CalculateB:

; 258  : 
; 259  :     for (DWORD i = 0; i < 8; ++i)

  002cc	8b 55 f8	 mov	 edx, DWORD PTR _c_rmatTransform$1$[ebp]
  002cf	41		 inc	 ecx
  002d0	89 4d fc	 mov	 DWORD PTR _i$1$[ebp], ecx
  002d3	83 f9 08	 cmp	 ecx, 8
  002d6	0f 82 e4 fe ff
	ff		 jb	 $LL4@CalculateB

; 285  :         }
; 286  :     }
; 287  : }

  002dc	5f		 pop	 edi
  002dd	5e		 pop	 esi
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c3		 ret	 0
?CalculateBBox@CSpeedTreeWrapper@@UAEXXZ ENDP		; CSpeedTreeWrapper::CalculateBBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z PROC		; CSpeedTreeWrapper::SetPosition, COMDAT
; _this$ = ecx

; 818  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 819  :     m_afPos[0] = x;
; 820  :     m_afPos[1] = y;
; 821  :     m_afPos[2] = z;

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00008	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _y$[ebp]
  0000d	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _x$[ebp]
  00012	56		 push	 esi
  00013	8b f1		 mov	 esi, ecx

; 822  : 
; 823  :     m_pSpeedTree->SetTreePosition(x, y, z);

  00015	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00018	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  0001e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00024	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0002a	f3 0f 11 96 dc
	02 00 00	 movss	 DWORD PTR [esi+732], xmm2
  00032	f3 0f 11 8e e0
	02 00 00	 movss	 DWORD PTR [esi+736], xmm1
  0003a	f3 0f 11 86 e4
	02 00 00	 movss	 DWORD PTR [esi+740], xmm0
  00042	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  00047	e8 00 00 00 00	 call	 ?SetTreePosition@CSpeedTreeRT@@QAEXMMM@Z ; CSpeedTreeRT::SetTreePosition

; 824  :     CGraphicObjectInstance::SetPosition(x, y, z);

  0004c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
  00051	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00054	8b ce		 mov	 ecx, esi
  00056	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0005c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
  00061	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00067	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
  0006c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00071	e8 00 00 00 00	 call	 ?SetPosition@CGraphicObjectInstance@@QAEXMMM@Z ; CGraphicObjectInstance::SetPosition
  00076	5e		 pop	 esi

; 825  : }

  00077	5d		 pop	 ebp
  00078	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CSpeedTreeWrapper@@UAEXMMM@Z ENDP		; CSpeedTreeWrapper::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z
_TEXT	SEGMENT
_v3Center$ = 8						; size = 4
_fRadius$ = 12						; size = 4
?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z PROC ; CSpeedTreeWrapper::GetBoundingSphere, COMDAT
; _this$ = ecx

; 219  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 220  :     float fX, fY, fZ;
; 221  :     fX = m_afBoundingBox[3] - m_afBoundingBox[0];
; 222  :     fY = m_afBoundingBox[4] - m_afBoundingBox[1];
; 223  :     fZ = m_afBoundingBox[5] - m_afBoundingBox[2];
; 224  :     v3Center.x = 0.0f;

  0000a	8b 7d 08	 mov	 edi, DWORD PTR _v3Center$[ebp]
  0000d	f3 0f 10 96 f4
	02 00 00	 movss	 xmm2, DWORD PTR [esi+756]
  00015	f3 0f 10 9e f8
	02 00 00	 movss	 xmm3, DWORD PTR [esi+760]
  0001d	f3 0f 5c 9e ec
	02 00 00	 subss	 xmm3, DWORD PTR [esi+748]
  00025	f3 0f 5c 96 e8
	02 00 00	 subss	 xmm2, DWORD PTR [esi+744]
  0002d	f3 0f 10 8e fc
	02 00 00	 movss	 xmm1, DWORD PTR [esi+764]
  00035	f3 0f 5c 8e f0
	02 00 00	 subss	 xmm1, DWORD PTR [esi+752]
  0003d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 227  :     fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f;

  00043	f3 0f 59 db	 mulss	 xmm3, xmm3
  00047	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0004e	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00052	0f 28 c1	 movaps	 xmm0, xmm1
  00055	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00059	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00061	f3 0f 58 da	 addss	 xmm3, xmm2
  00065	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  0006a	f3 0f 58 d9	 addss	 xmm3, xmm1
  0006e	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00071	0f 5a c3	 cvtps2pd xmm0, xmm3
  00074	66 0f 2e c8	 ucomisd xmm1, xmm0
  00078	77 06		 ja	 SHORT $LN9@GetBoundin
  0007a	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0007e	eb 05		 jmp	 SHORT $LN10@GetBoundin
$LN9@GetBoundin:
  00080	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN10@GetBoundin:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 227  :     fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f;

  00085	8b 45 0c	 mov	 eax, DWORD PTR _fRadius$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00088	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 227  :     fRadius = sqrtf(fX * fX + fY * fY + fZ * fZ) * 0.5f * 0.9f;

  0008c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00094	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f666666
  0009c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 228  :     D3DXVECTOR3 vec = m_pSpeedTree->GetTreePosition();

  000a0	8b 8e 8c 02 00
	00		 mov	 ecx, DWORD PTR [esi+652]
  000a6	e8 00 00 00 00	 call	 ?GetTreePosition@CSpeedTreeRT@@QBEPBMXZ ; CSpeedTreeRT::GetTreePosition
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 328  :     x += v.x;

  000ab	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]

; 278  :     y = pf[1];

  000af	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 279  :     z = pf[2];

  000b4	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]

; 328  :     x += v.x;

  000b9	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]

; 329  :     y += v.y;

  000bd	f3 0f 58 4f 04	 addss	 xmm1, DWORD PTR [edi+4]

; 330  :     z += v.z;

  000c2	f3 0f 58 57 08	 addss	 xmm2, DWORD PTR [edi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 230  :     return true;

  000c7	b0 01		 mov	 al, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.inl

; 328  :     x += v.x;

  000c9	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 329  :     y += v.y;

  000cd	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1

; 330  :     z += v.z;

  000d2	f3 0f 11 57 08	 movss	 DWORD PTR [edi+8], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp

; 231  : }

  000d7	5f		 pop	 edi
  000d8	5e		 pop	 esi
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
?GetBoundingSphere@CSpeedTreeWrapper@@UAE_NAAUD3DXVECTOR3@@AAM@Z ENDP ; CSpeedTreeWrapper::GetBoundingSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z
_TEXT	SEGMENT
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z PROC	; CSpeedTreeWrapper::OnGetObjectHeight, COMDAT
; _this$ = ecx

; 37   :     virtual bool OnGetObjectHeight(float fX, float fY, float* pfHeight) { return false; }

  00000	32 c0		 xor	 al, al
  00002	c2 0c 00	 ret	 12			; 0000000cH
?OnGetObjectHeight@CSpeedTreeWrapper@@MAE_NMMPAM@Z ENDP	; CSpeedTreeWrapper::OnGetObjectHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pAttributeInstance$ = 8				; size = 4
?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z PROC ; CSpeedTreeWrapper::OnUpdateHeighInstance, COMDAT
; _this$ = ecx

; 36   :     virtual void OnUpdateHeighInstance(CAttributeInstance* pAttributeInstance) {}

  00000	c2 04 00	 ret	 4
?OnUpdateHeighInstance@CSpeedTreeWrapper@@MAEXPAVCAttributeInstance@@@Z ENDP ; CSpeedTreeWrapper::OnUpdateHeighInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z
_TEXT	SEGMENT
_ObjectType$1 = -152					; size = 4
_mat$ = -148						; size = 64
_CollisionData$2 = -84					; size = 80
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z PROC ; CSpeedTreeWrapper::OnUpdateCollisionData, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 189  :     D3DXMATRIX mat;
; 190  :     D3DXMatrixTranslation(&mat, m_afPos[0], m_afPos[1], m_afPos[2]);

  00017	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mat$[ebp]
  0001d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00020	f3 0f 10 87 e4
	02 00 00	 movss	 xmm0, DWORD PTR [edi+740]
  00028	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0002e	f3 0f 10 87 e0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+736]
  00036	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003c	f3 0f 10 87 dc
	02 00 00	 movss	 xmm0, DWORD PTR [edi+732]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 191  :     for (UINT i = 0; i < GetCollisionObjectCount(); ++i)

  0004f	8b cf		 mov	 ecx, edi
  00051	33 f6		 xor	 esi, esi
  00053	e8 00 00 00 00	 call	 ?GetCollisionObjectCount@CSpeedTreeWrapper@@IAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
  00058	85 c0		 test	 eax, eax
  0005a	74 5e		 je	 SHORT $LN3@OnUpdateCo
  0005c	0f 1f 40 00	 npad	 4
$LL4@OnUpdateCo:

; 192  :     {
; 193  :         CSpeedTreeRT::ECollisionObjectType ObjectType;
; 194  :         CStaticCollisionData CollisionData;
; 195  : 
; 196  :         GetCollisionObject(i, ObjectType, (float*)&CollisionData.v3Position, CollisionData.fDimensions);

  00060	8d 45 e0	 lea	 eax, DWORD PTR _CollisionData$2[ebp+52]
  00063	8b cf		 mov	 ecx, edi
  00065	50		 push	 eax
  00066	8d 45 d4	 lea	 eax, DWORD PTR _CollisionData$2[ebp+40]
  00069	50		 push	 eax
  0006a	8d 85 68 ff ff
	ff		 lea	 eax, DWORD PTR _ObjectType$1[ebp]
  00070	50		 push	 eax
  00071	56		 push	 esi
  00072	e8 00 00 00 00	 call	 ?GetCollisionObject@CSpeedTreeWrapper@@IAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ; CSpeedTreeWrapper::GetCollisionObject

; 197  : 
; 198  :         if (ObjectType == CSpeedTreeRT::CO_BOX)

  00077	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _ObjectType$1[ebp]
  0007d	83 f8 02	 cmp	 eax, 2
  00080	74 2c		 je	 SHORT $LN2@OnUpdateCo

; 199  :             continue;
; 200  : 
; 201  :         switch (ObjectType)

  00082	83 e8 00	 sub	 eax, 0
  00085	74 0e		 je	 SHORT $LN8@OnUpdateCo
  00087	83 e8 01	 sub	 eax, 1
  0008a	75 10		 jne	 SHORT $LN5@OnUpdateCo

; 205  :             CollisionData.fDimensions[0] = CollisionData.fDimensions[0];
; 206  :             break;
; 207  : 
; 208  :         case CSpeedTreeRT::CO_CYLINDER:
; 209  :             CollisionData.dwType = COLLISION_TYPE_CYLINDER;

  0008c	c7 45 ac 03 00
	00 00		 mov	 DWORD PTR _CollisionData$2[ebp], 3

; 210  :             CollisionData.fDimensions[0] = CollisionData.fDimensions[0];
; 211  :             CollisionData.fDimensions[1] = CollisionData.fDimensions[1];

  00093	eb 07		 jmp	 SHORT $LN5@OnUpdateCo
$LN8@OnUpdateCo:

; 202  :         {
; 203  :         case CSpeedTreeRT::CO_SPHERE:
; 204  :             CollisionData.dwType = COLLISION_TYPE_SPHERE;

  00095	c7 45 ac 02 00
	00 00		 mov	 DWORD PTR _CollisionData$2[ebp], 2
$LN5@OnUpdateCo:

; 212  :             break;
; 213  :         }
; 214  :         AddCollision(&CollisionData, &mat);

  0009c	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _mat$[ebp]
  000a2	8b cf		 mov	 ecx, edi
  000a4	50		 push	 eax
  000a5	8d 45 ac	 lea	 eax, DWORD PTR _CollisionData$2[ebp]
  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ?AddCollision@CGraphicObjectInstance@@QAEXPBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CGraphicObjectInstance::AddCollision
$LN2@OnUpdateCo:

; 191  :     for (UINT i = 0; i < GetCollisionObjectCount(); ++i)

  000ae	8b cf		 mov	 ecx, edi
  000b0	46		 inc	 esi
  000b1	e8 00 00 00 00	 call	 ?GetCollisionObjectCount@CSpeedTreeWrapper@@IAEIXZ ; CSpeedTreeWrapper::GetCollisionObjectCount
  000b6	3b f0		 cmp	 esi, eax
  000b8	72 a6		 jb	 SHORT $LL4@OnUpdateCo
$LN3@OnUpdateCo:

; 215  :     }
; 216  : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	5f		 pop	 edi
  000be	33 cd		 xor	 ecx, ebp
  000c0	5e		 pop	 esi
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c2 04 00	 ret	 4
?OnUpdateCollisionData@CSpeedTreeWrapper@@MAEXPBV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@@Z ENDP ; CSpeedTreeWrapper::OnUpdateCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetCollisionObject@CSpeedTreeWrapper@@IAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
_eType$ = 12						; size = 4
_pPosition$ = 16					; size = 4
_pDimensions$ = 20					; size = 4
?GetCollisionObject@CSpeedTreeWrapper@@IAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z PROC ; CSpeedTreeWrapper::GetCollisionObject, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     assert(m_pSpeedTree);
; 184  :     m_pSpeedTree->GetCollisionObject(nIndex, eType, pPosition, pDimensions);

  00003	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]

; 185  : }

  00009	5d		 pop	 ebp

; 183  :     assert(m_pSpeedTree);
; 184  :     m_pSpeedTree->GetCollisionObject(nIndex, eType, pPosition, pDimensions);

  0000a	e9 00 00 00 00	 jmp	 ?GetCollisionObject@CSpeedTreeRT@@QAEXIAAW4ECollisionObjectType@1@PAM1@Z ; CSpeedTreeRT::GetCollisionObject
?GetCollisionObject@CSpeedTreeWrapper@@IAEXIAAW4ECollisionObjectType@CSpeedTreeRT@@PAM1@Z ENDP ; CSpeedTreeWrapper::GetCollisionObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?GetCollisionObjectCount@CSpeedTreeWrapper@@IAEIXZ
_TEXT	SEGMENT
?GetCollisionObjectCount@CSpeedTreeWrapper@@IAEIXZ PROC	; CSpeedTreeWrapper::GetCollisionObjectCount, COMDAT
; _this$ = ecx

; 177  :     assert(m_pSpeedTree);
; 178  :     return m_pSpeedTree->GetCollisionObjectCount();

  00000	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [ecx+652]
  00006	e9 00 00 00 00	 jmp	 ?GetCollisionObjectCount@CSpeedTreeRT@@QAEIXZ ; CSpeedTreeRT::GetCollisionObjectCount
?GetCollisionObjectCount@CSpeedTreeWrapper@@IAEIXZ ENDP	; CSpeedTreeWrapper::GetCollisionObjectCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.h
;	COMDAT ?GetType@CSpeedTreeWrapper@@UBEHXZ
_TEXT	SEGMENT
?GetType@CSpeedTreeWrapper@@UBEHXZ PROC			; CSpeedTreeWrapper::GetType, COMDAT
; _this$ = ecx

; 30   :     int GetType() const { return ID; }

  00000	b8 a6 f7 c9 8a	 mov	 eax, -1966475354	; 8ac9f7a6H
  00005	c3		 ret	 0
?GetType@CSpeedTreeWrapper@@UBEHXZ ENDP			; CSpeedTreeWrapper::GetType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\GrpObjectInstance.h
;	COMDAT ?OnDeform@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnDeform@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnDeform, COMDAT
; _this$ = ecx

; 100  : 	virtual void			OnDeform() {}

  00000	c2 00 00	 ret	 0
?OnDeform@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnDeform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\GrpObjectInstance.h
;	COMDAT ?OnUpdate@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnUpdate@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnUpdate, COMDAT
; _this$ = ecx

; 99   : 	virtual void			OnUpdate() {}

  00000	c2 00 00	 ret	 0
?OnUpdate@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnUpdate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\GrpObjectInstance.h
;	COMDAT ?OnClear@CGraphicObjectInstance@@UAEXXZ
_TEXT	SEGMENT
?OnClear@CGraphicObjectInstance@@UAEXXZ PROC		; CGraphicObjectInstance::OnClear, COMDAT
; _this$ = ecx

; 98   : 	virtual void			OnClear() {}

  00000	c2 00 00	 ret	 0
?OnClear@CGraphicObjectInstance@@UAEXXZ ENDP		; CGraphicObjectInstance::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv509 = -12						; size = 4
$T1 = -8						; size = 4
tv521 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv514 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3422 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3423 :         // append [_Ptr, _Ptr + _Count)
; 3424 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3425 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3426 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3427 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3428 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3429 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3430 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3443 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4939 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4941 :         }
; 4942 : 
; 4943 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4885 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv514[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv514[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4889 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv514[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4947 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 77   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4959 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR $T1[ebp], 16	; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv521[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv509[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4960 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv521[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv509[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00123	41		 inc	 ecx

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3434 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4940 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
__New_capacity$2$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2949 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2956 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2950 :         auto& _My_data    = _Mypair._Myval2;
; 2951 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2952 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2953 :         _Left_data._Orphan_all();
; 2954 :         _Right_data._Orphan_all();
; 2955 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 2956 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2957 : 
; 2958 :         const auto _Left_capacity  = _Left_data._Myres;
; 2959 :         const auto _Right_capacity = _Right_data._Myres;
; 2960 :         // overflow is OK due to max_size() checks:
; 2961 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2962 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 2963 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN93@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN93@basic_stri

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2283 :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  0006b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN57@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN57@basic_stri:

; 2301 :         return _BUF_SIZE <= _Myres;

  00073	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00077	72 02		 jb	 SHORT $LN62@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN62@basic_stri:

; 2964 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2965 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2966 :             _Take_contents(_Left);
; 2967 :             const auto _Ptr = _My_data._Myptr();
; 2968 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Right_size));
; 2969 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax

; 2964 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2965 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2966 :             _Take_contents(_Left);
; 2967 :             const auto _Ptr = _My_data._Myptr();
; 2968 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Right_size));
; 2969 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy

; 2970 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN93@basic_stri:

; 2971 :             return;
; 2972 :         }
; 2973 : 
; 2974 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 2975 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN92@basic_stri

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2989 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Left_size));
; 2990 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 2976 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2977 :             // At this point, we have tested:
; 2978 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2979 :             // therefore: (by De Morgan's Laws)
; 2980 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2981 :             // therefore: (by the distributive property)
; 2982 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2983 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2984 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2985 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2986 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2987 :             _Take_contents(_Right);
; 2988 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx

; 2989 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Left_size));
; 2990 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  000d7	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  000db	72 02		 jb	 SHORT $LN85@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN85@basic_stri:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy

; 2991 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2992 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN92@basic_stri:

; 2993 :             return;
; 2994 :         }
; 2995 : 
; 2996 :         // can't use either buffer, reallocate
; 2997 :         const auto _Max = max_size();
; 2998 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 ae 00 00
	00		 jb	 $LN100@basic_stri

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 0e		 jbe	 SHORT $LN15@basic_stri

; 4885 :             return _Max;

  0011a	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __New_capacity$2$[ebp], 2147483647 ; 7fffffffH
  00121	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00126	eb 18		 jmp	 SHORT $LN94@basic_stri
$LN15@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00128	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0012d	3b c2		 cmp	 eax, edx
  0012f	0f 42 c2	 cmovb	 eax, edx
  00132	89 45 f8	 mov	 DWORD PTR __New_capacity$2$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3005 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00135	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00138	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0013e	72 13		 jb	 SHORT $LN23@basic_stri
$LN94@basic_stri:

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00146	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00149	8b d0		 mov	 edx, eax
  0014b	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$2$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	eb 1c		 jmp	 SHORT $LN98@basic_stri
$LN23@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00153	85 d2		 test	 edx, edx
  00155	74 16		 je	 SHORT $LN24@basic_stri

; 77   :         return ::operator new(_Bytes);

  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00160	8b d0		 mov	 edx, eax
  00162	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00165	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00168	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$2$[ebp]
  0016b	eb 05		 jmp	 SHORT $LN22@basic_stri
$LN24@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0016d	33 d2		 xor	 edx, edx
$LN98@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3012 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016f	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
$LN22@basic_stri:

; 3013 :         _My_data._Mysize = _New_size;

  00172	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00175	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2284 :         if (_Large_string_engaged()) {

  00178	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 3012 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0017b	89 16		 mov	 DWORD PTR [esi], edx

; 3014 :         _My_data._Myres  = _New_capacity;

  0017d	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 2301 :         return _BUF_SIZE <= _Myres;

  00180	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00184	72 02		 jb	 SHORT $LN29@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00186	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN29@basic_stri:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00188	51		 push	 ecx
  00189	57		 push	 edi
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memcpy
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  00193	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00197	72 02		 jb	 SHORT $LN36@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00199	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN36@basic_stri:

; 3015 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 3016 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 3017 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0019b	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0019e	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019f	50		 push	 eax

; 3015 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 3016 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 3017 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001a3	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a6	53		 push	 ebx
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _memcpy

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	8b c6		 mov	 eax, esi
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN100@basic_stri:

; 2999 :             _Xlen_string();

  001bb	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@basic_stri:
  001c0	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeMaterial.h
;	COMDAT ?Set@CSpeedTreeMaterial@@QAEXPBM@Z
_TEXT	SEGMENT
_pMaterialArray$ = 8					; size = 4
?Set@CSpeedTreeMaterial@@QAEXPBM@Z PROC			; CSpeedTreeMaterial::Set, COMDAT
; _this$ = ecx

; 20   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 21   :         memcpy(&m_cMaterial.Diffuse, pMaterialArray, 3 * sizeof(float));

  00003	8b 55 08	 mov	 edx, DWORD PTR _pMaterialArray$[ebp]
  00006	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  0000a	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0000e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00011	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 22   :         m_cMaterial.Diffuse.a = 1.0f;

  00014	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H

; 23   : 
; 24   :         memcpy(&m_cMaterial.Ambient, pMaterialArray + 3, 3 * sizeof(float));

  0001b	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  00020	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0
  00025	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00028	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 25   :         m_cMaterial.Ambient.a = 1.0f;

  0002b	c7 41 1c 00 00
	80 3f		 mov	 DWORD PTR [ecx+28], 1065353216 ; 3f800000H

; 26   : 
; 27   :         memcpy(&m_cMaterial.Specular, pMaterialArray + 6, 3 * sizeof(float));

  00032	f3 0f 7e 42 18	 movq	 xmm0, QWORD PTR [edx+24]
  00037	66 0f d6 41 20	 movq	 QWORD PTR [ecx+32], xmm0
  0003c	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0003f	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 28   :         m_cMaterial.Specular.a = 1.0f;

  00042	c7 41 2c 00 00
	80 3f		 mov	 DWORD PTR [ecx+44], 1065353216 ; 3f800000H

; 29   : 
; 30   :         memcpy(&m_cMaterial.Emissive, pMaterialArray + 9, 3 * sizeof(float));

  00049	f3 0f 7e 42 24	 movq	 xmm0, QWORD PTR [edx+36]
  0004e	66 0f d6 41 30	 movq	 QWORD PTR [ecx+48], xmm0
  00053	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00056	89 41 38	 mov	 DWORD PTR [ecx+56], eax

; 31   :         m_cMaterial.Emissive.a = 1.0f;

  00059	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [ecx+60], 1065353216 ; 3f800000H

; 32   : 
; 33   :         m_cMaterial.Power = pMaterialArray[12];

  00060	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  00063	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 34   :     }

  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
?Set@CSpeedTreeMaterial@@QAEXPBM@Z ENDP			; CSpeedTreeMaterial::Set
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeMaterial.h
;	COMDAT ??0CSpeedTreeMaterial@@QAE@XZ
_TEXT	SEGMENT
??0CSpeedTreeMaterial@@QAE@XZ PROC			; CSpeedTreeMaterial::CSpeedTreeMaterial, COMDAT
; _this$ = ecx

; 11   :     {
; 12   :         m_cMaterial.Ambient.r = m_cMaterial.Diffuse.r = m_cMaterial.Specular.r = m_cMaterial.Emissive.r = 3.0f;

  00000	c7 41 30 00 00
	40 40		 mov	 DWORD PTR [ecx+48], 1077936128 ; 40400000H

; 13   :         m_cMaterial.Ambient.g = m_cMaterial.Diffuse.g = m_cMaterial.Specular.g = m_cMaterial.Emissive.g = 3.0f;
; 14   :         m_cMaterial.Ambient.b = m_cMaterial.Diffuse.b = m_cMaterial.Specular.b = m_cMaterial.Emissive.b = 3.0f;
; 15   :         m_cMaterial.Ambient.a = m_cMaterial.Diffuse.a = m_cMaterial.Specular.a = m_cMaterial.Emissive.a = 3.0f;
; 16   :         m_cMaterial.Power = 5.0f;
; 17   :     }

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 20 00 00
	40 40		 mov	 DWORD PTR [ecx+32], 1077936128 ; 40400000H
  00010	c7 01 00 00 40
	40		 mov	 DWORD PTR [ecx], 1077936128 ; 40400000H
  00016	c7 41 10 00 00
	40 40		 mov	 DWORD PTR [ecx+16], 1077936128 ; 40400000H
  0001d	c7 41 34 00 00
	40 40		 mov	 DWORD PTR [ecx+52], 1077936128 ; 40400000H
  00024	c7 41 24 00 00
	40 40		 mov	 DWORD PTR [ecx+36], 1077936128 ; 40400000H
  0002b	c7 41 04 00 00
	40 40		 mov	 DWORD PTR [ecx+4], 1077936128 ; 40400000H
  00032	c7 41 14 00 00
	40 40		 mov	 DWORD PTR [ecx+20], 1077936128 ; 40400000H
  00039	c7 41 38 00 00
	40 40		 mov	 DWORD PTR [ecx+56], 1077936128 ; 40400000H
  00040	c7 41 28 00 00
	40 40		 mov	 DWORD PTR [ecx+40], 1077936128 ; 40400000H
  00047	c7 41 08 00 00
	40 40		 mov	 DWORD PTR [ecx+8], 1077936128 ; 40400000H
  0004e	c7 41 18 00 00
	40 40		 mov	 DWORD PTR [ecx+24], 1077936128 ; 40400000H
  00055	c7 41 3c 00 00
	40 40		 mov	 DWORD PTR [ecx+60], 1077936128 ; 40400000H
  0005c	c7 41 2c 00 00
	40 40		 mov	 DWORD PTR [ecx+44], 1077936128 ; 40400000H
  00063	c7 41 0c 00 00
	40 40		 mov	 DWORD PTR [ecx+12], 1077936128 ; 40400000H
  0006a	c7 41 1c 00 00
	40 40		 mov	 DWORD PTR [ecx+28], 1077936128 ; 40400000H
  00071	c7 41 40 00 00
	a0 40		 mov	 DWORD PTR [ecx+64], 1084227584 ; 40a00000H
  00078	c3		 ret	 0
??0CSpeedTreeMaterial@@QAE@XZ ENDP			; CSpeedTreeMaterial::CSpeedTreeMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directx\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SpeedTreeLib\SpeedTreeWrapper.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
