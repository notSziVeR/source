; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\Distribute\spherepack.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??1Sphere@@UAE@XZ				; Sphere::~Sphere
PUBLIC	??_GSphere@@UAEPAXI@Z				; Sphere::`scalar deleting destructor'
PUBLIC	??1SpherePackCallback@@UAE@XZ			; SpherePackCallback::~SpherePackCallback
PUBLIC	?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::VisibilityCallback
PUBLIC	?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; SpherePackCallback::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::RangeTestCallback
PUBLIC	?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackCallback::PointTest2dCallback
PUBLIC	??_GSpherePackCallback@@UAEPAXI@Z		; SpherePackCallback::`scalar deleting destructor'
PUBLIC	??0SpherePack@@QAE@XZ				; SpherePack::SpherePack
PUBLIC	??1SpherePack@@UAE@XZ				; SpherePack::~SpherePack
PUBLIC	?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z ; SpherePack::Init
PUBLIC	?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z	; SpherePack::NewPosRadius
PUBLIC	?Unlink@SpherePack@@QAEXXZ			; SpherePack::Unlink
PUBLIC	?LostChild@SpherePack@@QAEXPAV1@@Z		; SpherePack::LostChild
PUBLIC	?Render@SpherePack@@QAEXI@Z			; SpherePack::Render
PUBLIC	?Recompute@SpherePack@@QAE_NM@Z			; SpherePack::Recompute
PUBLIC	?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest
PUBLIC	?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace
PUBLIC	?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest
PUBLIC	?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d
PUBLIC	?Reset@SpherePack@@QAEXXZ			; SpherePack::Reset
PUBLIC	??_ESpherePack@@UAEPAXI@Z			; SpherePack::`vector deleting destructor'
PUBLIC	??1SpherePackFifo@@UAE@XZ			; SpherePackFifo::~SpherePackFifo
PUBLIC	??_GSpherePackFifo@@UAEPAXI@Z			; SpherePackFifo::`scalar deleting destructor'
PUBLIC	??0SpherePackFactory@@QAE@HMMM@Z		; SpherePackFactory::SpherePackFactory
PUBLIC	??1SpherePackFactory@@UAE@XZ			; SpherePackFactory::~SpherePackFactory
PUBLIC	?Process@SpherePackFactory@@QAEXXZ		; SpherePackFactory::Process
PUBLIC	?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z ; SpherePackFactory::AddSphere_
PUBLIC	?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
PUBLIC	?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute
PUBLIC	?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z ; SpherePackFactory::Integrate
PUBLIC	?Render@SpherePackFactory@@QAEXXZ		; SpherePackFactory::Render
PUBLIC	?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
PUBLIC	?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z ; SpherePackFactory::FrustumTest
PUBLIC	?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z ; SpherePackFactory::RayTrace
PUBLIC	?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ; SpherePackFactory::RangeTest
PUBLIC	?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z ; SpherePackFactory::PointTest2d
PUBLIC	?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ; SpherePackFactory::RayTraceCallback
PUBLIC	?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ; SpherePackFactory::RangeTestCallback
PUBLIC	?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackFactory::PointTest2dCallback
PUBLIC	?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ; SpherePackFactory::VisibilityCallback
PUBLIC	?Reset@SpherePackFactory@@QAEXXZ		; SpherePackFactory::Reset
PUBLIC	??1?$Pool@VSpherePack@@@@QAE@XZ			; Pool<SpherePack>::~Pool<SpherePack>
PUBLIC	??_GSpherePackFactory@@UAEPAXI@Z		; SpherePackFactory::`scalar deleting destructor'
PUBLIC	??_7Sphere@@6B@					; Sphere::`vftable'
PUBLIC	??_7SpherePackCallback@@6B@			; SpherePackCallback::`vftable'
PUBLIC	??_7SpherePack@@6B@				; SpherePack::`vftable'
PUBLIC	??_7SpherePackFifo@@6B@				; SpherePackFifo::`vftable'
PUBLIC	??_7SpherePackFactory@@6B@			; SpherePackFactory::`vftable'
PUBLIC	??_R4Sphere@@6B@				; Sphere::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSphere@@@8				; Sphere `RTTI Type Descriptor'
PUBLIC	??_R3Sphere@@8					; Sphere::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Sphere@@8					; Sphere::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Sphere@@8				; Sphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SpherePackFactory@@6B@			; SpherePackFactory::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePackFactory@@@8			; SpherePackFactory `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackFactory@@8			; SpherePackFactory::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackFactory@@8			; SpherePackFactory::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePackFactory@@8		; SpherePackFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SpherePackCallback@@8		; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSpherePackCallback@@@8			; SpherePackCallback `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackCallback@@8			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackCallback@@8			; SpherePackCallback::`RTTI Base Class Array'
PUBLIC	??_R4SpherePack@@6B@				; SpherePack::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePack@@@8				; SpherePack `RTTI Type Descriptor'
PUBLIC	??_R3SpherePack@@8				; SpherePack::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePack@@8				; SpherePack::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePack@@8			; SpherePack::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SpherePackCallback@@6B@			; SpherePackCallback::`RTTI Complete Object Locator'
PUBLIC	??_R4SpherePackFifo@@6B@			; SpherePackFifo::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSpherePackFifo@@@8			; SpherePackFifo `RTTI Type Descriptor'
PUBLIC	??_R3SpherePackFifo@@8				; SpherePackFifo::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SpherePackFifo@@8				; SpherePackFifo::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SpherePackFifo@@8			; SpherePackFifo::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@49c80000
PUBLIC	__real@4ac80000
PUBLIC	__real@7e967699
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_V@YAXPAXI@Z:PROC				; operator delete[]
EXTRN	_sqrt:PROC
EXTRN	?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z:PROC ; Sphere::RayIntersection
EXTRN	?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z:PROC ; Sphere::RayIntersectionInFront
EXTRN	??_ESphere@@UAEPAXI@Z:PROC			; Sphere::`vector deleting destructor'
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	??_ESpherePackCallback@@UAEPAXI@Z:PROC		; SpherePackCallback::`vector deleting destructor'
EXTRN	??_ESpherePackFifo@@UAEPAXI@Z:PROC		; SpherePackFifo::`vector deleting destructor'
EXTRN	??_ESpherePackFactory@@UAEPAXI@Z:PROC		; SpherePackFactory::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@7e967699
CONST	SEGMENT
__real@7e967699 DD 07e967699r			; 1e+38
CONST	ENDS
;	COMDAT __real@4ac80000
CONST	SEGMENT
__real@4ac80000 DD 04ac80000r			; 6.5536e+06
CONST	ENDS
;	COMDAT __real@49c80000
CONST	SEGMENT
__real@49c80000 DD 049c80000r			; 1.6384e+06
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackFifo@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackFifo@@8 DD FLAT:??_R0?AVSpherePackFifo@@@8 ; SpherePackFifo::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackFifo@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackFifo@@8
rdata$r	SEGMENT
??_R2SpherePackFifo@@8 DD FLAT:??_R1A@?0A@EA@SpherePackFifo@@8 ; SpherePackFifo::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SpherePackFifo@@8
rdata$r	SEGMENT
??_R3SpherePackFifo@@8 DD 00H				; SpherePackFifo::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SpherePackFifo@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackFifo@@@8
data$rs	SEGMENT
??_R0?AVSpherePackFifo@@@8 DD FLAT:??_7type_info@@6B@	; SpherePackFifo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackFifo@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SpherePackFifo@@6B@
rdata$r	SEGMENT
??_R4SpherePackFifo@@6B@ DD 00H				; SpherePackFifo::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackFifo@@@8
	DD	FLAT:??_R3SpherePackFifo@@8
rdata$r	ENDS
;	COMDAT ??_R4SpherePackCallback@@6B@
rdata$r	SEGMENT
??_R4SpherePackCallback@@6B@ DD 00H			; SpherePackCallback::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackCallback@@@8
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePack@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePack@@8 DD FLAT:??_R0?AVSpherePack@@@8 ; SpherePack::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePack@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePack@@8
rdata$r	SEGMENT
??_R2SpherePack@@8 DD FLAT:??_R1A@?0A@EA@SpherePack@@8	; SpherePack::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R3SpherePack@@8
rdata$r	SEGMENT
??_R3SpherePack@@8 DD 00H				; SpherePack::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SpherePack@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePack@@@8
data$rs	SEGMENT
??_R0?AVSpherePack@@@8 DD FLAT:??_7type_info@@6B@	; SpherePack `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePack@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SpherePack@@6B@
rdata$r	SEGMENT
??_R4SpherePack@@6B@ DD 00H				; SpherePack::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePack@@@8
	DD	FLAT:??_R3SpherePack@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackCallback@@8
rdata$r	SEGMENT
??_R2SpherePackCallback@@8 DD FLAT:??_R1A@?0A@EA@SpherePackCallback@@8 ; SpherePackCallback::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SpherePackCallback@@8
rdata$r	SEGMENT
??_R3SpherePackCallback@@8 DD 00H			; SpherePackCallback::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackCallback@@@8
data$rs	SEGMENT
??_R0?AVSpherePackCallback@@@8 DD FLAT:??_7type_info@@6B@ ; SpherePackCallback `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackCallback@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackCallback@@8 DD FLAT:??_R0?AVSpherePackCallback@@@8 ; SpherePackCallback::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SpherePackFactory@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SpherePackFactory@@8 DD FLAT:??_R0?AVSpherePackFactory@@@8 ; SpherePackFactory::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SpherePackFactory@@8
rdata$r	ENDS
;	COMDAT ??_R2SpherePackFactory@@8
rdata$r	SEGMENT
??_R2SpherePackFactory@@8 DD FLAT:??_R1A@?0A@EA@SpherePackFactory@@8 ; SpherePackFactory::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SpherePackCallback@@8
rdata$r	ENDS
;	COMDAT ??_R3SpherePackFactory@@8
rdata$r	SEGMENT
??_R3SpherePackFactory@@8 DD 00H			; SpherePackFactory::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SpherePackFactory@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSpherePackFactory@@@8
data$rs	SEGMENT
??_R0?AVSpherePackFactory@@@8 DD FLAT:??_7type_info@@6B@ ; SpherePackFactory `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSpherePackFactory@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SpherePackFactory@@6B@
rdata$r	SEGMENT
??_R4SpherePackFactory@@6B@ DD 00H			; SpherePackFactory::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSpherePackFactory@@@8
	DD	FLAT:??_R3SpherePackFactory@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Sphere@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sphere@@8 DD FLAT:??_R0?AVSphere@@@8	; Sphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R2Sphere@@8
rdata$r	SEGMENT
??_R2Sphere@@8 DD FLAT:??_R1A@?0A@EA@Sphere@@8		; Sphere::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Sphere@@8
rdata$r	SEGMENT
??_R3Sphere@@8 DD 00H					; Sphere::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSphere@@@8
data$rs	SEGMENT
??_R0?AVSphere@@@8 DD FLAT:??_7type_info@@6B@		; Sphere `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSphere@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Sphere@@6B@
rdata$r	SEGMENT
??_R4Sphere@@6B@ DD 00H					; Sphere::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSphere@@@8
	DD	FLAT:??_R3Sphere@@8
rdata$r	ENDS
;	COMDAT ??_7SpherePackFactory@@6B@
CONST	SEGMENT
??_7SpherePackFactory@@6B@ DD FLAT:??_R4SpherePackFactory@@6B@ ; SpherePackFactory::`vftable'
	DD	FLAT:??_ESpherePackFactory@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7SpherePackFifo@@6B@
CONST	SEGMENT
??_7SpherePackFifo@@6B@ DD FLAT:??_R4SpherePackFifo@@6B@ ; SpherePackFifo::`vftable'
	DD	FLAT:??_ESpherePackFifo@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7SpherePack@@6B@
CONST	SEGMENT
??_7SpherePack@@6B@ DD FLAT:??_R4SpherePack@@6B@	; SpherePack::`vftable'
	DD	FLAT:??_ESpherePack@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7SpherePackCallback@@6B@
CONST	SEGMENT
??_7SpherePackCallback@@6B@ DD FLAT:??_R4SpherePackCallback@@6B@ ; SpherePackCallback::`vftable'
	DD	FLAT:??_ESpherePackCallback@@UAEPAXI@Z
	DD	FLAT:?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
	DD	FLAT:?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
	DD	FLAT:?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
CONST	ENDS
;	COMDAT ??_7Sphere@@6B@
CONST	SEGMENT
??_7Sphere@@6B@ DD FLAT:??_R4Sphere@@6B@		; Sphere::`vftable'
	DD	FLAT:??_ESphere@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@?$Pool@VSpherePack@@@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Set@?$Pool@VSpherePack@@@@QAEXH@Z$0
__ehfuncinfo$?Set@?$Pool@VSpherePack@@@@QAEXH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Set@?$Pool@VSpherePack@@@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0SpherePackFactory@@QAE@HMMM@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0SpherePackFactory@@QAE@HMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0SpherePackFactory@@QAE@HMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??_ESpherePack@@UAEPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSpherePackFactory@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackFactory@@UAEPAXI@Z PROC			; SpherePackFactory::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1SpherePackFactory@@UAE@XZ ; SpherePackFactory::~SpherePackFactory
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 40		 push	 64			; 00000040H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GSpherePackFactory@@UAEPAXI@Z ENDP			; SpherePackFactory::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
;	COMDAT ??1?$Pool@VSpherePack@@@@QAE@XZ
_TEXT	SEGMENT
??1?$Pool@VSpherePack@@@@QAE@XZ PROC			; Pool<SpherePack>::~Pool<SpherePack>, COMDAT
; _this$ = ecx

; 34   : 		if (mData)

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	85 c9		 test	 ecx, ecx
  00005	74 1b		 je	 SHORT $LN5@Pool

; 35   : 		{
; 36   : 			delete [] mData;

  00007	83 79 fc 00	 cmp	 DWORD PTR [ecx-4], 0
  0000b	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0000e	74 07		 je	 SHORT $LN4@Pool
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	6a 03		 push	 3
  00014	ff 10		 call	 DWORD PTR [eax]

; 37   : 		}
; 38   : 	};

  00016	c3		 ret	 0
$LN4@Pool:

; 35   : 		{
; 36   : 			delete [] mData;

  00017	6a 04		 push	 4
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0001f	83 c4 08	 add	 esp, 8
$LN5@Pool:

; 37   : 		}
; 38   : 	};

  00022	c3		 ret	 0
??1?$Pool@VSpherePack@@@@QAE@XZ ENDP			; Pool<SpherePack>::~Pool<SpherePack>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Reset@SpherePackFactory@@QAEXXZ
_TEXT	SEGMENT
?Reset@SpherePackFactory@@QAEXXZ PROC			; SpherePackFactory::Reset, COMDAT
; _this$ = ecx

; 882  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 883  : 	mRoot->Reset();

  00003	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ?Reset@SpherePack@@QAEXXZ ; SpherePack::Reset

; 884  : 	mLeaf->Reset();

  0000b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000e	5e		 pop	 esi
  0000f	e9 00 00 00 00	 jmp	 ?Reset@SpherePack@@QAEXXZ ; SpherePack::Reset
?Reset@SpherePackFactory@@QAEXXZ ENDP			; SpherePackFactory::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackFactory::VisibilityCallback, COMDAT
; _this$ = ecx

; 901  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 902  : #ifdef SPHERELIB_STRICT
; 903  : 	if (!sphere->IS_SPHERE)
; 904  : 	{
; 905  : 		puts("SpherePackFactory::VisibilityCallback");
; 906  : 	}
; 907  : #endif
; 908  : 	SpherePack *link = (SpherePack *) sphere->GetUserData();

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]

; 909  : 	if (link) { link->VisibilityTest(f, mCallback, state); }

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0e		 je	 SHORT $LN2@Visibility
  0000f	ff 75 10	 push	 DWORD PTR _state$[ebp]
  00012	ff 72 0c	 push	 DWORD PTR [edx+12]
  00015	ff 75 08	 push	 DWORD PTR _f$[ebp]
  00018	e8 00 00 00 00	 call	 ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest
$LN2@Visibility:

; 910  : }

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@SpherePackFactory@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackFactory::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackFactory::PointTest2dCallback, COMDAT
; _this$ = ecx

; 813  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 814  : #ifdef SPHERELIB_STRICT
; 815  : 	if (!sphere->IS_SPHERE)
; 816  : 	{
; 817  : 		puts("SpherePackFactory::PointTest2dCallback");
; 818  : 	}
; 819  : #endif
; 820  : 	SpherePack *link = (SpherePack *) sphere->GetUserData();

  00003	8b 45 0c	 mov	 eax, DWORD PTR _sphere$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]

; 821  : 	if (link) { link->PointTest2d(p, mCallback, state); }

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0e		 je	 SHORT $LN2@PointTest2
  0000f	ff 75 10	 push	 DWORD PTR _state$[ebp]
  00012	ff 72 0c	 push	 DWORD PTR [edx+12]
  00015	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00018	e8 00 00 00 00	 call	 ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d
$LN2@PointTest2:

; 822  : };

  0001d	5d		 pop	 ebp
  0001e	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@SpherePackFactory@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackFactory::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackFactory::RangeTestCallback, COMDAT
; _this$ = ecx

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 802  : #ifdef SPHERELIB_STRICT
; 803  : 	if (!sphere->IS_SPHERE)
; 804  : 	{
; 805  : 		puts("SpherePackFactory::RangeTestCallback");
; 806  : 	}
; 807  : #endif
; 808  : 	SpherePack *link = (SpherePack *) sphere->GetUserData();

  00003	8b 45 10	 mov	 eax, DWORD PTR _sphere$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]

; 809  : 	if (link) { link->RangeTest(p, distance, mCallback, state); }

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 19		 je	 SHORT $LN2@RangeTestC
  0000f	ff 75 14	 push	 DWORD PTR _state$[ebp]
  00012	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00017	ff 72 0c	 push	 DWORD PTR [edx+12]
  0001a	51		 push	 ecx
  0001b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00020	ff 75 08	 push	 DWORD PTR _p$[ebp]
  00023	e8 00 00 00 00	 call	 ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest
$LN2@RangeTestC:

; 810  : };

  00028	5d		 pop	 ebp
  00029	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@SpherePackFactory@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackFactory::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
___formal$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; SpherePackFactory::RayTraceCallback, COMDAT
; _this$ = ecx

; 867  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 868  : #ifdef SPHERELIB_STRICT
; 869  : 	if (!sphere->IS_SPHERE)
; 870  : 	{
; 871  : 		puts("SpherePackFactory::RayTraceCallback");
; 872  : 	}
; 873  : #endif
; 874  : 	SpherePack *link = (SpherePack *) sphere->GetUserData();

  00003	8b 45 18	 mov	 eax, DWORD PTR _sphere$[ebp]
  00006	8b d1		 mov	 edx, ecx
  00008	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]

; 875  : 	if (link) { link->RayTrace(p1, dir, distance, mCallback); }

  0000b	85 c9		 test	 ecx, ecx
  0000d	74 19		 je	 SHORT $LN2@RayTraceCa
  0000f	ff 72 0c	 push	 DWORD PTR [edx+12]
  00012	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00017	51		 push	 ecx
  00018	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001d	ff 75 0c	 push	 DWORD PTR _dir$[ebp]
  00020	ff 75 08	 push	 DWORD PTR _p1$[ebp]
  00023	e8 00 00 00 00	 call	 ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace
$LN2@RayTraceCa:

; 876  : };

  00028	5d		 pop	 ebp
  00029	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@SpherePackFactory@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; SpherePackFactory::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
_callback$ = 12						; size = 4
?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z PROC ; SpherePackFactory::PointTest2d, COMDAT
; _this$ = ecx

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  : #ifdef __STATIC_RANGE__
; 695  : 	if (!center.IsInStaticRange())
; 696  : 	{
; 697  : 		TraceError("SpherePackFactory::RangeTest2d - RANGE ERROR %f, %f, %f",
; 698  : 				   center.x, center.y, center.z);
; 699  : 		assert("SpherePackFactory::RangeTest2d - RANGE ERROR");
; 700  : 		return;
; 701  : 	}
; 702  : #endif
; 703  : 	mCallback = callback;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _callback$[ebp]

; 704  : 
; 705  : #ifdef SPHERELIB_STRICT
; 706  : 	mRoot->PointTest2d(center, this, VS_PARTIAL);
; 707  : 	extern bool MAPOUTDOOR_GET_HEIGHT_TRACE;
; 708  : 	if (MAPOUTDOOR_GET_HEIGHT_TRACE)
; 709  : 	{
; 710  : 		puts("================================================");
; 711  : 	}
; 712  : #else
; 713  : 	mRoot->PointTest2d(center, this, VS_PARTIAL);

  00006	6a 01		 push	 1
  00008	51		 push	 ecx
  00009	ff 75 08	 push	 DWORD PTR _center$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	e8 00 00 00 00	 call	 ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d

; 714  : 
; 715  : #endif
; 716  : 
; 717  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?PointTest2d@SpherePackFactory@@QAEXABVVector3d@@PAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::PointTest2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_center$ = 8						; size = 4
_radius$ = 12						; size = 4
_callback$ = 16						; size = 4
?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z PROC ; SpherePackFactory::RangeTest, COMDAT
; _this$ = ecx

; 678  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 679  : #ifdef __STATIC_RANGE__
; 680  : 	if (!center.IsInStaticRange())
; 681  : 	{
; 682  : 		TraceError("SpherePackFactory::RangeTest - RANGE ERROR %f, %f, %f",
; 683  : 				   center.x, center.y, center.z);
; 684  : 		assert("SpherePackFactory::RangeTest - RANGE ERROR");
; 685  : 		return;
; 686  : 	}
; 687  : #endif
; 688  : 	mCallback = callback;
; 689  : 	mRoot->RangeTest(center, radius, this, VS_PARTIAL);

  00003	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00008	8b 45 10	 mov	 eax, DWORD PTR _callback$[ebp]
  0000b	6a 01		 push	 1
  0000d	51		 push	 ecx
  0000e	51		 push	 ecx
  0000f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00014	ff 75 08	 push	 DWORD PTR _center$[ebp]
  00017	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0001a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001d	e8 00 00 00 00	 call	 ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest

; 690  : }

  00022	5d		 pop	 ebp
  00023	c2 0c 00	 ret	 12			; 0000000cH
?RangeTest@SpherePackFactory@@QAEXABVVector3d@@MPAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::RangeTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_l$1 = -20						; size = 4
_dir$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_callback$ = 16						; size = 4
?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z PROC ; SpherePackFactory::RayTrace, COMDAT
; _this$ = ecx

; 667  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b 7d 08	 mov	 edi, DWORD PTR _p1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00018	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 30   : 		x = a.x;

  0001b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 667  : {

  0001f	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 31   : 		y = a.y;

  00021	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]

; 32   : 		z = a.z;

  00026	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0002b	f3 0f 11 55 f4	 movss	 DWORD PTR _dir$[ebp+4], xmm2
  00030	f3 0f 11 4d f0	 movss	 DWORD PTR _dir$[ebp], xmm1

; 153  : 		return float(sqrtf( x * x + y * y + z * z ));

  00035	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00039	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 32   : 		z = a.z;

  0003d	f3 0f 11 45 f8	 movss	 DWORD PTR _dir$[ebp+8], xmm0

; 153  : 		return float(sqrtf( x * x + y * y + z * z ));

  00042	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00046	f3 0f 58 d1	 addss	 xmm2, xmm1
  0004a	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0004e	0f 5a c2	 cvtps2pd xmm0, xmm2
  00051	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00056	e8 00 00 00 00	 call	 _sqrt
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 197  : 		float l = Length(); // get length.

  0005b	d9 5d ec	 fstp	 DWORD PTR _l$1[ebp]

; 198  : 		if ( l != 0 )

  0005e	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _l$1[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00063	83 c4 08	 add	 esp, 8
  00066	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 198  : 		if ( l != 0 )

  00069	0f 2e c8	 ucomiss xmm1, xmm0
  0006c	9f		 lahf
  0006d	f6 c4 44	 test	 ah, 68			; 00000044H
  00070	7b 2c		 jnp	 SHORT $LN6@RayTrace

; 199  : 		{
; 200  : 			x /= l;

  00072	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _dir$[ebp]
  00077	f3 0f 5e c1	 divss	 xmm0, xmm1
  0007b	f3 0f 11 45 f0	 movss	 DWORD PTR _dir$[ebp], xmm0

; 201  : 			y /= l;

  00080	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _dir$[ebp+4]
  00085	f3 0f 5e c1	 divss	 xmm0, xmm1
  00089	f3 0f 11 45 f4	 movss	 DWORD PTR _dir$[ebp+4], xmm0

; 202  : 			z /= l;

  0008e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _dir$[ebp+8]
  00093	f3 0f 5e c1	 divss	 xmm0, xmm1
  00097	f3 0f 11 45 f8	 movss	 DWORD PTR _dir$[ebp+8], xmm0

; 203  : 		}

  0009c	eb 15		 jmp	 SHORT $LN7@RayTrace
$LN6@RayTrace:

; 204  : 		else
; 205  : 		{
; 206  : 			x = y = z = 0;

  0009e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+8], 0
  000a5	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp+4], 0
  000ac	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dir$[ebp], 0
$LN7@RayTrace:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 671  : 	mCallback = callback;

  000b3	8b 45 10	 mov	 eax, DWORD PTR _callback$[ebp]

; 672  : 	mRoot->RayTrace(p1, dir, dist, this);

  000b6	56		 push	 esi
  000b7	51		 push	 ecx
  000b8	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000bb	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000be	8d 45 f0	 lea	 eax, DWORD PTR _dir$[ebp]
  000c1	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  000c6	50		 push	 eax
  000c7	57		 push	 edi
  000c8	e8 00 00 00 00	 call	 ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace

; 673  : }

  000cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d0	5f		 pop	 edi
  000d1	33 cd		 xor	 ecx, ebp
  000d3	5e		 pop	 esi
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 0c 00	 ret	 12			; 0000000cH
?RayTrace@SpherePackFactory@@QAEXABVVector3d@@0PAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::RayTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_callback$ = 12						; size = 4
?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z PROC ; SpherePackFactory::FrustumTest, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 577  : 	// test case here, just traverse children.
; 578  : 	mCallback = callback;

  00003	8b 45 0c	 mov	 eax, DWORD PTR _callback$[ebp]

; 579  : 	mRoot->VisibilityTest(f, this, VS_PARTIAL);

  00006	6a 01		 push	 1
  00008	51		 push	 ecx
  00009	ff 75 08	 push	 DWORD PTR _f$[ebp]
  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	e8 00 00 00 00	 call	 ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest

; 580  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?FrustumTest@SpherePackFactory@@QAEXABVFrustum@@PAVSpherePackCallback@@@Z ENDP ; SpherePackFactory::FrustumTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z PROC	; SpherePackFactory::Remove, COMDAT
; _this$ = ecx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR _pack$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  0000a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0000d	a8 08		 test	 al, 8
  0000f	75 5c		 jne	 SHORT $LN1@Remove
  00011	a8 01		 test	 al, 1
  00013	74 0c		 je	 SHORT $LN3@Remove
  00015	a8 04		 test	 al, 4
  00017	74 08		 je	 SHORT $LN3@Remove
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 393  : 		Remove(link);

  00019	ff 76 44	 push	 DWORD PTR [esi+68]
  0001c	e8 00 00 00 00	 call	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN3@Remove:

; 394  : 	}
; 395  : 
; 396  : 	pack->Unlink();

  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 152  : 		if ( t == mCurrent ) { mCurrent = t->GetNext(); }

  00028	3b 77 14	 cmp	 esi, DWORD PTR [edi+20]
  0002b	75 06		 jne	 SHORT $LN29@Remove
  0002d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00030	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@Remove:

; 153  : 
; 154  : 		// first patch old linked list.. his previous now points to his next
; 155  : 		Type *prev = t->GetPrevious();

  00033	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00036	8b 46 18	 mov	 eax, DWORD PTR [esi+24]

; 156  : 
; 157  : 		if ( prev )

  00039	85 c9		 test	 ecx, ecx
  0003b	74 0c		 je	 SHORT $LN18@Remove

; 158  : 		{
; 159  : 			Type *next = t->GetNext();
; 160  : 			prev->SetNext( next ); // my previous now points to my next

  0003d	89 41 18	 mov	 DWORD PTR [ecx+24], eax

; 161  : 			if ( next ) { next->SetPrevious(prev); }

  00040	85 c0		 test	 eax, eax
  00042	74 13		 je	 SHORT $LN21@Remove
  00044	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 162  : 			// list is patched!
; 163  : 		}

  00047	eb 0e		 jmp	 SHORT $LN21@Remove
$LN18@Remove:

; 164  : 		else
; 165  : 		{
; 166  : 			Type *next = t->GetNext();
; 167  : 			mHead = next;

  00049	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 168  : 			if ( mHead ) { mHead->SetPrevious(0); }

  0004c	85 c0		 test	 eax, eax
  0004e	74 07		 je	 SHORT $LN21@Remove
  00050	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
$LN21@Remove:

; 169  : 		}
; 170  : 
; 171  : 		Type *temp = mFree; // old head of free list.

  00057	8b 47 20	 mov	 eax, DWORD PTR [edi+32]

; 172  : 		mFree = t; // new head of linked list.

  0005a	89 77 20	 mov	 DWORD PTR [edi+32], esi

; 173  : 		t->SetPrevious(0);

  0005d	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 174  : 		t->SetNext(temp);

  00064	89 46 18	 mov	 DWORD PTR [esi+24], eax

; 175  : 
; 176  : 		mUsedCount--;

  00067	ff 4f 24	 dec	 DWORD PTR [edi+36]

; 177  : 		mFreeCount++;

  0006a	ff 47 28	 inc	 DWORD PTR [edi+40]
$LN1@Remove:
  0006d	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 399  : }

  0006e	5e		 pop	 esi
  0006f	5d		 pop	 ebp
  00070	c2 04 00	 ret	 4
?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ENDP	; SpherePackFactory::Remove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Render@SpherePackFactory@@QAEXXZ
_TEXT	SEGMENT
?Render@SpherePackFactory@@QAEXXZ PROC			; SpherePackFactory::Render, COMDAT
; _this$ = ecx

; 183  : #if DEMO
; 184  : 	mRoot->Render(mRoot->GetColor());
; 185  : 	mLeaf->Render(mLeaf->GetColor());
; 186  : #endif
; 187  : }

  00000	c2 00 00	 ret	 0
?Render@SpherePackFactory@@QAEXXZ ENDP			; SpherePackFactory::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
tv759 = -24						; size = 4
$T2 = -20						; size = 4
tv753 = -20						; size = 4
_this$1$ = -16						; size = 4
_neardist1$1$ = -12					; size = 4
_nearest2$1$ = -8					; size = 4
_newsize$1$ = -4					; size = 4
_dist$1$ = 8						; size = 4
_pack$ = 8						; size = 4
_supersphere$ = 12					; size = 4
_node_size$ = 16					; size = 4
?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z PROC ; SpherePackFactory::Integrate, COMDAT
; _this$ = ecx

; 414  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 415  : 	// ok..time to integrate this sphere with the tree
; 416  : 	// first find which supersphere we are closest to the center of
; 417  : 
; 418  : 	SpherePack *search = supersphere->GetChildren();
; 419  : 
; 420  : 	SpherePack *nearest1 = 0;  // nearest supersphere we are completely
; 421  : 	float neardist1 = 1e38f;     // enclosed within

  00006	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@7e967699

; 422  : 
; 423  : 	SpherePack *nearest2 = 0; // supersphere we must grow the least to

  0000e	33 c0		 xor	 eax, eax
  00010	53		 push	 ebx
  00011	56		 push	 esi

; 424  : 	float neardist2 = 1e38f;    // add ourselves to.
; 425  : 
; 426  : 	//int scount = 1;
; 427  : 
; 428  : 	while (search)

  00012	8b 75 08	 mov	 esi, DWORD PTR _pack$[ebp]
  00015	33 db		 xor	 ebx, ebx
  00017	57		 push	 edi
  00018	8b 7d 0c	 mov	 edi, DWORD PTR _supersphere$[ebp]
  0001b	0f 28 cb	 movaps	 xmm1, xmm3
  0001e	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
  00021	f3 0f 11 5d f4	 movss	 DWORD PTR _neardist1$1$[ebp], xmm3
  00026	89 45 f8	 mov	 DWORD PTR _nearest2$1$[ebp], eax
  00029	8b 7f 24	 mov	 edi, DWORD PTR [edi+36]
  0002c	f3 0f 11 4d fc	 movss	 DWORD PTR _newsize$1$[ebp], xmm1
  00031	85 ff		 test	 edi, edi
  00033	0f 84 f9 02 00
	00		 je	 $LN128@Integrate
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Integrate:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00040	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00043	f6 c1 01	 test	 cl, 1
  00046	0f 84 13 01 00
	00		 je	 $LN11@Integrate
  0004c	f6 c1 08	 test	 cl, 8
  0004f	0f 85 0a 01 00
	00		 jne	 $LN11@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 430  : 		if (search->HasSpherePackFlag(SPF_SUPERSPHERE) && !search->HasSpherePackFlag(SPF_ROOTNODE) && search->GetChildCount())

  00055	83 7f 3c 00	 cmp	 DWORD PTR [edi+60], 0
  00059	0f 84 00 01 00
	00		 je	 $LN11@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 182  : 		float dx = a.x - x;

  0005f	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]

; 183  : 		float dy = a.y - y;

  00064	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]

; 184  : 		float dz = a.z - z;

  00069	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  0006e	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  00073	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]
  00078	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 185  : 		return dx * dx + dy * dy + dz * dz;

  0007d	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00081	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00085	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00089	f3 0f 58 d1	 addss	 xmm2, xmm1
  0008d	f3 0f 58 d0	 addss	 xmm2, xmm0
  00091	f3 0f 11 55 08	 movss	 DWORD PTR _dist$1$[ebp], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 435  : 			if (nearest1)

  00096	85 db		 test	 ebx, ebx
  00098	74 53		 je	 SHORT $LN5@Integrate

; 436  : 			{
; 437  : 				if (dist < neardist1)

  0009a	0f 2f da	 comiss	 xmm3, xmm2
  0009d	0f 86 ad 00 00
	00		 jbe	 $LN125@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  000a3	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000a8	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  000ab	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000b0	0f 5a c2	 cvtps2pd xmm0, xmm2
  000b3	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000b8	e8 00 00 00 00	 call	 _sqrt
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 442  : 					if (d <= search->GetRadius())

  000bd	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000c2	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 442  : 					if (d <= search->GetRadius())

  000c5	8b 45 f8	 mov	 eax, DWORD PTR _nearest2$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000c8	d9 5d ec	 fstp	 DWORD PTR tv753[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 440  : 					float d = sqrtf(dist) + pack->GetRadius();

  000cb	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR tv753[ebp]
  000d0	f3 0f 58 4d e8	 addss	 xmm1, DWORD PTR $T1[ebp]

; 442  : 					if (d <= search->GetRadius())

  000d5	0f 2f c1	 comiss	 xmm0, xmm1
  000d8	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _newsize$1$[ebp]
  000dd	72 6a		 jb	 SHORT $LN126@Integrate

; 443  : 					{
; 444  : 						neardist1 = dist;

  000df	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _dist$1$[ebp]

; 445  : 						nearest1  = search;

  000e4	8b df		 mov	 ebx, edi
  000e6	f3 0f 11 5d f4	 movss	 DWORD PTR _neardist1$1$[ebp], xmm3

; 446  : 					}
; 447  : 				}
; 448  : 			}

  000eb	eb 72		 jmp	 SHORT $LN11@Integrate
$LN5@Integrate:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  000ed	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000f2	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 45   : 	float GetRadius(void) const { return mRadius; };

  000f5	f3 0f 11 45 ec	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000fa	0f 5a c2	 cvtps2pd xmm0, xmm2
  000fd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00102	e8 00 00 00 00	 call	 _sqrt
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 454  : 				if (d < neardist2)

  00107	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _newsize$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0010c	83 c4 08	 add	 esp, 8
  0010f	d9 5d e8	 fstp	 DWORD PTR tv759[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 452  : 				float d = (sqrtf(dist) + pack->GetRadius()) - search->GetRadius();

  00112	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv759[ebp]
  00117	f3 0f 58 46 10	 addss	 xmm0, DWORD PTR [esi+16]
  0011c	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR $T2[ebp]

; 454  : 				if (d < neardist2)

  00121	0f 2f c8	 comiss	 xmm1, xmm0
  00124	76 31		 jbe	 SHORT $LN127@Integrate

; 455  : 				{
; 456  : 					if (d < 0)

  00126	0f 57 d2	 xorps	 xmm2, xmm2
  00129	0f 2f d0	 comiss	 xmm2, xmm0
  0012c	76 0e		 jbe	 SHORT $LN10@Integrate

; 457  : 					{
; 458  : 						neardist1 = dist;

  0012e	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _dist$1$[ebp]

; 459  : 						nearest1  = search;

  00133	8b df		 mov	 ebx, edi
  00135	f3 0f 11 5d f4	 movss	 DWORD PTR _neardist1$1$[ebp], xmm3

; 460  : 					}

  0013a	eb 20		 jmp	 SHORT $LN130@Integrate
$LN10@Integrate:

; 461  : 					else
; 462  : 					{
; 463  : 						neardist2 = d;

  0013c	0f 28 c8	 movaps	 xmm1, xmm0

; 464  : 						nearest2  = search;

  0013f	8b c7		 mov	 eax, edi
  00141	f3 0f 11 4d fc	 movss	 DWORD PTR _newsize$1$[ebp], xmm1
  00146	89 45 f8	 mov	 DWORD PTR _nearest2$1$[ebp], eax
$LN126@Integrate:

; 465  : 					}
; 466  : 				}
; 467  : 			}
; 468  : 		}
; 469  : 		search = search->_GetNextSibling();

  00149	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _neardist1$1$[ebp]
  0014e	eb 0f		 jmp	 SHORT $LN11@Integrate
$LN125@Integrate:

; 436  : 			{
; 437  : 				if (dist < neardist1)

  00150	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _newsize$1$[ebp]
  00155	eb 08		 jmp	 SHORT $LN11@Integrate
$LN127@Integrate:

; 454  : 				if (d < neardist2)

  00157	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _neardist1$1$[ebp]
$LN130@Integrate:

; 465  : 					}
; 466  : 				}
; 467  : 			}
; 468  : 		}
; 469  : 		search = search->_GetNextSibling();

  0015c	8b 45 f8	 mov	 eax, DWORD PTR _nearest2$1$[ebp]
$LN11@Integrate:
  0015f	8b 7f 28	 mov	 edi, DWORD PTR [edi+40]
  00162	85 ff		 test	 edi, edi
  00164	0f 85 d6 fe ff
	ff		 jne	 $LL2@Integrate

; 470  : 	}
; 471  : 
; 472  : 	// ok...now..on exit let's see what we got.
; 473  : 	if (nearest1)

  0016a	85 db		 test	 ebx, ebx
  0016c	0f 84 bd 00 00
	00		 je	 $LN12@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00172	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00175	85 c0		 test	 eax, eax
  00177	74 05		 je	 SHORT $LN40@Integrate

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  00179	89 38		 mov	 DWORD PTR [eax], edi

; 151  : 			mFifo1 = 0;

  0017b	89 7e 30	 mov	 DWORD PTR [esi+48], edi
$LN40@Integrate:

; 152  : 		}
; 153  : 
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  0017e	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00181	85 c0		 test	 eax, eax
  00183	74 0d		 je	 SHORT $LN41@Integrate

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  00185	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  0018b	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN41@Integrate:

; 158  : 		}
; 159  : 
; 160  : 		if ( mParent ) { mParent->LostChild(this); }

  00192	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00195	85 c9		 test	 ecx, ecx
  00197	74 06		 je	 SHORT $LN42@Integrate
  00199	56		 push	 esi
  0019a	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
$LN42@Integrate:

; 161  : 
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 
; 164  : 		mParent = 0; // got no father anymore

  0019f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 171  : 		SpherePack *my_child = mChildren;

  001a6	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]

; 172  : 		mChildren = pack; // new head of list

  001a9	89 73 24	 mov	 DWORD PTR [ebx+36], esi

; 174  : 		pack->SetNextSibling(my_child); // his next is my old next

  001ac	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous

  001af	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 176  : 		pack->SetParent(this);

  001b6	89 5e 20	 mov	 DWORD PTR [esi+32], ebx

; 177  : 
; 178  : 		if ( my_child ) { my_child->SetPrevSibling(pack); } // previous now this..

  001b9	85 c0		 test	 eax, eax
  001bb	74 03		 je	 SHORT $LN45@Integrate
  001bd	89 70 2c	 mov	 DWORD PTR [eax+44], esi
$LN45@Integrate:

; 179  : 
; 180  : 		mChildCount++;

  001c0	ff 43 3c	 inc	 DWORD PTR [ebx+60]
  001c3	0f 57 c9	 xorps	 xmm1, xmm1

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  001c6	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  001cb	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]

; 242  : 		if ( mBindingDistance <= 0 )

  001d0	0f 2f c8	 comiss	 xmm1, xmm0
  001d3	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
  001d8	72 09		 jb	 SHORT $LN48@Integrate

; 243  : 		{
; 244  : 			mBindingDistance = 0;

  001da	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 245  : 		}

  001e1	eb 09		 jmp	 SHORT $LN49@Integrate
$LN48@Integrate:

; 246  : 		else
; 247  : 		{
; 248  : 			mBindingDistance *= mBindingDistance;

  001e3	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001e7	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
$LN49@Integrate:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 481  : 		nearest1->Recompute(mSuperSphereGravy);

  001ec	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  001ef	51		 push	 ecx
  001f0	8b cb		 mov	 ecx, ebx
  001f2	f3 0f 10 40 3c	 movss	 xmm0, DWORD PTR [eax+60]
  001f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fc	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00201	f6 43 38 04	 test	 BYTE PTR [ebx+56], 4
  00205	0f 84 ae 02 00
	00		 je	 $LN21@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 492  : 			link->NewPosRadius(nearest1->GetPos(), nearest1->GetRadius());

  0020b	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00210	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00213	51		 push	 ecx
  00214	8b 4b 44	 mov	 ecx, DWORD PTR [ebx+68]
  00217	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021c	50		 push	 eax
  0021d	e8 00 00 00 00	 call	 ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ; SpherePack::NewPosRadius
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  00222	83 66 38 df	 and	 DWORD PTR [esi+56], -33	; ffffffdfH
  00226	5f		 pop	 edi
  00227	5e		 pop	 esi
  00228	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 572  : }

  00229	8b e5		 mov	 esp, ebp
  0022b	5d		 pop	 ebp
  0022c	c2 0c 00	 ret	 12			; 0000000cH
$LN12@Integrate:

; 493  : 		}
; 494  : 
; 495  : 	}
; 496  : 	else
; 497  : 	{
; 498  : 		bool newsphere = true;
; 499  : 
; 500  : 		if (nearest2)

  0022f	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00232	85 c0		 test	 eax, eax
  00234	0f 84 fa 00 00
	00		 je	 $LN121@Integrate

; 501  : 		{
; 502  : 			float newsize = neardist2 + nearest2->GetRadius() + mSuperSphereGravy;

  0023a	f3 0f 58 48 10	 addss	 xmm1, DWORD PTR [eax+16]

; 503  : 
; 504  : 			if (newsize <= node_size)

  0023f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _node_size$[ebp]
  00244	f3 0f 58 4b 3c	 addss	 xmm1, DWORD PTR [ebx+60]
  00249	0f 2f c1	 comiss	 xmm0, xmm1
  0024c	f3 0f 11 4d fc	 movss	 DWORD PTR _newsize$1$[ebp], xmm1
  00251	0f 82 dd 00 00
	00		 jb	 $LN121@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00257	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  0025a	85 c9		 test	 ecx, ecx
  0025c	74 0d		 je	 SHORT $LN92@Integrate

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0025e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 151  : 			mFifo1 = 0;

  00264	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN92@Integrate:

; 152  : 		}
; 153  : 
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  0026b	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0026e	85 c9		 test	 ecx, ecx
  00270	74 0d		 je	 SHORT $LN93@Integrate

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  00272	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 157  : 			mFifo2 = 0;

  00278	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN93@Integrate:

; 158  : 		}
; 159  : 
; 160  : 		if ( mParent ) { mParent->LostChild(this); }

  0027f	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00282	85 c9		 test	 ecx, ecx
  00284	74 0e		 je	 SHORT $LN94@Integrate
  00286	56		 push	 esi
  00287	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
  0028c	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _newsize$1$[ebp]
  00291	8b 45 f8	 mov	 eax, DWORD PTR _nearest2$1$[ebp]
$LN94@Integrate:

; 161  : 
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 
; 164  : 		mParent = 0; // got no father anymore

  00294	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 171  : 		SpherePack *my_child = mChildren;

  0029b	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  0029e	f3 0f 11 48 10	 movss	 DWORD PTR [eax+16], xmm1

; 68   : 		mRadius2 = radius * radius;

  002a3	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 172  : 		mChildren = pack; // new head of list

  002a7	89 70 24	 mov	 DWORD PTR [eax+36], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 68   : 		mRadius2 = radius * radius;

  002aa	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 174  : 		pack->SetNextSibling(my_child); // his next is my old next

  002af	89 4e 28	 mov	 DWORD PTR [esi+40], ecx

; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous

  002b2	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 176  : 		pack->SetParent(this);

  002b9	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 177  : 
; 178  : 		if ( my_child ) { my_child->SetPrevSibling(pack); } // previous now this..

  002bc	85 c9		 test	 ecx, ecx
  002be	74 03		 je	 SHORT $LN108@Integrate
  002c0	89 71 2c	 mov	 DWORD PTR [ecx+44], esi
$LN108@Integrate:

; 179  : 
; 180  : 		mChildCount++;

  002c3	ff 40 3c	 inc	 DWORD PTR [eax+60]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 510  : 				nearest2->Recompute(mSuperSphereGravy);

  002c6	f3 0f 10 43 3c	 movss	 xmm0, DWORD PTR [ebx+60]
  002cb	51		 push	 ecx
  002cc	8b c8		 mov	 ecx, eax
  002ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d3	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  002d8	8b 4d f8	 mov	 ecx, DWORD PTR _nearest2$1$[ebp]
  002db	0f 57 c9	 xorps	 xmm1, xmm1
  002de	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  002e3	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]

; 242  : 		if ( mBindingDistance <= 0 )

  002e8	0f 2f c8	 comiss	 xmm1, xmm0
  002eb	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
  002f0	72 09		 jb	 SHORT $LN101@Integrate

; 243  : 		{
; 244  : 			mBindingDistance = 0;

  002f2	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 245  : 		}

  002f9	eb 09		 jmp	 SHORT $LN102@Integrate
$LN101@Integrate:

; 246  : 		else
; 247  : 		{
; 248  : 			mBindingDistance *= mBindingDistance;

  002fb	f3 0f 59 c0	 mulss	 xmm0, xmm0
  002ff	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
$LN102@Integrate:

; 133  : 		if ( mFlags & flag ) { return true; }

  00304	f6 41 38 04	 test	 BYTE PTR [ecx+56], 4
  00308	0f 84 ab 01 00
	00		 je	 $LN21@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 522  : 					link->NewPosRadius(nearest2->GetPos(), nearest2->GetRadius());

  0030e	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00313	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00316	51		 push	 ecx
  00317	8b 49 44	 mov	 ecx, DWORD PTR [ecx+68]
  0031a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0031f	50		 push	 eax
  00320	e8 00 00 00 00	 call	 ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ; SpherePack::NewPosRadius
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  00325	83 66 38 df	 and	 DWORD PTR [esi+56], -33	; ffffffdfH
  00329	5f		 pop	 edi
  0032a	5e		 pop	 esi
  0032b	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 572  : }

  0032c	8b e5		 mov	 esp, ebp
  0032e	5d		 pop	 ebp
  0032f	c2 0c 00	 ret	 12			; 0000000cH
$LN128@Integrate:

; 424  : 	float neardist2 = 1e38f;    // add ourselves to.
; 425  : 
; 426  : 	//int scount = 1;
; 427  : 
; 428  : 	while (search)

  00332	8b d9		 mov	 ebx, ecx
$LN121@Integrate:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00334	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00337	85 c0		 test	 eax, eax
  00339	74 0d		 je	 SHORT $LN66@Integrate

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0033b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 151  : 			mFifo1 = 0;

  00341	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN66@Integrate:

; 152  : 		}
; 153  : 
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  00348	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0034b	85 c0		 test	 eax, eax
  0034d	74 0d		 je	 SHORT $LN67@Integrate

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  0034f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  00355	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN67@Integrate:

; 158  : 		}
; 159  : 
; 160  : 		if ( mParent ) { mParent->LostChild(this); }

  0035c	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0035f	85 c9		 test	 ecx, ecx
  00361	74 06		 je	 SHORT $LN68@Integrate
  00363	56		 push	 esi
  00364	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
$LN68@Integrate:

; 161  : 
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 
; 164  : 		mParent = 0; // got no father anymore

  00369	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 196  : 		if ( !mFree ) { return 0; }

  00370	8b 7b 20	 mov	 edi, DWORD PTR [ebx+32]
  00373	85 ff		 test	 edi, edi
  00375	74 29		 je	 SHORT $LN70@Integrate
$LN71@Integrate:

; 197  : 		Type *ret = mFree;
; 198  : 		mFree = ret->GetNext(); // new head of free list
; 199  : 		Type *temp = mHead; // current head of list

  00377	8b 4b 1c	 mov	 ecx, DWORD PTR [ebx+28]
  0037a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0037d	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 200  : 		mHead = ret;        // new head of list is this free one

  00380	89 7b 1c	 mov	 DWORD PTR [ebx+28], edi

; 201  : 		if ( temp ) { temp->SetPrevious(ret); }

  00383	85 c9		 test	 ecx, ecx
  00385	74 03		 je	 SHORT $LN72@Integrate
  00387	89 79 1c	 mov	 DWORD PTR [ecx+28], edi
$LN72@Integrate:

; 202  : 		mHead->SetNext(temp);

  0038a	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0038d	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 203  : 		mHead->SetPrevious(0);

  00390	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00393	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 204  : 		mUsedCount++;

  0039a	ff 43 24	 inc	 DWORD PTR [ebx+36]

; 205  : 		mFreeCount--;

  0039d	ff 4b 28	 dec	 DWORD PTR [ebx+40]
$LN70@Integrate:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 539  : 			parent->Init(this, pack->GetPos(), pack->GetRadius() + mSuperSphereGravy, 0, false);

  003a0	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  003a5	f3 0f 58 43 3c	 addss	 xmm0, DWORD PTR [ebx+60]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  003aa	8b 4d 0c	 mov	 ecx, DWORD PTR _supersphere$[ebp]

; 120  : 		mFlags            = 0;

  003ad	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  003b4	c6 47 4c 00	 mov	 BYTE PTR [edi+76], 0
  003b8	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  003bf	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  003c6	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  003cd	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 121  : 		mFifo1            = 0;

  003d4	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 122  : 		mFifo2            = 0;

  003db	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0

; 123  : 		mFactory          = factory;

  003e2	89 5f 48	 mov	 DWORD PTR [edi+72], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  003e5	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003e8	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 59   : 		y = A.y;

  003eb	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003ee	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 60   : 		z = A.z;

  003f1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003f4	89 47 0c	 mov	 DWORD PTR [edi+12], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  003f7	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  003fa	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0

; 68   : 		mRadius2 = radius * radius;

  003ff	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00403	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00408	f6 41 38 02	 test	 BYTE PTR [ecx+56], 2
  0040c	74 05		 je	 SHORT $LN81@Integrate

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  0040e	83 c8 02	 or	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 544  : 			}

  00411	eb 03		 jmp	 SHORT $LN20@Integrate
$LN81@Integrate:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00413	83 c8 04	 or	 eax, 4
$LN20@Integrate:
  00416	83 c8 01	 or	 eax, 1
  00419	89 47 38	 mov	 DWORD PTR [edi+56], eax

; 171  : 		SpherePack *my_child = mChildren;

  0041c	8b 47 24	 mov	 eax, DWORD PTR [edi+36]

; 172  : 		mChildren = pack; // new head of list

  0041f	89 77 24	 mov	 DWORD PTR [edi+36], esi

; 174  : 		pack->SetNextSibling(my_child); // his next is my old next

  00422	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous

  00425	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 176  : 		pack->SetParent(this);

  0042c	89 7e 20	 mov	 DWORD PTR [esi+32], edi

; 177  : 
; 178  : 		if ( my_child ) { my_child->SetPrevSibling(pack); } // previous now this..

  0042f	85 c0		 test	 eax, eax
  00431	74 03		 je	 SHORT $LN86@Integrate
  00433	89 70 2c	 mov	 DWORD PTR [eax+44], esi
$LN86@Integrate:

; 179  : 
; 180  : 		mChildCount++;

  00436	ff 47 3c	 inc	 DWORD PTR [edi+60]

; 171  : 		SpherePack *my_child = mChildren;

  00439	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]

; 172  : 		mChildren = pack; // new head of list

  0043c	89 79 24	 mov	 DWORD PTR [ecx+36], edi

; 174  : 		pack->SetNextSibling(my_child); // his next is my old next

  0043f	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 175  : 		pack->SetPrevSibling(0); // at head of list, no previous

  00442	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 176  : 		pack->SetParent(this);

  00449	89 4f 20	 mov	 DWORD PTR [edi+32], ecx

; 177  : 
; 178  : 		if ( my_child ) { my_child->SetPrevSibling(pack); } // previous now this..

  0044c	85 c0		 test	 eax, eax
  0044e	74 03		 je	 SHORT $LN89@Integrate
  00450	89 78 2c	 mov	 DWORD PTR [eax+44], edi
$LN89@Integrate:

; 179  : 
; 180  : 		mChildCount++;

  00453	ff 41 3c	 inc	 DWORD PTR [ecx+60]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 558  : 			parent->Recompute(mSuperSphereGravy);

  00456	f3 0f 10 43 3c	 movss	 xmm0, DWORD PTR [ebx+60]
  0045b	51		 push	 ecx
  0045c	8b cf		 mov	 ecx, edi
  0045e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00463	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00468	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  0046d	0f 57 c9	 xorps	 xmm1, xmm1
  00470	f3 0f 5c 46 10	 subss	 xmm0, DWORD PTR [esi+16]

; 242  : 		if ( mBindingDistance <= 0 )

  00475	0f 2f c8	 comiss	 xmm1, xmm0
  00478	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
  0047d	72 09		 jb	 SHORT $LN62@Integrate

; 243  : 		{
; 244  : 			mBindingDistance = 0;

  0047f	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 245  : 		}

  00486	eb 09		 jmp	 SHORT $LN63@Integrate
$LN62@Integrate:

; 246  : 		else
; 247  : 		{
; 248  : 			mBindingDistance *= mBindingDistance;

  00488	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0048c	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0
$LN63@Integrate:

; 133  : 		if ( mFlags & flag ) { return true; }

  00491	f6 47 38 04	 test	 BYTE PTR [edi+56], 4
  00495	74 22		 je	 SHORT $LN21@Integrate
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 564  : 				SpherePack *link = AddSphere_(parent->GetPos(), parent->GetRadius(), parent, true, SPF_ROOT_TREE);

  00497	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  0049c	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0049f	6a 02		 push	 2
  004a1	6a 01		 push	 1
  004a3	57		 push	 edi
  004a4	51		 push	 ecx
  004a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004aa	8b cb		 mov	 ecx, ebx
  004ac	50		 push	 eax
  004ad	e8 00 00 00 00	 call	 ?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z ; SpherePackFactory::AddSphere_
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 210  : 	void   SetUserData(void *data, bool isSphere) { mUserData = data; IS_SPHERE = isSphere;};

  004b2	89 47 44	 mov	 DWORD PTR [edi+68], eax
  004b5	c6 47 4c 01	 mov	 BYTE PTR [edi+76], 1
$LN21@Integrate:

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  004b9	83 66 38 df	 and	 DWORD PTR [esi+56], -33	; ffffffdfH
  004bd	5f		 pop	 edi
  004be	5e		 pop	 esi
  004bf	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 572  : }

  004c0	8b e5		 mov	 esp, ebp
  004c2	5d		 pop	 ebp
  004c3	c2 0c 00	 ret	 12			; 0000000cH
?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z ENDP ; SpherePackFactory::Integrate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_recompute$ = 8						; size = 4
?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z PROC ; SpherePackFactory::AddRecompute, COMDAT
; _this$ = ecx

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00004	8b 7d 08	 mov	 edi, DWORD PTR _recompute$[ebp]
  00007	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  0000a	a8 10		 test	 al, 16			; 00000010H
  0000c	75 43		 jne	 SHORT $LN4@AddRecompu
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 168  : 		if (recompute->GetChildCount())

  0000e	83 7f 3c 00	 cmp	 DWORD PTR [edi+60], 0
  00012	74 37		 je	 SHORT $LN3@AddRecompu
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00014	53		 push	 ebx
  00015	83 c8 10	 or	 eax, 16			; 00000010H

; 325  : 		if ( mSP == mFifoSize ) { mSP = 0; }

  00018	33 db		 xor	 ebx, ebx

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  0001a	89 47 38	 mov	 DWORD PTR [edi+56], eax
  0001d	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 171  : 			SpherePack **fifo = mRecompute->Push(recompute);

  0001e	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 322  : 		SpherePack **ret = &mFifo[mSP];

  00021	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00024	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00027	ff 46 04	 inc	 DWORD PTR [esi+4]

; 323  : 		mFifo[mSP] = sphere;

  0002a	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi

; 324  : 		mSP++;

  0002d	ff 46 08	 inc	 DWORD PTR [esi+8]
  00030	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00033	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 325  : 		if ( mSP == mFifoSize ) { mSP = 0; }

  00036	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00039	8b c8		 mov	 ecx, eax
  0003b	0f 44 cb	 cmove	 ecx, ebx
  0003e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 172  : 			recompute->SetFifo1(fifo);

  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	89 57 30	 mov	 DWORD PTR [edi+48], edx
  00046	5f		 pop	 edi

; 177  : 		}
; 178  : 	}
; 179  : }

  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN3@AddRecompu:

; 173  : 		}
; 174  : 		else
; 175  : 		{
; 176  : 			Remove(recompute);

  0004b	57		 push	 edi
  0004c	e8 00 00 00 00	 call	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN4@AddRecompu:
  00051	5f		 pop	 edi

; 177  : 		}
; 178  : 	}
; 179  : }

  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ENDP ; SpherePackFactory::AddRecompute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z
_TEXT	SEGMENT
_pack$ = 8						; size = 4
?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z PROC ; SpherePackFactory::AddIntegrate, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00006	8b 7d 08	 mov	 edi, DWORD PTR _pack$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 149  : {

  00009	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  0000b	f6 47 38 02	 test	 BYTE PTR [edi+56], 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 150  : 	if (pack->HasSpherePackFlag(SPF_ROOT_TREE))

  0000f	74 05		 je	 SHORT $LN2@AddIntegra

; 151  : 	{
; 152  : 		mRoot->AddChild(pack);

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 153  : 	}

  00014	eb 03		 jmp	 SHORT $LN21@AddIntegra
$LN2@AddIntegra:

; 154  : 	else
; 155  : 	{
; 156  : 		mLeaf->AddChild(pack);

  00016	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$LN21@AddIntegra:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00019	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  0001c	89 78 24	 mov	 DWORD PTR [eax+36], edi
  0001f	89 47 20	 mov	 DWORD PTR [edi+32], eax
  00022	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00029	89 4f 28	 mov	 DWORD PTR [edi+40], ecx
  0002c	85 c9		 test	 ecx, ecx
  0002e	74 03		 je	 SHORT $LN17@AddIntegra
  00030	89 79 2c	 mov	 DWORD PTR [ecx+44], edi
$LN17@AddIntegra:
  00033	ff 40 3c	 inc	 DWORD PTR [eax+60]

; 325  : 		if ( mSP == mFifoSize ) { mSP = 0; }

  00036	33 db		 xor	 ebx, ebx

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00038	83 4f 38 20	 or	 DWORD PTR [edi+56], 32	; 00000020H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 160  : 	SpherePack **fifo = mIntegrate->Push(pack); // add it to the integration stack.

  0003c	8b 76 2c	 mov	 esi, DWORD PTR [esi+44]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 322  : 		SpherePack **ret = &mFifo[mSP];

  0003f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00042	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00045	ff 46 04	 inc	 DWORD PTR [esi+4]

; 323  : 		mFifo[mSP] = sphere;

  00048	89 3c 88	 mov	 DWORD PTR [eax+ecx*4], edi

; 324  : 		mSP++;

  0004b	ff 46 08	 inc	 DWORD PTR [esi+8]
  0004e	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00051	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 325  : 		if ( mSP == mFifoSize ) { mSP = 0; }

  00054	3b 46 10	 cmp	 eax, DWORD PTR [esi+16]
  00057	8b c8		 mov	 ecx, eax
  00059	0f 44 cb	 cmove	 ecx, ebx
  0005c	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 161  : 	pack->SetFifo2(fifo);

  0005f	89 57 34	 mov	 DWORD PTR [edi+52], edx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx

; 162  : }

  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ENDP ; SpherePackFactory::AddIntegrate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_radius$ = 12						; size = 4
_userdata$ = 16						; size = 4
_isSphere$ = 20						; size = 1
_flags$ = 24						; size = 4
?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z PROC ; SpherePackFactory::AddSphere_, COMDAT
; _this$ = ecx

; 123  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 196  : 		if ( !mFree ) { return 0; }

  00007	8b 7e 20	 mov	 edi, DWORD PTR [esi+32]
  0000a	85 ff		 test	 edi, edi
  0000c	75 08		 jne	 SHORT $LN7@AddSphere_
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 145  : 	return pack;

  0000e	5f		 pop	 edi
  0000f	33 c0		 xor	 eax, eax

; 146  : }

  00011	5e		 pop	 esi
  00012	5d		 pop	 ebp
  00013	c2 14 00	 ret	 20			; 00000014H
$LN7@AddSphere_:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 199  : 		Type *temp = mHead; // current head of list

  00016	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00019	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0001c	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 200  : 		mHead = ret;        // new head of list is this free one

  0001f	89 7e 1c	 mov	 DWORD PTR [esi+28], edi

; 201  : 		if ( temp ) { temp->SetPrevious(ret); }

  00022	85 c9		 test	 ecx, ecx
  00024	74 03		 je	 SHORT $LN8@AddSphere_
  00026	89 79 1c	 mov	 DWORD PTR [ecx+28], edi
$LN8@AddSphere_:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 131  : 		if (flags & SPF_ROOT_TREE)

  00029	ff 75 14	 push	 DWORD PTR _isSphere$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 202  : 		mHead->SetNext(temp);

  0002c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 131  : 		if (flags & SPF_ROOT_TREE)

  0002f	ff 75 10	 push	 DWORD PTR _userdata$[ebp]
  00032	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _radius$[ebp]
  00037	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 202  : 		mHead->SetNext(temp);

  00038	89 48 18	 mov	 DWORD PTR [eax+24], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 131  : 		if (flags & SPF_ROOT_TREE)

  0003b	8b cf		 mov	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 203  : 		mHead->SetPrevious(0);

  0003d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 131  : 		if (flags & SPF_ROOT_TREE)

  00040	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00045	ff 75 08	 push	 DWORD PTR _pos$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 203  : 		mHead->SetPrevious(0);

  00048	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 204  : 		mUsedCount++;

  0004f	ff 46 24	 inc	 DWORD PTR [esi+36]

; 205  : 		mFreeCount--;

  00052	ff 4e 28	 dec	 DWORD PTR [esi+40]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 131  : 		if (flags & SPF_ROOT_TREE)

  00055	56		 push	 esi
  00056	e8 00 00 00 00	 call	 ?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z ; SpherePack::Init
  0005b	f6 45 18 02	 test	 BYTE PTR _flags$[ebp], 2
  0005f	8b ce		 mov	 ecx, esi
  00061	57		 push	 edi
  00062	74 11		 je	 SHORT $LN3@AddSphere_
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00064	83 4f 38 02	 or	 DWORD PTR [edi+56], 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 146  : }

  00068	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
  0006d	8b c7		 mov	 eax, edi
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp
  00072	c2 14 00	 ret	 20			; 00000014H
$LN3@AddSphere_:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00075	83 4f 38 04	 or	 DWORD PTR [edi+56], 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 146  : }

  00079	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
  0007e	8b c7		 mov	 eax, edi
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5d		 pop	 ebp
  00083	c2 14 00	 ret	 20			; 00000014H
?AddSphere_@SpherePackFactory@@QAEPAVSpherePack@@ABVVector3d@@MPAX_NH@Z ENDP ; SpherePackFactory::AddSphere_
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Process@SpherePackFactory@@QAEXXZ
_TEXT	SEGMENT
_maxintegrate$1$ = -8					; size = 4
_maxrecompute$1$ = -8					; size = 4
_i$1$ = -4						; size = 4
_i$1$ = -4						; size = 4
?Process@SpherePackFactory@@QAEXXZ PROC			; SpherePackFactory::Process, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 75   : 	{
; 76   : 		// First recompute anybody that needs to be recomputed!!
; 77   : 		// When leaf node spheres exit their parent sphere, then the parent sphere needs to be rebalanced.  In fact,it may now be empty and
; 78   : 		// need to be removed.
; 79   : 		// This is the location where (n) number of spheres in the recomputation FIFO are allowed to be rebalanced in the tree.
; 80   : 		int maxrecompute = mRecompute->GetCount();
; 81   : 		for (int i = 0; i < maxrecompute; ++i)

  0000b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00012	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00015	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00018	89 45 f8	 mov	 DWORD PTR _maxrecompute$1$[ebp], eax
  0001b	85 c0		 test	 eax, eax
  0001d	7e 66		 jle	 SHORT $LN52@Process
  0001f	90		 npad	 1
$LL4@Process:

; 82   : 		{
; 83   : 			SpherePack * pack = mRecompute->Pop();

  00020	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 331  : 		while ( mSP != mBottom )

  00023	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00026	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00029	3b d8		 cmp	 ebx, eax
$LN54@Process:

; 332  : 		{
; 333  : 			mCount--;

  0002b	74 58		 je	 SHORT $LN52@Process
  0002d	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00030	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 334  : 			SpherePack *ret = mFifo[mBottom];

  00033	8b 34 82	 mov	 esi, DWORD PTR [edx+eax*4]

; 335  : 			mBottom++;

  00036	40		 inc	 eax

; 336  : 			if ( mBottom == mFifoSize ) { mBottom = 0; }

  00037	8b d0		 mov	 edx, eax
  00039	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0003c	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0003f	75 0b		 jne	 SHORT $LN26@Process
  00041	33 d2		 xor	 edx, edx
  00043	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  0004a	33 c0		 xor	 eax, eax
$LN26@Process:

; 337  : 			if ( ret ) { return ret; }

  0004c	85 f6		 test	 esi, esi
  0004e	75 04		 jne	 SHORT $LN33@Process

; 331  : 		while ( mSP != mBottom )

  00050	3b da		 cmp	 ebx, edx
  00052	eb d7		 jmp	 SHORT $LN54@Process
$LN33@Process:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 85   : 			pack->SetFifo1(0); // no longer on the fifo!!

  00054	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0

; 86   : 			bool kill = pack->Recompute(mSuperSphereGravy);

  0005b	f3 0f 10 47 3c	 movss	 xmm0, DWORD PTR [edi+60]
  00060	51		 push	 ecx
  00061	8b ce		 mov	 ecx, esi
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	e8 00 00 00 00	 call	 ?Recompute@SpherePack@@QAE_NM@Z ; SpherePack::Recompute

; 87   : 			if (kill) { Remove(pack); }

  0006d	84 c0		 test	 al, al
  0006f	74 08		 je	 SHORT $LN2@Process
  00071	56		 push	 esi
  00072	8b cf		 mov	 ecx, edi
  00074	e8 00 00 00 00	 call	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN2@Process:

; 75   : 	{
; 76   : 		// First recompute anybody that needs to be recomputed!!
; 77   : 		// When leaf node spheres exit their parent sphere, then the parent sphere needs to be rebalanced.  In fact,it may now be empty and
; 78   : 		// need to be removed.
; 79   : 		// This is the location where (n) number of spheres in the recomputation FIFO are allowed to be rebalanced in the tree.
; 80   : 		int maxrecompute = mRecompute->GetCount();
; 81   : 		for (int i = 0; i < maxrecompute; ++i)

  00079	8b 55 fc	 mov	 edx, DWORD PTR _i$1$[ebp]
  0007c	42		 inc	 edx
  0007d	89 55 fc	 mov	 DWORD PTR _i$1$[ebp], edx
  00080	3b 55 f8	 cmp	 edx, DWORD PTR _maxrecompute$1$[ebp]
  00083	7c 9b		 jl	 SHORT $LL4@Process
$LN52@Process:

; 88   : 		}
; 89   : 	}
; 90   : 
; 91   : 	{
; 92   : 		// Now, process the integration step.
; 93   : 		int maxintegrate = mIntegrate->GetCount();

  00085	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]

; 94   : 
; 95   : 		for (int i = 0; i < maxintegrate; ++i)

  00088	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  0008f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00092	89 45 f8	 mov	 DWORD PTR _maxintegrate$1$[ebp], eax
  00095	85 c0		 test	 eax, eax
  00097	7e 78		 jle	 SHORT $LN53@Process
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Process:

; 96   : 		{
; 97   : 			SpherePack * pack = mIntegrate->Pop();

  000a0	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 331  : 		while ( mSP != mBottom )

  000a3	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  000a6	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000a9	3b f0		 cmp	 esi, eax
  000ab	74 64		 je	 SHORT $LN53@Process

; 334  : 			SpherePack *ret = mFifo[mBottom];

  000ad	8b 59 14	 mov	 ebx, DWORD PTR [ecx+20]
$LL15@Process:

; 332  : 		{
; 333  : 			mCount--;

  000b0	ff 49 04	 dec	 DWORD PTR [ecx+4]

; 334  : 			SpherePack *ret = mFifo[mBottom];

  000b3	8b 14 83	 mov	 edx, DWORD PTR [ebx+eax*4]

; 335  : 			mBottom++;

  000b6	40		 inc	 eax
  000b7	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 336  : 			if ( mBottom == mFifoSize ) { mBottom = 0; }

  000ba	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  000bd	75 09		 jne	 SHORT $LN43@Process
  000bf	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
  000c6	33 c0		 xor	 eax, eax
$LN43@Process:

; 337  : 			if ( ret ) { return ret; }

  000c8	85 d2		 test	 edx, edx
  000ca	75 0b		 jne	 SHORT $LN35@Process

; 331  : 		while ( mSP != mBottom )

  000cc	3b f0		 cmp	 esi, eax
  000ce	75 e0		 jne	 SHORT $LL15@Process
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 115  : }

  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN35@Process:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  000d7	f6 42 38 02	 test	 BYTE PTR [edx+56], 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 102  : 			pack->SetFifo2(0);

  000db	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  000e2	74 0a		 je	 SHORT $LN11@Process
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 106  : 				Integrate(pack, mRoot, mMaxRootSize);    // integrate this one single dude against the root node.

  000e4	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e7	f3 0f 10 47 34	 movss	 xmm0, DWORD PTR [edi+52]

; 107  : 			}

  000ec	eb 08		 jmp	 SHORT $LN5@Process
$LN11@Process:

; 108  : 			else
; 109  : 			{
; 110  : 				Integrate(pack, mLeaf, mMaxLeafSize);    // integrate this one single dude against the root node.

  000ee	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  000f1	f3 0f 10 47 38	 movss	 xmm0, DWORD PTR [edi+56]
$LN5@Process:

; 94   : 
; 95   : 		for (int i = 0; i < maxintegrate; ++i)

  000f6	51		 push	 ecx
  000f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fc	8b cf		 mov	 ecx, edi
  000fe	50		 push	 eax
  000ff	52		 push	 edx
  00100	e8 00 00 00 00	 call	 ?Integrate@SpherePackFactory@@QAEXPAVSpherePack@@0M@Z ; SpherePackFactory::Integrate
  00105	8b 55 fc	 mov	 edx, DWORD PTR _i$1$[ebp]
  00108	42		 inc	 edx
  00109	89 55 fc	 mov	 DWORD PTR _i$1$[ebp], edx
  0010c	3b 55 f8	 cmp	 edx, DWORD PTR _maxintegrate$1$[ebp]
  0010f	7c 8f		 jl	 SHORT $LL7@Process
$LN53@Process:
  00111	5f		 pop	 edi

; 115  : }

  00112	5e		 pop	 esi
  00113	5b		 pop	 ebx
  00114	8b e5		 mov	 esp, ebp
  00116	5d		 pop	 ebp
  00117	c3		 ret	 0
?Process@SpherePackFactory@@QAEXXZ ENDP			; SpherePackFactory::Process
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ??1SpherePackFactory@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackFactory@@UAE@XZ PROC			; SpherePackFactory::~SpherePackFactory, COMDAT
; _this$ = ecx

; 68   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 69   : 	delete mIntegrate;  // free up integration fifo

  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFactory@@6B@
  0000c	85 c9		 test	 ecx, ecx
  0000e	74 06		 je	 SHORT $LN3@SpherePack
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	6a 01		 push	 1
  00014	ff 10		 call	 DWORD PTR [eax]
$LN3@SpherePack:

; 70   : 	delete mRecompute;  // free up recomputation fifo.

  00016	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00019	85 c9		 test	 ecx, ecx
  0001b	74 06		 je	 SHORT $LN5@SpherePack
  0001d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001f	6a 01		 push	 1
  00021	ff 10		 call	 DWORD PTR [eax]
$LN5@SpherePack:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 34   : 		if (mData)

  00023	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00026	85 c9		 test	 ecx, ecx
  00028	74 22		 je	 SHORT $LN14@SpherePack

; 36   : 			delete [] mData;

  0002a	83 79 fc 00	 cmp	 DWORD PTR [ecx-4], 0
  0002e	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00031	74 0e		 je	 SHORT $LN10@SpherePack
  00033	8b 01		 mov	 eax, DWORD PTR [ecx]
  00035	6a 03		 push	 3
  00037	ff 10		 call	 DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 71   : }

  00039	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
$LN10@SpherePack:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 36   : 			delete [] mData;

  00041	6a 04		 push	 4
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00049	83 c4 08	 add	 esp, 8
$LN14@SpherePack:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 71   : }

  0004c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00052	5e		 pop	 esi
  00053	c3		 ret	 0
??1SpherePackFactory@@UAE@XZ ENDP			; SpherePackFactory::~SpherePackFactory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ??0SpherePackFactory@@QAE@HMMM@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_maxspheres$1$ = 8					; size = 4
_maxspheres$ = 8					; size = 4
$T2 = 12						; size = 4
$T3 = 12						; size = 4
$T4 = 12						; size = 4
_rootsize$ = 12						; size = 4
$T5 = 16						; size = 4
_leafsize$ = 16						; size = 4
_gravy$ = 20						; size = 4
??0SpherePackFactory@@QAE@HMMM@Z PROC			; SpherePackFactory::SpherePackFactory, COMDAT
; _this$ = ecx

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SpherePackFactory@@QAE@HMMM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002b	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  0002e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackFactory@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 24   : 		mHead = 0;

  0003b	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 25   : 		mFree = 0;

  00042	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 26   : 		mData = 0;

  00049	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 27   : 		mCurrent = 0;

  00050	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 28   : 		mFreeCount = 0;

  00057	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 29   : 		mUsedCount = 0;

  0005e	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 21   : {

  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 22   : 	NANOBEGIN

  00069	eb		 DB	 -21			; ffffffebH
  0006a	03		 DB	 3
  0006b	d6		 DB	 -42			; ffffffd6H
  0006c	d7		 DB	 -41			; ffffffd7H
  0006d	01		 DB	 1

; 23   : 	maxspheres *= 4; // include room for both trees, the root node and leaf node tree, and the superspheres
; 24   : 	mMaxRootSize      = rootsize;

  0006e	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00071	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _rootsize$[ebp]
  00076	8b 45 08	 mov	 eax, DWORD PTR _maxspheres$[ebp]

; 27   : 	mIntegrate        = new SpherePackFifo(maxspheres);

  00079	6a 18		 push	 24			; 00000018H
  0007b	f3 0f 11 43 34	 movss	 DWORD PTR [ebx+52], xmm0
  00080	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _leafsize$[ebp]
  00085	f3 0f 11 43 38	 movss	 DWORD PTR [ebx+56], xmm0
  0008a	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00091	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _gravy$[ebp]
  00096	89 7d 08	 mov	 DWORD PTR _maxspheres$1$[ebp], edi
  00099	f3 0f 11 43 3c	 movss	 DWORD PTR [ebx+60], xmm0
  0009e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a3	8b f0		 mov	 esi, eax
  000a5	83 c4 04	 add	 esp, 4
  000a8	89 75 0c	 mov	 DWORD PTR $T4[ebp], esi
  000ab	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000af	ba 04 00 00 00	 mov	 edx, 4
  000b4	85 f6		 test	 esi, esi
  000b6	74 39		 je	 SHORT $LN3@SpherePack
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 311  : 		mFifo = new SpherePack *[mFifoSize];

  000b8	33 c9		 xor	 ecx, ecx
  000ba	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFifo@@6B@
  000c0	8b c7		 mov	 eax, edi
  000c2	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  000c9	f7 e2		 mul	 edx
  000cb	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000d2	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000d9	0f 90 c1	 seto	 cl
  000dc	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  000df	f7 d9		 neg	 ecx
  000e1	0b c8		 or	 ecx, eax
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000e9	83 c4 04	 add	 esp, 4
  000ec	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 27   : 	mIntegrate        = new SpherePackFifo(maxspheres);

  000ef	eb 02		 jmp	 SHORT $LN4@SpherePack
$LN3@SpherePack:
  000f1	33 f6		 xor	 esi, esi
$LN4@SpherePack:

; 28   : 	mRecompute        = new SpherePackFifo(maxspheres);

  000f3	6a 18		 push	 24			; 00000018H
  000f5	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f9	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  000fc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00101	8b f0		 mov	 esi, eax
  00103	83 c4 04	 add	 esp, 4
  00106	89 75 0c	 mov	 DWORD PTR $T3[ebp], esi
  00109	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0010d	85 f6		 test	 esi, esi
  0010f	74 3e		 je	 SHORT $LN5@SpherePack
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 311  : 		mFifo = new SpherePack *[mFifoSize];

  00111	33 c9		 xor	 ecx, ecx
  00113	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFifo@@6B@
  00119	8b c7		 mov	 eax, edi
  0011b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00122	ba 04 00 00 00	 mov	 edx, 4
  00127	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0012e	f7 e2		 mul	 edx
  00130	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00137	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0013a	0f 90 c1	 seto	 cl
  0013d	f7 d9		 neg	 ecx
  0013f	0b c8		 or	 ecx, eax
  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00147	83 c4 04	 add	 esp, 4
  0014a	89 46 14	 mov	 DWORD PTR [esi+20], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 28   : 	mRecompute        = new SpherePackFifo(maxspheres);

  0014d	eb 02		 jmp	 SHORT $LN6@SpherePack
$LN5@SpherePack:
  0014f	33 f6		 xor	 esi, esi
$LN6@SpherePack:
  00151	89 73 30	 mov	 DWORD PTR [ebx+48], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 59   : 		if (mData)

  00154	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 28   : 	mRecompute        = new SpherePackFifo(maxspheres);

  00157	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 59   : 		if (mData)

  0015b	85 c9		 test	 ecx, ecx
  0015d	74 1c		 je	 SHORT $LN24@SpherePack

; 60   : 		{
; 61   : 			delete [] mData;    // delete any previous incarnation.

  0015f	83 79 fc 00	 cmp	 DWORD PTR [ecx-4], 0
  00163	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00166	74 08		 je	 SHORT $LN23@SpherePack
  00168	8b 01		 mov	 eax, DWORD PTR [ecx]
  0016a	6a 03		 push	 3
  0016c	ff 10		 call	 DWORD PTR [eax]
  0016e	eb 0b		 jmp	 SHORT $LN24@SpherePack
$LN23@SpherePack:
  00170	6a 04		 push	 4
  00172	50		 push	 eax
  00173	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  00178	83 c4 08	 add	 esp, 8
$LN24@SpherePack:

; 62   : 		}
; 63   : 		mMaxItems = maxitems;
; 64   : 		mData = new Type[mMaxItems];

  0017b	33 c9		 xor	 ecx, ecx
  0017d	89 7b 10	 mov	 DWORD PTR [ebx+16], edi
  00180	8b c7		 mov	 eax, edi
  00182	89 7d 0c	 mov	 DWORD PTR $T2[ebp], edi
  00185	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0018a	f7 e2		 mul	 edx
  0018c	0f 90 c1	 seto	 cl
  0018f	f7 d9		 neg	 ecx
  00191	0b c8		 or	 ecx, eax
  00193	33 c0		 xor	 eax, eax
  00195	83 c1 04	 add	 ecx, 4
  00198	0f 92 c0	 setb	 al
  0019b	f7 d8		 neg	 eax
  0019d	0b c1		 or	 eax, ecx
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  001a5	83 c4 04	 add	 esp, 4
  001a8	89 45 10	 mov	 DWORD PTR $T5[ebp], eax
  001ab	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  001af	85 c0		 test	 eax, eax
  001b1	74 1a		 je	 SHORT $LN27@SpherePack
  001b3	68 00 00 00 00	 push	 OFFSET ??1SpherePack@@UAE@XZ ; SpherePack::~SpherePack
  001b8	68 00 00 00 00	 push	 OFFSET ??0SpherePack@@QAE@XZ ; SpherePack::SpherePack
  001bd	57		 push	 edi
  001be	8d 70 04	 lea	 esi, DWORD PTR [eax+4]
  001c1	89 38		 mov	 DWORD PTR [eax], edi
  001c3	6a 50		 push	 80			; 00000050H
  001c5	56		 push	 esi
  001c6	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  001cb	eb 02		 jmp	 SHORT $LN28@SpherePack
$LN27@SpherePack:
  001cd	33 f6		 xor	 esi, esi
$LN28@SpherePack:

; 65   : 		mFree = mData;
; 66   : 		mHead = 0;
; 67   : 		int loopValue = (mMaxItems - 1);

  001cf	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  001d2	89 73 18	 mov	 DWORD PTR [ebx+24], esi
  001d5	4f		 dec	 edi
  001d6	89 73 20	 mov	 DWORD PTR [ebx+32], esi
  001d9	33 f6		 xor	 esi, esi
  001db	c7 43 1c 00 00
	00 00		 mov	 DWORD PTR [ebx+28], 0

; 68   : 		for (int i = 0; i < loopValue; i++)

  001e2	85 ff		 test	 edi, edi
  001e4	7e 2b		 jle	 SHORT $LN17@SpherePack
$LL18@SpherePack:

; 69   : 		{
; 70   : 			mData[i].SetNext( &mData[i + 1] );

  001e6	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  001e9	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  001ec	c1 e2 04	 shl	 edx, 4
  001ef	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]
  001f2	03 c2		 add	 eax, edx
  001f4	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax
  001f8	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]

; 71   : 			if ( i == 0 )

  001fb	85 f6		 test	 esi, esi
  001fd	75 04		 jne	 SHORT $LN20@SpherePack

; 72   : 			{
; 73   : 				mData[i].SetPrevious( 0 );

  001ff	33 c9		 xor	 ecx, ecx

; 74   : 			}

  00201	eb 05		 jmp	 SHORT $LN16@SpherePack
$LN20@SpherePack:

; 75   : 			else
; 76   : 			{
; 77   : 				mData[i].SetPrevious( &mData[i - 1] );

  00203	8d 48 b0	 lea	 ecx, DWORD PTR [eax-80]
  00206	03 ca		 add	 ecx, edx
$LN16@SpherePack:

; 68   : 		for (int i = 0; i < loopValue; i++)

  00208	46		 inc	 esi
  00209	89 4c 10 1c	 mov	 DWORD PTR [eax+edx+28], ecx
  0020d	3b f7		 cmp	 esi, edi
  0020f	7c d5		 jl	 SHORT $LL18@SpherePack
$LN17@SpherePack:

; 78   : 			}
; 79   : 		}
; 80   : 
; 81   : 		mData[loopValue].SetNext(0);

  00211	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00214	8d 14 bf	 lea	 edx, DWORD PTR [edi+edi*4]
  00217	c1 e2 04	 shl	 edx, 4
  0021a	c7 44 02 18 00
	00 00 00	 mov	 DWORD PTR [edx+eax+24], 0

; 82   : 		mData[loopValue].SetPrevious( &mData[loopValue - 1] );

  00222	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00225	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  00228	03 c2		 add	 eax, edx
  0022a	89 44 0a 1c	 mov	 DWORD PTR [edx+ecx+28], eax

; 83   : 		mCurrent = 0; // there is no current, currently. <g>
; 84   : 		mFreeCount = maxitems;

  0022e	8b 45 08	 mov	 eax, DWORD PTR _maxspheres$1$[ebp]
  00231	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
  00238	89 43 28	 mov	 DWORD PTR [ebx+40], eax

; 85   : 		mUsedCount = 0;

  0023b	c7 43 24 00 00
	00 00		 mov	 DWORD PTR [ebx+36], 0

; 196  : 		if ( !mFree ) { return 0; }

  00242	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  00245	85 c9		 test	 ecx, ecx
  00247	74 29		 je	 SHORT $LN32@SpherePack
$LN33@SpherePack:

; 197  : 		Type *ret = mFree;
; 198  : 		mFree = ret->GetNext(); // new head of free list
; 199  : 		Type *temp = mHead; // current head of list

  00249	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  0024c	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0024f	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 200  : 		mHead = ret;        // new head of list is this free one

  00252	89 4b 1c	 mov	 DWORD PTR [ebx+28], ecx

; 201  : 		if ( temp ) { temp->SetPrevious(ret); }

  00255	85 d2		 test	 edx, edx
  00257	74 03		 je	 SHORT $LN34@SpherePack
  00259	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN34@SpherePack:

; 202  : 		mHead->SetNext(temp);

  0025c	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  0025f	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 203  : 		mHead->SetPrevious(0);

  00262	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00265	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 204  : 		mUsedCount++;

  0026c	ff 43 24	 inc	 DWORD PTR [ebx+36]

; 205  : 		mFreeCount--;

  0026f	ff 4b 28	 dec	 DWORD PTR [ebx+40]
$LN32@SpherePack:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  00272	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@4ac80000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 34   : 	mRoot = mSpheres.GetFreeLink(); // initially empty

  0027a	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 68   : 		mRadius2 = radius * radius;

  0027d	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  00281	c6 41 4c 00	 mov	 BYTE PTR [ecx+76], 0

; 116  : 		mUserData         = userdata;

  00285	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 117  : 		mParent           = 0;

  0028c	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 118  : 		mNextSibling      = 0;

  00293	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 119  : 		mPrevSibling      = 0;

  0029a	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 120  : 		mFlags            = 0;

  002a1	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 121  : 		mFifo1            = 0;

  002a8	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 122  : 		mFifo2            = 0;

  002af	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 123  : 		mFactory          = factory;

  002b6	89 59 48	 mov	 DWORD PTR [ecx+72], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  002b9	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 59   : 		y = A.y;

  002c0	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 60   : 		z = A.z;

  002c7	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  002ce	c7 41 10 00 00
	c8 4a		 mov	 DWORD PTR [ecx+16], 1254621184 ; 4ac80000H

; 68   : 		mRadius2 = radius * radius;

  002d5	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 36   : 	mRoot->SetSpherePackFlag(SpherePackFlag(SPF_SUPERSPHERE | SPF_ROOTNODE | SPF_ROOT_TREE));

  002da	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  002dd	83 48 38 0b	 or	 DWORD PTR [eax+56], 11	; 0000000bH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\pool.h

; 196  : 		if ( !mFree ) { return 0; }

  002e1	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]
  002e4	85 c9		 test	 ecx, ecx
  002e6	74 29		 je	 SHORT $LN44@SpherePack
$LN45@SpherePack:

; 197  : 		Type *ret = mFree;
; 198  : 		mFree = ret->GetNext(); // new head of free list
; 199  : 		Type *temp = mHead; // current head of list

  002e8	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]
  002eb	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  002ee	89 43 20	 mov	 DWORD PTR [ebx+32], eax

; 200  : 		mHead = ret;        // new head of list is this free one

  002f1	89 4b 1c	 mov	 DWORD PTR [ebx+28], ecx

; 201  : 		if ( temp ) { temp->SetPrevious(ret); }

  002f4	85 d2		 test	 edx, edx
  002f6	74 03		 je	 SHORT $LN46@SpherePack
  002f8	89 4a 1c	 mov	 DWORD PTR [edx+28], ecx
$LN46@SpherePack:

; 202  : 		mHead->SetNext(temp);

  002fb	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  002fe	89 50 18	 mov	 DWORD PTR [eax+24], edx

; 203  : 		mHead->SetPrevious(0);

  00301	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00304	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 204  : 		mUsedCount++;

  0030b	ff 43 24	 inc	 DWORD PTR [ebx+36]

; 205  : 		mFreeCount--;

  0030e	ff 4b 28	 dec	 DWORD PTR [ebx+40]
$LN44@SpherePack:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  00311	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@49c80000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 42   : 	mLeaf = mSpheres.GetFreeLink();; // initially empty

  00319	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 68   : 		mRadius2 = radius * radius;

  0031c	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  00320	c6 41 4c 00	 mov	 BYTE PTR [ecx+76], 0

; 116  : 		mUserData         = userdata;

  00324	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 117  : 		mParent           = 0;

  0032b	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 118  : 		mNextSibling      = 0;

  00332	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 119  : 		mPrevSibling      = 0;

  00339	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 120  : 		mFlags            = 0;

  00340	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 121  : 		mFifo1            = 0;

  00347	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 122  : 		mFifo2            = 0;

  0034e	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 123  : 		mFactory          = factory;

  00355	89 59 48	 mov	 DWORD PTR [ecx+72], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  00358	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 59   : 		y = A.y;

  0035f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 60   : 		z = A.z;

  00366	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  0036d	c7 41 10 00 00
	c8 49		 mov	 DWORD PTR [ecx+16], 1237843968 ; 49c80000H

; 68   : 		mRadius2 = radius * radius;

  00374	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 44   : 	mLeaf->SetSpherePackFlag(SpherePackFlag(SPF_SUPERSPHERE | SPF_ROOTNODE | SPF_LEAF_TREE));

  00379	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  0037c	83 48 38 0d	 or	 DWORD PTR [eax+56], 13	; 0000000dH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 64   : 	NANOEND

  00380	eb		 DB	 -21			; ffffffebH
  00381	03		 DB	 3
  00382	d6		 DB	 -42			; ffffffd6H
  00383	d7		 DB	 -41			; ffffffd7H
  00384	00		 DB	 0
  00385	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00388	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0038b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00392	59		 pop	 ecx
  00393	5f		 pop	 edi
  00394	5e		 pop	 esi
  00395	5b		 pop	 ebx
  00396	8b e5		 mov	 esp, ebp
  00398	5d		 pop	 ebp
  00399	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SpherePackCallback@@UAE@XZ ; SpherePackCallback::~SpherePackCallback
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 10	 add	 ecx, 16			; 00000010H
  0000e	e9 00 00 00 00	 jmp	 ??1?$Pool@VSpherePack@@@@QAE@XZ ; Pool<SpherePack>::~Pool<SpherePack>
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$2:
  00013	6a 18		 push	 24			; 00000018H
  00015	8b 45 0c	 mov	 eax, DWORD PTR $T4[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	c3		 ret	 0
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$3:
  00022	6a 18		 push	 24			; 00000018H
  00024	8b 45 0c	 mov	 eax, DWORD PTR $T3[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
  00030	c3		 ret	 0
__unwindfunclet$??0SpherePackFactory@@QAE@HMMM@Z$4:
  00031	33 db		 xor	 ebx, ebx
  00033	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00036	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0003b	f7 e1		 mul	 ecx
  0003d	0f 90 c3	 seto	 bl
  00040	f7 db		 neg	 ebx
  00042	0b d8		 or	 ebx, eax
  00044	33 c0		 xor	 eax, eax
  00046	83 c3 04	 add	 ebx, 4
  00049	0f 92 c0	 setb	 al
  0004c	f7 d8		 neg	 eax
  0004e	0b c3		 or	 eax, ebx
  00050	50		 push	 eax
  00051	8b 45 10	 mov	 eax, DWORD PTR $T5[ebp]
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005a	83 c4 08	 add	 esp, 8
  0005d	c3		 ret	 0
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
__ehhandler$??0SpherePackFactory@@QAE@HMMM@Z:
  00063	90		 npad	 1
  00064	90		 npad	 1
  00065	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00069	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0006c	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SpherePackFactory@@QAE@HMMM@Z
  0007b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SpherePackFactory@@QAE@HMMM@Z ENDP			; SpherePackFactory::SpherePackFactory
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ??_GSpherePackFifo@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackFifo@@UAEPAXI@Z PROC			; SpherePackFifo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 315  : 	{

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 316  : 		delete [] mFifo;

  00006	ff 76 14	 push	 DWORD PTR [esi+20]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackFifo@@6B@
  0000f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00014	83 c4 04	 add	 esp, 4
  00017	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001b	74 0b		 je	 SHORT $LN6@scalar
  0001d	6a 18		 push	 24			; 00000018H
  0001f	56		 push	 esi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00025	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??_GSpherePackFifo@@UAEPAXI@Z ENDP			; SpherePackFifo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ??1SpherePackFifo@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackFifo@@UAE@XZ PROC				; SpherePackFifo::~SpherePackFifo, COMDAT
; _this$ = ecx

; 316  : 		delete [] mFifo;

  00000	ff 71 14	 push	 DWORD PTR [ecx+20]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackFifo@@6B@
  00009	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000e	59		 pop	 ecx

; 317  : 	};

  0000f	c3		 ret	 0
??1SpherePackFifo@@UAE@XZ ENDP				; SpherePackFifo::~SpherePackFifo
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_ESpherePack@@UAEPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___flags$ = 8						; size = 4
??_ESpherePack@@UAEPAXI@Z PROC				; SpherePack::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??_ESpherePack@@UAEPAXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  0002a	8b f8		 mov	 edi, eax
  0002c	83 e7 01	 and	 edi, 1
  0002f	a8 02		 test	 al, 2
  00031	74 42		 je	 SHORT $LN2@vector
  00033	68 00 00 00 00	 push	 OFFSET ??1SpherePack@@UAE@XZ ; SpherePack::~SpherePack
  00038	ff 76 fc	 push	 DWORD PTR [esi-4]
  0003b	8d 5e fc	 lea	 ebx, DWORD PTR [esi-4]
  0003e	6a 50		 push	 80			; 00000050H
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00046	85 ff		 test	 edi, edi
  00048	74 15		 je	 SHORT $LN3@vector
  0004a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004c	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0004f	c1 e1 04	 shl	 ecx, 4
  00052	83 c1 04	 add	 ecx, 4
  00055	51		 push	 ecx
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ??_V@YAXPAXI@Z		; operator delete[]
  0005c	83 c4 08	 add	 esp, 8
$LN3@vector:
  0005f	8b c3		 mov	 eax, ebx
  00061	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00064	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006b	59		 pop	 ecx
  0006c	5f		 pop	 edi
  0006d	5e		 pop	 esi
  0006e	5b		 pop	 ebx
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 04 00	 ret	 4
$LN2@vector:
  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sphere@@6B@
  0007b	85 ff		 test	 edi, edi
  0007d	74 0b		 je	 SHORT $LN4@vector
  0007f	6a 50		 push	 80			; 00000050H
  00081	56		 push	 esi
  00082	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00087	83 c4 08	 add	 esp, 8
$LN4@vector:
  0008a	8b c6		 mov	 eax, esi
  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
  000a4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_ESpherePack@@UAEPAXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??_ESpherePack@@UAEPAXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??_ESpherePack@@UAEPAXI@Z ENDP				; SpherePack::`vector deleting destructor'
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Reset@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Reset@SpherePack@@QAEXXZ PROC				; SpherePack::Reset, COMDAT
; _this$ = ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  00000	81 61 38 3f fe
	ff ff		 and	 DWORD PTR [ecx+56], -449 ; fffffe3fH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 889  : {

  00007	56		 push	 esi

; 890  : 	ClearSpherePackFlag(SpherePackFlag(SPF_HIDDEN | SPF_PARTIAL | SPF_INSIDE));
; 891  : 
; 892  : 	SpherePack *pack = mChildren;

  00008	8b 71 24	 mov	 esi, DWORD PTR [ecx+36]

; 893  : 	while (pack)

  0000b	85 f6		 test	 esi, esi
  0000d	74 0f		 je	 SHORT $LN3@Reset
  0000f	90		 npad	 1
$LL2@Reset:

; 894  : 	{
; 895  : 		pack->Reset();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?Reset@SpherePack@@QAEXXZ ; SpherePack::Reset

; 896  : 		pack = pack->_GetNextSibling();

  00017	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  0001a	85 f6		 test	 esi, esi
  0001c	75 f2		 jne	 SHORT $LL2@Reset
$LN3@Reset:
  0001e	5e		 pop	 esi

; 897  : 	}
; 898  : }

  0001f	c3		 ret	 0
?Reset@SpherePack@@QAEXXZ ENDP				; SpherePack::Reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_callback$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z PROC ; SpherePack::PointTest2d, COMDAT
; _this$ = ecx

; 757  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 758  : 	if (state == VS_PARTIAL)

  00003	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b 7d 10	 mov	 edi, DWORD PTR _state$[ebp]
  0000b	8b f1		 mov	 esi, ecx
  0000d	83 ff 01	 cmp	 edi, 1
  00010	75 35		 jne	 SHORT $LN6@PointTest2

; 759  : 	{
; 760  : 		float dx = p.x - mCenter.x;

  00012	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]

; 761  : 		float dy = p.y - mCenter.y;

  00016	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  0001b	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]
  00020	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 762  : 		float distSquare = (dx * dx) + (dy * dy);

  00025	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00029	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0002d	f3 0f 58 c8	 addss	 xmm1, xmm0

; 763  : 
; 764  : 		if (distSquare > GetRadius2()) { return; };

  00031	0f 2f 4e 14	 comiss	 xmm1, DWORD PTR [esi+20]
  00035	77 44		 ja	 SHORT $LN8@PointTest2

; 765  : 		if (GetRadius2() < -distSquare) { state = VS_INSIDE; }

  00037	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0003e	33 c0		 xor	 eax, eax
  00040	0f 2f 4e 14	 comiss	 xmm1, DWORD PTR [esi+20]
  00044	0f 47 f8	 cmova	 edi, eax
$LN6@PointTest2:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00047	f6 46 38 01	 test	 BYTE PTR [esi+56], 1
  0004b	74 23		 je	 SHORT $LN7@PointTest2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 777  : 		while (pack) // we NULL (m2l OK) if cculling not process|update()ed

  0004d	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00050	85 f6		 test	 esi, esi
  00052	74 27		 je	 SHORT $LN8@PointTest2
$LL2@PointTest2:

; 778  : 		{
; 779  : 			pack->PointTest2d(p, callback, state);

  00054	57		 push	 edi
  00055	ff 75 0c	 push	 DWORD PTR _callback$[ebp]
  00058	8b ce		 mov	 ecx, esi
  0005a	52		 push	 edx
  0005b	e8 00 00 00 00	 call	 ?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::PointTest2d

; 780  : 			pack = pack->_GetNextSibling();

  00060	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  00063	8b 55 08	 mov	 edx, DWORD PTR _p$[ebp]
  00066	85 f6		 test	 esi, esi
  00068	75 ea		 jne	 SHORT $LL2@PointTest2

; 797  : 	}
; 798  : }

  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5d		 pop	 ebp
  0006d	c2 0c 00	 ret	 12			; 0000000cH
$LN7@PointTest2:

; 781  : 		}
; 782  : 
; 783  : 	}
; 784  : 	else
; 785  : 	{
; 786  : #ifdef SPHERELIB_STRICT
; 787  : 		extern bool MAPOUTDOOR_GET_HEIGHT_TRACE;
; 788  : 		if (MAPOUTDOOR_GET_HEIGHT_TRACE)
; 789  : 		{
; 790  : 			float dx = p.x - mCenter.x;
; 791  : 			float dy = p.y - mCenter.y;
; 792  : 			float distSquare = (dx * dx) + (dy * dy);
; 793  : 			printf("--- (%f, %f) dist %f radius %f isSphere %d\n", mCenter.x, mCenter.y, distSquare, GetRadius(), IS_SPHERE);
; 794  : 		}
; 795  : #endif
; 796  : 		callback->PointTest2dCallback(p, this, state);

  00070	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]
  00073	57		 push	 edi
  00074	56		 push	 esi
  00075	52		 push	 edx
  00076	8b 01		 mov	 eax, DWORD PTR [ecx]
  00078	ff 50 10	 call	 DWORD PTR [eax+16]
$LN8@PointTest2:

; 797  : 	}
; 798  : }

  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2d@SpherePack@@QAEXABVVector3d@@PAVSpherePackCallback@@W4ViewState@@@Z ENDP ; SpherePack::PointTest2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_distance$ = 12						; size = 4
_callback$ = 16						; size = 4
_d$1 = 20						; size = 4
_state$ = 20						; size = 4
?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z PROC ; SpherePack::RangeTest, COMDAT
; _this$ = ecx

; 723  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 724  : 
; 725  : 	if (state == VS_PARTIAL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _p$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 14	 mov	 edi, DWORD PTR _state$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	83 ff 01	 cmp	 edi, 1
  00011	75 6b		 jne	 SHORT $LN6@RangeTest
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 182  : 		float dx = a.x - x;

  00013	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00018	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 183  : 		float dy = a.y - y;

  0001b	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00020	f3 0f 5c 53 04	 subss	 xmm2, DWORD PTR [ebx+4]
  00025	f3 0f 5c 0b	 subss	 xmm1, DWORD PTR [ebx]

; 184  : 		float dz = a.z - z;

  00029	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]
  0002e	f3 0f 5c 43 08	 subss	 xmm0, DWORD PTR [ebx+8]

; 185  : 		return dx * dx + dy * dy + dz * dz;

  00033	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00037	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0003b	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0003f	f3 0f 58 d1	 addss	 xmm2, xmm1
  00043	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00047	0f 5a c2	 cvtps2pd xmm0, xmm2
  0004a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0004f	e8 00 00 00 00	 call	 _sqrt
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 728  : 		if ((d - distance) > GetRadius()) { return; };

  00054	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _distance$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00059	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 727  : 		float d = p.Distance(mCenter);

  0005c	d9 5d 14	 fstp	 DWORD PTR _d$1[ebp]

; 728  : 		if ((d - distance) > GetRadius()) { return; };

  0005f	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _d$1[ebp]
  00064	0f 28 c1	 movaps	 xmm0, xmm1
  00067	f3 0f 5c c2	 subss	 xmm0, xmm2
  0006b	0f 2f 46 10	 comiss	 xmm0, DWORD PTR [esi+16]
  0006f	77 5a		 ja	 SHORT $LN8@RangeTest

; 729  : 		if ((GetRadius() + d) < distance) { state = VS_INSIDE; }

  00071	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]
  00076	33 c0		 xor	 eax, eax
  00078	0f 2f d1	 comiss	 xmm2, xmm1
  0007b	0f 47 f8	 cmova	 edi, eax
$LN6@RangeTest:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  0007e	f6 46 38 01	 test	 BYTE PTR [esi+56], 1
  00082	74 31		 je	 SHORT $LN7@RangeTest
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 741  : 		while (pack)

  00084	8b 76 24	 mov	 esi, DWORD PTR [esi+36]
  00087	85 f6		 test	 esi, esi
  00089	74 40		 je	 SHORT $LN8@RangeTest
  0008b	0f 1f 44 00 00	 npad	 5
$LL2@RangeTest:

; 742  : 		{
; 743  : 			pack->RangeTest(p, distance, callback, state);

  00090	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00095	57		 push	 edi
  00096	ff 75 10	 push	 DWORD PTR _callback$[ebp]
  00099	51		 push	 ecx
  0009a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009f	8b ce		 mov	 ecx, esi
  000a1	53		 push	 ebx
  000a2	e8 00 00 00 00	 call	 ?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::RangeTest

; 744  : 			pack = pack->_GetNextSibling();

  000a7	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  000aa	85 f6		 test	 esi, esi
  000ac	75 e2		 jne	 SHORT $LL2@RangeTest

; 751  : 	}
; 752  : }

  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 10 00	 ret	 16			; 00000010H
$LN7@RangeTest:

; 745  : 		}
; 746  : 
; 747  : 	}
; 748  : 	else
; 749  : 	{
; 750  : 		callback->RangeTestCallback(p, distance, this, state);

  000b5	8b 4d 10	 mov	 ecx, DWORD PTR _callback$[ebp]
  000b8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _distance$[ebp]
  000bd	57		 push	 edi
  000be	56		 push	 esi
  000bf	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c1	51		 push	 ecx
  000c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c7	53		 push	 ebx
  000c8	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN8@RangeTest:

; 751  : 	}
; 752  : }

  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	5d		 pop	 ebp
  000cf	c2 10 00	 ret	 16			; 00000010H
?RangeTest@SpherePack@@QAEXABVVector3d@@MPAVSpherePackCallback@@W4ViewState@@@Z ENDP ; SpherePack::RangeTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z
_TEXT	SEGMENT
_callback$GSCopy$1$ = -20				; size = 4
_sect$1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_callback$ = 20						; size = 4
?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z PROC ; SpherePack::RayTrace, COMDAT
; _this$ = ecx

; 828  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 14	 mov	 eax, DWORD PTR _callback$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 0c	 mov	 ebx, DWORD PTR _dir$[ebp]
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	89 45 ec	 mov	 DWORD PTR _callback$GSCopy$1$[ebp], eax
  0001d	57		 push	 edi
  0001e	8b 7d 08	 mov	 edi, DWORD PTR _p1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00021	f6 46 38 01	 test	 BYTE PTR [esi+56], 1
  00025	74 4a		 je	 SHORT $LN4@RayTrace
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 834  : 		hit = RayIntersectionInFront(p1, dir, 0);

  00027	6a 00		 push	 0
  00029	53		 push	 ebx
  0002a	57		 push	 edi
  0002b	e8 00 00 00 00	 call	 ?RayIntersectionInFront@Sphere@@QAE_NABVVector3d@@0PAV2@@Z ; Sphere::RayIntersectionInFront

; 835  : 
; 836  : 		if (hit)

  00030	84 c0		 test	 al, al
  00032	74 71		 je	 SHORT $LN7@RayTrace

; 837  : 		{
; 838  : #if DEMO
; 839  : 			DrawCircle(int(mCenter.x), int(mCenter.y), int(GetRadius()), 0x404040);
; 840  : #endif
; 841  : 			SpherePack *pack = mChildren;

  00034	8b 76 24	 mov	 esi, DWORD PTR [esi+36]

; 842  : 
; 843  : 			while (pack)

  00037	85 f6		 test	 esi, esi
  00039	74 6a		 je	 SHORT $LN7@RayTrace
  0003b	0f 1f 44 00 00	 npad	 5
$LL2@RayTrace:

; 844  : 			{
; 845  : 				pack->RayTrace(p1, dir, distance, callback);

  00040	ff 75 ec	 push	 DWORD PTR _callback$GSCopy$1$[ebp]
  00043	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00048	51		 push	 ecx
  00049	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004e	8b ce		 mov	 ecx, esi
  00050	53		 push	 ebx
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ; SpherePack::RayTrace

; 846  : 				pack = pack->_GetNextSibling();

  00057	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  0005a	85 f6		 test	 esi, esi
  0005c	75 e2		 jne	 SHORT $LL2@RayTrace

; 858  : 		}
; 859  : 	}
; 860  : }

  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	33 cd		 xor	 ecx, ebp
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 10 00	 ret	 16			; 00000010H
$LN4@RayTrace:

; 847  : 			}
; 848  : 		}
; 849  : 
; 850  : 	}
; 851  : 	else
; 852  : 	{
; 853  : 		Vector3d sect;
; 854  : 		hit = RayIntersection(p1, dir, distance, &sect);

  00071	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00076	8d 45 f0	 lea	 eax, DWORD PTR _sect$1[ebp]
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00080	53		 push	 ebx
  00081	57		 push	 edi
  00082	e8 00 00 00 00	 call	 ?RayIntersection@Sphere@@QAE_NABVVector3d@@0MPAV2@@Z ; Sphere::RayIntersection

; 855  : 		if (hit)

  00087	84 c0		 test	 al, al
  00089	74 1a		 je	 SHORT $LN7@RayTrace

; 856  : 		{
; 857  : 			callback->RayTraceCallback(p1, dir, distance, sect, this);

  0008b	8b 4d ec	 mov	 ecx, DWORD PTR _callback$GSCopy$1$[ebp]
  0008e	8d 55 f0	 lea	 edx, DWORD PTR _sect$1[ebp]
  00091	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _distance$[ebp]
  00096	56		 push	 esi
  00097	52		 push	 edx
  00098	8b 01		 mov	 eax, DWORD PTR [ecx]
  0009a	51		 push	 ecx
  0009b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a0	53		 push	 ebx
  000a1	57		 push	 edi
  000a2	ff 50 08	 call	 DWORD PTR [eax+8]
$LN7@RayTrace:

; 858  : 		}
; 859  : 	}
; 860  : }

  000a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	33 cd		 xor	 ecx, ebp
  000ac	5b		 pop	 ebx
  000ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b2	8b e5		 mov	 esp, ebp
  000b4	5d		 pop	 ebp
  000b5	c2 10 00	 ret	 16			; 00000010H
?RayTrace@SpherePack@@QAEXABVVector3d@@0MPAVSpherePackCallback@@@Z ENDP ; SpherePack::RayTrace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_callback$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z PROC ; SpherePack::VisibilityTest, COMDAT
; _this$ = ecx

; 584  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 585  : 
; 586  : 	if (state == VS_PARTIAL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _f$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 10	 mov	 edi, DWORD PTR _state$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	83 ff 01	 cmp	 edi, 1
  00011	75 18		 jne	 SHORT $LN6@Visibility

; 587  : 	{
; 588  : 		state = f.ViewVolumeTest(mCenter, GetRadius());

  00013	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00018	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001b	51		 push	 ecx
  0001c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00021	8b cb		 mov	 ecx, ebx
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00029	8b f8		 mov	 edi, eax
$LN6@Visibility:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  0002b	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002e	f6 c1 01	 test	 cl, 1
  00031	74 6b		 je	 SHORT $LN7@Visibility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 601  : 		if (state == VS_OUTSIDE)

  00033	83 ff 02	 cmp	 edi, 2
  00036	75 14		 jne	 SHORT $LN9@Visibility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00038	f6 c1 40	 test	 cl, 64			; 00000040H
  0003b	0f 85 d5 00 00
	00		 jne	 $LN16@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  00041	81 e1 7f fe ff
	ff		 and	 ecx, -385		; fffffe7fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00047	83 c9 40	 or	 ecx, 64			; 00000040H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 606  : 		}

  0004a	eb 2a		 jmp	 SHORT $LN13@Visibility
$LN9@Visibility:

; 607  : 		else
; 608  : 		{
; 609  : 			if (state == VS_INSIDE)

  0004c	85 ff		 test	 edi, edi
  0004e	75 1a		 jne	 SHORT $LN12@Visibility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00050	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  00056	0f 85 ba 00 00
	00		 jne	 $LN16@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  0005c	81 e1 3f ff ff
	ff		 and	 ecx, -193		; ffffff3fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00062	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 614  : 			}

  00068	eb 0c		 jmp	 SHORT $LN13@Visibility
$LN12@Visibility:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  0006a	81 e1 bf fe ff
	ff		 and	 ecx, -321		; fffffebfH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00070	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
$LN13@Visibility:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 622  : 		SpherePack *pack = mChildren;

  00076	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00079	8b 76 24	 mov	 esi, DWORD PTR [esi+36]

; 623  : 
; 624  : 		while (pack)

  0007c	85 f6		 test	 esi, esi
  0007e	0f 84 92 00 00
	00		 je	 $LN16@Visibility
$LL2@Visibility:

; 625  : 		{
; 626  : 			pack->VisibilityTest(f, callback, state);

  00084	57		 push	 edi
  00085	ff 75 0c	 push	 DWORD PTR _callback$[ebp]
  00088	8b ce		 mov	 ecx, esi
  0008a	53		 push	 ebx
  0008b	e8 00 00 00 00	 call	 ?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ; SpherePack::VisibilityTest

; 627  : 			pack = pack->_GetNextSibling();

  00090	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
  00093	85 f6		 test	 esi, esi
  00095	75 ed		 jne	 SHORT $LL2@Visibility

; 662  : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	5d		 pop	 ebp
  0009b	c2 0c 00	 ret	 12			; 0000000cH
$LN7@Visibility:

; 628  : 		}
; 629  : 
; 630  : 	}
; 631  : 	else
; 632  : 	{
; 633  : 		switch (state)

  0009e	83 ef 00	 sub	 edi, 0
  000a1	74 50		 je	 SHORT $LN15@Visibility
  000a3	83 ef 01	 sub	 edi, 1
  000a6	74 29		 je	 SHORT $LN19@Visibility
  000a8	83 ef 01	 sub	 edi, 1
  000ab	75 69		 jne	 SHORT $LN16@Visibility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  000ad	f6 c1 40	 test	 cl, 64			; 00000040H
  000b0	75 64		 jne	 SHORT $LN16@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  000b2	81 e1 7f fe ff
	ff		 and	 ecx, -385		; fffffe7fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  000b8	83 c9 40	 or	 ecx, 64			; 00000040H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 662  : }

  000bb	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]
  000c1	6a 02		 push	 2
  000c3	56		 push	 esi
  000c4	53		 push	 ebx
  000c5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c7	ff 50 04	 call	 DWORD PTR [eax+4]
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5b		 pop	 ebx
  000cd	5d		 pop	 ebp
  000ce	c2 0c 00	 ret	 12			; 0000000cH
$LN19@Visibility:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  000d1	81 e1 bf fe ff
	ff		 and	 ecx, -321		; fffffebfH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  000d7	81 c9 80 00 00
	00		 or	 ecx, 128		; 00000080H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 662  : }

  000dd	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  000e0	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]
  000e3	6a 01		 push	 1
  000e5	56		 push	 esi
  000e6	53		 push	 ebx
  000e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e9	ff 50 04	 call	 DWORD PTR [eax+4]
  000ec	5f		 pop	 edi
  000ed	5e		 pop	 esi
  000ee	5b		 pop	 ebx
  000ef	5d		 pop	 ebp
  000f0	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Visibility:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  000f3	f7 c1 00 01 00
	00		 test	 ecx, 256		; 00000100H
  000f9	75 1b		 jne	 SHORT $LN16@Visibility

; 130  : 	void ClearSpherePackFlag(SpherePackFlag flag) { mFlags &= ~flag; };

  000fb	81 e1 3f ff ff
	ff		 and	 ecx, -193		; ffffff3fH

; 129  : 	void SetSpherePackFlag(SpherePackFlag flag) { mFlags |= flag; };

  00101	81 c9 00 01 00
	00		 or	 ecx, 256		; 00000100H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 662  : }

  00107	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  0010a	8b 4d 0c	 mov	 ecx, DWORD PTR _callback$[ebp]
  0010d	6a 00		 push	 0
  0010f	56		 push	 esi
  00110	53		 push	 ebx
  00111	8b 01		 mov	 eax, DWORD PTR [ecx]
  00113	ff 50 04	 call	 DWORD PTR [eax+4]
$LN16@Visibility:
  00116	5f		 pop	 edi
  00117	5e		 pop	 esi
  00118	5b		 pop	 ebx
  00119	5d		 pop	 ebp
  0011a	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityTest@SpherePack@@QAEXABVFrustum@@PAVSpherePackCallback@@W4ViewState@@@Z ENDP ; SpherePack::VisibilityTest
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Recompute@SpherePack@@QAE_NM@Z
_TEXT	SEGMENT
_oldpos$2$sroa$412$1$ = -20				; size = 4
_oldpos$2$sroa$413$1$ = -16				; size = 4
_oldpos$2$sroa$414$1$ = -12				; size = 4
tv585 = -8						; size = 4
_maxradius$2$ = -4					; size = 4
_gravy$ = 8						; size = 4
?Recompute@SpherePack@@QAE_NM@Z PROC			; SpherePack::Recompute, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	57		 push	 edi

; 258  : 	if (!mChildren) { return true; } // kill it!

  0000a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0000d	85 c0		 test	 eax, eax
  0000f	75 0a		 jne	 SHORT $LN8@Recompute
  00011	b0 01		 mov	 al, 1

; 328  : }

  00013	5f		 pop	 edi
  00014	5e		 pop	 esi
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
$LN8@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  0001b	f6 46 38 08	 test	 BYTE PTR [esi+56], 8
  0001f	0f 85 82 01 00
	00		 jne	 $LN64@Recompute
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 264  : 	int count = 0;

  00025	0f 57 ed	 xorps	 xmm5, xmm5
  00028	0f 57 d2	 xorps	 xmm2, xmm2
  0002b	0f 57 db	 xorps	 xmm3, xmm3
  0002e	0f 57 e4	 xorps	 xmm4, xmm4
  00031	33 c9		 xor	 ecx, ecx
  00033	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 90   : 	{ x += A.x; y += A.y; z += A.z; };

  00040	f3 0f 58 50 04	 addss	 xmm2, DWORD PTR [eax+4]
  00045	f3 0f 58 58 08	 addss	 xmm3, DWORD PTR [eax+8]
  0004a	f3 0f 58 60 0c	 addss	 xmm4, DWORD PTR [eax+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 270  : 		pack = pack->_GetNextSibling();

  0004f	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  00052	41		 inc	 ecx
  00053	85 c0		 test	 eax, eax
  00055	75 e9		 jne	 SHORT $LL2@Recompute

; 271  : 	}
; 272  : 
; 273  : 	if (count)

  00057	85 c9		 test	 ecx, ecx
  00059	0f 84 44 01 00
	00		 je	 $LN7@Recompute

; 274  : 	{
; 275  : 		float recip = 1.0f / float(count);

  0005f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00067	66 0f 6e c1	 movd	 xmm0, ecx
  0006b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006e	f3 0f 5e c8	 divss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 30   : 		x = a.x;

  00072	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]

; 94   : 	{x *= s; y *= s; z *= s;}

  00077	f3 0f 59 d1	 mulss	 xmm2, xmm1
  0007b	f3 0f 59 d9	 mulss	 xmm3, xmm1
  0007f	f3 0f 59 e1	 mulss	 xmm4, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 284  : 		float maxradius = 0;

  00083	0f 28 cd	 movaps	 xmm1, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 30   : 		x = a.x;

  00086	f3 0f 11 45 f4	 movss	 DWORD PTR _oldpos$2$sroa$414$1$[ebp], xmm0

; 31   : 		y = a.y;

  0008b	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00090	f3 0f 11 45 f0	 movss	 DWORD PTR _oldpos$2$sroa$413$1$[ebp], xmm0

; 32   : 		z = a.z;

  00095	f3 0f 10 46 0c	 movss	 xmm0, DWORD PTR [esi+12]

; 58   : 		x = A.x;

  0009a	f3 0f 11 56 04	 movss	 DWORD PTR [esi+4], xmm2

; 59   : 		y = A.y;

  0009f	f3 0f 11 5e 08	 movss	 DWORD PTR [esi+8], xmm3

; 60   : 		z = A.z;

  000a4	f3 0f 11 66 0c	 movss	 DWORD PTR [esi+12], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 286  : 		pack = mChildren;

  000a9	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 32   : 		z = a.z;

  000ac	f3 0f 11 45 ec	 movss	 DWORD PTR _oldpos$2$sroa$412$1$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 284  : 		float maxradius = 0;

  000b1	f3 0f 11 4d fc	 movss	 DWORD PTR _maxradius$2$[ebp], xmm1

; 287  : 
; 288  : 		while (pack)

  000b6	85 ff		 test	 edi, edi
  000b8	74 7f		 je	 SHORT $LN62@Recompute
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL4@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 182  : 		float dx = a.x - x;

  000c0	f3 0f 10 4f 04	 movss	 xmm1, DWORD PTR [edi+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000c5	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 183  : 		float dy = a.y - y;

  000c8	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  000cd	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  000d2	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 184  : 		float dz = a.z - z;

  000d7	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  000dc	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 185  : 		return dx * dx + dy * dy + dz * dz;

  000e1	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000e5	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000e9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ed	f3 0f 58 d1	 addss	 xmm2, xmm1
  000f1	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000f5	0f 5a c2	 cvtps2pd xmm0, xmm2
  000f8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000fd	e8 00 00 00 00	 call	 _sqrt
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 292  : 			if (radius > maxradius)

  00102	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _maxradius$2$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00107	83 c4 08	 add	 esp, 8
  0010a	d9 5d f8	 fstp	 DWORD PTR tv585[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 291  : 			float radius = sqrtf(dist) + pack->GetRadius();

  0010d	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv585[ebp]
  00112	f3 0f 58 47 10	 addss	 xmm0, DWORD PTR [edi+16]

; 292  : 			if (radius > maxradius)

  00117	0f 2f c1	 comiss	 xmm0, xmm1
  0011a	76 13		 jbe	 SHORT $LN61@Recompute

; 293  : 			{
; 294  : 				maxradius = radius;

  0011c	0f 28 c8	 movaps	 xmm1, xmm0

; 295  : 				if ((maxradius + gravy) >= GetRadius())

  0011f	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _gravy$[ebp]
  00124	f3 0f 11 4d fc	 movss	 DWORD PTR _maxradius$2$[ebp], xmm1
  00129	0f 2f 46 10	 comiss	 xmm0, DWORD PTR [esi+16]
  0012d	73 38		 jae	 SHORT $LN50@Recompute
$LN61@Recompute:

; 296  : 				{
; 297  : #ifdef __STATIC_RANGE__
; 298  : 					assert(oldpos.IsInStaticRange());
; 299  : #endif
; 300  : 					mCenter = oldpos;
; 301  : 					ClearSpherePackFlag(SPF_RECOMPUTE);
; 302  : 					return false;
; 303  : 				}
; 304  : 			}
; 305  : 			pack = pack->_GetNextSibling();

  0012f	8b 7f 28	 mov	 edi, DWORD PTR [edi+40]
  00132	85 ff		 test	 edi, edi
  00134	75 8a		 jne	 SHORT $LL4@Recompute
  00136	0f 57 ed	 xorps	 xmm5, xmm5
$LN62@Recompute:

; 306  : 		}
; 307  : 
; 308  : 		maxradius += gravy;

  00139	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _gravy$[ebp]

; 309  : 
; 310  : 		SetRadius(maxradius);
; 311  : 
; 312  : 		// now all children have to recompute binding distance!!
; 313  : 		pack = mChildren;

  0013e	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  00141	f3 0f 11 4e 10	 movss	 DWORD PTR [esi+16], xmm1

; 68   : 		mRadius2 = radius * radius;

  00146	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0014a	f3 0f 11 4e 14	 movss	 DWORD PTR [esi+20], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 315  : 		while (pack)

  0014f	85 c0		 test	 eax, eax
  00151	74 50		 je	 SHORT $LN7@Recompute
$LL6@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00153	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00158	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]

; 242  : 		if ( mBindingDistance <= 0 )

  0015d	0f 2f e8	 comiss	 xmm5, xmm0
  00160	72 31		 jb	 SHORT $LN25@Recompute

; 243  : 		{
; 244  : 			mBindingDistance = 0;

  00162	0f 28 c5	 movaps	 xmm0, xmm5

; 245  : 		}

  00165	eb 30		 jmp	 SHORT $LN26@Recompute
$LN50@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  00167	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _oldpos$2$sroa$414$1$[ebp]
  0016c	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 59   : 		y = A.y;

  00171	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _oldpos$2$sroa$413$1$[ebp]
  00176	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0

; 60   : 		z = A.z;

  0017b	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _oldpos$2$sroa$412$1$[ebp]
  00180	f3 0f 11 46 0c	 movss	 DWORD PTR [esi+12], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 328  : }

  00185	83 66 38 ef	 and	 DWORD PTR [esi+56], -17	; ffffffefH
  00189	32 c0		 xor	 al, al
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 04 00	 ret	 4
$LN25@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 248  : 			mBindingDistance *= mBindingDistance;

  00193	f3 0f 59 c0	 mulss	 xmm0, xmm0
$LN26@Recompute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 318  : 			pack = pack->_GetNextSibling();

  00197	f3 0f 11 40 40	 movss	 DWORD PTR [eax+64], xmm0
  0019c	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0019f	85 c0		 test	 eax, eax
  001a1	75 b0		 jne	 SHORT $LL6@Recompute
$LN7@Recompute:

; 328  : }

  001a3	83 66 38 ef	 and	 DWORD PTR [esi+56], -17	; ffffffefH
$LN64@Recompute:
  001a7	5f		 pop	 edi
  001a8	32 c0		 xor	 al, al
  001aa	5e		 pop	 esi
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c2 04 00	 ret	 4
?Recompute@SpherePack@@QAE_NM@Z ENDP			; SpherePack::Recompute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?Render@SpherePack@@QAEXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?Render@SpherePack@@QAEXI@Z PROC			; SpherePack::Render, COMDAT
; _this$ = ecx

; 192  : #if DEMO
; 193  : 	if (!HasSpherePackFlag(SPF_ROOTNODE))
; 194  : 	{
; 195  : 
; 196  : 		if (HasSpherePackFlag(SPF_SUPERSPHERE))
; 197  : 		{
; 198  : 			color = mColor;
; 199  : 		}
; 200  : 		else
; 201  : 		{
; 202  : 			if (mParent->HasSpherePackFlag(SPF_ROOTNODE)) { color = 0x00FFFFFF; }
; 203  : 		}
; 204  : #if DEMO
; 205  : 		DrawCircle(int(mCenter.x), int(mCenter.y), int(GetRadius()), color);
; 206  : #endif
; 207  : 		if (HasSpherePackFlag(SPF_SUPERSPHERE))
; 208  : 		{
; 209  : 			if (HasSpherePackFlag(SPF_LEAF_TREE))
; 210  : 			{
; 211  : 
; 212  : #if DEMO
; 213  : 				DrawCircle(int(mCenter.x), int(mCenter.y), int(GetRadius()), color);
; 214  : #endif
; 215  : #ifdef SPHERELIB_STRICT
; 216  : 				if (!sphere->IS_SPHERE)
; 217  : 				{
; 218  : 					puts("SpherePack::Render");
; 219  : 				}
; 220  : #endif
; 221  : 				SpherePack *link = (SpherePack *) GetUserData();
; 222  : 
; 223  : 				link = link->GetParent();
; 224  : 
; 225  : 				if (link && !link->HasSpherePackFlag(SPF_ROOTNODE))
; 226  : 				{
; 227  : 					DrawLine(int(mCenter.x), int(mCenter.y),
; 228  : 							 int(link->mCenter.x), int(link->mCenter.y),
; 229  : 							 link->GetColor());
; 230  : 				}
; 231  : 			}
; 232  : 			else
; 233  : 			{
; 234  : #if DEMO
; 235  : 				DrawCircle(int(mCenter.x), int(mCenter.y), int(GetRadius()) + 3, color);
; 236  : #endif
; 237  : 			}
; 238  : 
; 239  : 		}
; 240  : 
; 241  : 	}
; 242  : 
; 243  : 	if (mChildren)
; 244  : 	{
; 245  : 		SpherePack *pack = mChildren;
; 246  : 
; 247  : 		while (pack)
; 248  : 		{
; 249  : 			pack->Render(color);
; 250  : 			pack = pack->_GetNextSibling();
; 251  : 		}
; 252  : 	}
; 253  : #endif
; 254  : }

  00000	c2 04 00	 ret	 4
?Render@SpherePack@@QAEXI@Z ENDP			; SpherePack::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp
;	COMDAT ?LostChild@SpherePack@@QAEXPAV1@@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
?LostChild@SpherePack@@QAEXPAV1@@Z PROC			; SpherePack::LostChild, COMDAT
; _this$ = ecx

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 333  : 	assert(mChildCount);
; 334  : 	assert(mChildren);
; 335  : 
; 336  : #ifdef _DEBUG  // debug validation code.
; 337  : 
; 338  : 	SpherePack *pack = mChildren;
; 339  : 	bool found = false;
; 340  : 	while (pack)
; 341  : 	{
; 342  : 		if (pack == t)
; 343  : 		{
; 344  : 			assert(!found);
; 345  : 			found = true;
; 346  : 		}
; 347  : 		pack = pack->_GetNextSibling();
; 348  : 	}
; 349  : 	assert(found);
; 350  : 
; 351  : #endif
; 352  : 
; 353  : 	// first patch old linked list.. his previous now points to his next
; 354  : 	SpherePack *prev = t->_GetPrevSibling();

  00003	8b 45 08	 mov	 eax, DWORD PTR _t$[ebp]
  00006	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
  00009	8b 40 28	 mov	 eax, DWORD PTR [eax+40]

; 355  : 
; 356  : 	if (prev)

  0000c	85 d2		 test	 edx, edx
  0000e	74 0c		 je	 SHORT $LN2@LostChild

; 357  : 	{
; 358  : 		SpherePack *next = t->_GetNextSibling();
; 359  : 		prev->SetNextSibling(next); // my previous now points to my next

  00010	89 42 28	 mov	 DWORD PTR [edx+40], eax

; 360  : 		if (next) { next->SetPrevSibling(prev); }

  00013	85 c0		 test	 eax, eax
  00015	74 13		 je	 SHORT $LN5@LostChild
  00017	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 361  : 		// list is patched!
; 362  : 	}

  0001a	eb 0e		 jmp	 SHORT $LN5@LostChild
$LN2@LostChild:

; 363  : 	else
; 364  : 	{
; 365  : 		SpherePack *next = t->_GetNextSibling();
; 366  : 		mChildren = next;

  0001c	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 367  : 		if (mChildren) { mChildren->SetPrevSibling(0); }

  0001f	85 c0		 test	 eax, eax
  00021	74 07		 je	 SHORT $LN5@LostChild
  00023	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
$LN5@LostChild:

; 368  : 	}
; 369  : 
; 370  : 	mChildCount--;

  0002a	83 41 3c ff	 add	 DWORD PTR [ecx+60], -1

; 371  : 
; 372  : 	if (!mChildCount && HasSpherePackFlag(SPF_SUPERSPHERE))

  0002e	75 12		 jne	 SHORT $LN6@LostChild
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 133  : 		if ( mFlags & flag ) { return true; }

  00030	f6 41 38 01	 test	 BYTE PTR [ecx+56], 1
  00034	74 0c		 je	 SHORT $LN6@LostChild
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.cpp

; 374  : 		mFactory->Remove(this);

  00036	89 4d 08	 mov	 DWORD PTR _t$[ebp], ecx
  00039	8b 49 48	 mov	 ecx, DWORD PTR [ecx+72]

; 375  : 	}
; 376  : }

  0003c	5d		 pop	 ebp

; 374  : 		mFactory->Remove(this);

  0003d	e9 00 00 00 00	 jmp	 ?Remove@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::Remove
$LN6@LostChild:

; 375  : 	}
; 376  : }

  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
?LostChild@SpherePack@@QAEXPAV1@@Z ENDP			; SpherePack::LostChild
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?Unlink@SpherePack@@QAEXXZ
_TEXT	SEGMENT
?Unlink@SpherePack@@QAEXXZ PROC				; SpherePack::Unlink, COMDAT
; _this$ = ecx

; 147  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 		if ( mFifo1 ) // if we belong to fifo1, null us out

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	85 c0		 test	 eax, eax
  00008	74 0d		 je	 SHORT $LN2@Unlink

; 149  : 		{
; 150  : 			*mFifo1 = 0;

  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 151  : 			mFifo1 = 0;

  00010	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
$LN2@Unlink:

; 152  : 		}
; 153  : 
; 154  : 		if ( mFifo2 ) // if we belong to fifo2, null us out

  00017	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0001a	85 c0		 test	 eax, eax
  0001c	74 0d		 je	 SHORT $LN3@Unlink

; 155  : 		{
; 156  : 			*mFifo2 = 0;

  0001e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 157  : 			mFifo2 = 0;

  00024	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
$LN3@Unlink:

; 158  : 		}
; 159  : 
; 160  : 		if ( mParent ) { mParent->LostChild(this); }

  0002b	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0002e	85 c9		 test	 ecx, ecx
  00030	74 06		 je	 SHORT $LN6@Unlink
  00032	56		 push	 esi
  00033	e8 00 00 00 00	 call	 ?LostChild@SpherePack@@QAEXPAV1@@Z ; SpherePack::LostChild
$LN6@Unlink:

; 161  : 
; 162  : 		assert( !mChildren ); // can't unlink guys with children!
; 163  : 
; 164  : 		mParent = 0; // got no father anymore
; 165  : 	}

  00038	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0003f	5e		 pop	 esi
  00040	c3		 ret	 0
?Unlink@SpherePack@@QAEXXZ ENDP				; SpherePack::Unlink
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z
_TEXT	SEGMENT
_pos$ = 8						; size = 4
_radius$ = 12						; size = 4
?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z PROC	; SpherePack::NewPosRadius, COMDAT
; _this$ = ecx

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 474  : {

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  00009	8b 02		 mov	 eax, DWORD PTR [edx]
  0000b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 59   : 		y = A.y;

  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 60   : 		z = A.z;

  00014	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00017	89 46 0c	 mov	 DWORD PTR [esi+12], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 478  : 	if (mParent && !HasSpherePackFlag(SPF_INTEGRATE))

  0001a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0001d	85 c9		 test	 ecx, ecx
  0001f	0f 84 a6 00 00
	00		 je	 $LN4@NewPosRadi

; 133  : 		if ( mFlags & flag ) { return true; }

  00025	f6 46 38 20	 test	 BYTE PTR [esi+56], 32	; 00000020H
  00029	0f 85 9c 00 00
	00		 jne	 $LN4@NewPosRadi

; 479  : 	{
; 480  : 		if (radius != GetRadius())

  0002f	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _radius$[ebp]
  00034	0f 2e 56 10	 ucomiss xmm2, DWORD PTR [esi+16]
  00038	9f		 lahf
  00039	f6 c4 44	 test	 ah, 68			; 00000044H
  0003c	7b 39		 jnp	 SHORT $LN19@NewPosRadi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 68   : 		mRadius2 = radius * radius;

  0003e	0f 28 c2	 movaps	 xmm0, xmm2
  00041	f3 0f 11 56 10	 movss	 DWORD PTR [esi+16], xmm2
  00046	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0004a	f3 0f 11 46 14	 movss	 DWORD PTR [esi+20], xmm0
  0004f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 241  : 		mBindingDistance = parent->GetRadius() - GetRadius();

  00052	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00057	f3 0f 5c ca	 subss	 xmm1, xmm2

; 242  : 		if ( mBindingDistance <= 0 )

  0005b	0f 2f c1	 comiss	 xmm0, xmm1
  0005e	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
  00063	72 09		 jb	 SHORT $LN18@NewPosRadi

; 243  : 		{
; 244  : 			mBindingDistance = 0;

  00065	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0

; 245  : 		}

  0006c	eb 09		 jmp	 SHORT $LN19@NewPosRadi
$LN18@NewPosRadi:

; 246  : 		else
; 247  : 		{
; 248  : 			mBindingDistance *= mBindingDistance;

  0006e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00072	f3 0f 11 4e 40	 movss	 DWORD PTR [esi+64], xmm1
$LN19@NewPosRadi:

; 481  : 		{
; 482  : 			SetRadius(radius);
; 483  : 			ComputeBindingDistance(mParent);
; 484  : 		}
; 485  : 
; 486  : 		mFactory->AddRecompute(mParent);

  00077	51		 push	 ecx
  00078	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0007b	e8 00 00 00 00	 call	 ?AddRecompute@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddRecompute

; 212  : 	float DistanceSquared(const SpherePack *pack) const { return mCenter.DistanceSq( pack->mCenter );  };

  00080	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 182  : 		float dx = a.x - x;

  00083	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]

; 183  : 		float dy = a.y - y;

  00088	f3 0f 10 50 08	 movss	 xmm2, DWORD PTR [eax+8]
  0008d	f3 0f 5c 56 08	 subss	 xmm2, DWORD PTR [esi+8]
  00092	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]

; 184  : 		float dz = a.z - z;

  00097	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0009c	f3 0f 5c 46 0c	 subss	 xmm0, DWORD PTR [esi+12]

; 185  : 		return dx * dx + dy * dy + dz * dz;

  000a1	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000a5	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000a9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ad	f3 0f 58 d1	 addss	 xmm2, xmm1
  000b1	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 490  : 		if (dist >= mBindingDistance)

  000b5	0f 2f 56 40	 comiss	 xmm2, DWORD PTR [esi+64]
  000b9	72 10		 jb	 SHORT $LN4@NewPosRadi

; 491  : 		{
; 492  : 			Unlink();

  000bb	8b ce		 mov	 ecx, esi
  000bd	e8 00 00 00 00	 call	 ?Unlink@SpherePack@@QAEXXZ ; SpherePack::Unlink

; 493  : 			mFactory->AddIntegrate(this);

  000c2	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000c5	56		 push	 esi
  000c6	e8 00 00 00 00	 call	 ?AddIntegrate@SpherePackFactory@@QAEXPAVSpherePack@@@Z ; SpherePackFactory::AddIntegrate
$LN4@NewPosRadi:
  000cb	5e		 pop	 esi

; 494  : 		}
; 495  : 	}
; 496  : }

  000cc	5d		 pop	 ebp
  000cd	c2 08 00	 ret	 8
?NewPosRadius@SpherePack@@QAEXABVVector3d@@M@Z ENDP	; SpherePack::NewPosRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z
_TEXT	SEGMENT
_factory$ = 8						; size = 4
_pos$ = 12						; size = 4
_radius$ = 16						; size = 4
_userdata$ = 20						; size = 4
_isSphere$ = 24						; size = 1
?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z PROC ; SpherePack::Init, COMDAT
; _this$ = ecx

; 114  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 115  : 		IS_SPHERE			= isSphere;

  00003	8a 45 18	 mov	 al, BYTE PTR _isSphere$[ebp]
  00006	8b d1		 mov	 edx, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  00008	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  0000b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _radius$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 115  : 		IS_SPHERE			= isSphere;

  00010	88 42 4c	 mov	 BYTE PTR [edx+76], al

; 116  : 		mUserData         = userdata;

  00013	8b 45 14	 mov	 eax, DWORD PTR _userdata$[ebp]
  00016	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 117  : 		mParent           = 0;
; 118  : 		mNextSibling      = 0;
; 119  : 		mPrevSibling      = 0;
; 120  : 		mFlags            = 0;
; 121  : 		mFifo1            = 0;
; 122  : 		mFifo2            = 0;
; 123  : 		mFactory          = factory;

  00019	8b 45 08	 mov	 eax, DWORD PTR _factory$[ebp]
  0001c	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00023	c7 42 28 00 00
	00 00		 mov	 DWORD PTR [edx+40], 0
  0002a	c7 42 2c 00 00
	00 00		 mov	 DWORD PTR [edx+44], 0
  00031	c7 42 38 00 00
	00 00		 mov	 DWORD PTR [edx+56], 0
  00038	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  0003f	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  00046	89 42 48	 mov	 DWORD PTR [edx+72], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 58   : 		x = A.x;

  00049	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 59   : 		y = A.y;

  0004e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00051	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 60   : 		z = A.z;

  00054	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  00057	f3 0f 11 42 10	 movss	 DWORD PTR [edx+16], xmm0

; 68   : 		mRadius2 = radius * radius;

  0005c	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 60   : 		z = A.z;

  00060	89 42 0c	 mov	 DWORD PTR [edx+12], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 68   : 		mRadius2 = radius * radius;

  00063	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 126  : 	};

  00068	5d		 pop	 ebp
  00069	c2 14 00	 ret	 20			; 00000014H
?Init@SpherePack@@QAEXPAVSpherePackFactory@@ABVVector3d@@MPAX_N@Z ENDP ; SpherePack::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ??1SpherePack@@UAE@XZ
_TEXT	SEGMENT
??1SpherePack@@UAE@XZ PROC				; SpherePack::~SpherePack, COMDAT
; _this$ = ecx

; 108  : 	}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Sphere@@6B@
  00006	c3		 ret	 0
??1SpherePack@@UAE@XZ ENDP				; SpherePack::~SpherePack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ??0SpherePack@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SpherePack@@QAE@XZ PROC				; SpherePack::SpherePack, COMDAT
; _this$ = ecx

; 89   : 	SpherePack(void)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  00004	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000b	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 68   : 		mRadius2 = radius * radius;

  0000e	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 105  : 	};

  00012	8b c1		 mov	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 103  : 	: mCenter(Vector3d(0.0f, 0.0f, 0.0f)), mRadius(0.0f), mRadius2(0.0f) { };

  00014	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0001b	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 89   : 	SpherePack(void)

  00022	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePack@@6B@

; 90   : 	{
; 91   : 		mUserData         = 0; // default user data is null

  00028	c7 41 44 00 00
	00 00		 mov	 DWORD PTR [ecx+68], 0

; 92   : 		mFactory          = 0; // factory we are a member of

  0002f	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 93   : 		mNext             = 0; // linked list pointers

  00036	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 94   : 		mPrevious         = 0;

  0003d	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 95   : 		mParent           = 0;

  00044	c7 41 20 00 00
	00 00		 mov	 DWORD PTR [ecx+32], 0

; 96   : 		mNextSibling      = 0; // our brothers and sisters at this level.

  0004b	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 97   : 		mPrevSibling      = 0;

  00052	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0

; 98   : 		mChildren         = 0; // our children.

  00059	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0

; 99   : 		mChildCount       = 0; // number of children we have.

  00060	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 100  : 		mFifo1            = 0; // our FIFO1 location if we have one.

  00067	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0

; 101  : 		mFifo2            = 0; // our FIFO2 location if we have one.

  0006e	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h

; 67   : 		mRadius = radius;

  00075	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 68   : 		mRadius2 = radius * radius;

  0007c	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 119  : 		x = a;

  00081	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 120  : 		y = b;

  00088	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 121  : 		z = c;

  0008f	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h

; 89   : 	SpherePack(void)

  00096	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 102  : 		SetRadius(0);          // default radius
; 103  : 		mCenter.Set(0, 0, 0);  // default center position.
; 104  : 		IS_SPHERE	= false;

  00099	c6 41 4c 00	 mov	 BYTE PTR [ecx+76], 0

; 105  : 	};

  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c3		 ret	 0
??0SpherePack@@QAE@XZ ENDP				; SpherePack::SpherePack
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSpherePackCallback@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSpherePackCallback@@UAEPAXI@Z PROC			; SpherePackCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7SpherePackCallback@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSpherePackCallback@@UAEPAXI@Z ENDP			; SpherePackCallback::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::PointTest2dCallback, COMDAT
; _this$ = ecx

; 79   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?PointTest2dCallback@SpherePackCallback@@UAEXABVVector3d@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::PointTest2dCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_searchpos$ = 8						; size = 4
_distance$ = 12						; size = 4
_sphere$ = 16						; size = 4
_state$ = 20						; size = 4
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::RangeTestCallback, COMDAT
; _this$ = ecx

; 74   : 	{};

  00000	c2 10 00	 ret	 16			; 00000010H
?RangeTestCallback@SpherePackCallback@@UAEXABVVector3d@@MPAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::RangeTestCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z
_TEXT	SEGMENT
_p1$ = 8						; size = 4
_dir$ = 12						; size = 4
_distance$ = 16						; size = 4
_sect$ = 20						; size = 4
_sphere$ = 24						; size = 4
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z PROC ; SpherePackCallback::RayTraceCallback, COMDAT
; _this$ = ecx

; 68   : 	{};

  00000	c2 14 00	 ret	 20			; 00000014H
?RayTraceCallback@SpherePackCallback@@UAEXABVVector3d@@0M0PAVSpherePack@@@Z ENDP ; SpherePackCallback::RayTraceCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z
_TEXT	SEGMENT
_f$ = 8							; size = 4
_sphere$ = 12						; size = 4
_state$ = 16						; size = 4
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z PROC ; SpherePackCallback::VisibilityCallback, COMDAT
; _this$ = ecx

; 61   : 	{};

  00000	c2 0c 00	 ret	 12			; 0000000cH
?VisibilityCallback@SpherePackCallback@@UAEXABVFrustum@@PAVSpherePack@@W4ViewState@@@Z ENDP ; SpherePackCallback::VisibilityCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\spherepack.h
;	COMDAT ??1SpherePackCallback@@UAE@XZ
_TEXT	SEGMENT
??1SpherePackCallback@@UAE@XZ PROC			; SpherePackCallback::~SpherePackCallback, COMDAT
; _this$ = ecx

; 56   : 	virtual ~SpherePackCallback() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SpherePackCallback@@6B@
  00006	c3		 ret	 0
??1SpherePackCallback@@UAE@XZ ENDP			; SpherePackCallback::~SpherePackCallback
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GSphere@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSphere@@UAEPAXI@Z PROC				; Sphere::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7Sphere@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 18		 push	 24			; 00000018H
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GSphere@@UAEPAXI@Z ENDP				; Sphere::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\sphere.h
;	COMDAT ??1Sphere@@UAE@XZ
_TEXT	SEGMENT
??1Sphere@@UAE@XZ PROC					; Sphere::~Sphere, COMDAT
; _this$ = ecx

; 39   : 	virtual ~Sphere() {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7Sphere@@6B@
  00006	c3		 ret	 0
??1Sphere@@UAE@XZ ENDP					; Sphere::~Sphere
_TEXT	ENDS
END
