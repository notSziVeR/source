; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Distribute\Type.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ; NSound::LoadSoundInformationPiece
PUBLIC	?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ; NSound::SaveSoundInformationPiece
PUBLIC	?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ; NSound::DataToInstance
PUBLIC	?GetResultString@NSound@@YAPBDXZ		; NSound::GetResultString
PUBLIC	?SetResultString@NSound@@YAXPBD@Z		; NSound::SetResultString
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
PUBLIC	?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
PUBLIC	?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
PUBLIC	??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
PUBLIC	??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@ ; `string'
PUBLIC	??_C@_0P@DFMHJMOB@sounddatacount@		; `string'
PUBLIC	??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@ ; `string'
PUBLIC	??_C@_0O@OOLLGPNP@sounddata?$CF02d@		; `string'
PUBLIC	??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@		; `string'
PUBLIC	??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@	; `string'
PUBLIC	??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@ ; `string'
PUBLIC	??_C@_07EGDJHJID@?5Loaded@			; `string'
PUBLIC	??_C@_02BKFDOEMK@wt@				; `string'
PUBLIC	??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@ ; `string'
PUBLIC	??_C@_05NAOIJFC@Error@				; `string'
PUBLIC	??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@ ; `string'
PUBLIC	??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@ ; `string'
PUBLIC	??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@ ; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3c888889
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	__unlink:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?IsFile@@YA_NPBD@Z:PROC				; IsFile
EXTRN	?LogBox@@YAXPBD0PAUHWND__@@@Z:PROC		; LogBox
EXTRN	?Cache@CTextFileLoader@@SAPAV1@PBD@Z:PROC	; CTextFileLoader::Cache
EXTRN	?IsEmpty@CTextFileLoader@@QAE_NXZ:PROC		; CTextFileLoader::IsEmpty
EXTRN	?SetTop@CTextFileLoader@@QAEXXZ:PROC		; CTextFileLoader::SetTop
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z:PROC ; CTextFileLoader::GetTokenInteger
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
CRT$XCU	SEGMENT
?strResult$initializer$@NSound@@3P6AXXZA DD FLAT:??__EstrResult@NSound@@YAXXZ ; NSound::strResult$initializer$
CRT$XCU	ENDS
;	COMDAT __real@3c888889
CONST	SEGMENT
__real@3c888889 DD 03c888889r			; 0.0166667
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@ DB 'S'
	DB	'oundData%02d       %f "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@ DB 'SoundDataCount    %'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@
CONST	SEGMENT
??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@ DB 'ScriptTyp'
	DB	'e        CharacterSoundInformation', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@
CONST	SEGMENT
??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@ DB ' Cannot open f'
	DB	'ile for writing', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error@
CONST	SEGMENT
??_C@_05NAOIJFC@Error@ DB 'Error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@
CONST	SEGMENT
??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@ DB 'Fa'
	DB	'iled to save file (%s).', 0aH, 'Please check if it is read-on'
	DB	'ly or you have no space on the disk.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02BKFDOEMK@wt@
CONST	SEGMENT
??_C@_02BKFDOEMK@wt@ DB 'wt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EGDJHJID@?5Loaded@
CONST	SEGMENT
??_C@_07EGDJHJID@?5Loaded@ DB ' Loaded', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@
CONST	SEGMENT
??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@ DB ' File form'
	DB	'at error: The size of the vector is not 2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@
CONST	SEGMENT
??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@ DB ' File format error: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@
CONST	SEGMENT
??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@ DB ' Unable to find', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OOLLGPNP@sounddata?$CF02d@
CONST	SEGMENT
??_C@_0O@OOLLGPNP@sounddata?$CF02d@ DB 'sounddata%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@
CONST	SEGMENT
??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@ DB ' File format'
	DB	' error, SoundDataCount Unable to find.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DFMHJMOB@sounddatacount@
CONST	SEGMENT
??_C@_0P@DFMHJMOB@sounddatacount@ DB 'sounddatacount', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@
CONST	SEGMENT
??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@ DB ' Can not ope'
	DB	'n file for reading', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 00H ; NSound::strResult
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$1
__ehfuncinfo$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$4
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$7
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$8
	DD	00H
	DD	FLAT:__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$9
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  0000a	85 c0		 test	 eax, eax
  0000c	74 30		 je	 SHORT $LN3@Uninitiali
  0000e	66 90		 npad	 2
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00020	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0

; 4998 :         _My_data._Mysize = 0;

  00024	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00032	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00036	83 c6 1c	 add	 esi, 28			; 0000001cH

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00039	83 e8 01	 sub	 eax, 1
  0003c	75 d2		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0003e	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  00041	56		 push	 esi
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi

; 1907 : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Oldsize$1$ = -12					; size = 4
tv675 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi
  00011	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00017	0f 87 c8 01 00
	00		 ja	 $LN101@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00020	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00025	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00027	f7 e9		 imul	 ecx
  00029	03 d1		 add	 edx, ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002e	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00030	c1 fa 04	 sar	 edx, 4
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00042	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00044	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	03 d1		 add	 edx, ecx
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	8b d1		 mov	 edx, ecx
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0005f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00064	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00065	89 45 f8	 mov	 DWORD PTR tv675[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	83 c4 04	 add	 esp, 4
  00070	8b d8		 mov	 ebx, eax
  00072	eb 4f		 jmp	 SHORT $LN99@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00074	03 ca		 add	 ecx, edx

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00076	3b cb		 cmp	 ecx, ebx
  00078	73 25		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  0007a	8b cb		 mov	 ecx, ebx
$LN96@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0007c	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00083	2b c1		 sub	 eax, ecx
  00085	c1 e0 02	 shl	 eax, 2
  00088	89 45 f8	 mov	 DWORD PTR tv675[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00090	72 1b		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00098	83 c4 04	 add	 esp, 4
  0009b	8b d8		 mov	 ebx, eax
  0009d	eb 24		 jmp	 SHORT $LN99@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  0009f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  000a5	0f 87 3f 01 00
	00		 ja	 $LN102@Resize_rea
  000ab	eb cf		 jmp	 SHORT $LN96@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 10		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000bd	8b d8		 mov	 ebx, eax
  000bf	eb 05		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c1	33 db		 xor	 ebx, ebx
$LN99@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000c3	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
$LN21@Resize_rea:
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  000c9	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000cc	2b c1		 sub	 eax, ecx
  000ce	57		 push	 edi
  000cf	50		 push	 eax
  000d0	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000d7	2b c1		 sub	 eax, ecx
  000d9	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000e2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000e8	8b 37		 mov	 esi, DWORD PTR [edi]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ea	3b f0		 cmp	 esi, eax
  000ec	74 62		 je	 SHORT $LN30@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ee	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  000f1	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000f4	83 c2 04	 add	 edx, 4
  000f7	8b f8		 mov	 edi, eax
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL31@Resize_rea:
  00100	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00102	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
  00105	89 03		 mov	 DWORD PTR [ebx], eax

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00107	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00110	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00114	c7 42 f4 00 00
	00 00		 mov	 DWORD PTR [edx-12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  0011b	83 c3 1c	 add	 ebx, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0011e	c7 42 f8 00 00
	00 00		 mov	 DWORD PTR [edx-8], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00125	0f 10 41 e4	 movups	 xmm0, XMMWORD PTR [ecx-28]
  00129	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0
  0012d	f3 0f 7e 41 f4	 movq	 xmm0, QWORD PTR [ecx-12]
  00132	66 0f d6 42 f4	 movq	 QWORD PTR [edx-12], xmm0

; 4998 :         _My_data._Mysize = 0;

  00137	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0013e	c7 41 f8 0f 00
	00 00		 mov	 DWORD PTR [ecx-8], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00145	c6 41 e4 00	 mov	 BYTE PTR [ecx-28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00149	3b f7		 cmp	 esi, edi
  0014b	75 b3		 jne	 SHORT $LL31@Resize_rea
  0014d	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN30@Resize_rea:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00150	57		 push	 edi
  00151	53		 push	 ebx
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00158	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0015d	85 c9		 test	 ecx, ecx
  0015f	74 57		 je	 SHORT $LN78@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00161	57		 push	 edi
  00162	ff 77 04	 push	 DWORD PTR [edi+4]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0016b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0016e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00173	8b 37		 mov	 esi, DWORD PTR [edi]
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
  00178	2b ce		 sub	 ecx, esi
  0017a	f7 e9		 imul	 ecx
  0017c	03 d1		 add	 edx, ecx
  0017e	c1 fa 04	 sar	 edx, 4
  00181	8b c2		 mov	 eax, edx
  00183	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00186	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0018f	2b c8		 sub	 ecx, eax
  00191	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00194	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019a	72 12		 jb	 SHORT $LN88@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a2	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a4	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001aa	77 34		 ja	 SHORT $LN85@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ac	8b f2		 mov	 esi, edx
$LN88@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001ae	51		 push	 ecx
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b5	83 c4 08	 add	 esp, 8
$LN78@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001b8	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  001be	89 0f		 mov	 DWORD PTR [edi], ecx
  001c0	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  001c7	2b c2		 sub	 eax, edx
  001c9	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001cc	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  001cf	8b 45 f8	 mov	 eax, DWORD PTR tv675[ebp]
  001d2	03 c1		 add	 eax, ecx
  001d4	89 47 08	 mov	 DWORD PTR [edi+8], eax
  001d7	5f		 pop	 edi
  001d8	5e		 pop	 esi
  001d9	5b		 pop	 ebx

; 1611 :     }

  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 08 00	 ret	 8
$LN85@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN101@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  001e5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
$LN102@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001ea	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN98@Resize_rea:
  001ef	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  0000a	85 c0		 test	 eax, eax
  0000c	74 30		 je	 SHORT $LN3@Uninitiali
  0000e	66 90		 npad	 2
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00016	0f 57 c0	 xorps	 xmm0, xmm0
  00019	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00020	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0

; 4998 :         _My_data._Mysize = 0;

  00024	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0002b	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00032	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00036	83 c6 1c	 add	 esi, 28			; 0000001cH

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00039	83 e8 01	 sub	 eax, 1
  0003c	75 d2		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0003e	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  00041	56		 push	 esi
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
  00048	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi

; 1907 : }

  0004e	5d		 pop	 ebp
  0004f	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Oldsize$1$ = -12					; size = 4
tv675 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi
  00011	81 fb 49 92 24
	09		 cmp	 ebx, 153391689		; 09249249H
  00017	0f 87 c8 01 00
	00		 ja	 $LN101@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00020	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00025	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00027	f7 e9		 imul	 ecx
  00029	03 d1		 add	 edx, ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0002e	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00030	c1 fa 04	 sar	 edx, 4
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00042	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00044	b8 49 92 24 09	 mov	 eax, 153391689		; 09249249H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	03 d1		 add	 edx, ecx
  0004b	c1 fa 04	 sar	 edx, 4
  0004e	8b ca		 mov	 ecx, edx
  00050	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00053	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00055	8b d1		 mov	 edx, ecx
  00057	d1 ea		 shr	 edx, 1
  00059	2b c2		 sub	 eax, edx
  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0005f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00064	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00065	89 45 f8	 mov	 DWORD PTR tv675[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	83 c4 04	 add	 esp, 4
  00070	8b d8		 mov	 ebx, eax
  00072	eb 4f		 jmp	 SHORT $LN99@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00074	03 ca		 add	 ecx, edx

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00076	3b cb		 cmp	 ecx, ebx
  00078	73 25		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  0007a	8b cb		 mov	 ecx, ebx
$LN96@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0007c	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  00083	2b c1		 sub	 eax, ecx
  00085	c1 e0 02	 shl	 eax, 2
  00088	89 45 f8	 mov	 DWORD PTR tv675[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00090	72 1b		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00098	83 c4 04	 add	 esp, 4
  0009b	8b d8		 mov	 ebx, eax
  0009d	eb 24		 jmp	 SHORT $LN99@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  0009f	81 f9 49 92 24
	09		 cmp	 ecx, 153391689		; 09249249H
  000a5	0f 87 3f 01 00
	00		 ja	 $LN102@Resize_rea
  000ab	eb cf		 jmp	 SHORT $LN96@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 10		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000bd	8b d8		 mov	 ebx, eax
  000bf	eb 05		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c1	33 db		 xor	 ebx, ebx
$LN99@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000c3	89 5d fc	 mov	 DWORD PTR $T2[ebp], ebx
$LN21@Resize_rea:
  000c6	8b 4d f4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  000c9	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000cc	2b c1		 sub	 eax, ecx
  000ce	57		 push	 edi
  000cf	50		 push	 eax
  000d0	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  000d7	2b c1		 sub	 eax, ecx
  000d9	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000e2	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000e8	8b 37		 mov	 esi, DWORD PTR [edi]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ea	3b f0		 cmp	 esi, eax
  000ec	74 62		 je	 SHORT $LN30@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ee	8b 55 fc	 mov	 edx, DWORD PTR $T2[ebp]
  000f1	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  000f4	83 c2 04	 add	 edx, 4
  000f7	8b f8		 mov	 edi, eax
  000f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL31@Resize_rea:
  00100	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00102	8d 52 1c	 lea	 edx, DWORD PTR [edx+28]
  00105	89 03		 mov	 DWORD PTR [ebx], eax

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00107	8d 49 1c	 lea	 ecx, DWORD PTR [ecx+28]
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00110	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00114	c7 42 f4 00 00
	00 00		 mov	 DWORD PTR [edx-12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  0011b	83 c3 1c	 add	 ebx, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0011e	c7 42 f8 00 00
	00 00		 mov	 DWORD PTR [edx-8], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00125	0f 10 41 e4	 movups	 xmm0, XMMWORD PTR [ecx-28]
  00129	0f 11 42 e4	 movups	 XMMWORD PTR [edx-28], xmm0
  0012d	f3 0f 7e 41 f4	 movq	 xmm0, QWORD PTR [ecx-12]
  00132	66 0f d6 42 f4	 movq	 QWORD PTR [edx-12], xmm0

; 4998 :         _My_data._Mysize = 0;

  00137	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0013e	c7 41 f8 0f 00
	00 00		 mov	 DWORD PTR [ecx-8], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00145	c6 41 e4 00	 mov	 BYTE PTR [ecx-28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00149	3b f7		 cmp	 esi, edi
  0014b	75 b3		 jne	 SHORT $LL31@Resize_rea
  0014d	8b 7d f0	 mov	 edi, DWORD PTR _this$1$[ebp]
$LN30@Resize_rea:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00150	57		 push	 edi
  00151	53		 push	 ebx
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00158	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0015a	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0015d	85 c9		 test	 ecx, ecx
  0015f	74 57		 je	 SHORT $LN78@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00161	57		 push	 edi
  00162	ff 77 04	 push	 DWORD PTR [edi+4]
  00165	51		 push	 ecx
  00166	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0016b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0016e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00173	8b 37		 mov	 esi, DWORD PTR [edi]
  00175	83 c4 0c	 add	 esp, 12			; 0000000cH
  00178	2b ce		 sub	 ecx, esi
  0017a	f7 e9		 imul	 ecx
  0017c	03 d1		 add	 edx, ecx
  0017e	c1 fa 04	 sar	 edx, 4
  00181	8b c2		 mov	 eax, edx
  00183	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00186	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00188	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0018f	2b c8		 sub	 ecx, eax
  00191	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00194	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0019a	72 12		 jb	 SHORT $LN88@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0019c	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0019f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001a2	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001a4	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001a7	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001aa	77 34		 ja	 SHORT $LN85@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ac	8b f2		 mov	 esi, edx
$LN88@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001ae	51		 push	 ecx
  001af	56		 push	 esi
  001b0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001b5	83 c4 08	 add	 esp, 8
$LN78@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001b8	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  001be	89 0f		 mov	 DWORD PTR [edi], ecx
  001c0	8d 04 d5 00 00
	00 00		 lea	 eax, DWORD PTR [edx*8]
  001c7	2b c2		 sub	 eax, edx
  001c9	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  001cc	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  001cf	8b 45 f8	 mov	 eax, DWORD PTR tv675[ebp]
  001d2	03 c1		 add	 eax, ecx
  001d4	89 47 08	 mov	 DWORD PTR [edi+8], eax
  001d7	5f		 pop	 edi
  001d8	5e		 pop	 esi
  001d9	5b		 pop	 ebx

; 1611 :     }

  001da	8b e5		 mov	 esp, ebp
  001dc	5d		 pop	 ebp
  001dd	c2 08 00	 ret	 8
$LN85@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001e0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN101@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  001e5	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
$LN102@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001ea	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN98@Resize_rea:
  001ef	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2730 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2731 :         auto& _My_data = _Mypair._Myval2;
; 2732 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2733 : 
; 2734 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2735 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2736 :         } else {
; 2737 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2738 :         }
; 2739 : 
; 2740 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN29@Construct

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2749 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2751 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2752 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2753 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2754 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2755 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4885 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN27@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN27@Construct
$LN18@Construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 77   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN27@Construct
$LN19@Construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN27@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2782 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN29@Construct:

; 2741 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN26@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundData> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 4d		 je	 SHORT $LN50@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00017	72 28		 jb	 SHORT $LN49@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00023	72 12		 jb	 SHORT $LN36@Destroy_ra

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00025	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00028	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00030	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00033	77 2b		 ja	 SHORT $LN33@Destroy_ra

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00035	8b c2		 mov	 eax, edx
$LN36@Destroy_ra:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00037	51		 push	 ecx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN49@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00041	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00048	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00052	83 c6 1c	 add	 esi, 28			; 0000001cH
  00055	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00058	3b c7		 cmp	 eax, edi
  0005a	75 b6		 jne	 SHORT $LL4@Destroy_ra
$LN50@Destroy_ra:
  0005c	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN33@Destroy_ra:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN51@Destroy_ra:
  00065	cc		 int	 3
??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z PROC ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 4d		 je	 SHORT $LN50@Destroy_ra
  0000f	83 c6 18	 add	 esi, 24			; 00000018H
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00014	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00017	72 28		 jb	 SHORT $LN49@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00019	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00023	72 12		 jb	 SHORT $LN36@Destroy_ra

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00025	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00028	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00030	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00033	77 2b		 ja	 SHORT $LN33@Destroy_ra

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00035	8b c2		 mov	 eax, edx
$LN36@Destroy_ra:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00037	51		 push	 ecx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
$LN49@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00041	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00048	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00052	83 c6 1c	 add	 esi, 28			; 0000001cH
  00055	8d 46 e8	 lea	 eax, DWORD PTR [esi-24]
  00058	3b c7		 cmp	 eax, edi
  0005a	75 b6		 jne	 SHORT $LL4@Destroy_ra
$LN50@Destroy_ra:
  0005c	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  0005d	5e		 pop	 esi
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN33@Destroy_ra:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN51@Destroy_ra:
  00065	cc		 int	 3
??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange, COMDAT

; 2205 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ PROC ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@CAXXZ ENDP ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z
_TEXT	SEGMENT
__New_size$1$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z PROC ; std::operator+<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5114 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 5115 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 5116 :     const auto _Left_size  = _Left.size();

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 415  :             return __builtin_strlen(_First);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 5115 :     using _Size_type       = typename basic_string<_Elem, _Traits, _Alloc>::size_type;
; 5116 :     const auto _Left_size  = _Left.size();

  0000e	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00011	57		 push	 edi
  00012	89 55 fc	 mov	 DWORD PTR __Left_size$1$[ebp], edx

; 415  :             return __builtin_strlen(_First);

  00015	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL45@operator:
  00018	8a 06		 mov	 al, BYTE PTR [esi]
  0001a	46		 inc	 esi
  0001b	84 c0		 test	 al, al
  0001d	75 f9		 jne	 SHORT $LL45@operator

; 5117 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 5118 :     if (_Left.max_size() - _Left_size < _Right_size) {

  0001f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 415  :             return __builtin_strlen(_First);

  00024	2b f7		 sub	 esi, edi

; 5117 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 5118 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00026	2b c2		 sub	 eax, edx
  00028	3b c6		 cmp	 eax, esi
  0002a	0f 82 d5 00 00
	00		 jb	 $LN48@operator

; 2301 :         return _BUF_SIZE <= _Myres;

  00030	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00034	72 05		 jb	 SHORT $LN11@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00036	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00038	89 4d 0c	 mov	 DWORD PTR __Left$[ebp], ecx
$LN11@operator:

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2919 :         const auto _New_size    = static_cast<size_type>(_Left_size + _Right_size);

  0003e	8d 1c 16	 lea	 ebx, DWORD PTR [esi+edx]
  00041	0f 57 c0	 xorps	 xmm0, xmm0
  00044	89 5d f8	 mov	 DWORD PTR __New_size$1$[ebp], ebx

; 2920 :         size_type _New_capacity = _BUF_SIZE - 1;

  00047	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 2921 :         auto& _My_data          = _Mypair._Myval2;
; 2922 :         _Elem* _Ptr             = _My_data._Bx._Buf;
; 2923 :         auto&& _Alproxy         = _GET_PROXY_ALLOCATOR(_Alty, _Getal());
; 2924 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data); // throws
; 2925 : 
; 2926 :         if (_New_capacity < _New_size) {

  0004c	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]
  0004f	8b d8		 mov	 ebx, eax

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00051	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00054	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0005b	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2926 :         if (_New_capacity < _New_size) {

  00062	3b cf		 cmp	 ecx, edi
  00064	76 68		 jbe	 SHORT $LN16@operator

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00066	8b 7d f8	 mov	 edi, DWORD PTR __New_size$1$[ebp]
  00069	83 cf 0f	 or	 edi, 15			; 0000000fH
  0006c	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00072	76 1a		 jbe	 SHORT $LN31@operator

; 4885 :             return _Max;

  00074	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00079	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00084	8b d8		 mov	 ebx, eax
  00086	83 c4 04	 add	 esp, 4
  00089	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0008c	eb 3b		 jmp	 SHORT $LN38@operator
$LN31@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0008e	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  00093	3b fa		 cmp	 edi, edx
  00095	0f 42 fa	 cmovb	 edi, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2928 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00098	8d 57 01	 lea	 edx, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000a1	72 10		 jb	 SHORT $LN39@operator

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a9	8b d8		 mov	 ebx, eax
  000ab	83 c4 04	 add	 esp, 4
  000ae	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000b1	eb 16		 jmp	 SHORT $LN38@operator
$LN39@operator:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b3	85 d2		 test	 edx, edx
  000b5	74 10		 je	 SHORT $LN40@operator

; 77   :         return ::operator new(_Bytes);

  000b7	52		 push	 edx
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000bd	8b d8		 mov	 ebx, eax

; 77   :         return ::operator new(_Bytes);

  000bf	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c5	eb 02		 jmp	 SHORT $LN38@operator
$LN40@operator:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c7	33 db		 xor	 ebx, ebx
$LN38@operator:
  000c9	8b 55 fc	 mov	 edx, DWORD PTR __Left_size$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2930 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  000cc	89 18		 mov	 DWORD PTR [eax], ebx
$LN16@operator:

; 2931 : 
; 2932 : #if _HAS_CXX20
; 2933 :             if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2934 :                 _Traits::assign(_Ptr, _New_capacity + 1, _Elem());
; 2935 :             }
; 2936 : #endif // _HAS_CXX20
; 2937 :         }
; 2938 : 
; 2939 :         _My_data._Mysize = _New_size;

  000ce	8d 0c 16	 lea	 ecx, DWORD PTR [esi+edx]

; 2940 :         _My_data._Myres  = _New_capacity;

  000d1	89 78 14	 mov	 DWORD PTR [eax+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	52		 push	 edx

; 2939 :         _My_data._Mysize = _New_size;

  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d8	8b 4d 0c	 mov	 ecx, DWORD PTR __Left$[ebp]
  000db	51		 push	 ecx
  000dc	53		 push	 ebx
  000dd	e8 00 00 00 00	 call	 _memcpy

; 2942 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e5	56		 push	 esi
  000e6	ff 75 10	 push	 DWORD PTR __Right$[ebp]

; 2942 :         _Traits::copy(_Ptr + static_cast<ptrdiff_t>(_Left_size), _Right_ptr, _Right_size);

  000e9	03 cb		 add	 ecx, ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000eb	51		 push	 ecx
  000ec	e8 00 00 00 00	 call	 _memcpy

; 2943 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000f1	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f4	83 c4 18	 add	 esp, 24			; 00000018H

; 5120 :     }
; 5121 : 
; 5122 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000f7	5f		 pop	 edi

; 2943 :         _Traits::assign(_Ptr[_New_size], _Elem());

  000f8	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0

; 5120 :     }
; 5121 : 
; 5122 :     return {_String_constructor_concat_tag{}, _Left, _Left.c_str(), _Left_size, _Right, _Right_size};

  000fc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000ff	5e		 pop	 esi
  00100	5b		 pop	 ebx

; 5123 : }

  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
$LN48@operator:

; 5119 :         _Xlen_string();

  00105	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN46@operator:
  0010a	cc		 int	 3
??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ENDP ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??__FstrResult@NSound@@YAXXZ
text$yd	SEGMENT
??__FstrResult@NSound@@YAXXZ PROC			; NSound::`dynamic atexit destructor for 'strResult'', COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 2a		 jb	 SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00010	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 28		 ja	 SHORT $LN22@dynamic

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00035	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+16, 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003f	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00049	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A, 0
  00050	c3		 ret	 0
$LN22@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00051	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??__FstrResult@NSound@@YAXXZ ENDP			; NSound::`dynamic atexit destructor for 'strResult''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
;	COMDAT ??__EstrResult@NSound@@YAXXZ
text$di	SEGMENT
??__EstrResult@NSound@@YAXXZ PROC			; NSound::`dynamic initializer for 'strResult'', COMDAT

; 5    : std::string NSound::strResult;

  00000	68 00 00 00 00	 push	 OFFSET ??__FstrResult@NSound@@YAXXZ ; NSound::`dynamic atexit destructor for 'strResult''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__EstrResult@NSound@@YAXXZ ENDP			; NSound::`dynamic initializer for 'strResult''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2205 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
;	COMDAT ?SetResultString@NSound@@YAXPBD@Z
_TEXT	SEGMENT
_c_pszStr$ = 8						; size = 4
?SetResultString@NSound@@YAXPBD@Z PROC			; NSound::SetResultString, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszStr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 13   : {

  00008	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL7@SetResultS:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@SetResultS
  00017	2b c6		 sub	 eax, esi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	b9 00 00 00 00	 mov	 ecx, OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult
  0001e	50		 push	 eax
  0001f	52		 push	 edx
  00020	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00025	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 15   : }

  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
?SetResultString@NSound@@YAXPBD@Z ENDP			; NSound::SetResultString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
;	COMDAT ?GetResultString@NSound@@YAPBDXZ
_TEXT	SEGMENT
?GetResultString@NSound@@YAPBDXZ PROC			; NSound::GetResultString, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	83 3d 14 00 00
	00 10		 cmp	 DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+20, 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A ; NSound::strResult

; 2293 :         if (_Large_string_engaged()) {

  0000c	0f 43 05 00 00
	00 00		 cmovae	 eax, DWORD PTR ?strResult@NSound@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 10   : }

  00013	c3		 ret	 0
?GetResultString@NSound@@YAPBDXZ ENDP			; NSound::GetResultString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
;	COMDAT ?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z
_TEXT	SEGMENT
tv511 = -16						; size = 4
__Oldsize$1$ = -16					; size = 4
$T1 = -12						; size = 4
_i$1$ = -12						; size = 4
$T2 = -8						; size = 4
$T3 = -1						; size = 1
_c_rSoundDataVector$ = 8				; size = 4
_pSoundInstanceVector$ = 12				; size = 4
?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z PROC ; NSound::DataToInstance, COMDAT

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _c_rSoundDataVector$[ebp]
  0000a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0000c	3b 43 04	 cmp	 eax, DWORD PTR [ebx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 122  : 	if (c_rSoundDataVector.empty())

  0000f	0f 84 6a 01 00
	00		 je	 $LN3@DataToInst
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1827 :         pointer& _Mylast  = _My_data._Mylast;

  00015	57		 push	 edi
  00016	8b 7d 0c	 mov	 edi, DWORD PTR _pSoundInstanceVector$[ebp]

; 1828 : 
; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00019	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001b	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0001e	89 4d f8	 mov	 DWORD PTR $T2[ebp], ecx
  00021	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00024	3b c8		 cmp	 ecx, eax
  00026	74 16		 je	 SHORT $LN25@DataToInst

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  00028	57		 push	 edi
  00029	50		 push	 eax
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax
  00038	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0003b	89 45 f8	 mov	 DWORD PTR $T2[ebp], eax
$LN25@DataToInst:

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00041	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00046	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00048	f7 e9		 imul	 ecx
  0004a	56		 push	 esi
  0004b	03 d1		 add	 edx, ecx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0004d	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00052	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  00055	2b 4d f8	 sub	 ecx, DWORD PTR $T2[ebp]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00058	c1 fa 04	 sar	 edx, 4
  0005b	8b f2		 mov	 esi, edx
  0005d	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00060	03 f2		 add	 esi, edx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00062	f7 e9		 imul	 ecx
  00064	03 d1		 add	 edx, ecx
  00066	c1 fa 04	 sar	 edx, 4
  00069	8b c2		 mov	 eax, edx
  0006b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0006e	03 c2		 add	 eax, edx
  00070	89 45 f0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00073	3b f0		 cmp	 esi, eax
  00075	73 1e		 jae	 SHORT $LN33@DataToInst

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00077	8b 4d f8	 mov	 ecx, DWORD PTR $T2[ebp]
  0007a	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  00081	2b c6		 sub	 eax, esi

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  00083	57		 push	 edi
  00084	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  00087	8d 34 81	 lea	 esi, DWORD PTR [ecx+eax*4]
  0008a	56		 push	 esi
  0008b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAXPAUSSoundInstance@NSound@@QAU12@AAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundInstance> >

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00090	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1627 :             return;

  00093	eb 3d		 jmp	 SHORT $LN45@DataToInst
$LN33@DataToInst:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00095	76 3e		 jbe	 SHORT $LN34@DataToInst

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00097	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0009a	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0009f	2b 4d f8	 sub	 ecx, DWORD PTR $T2[ebp]
  000a2	f7 e9		 imul	 ecx
  000a4	03 d1		 add	 edx, ecx
  000a6	c1 fa 04	 sar	 edx, 4
  000a9	8b c2		 mov	 eax, edx
  000ab	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ae	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  000b0	3b f0		 cmp	 esi, eax
  000b2	76 0e		 jbe	 SHORT $LN35@DataToInst

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  000b4	8d 45 ff	 lea	 eax, DWORD PTR $T3[ebp]
  000b7	8b cf		 mov	 ecx, edi
  000b9	50		 push	 eax
  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  000c0	eb 13		 jmp	 SHORT $LN34@DataToInst
$LN35@DataToInst:

; 1635 :             }
; 1636 : 
; 1637 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1638 :             const pointer _Oldlast = _Mylast;
; 1639 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1640 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1641 :             } else {
; 1642 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000c2	2b 75 f0	 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
  000c5	57		 push	 edi
  000c6	56		 push	 esi
  000c7	ff 75 f4	 push	 DWORD PTR $T1[ebp]
  000ca	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundInstance@NSound@@@std@@@std@@YAPAUSSoundInstance@NSound@@PAU12@IAAV?$allocator@USSoundInstance@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundInstance> >
  000cf	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN45@DataToInst:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 132  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN34@DataToInst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d5	8b 4d 08	 mov	 ecx, DWORD PTR _c_rSoundDataVector$[ebp]
  000d8	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  000dd	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 132  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000df	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000e6	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000e9	2b cb		 sub	 ecx, ebx
  000eb	f7 e9		 imul	 ecx
  000ed	03 d1		 add	 edx, ecx
  000ef	c1 fa 04	 sar	 edx, 4
  000f2	8b c2		 mov	 eax, edx
  000f4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f7	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 132  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  000f9	0f 84 7e 00 00
	00		 je	 $LN43@DataToInst
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  000ff	33 f6		 xor	 esi, esi
$LL4@DataToInst:

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00101	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00104	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00109	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0010b	f7 e9		 imul	 ecx
  0010d	03 d1		 add	 edx, ecx
  0010f	c1 fa 04	 sar	 edx, 4
  00112	8b c2		 mov	 eax, edx
  00114	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00117	03 c2		 add	 eax, edx
  00119	3b 45 f4	 cmp	 eax, DWORD PTR _i$1$[ebp]
  0011c	76 66		 jbe	 SHORT $LN38@DataToInst
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 137  : 		rSoundInstance.dwFrame = (DWORD) (c_rSoundData.fTime / c_fFrameTime);

  0011e	f3 0f 10 04 1e	 movss	 xmm0, DWORD PTR [esi+ebx]
  00123	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@3c888889
  0012b	e8 00 00 00 00	 call	 __ftol3
  00130	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00132	89 04 0e	 mov	 DWORD PTR [esi+ecx], eax

; 138  : 		rSoundInstance.strSoundFileName = c_rSoundData.strSoundFileName;

  00135	83 c1 04	 add	 ecx, 4
  00138	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0013b	03 ce		 add	 ecx, esi
  0013d	03 c6		 add	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  0013f	3b c8		 cmp	 ecx, eax
  00141	74 12		 je	 SHORT $LN2@DataToInst

; 2301 :         return _BUF_SIZE <= _Myres;

  00143	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00147	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0014a	72 02		 jb	 SHORT $LN19@DataToInst

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0014c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN19@DataToInst:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0014e	52		 push	 edx
  0014f	50		 push	 eax
  00150	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@DataToInst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00155	8b 45 08	 mov	 eax, DWORD PTR _c_rSoundDataVector$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 132  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  00158	83 c6 1c	 add	 esi, 28			; 0000001cH
  0015b	ff 45 f4	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0015e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00161	8b 18		 mov	 ebx, DWORD PTR [eax]
  00163	2b cb		 sub	 ecx, ebx
  00165	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0016a	f7 e9		 imul	 ecx
  0016c	03 d1		 add	 edx, ecx
  0016e	c1 fa 04	 sar	 edx, 4
  00171	8b c2		 mov	 eax, edx
  00173	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00176	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 132  : 	for (DWORD i = 0; i < c_rSoundDataVector.size(); ++i)

  00178	39 45 f4	 cmp	 DWORD PTR _i$1$[ebp], eax
  0017b	72 84		 jb	 SHORT $LL4@DataToInst
$LN43@DataToInst:
  0017d	5e		 pop	 esi
  0017e	5f		 pop	 edi
$LN3@DataToInst:
  0017f	5b		 pop	 ebx

; 140  : }

  00180	8b e5		 mov	 esp, ebp
  00182	5d		 pop	 ebp
  00183	c3		 ret	 0
$LN38@DataToInst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1968 :             _Xrange();

  00184	e8 00 00 00 00	 call	 ?_Xrange@?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@std@@CAXXZ ; std::vector<NSound::SSoundInstance,std::allocator<NSound::SSoundInstance> >::_Xrange
$LN44@DataToInst:
  00189	cc		 int	 3
?DataToInstance@NSound@@YAXABV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@PAV?$vector@USSoundInstance@NSound@@V?$allocator@USSoundInstance@NSound@@@std@@@3@@Z ENDP ; NSound::DataToInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
;	COMDAT ?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
_TEXT	SEGMENT
_rSoundDataVector$GSCopy$1$ = -340			; size = 4
_File$1$ = -336						; size = 4
_i$1$ = -332						; size = 4
$T2 = -325						; size = 1
$T3 = -324						; size = 24
_strResult$ = -300					; size = 24
_szErrorText$4 = -276					; size = 257
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_rSoundDataVector$ = 12					; size = 4
?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z PROC ; NSound::SaveSoundInformationPiece, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 0c	 mov	 edi, DWORD PTR _rSoundDataVector$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00033	89 bd ac fe ff
	ff		 mov	 DWORD PTR _rSoundDataVector$GSCopy$1$[ebp], edi

; 82   : 	if (rSoundDataVector.empty())

  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  0003e	75 1d		 jne	 SHORT $LN5@SaveSoundI

; 83   : 	{
; 84   : 		if (IsFile(c_szFileName))

  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ?IsFile@@YA_NPBD@Z	; IsFile
  00046	83 c4 04	 add	 esp, 4
  00049	84 c0		 test	 al, al
  0004b	74 09		 je	 SHORT $LN6@SaveSoundI

; 85   : 		{
; 86   : 			_unlink(c_szFileName);

  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 __unlink
  00053	83 c4 04	 add	 esp, 4
$LN6@SaveSoundI:

; 87   : 		}
; 88   : 		return true;

  00056	b0 01		 mov	 al, 1
  00058	e9 ff 01 00 00	 jmp	 $LN1@SaveSoundI
$LN5@SaveSoundI:
  0005d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4998 :         _My_data._Mysize = 0;

  00060	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _strResult$[ebp+16], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0006a	0f 11 85 d4 fe
	ff ff		 movups	 XMMWORD PTR _strResult$[ebp], xmm0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00071	c7 85 e8 fe ff
	ff 0f 00 00 00	 mov	 DWORD PTR _strResult$[ebp+20], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007b	c6 85 d4 fe ff
	ff 00		 mov	 BYTE PTR _strResult$[ebp], 0

; 415  :             return __builtin_strlen(_First);

  00082	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 91   : 	std::string strResult;

  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0008b	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008e	66 90		 npad	 2
$LL98@SaveSoundI:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL98@SaveSoundI
  00097	2b ca		 sub	 ecx, edx

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	56		 push	 esi
  0009b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _strResult$[ebp]
  000a1	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 94   : 	FILE * File = fopen(c_szFileName, "wt");

  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_02BKFDOEMK@wt@
  000ab	56		 push	 esi
  000ac	e8 00 00 00 00	 call	 _fopen
  000b1	83 c4 08	 add	 esp, 8
  000b4	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _File$1$[ebp], eax

; 95   : 
; 96   : 	if (!File)

  000ba	85 c0		 test	 eax, eax
  000bc	75 71		 jne	 SHORT $LN7@SaveSoundI

; 97   : 	{
; 98   : 		char szErrorText[256 + 1];
; 99   : 		_snprintf(szErrorText, sizeof(szErrorText), "Failed to save file (%s).\nPlease check if it is read-only or you have no space on the disk.\n", c_szFileName);

  000be	56		 push	 esi
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@PJPGJAJH@Failed?5to?5save?5file?5?$CI?$CFs?$CJ?4?6Pleas@
  000c4	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szErrorText$4[ebp]
  000ca	68 01 01 00 00	 push	 257			; 00000101H
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 __snprintf

; 100  : 		LogBox(szErrorText, "Error");

  000d5	6a 00		 push	 0
  000d7	8d 85 ec fe ff
	ff		 lea	 eax, DWORD PTR _szErrorText$4[ebp]
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_05NAOIJFC@Error@
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox

; 101  : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MLNNILFP@?5Cannot?5open?5file?5for?5writing@
  000ed	8d 85 d4 fe ff
	ff		 lea	 eax, DWORD PTR _strResult$[ebp]
  000f3	50		 push	 eax
  000f4	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  000fa	50		 push	 eax
  000fb	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  00100	83 c4 28	 add	 esp, 40			; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00103	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 101  : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  00107	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0010b	72 02		 jb	 SHORT $LN75@SaveSoundI

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0010d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN75@SaveSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 101  : 		SetResultString((strResult + " Cannot open file for writing").c_str());

  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
  00115	83 c4 04	 add	 esp, 4
  00118	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0011e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00123	c6 85 bb fe ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  0012a	e9 f1 00 00 00	 jmp	 $LN11@SaveSoundI
$LN7@SaveSoundI:

; 102  : 		return false;
; 103  : 	}
; 104  : 
; 105  : 	fprintf(File, "ScriptType        CharacterSoundInformation\n");

  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@NJIDENFN@ScriptType?5?5?5?5?5?5?5?5CharacterSoun@
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 _fprintf

; 106  : 	fprintf(File, "\n");

  0013a	8b b5 b0 fe ff
	ff		 mov	 esi, DWORD PTR _File$1$[ebp]
  00140	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00145	56		 push	 esi
  00146	e8 00 00 00 00	 call	 _fprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0014b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0014e	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00153	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00155	f7 e9		 imul	 ecx
  00157	03 d1		 add	 edx, ecx
  00159	c1 fa 04	 sar	 edx, 4
  0015c	8b c2		 mov	 eax, edx
  0015e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00161	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 108  : 	fprintf(File, "SoundDataCount    %d\n", rSoundDataVector.size());

  00163	50		 push	 eax
  00164	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JEIKAJIN@SoundDataCount?5?5?5?5?$CFd?6@
  00169	56		 push	 esi
  0016a	e8 00 00 00 00	 call	 _fprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0016f	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 110  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00171	33 c9		 xor	 ecx, ecx
  00173	89 8d b4 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00179	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0017e	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _rSoundDataVector$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 108  : 	fprintf(File, "SoundDataCount    %d\n", rSoundDataVector.size());

  00184	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	2b cf		 sub	 ecx, edi
  0018c	f7 e9		 imul	 ecx
  0018e	03 d1		 add	 edx, ecx
  00190	c1 fa 04	 sar	 edx, 4
  00193	8b c2		 mov	 eax, edx
  00195	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00198	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 110  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  0019a	74 74		 je	 SHORT $LN3@SaveSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  0019c	33 f6		 xor	 esi, esi
  0019e	66 90		 npad	 2
$LL4@SaveSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4259 :         return _Mypair._Myval2._Myptr();

  001a0	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  001a3	03 c6		 add	 eax, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  001a5	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  001a9	72 02		 jb	 SHORT $LN47@SaveSoundI

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  001ab	8b 00		 mov	 eax, DWORD PTR [eax]
$LN47@SaveSoundI:
  001ad	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [esi+edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 113  : 		fprintf(File, "SoundData%02d       %f \"%s\"\n", i, rSoundData.fTime, rSoundData.strSoundFileName.c_str());

  001b2	8b bd b4 fe ff
	ff		 mov	 edi, DWORD PTR _i$1$[ebp]
  001b8	50		 push	 eax
  001b9	0f 5a c0	 cvtps2pd xmm0, xmm0
  001bc	83 ec 08	 sub	 esp, 8
  001bf	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  001c4	57		 push	 edi
  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FNDBKONF@SoundData?$CF02d?5?5?5?5?5?5?5?$CFf?5?$CC?$CFs?$CC?6@
  001ca	ff b5 b0 fe ff
	ff		 push	 DWORD PTR _File$1$[ebp]
  001d0	e8 00 00 00 00	 call	 _fprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d5	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _rSoundDataVector$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 110  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  001db	47		 inc	 edi
  001dc	89 bd b4 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edi

; 113  : 		fprintf(File, "SoundData%02d       %f \"%s\"\n", i, rSoundData.fTime, rSoundData.strSoundFileName.c_str());

  001e2	83 c4 18	 add	 esp, 24			; 00000018H
  001e5	83 c6 1c	 add	 esi, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001eb	8b 38		 mov	 edi, DWORD PTR [eax]
  001ed	2b cf		 sub	 ecx, edi
  001ef	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  001f4	f7 e9		 imul	 ecx
  001f6	03 d1		 add	 edx, ecx
  001f8	c1 fa 04	 sar	 edx, 4
  001fb	8b c2		 mov	 eax, edx
  001fd	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00200	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 110  : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00202	39 85 b4 fe ff
	ff		 cmp	 DWORD PTR _i$1$[ebp], eax
  00208	72 96		 jb	 SHORT $LL4@SaveSoundI
  0020a	8b b5 b0 fe ff
	ff		 mov	 esi, DWORD PTR _File$1$[ebp]
$LN3@SaveSoundI:

; 114  : 	}
; 115  : 
; 116  : 	fclose(File);

  00210	56		 push	 esi
  00211	e8 00 00 00 00	 call	 _fclose
  00216	83 c4 04	 add	 esp, 4

; 117  : 	return true;

  00219	c6 85 bb fe ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
$LN11@SaveSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00220	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR _strResult$[ebp+20]
  00226	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00229	72 2b		 jb	 SHORT $LN26@SaveSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0022b	8b 95 d4 fe ff
	ff		 mov	 edx, DWORD PTR _strResult$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00231	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00232	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00234	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0023a	72 10		 jb	 SHORT $LN36@SaveSoundI

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0023c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0023f	83 c1 23	 add	 ecx, 35			; 00000023H
  00242	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00244	83 c0 fc	 add	 eax, -4			; fffffffcH
  00247	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0024a	77 2b		 ja	 SHORT $LN102@SaveSoundI
$LN36@SaveSoundI:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0024c	51		 push	 ecx
  0024d	52		 push	 edx
  0024e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00253	83 c4 08	 add	 esp, 8
$LN26@SaveSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 117  : 	return true;

  00256	8a 85 bb fe ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@SaveSoundI:

; 118  : }

  0025c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0025f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00266	59		 pop	 ecx
  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0026c	33 cd		 xor	 ecx, ebp
  0026e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c3		 ret	 0
$LN102@SaveSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00277	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN100@SaveSoundI:
  0027c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$0:
  00000	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR _strResult$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z$1:
  0000b	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a ac fe ff
	ff		 mov	 ecx, DWORD PTR [edx-340]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SaveSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@@Z ENDP ; NSound::SaveSoundInformationPiece
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp
;	COMDAT ?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
_TEXT	SEGMENT
_pkTextFileLoader$1$ = -180				; size = 4
_iCount$ = -176						; size = 4
_c_szPathHeader$GSCopy$1$ = -172			; size = 4
__Oldsize$1$ = -168					; size = 4
_i$1$ = -168						; size = 4
tv2218 = -164						; size = 4
tv2210 = -164						; size = 4
tv210 = -164						; size = 4
$T2 = -160						; size = 4
_pTokenVector$3 = -160					; size = 4
$T4 = -156						; size = 4
tv2182 = -156						; size = 4
tv2231 = -149						; size = 1
tv2227 = -149						; size = 1
$T5 = -149						; size = 1
$T6 = -149						; size = 1
$T7 = -148						; size = 24
_strResult$ = -124					; size = 24
$T8 = -100						; size = 24
$T9 = -100						; size = 24
$T10 = -100						; size = 24
$T11 = -100						; size = 24
$T12 = -100						; size = 24
$T13 = -76						; size = 24
$T14 = -76						; size = 24
$T15 = -76						; size = 24
_szSoundDataHeader$ = -52				; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_rSoundDataVector$ = 12					; size = 4
_c_szPathHeader$ = 16					; size = 4
?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z PROC ; NSound::LoadSoundInformationPiece, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 10	 mov	 eax, DWORD PTR _c_szPathHeader$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 75 08	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00036	8b 7d 0c	 mov	 edi, DWORD PTR _rSoundDataVector$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00039	0f 11 45 84	 movups	 XMMWORD PTR _strResult$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 18   : {

  0003d	89 85 54 ff ff
	ff		 mov	 DWORD PTR _c_szPathHeader$GSCopy$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4998 :         _My_data._Mysize = 0;

  00043	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _strResult$[ebp+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004a	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR _strResult$[ebp+20], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00051	c6 45 84 00	 mov	 BYTE PTR _strResult$[ebp], 0

; 415  :             return __builtin_strlen(_First);

  00055	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 19   : 	std::string strResult;

  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0005e	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL452@LoadSoundI:
  00061	8a 01		 mov	 al, BYTE PTR [ecx]
  00063	41		 inc	 ecx
  00064	84 c0		 test	 al, al
  00066	75 f9		 jne	 SHORT $LL452@LoadSoundI
  00068	2b ca		 sub	 ecx, edx

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006a	51		 push	 ecx
  0006b	56		 push	 esi
  0006c	8d 4d 84	 lea	 ecx, DWORD PTR _strResult$[ebp]
  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 22   : 	CTextFileLoader* pkTextFileLoader = CTextFileLoader::Cache(c_szFileName);

  00074	56		 push	 esi
  00075	e8 00 00 00 00	 call	 ?Cache@CTextFileLoader@@SAPAV1@PBD@Z ; CTextFileLoader::Cache
  0007a	8b f0		 mov	 esi, eax
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 b5 4c ff ff
	ff		 mov	 DWORD PTR _pkTextFileLoader$1$[ebp], esi

; 23   : 	if (!pkTextFileLoader)

  00085	85 f6		 test	 esi, esi
  00087	74 3d		 je	 SHORT $LN26@LoadSoundI

; 24   : 	{
; 25   : 		return false;
; 26   : 	}
; 27   : 
; 28   : 	CTextFileLoader& rkTextFileLoader = *pkTextFileLoader;
; 29   : 	if (rkTextFileLoader.IsEmpty())

  00089	8b ce		 mov	 ecx, esi
  0008b	e8 00 00 00 00	 call	 ?IsEmpty@CTextFileLoader@@QAE_NXZ ; CTextFileLoader::IsEmpty
  00090	84 c0		 test	 al, al
  00092	74 70		 je	 SHORT $LN6@LoadSoundI

; 31   : 		SetResultString((strResult + " Can not open file for reading").c_str());

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@LLPPICEF@?5Can?5not?5open?5file?5for?5reading@
  00099	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  0009c	50		 push	 eax
  0009d	8d 45 9c	 lea	 eax, DWORD PTR $T12[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
$LN464@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000ad	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  000b1	72 02		 jb	 SHORT $LN228@LoadSoundI
  000b3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN228@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 31   : 		SetResultString((strResult + " Can not open file for reading").c_str());

  000b5	50		 push	 eax
  000b6	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
  000bb	83 c4 04	 add	 esp, 4
  000be	8d 4d 9c	 lea	 ecx, DWORD PTR $T12[ebp]
$LN462@LoadSoundI:
  000c1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN26@LoadSoundI:
  000c6	c6 85 6b ff ff
	ff 00		 mov	 BYTE PTR $T5[ebp], 0
$LN27@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000cd	8b 4d 98	 mov	 ecx, DWORD PTR _strResult$[ebp+20]
  000d0	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  000d3	0f 82 8e 05 00
	00		 jb	 $LN40@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d9	8b 55 84	 mov	 edx, DWORD PTR _strResult$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000dc	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000dd	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000df	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e5	0f 82 72 05 00
	00		 jb	 $LN50@LoadSoundI

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000eb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ee	83 c1 23	 add	 ecx, 35			; 00000023H
  000f1	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f3	83 c0 fc	 add	 eax, -4			; fffffffcH
  000f6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f9	0f 87 89 05 00
	00		 ja	 $LN466@LoadSoundI
  000ff	e9 59 05 00 00	 jmp	 $LN50@LoadSoundI
$LN6@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 35   : 	rkTextFileLoader.SetTop();

  00104	8b ce		 mov	 ecx, esi
  00106	e8 00 00 00 00	 call	 ?SetTop@CTextFileLoader@@QAEXXZ ; CTextFileLoader::SetTop
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0010b	a1 08 00 00 00	 mov	 eax, DWORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@+8
  00110	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00113	0f 11 45 b4	 movups	 XMMWORD PTR $T15[ebp], xmm0

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00117	89 45 bc	 mov	 DWORD PTR $T15[ebp+8], eax
  0011a	f3 0f 7e 05 00
	00 00 00	 movq	 xmm0, QWORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@
  00122	66 a1 0c 00 00
	00		 mov	 ax, WORD PTR ??_C@_0P@DFMHJMOB@sounddatacount@+12

; 2749 :             _My_data._Mysize = _Count;

  00128	c7 45 c4 0e 00
	00 00		 mov	 DWORD PTR $T15[ebp+16], 14 ; 0000000eH

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  0012f	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T15[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00136	66 0f d6 45 b4	 movq	 QWORD PTR $T15[ebp], xmm0
  0013b	66 89 45 c0	 mov	 WORD PTR $T15[ebp+12], ax

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0013f	c6 45 c2 00	 mov	 BYTE PTR $T15[ebp+14], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 38   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  00143	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR _iCount$[ebp]
  00149	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0014d	50		 push	 eax
  0014e	8d 45 b4	 lea	 eax, DWORD PTR $T15[ebp]
  00151	8b ce		 mov	 ecx, esi
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ?GetTokenInteger@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAH@Z ; CTextFileLoader::GetTokenInteger
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00159	8b 4d c8	 mov	 ecx, DWORD PTR $T15[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 38   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  0015c	85 c0		 test	 eax, eax
  0015e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00162	0f 94 c0	 sete	 al
  00165	88 85 6b ff ff
	ff		 mov	 BYTE PTR tv2231[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0016b	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0016e	72 32		 jb	 SHORT $LN281@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00170	8b 55 b4	 mov	 edx, DWORD PTR $T15[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00173	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00174	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00176	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0017c	72 14		 jb	 SHORT $LN291@LoadSoundI

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0017e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00181	83 c1 23	 add	 ecx, 35			; 00000023H
  00184	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00186	83 c0 fc	 add	 eax, -4			; fffffffcH
  00189	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0018c	0f 87 fb 04 00
	00		 ja	 $LN140@LoadSoundI
$LN291@LoadSoundI:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00192	51		 push	 ecx
  00193	52		 push	 edx
  00194	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00199	8a 85 6b ff ff
	ff		 mov	 al, BYTE PTR tv2231[ebp]
  0019f	83 c4 08	 add	 esp, 8
$LN281@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 38   : 	if (!rkTextFileLoader.GetTokenInteger("sounddatacount", &iCount))

  001a2	84 c0		 test	 al, al
  001a4	74 1e		 je	 SHORT $LN7@LoadSoundI

; 39   : 	{
; 40   : 		SetResultString((strResult + " File format error, SoundDataCount Unable to find.").c_str());

  001a6	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@IKAPCMKK@?5File?5format?5error?0?5SoundDataCo@
  001ab	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  001ae	50		 push	 eax
  001af	8d 45 9c	 lea	 eax, DWORD PTR $T11[ebp]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  001b8	83 c4 0c	 add	 esp, 12			; 0000000cH
  001bb	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  001bf	e9 e9 fe ff ff	 jmp	 $LN464@LoadSoundI
$LN7@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  001c4	8b 17		 mov	 edx, DWORD PTR [edi]
  001c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001c9	89 95 64 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  001cf	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  001d5	3b d0		 cmp	 edx, eax
  001d7	74 1e		 je	 SHORT $LN322@LoadSoundI

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  001d9	57		 push	 edi
  001da	50		 push	 eax
  001db	52		 push	 edx
  001dc	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  001e1	8b 07		 mov	 eax, DWORD PTR [edi]
  001e3	83 c4 0c	 add	 esp, 12			; 0000000cH
  001e6	89 85 60 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  001ec	8b d0		 mov	 edx, eax
  001ee	89 47 04	 mov	 DWORD PTR [edi+4], eax
  001f1	89 85 64 ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
$LN322@LoadSoundI:

; 1621 :         if (_Newsize < _Oldsize) { // trim

  001f7	8b b5 50 ff ff
	ff		 mov	 esi, DWORD PTR _iCount$[ebp]
  001fd	8b c8		 mov	 ecx, eax
  001ff	2b ca		 sub	 ecx, edx
  00201	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00206	f7 e9		 imul	 ecx
  00208	03 d1		 add	 edx, ecx
  0020a	c1 fa 04	 sar	 edx, 4
  0020d	8b c2		 mov	 eax, edx
  0020f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00212	03 c2		 add	 eax, edx
  00214	89 85 58 ff ff
	ff		 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  0021a	3b f0		 cmp	 esi, eax
  0021c	73 24		 jae	 SHORT $LN328@LoadSoundI

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  0021e	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  00224	8d 04 f5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*8]
  0022b	2b c6		 sub	 eax, esi

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  0022d	57		 push	 edi
  0022e	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T2[ebp]
  00234	8d 34 82	 lea	 esi, DWORD PTR [edx+eax*4]
  00237	56		 push	 esi
  00238	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSoundData@NSound@@@std@@@std@@YAXPAUSSoundData@NSound@@QAU12@AAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Destroy_range<std::allocator<NSound::SSoundData> >

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  0023d	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1627 :             return;

  00240	eb 49		 jmp	 SHORT $LN460@LoadSoundI
$LN328@LoadSoundI:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00242	76 4a		 jbe	 SHORT $LN329@LoadSoundI

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00244	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00247	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  0024c	2b 8d 64 ff ff
	ff		 sub	 ecx, DWORD PTR $T4[ebp]
  00252	f7 e9		 imul	 ecx
  00254	03 d1		 add	 edx, ecx
  00256	c1 fa 04	 sar	 edx, 4
  00259	8b c2		 mov	 eax, edx
  0025b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0025e	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00260	3b f0		 cmp	 esi, eax
  00262	76 11		 jbe	 SHORT $LN330@LoadSoundI

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00264	8d 85 6b ff ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  0026a	8b cf		 mov	 ecx, edi
  0026c	50		 push	 eax
  0026d	56		 push	 esi
  0026e	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<NSound::SSoundData,std::allocator<NSound::SSoundData> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00273	eb 19		 jmp	 SHORT $LN329@LoadSoundI
$LN330@LoadSoundI:

; 1635 :             }
; 1636 : 
; 1637 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1638 :             const pointer _Oldlast = _Mylast;
; 1639 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1640 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1641 :             } else {
; 1642 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00275	2b b5 58 ff ff
	ff		 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
  0027b	57		 push	 edi
  0027c	56		 push	 esi
  0027d	ff b5 60 ff ff
	ff		 push	 DWORD PTR $T2[ebp]
  00283	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USSoundData@NSound@@@std@@@std@@YAPAUSSoundData@NSound@@PAU12@IAAV?$allocator@USSoundData@NSound@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<NSound::SSoundData> >
  00288	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN460@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  0028b	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN329@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0028e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00291	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  00296	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  00298	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0029a	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  0029c	89 b5 58 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002a2	03 d1		 add	 edx, ecx
  002a4	c1 fa 04	 sar	 edx, 4
  002a7	8b c2		 mov	 eax, edx
  002a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ac	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  002ae	0f 84 37 02 00
	00		 je	 $LN3@LoadSoundI
  002b4	33 c0		 xor	 eax, eax
  002b6	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv2182[ebp], eax
  002bc	0f 1f 40 00	 npad	 4
$LL4@LoadSoundI:

; 50   : 		_snprintf(szSoundDataHeader, sizeof(szSoundDataHeader), "sounddata%02d", i);

  002c0	56		 push	 esi
  002c1	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OOLLGPNP@sounddata?$CF02d@
  002c6	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  002c9	6a 21		 push	 33			; 00000021H
  002cb	50		 push	 eax
  002cc	e8 00 00 00 00	 call	 __snprintf
  002d1	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2349 :     size_type _Mysize = 0; // current length of string

  002d4	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+16], 0

; 415  :             return __builtin_strlen(_First);

  002db	8d 4d cc	 lea	 ecx, DWORD PTR _szSoundDataHeader$[ebp]

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  002de	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 50   : 		_snprintf(szSoundDataHeader, sizeof(szSoundDataHeader), "sounddata%02d", i);

  002e5	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  002e8	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  002eb	0f 11 45 b4	 movups	 XMMWORD PTR $T14[ebp], xmm0
  002ef	90		 npad	 1
$LL453@LoadSoundI:

; 415  :             return __builtin_strlen(_First);

  002f0	8a 01		 mov	 al, BYTE PTR [ecx]
  002f2	41		 inc	 ecx
  002f3	84 c0		 test	 al, al
  002f5	75 f9		 jne	 SHORT $LL453@LoadSoundI
  002f7	2b ca		 sub	 ecx, edx

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  002f9	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  002fc	51		 push	 ecx
  002fd	50		 push	 eax
  002fe	8d 4d b4	 lea	 ecx, DWORD PTR $T14[ebp]
  00301	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 52   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  00306	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _pkTextFileLoader$1$[ebp]
  0030c	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _pTokenVector$3[ebp]
  00312	50		 push	 eax
  00313	8d 45 b4	 lea	 eax, DWORD PTR $T14[ebp]
  00316	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0031a	50		 push	 eax
  0031b	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00320	8b 4d c8	 mov	 ecx, DWORD PTR $T14[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 52   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  00323	85 c0		 test	 eax, eax
  00325	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00329	0f 94 c0	 sete	 al
  0032c	88 85 6b ff ff
	ff		 mov	 BYTE PTR tv2227[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00332	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00335	72 32		 jb	 SHORT $LN133@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00337	8b 55 b4	 mov	 edx, DWORD PTR $T14[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0033a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0033d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00343	72 14		 jb	 SHORT $LN143@LoadSoundI

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00345	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00348	83 c1 23	 add	 ecx, 35			; 00000023H
  0034b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0034d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00350	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00353	0f 87 34 03 00
	00		 ja	 $LN140@LoadSoundI
$LN143@LoadSoundI:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00359	51		 push	 ecx
  0035a	52		 push	 edx
  0035b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00360	8a 85 6b ff ff
	ff		 mov	 al, BYTE PTR tv2227[ebp]
  00366	83 c4 08	 add	 esp, 8
$LN133@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 52   : 		if (!rkTextFileLoader.GetTokenVector(szSoundDataHeader, &pTokenVector))

  00369	84 c0		 test	 al, al
  0036b	0f 85 f9 01 00
	00		 jne	 $LN442@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00371	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$3[ebp]
  00377	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0037a	8b 30		 mov	 esi, DWORD PTR [eax]
  0037c	2b ce		 sub	 ecx, esi
  0037e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00383	f7 e9		 imul	 ecx
  00385	c1 fa 02	 sar	 edx, 2
  00388	8b c2		 mov	 eax, edx
  0038a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0038d	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 58   : 		if (2 != pTokenVector->size())

  0038f	83 f8 02	 cmp	 eax, 2
  00392	0f 85 b4 01 00
	00		 jne	 $LN443@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00398	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  0039c	72 02		 jb	 SHORT $LN309@LoadSoundI

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0039e	8b 36		 mov	 esi, DWORD PTR [esi]
$LN309@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 64   : 		rSoundDataVector[i].fTime = (float) atof(pTokenVector->at(0).c_str());

  003a0	56		 push	 esi
  003a1	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  003a6	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 64   : 		rSoundDataVector[i].fTime = (float) atof(pTokenVector->at(0).c_str());

  003a8	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  003ab	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR tv2182[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 64   : 		rSoundDataVector[i].fTime = (float) atof(pTokenVector->at(0).c_str());

  003b1	d9 9d 5c ff ff
	ff		 fstp	 DWORD PTR tv210[ebp]
  003b7	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR tv210[ebp]
  003bf	f3 0f 11 04 08	 movss	 DWORD PTR [eax+ecx], xmm0

; 65   : 		if (c_szPathHeader)

  003c4	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _c_szPathHeader$GSCopy$1$[ebp]
  003ca	85 c0		 test	 eax, eax
  003cc	0f 84 87 00 00
	00		 je	 $LN10@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  003d2	8b 17		 mov	 edx, DWORD PTR [edi]
  003d4	03 d1		 add	 edx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  003d6	8b c8		 mov	 ecx, eax
  003d8	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  003db	0f 1f 44 00 00	 npad	 5
$LL454@LoadSoundI:
  003e0	8a 01		 mov	 al, BYTE PTR [ecx]
  003e2	41		 inc	 ecx
  003e3	84 c0		 test	 al, al
  003e5	75 f9		 jne	 SHORT $LL454@LoadSoundI

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003e7	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _c_szPathHeader$GSCopy$1$[ebp]

; 415  :             return __builtin_strlen(_First);

  003ed	2b ce		 sub	 ecx, esi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003ef	51		 push	 ecx
  003f0	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 67   : 			rSoundDataVector[i].strSoundFileName = c_szPathHeader;

  003f1	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  003f4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  003f9	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$3[ebp]
  003ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00402	8b 30		 mov	 esi, DWORD PTR [eax]
  00404	2b ce		 sub	 ecx, esi
  00406	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0040b	f7 e9		 imul	 ecx
  0040d	c1 fa 02	 sar	 edx, 2
  00410	8b c2		 mov	 eax, edx
  00412	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00415	03 c2		 add	 eax, edx
  00417	83 f8 01	 cmp	 eax, 1
  0041a	0f 86 77 02 00
	00		 jbe	 $LN446@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00420	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  00424	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00427	72 02		 jb	 SHORT $LN335@LoadSoundI

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00429	8b 12		 mov	 edx, DWORD PTR [edx]
$LN335@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0042b	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0042d	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0042f	03 b5 64 ff ff
	ff		 add	 esi, DWORD PTR tv2182[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00435	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00438	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv2210[ebp], eax
  0043e	66 90		 npad	 2
$LL455@LoadSoundI:
  00440	8a 01		 mov	 al, BYTE PTR [ecx]
  00442	41		 inc	 ecx
  00443	84 c0		 test	 al, al
  00445	75 f9		 jne	 SHORT $LL455@LoadSoundI
  00447	2b 8d 5c ff ff
	ff		 sub	 ecx, DWORD PTR tv2210[ebp]

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0044d	51		 push	 ecx
  0044e	52		 push	 edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 68   : 			rSoundDataVector[i].strSoundFileName += pTokenVector->at(1).c_str();

  0044f	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00452	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 69   : 		}

  00457	eb 5e		 jmp	 SHORT $LN2@LoadSoundI
$LN10@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00459	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _pTokenVector$3[ebp]
  0045f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00462	8b 30		 mov	 esi, DWORD PTR [eax]
  00464	2b ce		 sub	 ecx, esi
  00466	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0046b	f7 e9		 imul	 ecx
  0046d	c1 fa 02	 sar	 edx, 2
  00470	8b c2		 mov	 eax, edx
  00472	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00475	03 c2		 add	 eax, edx
  00477	83 f8 01	 cmp	 eax, 1
  0047a	0f 86 17 02 00
	00		 jbe	 $LN446@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00480	83 7e 2c 10	 cmp	 DWORD PTR [esi+44], 16	; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  00484	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00487	72 02		 jb	 SHORT $LN372@LoadSoundI

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00489	8b 12		 mov	 edx, DWORD PTR [edx]
$LN372@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0048b	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0048d	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0048f	03 b5 64 ff ff
	ff		 add	 esi, DWORD PTR tv2182[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00495	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00498	89 85 5c ff ff
	ff		 mov	 DWORD PTR tv2218[ebp], eax
  0049e	66 90		 npad	 2
$LL456@LoadSoundI:
  004a0	8a 01		 mov	 al, BYTE PTR [ecx]
  004a2	41		 inc	 ecx
  004a3	84 c0		 test	 al, al
  004a5	75 f9		 jne	 SHORT $LL456@LoadSoundI
  004a7	2b 8d 5c ff ff
	ff		 sub	 ecx, DWORD PTR tv2218[ebp]

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004ad	51		 push	 ecx
  004ae	52		 push	 edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 72   : 			rSoundDataVector[i].strSoundFileName = pTokenVector->at(1).c_str();

  004af	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  004b2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004b7	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  004ba	b8 93 24 49 92	 mov	 eax, -1840700269	; 92492493H
  004bf	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  004c1	8b b5 58 ff ff
	ff		 mov	 esi, DWORD PTR _i$1$[ebp]
  004c7	83 85 64 ff ff
	ff 1c		 add	 DWORD PTR tv2182[ebp], 28 ; 0000001cH
  004ce	46		 inc	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004cf	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  004d1	89 b5 58 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004d7	03 d1		 add	 edx, ecx
  004d9	c1 fa 04	 sar	 edx, 4
  004dc	8b c2		 mov	 eax, edx
  004de	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004e1	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 48   : 	for (DWORD i = 0; i < rSoundDataVector.size(); ++i)

  004e3	3b f0		 cmp	 esi, eax
  004e5	0f 82 d5 fd ff
	ff		 jb	 $LL4@LoadSoundI
$LN3@LoadSoundI:

; 76   : 	SetResultString((strResult + " Loaded").c_str());

  004eb	68 00 00 00 00	 push	 OFFSET ??_C@_07EGDJHJID@?5Loaded@
  004f0	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  004f3	50		 push	 eax
  004f4	8d 45 9c	 lea	 eax, DWORD PTR $T8[ebp]
  004f7	50		 push	 eax
  004f8	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  004fd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00500	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 76   : 	SetResultString((strResult + " Loaded").c_str());

  00504	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00508	72 02		 jb	 SHORT $LN78@LoadSoundI

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0050a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN78@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 76   : 	SetResultString((strResult + " Loaded").c_str());

  0050c	50		 push	 eax
  0050d	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00512	8b 4d b0	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 76   : 	SetResultString((strResult + " Loaded").c_str());

  00515	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00518	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0051b	0f 82 30 01 00
	00		 jb	 $LN94@LoadSoundI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00521	8b 55 9c	 mov	 edx, DWORD PTR $T8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00524	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00525	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00527	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0052d	0f 82 14 01 00
	00		 jb	 $LN104@LoadSoundI

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00533	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00536	83 c1 23	 add	 ecx, 35			; 00000023H
  00539	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0053b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0053e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00541	0f 87 4b 01 00
	00		 ja	 $LN467@LoadSoundI
  00547	e9 fb 00 00 00	 jmp	 $LN104@LoadSoundI
$LN443@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 60   : 			SetResultString((strResult + " File format error: The size of the vector is not 2").c_str());

  0054c	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@ECJCCDPG@?5File?5format?5error?3?5The?5size?5of@
  00551	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00554	50		 push	 eax
  00555	8d 45 9c	 lea	 eax, DWORD PTR $T9[ebp]
  00558	50		 push	 eax
  00559	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0055e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00561	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00565	e9 43 fb ff ff	 jmp	 $LN464@LoadSoundI
$LN442@LoadSoundI:

; 54   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  0056a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LPIKLLAN@?5File?5format?5error?3?5@
  0056f	8d 45 84	 lea	 eax, DWORD PTR _strResult$[ebp]
  00572	50		 push	 eax
  00573	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  00579	50		 push	 eax
  0057a	e8 00 00 00 00	 call	 ??$?HDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@QBD@Z ; std::operator+<char,std::char_traits<char>,std::allocator<char> >
  0057f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00582	8b d0		 mov	 edx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00584	8d 4d cc	 lea	 ecx, DWORD PTR _szSoundDataHeader$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 54   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  00587	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0058b	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
  0058e	66 90		 npad	 2
$LL457@LoadSoundI:
  00590	8a 01		 mov	 al, BYTE PTR [ecx]
  00592	41		 inc	 ecx
  00593	84 c0		 test	 al, al
  00595	75 f9		 jne	 SHORT $LL457@LoadSoundI
  00597	2b ce		 sub	 ecx, esi

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00599	8d 45 cc	 lea	 eax, DWORD PTR _szSoundDataHeader$[ebp]
  0059c	51		 push	 ecx
  0059d	50		 push	 eax
  0059e	8b ca		 mov	 ecx, edx
  005a0	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2349 :     size_type _Mysize = 0; // current length of string

  005a5	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+16], 0
  005ac	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  005af	0f 11 45 b4	 movups	 XMMWORD PTR $T13[ebp], xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  005b3	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+20], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  005ba	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  005bd	0f 11 45 b4	 movups	 XMMWORD PTR $T13[ebp], xmm0
  005c1	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  005c6	66 0f d6 45 c4	 movq	 QWORD PTR $T13[ebp+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  005cb	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  005d2	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005d9	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005dc	6a 0f		 push	 15			; 0000000fH
  005de	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EHBCCDFO@?5Unable?5to?5find@
  005e3	8d 4d b4	 lea	 ecx, DWORD PTR $T13[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 54   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  005e6	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  005ea	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  005ef	0f 10 08	 movups	 xmm1, XMMWORD PTR [eax]
  005f2	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  005f7	0f 11 4d 9c	 movups	 XMMWORD PTR $T10[ebp], xmm1

; 4998 :         _My_data._Mysize = 0;

  005fb	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00602	66 0f d6 45 ac	 movq	 QWORD PTR $T10[ebp+16], xmm0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00607	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0060e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00611	83 7d b0 10	 cmp	 DWORD PTR $T10[ebp+20], 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00615	8d 4d 9c	 lea	 ecx, DWORD PTR $T10[ebp]

; 2293 :         if (_Large_string_engaged()) {

  00618	66 0f 7e c8	 movd	 eax, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 54   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  0061c	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00620	0f 43 c8	 cmovae	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 54   : 			SetResultString((strResult + " File format error: " + szSoundDataHeader + " Unable to find").c_str());

  00623	51		 push	 ecx
  00624	e8 00 00 00 00	 call	 ?SetResultString@NSound@@YAXPBD@Z ; NSound::SetResultString
  00629	83 c4 04	 add	 esp, 4
  0062c	8d 4d 9c	 lea	 ecx, DWORD PTR $T10[ebp]
  0062f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00634	8d 4d b4	 lea	 ecx, DWORD PTR $T13[ebp]
  00637	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0063c	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00642	e9 7a fa ff ff	 jmp	 $LN462@LoadSoundI
$LN104@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00647	51		 push	 ecx
  00648	52		 push	 edx
  00649	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0064e	83 c4 08	 add	 esp, 8
$LN94@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 77   : 	return true;

  00651	c6 85 6b ff ff
	ff 01		 mov	 BYTE PTR $T5[ebp], 1
  00658	e9 70 fa ff ff	 jmp	 $LN27@LoadSoundI
$LN50@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0065d	51		 push	 ecx
  0065e	52		 push	 edx
  0065f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00664	83 c4 08	 add	 esp, 8
$LN40@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 77   : 	return true;

  00667	8a 85 6b ff ff
	ff		 mov	 al, BYTE PTR $T5[ebp]

; 78   : }

  0066d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00670	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00677	59		 pop	 ecx
  00678	5f		 pop	 edi
  00679	5e		 pop	 esi
  0067a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0067d	33 cd		 xor	 ecx, ebp
  0067f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00684	8b e5		 mov	 esp, ebp
  00686	5d		 pop	 ebp
  00687	c3		 ret	 0
$LN466@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00688	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN140@LoadSoundI:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\MilesLib\Type.cpp

; 78   : }

  0068d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN467@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00692	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN446@LoadSoundI:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1968 :             _Xrange();

  00697	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN459@LoadSoundI:
  0069c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$0:
  00000	8d 4d 84	 lea	 ecx, DWORD PTR _strResult$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$1:
  00008	8d 4d 9c	 lea	 ecx, DWORD PTR $T12[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$2:
  00010	8d 4d b4	 lea	 ecx, DWORD PTR $T15[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$3:
  00018	8d 4d 9c	 lea	 ecx, DWORD PTR $T11[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$4:
  00020	8d 4d b4	 lea	 ecx, DWORD PTR $T14[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$9:
  00028	8d 4d 9c	 lea	 ecx, DWORD PTR $T8[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$8:
  00030	8d 4d 9c	 lea	 ecx, DWORD PTR $T9[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$5:
  00038	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0003e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$6:
  00043	8d 4d b4	 lea	 ecx, DWORD PTR $T13[ebp]
  00046	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z$7:
  0004b	8d 4d 9c	 lea	 ecx, DWORD PTR $T10[ebp]
  0004e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00053	cc		 int	 3
  00054	cc		 int	 3
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
__ehhandler$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z:
  00058	90		 npad	 1
  00059	90		 npad	 1
  0005a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00061	8b 8a 4c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-180]
  00067	33 c8		 xor	 ecx, eax
  00069	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00071	33 c8		 xor	 ecx, eax
  00073	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00078	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z
  0007d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?LoadSoundInformationPiece@NSound@@YA_NPBDAAV?$vector@USSoundData@NSound@@V?$allocator@USSoundData@NSound@@@std@@@std@@0@Z ENDP ; NSound::LoadSoundInformationPiece
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3528 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3529 :         // assign [_Ptr, _Ptr + _Count)
; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2283 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3531 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3532 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3534 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4903 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4885 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4889 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 77   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3539 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv509 = -12						; size = 4
$T1 = -8						; size = 4
tv521 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv514 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3422 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3423 :         // append [_Ptr, _Ptr + _Count)
; 3424 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3425 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3426 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3427 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3428 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3429 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3430 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3443 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4939 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4941 :         }
; 4942 : 
; 4943 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4885 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv514[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv514[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4889 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv514[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4947 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 77   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4959 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR $T1[ebp], 16	; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv521[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv509[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4960 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv521[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv509[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00123	41		 inc	 ecx

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3434 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4940 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
