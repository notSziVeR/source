; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\Distribute\RaceData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_R4?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@ ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@USMotionModeData@CRaceData@@@@@8 ; CDynamicPool<CRaceData::SMotionModeData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@USMotionModeData@CRaceData@@@@8 ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@USMotionModeData@CRaceData@@@@8 ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@USMotionModeData@CRaceData@@@@8 ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCRaceData@@@@6B@		; CDynamicPool<CRaceData>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCRaceData@@@@@8		; CDynamicPool<CRaceData> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCRaceData@@@@8		; CDynamicPool<CRaceData>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCRaceData@@@@8		; CDynamicPool<CRaceData>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCRaceData@@@@8	; CDynamicPool<CRaceData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCRaceData@@@@6B@		; CDynamicPool<CRaceData>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCRaceData@@@@UAEPAXI@Z	; CDynamicPool<CRaceData>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@ ; CDynamicPool<CRaceData::SMotionModeData>::`vftable'
PUBLIC	??_G?$CDynamicPool@USMotionModeData@CRaceData@@@@UAEPAXI@Z ; CDynamicPool<CRaceData::SMotionModeData>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCRaceData@@@@UAEPAXI@Z:PROC	; CDynamicPool<CRaceData>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@USMotionModeData@CRaceData@@@@UAEPAXI@Z:PROC ; CDynamicPool<CRaceData::SMotionModeData>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@ ; CDynamicPool<CRaceData::SMotionModeData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@USMotionModeData@CRaceData@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCRaceData@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCRaceData@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCRaceData@@@@6B@ ; CDynamicPool<CRaceData>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCRaceData@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCRaceData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCRaceData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCRaceData@@@@@8 ; CDynamicPool<CRaceData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCRaceData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCRaceData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCRaceData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCRaceData@@@@8 ; CDynamicPool<CRaceData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCRaceData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCRaceData@@@@8 DD 00H		; CDynamicPool<CRaceData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCRaceData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCRaceData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCRaceData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CRaceData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCRaceData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCRaceData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCRaceData@@@@6B@ DD 00H		; CDynamicPool<CRaceData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCRaceData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCRaceData@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@USMotionModeData@CRaceData@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@USMotionModeData@CRaceData@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@USMotionModeData@CRaceData@@@@@8 ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@USMotionModeData@CRaceData@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@USMotionModeData@CRaceData@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@USMotionModeData@CRaceData@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@USMotionModeData@CRaceData@@@@8 ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@USMotionModeData@CRaceData@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@USMotionModeData@CRaceData@@@@8 DD 00H ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@USMotionModeData@CRaceData@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@USMotionModeData@CRaceData@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@USMotionModeData@CRaceData@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CRaceData::SMotionModeData> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@USMotionModeData@CRaceData@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@ DD 00H ; CDynamicPool<CRaceData::SMotionModeData>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@USMotionModeData@CRaceData@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@USMotionModeData@CRaceData@@@@8
rdata$r	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
PUBLIC	??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Insert_node
PUBLIC	??1SMotionModeData@CRaceData@@UAE@XZ		; CRaceData::SMotionModeData::~SMotionModeData
PUBLIC	??_GSMotionModeData@CRaceData@@UAEPAXI@Z	; CRaceData::SMotionModeData::`scalar deleting destructor'
PUBLIC	??1?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Insert_node
PUBLIC	??1?$map@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::~map<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >
PUBLIC	??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
PUBLIC	??1?$map@KUSModelData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CRaceData::SModelData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SModelData> > >::~map<unsigned long,CRaceData::SModelData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SModelData> > >
PUBLIC	??1SComboAttackData@CRaceData@@QAE@XZ		; CRaceData::SComboAttackData::~SComboAttackData
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Insert_node
PUBLIC	??1?$map@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::~map<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >
PUBLIC	??0SSkin@CRaceData@@QAE@ABU01@@Z		; CRaceData::SSkin::SSkin
PUBLIC	??1SSkin@CRaceData@@QAE@XZ			; CRaceData::SSkin::~SSkin
PUBLIC	?deallocate@?$allocator@USSkin@CRaceData@@@std@@QAEXQAUSSkin@CRaceData@@I@Z ; std::allocator<CRaceData::SSkin>::deallocate
PUBLIC	??1?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::~vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >
PUBLIC	?_Xlength@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Xlength
PUBLIC	?New@CRaceData@@SAPAV1@XZ			; CRaceData::New
PUBLIC	?Delete@CRaceData@@SAXPAV1@@Z			; CRaceData::Delete
PUBLIC	?CreateSystem@CRaceData@@SAXII@Z		; CRaceData::CreateSystem
PUBLIC	?DestroySystem@CRaceData@@SAXXZ			; CRaceData::DestroySystem
PUBLIC	??0CRaceData@@QAE@XZ				; CRaceData::CRaceData
PUBLIC	??1CRaceData@@UAE@XZ				; CRaceData::~CRaceData
PUBLIC	?Destroy@CRaceData@@QAEXXZ			; CRaceData::Destroy
PUBLIC	?GetBaseModelFileName@CRaceData@@QBEPBDXZ	; CRaceData::GetBaseModelFileName
PUBLIC	?GetAttributeFileName@CRaceData@@QBEPBDXZ	; CRaceData::GetAttributeFileName
PUBLIC	?GetMotionListFileName@CRaceData@@QBEPBDXZ	; CRaceData::GetMotionListFileName
PUBLIC	?GetBaseModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ ; CRaceData::GetBaseModelThing
PUBLIC	?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ ; CRaceData::GetLODModelThing
PUBLIC	?GetAttributeDataPtr@CRaceData@@QAEPAVCAttributeData@@XZ ; CRaceData::GetAttributeDataPtr
PUBLIC	?GetAttachingBoneName@CRaceData@@QAEHKPAPBD@Z	; CRaceData::GetAttachingBoneName
PUBLIC	?CreateMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z ; CRaceData::CreateMotionModeIterator
PUBLIC	?NextMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z ; CRaceData::NextMotionModeIterator
PUBLIC	?GetMotionKey@CRaceData@@QAEHGGPAK@Z		; CRaceData::GetMotionKey
PUBLIC	?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
PUBLIC	?GetModelDataPointer@CRaceData@@QAEHKPAPBUSModelData@1@@Z ; CRaceData::GetModelDataPointer
PUBLIC	?GetMotionVectorPointer@CRaceData@@QAEHGGPAPBV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z ; CRaceData::GetMotionVectorPointer
PUBLIC	?GetMotionDataPointer@CRaceData@@QAEHGGGPAPAVCRaceMotionData@@@Z ; CRaceData::GetMotionDataPointer
PUBLIC	?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z ; CRaceData::GetMotionDataPointer
PUBLIC	?GetAttachingDataCount@CRaceData@@QAEKXZ	; CRaceData::GetAttachingDataCount
PUBLIC	?GetAttachingDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ; CRaceData::GetAttachingDataPointer
PUBLIC	?GetCollisionDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ; CRaceData::GetCollisionDataPointer
PUBLIC	?GetBodyCollisionDataPointer@CRaceData@@QAEHPAPBUSAttachingData@NRaceData@@@Z ; CRaceData::GetBodyCollisionDataPointer
PUBLIC	?IsTree@CRaceData@@QAEHXZ			; CRaceData::IsTree
PUBLIC	?GetTreeFileName@CRaceData@@QAEPBDXZ		; CRaceData::GetTreeFileName
PUBLIC	?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z ; CRaceData::RegisterMotionData
PUBLIC	?SetRace@CRaceData@@QAEXK@Z			; CRaceData::SetRace
PUBLIC	?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z ; CRaceData::RegisterAttachingBoneName
PUBLIC	?RegisterMotionMode@CRaceData@@QAEXG@Z		; CRaceData::RegisterMotionMode
PUBLIC	?OLD_RegisterMotion@CRaceData@@QAEXGGPBDE@Z	; CRaceData::OLD_RegisterMotion
PUBLIC	?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z ; CRaceData::NEW_RegisterMotion
PUBLIC	?SetMotionRandomWeight@CRaceData@@QAE_NGGGE@Z	; CRaceData::SetMotionRandomWeight
PUBLIC	?RegisterNormalAttack@CRaceData@@QAEXGG@Z	; CRaceData::RegisterNormalAttack
PUBLIC	?GetNormalAttackIndex@CRaceData@@QAEHGPAG@Z	; CRaceData::GetNormalAttackIndex
PUBLIC	?ReserveComboAttack@CRaceData@@QAEXGGK@Z	; CRaceData::ReserveComboAttack
PUBLIC	?RegisterComboAttack@CRaceData@@QAEXGGKG@Z	; CRaceData::RegisterComboAttack
PUBLIC	?GetComboDataPointer@CRaceData@@QAEHGGPAPAUSComboAttackData@1@@Z ; CRaceData::GetComboDataPointer
PUBLIC	?SetShapeModel@CRaceData@@QAEXIPBD@Z		; CRaceData::SetShapeModel
PUBLIC	?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z	; CRaceData::AppendShapeSkin
PUBLIC	?SetHairSkin@CRaceData@@QAEXIIPBD00@Z		; CRaceData::SetHairSkin
PUBLIC	?GetSmokeEffectID@CRaceData@@QAEKI@Z		; CRaceData::GetSmokeEffectID
PUBLIC	?GetSmokeBone@CRaceData@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CRaceData::GetSmokeBone
PUBLIC	?FindHair@CRaceData@@QAEPAUSHair@1@I@Z		; CRaceData::FindHair
PUBLIC	?FindShape@CRaceData@@QAEPAUSShape@1@I@Z	; CRaceData::FindShape
PUBLIC	?__Initialize@CRaceData@@IAEXXZ			; CRaceData::__Initialize
PUBLIC	?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z ; CRaceData::__OLD_RegisterMotion
PUBLIC	?GetMotionVectorPointer@CRaceData@@IAEHGGPAPAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z ; CRaceData::GetMotionVectorPointer
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
PUBLIC	??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Insert_node
PUBLIC	??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::operator[]
PUBLIC	??1?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::~map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Insert_node
PUBLIC	??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::operator[]
PUBLIC	??1?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAE@XZ ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::~map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >
PUBLIC	??_GCRaceData@@UAEPAXI@Z			; CRaceData::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCRaceData@@@@UAE@XZ		; CDynamicPool<CRaceData>::~CDynamicPool<CRaceData>
PUBLIC	?Delete@?$CDynamicPool@VCRaceData@@@@KAXPAVCRaceData@@@Z ; CDynamicPool<CRaceData>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXI@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXQAPAVCRaceData@@II@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Xlength
PUBLIC	??1?$CDynamicPool@USMotionModeData@CRaceData@@@@UAE@XZ ; CDynamicPool<CRaceData::SMotionModeData>::~CDynamicPool<CRaceData::SMotionModeData>
PUBLIC	?Delete@?$CDynamicPool@USMotionModeData@CRaceData@@@@KAXPAUSMotionModeData@CRaceData@@@Z ; CDynamicPool<CRaceData::SMotionModeData>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXI@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXQAPAUSMotionModeData@CRaceData@@II@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Xlength
PUBLIC	??1?$pair@$$CBKUSHair@CRaceData@@@std@@QAE@XZ	; std::pair<unsigned long const ,CRaceData::SHair>::~pair<unsigned long const ,CRaceData::SHair>
PUBLIC	??1?$pair@$$CBKUSShape@CRaceData@@@std@@QAE@XZ	; std::pair<unsigned long const ,CRaceData::SShape>::~pair<unsigned long const ,CRaceData::SShape>
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > > >::operator++
PUBLIC	??1?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@QAE@XZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::~vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >
PUBLIC	?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Tidy
PUBLIC	?_Xlength@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Xlength
PUBLIC	??1?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@QAE@XZ ; std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >::~pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >
PUBLIC	??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@QAE@XZ ; std::pair<unsigned long const ,CRaceData::SComboAttackData>::~pair<unsigned long const ,CRaceData::SComboAttackData>
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Emplace_reallocate<CRaceData::SMotion const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Emplace_reallocate<CRaceData::SSkin const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::_Find_lower_bound<unsigned short>
PUBLIC	??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@KV?$allocator@K@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??$_Emplace_reallocate@ABQAUSMotionModeData@CRaceData@@@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEPAPAUSMotionModeData@CRaceData@@QAPAU23@ABQAU23@@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Emplace_reallocate<CRaceData::SMotionModeData * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCRaceData@@@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEPAPAVCRaceData@@QAPAV2@ABQAV2@@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Emplace_reallocate<CRaceData * const &>
PUBLIC	??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotionModeData * *,CRaceData::SMotionModeData * *>
PUBLIC	??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceData * *,CRaceData * *>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
PUBLIC	??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ; std::_Uninitialized_move<CRaceData::SSkin *,std::allocator<CRaceData::SSkin> >
PUBLIC	??$_Destroy_range@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAXPAUSSkin@CRaceData@@QAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ; std::_Destroy_range<std::allocator<CRaceData::SSkin> >
PUBLIC	??$destroy@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::destroy<std::pair<unsigned long const ,CRaceData::SComboAttackData> >
PUBLIC	??$_Zero_range@PAK@std@@YAPAKQAK0@Z		; std::_Zero_range<unsigned long *>
PUBLIC	??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotion *,CRaceData::SMotion *>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >::~_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >
PUBLIC	??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z	; std::_Copy_memmove<unsigned long *,unsigned long *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_7SMotionModeData@CRaceData@@6B@		; CRaceData::SMotionModeData::`vftable'
PUBLIC	?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A ; CRaceData::ms_MotionModeDataPool
PUBLIC	?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A ; CRaceData::ms_kPool
PUBLIC	??_7CRaceData@@6B@				; CRaceData::`vftable'
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	??_C@_0CH@BMIMHJM@CRaceData?3?3GetSmokeEffectID?$CIeSm@ ; `string'
PUBLIC	??_C@_0BN@LKCBFCOE@Hair?5number?5?$CFd?5is?5not?5exist?4@ ; `string'
PUBLIC	??_C@_0CB@IBAKOHGK@Failed?5getting?5motion?5mode?5data@ ; `string'
PUBLIC	??_C@_0EG@DMPCLHEF@CRaceData?3?3RegisterMotionData?5?9@ ; `string'
PUBLIC	??_C@_0JC@NKNOKDIB@CRaceData?3?3SetMotionRandomWeigh@ ; `string'
PUBLIC	??_C@_0DA@ECNOMAND@CRaceData?3?3RegisterCombo?5?9?5Stra@ ; `string'
PUBLIC	??_C@_0M@DICOFBOH@_lod_01?4gr2@			; `string'
PUBLIC	??_C@_0M@LNIEHMJP@motlist?4txt@			; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CRaceData@@6B@				; CRaceData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRaceData@@@8				; CRaceData `RTTI Type Descriptor'
PUBLIC	??_R3CRaceData@@8				; CRaceData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRaceData@@8				; CRaceData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRaceData@@8			; CRaceData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SMotionModeData@CRaceData@@6B@		; CRaceData::SMotionModeData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSMotionModeData@CRaceData@@@8		; CRaceData::SMotionModeData `RTTI Type Descriptor'
PUBLIC	??_R3SMotionModeData@CRaceData@@8		; CRaceData::SMotionModeData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SMotionModeData@CRaceData@@8		; CRaceData::SMotionModeData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SMotionModeData@CRaceData@@8	; CRaceData::SMotionModeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?IsFileExist@CResourceManager@@SA_NPBD@Z:PROC	; CResourceManager::IsFileExist
EXTRN	??_ESMotionModeData@CRaceData@@UAEPAXI@Z:PROC	; CRaceData::SMotionModeData::`vector deleting destructor'
EXTRN	??_ECRaceData@@UAEPAXI@Z:PROC			; CRaceData::`vector deleting destructor'
EXTRN	?New@CRaceMotionData@@SAPAV1@XZ:PROC		; CRaceMotionData::New
EXTRN	?Delete@CRaceMotionData@@SAXPAV1@@Z:PROC	; CRaceMotionData::Delete
EXTRN	?SetName@CRaceMotionData@@QAEXI@Z:PROC		; CRaceMotionData::SetName
EXTRN	?GetMotionFileName@CRaceMotionData@@QBEPBDXZ:PROC ; CRaceMotionData::GetMotionFileName
EXTRN	?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z:PROC ; CRaceMotionData::LoadMotionData
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CRaceData@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CRaceData@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT ??_R1A@?0A@EA@SMotionModeData@CRaceData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SMotionModeData@CRaceData@@8 DD FLAT:??_R0?AUSMotionModeData@CRaceData@@@8 ; CRaceData::SMotionModeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SMotionModeData@CRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R2SMotionModeData@CRaceData@@8
rdata$r	SEGMENT
??_R2SMotionModeData@CRaceData@@8 DD FLAT:??_R1A@?0A@EA@SMotionModeData@CRaceData@@8 ; CRaceData::SMotionModeData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3SMotionModeData@CRaceData@@8
rdata$r	SEGMENT
??_R3SMotionModeData@CRaceData@@8 DD 00H		; CRaceData::SMotionModeData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SMotionModeData@CRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSMotionModeData@CRaceData@@@8
data$rs	SEGMENT
??_R0?AUSMotionModeData@CRaceData@@@8 DD FLAT:??_7type_info@@6B@ ; CRaceData::SMotionModeData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSMotionModeData@CRaceData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SMotionModeData@CRaceData@@6B@
rdata$r	SEGMENT
??_R4SMotionModeData@CRaceData@@6B@ DD 00H		; CRaceData::SMotionModeData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSMotionModeData@CRaceData@@@8
	DD	FLAT:??_R3SMotionModeData@CRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRaceData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRaceData@@8 DD FLAT:??_R0?AVCRaceData@@@8 ; CRaceData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R2CRaceData@@8
rdata$r	SEGMENT
??_R2CRaceData@@8 DD FLAT:??_R1A@?0A@EA@CRaceData@@8	; CRaceData::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CRaceData@@8
rdata$r	SEGMENT
??_R3CRaceData@@8 DD 00H				; CRaceData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CRaceData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRaceData@@@8
data$rs	SEGMENT
??_R0?AVCRaceData@@@8 DD FLAT:??_7type_info@@6B@	; CRaceData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRaceData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CRaceData@@6B@
rdata$r	SEGMENT
??_R4CRaceData@@6B@ DD 00H				; CRaceData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRaceData@@@8
	DD	FLAT:??_R3CRaceData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LNIEHMJP@motlist?4txt@
CONST	SEGMENT
??_C@_0M@LNIEHMJP@motlist?4txt@ DB 'motlist.txt', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DICOFBOH@_lod_01?4gr2@
CONST	SEGMENT
??_C@_0M@DICOFBOH@_lod_01?4gr2@ DB '_lod_01.gr2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ECNOMAND@CRaceData?3?3RegisterCombo?5?9?5Stra@
CONST	SEGMENT
??_C@_0DA@ECNOMAND@CRaceData?3?3RegisterCombo?5?9?5Stra@ DB 'CRaceData::R'
	DB	'egisterCombo - Strange combo index!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0JC@NKNOKDIB@CRaceData?3?3SetMotionRandomWeigh@
CONST	SEGMENT
??_C@_0JC@NKNOKDIB@CRaceData?3?3SetMotionRandomWeigh@ DB 'CRaceData::SetM'
	DB	'otionRandomWeight(wMotionModeIndex=%d, wMotionIndex=%d, wMoti'
	DB	'onSubIndex=%d, byPercentage=%d) - Find Motion(wMotionIndex=%d'
	DB	') FAILED', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@DMPCLHEF@CRaceData?3?3RegisterMotionData?5?9@
CONST	SEGMENT
??_C@_0EG@DMPCLHEF@CRaceData?3?3RegisterMotionData?5?9@ DB 'CRaceData::Re'
	DB	'gisterMotionData - LoadMotionData(c_szFileName=%s) ERROR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IBAKOHGK@Failed?5getting?5motion?5mode?5data@
CONST	SEGMENT
??_C@_0CB@IBAKOHGK@Failed?5getting?5motion?5mode?5data@ DB 'Failed gettin'
	DB	'g motion mode data!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LKCBFCOE@Hair?5number?5?$CFd?5is?5not?5exist?4@
CONST	SEGMENT
??_C@_0BN@LKCBFCOE@Hair?5number?5?$CFd?5is?5not?5exist?4@ DB 'Hair number'
	DB	' %d is not exist.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BMIMHJM@CRaceData?3?3GetSmokeEffectID?$CIeSm@
CONST	SEGMENT
??_C@_0CH@BMIMHJM@CRaceData?3?3GetSmokeEffectID?$CIeSm@ DB 'CRaceData::Ge'
	DB	'tSmokeEffectID(eSmoke=%d)', 00H		; `string'
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7CRaceData@@6B@
CONST	SEGMENT
??_7CRaceData@@6B@ DD FLAT:??_R4CRaceData@@6B@		; CRaceData::`vftable'
	DD	FLAT:??_ECRaceData@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A DD FLAT:??_7?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@ ; CRaceData::ms_MotionModeDataPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A DD FLAT:??_7?$CDynamicPool@VCRaceData@@@@6B@ ; CRaceData::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7SMotionModeData@CRaceData@@6B@
CONST	SEGMENT
??_7SMotionModeData@CRaceData@@6B@ DD FLAT:??_R4SMotionModeData@CRaceData@@6B@ ; CRaceData::SMotionModeData::`vftable'
	DD	FLAT:??_ESMotionModeData@CRaceData@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAUSSkin@CRaceData@@PAU12@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@PAU12@00AAV?$allocator@USSkin@CRaceData@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAUSSkin@CRaceData@@PAU12@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@PAU12@00AAV?$allocator@USSkin@CRaceData@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAUSSkin@CRaceData@@PAU12@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@PAU12@00AAV?$allocator@USSkin@CRaceData@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAUSSkin@CRaceData@@PAU12@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@PAU12@00AAV?$allocator@USSkin@CRaceData@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKK@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABG@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABG@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABG@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABG@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABG@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABG@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABG@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABG@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z$0
__tryblocktable$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z$3
__unwindtable$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKK@std@@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABG$$V@?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@ABG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABG$$V@?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@ABG@Z$2
__ehfuncinfo$??$_Try_emplace@ABG$$V@?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@ABG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABG$$V@?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@_N@1@ABG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@K$$V@?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@K$$V@?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z$2
__ehfuncinfo$??$_Try_emplace@K$$V@?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@K$$V@?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@K$$V@?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@K$$V@?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z$2
__ehfuncinfo$??$_Try_emplace@K$$V@?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@K$$V@?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@_N@1@$$QAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKK@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBGPAUSMotionModeData@CRaceData@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@USMotionModeData@CRaceData@@@@QAEPAUSMotionModeData@CRaceData@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@USMotionModeData@CRaceData@@@@QAEPAUSMotionModeData@CRaceData@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@USMotionModeData@CRaceData@@@@QAEPAUSMotionModeData@CRaceData@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@USMotionModeData@CRaceData@@@@QAEPAUSMotionModeData@CRaceData@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCRaceData@@@@QAEPAVCRaceData@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCRaceData@@@@QAEPAVCRaceData@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCRaceData@@@@QAEPAVCRaceData@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCRaceData@@@@QAEPAVCRaceData@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z$2
__ehfuncinfo$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z$2
__ehfuncinfo$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z$6
__ehfuncinfo$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z$0
__ehfuncinfo$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z$0
__ehfuncinfo$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveComboAttack@CRaceData@@QAEXGGK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveComboAttack@CRaceData@@QAEXGGK@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReserveComboAttack@CRaceData@@QAEXGGK@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ReserveComboAttack@CRaceData@@QAEXGGK@Z$8
__ehfuncinfo$?ReserveComboAttack@CRaceData@@QAEXGGK@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ReserveComboAttack@CRaceData@@QAEXGGK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterNormalAttack@CRaceData@@QAEXGG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterNormalAttack@CRaceData@@QAEXGG@Z$2
__ehfuncinfo$?RegisterNormalAttack@CRaceData@@QAEXGG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RegisterNormalAttack@CRaceData@@QAEXGG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z$2
__ehfuncinfo$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterMotionMode@CRaceData@@QAEXG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterMotionMode@CRaceData@@QAEXG@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterMotionMode@CRaceData@@QAEXG@Z$5
__ehfuncinfo$?RegisterMotionMode@CRaceData@@QAEXG@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterMotionMode@CRaceData@@QAEXG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z$6
__ehfuncinfo$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ$1
__ehfuncinfo$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CRaceData@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CRaceData@@QAE@XZ DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$??0CRaceData@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CRaceData@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$9
	DD	09H
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$11
	DD	0bH
	DD	FLAT:__unwindfunclet$??0CRaceData@@QAE@XZ$12
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CRaceData@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CRaceData@@SAPAV1@XZ$0
__ehfuncinfo$?New@CRaceData@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CRaceData@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SSkin@CRaceData@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SSkin@CRaceData@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SSkin@CRaceData@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SSkin@CRaceData@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SSkin@CRaceData@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@1@ABG@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@1@ABG@Z$2
__ehfuncinfo$??A?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@1@ABG@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@@std@@QAEAAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@1@ABG@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
??ms_MotionModeDataPool$initializer$@CRaceData@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ ; ??ms_MotionModeDataPool$initializer$@CRaceData@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z PROC		; std::_Copy_memmove<unsigned long *,unsigned long *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::_Copy_memmove<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >::~_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >, COMDAT
; _this$ = ecx

; 1657 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

  00000	56		 push	 esi

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 947  :         for (; _First != _Last; ++_First) {

  00007	3b f7		 cmp	 esi, edi
  00009	74 13		 je	 SHORT $LN5@Uninitiali
  0000b	0f 1f 44 00 00	 npad	 5
$LL6@Uninitiali:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1SSkin@CRaceData@@QAE@XZ
  00017	83 c6 34	 add	 esi, 52			; 00000034H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL6@Uninitiali
$LN5@Uninitiali:
  0001e	5f		 pop	 edi

; 1659 :     }

  0001f	5e		 pop	 esi
  00020	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >::~_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z PROC ; std::_Copy_memmove<CRaceData::SMotion *,CRaceData::SMotion *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z ENDP ; std::_Copy_memmove<CRaceData::SMotion *,CRaceData::SMotion *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Zero_range@PAK@std@@YAPAKQAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAK@std@@YAPAKQAK0@Z PROC		; std::_Zero_range<unsigned long *>, COMDAT

; 1878 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1879 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1880 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1881 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1882 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAK@std@@YAPAKQAK0@Z ENDP		; std::_Zero_range<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::destroy<std::pair<unsigned long const ,CRaceData::SComboAttackData> >, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	85 c0		 test	 eax, eax
  0000c	74 41		 je	 SHORT $LN15@destroy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00011	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00016	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001c	72 12		 jb	 SHORT $LN31@destroy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00021	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00024	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00026	83 c0 fc	 add	 eax, -4			; fffffffcH
  00029	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002c	77 24		 ja	 SHORT $LN28@destroy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002e	8b c2		 mov	 eax, edx
$LN31@destroy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003e	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00041	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00048	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN15@destroy:
  0004f	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 691  :     }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN28@destroy:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00052	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN40@destroy:
  00057	cc		 int	 3
??$destroy@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::destroy<std::pair<unsigned long const ,CRaceData::SComboAttackData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAXPAUSSkin@CRaceData@@QAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAXPAUSSkin@CRaceData@@QAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CRaceData::SSkin> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 0f		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1SSkin@CRaceData@@QAE@XZ
  00017	83 c6 34	 add	 esi, 52			; 00000034H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  0001e	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Destroy_range@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAXPAUSSkin@CRaceData@@QAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CRaceData::SSkin> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z PROC ; std::_Uninitialized_move<CRaceData::SSkin *,std::allocator<CRaceData::SSkin> >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0002b	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);

  0002e	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00031	89 7d e8	 mov	 DWORD PTR __Backout$[ebp], edi
  00034	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi
  00037	89 45 f0	 mov	 DWORD PTR __Backout$[ebp+8], eax

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0003a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	3b f3		 cmp	 esi, ebx
  00046	74 15		 je	 SHORT $LN35@Uninitiali
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ??0SSkin@CRaceData@@QAE@ABU01@@Z ; CRaceData::SSkin::SSkin

; 1664 :         ++_Last;

  00050	83 c7 34	 add	 edi, 52			; 00000034H

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00053	83 c6 34	 add	 esi, 52			; 00000034H

; 1664 :         ++_Last;

  00056	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00059	3b f3		 cmp	 esi, ebx
  0005b	75 eb		 jne	 SHORT $LL4@Uninitiali
$LN35@Uninitiali:

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1808 :     }
; 1809 : 
; 1810 :     return _Backout._Release();
; 1811 : }

  0005d	8b c7		 mov	 eax, edi
  0005f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00062	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00069	59		 pop	 ecx
  0006a	5f		 pop	 edi
  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >::~_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ENDP ; std::_Uninitialized_move<CRaceData::SSkin *,std::allocator<CRaceData::SSkin> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 20		 push	 32			; 00000020H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CRaceData * *,CRaceData * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CRaceData * *,CRaceData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CRaceData::SMotionModeData * *,CRaceData::SMotionModeData * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CRaceData::SMotionModeData * *,CRaceData::SMotionModeData * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCRaceData@@@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEPAPAVCRaceData@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv495 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCRaceData@@@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEPAPAVCRaceData@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Emplace_reallocate<CRaceData * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN66@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN67@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv495[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceData * *,CRaceData * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceData * *,CRaceData * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXQAPAVCRaceData@@II@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 921  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN66@Emplace_re:

; 888  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Xlength
$LN67@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN64@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAVCRaceData@@@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEPAPAVCRaceData@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Emplace_reallocate<CRaceData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSMotionModeData@CRaceData@@@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEPAPAUSMotionModeData@CRaceData@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv495 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSMotionModeData@CRaceData@@@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEPAPAUSMotionModeData@CRaceData@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Emplace_reallocate<CRaceData::SMotionModeData * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN66@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN67@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv495[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotionModeData * *,CRaceData::SMotionModeData * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotionModeData * *,CRaceData::SMotionModeData * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXQAPAUSMotionModeData@CRaceData@@II@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 921  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN66@Emplace_re:

; 888  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Xlength
$LN67@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN64@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAUSMotionModeData@CRaceData@@@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEPAPAUSMotionModeData@CRaceData@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Emplace_reallocate<CRaceData::SMotionModeData * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@KV?$allocator@K@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
tv486 = 8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@KV?$allocator@K@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00012	0f 87 ec 00 00
	00		 ja	 $LN76@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0001b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00020	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00022	c1 f9 02	 sar	 ecx, 2
  00025	89 4d fc	 mov	 DWORD PTR __Oldsize$1$[ebp], ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0002d	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00030	8b d1		 mov	 edx, ecx
  00032	d1 ea		 shr	 edx, 1
  00034	2b c2		 sub	 eax, edx
  00036	3b c8		 cmp	 ecx, eax
  00038	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0003a	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003f	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00040	89 45 08	 mov	 DWORD PTR tv486[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00043	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00048	83 c4 04	 add	 esp, 4
  0004b	8b f8		 mov	 edi, eax
  0004d	eb 43		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00052	3b c3		 cmp	 eax, ebx
  00054	73 1c		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00056	8b c3		 mov	 eax, ebx
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00058	c1 e0 02	 shl	 eax, 2
  0005b	89 45 08	 mov	 DWORD PTR tv486[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006b	83 c4 04	 add	 esp, 4
  0006e	8b f8		 mov	 edi, eax
  00070	eb 20		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00072	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00077	0f 87 8c 00 00
	00		 ja	 $LN77@Resize_rea
  0007d	eb d9		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  0007f	85 c0		 test	 eax, eax
  00081	74 0d		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00089	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0008c	8b f8		 mov	 edi, eax
  0008e	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00090	33 ff		 xor	 edi, edi
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00092	8b 55 fc	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);

  00095	8b c3		 mov	 eax, ebx
  00097	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00099	8d 0c 97	 lea	 ecx, DWORD PTR [edi+edx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);

  0009c	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0009f	50		 push	 eax
  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??$_Zero_range@PAK@std@@YAPAKQAK0@Z ; std::_Zero_range<unsigned long *>

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a6	57		 push	 edi
  000a7	ff 76 04	 push	 DWORD PTR [esi+4]
  000aa	ff 36		 push	 DWORD PTR [esi]
  000ac	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000b1	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000b3	83 c4 14	 add	 esp, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000b6	85 c0		 test	 eax, eax
  000b8	74 2c		 je	 SHORT $LN59@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ba	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000bd	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000bf	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000c8	72 12		 jb	 SHORT $LN69@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ca	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000cd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000d5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000d8	77 25		 ja	 SHORT $LN66@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000da	8b c2		 mov	 eax, edx
$LN69@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000dc	51		 push	 ecx
  000dd	50		 push	 eax
  000de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e3	83 c4 08	 add	 esp, 8
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  000e6	8d 04 9f	 lea	 eax, DWORD PTR [edi+ebx*4]
  000e9	89 3e		 mov	 DWORD PTR [esi], edi
  000eb	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  000ee	8b 45 08	 mov	 eax, DWORD PTR tv486[ebp]
  000f1	03 c7		 add	 eax, edi
  000f3	5f		 pop	 edi
  000f4	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx

; 1611 :     }

  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c2 08 00	 ret	 8
$LN66@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  00104	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN77@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00109	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN74@Resize_rea:
  0010e	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@KV?$allocator@K@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 20		 push	 32			; 00000020H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 2a		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	0f b7 31	 movzx	 esi, WORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00024	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00026	66 39 70 10	 cmp	 WORD PTR [eax+16], si
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0002a	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  00031	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00033	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00040	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00044	74 de		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00046	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00047	8b c2		 mov	 eax, edx
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@ABG@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@ABG@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::_Find_lower_bound<unsigned short>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 2a		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	0f b7 31	 movzx	 esi, WORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00024	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00026	66 39 70 10	 cmp	 WORD PTR [eax+16], si
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0002a	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  00031	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00033	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00040	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00044	74 de		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00046	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00047	8b c2		 mov	 eax, edx
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::_Find_lower_bound<unsigned short>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Backout$2 = -64					; size = 12
__Newvec$ = -52						; size = 4
__Constructed_last$ = -48				; size = 4
__Al$ = -44						; size = 4
__Newsize$1$ = -40					; size = 4
tv542 = -36						; size = 4
__Whereoff$1$ = -36					; size = 4
tv546 = -32						; size = 4
__Constructed_first$ = -28				; size = 4
__Newvec$1$ = -24					; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Last$1$ = 8						; size = 4
__Whereptr$ = 8						; size = 4
__ULast$1$ = 12						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z PROC ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Emplace_reallocate<CRaceData::SSkin const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  0002d	8b 33		 mov	 esi, DWORD PTR [ebx]
  0002f	b8 4f ec c4 4e	 mov	 eax, 1321528399		; 4ec4ec4fH
  00034	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00037	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003a	2b d6		 sub	 edx, esi
  0003c	f7 ea		 imul	 edx
  0003e	2b ce		 sub	 ecx, esi
  00040	89 5d d4	 mov	 DWORD PTR __Al$[ebp], ebx
  00043	c1 fa 04	 sar	 edx, 4
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 dc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 4f ec c4 4e	 mov	 eax, 1321528399		; 4ec4ec4fH
  00055	f7 e9		 imul	 ecx
  00057	c1 fa 04	 sar	 edx, 4
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00061	3d c4 4e ec 04	 cmp	 eax, 82595524		; 04ec4ec4H
  00066	0f 84 cc 01 00
	00		 je	 $LN108@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0006f	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00072	2b ce		 sub	 ecx, esi

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00074	89 7d d8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00077	b8 4f ec c4 4e	 mov	 eax, 1321528399		; 4ec4ec4fH
  0007c	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0007e	b8 c4 4e ec 04	 mov	 eax, 82595524		; 04ec4ec4H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00083	c1 fa 04	 sar	 edx, 4
  00086	8b ca		 mov	 ecx, edx
  00088	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008b	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0008d	8b d1		 mov	 edx, ecx
  0008f	d1 ea		 shr	 edx, 1
  00091	2b c2		 sub	 eax, edx
  00093	3b c8		 cmp	 ecx, eax
  00095	76 1c		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00097	b8 d0 ff ff ff	 mov	 eax, -48		; ffffffd0H
  0009c	c7 45 ec c4 4e
	ec 04		 mov	 DWORD PTR __Newcapacity$[ebp], 82595524 ; 04ec4ec4H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a3	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  000a4	89 45 e0	 mov	 DWORD PTR tv546[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ac	83 c4 04	 add	 esp, 4
  000af	8b f8		 mov	 edi, eax
  000b1	eb 49		 jmp	 SHORT $LN105@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b3	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000b6	8b f7		 mov	 esi, edi
  000b8	3b c7		 cmp	 eax, edi
  000ba	0f 43 f0	 cmovae	 esi, eax
  000bd	81 fe c4 4e ec
	04		 cmp	 esi, 82595524		; 04ec4ec4H
  000c3	0f 87 74 01 00
	00		 ja	 $LN109@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000c9	6b c6 34	 imul	 eax, esi, 52
  000cc	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000cf	89 45 e0	 mov	 DWORD PTR tv546[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d2	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d7	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000df	83 c4 04	 add	 esp, 4
  000e2	8b f8		 mov	 edi, eax
  000e4	eb 16		 jmp	 SHORT $LN105@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000e6	85 c0		 test	 eax, eax
  000e8	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f0	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000f3	8b f8		 mov	 edi, eax
  000f5	eb 02		 jmp	 SHORT $LN106@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000f7	33 ff		 xor	 edi, edi
$LN106@Emplace_re:

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000f9	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN105@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000fc	6b 75 dc 34	 imul	 esi, DWORD PTR __Whereoff$1$[ebp], 52
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00100	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00103	89 7d e8	 mov	 DWORD PTR __Newvec$1$[ebp], edi
  00106	89 7d cc	 mov	 DWORD PTR __Newvec$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 898  :         _TRY_BEGIN

  00109	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00110	03 f7		 add	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00112	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00114	89 75 dc	 mov	 DWORD PTR tv542[ebp], esi
  00117	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  0011a	89 45 d0	 mov	 DWORD PTR __Constructed_last$[ebp], eax

; 896  :         pointer _Constructed_first      = _Constructed_last;

  0011d	89 45 e4	 mov	 DWORD PTR __Constructed_first$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00120	e8 00 00 00 00	 call	 ??0SSkin@CRaceData@@QAE@ABU01@@Z ; CRaceData::SSkin::SSkin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00125	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00128	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  0012b	89 75 e4	 mov	 DWORD PTR __Constructed_first$[ebp], esi
  0012e	8b 33		 mov	 esi, DWORD PTR [ebx]
  00130	89 45 0c	 mov	 DWORD PTR __ULast$1$[ebp], eax
  00133	3b c8		 cmp	 ecx, eax
  00135	75 27		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00137	89 7d c0	 mov	 DWORD PTR __Backout$2[ebp], edi
  0013a	89 7d c4	 mov	 DWORD PTR __Backout$2[ebp+4], edi
  0013d	89 5d c8	 mov	 DWORD PTR __Backout$2[ebp+8], ebx

; 1715 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  00140	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
$LL66@Emplace_re:

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  00144	3b f0		 cmp	 esi, eax
  00146	74 3d		 je	 SHORT $LN102@Emplace_re

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00148	56		 push	 esi
  00149	8b cf		 mov	 ecx, edi
  0014b	e8 00 00 00 00	 call	 ??0SSkin@CRaceData@@QAE@ABU01@@Z ; CRaceData::SSkin::SSkin

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  00150	8b 45 0c	 mov	 eax, DWORD PTR __ULast$1$[ebp]

; 1664 :         ++_Last;

  00153	83 c7 34	 add	 edi, 52			; 00000034H
  00156	89 7d c4	 mov	 DWORD PTR __Backout$2[ebp+4], edi

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  00159	83 c6 34	 add	 esi, 52			; 00000034H
  0015c	eb e6		 jmp	 SHORT $LL66@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 909  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  0015e	53		 push	 ebx
  0015f	57		 push	 edi
  00160	51		 push	 ecx
  00161	56		 push	 esi
  00162	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ; std::_Uninitialized_move<CRaceData::SSkin *,std::allocator<CRaceData::SSkin> >

; 910  :             _Constructed_first = _Newvec;
; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00167	8b 45 dc	 mov	 eax, DWORD PTR tv542[ebp]
  0016a	83 c4 10	 add	 esp, 16			; 00000010H
  0016d	83 c0 34	 add	 eax, 52			; 00000034H
  00170	89 7d e4	 mov	 DWORD PTR __Constructed_first$[ebp], edi
  00173	53		 push	 ebx
  00174	50		 push	 eax
  00175	ff 73 04	 push	 DWORD PTR [ebx+4]
  00178	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  0017b	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAPAUSSkin@CRaceData@@QAU12@0PAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ; std::_Uninitialized_move<CRaceData::SSkin *,std::allocator<CRaceData::SSkin> >
  00180	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  00183	eb 03		 jmp	 SHORT $LN5@Emplace_re
$LN102@Emplace_re:
  00185	8b 7d e8	 mov	 edi, DWORD PTR __Newvec$1$[ebp]
$LN5@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00188	8b 33		 mov	 esi, DWORD PTR [ebx]
  0018a	85 f6		 test	 esi, esi
  0018c	74 58		 je	 SHORT $LN49@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0018e	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00191	89 45 08	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00194	3b f0		 cmp	 esi, eax
  00196	74 0f		 je	 SHORT $LN37@Emplace_re
$LL38@Emplace_re:
  00198	8b ce		 mov	 ecx, esi
  0019a	e8 00 00 00 00	 call	 ??1SSkin@CRaceData@@QAE@XZ
  0019f	83 c6 34	 add	 esi, 52			; 00000034H
  001a2	3b 75 08	 cmp	 esi, DWORD PTR __Last$1$[ebp]
  001a5	75 f1		 jne	 SHORT $LL38@Emplace_re
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001a7	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001aa	b8 4f ec c4 4e	 mov	 eax, 1321528399		; 4ec4ec4fH
  001af	8b 33		 mov	 esi, DWORD PTR [ebx]
  001b1	2b ce		 sub	 ecx, esi
  001b3	f7 e9		 imul	 ecx
  001b5	c1 fa 04	 sar	 edx, 4
  001b8	8b c2		 mov	 eax, edx
  001ba	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001bd	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001bf	6b c8 34	 imul	 ecx, eax, 52

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001c2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001c8	72 12		 jb	 SHORT $LN59@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001ca	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  001cd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001d0	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001d2	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  001d5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001d8	77 68		 ja	 SHORT $LN56@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001da	8b f2		 mov	 esi, edx
$LN59@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001dc	51		 push	 ecx
  001dd	56		 push	 esi
  001de	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001e3	83 c4 08	 add	 esp, 8
$LN49@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001e6	6b 4d d8 34	 imul	 ecx, DWORD PTR __Newsize$1$[ebp], 52

; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  001ea	8b 45 dc	 mov	 eax, DWORD PTR tv542[ebp]

; 2092 :         _Myfirst = _Newvec;

  001ed	89 3b		 mov	 DWORD PTR [ebx], edi

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001ef	03 cf		 add	 ecx, edi
  001f1	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  001f4	8b 4d e0	 mov	 ecx, DWORD PTR tv546[ebp]
  001f7	03 cf		 add	 ecx, edi
  001f9	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 921  :     }

  001fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00206	59		 pop	 ecx
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z$0:

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  00210	8b 75 d4	 mov	 esi, DWORD PTR __Al$[ebp]
  00213	56		 push	 esi
  00214	ff 75 d0	 push	 DWORD PTR __Constructed_last$[ebp]
  00217	ff 75 e4	 push	 DWORD PTR __Constructed_first$[ebp]
  0021a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USSkin@CRaceData@@@std@@@std@@YAXPAUSSkin@CRaceData@@QAU12@AAV?$allocator@USSkin@CRaceData@@@0@@Z ; std::_Destroy_range<std::allocator<CRaceData::SSkin> >
  0021f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 915  :         _Al.deallocate(_Newvec, _Newcapacity);

  00222	8b ce		 mov	 ecx, esi
  00224	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  00227	ff 75 cc	 push	 DWORD PTR __Newvec$[ebp]
  0022a	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USSkin@CRaceData@@@std@@QAEXQAUSSkin@CRaceData@@I@Z ; std::allocator<CRaceData::SSkin>::deallocate

; 916  :         _RERAISE;

  0022f	6a 00		 push	 0
  00231	6a 00		 push	 0
  00233	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN108@Emplace_re:

; 888  :             _Xlength();

  00238	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Xlength
$LN109@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0023d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN56@Emplace_re:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00242	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN104@Emplace_re:
  00247	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z$2:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR __Backout$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >::~_Uninitialized_backout_al<std::allocator<CRaceData::SSkin> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z ENDP ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Emplace_reallocate<CRaceData::SSkin const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 38		 push	 56			; 00000038H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 38		 push	 56			; 00000038H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
tv589 = -8						; size = 4
__Whereoff$1$ = -8					; size = 4
tv606 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z PROC ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Emplace_reallocate<CRaceData::SMotion const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00015	2b d7		 sub	 edx, edi

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00017	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001a	f7 ea		 imul	 edx
  0001c	2b cf		 sub	 ecx, edi
  0001e	d1 fa		 sar	 edx, 1
  00020	8b c2		 mov	 eax, edx
  00022	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00025	03 c2		 add	 eax, edx
  00027	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002f	f7 e9		 imul	 ecx
  00031	d1 fa		 sar	 edx, 1
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
  0003a	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0003d	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00042	0f 84 3b 01 00
	00		 je	 $LN96@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0004b	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004e	2b cf		 sub	 ecx, edi
  00050	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00055	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00057	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005c	d1 fa		 sar	 edx, 1
  0005e	8b ca		 mov	 ecx, edx
  00060	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00063	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00065	8b d1		 mov	 edx, ecx
  00067	d1 ea		 shr	 edx, 1
  00069	2b c2		 sub	 eax, edx
  0006b	3b c8		 cmp	 ecx, eax
  0006d	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  0006f	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00074	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00075	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	83 c4 04	 add	 esp, 4
  00080	8b f8		 mov	 edi, eax
  00082	eb 46		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00084	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00087	8b ce		 mov	 ecx, esi
  00089	3b c6		 cmp	 eax, esi
  0008b	0f 43 c8	 cmovae	 ecx, eax
  0008e	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  00094	0f 87 ee 00 00
	00		 ja	 $LN97@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0009a	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  0009d	c1 e0 02	 shl	 eax, 2
  000a0	89 45 fc	 mov	 DWORD PTR tv606[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a3	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a8	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b0	83 c4 04	 add	 esp, 4
  000b3	8b f8		 mov	 edi, eax
  000b5	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b7	85 c0		 test	 eax, eax
  000b9	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000bb	50		 push	 eax
  000bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c1	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c4	8b f8		 mov	 edi, eax
  000c6	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c8	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000ca	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000cd	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  000d0	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d3	8d 34 87	 lea	 esi, DWORD PTR [edi+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d9	89 75 f8	 mov	 DWORD PTR tv589[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000dc	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000e0	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  000e4	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000e7	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ea	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000ed	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ef	3b d1		 cmp	 edx, ecx
  000f1	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f3	8b f7		 mov	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000f5	eb 14		 jmp	 SHORT $LN79@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000f7	57		 push	 edi
  000f8	52		 push	 edx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotion *,CRaceData::SMotion *>
  000ff	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00108	83 c6 0c	 add	 esi, 12			; 0000000cH
$LN79@Emplace_re:
  0010b	56		 push	 esi
  0010c	51		 push	 ecx
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotion *,CRaceData::SMotion *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00113	8b 33		 mov	 esi, DWORD PTR [ebx]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00115	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00118	85 f6		 test	 esi, esi
  0011a	74 3f		 je	 SHORT $LN39@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0011c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0011f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00124	2b ce		 sub	 ecx, esi
  00126	f7 e9		 imul	 ecx
  00128	d1 fa		 sar	 edx, 1
  0012a	8b c2		 mov	 eax, edx
  0012c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0012f	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00131	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00134	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00137	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0013d	72 12		 jb	 SHORT $LN49@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0013f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00142	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00145	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00147	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0014a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0014d	77 2f		 ja	 SHORT $LN46@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0014f	8b f2		 mov	 esi, edx
$LN49@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00151	51		 push	 ecx
  00152	56		 push	 esi
  00153	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00158	83 c4 08	 add	 esp, 8
$LN39@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0015b	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  0015e	40		 inc	 eax
  0015f	89 3b		 mov	 DWORD PTR [ebx], edi
  00161	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00164	8b 45 f8	 mov	 eax, DWORD PTR tv589[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00167	8d 0c 8f	 lea	 ecx, DWORD PTR [edi+ecx*4]
  0016a	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  0016d	8b 4d fc	 mov	 ecx, DWORD PTR tv606[ebp]
  00170	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00172	5f		 pop	 edi
  00173	5e		 pop	 esi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00174	89 4b 08	 mov	 DWORD PTR [ebx+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00177	5b		 pop	 ebx

; 921  :     }

  00178	8b e5		 mov	 esp, ebp
  0017a	5d		 pop	 ebp
  0017b	c2 08 00	 ret	 8
$LN46@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0017e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN96@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00183	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Xlength
$LN97@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00188	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN94@Emplace_re:
  0018d	cc		 int	 3
??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z ENDP ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Emplace_reallocate<CRaceData::SMotion const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00032	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0005a	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00061	c7 46 28 0f 00
	00 00		 mov	 DWORD PTR [esi+40], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN75@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN75@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 749  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 830  :         _Tidy();

  0002a	e8 00 00 00 00	 call	 ?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 20		 push	 32			; 00000020H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@Erase_tree:
  00045	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
  0002a	e8 00 00 00 00	 call	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 20		 push	 32			; 00000020H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@Erase_tree:
  00045	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 34		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@QAU?$pair@$$CBKUSComboAttackData@CRaceData@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::destroy<std::pair<unsigned long const ,CRaceData::SComboAttackData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00031	6a 20		 push	 32			; 00000020H
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00043	74 d3		 je	 SHORT $LL2@Erase_tree
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
$LN3@Erase_tree:
  00047	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0002a	e8 00 00 00 00	 call	 ??1?$pair@$$CBKUSHair@CRaceData@@@std@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 38		 push	 56			; 00000038H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@Erase_tree:
  00045	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 32		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
  0002a	e8 00 00 00 00	 call	 ??1?$pair@$$CBKUSShape@CRaceData@@@std@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002f	6a 38		 push	 56			; 00000038H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00037	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	74 d5		 je	 SHORT $LL2@Erase_tree
  00043	5f		 pop	 edi
  00044	5b		 pop	 ebx
$LN3@Erase_tree:
  00045	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,CRaceData::SComboAttackData>::~pair<unsigned long const ,CRaceData::SComboAttackData>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 41		 je	 SHORT $LN9@pair

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0000d	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 12		 jb	 SHORT $LN25@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	77 23		 ja	 SHORT $LN22@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002a	8b c2		 mov	 eax, edx
$LN25@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00033	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00044	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN9@pair:
  0004b	5e		 pop	 esi
  0004c	c3		 ret	 0
$LN22@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN32@pair:
  00052	cc		 int	 3
??1?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,CRaceData::SComboAttackData>::~pair<unsigned long const ,CRaceData::SComboAttackData>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 20		 ja	 SHORT $LN22@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00033	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00045	5e		 pop	 esi
  00046	c3		 ret	 0
$LN22@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@pair:
  0004c	cc		 int	 3
??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::~pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >::~pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4

; 830  :         _Tidy();

  00003	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Tidy
??1?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >::~pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@CAXXZ PROC ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@CAXXZ ENDP ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ PROC ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Tidy, COMDAT
; _this$ = ecx

; 2098 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2099 :         auto& _Al         = _Getal();
; 2100 :         auto& _My_data    = _Mypair._Myval2;
; 2101 :         pointer& _Myfirst = _My_data._Myfirst;
; 2102 :         pointer& _Mylast  = _My_data._Mylast;
; 2103 :         pointer& _Myend   = _My_data._Myend;
; 2104 : 
; 2105 :         _My_data._Orphan_all();
; 2106 : 
; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN2@Tidy

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN18@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN15@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN18@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN2@Tidy:

; 2116 :     }

  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN15@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Tidy:
  00065	cc		 int	 3
?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ ENDP ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@QAE@XZ PROC ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::~vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >, COMDAT
; _this$ = ecx

; 830  :         _Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Tidy
??1?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::~vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > > >::operator++, COMDAT
; _this$ = ecx

; 282  :     _Tree_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN8@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN23@operator
$LL6@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN23@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL6@operator
$LN23@operator:

; 283  :         _Mybase::operator++();
; 284  :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 285  :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN8@operator:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN13@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL12@operator
$LN13@operator:

; 283  :         _Mybase::operator++();
; 284  :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 285  :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBKUSShape@CRaceData@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKUSShape@CRaceData@@@std@@QAE@XZ PROC	; std::pair<unsigned long const ,CRaceData::SShape>::~pair<unsigned long const ,CRaceData::SShape>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00006	e8 00 00 00 00	 call	 ??1?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::~vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >
  0000b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00011	72 28		 jb	 SHORT $LN18@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00016	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 12		 jb	 SHORT $LN28@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00022	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00025	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002d	77 20		 ja	 SHORT $LN25@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002f	8b c2		 mov	 eax, edx
$LN28@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00031	51		 push	 ecx
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00038	83 c4 08	 add	 esp, 8
$LN18@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00042	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00049	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
$LN25@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@pair:
  00054	cc		 int	 3
??1?$pair@$$CBKUSShape@CRaceData@@@std@@QAE@XZ ENDP	; std::pair<unsigned long const ,CRaceData::SShape>::~pair<unsigned long const ,CRaceData::SShape>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBKUSHair@CRaceData@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBKUSHair@CRaceData@@@std@@QAE@XZ PROC	; std::pair<unsigned long const ,CRaceData::SHair>::~pair<unsigned long const ,CRaceData::SHair>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00006	e8 00 00 00 00	 call	 ??1?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::~vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >
  0000b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00011	72 28		 jb	 SHORT $LN18@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00016	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 12		 jb	 SHORT $LN28@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00022	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00025	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002d	77 20		 ja	 SHORT $LN25@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002f	8b c2		 mov	 eax, edx
$LN28@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00031	51		 push	 ecx
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00038	83 c4 08	 add	 esp, 8
$LN18@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00042	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00049	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
$LN25@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@pair:
  00054	cc		 int	 3
??1?$pair@$$CBKUSHair@CRaceData@@@std@@QAE@XZ ENDP	; std::pair<unsigned long const ,CRaceData::SHair>::~pair<unsigned long const ,CRaceData::SHair>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CRaceData::ms_MotionModeDataPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A ; CRaceData::ms_MotionModeDataPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@USMotionModeData@CRaceData@@@@UAE@XZ ; CDynamicPool<CRaceData::SMotionModeData>::~CDynamicPool<CRaceData::SMotionModeData>
??__F?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CRaceData::ms_MotionModeDataPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ??__E?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CRaceData::ms_MotionModeDataPool'', COMDAT

; 11   : CDynamicPool<CRaceData::TMotionModeData> CRaceData::ms_MotionModeDataPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CRaceData::ms_MotionModeDataPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CRaceData::ms_MotionModeDataPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@USMotionModeData@CRaceData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@USMotionModeData@CRaceData@@@@UAEPAXI@Z PROC ; CDynamicPool<CRaceData::SMotionModeData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@USMotionModeData@CRaceData@@@@UAE@XZ ; CDynamicPool<CRaceData::SMotionModeData>::~CDynamicPool<CRaceData::SMotionModeData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@USMotionModeData@CRaceData@@@@UAEPAXI@Z ENDP ; CDynamicPool<CRaceData::SMotionModeData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@CAXXZ PROC ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@CAXXZ ENDP ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXQAPAUSMotionModeData@CRaceData@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXQAPAUSMotionModeData@CRaceData@@II@Z PROC ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXQAPAUSMotionModeData@CRaceData@@II@Z ENDP ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXI@Z PROC ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1665 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1666 :         auto& _Al         = _Getal();
; 1667 :         auto& _My_data    = _Mypair._Myval2;
; 1668 :         pointer& _Myfirst = _My_data._Myfirst;
; 1669 :         pointer& _Mylast  = _My_data._Mylast;
; 1670 : 
; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN55@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 77   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSMotionModeData@CRaceData@@PAPAU12@@std@@YAPAPAUSMotionModeData@CRaceData@@PAPAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotionModeData * *,CRaceData::SMotionModeData * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN39@Reallocate

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN49@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN46@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN49@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN39@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1687 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN46@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN53@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@USMotionModeData@CRaceData@@@@KAXPAUSMotionModeData@CRaceData@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@USMotionModeData@CRaceData@@@@KAXPAUSMotionModeData@CRaceData@@@Z PROC ; CDynamicPool<CRaceData::SMotionModeData>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@USMotionModeData@CRaceData@@@@KAXPAUSMotionModeData@CRaceData@@@Z ENDP ; CDynamicPool<CRaceData::SMotionModeData>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@USMotionModeData@CRaceData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@USMotionModeData@CRaceData@@@@UAE@XZ PROC ; CDynamicPool<CRaceData::SMotionModeData>::~CDynamicPool<CRaceData::SMotionModeData>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@USMotionModeData@CRaceData@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@USMotionModeData@CRaceData@@@@UAE@XZ ENDP ; CDynamicPool<CRaceData::SMotionModeData>::~CDynamicPool<CRaceData::SMotionModeData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CRaceData::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A ; CRaceData::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCRaceData@@@@UAE@XZ ; CDynamicPool<CRaceData>::~CDynamicPool<CRaceData>
??__F?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CRaceData::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ??__E?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CRaceData::ms_kPool'', COMDAT

; 10   : CDynamicPool<CRaceData> CRaceData::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CRaceData::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CRaceData::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCRaceData@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCRaceData@@@@UAEPAXI@Z PROC		; CDynamicPool<CRaceData>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCRaceData@@@@UAE@XZ ; CDynamicPool<CRaceData>::~CDynamicPool<CRaceData>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCRaceData@@@@UAEPAXI@Z ENDP		; CDynamicPool<CRaceData>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@CAXXZ PROC ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@CAXXZ ENDP ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXQAPAVCRaceData@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXQAPAVCRaceData@@II@Z PROC ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXQAPAVCRaceData@@II@Z ENDP ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXI@Z PROC ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1665 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1666 :         auto& _Al         = _Getal();
; 1667 :         auto& _My_data    = _Mypair._Myval2;
; 1668 :         pointer& _Myfirst = _My_data._Myfirst;
; 1669 :         pointer& _Mylast  = _My_data._Mylast;
; 1670 : 
; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN55@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 77   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCRaceData@@PAPAV1@@std@@YAPAPAVCRaceData@@PAPAV1@00@Z ; std::_Copy_memmove<CRaceData * *,CRaceData * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN39@Reallocate

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN49@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN46@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN49@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN39@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1687 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN46@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN53@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCRaceData@@@@KAXPAVCRaceData@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCRaceData@@@@KAXPAVCRaceData@@@Z PROC ; CDynamicPool<CRaceData>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCRaceData@@@@KAXPAVCRaceData@@@Z ENDP ; CDynamicPool<CRaceData>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCRaceData@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCRaceData@@@@UAE@XZ PROC		; CDynamicPool<CRaceData>::~CDynamicPool<CRaceData>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCRaceData@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCRaceData@@@@UAE@XZ ENDP		; CDynamicPool<CRaceData>::~CDynamicPool<CRaceData>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCRaceData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCRaceData@@UAEPAXI@Z PROC				; CRaceData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CRaceData@@UAE@XZ	; CRaceData::~CRaceData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 dc 00 00 00	 push	 220			; 000000dcH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCRaceData@@UAEPAXI@Z ENDP				; CRaceData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::~map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 38		 push	 56			; 00000038H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::~map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z
_TEXT	SEGMENT
__Loc$3 = -32						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z PROC ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::operator[], COMDAT
; _this$ = ecx

; 173  :     mapped_type& operator[](key_type&& _Keyval) { // find element matching _Keyval or insert value-initialized value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00029	8b 75 08	 mov	 esi, DWORD PTR __Keyval$[ebp]
  0002c	8d 45 e0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  0002f	56		 push	 esi
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> >,0> >::_Find_lower_bound<unsigned long>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00036	8b 55 e8	 mov	 edx, DWORD PTR __Loc$3[ebp+8]
  00039	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003d	75 0b		 jne	 SHORT $LN4@operator
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00044	0f 83 a3 00 00
	00		 jae	 $LN3@operator
$LN4@operator:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0004a	81 7f 04 24 49
	92 04		 cmp	 DWORD PTR [edi+4], 76695844 ; 04924924H
  00051	0f 84 ac 00 00
	00		 je	 $LN130@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00057	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00059	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  0005c	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00065	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00071	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00073	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  00076	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00079	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007c	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00082	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00089	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00090	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  00097	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  0009e	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a5	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000a8	0f 11 41 14	 movups	 XMMWORD PTR [ecx+20], xmm0

; 4998 :         _My_data._Mysize = 0;

  000ac	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b3	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000b6	c7 41 28 0f 00
	00 00		 mov	 DWORD PTR [ecx+40], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bd	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c1	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  000c8	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  000cf	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000d6	89 31		 mov	 DWORD PTR [ecx], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000d8	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000db	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000de	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Insert_node
  000eb	8b d0		 mov	 edx, eax
$LN3@operator:

; 174  :         return _Try_emplace(_STD move(_Keyval)).first->_Myval.second;

  000ed	8d 42 14	 lea	 eax, DWORD PTR [edx+20]

; 175  :     }

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN130@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00103	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN128@operator:
  00108	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z ENDP ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::~map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 38		 push	 56			; 00000038H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::~map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z
_TEXT	SEGMENT
__Loc$3 = -32						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z PROC ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::operator[], COMDAT
; _this$ = ecx

; 173  :     mapped_type& operator[](key_type&& _Keyval) { // find element matching _Keyval or insert value-initialized value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00029	8b 75 08	 mov	 esi, DWORD PTR __Keyval$[ebp]
  0002c	8d 45 e0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  0002f	56		 push	 esi
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> >,0> >::_Find_lower_bound<unsigned long>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00036	8b 55 e8	 mov	 edx, DWORD PTR __Loc$3[ebp+8]
  00039	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003d	75 0b		 jne	 SHORT $LN4@operator
  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00044	0f 83 a3 00 00
	00		 jae	 $LN3@operator
$LN4@operator:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0004a	81 7f 04 24 49
	92 04		 cmp	 DWORD PTR [edi+4], 76695844 ; 04924924H
  00051	0f 84 ac 00 00
	00		 je	 $LN130@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00057	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00059	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  0005c	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0005e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00065	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0006c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00071	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00073	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  00076	8b 45 08	 mov	 eax, DWORD PTR __Keyval$[ebp]
  00079	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007c	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
  0007f	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00082	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
  00089	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0
  00090	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  00097	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  0009e	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a5	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000a8	0f 11 41 14	 movups	 XMMWORD PTR [ecx+20], xmm0

; 4998 :         _My_data._Mysize = 0;

  000ac	c7 41 24 00 00
	00 00		 mov	 DWORD PTR [ecx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b3	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000b6	c7 41 28 0f 00
	00 00		 mov	 DWORD PTR [ecx+40], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000bd	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000c1	c7 41 2c 00 00
	00 00		 mov	 DWORD PTR [ecx+44], 0
  000c8	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  000cf	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000d6	89 31		 mov	 DWORD PTR [ecx], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000d8	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000db	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000de	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Insert_node
  000eb	8b d0		 mov	 edx, eax
$LN3@operator:

; 174  :         return _Try_emplace(_STD move(_Keyval)).first->_Myval.second;

  000ed	8d 42 14	 lea	 eax, DWORD PTR [edx+20]

; 175  :     }

  000f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000fa	59		 pop	 ecx
  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c2 04 00	 ret	 4
$LN130@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00103	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN128@operator:
  00108	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z ENDP ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionVectorPointer@CRaceData@@IAEHGGPAPAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z
_TEXT	SEGMENT
__Loc$1 = -16						; size = 12
_pMotionModeData$ = -4					; size = 4
_wMotionMode$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
_ppMotionVector$ = 16					; size = 4
?GetMotionVectorPointer@CRaceData@@IAEHGGPAPAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z PROC ; CRaceData::GetMotionVectorPointer, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 204  : 	TMotionModeData * pMotionModeData;
; 205  : 	if (!GetMotionModeDataPointer(wMotionMode, &pMotionModeData))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _pMotionModeData$[ebp]
  00009	56		 push	 esi
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR _wMotionMode$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
  00013	85 c0		 test	 eax, eax
  00015	74 3f		 je	 SHORT $LN39@GetMotionV

; 206  : 	{
; 207  : 		return FALSE;
; 208  : 	}
; 209  : 
; 210  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  00017	8b 75 fc	 mov	 esi, DWORD PTR _pMotionModeData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001a	8d 45 0c	 lea	 eax, DWORD PTR _wMotionIndex$[ebp]
  0001d	50		 push	 eax
  0001e	8d 45 f0	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00021	50		 push	 eax
  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	8b 4d f8	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0002d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00031	75 23		 jne	 SHORT $LN39@GetMotionV
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00033	66 8b 45 0c	 mov	 ax, WORD PTR _wMotionIndex$[ebp]
  00037	66 3b 41 10	 cmp	 ax, WORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003b	72 19		 jb	 SHORT $LN39@GetMotionV

; 233  :         return this->_Ptr == _Right._Ptr;

  0003d	39 4e 08	 cmp	 DWORD PTR [esi+8], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 211  : 	if (pMotionModeData->MotionVectorMap.end() == itor)

  00040	74 14		 je	 SHORT $LN39@GetMotionV

; 214  : 	}
; 215  : 
; 216  : 	*ppMotionVector = &itor->second;

  00042	8b 45 10	 mov	 eax, DWORD PTR _ppMotionVector$[ebp]
  00045	83 c1 14	 add	 ecx, 20			; 00000014H
  00048	5e		 pop	 esi
  00049	89 08		 mov	 DWORD PTR [eax], ecx

; 217  : 
; 218  : 	return TRUE;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 219  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
$LN39@GetMotionV:

; 212  : 	{
; 213  : 		return FALSE;

  00056	33 c0		 xor	 eax, eax
  00058	5e		 pop	 esi

; 219  : }

  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 0c 00	 ret	 12			; 0000000cH
?GetMotionVectorPointer@CRaceData@@IAEHGGPAPAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z ENDP ; CRaceData::GetMotionVectorPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z
_TEXT	SEGMENT
$T2 = -68						; size = 16
__Loc$3 = -52						; size = 12
__Loc$4 = -52						; size = 12
_MotionVector$5 = -40					; size = 12
$T6 = -28						; size = 12
$T7 = -24						; size = 8
$T8 = -16						; size = 4
_pMotionModeData$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
$T9 = 8							; size = 4
_wMotionMode$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
$T10 = 16						; size = 4
_rMotion$ = 16						; size = 4
?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z PROC ; CRaceData::__OLD_RegisterMotion, COMDAT
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 393  : 	TMotionModeData * pMotionModeData;
; 394  : 	if (!GetMotionModeDataPointer(wMotionMode, &pMotionModeData))

  00028	8d 45 f0	 lea	 eax, DWORD PTR _pMotionModeData$[ebp]
  0002b	50		 push	 eax
  0002c	ff 75 08	 push	 DWORD PTR _wMotionMode$[ebp]
  0002f	e8 00 00 00 00	 call	 ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
  00034	85 c0		 test	 eax, eax
  00036	75 21		 jne	 SHORT $LN2@OLD_Regist

; 395  : 	{
; 396  : 		AssertLog("Failed getting motion mode data!");

  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IBAKOHGK@Failed?5getting?5motion?5mode?5data@
  0003d	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00042	83 c4 04	 add	 esp, 4

; 413  : }

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	5b		 pop	 ebx
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 0c 00	 ret	 12			; 0000000cH
$LN2@OLD_Regist:

; 400  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  00059	8b 75 f0	 mov	 esi, DWORD PTR _pMotionModeData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0005c	8d 45 0c	 lea	 eax, DWORD PTR _wMotionIndex$[ebp]
  0005f	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 400  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  00060	83 c6 08	 add	 esi, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00063	8d 45 cc	 lea	 eax, DWORD PTR __Loc$4[ebp]
  00066	50		 push	 eax
  00067	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 400  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  00069	89 75 08	 mov	 DWORD PTR $T9[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0006c	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00071	8b 4d d4	 mov	 ecx, DWORD PTR __Loc$4[ebp+8]
  00074	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00078	75 5f		 jne	 SHORT $LN287@OLD_Regist
  0007a	66 8b 55 0c	 mov	 dx, WORD PTR _wMotionIndex$[ebp]
  0007e	66 3b 51 10	 cmp	 dx, WORD PTR [ecx+16]
  00082	72 55		 jb	 SHORT $LN287@OLD_Regist
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 401  : 	if (pMotionModeData->MotionVectorMap.end() == itor)

  00084	39 0e		 cmp	 DWORD PTR [esi], ecx
  00086	74 51		 je	 SHORT $LN287@OLD_Regist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00088	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 410  : 		TMotionVector & rMotionVector = itor->second;

  0008b	83 c1 14	 add	 ecx, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0008e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00091	74 29		 je	 SHORT $LN278@OLD_Regist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00093	8b 45 10	 mov	 eax, DWORD PTR _rMotion$[ebp]
  00096	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0009a	66 0f d6 02	 movq	 QWORD PTR [edx], xmm0
  0009e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a1	89 42 08	 mov	 DWORD PTR [edx+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  000a4	83 41 04 0c	 add	 DWORD PTR [ecx+4], 12	; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 413  : }

  000a8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b2	59		 pop	 ecx
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	5b		 pop	 ebx
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 0c 00	 ret	 12			; 0000000cH
$LN278@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000bc	ff 75 10	 push	 DWORD PTR _rMotion$[ebp]
  000bf	52		 push	 edx
  000c0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Emplace_reallocate<CRaceData::SMotion const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 413  : }

  000c5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cf	59		 pop	 ecx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 0c 00	 ret	 12			; 0000000cH
$LN287@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d9	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _MotionVector$5[ebp], 0
  000e0	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _MotionVector$5[ebp+4], 0
  000e7	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _MotionVector$5[ebp+8], 0

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000ee	ff 75 10	 push	 DWORD PTR _rMotion$[ebp]
  000f1	8d 4d d8	 lea	 ecx, DWORD PTR _MotionVector$5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 403  : 		TMotionVector MotionVector;

  000f4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000fb	6a 00		 push	 0
  000fd	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Emplace_reallocate<CRaceData::SMotion const &>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00102	66 8b 45 0c	 mov	 ax, WORD PTR _wMotionIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00106	33 ff		 xor	 edi, edi

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00108	8b 4d dc	 mov	 ecx, DWORD PTR _MotionVector$5[ebp+4]
  0010b	8b 5d d8	 mov	 ebx, DWORD PTR _MotionVector$5[ebp]
  0010e	2b cb		 sub	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00110	66 89 45 bc	 mov	 WORD PTR $T2[ebp], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00114	33 c0		 xor	 eax, eax
  00116	89 45 f0	 mov	 DWORD PTR $T8[ebp], eax
  00119	89 45 c4	 mov	 DWORD PTR $T2[ebp+8], eax
  0011c	89 45 10	 mov	 DWORD PTR $T10[ebp], eax
  0011f	89 45 c8	 mov	 DWORD PTR $T2[ebp+12], eax

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00122	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00127	f7 e9		 imul	 ecx

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00129	89 7d c0	 mov	 DWORD PTR $T2[ebp+4], edi

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  0012c	d1 fa		 sar	 edx, 1
  0012e	8b c2		 mov	 eax, edx
  00130	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00133	03 c2		 add	 eax, edx

; 2128 :         if (_Count != 0) {

  00135	74 5c		 je	 SHORT $LN97@OLD_Regist

; 2069 :         if (_Newcapacity > max_size()) {

  00137	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0013c	0f 87 7f 01 00
	00		 ja	 $LN291@OLD_Regist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00142	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00145	c1 e6 02	 shl	 esi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00148	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0014e	72 0d		 jb	 SHORT $LN75@OLD_Regist

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00150	56		 push	 esi
  00151	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00156	83 c4 04	 add	 esp, 4
  00159	8b f8		 mov	 edi, eax
  0015b	eb 13		 jmp	 SHORT $LN74@OLD_Regist
$LN75@OLD_Regist:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0015d	85 f6		 test	 esi, esi
  0015f	74 0d		 je	 SHORT $LN76@OLD_Regist

; 77   :         return ::operator new(_Bytes);

  00161	56		 push	 esi
  00162	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00167	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0016a	8b f8		 mov	 edi, eax
  0016c	eb 02		 jmp	 SHORT $LN74@OLD_Regist
$LN76@OLD_Regist:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0016e	33 ff		 xor	 edi, edi
$LN74@OLD_Regist:

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  00170	57		 push	 edi
  00171	ff 75 dc	 push	 DWORD PTR _MotionVector$5[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2055 :         _Myend             = _Newvec + _Newcapacity;

  00174	03 f7		 add	 esi, edi
  00176	89 7d c0	 mov	 DWORD PTR $T2[ebp+4], edi
  00179	8b c6		 mov	 eax, esi
  0017b	89 75 f0	 mov	 DWORD PTR $T8[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  0017e	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2055 :         _Myend             = _Newvec + _Newcapacity;

  0017f	89 45 10	 mov	 DWORD PTR $T10[ebp], eax
  00182	89 45 c8	 mov	 DWORD PTR $T2[ebp+12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  00185	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUSMotion@CRaceData@@PAU12@@std@@YAPAUSMotion@CRaceData@@PAU12@00@Z ; std::_Copy_memmove<CRaceData::SMotion *,CRaceData::SMotion *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  0018a	89 75 c4	 mov	 DWORD PTR $T2[ebp+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  0018d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00190	8b 75 08	 mov	 esi, DWORD PTR $T9[ebp]
$LN97@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00193	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 406  : 		pMotionModeData->MotionVectorMap.insert(TMotionVectorMap::value_type(wMotionIndex, MotionVector));

  00196	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0019a	50		 push	 eax
  0019b	8d 45 e4	 lea	 eax, DWORD PTR $T6[ebp]
  0019e	8b ce		 mov	 ecx, esi
  001a0	50		 push	 eax
  001a1	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>
  001a6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001a9	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  001ad	66 0f d6 45 cc	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  001b2	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001b6	75 0a		 jne	 SHORT $LN285@OLD_Regist
  001b8	66 8b 45 0c	 mov	 ax, WORD PTR _wMotionIndex$[ebp]
  001bc	66 3b 41 10	 cmp	 ax, WORD PTR [ecx+16]
  001c0	73 65		 jae	 SHORT $LN207@OLD_Regist
$LN285@OLD_Regist:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  001c2	81 7e 04 ff ff
	ff 07		 cmp	 DWORD PTR [esi+4], 134217727 ; 07ffffffH
  001c9	0f 84 f7 00 00
	00		 je	 $LN292@OLD_Regist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001cf	8b 45 08	 mov	 eax, DWORD PTR $T9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  001d2	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001d4	89 45 e8	 mov	 DWORD PTR $T7[ebp], eax

; 77   :         return ::operator new(_Bytes);

  001d7	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001d9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001dd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  001e4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  001e9	66 8b 55 0c	 mov	 dx, WORD PTR _wMotionIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001ed	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  001f0	33 c9		 xor	 ecx, ecx

; 176  :     pair(pair&&)      = default;

  001f2	66 89 50 10	 mov	 WORD PTR [eax+16], dx

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  001f6	8b 55 10	 mov	 edx, DWORD PTR $T10[ebp]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  001f9	89 4d 10	 mov	 DWORD PTR $T10[ebp], ecx

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  001fc	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  001fe	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00201	33 ff		 xor	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00203	8b 4d f0	 mov	 ecx, DWORD PTR $T8[ebp]
  00206	89 48 18	 mov	 DWORD PTR [eax+24], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00209	8b 4d 08	 mov	 ecx, DWORD PTR $T9[ebp]
  0020c	50		 push	 eax
  0020d	ff 75 d0	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00210	89 50 1c	 mov	 DWORD PTR [eax+28], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00213	ff 75 cc	 push	 DWORD PTR __Loc$3[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00216	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00218	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0021b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  0021e	66 89 78 0c	 mov	 WORD PTR [eax+12], di

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00222	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Insert_node
$LN207@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00227	85 ff		 test	 edi, edi
  00229	74 3f		 je	 SHORT $LN223@OLD_Regist

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0022b	8b 4d 10	 mov	 ecx, DWORD PTR $T10[ebp]
  0022e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00233	2b cf		 sub	 ecx, edi
  00235	f7 e9		 imul	 ecx
  00237	d1 fa		 sar	 edx, 1
  00239	8b c2		 mov	 eax, edx
  0023b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0023e	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00240	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00243	8b c7		 mov	 eax, edi
  00245	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00248	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0024e	72 10		 jb	 SHORT $LN239@OLD_Regist

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00250	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
  00253	83 c1 23	 add	 ecx, 35			; 00000023H
  00256	2b c7		 sub	 eax, edi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00258	83 c0 fc	 add	 eax, -4			; fffffffcH
  0025b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0025e	77 6b		 ja	 SHORT $LN261@OLD_Regist
$LN239@OLD_Regist:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00260	51		 push	 ecx
  00261	57		 push	 edi
  00262	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00267	83 c4 08	 add	 esp, 8
$LN223@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0026a	85 db		 test	 ebx, ebx
  0026c	74 3f		 je	 SHORT $LN277@OLD_Regist

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0026e	8b 4d e0	 mov	 ecx, DWORD PTR _MotionVector$5[ebp+8]
  00271	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00276	2b cb		 sub	 ecx, ebx
  00278	f7 e9		 imul	 ecx
  0027a	d1 fa		 sar	 edx, 1
  0027c	8b c2		 mov	 eax, edx
  0027e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00281	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00283	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00286	8b c3		 mov	 eax, ebx
  00288	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0028b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00291	72 10		 jb	 SHORT $LN264@OLD_Regist

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00293	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  00296	83 c1 23	 add	 ecx, 35			; 00000023H
  00299	2b c3		 sub	 eax, ebx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0029b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0029e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002a1	77 28		 ja	 SHORT $LN261@OLD_Regist
$LN264@OLD_Regist:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002a3	51		 push	 ecx
  002a4	53		 push	 ebx
  002a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002aa	83 c4 08	 add	 esp, 8
$LN277@OLD_Regist:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 413  : }

  002ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002b7	59		 pop	 ecx
  002b8	5f		 pop	 edi
  002b9	5e		 pop	 esi
  002ba	5b		 pop	 ebx
  002bb	8b e5		 mov	 esp, ebp
  002bd	5d		 pop	 ebp
  002be	c2 0c 00	 ret	 12			; 0000000cH
$LN291@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2070 :             _Xlength();

  002c1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Xlength
$LN292@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  002c6	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN261@OLD_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002cb	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN289@OLD_Regist:
  002d0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR _MotionVector$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@QAE@XZ ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::~vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >
__unwindfunclet$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z$1:
  00008	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@QAE@XZ
__unwindfunclet$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z$6:
  00010	8d 4d e8	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z ENDP ; CRaceData::__OLD_RegisterMotion
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?__Initialize@CRaceData@@IAEXXZ
_TEXT	SEGMENT
?__Initialize@CRaceData@@IAEXXZ PROC			; CRaceData::__Initialize, COMDAT
; _this$ = ecx

; 626  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00003	6a 0b		 push	 11			; 0000000bH
  00005	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LNIEHMJP@motlist?4txt@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 627  : 	m_strMotionListFileName = "motlist.txt";

  0000a	8d 4e 68	 lea	 ecx, DWORD PTR [esi+104]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0000d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 629  : 	m_pBaseModelThing = NULL;

  00012	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00019	0f 57 c0	 xorps	 xmm0, xmm0

; 630  : 	m_pLODModelThing = NULL;

  0001c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 631  : 
; 632  : 	m_dwRaceIndex = 0;

  00023	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 633  : 
; 634  : 	memset(m_adwSmokeEffectID, 0, sizeof(m_adwSmokeEffectID));

  0002a	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
  0002e	5e		 pop	 esi

; 635  : }

  0002f	c3		 ret	 0
?__Initialize@CRaceData@@IAEXXZ ENDP			; CRaceData::__Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?FindShape@CRaceData@@QAEPAUSShape@1@I@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
$T2 = 8							; size = 4
_eShape$ = 8						; size = 4
?FindShape@CRaceData@@QAEPAUSShape@1@I@Z PROC		; CRaceData::FindShape, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 58   : 	std::map<DWORD, SShape>::iterator f = m_kMap_dwShapeKey_kShape.find(eShape);

  00007	8b 75 08	 mov	 esi, DWORD PTR _eShape$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000a	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 57   : {

  0000d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 58   : 	std::map<DWORD, SShape>::iterator f = m_kMap_dwShapeKey_kShape.find(eShape);

  0000f	8d b9 c8 00 00
	00		 lea	 edi, DWORD PTR [ecx+200]
  00015	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00018	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00023	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	75 14		 jne	 SHORT $LN37@FindShape
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0002c	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002f	72 0f		 jb	 SHORT $LN37@FindShape

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00031	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 59   : 	if (m_kMap_dwShapeKey_kShape.end() == f)

  00033	74 0b		 je	 SHORT $LN37@FindShape

; 62   : 	}
; 63   : 
; 64   : 	return &f->second;

  00035	5f		 pop	 edi
  00036	83 c0 14	 add	 eax, 20			; 00000014H

; 65   : }

  00039	5e		 pop	 esi
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN37@FindShape:
  00040	5f		 pop	 edi

; 60   : 	{
; 61   : 		return NULL;

  00041	33 c0		 xor	 eax, eax

; 65   : }

  00043	5e		 pop	 esi
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?FindShape@CRaceData@@QAEPAUSShape@1@I@Z ENDP		; CRaceData::FindShape
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?FindHair@CRaceData@@QAEPAUSHair@1@I@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
$T2 = 8							; size = 4
_eHair$ = 8						; size = 4
?FindHair@CRaceData@@QAEPAUSHair@1@I@Z PROC		; CRaceData::FindHair, COMDAT
; _this$ = ecx

; 30   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 31   : 	std::map<DWORD, SHair>::iterator f = m_kMap_dwHairKey_kHair.find(eHair);

  00007	8b 75 08	 mov	 esi, DWORD PTR _eHair$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000a	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 30   : {

  0000d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 31   : 	std::map<DWORD, SHair>::iterator f = m_kMap_dwHairKey_kHair.find(eHair);

  0000f	8d b9 c0 00 00
	00		 lea	 edi, DWORD PTR [ecx+192]
  00015	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00018	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00023	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	75 14		 jne	 SHORT $LN38@FindHair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0002c	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002f	72 0f		 jb	 SHORT $LN38@FindHair

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00031	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 32   : 	if (m_kMap_dwHairKey_kHair.end() == f)

  00033	74 0b		 je	 SHORT $LN38@FindHair

; 39   : 	}
; 40   : 
; 41   : 	return &f->second;

  00035	5f		 pop	 edi
  00036	83 c0 14	 add	 eax, 20			; 00000014H

; 42   : }

  00039	5e		 pop	 esi
  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
$LN38@FindHair:

; 33   : 	{
; 34   : 		if (eHair != 0)

  00040	85 f6		 test	 esi, esi
  00042	74 0e		 je	 SHORT $LN3@FindHair

; 35   : 		{
; 36   : 			TraceError("Hair number %d is not exist.", eHair);

  00044	56		 push	 esi
  00045	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@LKCBFCOE@Hair?5number?5?$CFd?5is?5not?5exist?4@
  0004a	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0004f	83 c4 08	 add	 esp, 8
$LN3@FindHair:

; 37   : 		}
; 38   : 		return NULL;

  00052	5f		 pop	 edi
  00053	33 c0		 xor	 eax, eax

; 42   : }

  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
?FindHair@CRaceData@@QAEPAUSHair@1@I@Z ENDP		; CRaceData::FindHair
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetSmokeBone@CRaceData@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetSmokeBone@CRaceData@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CRaceData::GetSmokeBone, COMDAT
; _this$ = ecx

; 15   : 	return m_strSmokeBoneName;

  00000	8d 81 80 00 00
	00		 lea	 eax, DWORD PTR [ecx+128]

; 16   : }

  00006	c3		 ret	 0
?GetSmokeBone@CRaceData@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CRaceData::GetSmokeBone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetSmokeEffectID@CRaceData@@QAEKI@Z
_TEXT	SEGMENT
_eSmoke$ = 8						; size = 4
?GetSmokeEffectID@CRaceData@@QAEKI@Z PROC		; CRaceData::GetSmokeEffectID, COMDAT
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	if (eSmoke >= SMOKE_NUM)

  00003	8b 45 08	 mov	 eax, DWORD PTR _eSmoke$[ebp]
  00006	83 f8 04	 cmp	 eax, 4
  00009	72 14		 jb	 SHORT $LN2@GetSmokeEf

; 21   : 	{
; 22   : 		TraceError("CRaceData::GetSmokeEffectID(eSmoke=%d)", eSmoke);

  0000b	50		 push	 eax
  0000c	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@BMIMHJM@CRaceData?3?3GetSmokeEffectID?$CIeSm@
  00011	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00016	83 c4 08	 add	 esp, 8

; 23   : 		return 0;

  00019	33 c0		 xor	 eax, eax

; 27   : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
$LN2@GetSmokeEf:

; 24   : 	}
; 25   : 
; 26   : 	return m_adwSmokeEffectID[eSmoke];

  0001f	8b 44 81 08	 mov	 eax, DWORD PTR [ecx+eax*4+8]

; 27   : }

  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
?GetSmokeEffectID@CRaceData@@QAEKI@Z ENDP		; CRaceData::GetSmokeEffectID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?SetHairSkin@CRaceData@@QAEXIIPBD00@Z
_TEXT	SEGMENT
_c_szModelFileName$GSCopy$1$ = -80			; size = 4
_this$GSCopy$1$ = -76					; size = 4
_nLength$1$ = -72					; size = 4
$T2 = -72						; size = 4
$T3 = -72						; size = 4
_kSkin$ = -68						; size = 52
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eHair$ = 8						; size = 4
_ePart$ = 12						; size = 4
_c_szModelFileName$ = 16				; size = 4
_c_szSrcFileName$ = 20					; size = 4
_c_szDstFileName$ = 24					; size = 4
?SetHairSkin@CRaceData@@QAEXIIPBD00@Z PROC		; CRaceData::SetHairSkin, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 44	 sub	 esp, 68			; 00000044H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 10	 mov	 eax, DWORD PTR _c_szModelFileName$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 55 14	 mov	 edx, DWORD PTR _c_szSrcFileName$[ebp]
  00036	8b 75 18	 mov	 esi, DWORD PTR _c_szDstFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00039	0f 11 45 c0	 movups	 XMMWORD PTR _kSkin$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 45   : {

  0003d	89 45 b0	 mov	 DWORD PTR _c_szModelFileName$GSCopy$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00040	0f 11 45 d8	 movups	 XMMWORD PTR _kSkin$[ebp+28], xmm0

; 4998 :         _My_data._Mysize = 0;

  00044	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+20], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004b	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+24], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00052	c6 45 c0 00	 mov	 BYTE PTR _kSkin$[ebp+4], 0

; 4998 :         _My_data._Mysize = 0;

  00056	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+44], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005d	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+48], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00064	c6 45 d8 00	 mov	 BYTE PTR _kSkin$[ebp+28], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 47   : 	kSkin.m_ePart = ePart;

  00068	8b 45 0c	 mov	 eax, DWORD PTR _ePart$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0006b	8b ca		 mov	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 46   : 	SSkin kSkin;

  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 47   : 	kSkin.m_ePart = ePart;

  00074	89 45 bc	 mov	 DWORD PTR _kSkin$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00077	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL95@SetHairSki:
  00080	8a 01		 mov	 al, BYTE PTR [ecx]
  00082	41		 inc	 ecx
  00083	84 c0		 test	 al, al
  00085	75 f9		 jne	 SHORT $LL95@SetHairSki
  00087	2b cf		 sub	 ecx, edi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00089	51		 push	 ecx
  0008a	52		 push	 edx
  0008b	8d 4d c0	 lea	 ecx, DWORD PTR _kSkin$[ebp+4]
  0008e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 415  :             return __builtin_strlen(_First);

  00093	8b ce		 mov	 ecx, esi
  00095	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL96@SetHairSki:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL96@SetHairSki
  0009f	2b ca		 sub	 ecx, edx

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a1	51		 push	 ecx
  000a2	56		 push	 esi
  000a3	8d 4d d8	 lea	 ecx, DWORD PTR _kSkin$[ebp+28]
  000a6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 95   : 		size_t nLength = str.length();

  000ab	8b 7d d0	 mov	 edi, DWORD PTR _kSkin$[ebp+20]

; 96   : 
; 97   : 		for (size_t i = 0; i < nLength; ++i)

  000ae	33 c9		 xor	 ecx, ecx
  000b0	8b c7		 mov	 eax, edi
  000b2	89 45 b8	 mov	 DWORD PTR _nLength$1$[ebp], eax
  000b5	85 c0		 test	 eax, eax
  000b7	74 3a		 je	 SHORT $LN46@SetHairSki
  000b9	8b 55 d4	 mov	 edx, DWORD PTR _kSkin$[ebp+24]
  000bc	8b 75 c0	 mov	 esi, DWORD PTR _kSkin$[ebp+4]
  000bf	90		 npad	 1
$LL47@SetHairSki:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2324 :         if (_Mysize <= _Off) {

  000c0	3b f9		 cmp	 edi, ecx
  000c2	0f 86 bf 00 00
	00		 jbe	 $LN90@SetHairSki

; 2301 :         return _BUF_SIZE <= _Myres;

  000c8	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  000cb	8d 45 c0	 lea	 eax, DWORD PTR _kSkin$[ebp+4]

; 2284 :         if (_Large_string_engaged()) {

  000ce	0f 43 c6	 cmovae	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 99   : 			if (str.at(i) == '/') {

  000d1	80 3c 08 2f	 cmp	 BYTE PTR [eax+ecx], 47	; 0000002fH
  000d5	75 16		 jne	 SHORT $LN45@SetHairSki
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000d7	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  000da	8d 45 c0	 lea	 eax, DWORD PTR _kSkin$[ebp+4]

; 2284 :         if (_Large_string_engaged()) {

  000dd	0f 43 c6	 cmovae	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 100  : 				str.at(i) = '\\';

  000e0	c6 04 08 5c	 mov	 BYTE PTR [eax+ecx], 92	; 0000005cH
  000e4	8b 55 d4	 mov	 edx, DWORD PTR _kSkin$[ebp+24]
  000e7	8b 7d d0	 mov	 edi, DWORD PTR _kSkin$[ebp+20]
  000ea	8b 75 c0	 mov	 esi, DWORD PTR _kSkin$[ebp+4]
$LN45@SetHairSki:

; 96   : 
; 97   : 		for (size_t i = 0; i < nLength; ++i)

  000ed	41		 inc	 ecx
  000ee	3b 4d b8	 cmp	 ecx, DWORD PTR _nLength$1$[ebp]
  000f1	72 cd		 jb	 SHORT $LL47@SetHairSki
$LN46@SetHairSki:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 52   : 	m_kMap_dwHairKey_kHair[eHair].m_kVct_kSkin.push_back(kSkin);

  000f3	8b 45 b4	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000f6	8d 4d b8	 lea	 ecx, DWORD PTR $T3[ebp]
  000f9	8b 7d 08	 mov	 edi, DWORD PTR _eHair$[ebp]
  000fc	51		 push	 ecx
  000fd	89 7d b8	 mov	 DWORD PTR $T3[ebp], edi
  00100	8d 88 c0 00 00
	00		 lea	 ecx, DWORD PTR [eax+192]
  00106	e8 00 00 00 00	 call	 ??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0010b	8d 4d bc	 lea	 ecx, DWORD PTR _kSkin$[ebp]
  0010e	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 52   : 	m_kMap_dwHairKey_kHair[eHair].m_kVct_kSkin.push_back(kSkin);

  0010f	8d 70 18	 lea	 esi, DWORD PTR [eax+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00112	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00115	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00118	74 0d		 je	 SHORT $LN77@SetHairSki
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0011a	8b c8		 mov	 ecx, eax
  0011c	e8 00 00 00 00	 call	 ??0SSkin@CRaceData@@QAE@ABU01@@Z ; CRaceData::SSkin::SSkin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  00121	83 46 04 34	 add	 DWORD PTR [esi+4], 52	; 00000034H

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00125	eb 08		 jmp	 SHORT $LN76@SetHairSki
$LN77@SetHairSki:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00127	50		 push	 eax
  00128	8b ce		 mov	 ecx, esi
  0012a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Emplace_reallocate<CRaceData::SSkin const &>
$LN76@SetHairSki:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 53   : 	m_kMap_dwHairKey_kHair[eHair].m_stModelFileName = c_szModelFileName;

  0012f	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00132	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  00135	50		 push	 eax
  00136	89 7d b8	 mov	 DWORD PTR $T2[ebp], edi
  00139	8d 89 c0 00 00
	00		 lea	 ecx, DWORD PTR [ecx+192]
  0013f	e8 00 00 00 00	 call	 ??A?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAEAAUSHair@CRaceData@@$$QAK@Z ; std::map<unsigned long,CRaceData::SHair,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SHair> > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00144	8b 7d b0	 mov	 edi, DWORD PTR _c_szModelFileName$GSCopy$1$[ebp]
  00147	8b d7		 mov	 edx, edi
  00149	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0014c	0f 1f 40 00	 npad	 4
$LL97@SetHairSki:
  00150	8a 0a		 mov	 cl, BYTE PTR [edx]
  00152	42		 inc	 edx
  00153	84 c9		 test	 cl, cl
  00155	75 f9		 jne	 SHORT $LL97@SetHairSki
  00157	2b d6		 sub	 edx, esi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00159	8b c8		 mov	 ecx, eax
  0015b	52		 push	 edx
  0015c	57		 push	 edi
  0015d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 54   : }

  00162	8d 4d bc	 lea	 ecx, DWORD PTR _kSkin$[ebp]
  00165	e8 00 00 00 00	 call	 ??1SSkin@CRaceData@@QAE@XZ
  0016a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00174	59		 pop	 ecx
  00175	5f		 pop	 edi
  00176	5e		 pop	 esi
  00177	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0017a	33 cd		 xor	 ecx, ebp
  0017c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c2 14 00	 ret	 20			; 00000014H
$LN90@SetHairSki:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2325 :             _Xran();

  00187	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN99@SetHairSki:
  0018c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _kSkin$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SSkin@CRaceData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetHairSkin@CRaceData@@QAEXIIPBD00@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetHairSkin@CRaceData@@QAEXIIPBD00@Z ENDP		; CRaceData::SetHairSkin
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -76					; size = 4
_nLength$1$ = -72					; size = 4
$T2 = -72						; size = 4
_kSkin$ = -68						; size = 52
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_eShape$ = 8						; size = 4
_ePart$ = 12						; size = 4
_c_szSrcFileName$ = 16					; size = 4
_c_szDstFileName$ = 20					; size = 4
?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z PROC		; CRaceData::AppendShapeSkin, COMDAT
; _this$ = ecx

; 73   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d b4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 55 10	 mov	 edx, DWORD PTR _c_szSrcFileName$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	8b 75 14	 mov	 esi, DWORD PTR _c_szDstFileName$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00036	0f 11 45 c0	 movups	 XMMWORD PTR _kSkin$[ebp+4], xmm0

; 4998 :         _My_data._Mysize = 0;

  0003a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+20], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00041	0f 11 45 d8	 movups	 XMMWORD PTR _kSkin$[ebp+28], xmm0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+24], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 45 c0 00	 mov	 BYTE PTR _kSkin$[ebp+4], 0

; 4998 :         _My_data._Mysize = 0;

  00050	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+44], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00057	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR _kSkin$[ebp+48], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005e	c6 45 d8 00	 mov	 BYTE PTR _kSkin$[ebp+28], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 75   : 	kSkin.m_ePart = ePart;

  00062	8b 45 0c	 mov	 eax, DWORD PTR _ePart$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00065	8b ca		 mov	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 74   : 	SSkin kSkin;

  00067	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 75   : 	kSkin.m_ePart = ePart;

  0006e	89 45 bc	 mov	 DWORD PTR _kSkin$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00071	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL89@AppendShap:
  00074	8a 01		 mov	 al, BYTE PTR [ecx]
  00076	41		 inc	 ecx
  00077	84 c0		 test	 al, al
  00079	75 f9		 jne	 SHORT $LL89@AppendShap
  0007b	2b cf		 sub	 ecx, edi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007d	51		 push	 ecx
  0007e	52		 push	 edx
  0007f	8d 4d c0	 lea	 ecx, DWORD PTR _kSkin$[ebp+4]
  00082	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 415  :             return __builtin_strlen(_First);

  00087	8b ce		 mov	 ecx, esi
  00089	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0008c	0f 1f 40 00	 npad	 4
$LL90@AppendShap:
  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL90@AppendShap
  00097	2b ca		 sub	 ecx, edx

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	56		 push	 esi
  0009b	8d 4d d8	 lea	 ecx, DWORD PTR _kSkin$[ebp+28]
  0009e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 95   : 		size_t nLength = str.length();

  000a3	8b 7d d0	 mov	 edi, DWORD PTR _kSkin$[ebp+20]

; 96   : 
; 97   : 		for (size_t i = 0; i < nLength; ++i)

  000a6	33 c9		 xor	 ecx, ecx
  000a8	8b c7		 mov	 eax, edi
  000aa	89 45 b8	 mov	 DWORD PTR _nLength$1$[ebp], eax
  000ad	85 c0		 test	 eax, eax
  000af	74 39		 je	 SHORT $LN46@AppendShap
  000b1	8b 55 d4	 mov	 edx, DWORD PTR _kSkin$[ebp+24]
  000b4	8b 75 c0	 mov	 esi, DWORD PTR _kSkin$[ebp+4]
$LL47@AppendShap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2324 :         if (_Mysize <= _Off) {

  000b7	3b f9		 cmp	 edi, ecx
  000b9	0f 86 8c 00 00
	00		 jbe	 $LN84@AppendShap

; 2301 :         return _BUF_SIZE <= _Myres;

  000bf	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  000c2	8d 45 c0	 lea	 eax, DWORD PTR _kSkin$[ebp+4]

; 2284 :         if (_Large_string_engaged()) {

  000c5	0f 43 c6	 cmovae	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 99   : 			if (str.at(i) == '/') {

  000c8	80 3c 08 2f	 cmp	 BYTE PTR [eax+ecx], 47	; 0000002fH
  000cc	75 16		 jne	 SHORT $LN45@AppendShap
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000ce	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2283 :         value_type* _Result = _Bx._Buf;

  000d1	8d 45 c0	 lea	 eax, DWORD PTR _kSkin$[ebp+4]

; 2284 :         if (_Large_string_engaged()) {

  000d4	0f 43 c6	 cmovae	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 100  : 				str.at(i) = '\\';

  000d7	c6 04 08 5c	 mov	 BYTE PTR [eax+ecx], 92	; 0000005cH
  000db	8b 55 d4	 mov	 edx, DWORD PTR _kSkin$[ebp+24]
  000de	8b 7d d0	 mov	 edi, DWORD PTR _kSkin$[ebp+20]
  000e1	8b 75 c0	 mov	 esi, DWORD PTR _kSkin$[ebp+4]
$LN45@AppendShap:

; 96   : 
; 97   : 		for (size_t i = 0; i < nLength; ++i)

  000e4	41		 inc	 ecx
  000e5	3b 4d b8	 cmp	 ecx, DWORD PTR _nLength$1$[ebp]
  000e8	72 cd		 jb	 SHORT $LL47@AppendShap
$LN46@AppendShap:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 80   : 	m_kMap_dwShapeKey_kShape[eShape].m_kVct_kSkin.push_back(kSkin);

  000ea	8b 45 08	 mov	 eax, DWORD PTR _eShape$[ebp]
  000ed	8b 4d b4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000f0	89 45 b8	 mov	 DWORD PTR $T2[ebp], eax
  000f3	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  000f9	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  000fc	50		 push	 eax
  000fd	e8 00 00 00 00	 call	 ??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00102	8d 4d bc	 lea	 ecx, DWORD PTR _kSkin$[ebp]
  00105	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 80   : 	m_kMap_dwShapeKey_kShape[eShape].m_kVct_kSkin.push_back(kSkin);

  00106	8d 70 18	 lea	 esi, DWORD PTR [eax+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00109	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0010c	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0010f	74 0d		 je	 SHORT $LN77@AppendShap
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00111	8b c8		 mov	 ecx, eax
  00113	e8 00 00 00 00	 call	 ??0SSkin@CRaceData@@QAE@ABU01@@Z ; CRaceData::SSkin::SSkin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  00118	83 46 04 34	 add	 DWORD PTR [esi+4], 52	; 00000034H

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0011c	eb 08		 jmp	 SHORT $LN76@AppendShap
$LN77@AppendShap:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0011e	50		 push	 eax
  0011f	8b ce		 mov	 ecx, esi
  00121	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSSkin@CRaceData@@@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@AAEPAUSSkin@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Emplace_reallocate<CRaceData::SSkin const &>
$LN76@AppendShap:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 81   : }

  00126	8d 4d bc	 lea	 ecx, DWORD PTR _kSkin$[ebp]
  00129	e8 00 00 00 00	 call	 ??1SSkin@CRaceData@@QAE@XZ
  0012e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00131	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00138	59		 pop	 ecx
  00139	5f		 pop	 edi
  0013a	5e		 pop	 esi
  0013b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013e	33 cd		 xor	 ecx, ebp
  00140	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00145	8b e5		 mov	 esp, ebp
  00147	5d		 pop	 ebp
  00148	c2 10 00	 ret	 16			; 00000010H
$LN84@AppendShap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2325 :             _Xran();

  0014b	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN92@AppendShap:
  00150	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _kSkin$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SSkin@CRaceData@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AppendShapeSkin@CRaceData@@QAEXIIPBD0@Z ENDP		; CRaceData::AppendShapeSkin
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?SetShapeModel@CRaceData@@QAEXIPBD@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
_eShape$ = 8						; size = 4
_c_szModelFileName$ = 12				; size = 4
?SetShapeModel@CRaceData@@QAEXIPBD@Z PROC		; CRaceData::SetShapeModel, COMDAT
; _this$ = ecx

; 68   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 69   : 	m_kMap_dwShapeKey_kShape[eShape].m_stModelFileName = c_szModelFileName;

  00003	8b 45 08	 mov	 eax, DWORD PTR _eShape$[ebp]
  00006	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  0000c	56		 push	 esi
  0000d	89 45 08	 mov	 DWORD PTR $T1[ebp], eax
  00010	8d 45 08	 lea	 eax, DWORD PTR $T1[ebp]
  00013	57		 push	 edi
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??A?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAEAAUSShape@CRaceData@@$$QAK@Z ; std::map<unsigned long,CRaceData::SShape,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SShape> > >::operator[]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0001a	8b 55 0c	 mov	 edx, DWORD PTR _c_szModelFileName$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 69   : 	m_kMap_dwShapeKey_kShape[eShape].m_stModelFileName = c_szModelFileName;

  0001d	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0001f	8b ca		 mov	 ecx, edx
  00021	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
$LL9@SetShapeMo:
  00024	8a 01		 mov	 al, BYTE PTR [ecx]
  00026	41		 inc	 ecx
  00027	84 c0		 test	 al, al
  00029	75 f9		 jne	 SHORT $LL9@SetShapeMo
  0002b	2b cf		 sub	 ecx, edi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002d	51		 push	 ecx
  0002e	52		 push	 edx
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 70   : }

  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?SetShapeModel@CRaceData@@QAEXIPBD@Z ENDP		; CRaceData::SetShapeModel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetComboDataPointer@CRaceData@@QAEHGGPAPAUSComboAttackData@1@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
$T2 = 8							; size = 4
_wMotionModeIndex$ = 8					; size = 2
_wComboType$ = 12					; size = 2
_ppComboData$ = 16					; size = 4
?GetComboDataPointer@CRaceData@@QAEHGGPAPAUSComboAttackData@1@@Z PROC ; CRaceData::GetComboDataPointer, COMDAT
; _this$ = ecx

; 496  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 497  : 	TComboAttackDataIterator itor = m_ComboAttackDataMap.find(MAKE_COMBO_KEY(wMotionModeIndex, wComboType));

  00006	0f b7 45 0c	 movzx	 eax, WORD PTR _wComboType$[ebp]
  0000a	56		 push	 esi
  0000b	0f b7 75 08	 movzx	 esi, WORD PTR _wMotionModeIndex$[ebp]
  0000f	57		 push	 edi
  00010	c1 e6 10	 shl	 esi, 16			; 00000010H
  00013	8d b9 b0 00 00
	00		 lea	 edi, DWORD PTR [ecx+176]
  00019	0b f0		 or	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001b	8b cf		 mov	 ecx, edi
  0001d	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 497  : 	TComboAttackDataIterator itor = m_ComboAttackDataMap.find(MAKE_COMBO_KEY(wMotionModeIndex, wComboType));

  00020	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  00030	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00034	75 1e		 jne	 SHORT $LN37@GetComboDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00036	3b 71 10	 cmp	 esi, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00039	72 19		 jb	 SHORT $LN37@GetComboDa

; 233  :         return this->_Ptr == _Right._Ptr;

  0003b	39 0f		 cmp	 DWORD PTR [edi], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 499  : 	if (m_ComboAttackDataMap.end() == itor)

  0003d	74 15		 je	 SHORT $LN37@GetComboDa

; 502  : 	}
; 503  : 
; 504  : 	*ppComboData = &itor->second;

  0003f	8b 45 10	 mov	 eax, DWORD PTR _ppComboData$[ebp]
  00042	83 c1 14	 add	 ecx, 20			; 00000014H
  00045	5f		 pop	 edi

; 505  : 	return TRUE;
; 506  : }

  00046	5e		 pop	 esi
  00047	89 08		 mov	 DWORD PTR [eax], ecx
  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN37@GetComboDa:
  00054	5f		 pop	 edi

; 500  : 	{
; 501  : 		return FALSE;

  00055	33 c0		 xor	 eax, eax

; 505  : 	return TRUE;
; 506  : }

  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c2 0c 00	 ret	 12			; 0000000cH
?GetComboDataPointer@CRaceData@@QAEHGGPAPAUSComboAttackData@1@@Z ENDP ; CRaceData::GetComboDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?RegisterComboAttack@CRaceData@@QAEXGGKG@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
$T2 = 8							; size = 4
_wMotionModeIndex$ = 8					; size = 2
_wComboType$ = 12					; size = 2
_dwComboIndex$ = 16					; size = 4
_wMotionIndex$ = 20					; size = 2
?RegisterComboAttack@CRaceData@@QAEXGGKG@Z PROC		; CRaceData::RegisterComboAttack, COMDAT
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 479  : 	TComboAttackDataIterator itor = m_ComboAttackDataMap.find(MAKE_COMBO_KEY(wMotionModeIndex, wComboType));

  00006	0f b7 45 0c	 movzx	 eax, WORD PTR _wComboType$[ebp]
  0000a	56		 push	 esi
  0000b	0f b7 75 08	 movzx	 esi, WORD PTR _wMotionModeIndex$[ebp]
  0000f	57		 push	 edi
  00010	c1 e6 10	 shl	 esi, 16			; 00000010H
  00013	8d b9 b0 00 00
	00		 lea	 edi, DWORD PTR [ecx+176]
  00019	0b f0		 or	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0001b	8b cf		 mov	 ecx, edi
  0001d	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 479  : 	TComboAttackDataIterator itor = m_ComboAttackDataMap.find(MAKE_COMBO_KEY(wMotionModeIndex, wComboType));

  00020	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00030	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00034	75 37		 jne	 SHORT $LN1@RegisterCo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00036	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00039	72 32		 jb	 SHORT $LN1@RegisterCo

; 233  :         return this->_Ptr == _Right._Ptr;

  0003b	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 480  : 	if (m_ComboAttackDataMap.end() == itor)

  0003d	74 2e		 je	 SHORT $LN1@RegisterCo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00042	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 486  : 	if (dwComboIndex >= rComboIndexVector.size())

  00045	8b 55 10	 mov	 edx, DWORD PTR _dwComboIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00048	2b c1		 sub	 eax, ecx
  0004a	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 486  : 	if (dwComboIndex >= rComboIndexVector.size())

  0004d	3b d0		 cmp	 edx, eax
  0004f	72 15		 jb	 SHORT $LN3@RegisterCo

; 487  : 	{
; 488  : 		AssertLog("CRaceData::RegisterCombo - Strange combo index!");

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@ECNOMAND@CRaceData?3?3RegisterCombo?5?9?5Stra@
  00056	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0005b	83 c4 04	 add	 esp, 4
  0005e	5f		 pop	 edi

; 493  : }

  0005f	5e		 pop	 esi
  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 10 00	 ret	 16			; 00000010H
$LN3@RegisterCo:

; 489  : 		return;
; 490  : 	}
; 491  : 
; 492  : 	rComboIndexVector[dwComboIndex] = wMotionIndex;

  00066	0f b7 45 14	 movzx	 eax, WORD PTR _wMotionIndex$[ebp]
  0006a	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax
$LN1@RegisterCo:

; 493  : }

  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c2 10 00	 ret	 16			; 00000010H
?RegisterComboAttack@CRaceData@@QAEXGGKG@Z ENDP		; CRaceData::RegisterComboAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?ReserveComboAttack@CRaceData@@QAEXGGK@Z
_TEXT	SEGMENT
$T2 = -76						; size = 16
__Loc$3 = -60						; size = 12
_ComboData$ = -48					; size = 12
$T4 = -36						; size = 12
$T5 = -32						; size = 8
tv1396 = -24						; size = 4
__Ptr$1$ = -20						; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Bytes$1$ = 8						; size = 4
_wMotionModeIndex$ = 8					; size = 2
$T6 = 12						; size = 4
_wComboType$ = 12					; size = 2
__Count$1$ = 16						; size = 4
_dwComboCount$ = 16					; size = 4
$T7 = 19						; size = 1
?ReserveComboAttack@CRaceData@@QAEXGGK@Z PROC		; CRaceData::ReserveComboAttack, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReserveComboAttack@CRaceData@@QAEXGGK@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d f0	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002b	33 c0		 xor	 eax, eax
  0002d	33 ff		 xor	 edi, edi
  0002f	89 45 ec	 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00032	89 45 d0	 mov	 DWORD PTR _ComboData$[ebp], eax
  00035	89 45 d4	 mov	 DWORD PTR _ComboData$[ebp+4], eax
  00038	89 7d d8	 mov	 DWORD PTR _ComboData$[ebp+8], edi

; 1630 :         if (_Newsize > _Oldsize) { // append

  0003b	8b 45 10	 mov	 eax, DWORD PTR _dwComboCount$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 471  : 	TComboData ComboData;

  0003e	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1630 :         if (_Newsize > _Oldsize) { // append

  00041	85 c0		 test	 eax, eax
  00043	74 16		 je	 SHORT $LN21@ReserveCom

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);
; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate
; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00045	8d 4d 13	 lea	 ecx, DWORD PTR $T7[ebp]
  00048	51		 push	 ecx
  00049	50		 push	 eax
  0004a	8d 4d d0	 lea	 ecx, DWORD PTR _ComboData$[ebp]
  0004d	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@KV?$allocator@K@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Resize_reallocate<std::_Value_init_tag>
  00052	8b 45 d0	 mov	 eax, DWORD PTR _ComboData$[ebp]
  00055	8b 7d d8	 mov	 edi, DWORD PTR _ComboData$[ebp+8]
  00058	89 45 ec	 mov	 DWORD PTR __Ptr$1$[ebp], eax
$LN21@ReserveCom:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 474  : 	m_ComboAttackDataMap.insert(TComboAttackDataMap::value_type(MAKE_COMBO_KEY(wMotionModeIndex, wComboType), ComboData));

  0005b	0f b7 4d 08	 movzx	 ecx, WORD PTR _wMotionModeIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0005f	33 f6		 xor	 esi, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 474  : 	m_ComboAttackDataMap.insert(TComboAttackDataMap::value_type(MAKE_COMBO_KEY(wMotionModeIndex, wComboType), ComboData));

  00061	0f b7 45 0c	 movzx	 eax, WORD PTR _wComboType$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00065	33 db		 xor	 ebx, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 474  : 	m_ComboAttackDataMap.insert(TComboAttackDataMap::value_type(MAKE_COMBO_KEY(wMotionModeIndex, wComboType), ComboData));

  00067	c1 e1 10	 shl	 ecx, 16			; 00000010H
  0006a	0b c8		 or	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006c	89 75 08	 mov	 DWORD PTR __Bytes$1$[ebp], esi
  0006f	33 c0		 xor	 eax, eax
  00071	89 75 c0	 mov	 DWORD PTR $T2[ebp+12], esi

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00074	8b 75 ec	 mov	 esi, DWORD PTR __Ptr$1$[ebp]

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00077	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  0007a	89 45 bc	 mov	 DWORD PTR $T2[ebp+8], eax

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  0007d	8b 45 d4	 mov	 eax, DWORD PTR _ComboData$[ebp+4]
  00080	2b c6		 sub	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 474  : 	m_ComboAttackDataMap.insert(TComboAttackDataMap::value_type(MAKE_COMBO_KEY(wMotionModeIndex, wComboType), ComboData));

  00082	89 4d e8	 mov	 DWORD PTR tv1396[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00085	89 4d b4	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00088	8b c8		 mov	 ecx, eax
  0008a	c1 f9 02	 sar	 ecx, 2

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0008d	89 5d b8	 mov	 DWORD PTR $T2[ebp+4], ebx

; 748  :         const auto _Count       = static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst);

  00090	89 4d 10	 mov	 DWORD PTR __Count$1$[ebp], ecx

; 2128 :         if (_Count != 0) {

  00093	83 f8 04	 cmp	 eax, 4
  00096	72 63		 jb	 SHORT $LN85@ReserveCom

; 2069 :         if (_Newcapacity > max_size()) {

  00098	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0009e	0f 87 6d 01 00
	00		 ja	 $LN265@ReserveCom
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  000a4	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ab	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  000b1	72 10		 jb	 SHORT $LN65@ReserveCom

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b3	53		 push	 ebx
  000b4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b9	8b 4d 10	 mov	 ecx, DWORD PTR __Count$1$[ebp]
  000bc	83 c4 04	 add	 esp, 4
  000bf	8b d8		 mov	 ebx, eax
  000c1	eb 16		 jmp	 SHORT $LN64@ReserveCom
$LN65@ReserveCom:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000c3	85 db		 test	 ebx, ebx
  000c5	74 10		 je	 SHORT $LN66@ReserveCom

; 77   :         return ::operator new(_Bytes);

  000c7	53		 push	 ebx
  000c8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000cd	8b 4d 10	 mov	 ecx, DWORD PTR __Count$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  000d0	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000d3	8b d8		 mov	 ebx, eax
  000d5	eb 02		 jmp	 SHORT $LN64@ReserveCom
$LN66@ReserveCom:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000d7	33 db		 xor	 ebx, ebx
$LN64@ReserveCom:

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  000d9	53		 push	 ebx
  000da	ff 75 d4	 push	 DWORD PTR _ComboData$[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2055 :         _Myend             = _Newvec + _Newcapacity;

  000dd	8d 04 8b	 lea	 eax, DWORD PTR [ebx+ecx*4]
  000e0	89 5d b8	 mov	 DWORD PTR $T2[ebp+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  000e3	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2055 :         _Myend             = _Newvec + _Newcapacity;

  000e4	89 45 0c	 mov	 DWORD PTR $T6[ebp], eax
  000e7	89 45 08	 mov	 DWORD PTR __Bytes$1$[ebp], eax
  000ea	89 45 c0	 mov	 DWORD PTR $T2[ebp+12], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  000ed	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ; std::_Copy_memmove<unsigned long *,unsigned long *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000f2	8b 45 0c	 mov	 eax, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));

  000f5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2137 :                 _My_data._Mylast = _Uninitialized_copy(_STD forward<_Valty>(_Val)..., _My_data._Myfirst, _Al);

  000f8	89 45 bc	 mov	 DWORD PTR $T2[ebp+8], eax
$LN85@ReserveCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  000fb	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000fe	8d 45 b4	 lea	 eax, DWORD PTR $T2[ebp]
  00101	50		 push	 eax
  00102	8d 45 dc	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 474  : 	m_ComboAttackDataMap.insert(TComboAttackDataMap::value_type(MAKE_COMBO_KEY(wMotionModeIndex, wComboType), ComboData));

  00105	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00109	50		 push	 eax
  0010a	8d 89 b0 00 00
	00		 lea	 ecx, DWORD PTR [ecx+176]
  00110	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> >,0> >::_Find_lower_bound<unsigned long>
  00115	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00118	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0011c	66 0f d6 45 c4	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00121	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00125	75 08		 jne	 SHORT $LN261@ReserveCom
  00127	8b 45 e8	 mov	 eax, DWORD PTR tv1396[ebp]
  0012a	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  0012d	73 71		 jae	 SHORT $LN189@ReserveCom
$LN261@ReserveCom:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0012f	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  00132	05 b0 00 00 00	 add	 eax, 176		; 000000b0H
  00137	81 78 04 ff ff
	ff 07		 cmp	 DWORD PTR [eax+4], 134217727 ; 07ffffffH
  0013e	0f 84 d2 00 00
	00		 je	 $LN266@ReserveCom

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00144	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00146	89 45 e0	 mov	 DWORD PTR $T5[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00149	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0014b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0014f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00156	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  0015b	8b 4d e8	 mov	 ecx, DWORD PTR tv1396[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0015e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00161	8b 55 08	 mov	 edx, DWORD PTR __Bytes$1$[ebp]

; 176  :     pair(pair&&)      = default;

  00164	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00167	33 c9		 xor	 ecx, ecx
  00169	89 4d 08	 mov	 DWORD PTR __Bytes$1$[ebp], ecx

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0016c	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  0016e	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00171	33 db		 xor	 ebx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00173	8b 4d 0c	 mov	 ecx, DWORD PTR $T6[ebp]
  00176	89 48 18	 mov	 DWORD PTR [eax+24], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00179	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0017c	50		 push	 eax
  0017d	ff 75 c8	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00180	89 50 1c	 mov	 DWORD PTR [eax+28], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00183	ff 75 c4	 push	 DWORD PTR __Loc$3[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00186	89 30		 mov	 DWORD PTR [eax], esi

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00188	8d 89 b0 00 00
	00		 lea	 ecx, DWORD PTR [ecx+176]

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0018e	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00191	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00194	66 89 58 0c	 mov	 WORD PTR [eax+12], bx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00198	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Insert_node
  0019d	8b 75 ec	 mov	 esi, DWORD PTR __Ptr$1$[ebp]
$LN189@ReserveCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  001a0	85 db		 test	 ebx, ebx
  001a2	74 2c		 je	 SHORT $LN208@ReserveCom

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001a4	8b 4d 08	 mov	 ecx, DWORD PTR __Bytes$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a7	8b c3		 mov	 eax, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001a9	2b cb		 sub	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ab	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ae	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001b4	72 10		 jb	 SHORT $LN224@ReserveCom

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001b6	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
  001b9	83 c1 23	 add	 ecx, 35			; 00000023H
  001bc	2b c3		 sub	 eax, ebx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001be	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001c4	77 55		 ja	 SHORT $LN250@ReserveCom
$LN224@ReserveCom:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001c6	51		 push	 ecx
  001c7	53		 push	 ebx
  001c8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001cd	83 c4 08	 add	 esp, 8
$LN208@ReserveCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  001d0	85 f6		 test	 esi, esi
  001d2	74 29		 je	 SHORT $LN237@ReserveCom

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001d4	2b fe		 sub	 edi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001d6	8b c6		 mov	 eax, esi
  001d8	83 e7 fc	 and	 edi, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001db	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  001e1	72 10		 jb	 SHORT $LN253@ReserveCom

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001e3	8b 70 fc	 mov	 esi, DWORD PTR [eax-4]
  001e6	83 c7 23	 add	 edi, 35			; 00000023H
  001e9	2b c6		 sub	 eax, esi

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001eb	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ee	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001f1	77 28		 ja	 SHORT $LN250@ReserveCom
$LN253@ReserveCom:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001f3	57		 push	 edi
  001f4	56		 push	 esi
  001f5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001fa	83 c4 08	 add	 esp, 8
$LN237@ReserveCom:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 475  : }

  001fd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00200	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00207	59		 pop	 ecx
  00208	5f		 pop	 edi
  00209	5e		 pop	 esi
  0020a	5b		 pop	 ebx
  0020b	8b e5		 mov	 esp, ebp
  0020d	5d		 pop	 ebp
  0020e	c2 0c 00	 ret	 12			; 0000000cH
$LN265@ReserveCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2070 :             _Xlength();

  00211	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN266@ReserveCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00216	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN250@ReserveCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0021b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN263@ReserveCom:
  00220	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveComboAttack@CRaceData@@QAEXGGK@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _ComboData$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1SComboAttackData@CRaceData@@QAE@XZ
__unwindfunclet$?ReserveComboAttack@CRaceData@@QAEXGGK@Z$1:
  00008	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@QAE@XZ
__unwindfunclet$?ReserveComboAttack@CRaceData@@QAEXGGK@Z$8:
  00010	8d 4d e0	 lea	 ecx, DWORD PTR $T5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?ReserveComboAttack@CRaceData@@QAEXGGK@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReserveComboAttack@CRaceData@@QAEXGGK@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReserveComboAttack@CRaceData@@QAEXGGK@Z ENDP		; CRaceData::ReserveComboAttack
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetNormalAttackIndex@CRaceData@@QAEHGPAG@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
$T2 = 8							; size = 4
_wMotionModeIndex$ = 8					; size = 2
_pwMotionIndex$ = 12					; size = 4
?GetNormalAttackIndex@CRaceData@@QAEHGPAG@Z PROC	; CRaceData::GetNormalAttackIndex, COMDAT
; _this$ = ecx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi

; 457  : 	TNormalAttackIndexMap::iterator itor = m_NormalAttackIndexMap.find(wMotionModeIndex);

  00007	0f b7 75 08	 movzx	 esi, WORD PTR _wMotionModeIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000b	8d 45 08	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 456  : {

  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000f	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 457  : 	TNormalAttackIndexMap::iterator itor = m_NormalAttackIndexMap.find(wMotionModeIndex);

  00010	8d b9 b8 00 00
	00		 lea	 edi, DWORD PTR [ecx+184]
  00016	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00019	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  0001c	8b cf		 mov	 ecx, edi
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00024	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  00027	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002b	75 20		 jne	 SHORT $LN37@GetNormalA
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0002d	3b 70 10	 cmp	 esi, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00030	72 1b		 jb	 SHORT $LN37@GetNormalA

; 233  :         return this->_Ptr == _Right._Ptr;

  00032	39 07		 cmp	 DWORD PTR [edi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 459  : 	if (m_NormalAttackIndexMap.end() == itor)

  00034	74 17		 je	 SHORT $LN37@GetNormalA

; 462  : 	}
; 463  : 
; 464  : 	*pwMotionIndex = itor->second;

  00036	66 8b 48 14	 mov	 cx, WORD PTR [eax+20]
  0003a	8b 45 0c	 mov	 eax, DWORD PTR _pwMotionIndex$[ebp]
  0003d	5f		 pop	 edi

; 465  : 
; 466  : 	return TRUE;
; 467  : }

  0003e	5e		 pop	 esi
  0003f	66 89 08	 mov	 WORD PTR [eax], cx
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN37@GetNormalA:
  0004d	5f		 pop	 edi

; 460  : 	{
; 461  : 		return FALSE;

  0004e	33 c0		 xor	 eax, eax

; 465  : 
; 466  : 	return TRUE;
; 467  : }

  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 08 00	 ret	 8
?GetNormalAttackIndex@CRaceData@@QAEHGPAG@Z ENDP	; CRaceData::GetNormalAttackIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?RegisterNormalAttack@CRaceData@@QAEXGG@Z
_TEXT	SEGMENT
$T2 = -44						; size = 12
__Loc$3 = -32						; size = 12
$T4 = -20						; size = 8
$T5 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_wMotionModeIndex$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
?RegisterNormalAttack@CRaceData@@QAEXGG@Z PROC		; CRaceData::RegisterNormalAttack, COMDAT
; _this$ = ecx

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterNormalAttack@CRaceData@@QAEXGG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00028	0f b7 45 0c	 movzx	 eax, WORD PTR _wMotionIndex$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 453  : 	m_NormalAttackIndexMap.insert(TNormalAttackIndexMap::value_type(wMotionModeIndex, wMotionIndex));

  0002c	8d b9 b8 00 00
	00		 lea	 edi, DWORD PTR [ecx+184]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00032	0f b7 5d 08	 movzx	 ebx, WORD PTR _wMotionModeIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00036	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00038	89 45 f0	 mov	 DWORD PTR $T5[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0003b	8d 45 ec	 lea	 eax, DWORD PTR $T5[ebp]
  0003e	50		 push	 eax
  0003f	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00042	89 5d ec	 mov	 DWORD PTR $T5[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Find_lower_bound<unsigned long>
  0004b	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0004f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00052	66 0f d6 45 e0	 movq	 QWORD PTR __Loc$3[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00057	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005b	75 05		 jne	 SHORT $LN95@RegisterNo
  0005d	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
  00060	73 4c		 jae	 SHORT $LN83@RegisterNo
$LN95@RegisterNo:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00062	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00069	74 57		 je	 SHORT $LN99@RegisterNo

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0006b	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0006d	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  00070	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00079	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00080	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00085	0f b7 4d 0c	 movzx	 ecx, WORD PTR _wMotionIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00089	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0008c	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0008f	8b cf		 mov	 ecx, edi
  00091	50		 push	 eax
  00092	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00095	89 58 10	 mov	 DWORD PTR [eax+16], ebx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00098	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0009b	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0009d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a0	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000a3	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a9	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Insert_node
$LN83@RegisterNo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 454  : }

  000ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b8	59		 pop	 ecx
  000b9	5f		 pop	 edi
  000ba	5e		 pop	 esi
  000bb	5b		 pop	 ebx
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 08 00	 ret	 8
$LN99@RegisterNo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  000c2	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN97@RegisterNo:
  000c7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterNormalAttack@CRaceData@@QAEXGG@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RegisterNormalAttack@CRaceData@@QAEXGG@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterNormalAttack@CRaceData@@QAEXGG@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterNormalAttack@CRaceData@@QAEXGG@Z ENDP		; CRaceData::RegisterNormalAttack
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?SetMotionRandomWeight@CRaceData@@QAE_NGGGE@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_wMotionModeIndex$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
$T2 = 16						; size = 4
_pMotionModeData$ = 16					; size = 4
_wMotionSubIndex$ = 16					; size = 2
_byPercentage$ = 20					; size = 1
?SetMotionRandomWeight@CRaceData@@QAE_NGGGE@Z PROC	; CRaceData::SetMotionRandomWeight, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 418  : 	TMotionModeData * pMotionModeData;
; 419  : 
; 420  : 	if (!GetMotionModeDataPointer(wMotionModeIndex, &pMotionModeData))

  00006	8d 45 10	 lea	 eax, DWORD PTR _pMotionModeData$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	66 8b 75 10	 mov	 si, WORD PTR _wMotionSubIndex$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR _wMotionModeIndex$[ebp]
  00013	50		 push	 eax
  00014	57		 push	 edi
  00015	0f b7 de	 movzx	 ebx, si
  00018	e8 00 00 00 00	 call	 ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 83 00 00
	00		 je	 $LN5@SetMotionR

; 426  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  00025	8b 45 10	 mov	 eax, DWORD PTR _pMotionModeData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 4d 0c	 lea	 ecx, DWORD PTR _wMotionIndex$[ebp]
  0002b	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 426  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  0002c	83 c0 08	 add	 eax, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002f	8d 4d f4	 lea	 ecx, DWORD PTR __Loc$1[ebp]
  00032	51		 push	 ecx
  00033	8b c8		 mov	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 426  : 	TMotionVectorMap::iterator itor = pMotionModeData->MotionVectorMap.find(wMotionIndex);

  00035	89 45 10	 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00038	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  00040	66 8b 55 0c	 mov	 dx, WORD PTR _wMotionIndex$[ebp]
  00044	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00048	75 40		 jne	 SHORT $LN11@SetMotionR
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0004a	66 3b 51 10	 cmp	 dx, WORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004e	72 3a		 jb	 SHORT $LN11@SetMotionR

; 233  :         return this->_Ptr == _Right._Ptr;

  00050	8b 45 10	 mov	 eax, DWORD PTR $T2[ebp]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00053	0f b7 f6	 movzx	 esi, si

; 233  :         return this->_Ptr == _Right._Ptr;

  00056	39 08		 cmp	 DWORD PTR [eax], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 428  : 	if (pMotionModeData->MotionVectorMap.end() != itor)

  00058	74 32		 je	 SHORT $LN3@SetMotionR
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005a	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  0005d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00062	8b 49 18	 mov	 ecx, DWORD PTR [ecx+24]
  00065	2b cf		 sub	 ecx, edi
  00067	f7 e9		 imul	 ecx
  00069	d1 fa		 sar	 edx, 1
  0006b	8b c2		 mov	 eax, edx
  0006d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00070	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 431  : 		if (wMotionSubIndex < rMotionVector.size())

  00072	3b f0		 cmp	 esi, eax
  00074	73 32		 jae	 SHORT $LN5@SetMotionR

; 433  : 			rMotionVector[wMotionSubIndex].byPercentage = byPercentage;

  00076	8a 45 14	 mov	 al, BYTE PTR _byPercentage$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00079	8d 0c 76	 lea	 ecx, DWORD PTR [esi+esi*2]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 433  : 			rMotionVector[wMotionSubIndex].byPercentage = byPercentage;

  0007c	88 04 8f	 mov	 BYTE PTR [edi+ecx*4], al

; 443  : 				   wMotionModeIndex, wMotionIndex, wMotionSubIndex, byPercentage, wMotionModeIndex);
; 444  : 
; 445  : 		return false;
; 446  : 	}
; 447  : 
; 448  : 	return true;

  0007f	b0 01		 mov	 al, 1
  00081	5f		 pop	 edi

; 449  : }

  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 10 00	 ret	 16			; 00000010H
$LN11@SetMotionR:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1372 :         return _Get_scary()->_Myhead;

  0008a	8b f3		 mov	 esi, ebx
$LN3@SetMotionR:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 442  : 		TraceError("CRaceData::SetMotionRandomWeight(wMotionModeIndex=%d, wMotionIndex=%d, wMotionSubIndex=%d, byPercentage=%d) - Find Motion(wMotionIndex=%d) FAILED",

  0008c	0f b6 45 14	 movzx	 eax, BYTE PTR _byPercentage$[ebp]
  00090	0f b7 cf	 movzx	 ecx, di
  00093	51		 push	 ecx
  00094	50		 push	 eax
  00095	56		 push	 esi
  00096	0f b7 c2	 movzx	 eax, dx
  00099	50		 push	 eax
  0009a	51		 push	 ecx
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0JC@NKNOKDIB@CRaceData?3?3SetMotionRandomWeigh@
  000a0	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a5	83 c4 18	 add	 esp, 24			; 00000018H
$LN5@SetMotionR:

; 449  : }

  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	32 c0		 xor	 al, al
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c2 10 00	 ret	 16			; 00000010H
?SetMotionRandomWeight@CRaceData@@QAE_NGGGE@Z ENDP	; CRaceData::SetMotionRandomWeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z
_TEXT	SEGMENT
__Loc$3 = -44						; size = 12
_kMotion$ = -32						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_pkMotionData$ = 8					; size = 4
_wMotionModeIndex$ = 12					; size = 2
_wMotionIndex$ = 16					; size = 2
_pMotionModeData$ = 20					; size = 4
_c_szFileName$ = 20					; size = 4
_byPercentage$ = 24					; size = 1
?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z PROC ; CRaceData::NEW_RegisterMotion, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx

; 335  : 	CGraphicThing * pMotionThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_szFileName);

  0002a	ff 75 14	 push	 DWORD PTR _c_szFileName$[ebp]
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00033	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00038	8b d8		 mov	 ebx, eax

; 336  : 
; 337  : 	TMotionModeData * pMotionModeData;
; 338  : 	if (!GetMotionModeDataPointer(wMotionModeIndex, &pMotionModeData))

  0003a	8b ce		 mov	 ecx, esi
  0003c	8d 45 14	 lea	 eax, DWORD PTR _pMotionModeData$[ebp]
  0003f	50		 push	 eax
  00040	ff 75 0c	 push	 DWORD PTR _wMotionModeIndex$[ebp]
  00043	e8 00 00 00 00	 call	 ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
  00048	85 c0		 test	 eax, eax
  0004a	75 23		 jne	 SHORT $LN2@NEW_Regist

; 339  : 	{
; 340  : 		AssertLog("Failed getting motion mode data!");

  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@IBAKOHGK@Failed?5getting?5motion?5mode?5data@
  00051	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00056	83 c4 04	 add	 esp, 4

; 341  : 		return NULL;

  00059	33 c0		 xor	 eax, eax

; 351  : }

  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	5b		 pop	 ebx
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c2 14 00	 ret	 20			; 00000014H
$LN2@NEW_Regist:

; 342  : 	}
; 343  : 
; 344  : 	TMotion	kMotion;
; 345  : 	kMotion.byPercentage = byPercentage;

  0006f	8a 45 18	 mov	 al, BYTE PTR _byPercentage$[ebp]

; 348  : 	pMotionModeData->MotionVectorMap[wMotionIndex].push_back(kMotion);

  00072	8b 7d 14	 mov	 edi, DWORD PTR _pMotionModeData$[ebp]
  00075	8b 75 08	 mov	 esi, DWORD PTR _pkMotionData$[ebp]
  00078	83 c7 08	 add	 edi, 8
  0007b	88 45 e0	 mov	 BYTE PTR _kMotion$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0007e	8b cf		 mov	 ecx, edi
  00080	8d 45 10	 lea	 eax, DWORD PTR _wMotionIndex$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 346  : 	kMotion.pMotion		 = pMotionThing;

  00083	89 5d e4	 mov	 DWORD PTR _kMotion$[ebp+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00086	50		 push	 eax
  00087	8d 45 d4	 lea	 eax, DWORD PTR __Loc$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 347  : 	kMotion.pMotionData	 = pkMotionData;

  0008a	89 75 e8	 mov	 DWORD PTR _kMotion$[ebp+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00093	8b 4d dc	 mov	 ecx, DWORD PTR __Loc$3[ebp+8]
  00096	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0009a	75 0a		 jne	 SHORT $LN7@NEW_Regist
  0009c	66 8b 45 10	 mov	 ax, WORD PTR _wMotionIndex$[ebp]
  000a0	66 3b 41 10	 cmp	 ax, WORD PTR [ecx+16]
  000a4	73 6f		 jae	 SHORT $LN6@NEW_Regist
$LN7@NEW_Regist:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  000a6	81 7f 04 ff ff
	ff 07		 cmp	 DWORD PTR [edi+4], 134217727 ; 07ffffffH
  000ad	0f 84 a1 00 00
	00		 je	 $LN131@NEW_Regist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  000b3	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000b5	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  000b8	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000ba	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000c1	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  000c8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000cd	66 8b 4d 10	 mov	 cx, WORD PTR _wMotionIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000d1	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 787  :     }

  000d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000db	66 89 48 10	 mov	 WORD PTR [eax+16], cx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000df	8b cf		 mov	 ecx, edi
  000e1	50		 push	 eax
  000e2	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000e5	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ec	ff 75 d4	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000ef	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], 0
  000f6	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000fd	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000ff	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00102	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00105	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0010b	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Insert_node
  00110	8b 75 08	 mov	 esi, DWORD PTR _pkMotionData$[ebp]
  00113	8b c8		 mov	 ecx, eax
$LN6@NEW_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00115	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 345  :         return _Try_emplace(_Keyval).first->_Myval.second;

  00118	8d 51 14	 lea	 edx, DWORD PTR [ecx+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0011b	3b 41 1c	 cmp	 eax, DWORD PTR [ecx+28]
  0011e	74 12		 je	 SHORT $LN120@NEW_Regist
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  00120	f3 0f 7e 45 e0	 movq	 xmm0, QWORD PTR _kMotion$[ebp]
  00125	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00129	89 70 08	 mov	 DWORD PTR [eax+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  0012c	83 41 18 0c	 add	 DWORD PTR [ecx+24], 12	; 0000000cH

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00130	eb 0c		 jmp	 SHORT $LN119@NEW_Regist
$LN120@NEW_Regist:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00132	8d 4d e0	 lea	 ecx, DWORD PTR _kMotion$[ebp]
  00135	51		 push	 ecx
  00136	50		 push	 eax
  00137	8b ca		 mov	 ecx, edx
  00139	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSMotion@CRaceData@@@?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@AAEPAUSMotion@CRaceData@@QAU23@ABU23@@Z ; std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >::_Emplace_reallocate<CRaceData::SMotion const &>
$LN119@NEW_Regist:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 350  : 	return pMotionThing;

  0013e	8b c3		 mov	 eax, ebx

; 351  : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	5b		 pop	 ebx
  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c2 14 00	 ret	 20			; 00000014H
$LN131@NEW_Regist:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00154	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN129@NEW_Regist:
  00159	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z ENDP ; CRaceData::NEW_RegisterMotion
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?OLD_RegisterMotion@CRaceData@@QAEXGGPBDE@Z
_TEXT	SEGMENT
_Motion$ = -12						; size = 12
_wMotionModeIndex$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
_c_szFileName$ = 16					; size = 4
_byPercentage$ = 20					; size = 1
?OLD_RegisterMotion@CRaceData@@QAEXGGPBDE@Z PROC	; CRaceData::OLD_RegisterMotion, COMDAT
; _this$ = ecx

; 381  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 382  : 	CGraphicThing * pThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(c_szFileName);
; 383  : 
; 384  : 	TMotion	Motion;
; 385  : 	Motion.byPercentage	= byPercentage;

  00006	8a 45 14	 mov	 al, BYTE PTR _byPercentage$[ebp]
  00009	56		 push	 esi
  0000a	ff 75 10	 push	 DWORD PTR _c_szFileName$[ebp]
  0000d	8b f1		 mov	 esi, ecx
  0000f	88 45 f4	 mov	 BYTE PTR _Motion$[ebp], al
  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00018	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 386  : 	Motion.pMotion		= pThing;

  0001d	89 45 f8	 mov	 DWORD PTR _Motion$[ebp+4], eax

; 387  : 	Motion.pMotionData	= NULL;
; 388  : 	__OLD_RegisterMotion(wMotionModeIndex, wMotionIndex, Motion);

  00020	8b ce		 mov	 ecx, esi
  00022	8d 45 f4	 lea	 eax, DWORD PTR _Motion$[ebp]
  00025	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Motion$[ebp+8], 0
  0002c	50		 push	 eax
  0002d	ff 75 0c	 push	 DWORD PTR _wMotionIndex$[ebp]
  00030	ff 75 08	 push	 DWORD PTR _wMotionModeIndex$[ebp]
  00033	e8 00 00 00 00	 call	 ?__OLD_RegisterMotion@CRaceData@@IAEXGGABUSMotion@1@@Z ; CRaceData::__OLD_RegisterMotion
  00038	5e		 pop	 esi

; 389  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?OLD_RegisterMotion@CRaceData@@QAEXGGPBDE@Z ENDP	; CRaceData::OLD_RegisterMotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?RegisterMotionMode@CRaceData@@QAEXG@Z
_TEXT	SEGMENT
__Loc$2 = -48						; size = 12
$T3 = -36						; size = 8
_this$ = -32						; size = 4
$T4 = -28						; size = 12
$T5 = -24						; size = 8
_this$1$ = -20						; size = 4
$T6 = -16						; size = 4
_pkNewData$7 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_wMotionModeIndex$ = 8					; size = 2
?RegisterMotionMode@CRaceData@@QAEXG@Z PROC		; CRaceData::RegisterMotionMode, COMDAT
; _this$ = ecx

; 326  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterMotionMode@CRaceData@@QAEXG@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 4d ec	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  0002b	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00030	39 05 10 00 00
	00		 cmp	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+16, eax
  00036	0f 85 93 00 00
	00		 jne	 $LN4@RegisterMo

; 65   : 			T* pkNewData = new T;

  0003c	6a 10		 push	 16			; 00000010H
  0003e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00043	8b d8		 mov	 ebx, eax
  00045	83 c4 04	 add	 esp, 4
  00048	89 5d f0	 mov	 DWORD PTR $T6[ebp], ebx
  0004b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00052	85 db		 test	 ebx, ebx
  00054	74 35		 je	 SHORT $LN6@RegisterMo
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 61   : 		SMotionModeData() {}

  00056	8d 73 08	 lea	 esi, DWORD PTR [ebx+8]
  00059	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], OFFSET ??_7SMotionModeData@CRaceData@@6B@
  0005f	89 75 e0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00062	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00064	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0006a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00071	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00076	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00079	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0007b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0007e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00081	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00087	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00089	eb 02		 jmp	 SHORT $LN7@RegisterMo
$LN6@RegisterMo:
  0008b	33 db		 xor	 ebx, ebx
$LN7@RegisterMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0008d	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00092	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00099	89 5d f0	 mov	 DWORD PTR _pkNewData$7[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0009c	3b 05 0c 00 00
	00		 cmp	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+12
  000a2	74 11		 je	 SHORT $LN14@RegisterMo

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000a4	89 18		 mov	 DWORD PTR [eax], ebx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  000a6	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  000ad	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+32

; 68   : 			return pkNewData;

  000b3	eb 25		 jmp	 SHORT $LN3@RegisterMo
$LN14@RegisterMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000b5	8d 4d f0	 lea	 ecx, DWORD PTR _pkNewData$7[ebp]
  000b8	51		 push	 ecx
  000b9	50		 push	 eax
  000ba	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+4
  000bf	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSMotionModeData@CRaceData@@@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEPAPAUSMotionModeData@CRaceData@@QAPAU23@ABQAU23@@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Emplace_reallocate<CRaceData::SMotionModeData * const &>
  000c4	8b 5d f0	 mov	 ebx, DWORD PTR _pkNewData$7[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  000c7	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+32

; 68   : 			return pkNewData;

  000cd	eb 0b		 jmp	 SHORT $LN3@RegisterMo
$LN4@RegisterMo:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  000cf	8b 58 fc	 mov	 ebx, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2007 :         return _My_data._Mylast[-1];

  000d2	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1776 :         --_Mylast;

  000d5	a3 14 00 00 00	 mov	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+20, eax
$LN3@RegisterMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  000da	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 329  : 	pMotionModeData->MotionVectorMap.clear();

  000dd	8d 7b 08	 lea	 edi, DWORD PTR [ebx+8]
  000e0	66 8b 45 08	 mov	 ax, WORD PTR _wMotionModeIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000e4	8b cf		 mov	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 328  : 	pMotionModeData->wMotionModeIndex = wMotionModeIndex;

  000e6	66 89 43 04	 mov	 WORD PTR [ebx+4], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000ea	ff 76 04	 push	 DWORD PTR [esi+4]
  000ed	57		 push	 edi
  000ee	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  000f3	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  000f6	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]

; 1359 :         _Head->_Left    = _Head;

  000f9	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  000fb	89 76 08	 mov	 DWORD PTR [esi+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000fe	66 8b 75 08	 mov	 si, WORD PTR _wMotionModeIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1361 :         _Scary->_Mysize = 0;

  00102	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 330  : 	m_pMotionModeDataMap.insert(TMotionModeDataMap::value_type(wMotionModeIndex, pMotionModeData));

  00109	8b 7d ec	 mov	 edi, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0010c	50		 push	 eax
  0010d	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00110	66 89 75 dc	 mov	 WORD PTR $T3[ebp], si
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 330  : 	m_pMotionModeDataMap.insert(TMotionModeDataMap::value_type(wMotionModeIndex, pMotionModeData));

  00114	81 c7 a0 00 00
	00		 add	 edi, 160		; 000000a0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0011a	89 5d e0	 mov	 DWORD PTR $T3[ebp+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0011d	50		 push	 eax
  0011e	8b cf		 mov	 ecx, edi
  00120	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::_Find_lower_bound<unsigned short>
  00125	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00129	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0012c	66 0f d6 45 d0	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00131	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00135	75 06		 jne	 SHORT $LN153@RegisterMo
  00137	66 3b 70 10	 cmp	 si, WORD PTR [eax+16]
  0013b	73 4b		 jae	 SHORT $LN141@RegisterMo
$LN153@RegisterMo:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0013d	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  00144	74 56		 je	 SHORT $LN157@RegisterMo

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  00146	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00148	89 7d e8	 mov	 DWORD PTR $T5[ebp], edi

; 77   :         return ::operator new(_Bytes);

  0014b	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0014d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00154	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0015b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00160	8b 4d dc	 mov	 ecx, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00163	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00166	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00169	8b cf		 mov	 ecx, edi
  0016b	50		 push	 eax
  0016c	ff 75 d4	 push	 DWORD PTR __Loc$2[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  0016f	89 58 14	 mov	 DWORD PTR [eax+20], ebx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00172	ff 75 d0	 push	 DWORD PTR __Loc$2[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00175	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00177	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0017a	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  0017d	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00183	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Insert_node
$LN141@RegisterMo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 331  : }

  00188	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00192	59		 pop	 ecx
  00193	5f		 pop	 edi
  00194	5e		 pop	 esi
  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 04 00	 ret	 4
$LN157@RegisterMo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  0019c	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN155@RegisterMo:
  001a1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterMotionMode@CRaceData@@QAEXG@Z$0:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T6[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?RegisterMotionMode@CRaceData@@QAEXG@Z$5:
  0000f	8d 4d e8	 lea	 ecx, DWORD PTR $T5[ebp]
  00012	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
__ehhandler$?RegisterMotionMode@CRaceData@@QAEXG@Z:
  0001c	90		 npad	 1
  0001d	90		 npad	 1
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterMotionMode@CRaceData@@QAEXG@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterMotionMode@CRaceData@@QAEXG@Z ENDP		; CRaceData::RegisterMotionMode
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z
_TEXT	SEGMENT
__Loc$2 = -72						; size = 12
$T3 = -60						; size = 12
$T4 = -56						; size = 8
__Scary$1$ = -48					; size = 4
$T5 = -44						; size = 28
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_dwPartIndex$ = 8					; size = 4
_c_szBoneName$ = 12					; size = 4
?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z PROC	; CRaceData::RegisterAttachingBoneName, COMDAT
; _this$ = ecx

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 55 0c	 mov	 edx, DWORD PTR _c_szBoneName$[ebp]

; 322  : 	m_AttachingBoneNameMap.insert(TAttachingBoneNameMap::value_type(dwPartIndex, c_szBoneName));

  0002d	8d b9 a8 00 00
	00		 lea	 edi, DWORD PTR [ecx+168]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00033	8b 45 08	 mov	 eax, DWORD PTR _dwPartIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00036	8b ca		 mov	 ecx, edx
  00038	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 322  : 	m_AttachingBoneNameMap.insert(TAttachingBoneNameMap::value_type(dwPartIndex, c_szBoneName));

  0003b	89 7d d0	 mov	 DWORD PTR __Scary$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0003e	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00041	0f 11 45 d8	 movups	 XMMWORD PTR $T5[ebp+4], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00045	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+20], 0

; 415  :             return __builtin_strlen(_First);

  0004c	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0004f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+24], 0
$LL171@RegisterAt:

; 415  :             return __builtin_strlen(_First);

  00056	8a 01		 mov	 al, BYTE PTR [ecx]
  00058	41		 inc	 ecx
  00059	84 c0		 test	 al, al
  0005b	75 f9		 jne	 SHORT $LL171@RegisterAt
  0005d	2b ce		 sub	 ecx, esi

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005f	51		 push	 ecx
  00060	52		 push	 edx
  00061	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp+4]
  00064	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00069	8d 45 d4	 lea	 eax, DWORD PTR $T5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 322  : 	m_AttachingBoneNameMap.insert(TAttachingBoneNameMap::value_type(dwPartIndex, c_szBoneName));

  0006c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00073	50		 push	 eax
  00074	8d 45 c4	 lea	 eax, DWORD PTR $T3[ebp]
  00077	8b cf		 mov	 ecx, edi
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>
  0007f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00082	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00086	66 0f d6 45 b8	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0008b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0008f	75 0d		 jne	 SHORT $LN170@RegisterAt
  00091	8b 45 d4	 mov	 eax, DWORD PTR $T5[ebp]
  00094	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00097	72 05		 jb	 SHORT $LN170@RegisterAt
  00099	8b 7d ec	 mov	 edi, DWORD PTR $T5[ebp+24]
  0009c	eb 73		 jmp	 SHORT $LN127@RegisterAt
$LN170@RegisterAt:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0009e	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  000a5	0f 84 b2 00 00
	00		 je	 $LN176@RegisterAt

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000ab	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000ad	89 7d c8	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  000b0	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000b2	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000b6	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  000bd	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000c2	0f 10 45 d8	 movups	 xmm0, XMMWORD PTR $T5[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  000c6	8b 4d d4	 mov	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000c9	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000cc	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000d1	c6 45 d8 00	 mov	 BYTE PTR $T5[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  000d5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000d8	8b 4d d0	 mov	 ecx, DWORD PTR __Scary$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2349 :     size_type _Mysize = 0; // current length of string

  000db	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  000e2	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000e9	0f 11 40 14	 movups	 XMMWORD PTR [eax+20], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ed	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000ee	f3 0f 7e 45 e8	 movq	 xmm0, QWORD PTR $T5[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000f3	ff 75 bc	 push	 DWORD PTR __Loc$2[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000f6	66 0f d6 40 24	 movq	 QWORD PTR [eax+36], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000fb	ff 75 b8	 push	 DWORD PTR __Loc$2[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000fe	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00100	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00103	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00106	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0010c	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
$LN127@RegisterAt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00111	83 ff 10	 cmp	 edi, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00114	72 2a		 jb	 SHORT $LN153@RegisterAt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00116	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00119	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0011c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0011e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00124	72 10		 jb	 SHORT $LN163@RegisterAt

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00126	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00129	83 c1 23	 add	 ecx, 35			; 00000023H
  0012c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00131	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00134	77 2c		 ja	 SHORT $LN177@RegisterAt
$LN163@RegisterAt:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00136	51		 push	 ecx
  00137	52		 push	 edx
  00138	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013d	83 c4 08	 add	 esp, 8
$LN153@RegisterAt:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 323  : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5f		 pop	 edi
  0014c	5e		 pop	 esi
  0014d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00150	33 cd		 xor	 ecx, ebp
  00152	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c2 08 00	 ret	 8
$LN176@RegisterAt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  0015d	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN177@RegisterAt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00162	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN174@RegisterAt:
  00167	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
__unwindfunclet$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z$6:
  00008	8d 4d c8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterAttachingBoneName@CRaceData@@QAEXKPBD@Z ENDP	; CRaceData::RegisterAttachingBoneName
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?SetRace@CRaceData@@QAEXK@Z
_TEXT	SEGMENT
_dwRaceIndex$ = 8					; size = 4
?SetRace@CRaceData@@QAEXK@Z PROC			; CRaceData::SetRace, COMDAT
; _this$ = ecx

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 317  : 	m_dwRaceIndex = dwRaceIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwRaceIndex$[ebp]
  00006	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 318  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetRace@CRaceData@@QAEXK@Z ENDP			; CRaceData::SetRace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z
_TEXT	SEGMENT
_wMotionMode$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
_c_szFileName$ = 16					; size = 4
_byPercentage$ = 20					; size = 1
?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z PROC ; CRaceData::RegisterMotionData, COMDAT
; _this$ = ecx

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b d9		 mov	 ebx, ecx

; 355  : 	CRaceMotionData * pRaceMotionData = CRaceMotionData::New();

  00008	e8 00 00 00 00	 call	 ?New@CRaceMotionData@@SAPAV1@XZ ; CRaceMotionData::New

; 356  : 	if (!pRaceMotionData->LoadMotionData(c_szFileName))

  0000d	8b 75 10	 mov	 esi, DWORD PTR _c_szFileName$[ebp]
  00010	8b f8		 mov	 edi, eax
  00012	56		 push	 esi
  00013	8b cf		 mov	 ecx, edi
  00015	e8 00 00 00 00	 call	 ?LoadMotionData@CRaceMotionData@@QAE_NPBD@Z ; CRaceMotionData::LoadMotionData
  0001a	84 c0		 test	 al, al
  0001c	75 1d		 jne	 SHORT $LN2@RegisterMo

; 357  : 	{
; 358  : 		TraceError("CRaceData::RegisterMotionData - LoadMotionData(c_szFileName=%s) ERROR", c_szFileName);

  0001e	56		 push	 esi
  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@DMPCLHEF@CRaceData?3?3RegisterMotionData?5?9@
  00024	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError

; 359  : 		CRaceMotionData::Delete(pRaceMotionData);

  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 ?Delete@CRaceMotionData@@SAXPAV1@@Z ; CRaceMotionData::Delete
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 360  : 		pRaceMotionData = NULL;
; 361  : 		return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	5f		 pop	 edi

; 370  : 
; 371  : 	//TMotion	Motion;
; 372  : 	//Motion.byPercentage	= byPercentage;
; 373  : 	//Motion.pMotion = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(pRaceMotionData->GetMotionFileName());
; 374  : 	//Motion.pMotionData = pRaceMotionData;
; 375  : 	//__OLD_RegisterMotion(wMotionMode, wMotionIndex, Motion);
; 376  : 	//return true;
; 377  : }

  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 10 00	 ret	 16			; 00000010H
$LN2@RegisterMo:

; 362  : 	}
; 363  : 
; 364  : 	pRaceMotionData->SetName(wMotionIndex);

  0003b	8b 75 0c	 mov	 esi, DWORD PTR _wMotionIndex$[ebp]
  0003e	8b cf		 mov	 ecx, edi
  00040	0f b7 c6	 movzx	 eax, si
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?SetName@CRaceMotionData@@QAEXI@Z ; CRaceMotionData::SetName

; 365  : 
; 366  : 	/////
; 367  : 
; 368  : 
; 369  : 	return NEW_RegisterMotion(pRaceMotionData, wMotionMode, wMotionIndex, pRaceMotionData->GetMotionFileName(), byPercentage);

  00049	ff 75 14	 push	 DWORD PTR _byPercentage$[ebp]
  0004c	8b cf		 mov	 ecx, edi
  0004e	e8 00 00 00 00	 call	 ?GetMotionFileName@CRaceMotionData@@QBEPBDXZ ; CRaceMotionData::GetMotionFileName
  00053	50		 push	 eax
  00054	56		 push	 esi
  00055	ff 75 08	 push	 DWORD PTR _wMotionMode$[ebp]
  00058	8b cb		 mov	 ecx, ebx
  0005a	57		 push	 edi
  0005b	e8 00 00 00 00	 call	 ?NEW_RegisterMotion@CRaceData@@QAEPAVCGraphicThing@@PAVCRaceMotionData@@GGPBDE@Z ; CRaceData::NEW_RegisterMotion
  00060	5f		 pop	 edi

; 370  : 
; 371  : 	//TMotion	Motion;
; 372  : 	//Motion.byPercentage	= byPercentage;
; 373  : 	//Motion.pMotion = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(pRaceMotionData->GetMotionFileName());
; 374  : 	//Motion.pMotionData = pRaceMotionData;
; 375  : 	//__OLD_RegisterMotion(wMotionMode, wMotionIndex, Motion);
; 376  : 	//return true;
; 377  : }

  00061	5e		 pop	 esi
  00062	5b		 pop	 ebx
  00063	5d		 pop	 ebp
  00064	c2 10 00	 ret	 16			; 00000010H
?RegisterMotionData@CRaceData@@QAEPAVCGraphicThing@@GGPBDE@Z ENDP ; CRaceData::RegisterMotionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetTreeFileName@CRaceData@@QAEPBDXZ
_TEXT	SEGMENT
?GetTreeFileName@CRaceData@@QAEPBDXZ PROC		; CRaceData::GetTreeFileName, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	83 79 4c 10	 cmp	 DWORD PTR [ecx+76], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 38	 lea	 eax, DWORD PTR [ecx+56]

; 2293 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetTreeFil
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 584  : 	return m_strTreeFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetTreeFil:

; 585  : }

  0000b	c3		 ret	 0
?GetTreeFileName@CRaceData@@QAEPBDXZ ENDP		; CRaceData::GetTreeFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?IsTree@CRaceData@@QAEHXZ
_TEXT	SEGMENT
?IsTree@CRaceData@@QAEHXZ PROC				; CRaceData::IsTree, COMDAT
; _this$ = ecx

; 579  : 	return !m_strTreeFileName.empty();

  00000	33 c0		 xor	 eax, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4376 :         return _Mypair._Myval2._Mysize == 0;

  00002	39 41 48	 cmp	 DWORD PTR [ecx+72], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 579  : 	return !m_strTreeFileName.empty();

  00005	0f 95 c0	 setne	 al

; 580  : }

  00008	c3		 ret	 0
?IsTree@CRaceData@@QAEHXZ ENDP				; CRaceData::IsTree
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetBodyCollisionDataPointer@CRaceData@@QAEHPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_c_ppAttachingData$ = 8					; size = 4
?GetBodyCollisionDataPointer@CRaceData@@QAEHPAPBUSAttachingData@NRaceData@@@Z PROC ; CRaceData::GetBodyCollisionDataPointer, COMDAT
; _this$ = ecx

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b b1 d0 00 00
	00		 mov	 esi, DWORD PTR [ecx+208]
  0000a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000f	8b 89 d4 00 00
	00		 mov	 ecx, DWORD PTR [ecx+212]
  00015	2b ce		 sub	 ecx, esi
  00017	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 299  : {

  00019	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001a	c1 fa 03	 sar	 edx, 3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 300  : 	for (DWORD i = 0; i < m_AttachingDataVector.size(); ++i)

  0001d	33 ff		 xor	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001f	8b ca		 mov	 ecx, edx
  00021	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00024	03 ca		 add	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 300  : 	for (DWORD i = 0; i < m_AttachingDataVector.size(); ++i)

  00026	74 16		 je	 SHORT $LN17@GetBodyCol
$LL4@GetBodyCol:

; 301  : 	{
; 302  : 		const NRaceData::TAttachingData * pAttachingData = &m_AttachingDataVector[i];
; 303  : 
; 304  : 		if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA == pAttachingData->dwType)

  00028	83 3e 01	 cmp	 DWORD PTR [esi], 1
  0002b	75 09		 jne	 SHORT $LN2@GetBodyCol

; 305  : 			if (NRaceData::COLLISION_TYPE_BODY == pAttachingData->pCollisionData->iCollisionType)

  0002d	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00030	83 78 04 01	 cmp	 DWORD PTR [eax+4], 1
  00034	74 10		 je	 SHORT $LN13@GetBodyCol
$LN2@GetBodyCol:

; 300  : 	for (DWORD i = 0; i < m_AttachingDataVector.size(); ++i)

  00036	47		 inc	 edi
  00037	83 c6 30	 add	 esi, 48			; 00000030H
  0003a	3b f9		 cmp	 edi, ecx
  0003c	72 ea		 jb	 SHORT $LL4@GetBodyCol
$LN17@GetBodyCol:
  0003e	5f		 pop	 edi

; 309  : 			}
; 310  : 	}
; 311  : 
; 312  : 	return FALSE;

  0003f	33 c0		 xor	 eax, eax

; 313  : }

  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
$LN13@GetBodyCol:

; 306  : 			{
; 307  : 				*c_ppAttachingData = pAttachingData;

  00046	8b 45 08	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
  00049	5f		 pop	 edi
  0004a	89 30		 mov	 DWORD PTR [eax], esi

; 308  : 				return true;

  0004c	b8 01 00 00 00	 mov	 eax, 1

; 313  : }

  00051	5e		 pop	 esi
  00052	5d		 pop	 ebp
  00053	c2 04 00	 ret	 4
?GetBodyCollisionDataPointer@CRaceData@@QAEHPAPBUSAttachingData@NRaceData@@@Z ENDP ; CRaceData::GetBodyCollisionDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetCollisionDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppAttachingData$ = 12				; size = 4
?GetCollisionDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z PROC ; CRaceData::GetCollisionDataPointer, COMDAT
; _this$ = ecx

; 282  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 283  : 	if (dwIndex >= GetAttachingDataCount())

  00006	e8 00 00 00 00	 call	 ?GetAttachingDataCount@CRaceData@@QAEKXZ ; CRaceData::GetAttachingDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	73 22		 jae	 SHORT $LN9@GetCollisi

; 288  : 	if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA != m_AttachingDataVector[dwIndex].dwType)

  00012	8b 8e d0 00 00
	00		 mov	 ecx, DWORD PTR [esi+208]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00018	8d 14 52	 lea	 edx, DWORD PTR [edx+edx*2]
  0001b	c1 e2 04	 shl	 edx, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 288  : 	if (NRaceData::ATTACHING_DATA_TYPE_COLLISION_DATA != m_AttachingDataVector[dwIndex].dwType)

  0001e	03 ca		 add	 ecx, edx
  00020	83 39 01	 cmp	 DWORD PTR [ecx], 1
  00023	75 0f		 jne	 SHORT $LN9@GetCollisi

; 291  : 	}
; 292  : 
; 293  : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00025	8b 45 0c	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
  00028	5e		 pop	 esi
  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 294  : 
; 295  : 	return TRUE;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 296  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN9@GetCollisi:

; 289  : 	{
; 290  : 		return FALSE;

  00034	33 c0		 xor	 eax, eax
  00036	5e		 pop	 esi

; 296  : }

  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
?GetCollisionDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ENDP ; CRaceData::GetCollisionDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetAttachingDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppAttachingData$ = 12				; size = 4
?GetAttachingDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z PROC ; CRaceData::GetAttachingDataPointer, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 271  : 	if (dwIndex >= GetAttachingDataCount())

  00006	e8 00 00 00 00	 call	 ?GetAttachingDataCount@CRaceData@@QAEKXZ ; CRaceData::GetAttachingDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	72 07		 jb	 SHORT $LN2@GetAttachi

; 272  : 	{
; 273  : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 279  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@GetAttachi:

; 276  : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_ppAttachingData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0001c	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	03 8e d0 00 00
	00		 add	 ecx, DWORD PTR [esi+208]
  00028	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 276  : 	*c_ppAttachingData = &m_AttachingDataVector[dwIndex];

  00029	89 08		 mov	 DWORD PTR [eax], ecx

; 277  : 
; 278  : 	return TRUE;

  0002b	b8 01 00 00 00	 mov	 eax, 1

; 279  : }

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?GetAttachingDataPointer@CRaceData@@QAEHKPAPBUSAttachingData@NRaceData@@@Z ENDP ; CRaceData::GetAttachingDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetAttachingDataCount@CRaceData@@QAEKXZ
_TEXT	SEGMENT
?GetAttachingDataCount@CRaceData@@QAEKXZ PROC		; CRaceData::GetAttachingDataCount, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 91 d4 00 00
	00		 mov	 edx, DWORD PTR [ecx+212]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 91 d0 00 00
	00		 sub	 edx, DWORD PTR [ecx+208]
  00011	f7 ea		 imul	 edx
  00013	c1 fa 03	 sar	 edx, 3
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 267  : }

  0001d	c3		 ret	 0
?GetAttachingDataCount@CRaceData@@QAEKXZ ENDP		; CRaceData::GetAttachingDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z
_TEXT	SEGMENT
_dwMotionKey$ = 8					; size = 4
_c_ppMotionData$ = 12					; size = 4
?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z PROC ; CRaceData::GetMotionDataPointer, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  : 	return GetMotionDataPointer(GET_MOTION_MODE(dwMotionKey), GET_MOTION_INDEX(dwMotionKey), GET_MOTION_SUB_INDEX(dwMotionKey), c_ppMotionData);

  00003	ff 75 0c	 push	 DWORD PTR _c_ppMotionData$[ebp]
  00006	8b 55 08	 mov	 edx, DWORD PTR _dwMotionKey$[ebp]
  00009	0f b6 c2	 movzx	 eax, dl
  0000c	50		 push	 eax
  0000d	8b c2		 mov	 eax, edx
  0000f	c1 ea 18	 shr	 edx, 24			; 00000018H
  00012	c1 e8 08	 shr	 eax, 8
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?GetMotionDataPointer@CRaceData@@QAEHGGGPAPAVCRaceMotionData@@@Z ; CRaceData::GetMotionDataPointer

; 249  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z ENDP ; CRaceData::GetMotionDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionDataPointer@CRaceData@@QAEHGGGPAPAVCRaceMotionData@@@Z
_TEXT	SEGMENT
_c_pMotionVector$ = -4					; size = 4
_wMotionMode$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
_wMotionSubIndex$ = 16					; size = 2
_c_ppMotionData$ = 20					; size = 4
?GetMotionDataPointer@CRaceData@@QAEHGGGPAPAVCRaceMotionData@@@Z PROC ; CRaceData::GetMotionDataPointer, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 223  : 	const TMotionVector * c_pMotionVector;
; 224  : 	if (!GetMotionVectorPointer(wMotionMode, wMotionIndex, &c_pMotionVector))

  00006	8d 45 fc	 lea	 eax, DWORD PTR _c_pMotionVector$[ebp]
  00009	50		 push	 eax
  0000a	ff 75 0c	 push	 DWORD PTR _wMotionIndex$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR _wMotionMode$[ebp]
  00010	e8 00 00 00 00	 call	 ?GetMotionVectorPointer@CRaceData@@QAEHGGPAPBV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z ; CRaceData::GetMotionVectorPointer
  00015	85 c0		 test	 eax, eax
  00017	74 3f		 je	 SHORT $LN12@GetMotionD
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	8b 45 fc	 mov	 eax, DWORD PTR _c_pMotionVector$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 229  : 	if (wMotionSubIndex >= c_pMotionVector->size())

  0001c	0f b7 75 10	 movzx	 esi, WORD PTR _wMotionSubIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00020	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00023	8b 38		 mov	 edi, DWORD PTR [eax]
  00025	2b cf		 sub	 ecx, edi
  00027	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0002c	f7 e9		 imul	 ecx
  0002e	d1 fa		 sar	 edx, 1
  00030	8b c2		 mov	 eax, edx
  00032	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00035	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 229  : 	if (wMotionSubIndex >= c_pMotionVector->size())

  00037	3b f0		 cmp	 esi, eax
  00039	73 1d		 jae	 SHORT $LN12@GetMotionD
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1980 :         return _My_data._Myfirst[_Pos];

  0003b	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 236  : 	if (!c_rMotion.pMotionData)

  0003e	8b 4c 87 08	 mov	 ecx, DWORD PTR [edi+eax*4+8]
  00042	85 c9		 test	 ecx, ecx
  00044	74 12		 je	 SHORT $LN12@GetMotionD

; 239  : 	}
; 240  : 
; 241  : 	*c_ppMotionData = c_rMotion.pMotionData;

  00046	8b 45 14	 mov	 eax, DWORD PTR _c_ppMotionData$[ebp]
  00049	5f		 pop	 edi

; 242  : 
; 243  : 	return TRUE;
; 244  : }

  0004a	5e		 pop	 esi
  0004b	89 08		 mov	 DWORD PTR [eax], ecx
  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 10 00	 ret	 16			; 00000010H
$LN12@GetMotionD:
  00058	5f		 pop	 edi

; 237  : 	{
; 238  : 		return FALSE;

  00059	33 c0		 xor	 eax, eax

; 242  : 
; 243  : 	return TRUE;
; 244  : }

  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 10 00	 ret	 16			; 00000010H
?GetMotionDataPointer@CRaceData@@QAEHGGGPAPAVCRaceMotionData@@@Z ENDP ; CRaceData::GetMotionDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionVectorPointer@CRaceData@@QAEHGGPAPBV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z
_TEXT	SEGMENT
_pMotionVector$ = -4					; size = 4
_wMotionMode$ = 8					; size = 2
_wMotionIndex$ = 12					; size = 2
_c_ppMotionVector$ = 16					; size = 4
?GetMotionVectorPointer@CRaceData@@QAEHGGPAPBV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z PROC ; CRaceData::GetMotionVectorPointer, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 253  : 	TMotionVector * pMotionVector;
; 254  : 	if (!GetMotionVectorPointer(wMotionMode, wMotionIndex, &pMotionVector))

  00004	8d 45 fc	 lea	 eax, DWORD PTR _pMotionVector$[ebp]
  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR _wMotionIndex$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR _wMotionMode$[ebp]
  0000e	e8 00 00 00 00	 call	 ?GetMotionVectorPointer@CRaceData@@IAEHGGPAPAV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z ; CRaceData::GetMotionVectorPointer
  00013	85 c0		 test	 eax, eax
  00015	75 06		 jne	 SHORT $LN2@GetMotionV

; 262  : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
$LN2@GetMotionV:

; 255  : 	{
; 256  : 		return FALSE;
; 257  : 	}
; 258  : 
; 259  : 	*c_ppMotionVector = pMotionVector;

  0001d	8b 4d 10	 mov	 ecx, DWORD PTR _c_ppMotionVector$[ebp]
  00020	8b 45 fc	 mov	 eax, DWORD PTR _pMotionVector$[ebp]
  00023	89 01		 mov	 DWORD PTR [ecx], eax

; 260  : 
; 261  : 	return TRUE;

  00025	b8 01 00 00 00	 mov	 eax, 1

; 262  : }

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?GetMotionVectorPointer@CRaceData@@QAEHGGPAPBV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@Z ENDP ; CRaceData::GetMotionVectorPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetModelDataPointer@CRaceData@@QAEHKPAPBUSModelData@1@@Z
_TEXT	SEGMENT
_dwModelIndex$ = 8					; size = 4
_c_ppModelData$ = 12					; size = 4
?GetModelDataPointer@CRaceData@@QAEHKPAPBUSModelData@1@@Z PROC ; CRaceData::GetModelDataPointer, COMDAT
; _this$ = ecx

; 190  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1613 :         while (!_Trynode->_Isnil) {

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwModelIndex$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 190  : {

  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1610 :         const auto _Scary = _Get_scary();

  00007	8b b1 98 00 00
	00		 mov	 esi, DWORD PTR [ecx+152]

; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  0000d	8b ce		 mov	 ecx, esi
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 1613 :         while (!_Trynode->_Isnil) {

  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 14		 jne	 SHORT $LN11@GetModelDa
$LL10@GetModelDa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00018	39 50 10	 cmp	 DWORD PTR [eax+16], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  0001b	73 05		 jae	 SHORT $LN12@GetModelDa

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 1618 :             } else {

  00020	eb 04		 jmp	 SHORT $LN13@GetModelDa
$LN12@GetModelDa:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00022	8b c8		 mov	 ecx, eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN13@GetModelDa:

; 1613 :         while (!_Trynode->_Isnil) {

  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	74 ec		 je	 SHORT $LL10@GetModelDa
$LN11@GetModelDa:

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00030	75 1b		 jne	 SHORT $LN48@GetModelDa
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00032	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00035	72 16		 jb	 SHORT $LN48@GetModelDa

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00037	3b f1		 cmp	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 192  : 	if (m_ModelDataMap.end() == itor)

  00039	74 12		 je	 SHORT $LN48@GetModelDa

; 195  : 	}
; 196  : 
; 197  : 	*c_ppModelData = &itor->second;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _c_ppModelData$[ebp]
  0003e	83 c1 14	 add	 ecx, 20			; 00000014H
  00041	5e		 pop	 esi
  00042	89 08		 mov	 DWORD PTR [eax], ecx

; 198  : 
; 199  : 	return true;

  00044	b8 01 00 00 00	 mov	 eax, 1

; 200  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN48@GetModelDa:

; 193  : 	{
; 194  : 		return false;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 200  : }

  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
?GetModelDataPointer@CRaceData@@QAEHKPAPBUSModelData@1@@Z ENDP ; CRaceData::GetModelDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_wMotionMode$ = 8					; size = 2
_ppMotionModeData$ = 12					; size = 4
?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z PROC ; CRaceData::GetMotionModeDataPointer, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _wMotionMode$[ebp]
  0000a	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 178  : 	TMotionModeDataIterator itor = m_pMotionModeDataMap.find(wMotionMode);

  0000b	8d b1 a0 00 00
	00		 lea	 esi, DWORD PTR [ecx+160]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00011	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::_Find_lower_bound<unsigned short>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001f	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00023	75 22		 jne	 SHORT $LN37@GetMotionM
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	66 8b 45 08	 mov	 ax, WORD PTR _wMotionMode$[ebp]
  00029	66 3b 41 10	 cmp	 ax, WORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002d	72 18		 jb	 SHORT $LN37@GetMotionM

; 233  :         return this->_Ptr == _Right._Ptr;

  0002f	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 179  : 	if (itor == m_pMotionModeDataMap.end())

  00031	74 14		 je	 SHORT $LN37@GetMotionM

; 182  : 	}
; 183  : 
; 184  : 	*ppMotionModeData = itor->second;

  00033	8b 45 0c	 mov	 eax, DWORD PTR _ppMotionModeData$[ebp]
  00036	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00039	5e		 pop	 esi
  0003a	89 08		 mov	 DWORD PTR [eax], ecx

; 185  : 
; 186  : 	return TRUE;

  0003c	b8 01 00 00 00	 mov	 eax, 1

; 187  : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 08 00	 ret	 8
$LN37@GetMotionM:

; 180  : 	{
; 181  : 		return FALSE;

  00047	33 c0		 xor	 eax, eax
  00049	5e		 pop	 esi

; 187  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ENDP ; CRaceData::GetMotionModeDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionKey@CRaceData@@QAEHGGPAK@Z
_TEXT	SEGMENT
__Loc$1 = -20						; size = 12
__Loc$2 = -20						; size = 12
_this$1$ = -8						; size = 4
_pMotionModeData$ = -4					; size = 4
_wMotionModeIndex$ = 8					; size = 2
_pMotionModeGeneralData$3 = 8				; size = 4
_wMotionIndex$ = 12					; size = 2
_pMotionKey$ = 16					; size = 4
?GetMotionKey@CRaceData@@QAEHGGPAK@Z PROC		; CRaceData::GetMotionKey, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx

; 126  : 	TMotionModeData * pMotionModeData;
; 127  : 	if (!GetMotionModeDataPointer(wMotionModeIndex, &pMotionModeData))

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _wMotionModeIndex$[ebp]
  0000a	8b c1		 mov	 eax, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8d 4d fc	 lea	 ecx, DWORD PTR _pMotionModeData$[ebp]
  00011	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00014	51		 push	 ecx
  00015	53		 push	 ebx
  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
  0001d	85 c0		 test	 eax, eax
  0001f	0f 84 b0 00 00
	00		 je	 $LN71@GetMotionK
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1136 :         return iterator(_Scary->_Myhead, _Scary);

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _pMotionModeData$[ebp]

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 45 0c	 lea	 eax, DWORD PTR _wMotionIndex$[ebp]

; 1136 :         return iterator(_Scary->_Myhead, _Scary);

  0002b	83 c1 08	 add	 ecx, 8

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002e	50		 push	 eax
  0002f	8d 45 ec	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00032	50		 push	 eax

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00033	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003a	8b 45 f4	 mov	 eax, DWORD PTR __Loc$2[ebp+8]
  0003d	66 8b 7d 0c	 mov	 di, WORD PTR _wMotionIndex$[ebp]
  00041	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00045	75 0f		 jne	 SHORT $LN73@GetMotionK
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00047	66 3b 78 10	 cmp	 di, WORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0004b	72 09		 jb	 SHORT $LN73@GetMotionK

; 233  :         return this->_Ptr == _Right._Ptr;

  0004d	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 132  : 	if (pMotionModeData->MotionVectorMap.end() == pMotionModeData->MotionVectorMap.find(wMotionIndex))

  0004f	74 05		 je	 SHORT $LN73@GetMotionK

; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		*pMotionKey = MAKE_MOTION_KEY(wMotionModeIndex, wMotionIndex);

  00051	0f b6 cb	 movzx	 ecx, bl
  00054	eb 61		 jmp	 SHORT $LN79@GetMotionK
$LN73@GetMotionK:

; 133  : 	{
; 134  : 		WORD wGeneralMode = CRaceMotionData::MODE_GENERAL;
; 135  : 
; 136  : 		switch (wMotionModeIndex)

  00056	0f b7 c3	 movzx	 eax, bx
  00059	83 c0 f6	 add	 eax, -10		; fffffff6H
  0005c	83 f8 05	 cmp	 eax, 5
  0005f	77 15		 ja	 SHORT $LN13@GetMotionK
  00061	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN77@GetMotionK[eax]
  00068	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN78@GetMotionK[eax*4]
$LN7@GetMotionK:

; 137  : 		{
; 138  : 		case CRaceMotionData::MODE_HORSE_ONEHAND_SWORD:
; 139  : 		case CRaceMotionData::MODE_HORSE_TWOHAND_SWORD:
; 140  : 		case CRaceMotionData::MODE_HORSE_DUALHAND_SWORD:
; 141  : 		case CRaceMotionData::MODE_HORSE_FAN:
; 142  : 		case CRaceMotionData::MODE_HORSE_BELL:
; 143  : 		case CRaceMotionData::MODE_HORSE_BOW:
; 144  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 145  : 		case CRaceMotionData::MODE_HORSE_CLAW:
; 146  : #endif
; 147  : 			wGeneralMode = CRaceMotionData::MODE_HORSE;

  0006f	be 09 00 00 00	 mov	 esi, 9

; 148  : 			break;

  00074	eb 05		 jmp	 SHORT $LN2@GetMotionK
$LN13@GetMotionK:

; 149  : 
; 150  : 		default:
; 151  : 			wGeneralMode = CRaceMotionData::MODE_GENERAL;

  00076	be 01 00 00 00	 mov	 esi, 1
$LN2@GetMotionK:

; 152  : 			break;
; 153  : 		}
; 154  : 
; 155  : 		TMotionModeData * pMotionModeGeneralData;
; 156  : 		if (!GetMotionModeDataPointer(wGeneralMode, &pMotionModeGeneralData))

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0007e	8d 45 08	 lea	 eax, DWORD PTR _pMotionModeGeneralData$3[ebp]
  00081	50		 push	 eax
  00082	56		 push	 esi
  00083	e8 00 00 00 00	 call	 ?GetMotionModeDataPointer@CRaceData@@QAEHGPAPAUSMotionModeData@1@@Z ; CRaceData::GetMotionModeDataPointer
  00088	85 c0		 test	 eax, eax
  0008a	74 49		 je	 SHORT $LN71@GetMotionK
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1136 :         return iterator(_Scary->_Myhead, _Scary);

  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _pMotionModeGeneralData$3[ebp]

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0008f	8d 45 0c	 lea	 eax, DWORD PTR _wMotionIndex$[ebp]

; 1136 :         return iterator(_Scary->_Myhead, _Scary);

  00092	83 c1 08	 add	 ecx, 8

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00095	50		 push	 eax
  00096	8d 45 ec	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00099	50		 push	 eax

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0009a	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0009c	e8 00 00 00 00	 call	 ??$_Find_lower_bound@G@?$_Tree@V?$_Tmap_traits@GV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@U?$less@G@2@V?$allocator@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> >,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > >,0> >::_Find_lower_bound<unsigned short>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000a1	8b 45 f4	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  000a4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000a8	75 2b		 jne	 SHORT $LN71@GetMotionK
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  000aa	66 3b 78 10	 cmp	 di, WORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000ae	72 25		 jb	 SHORT $LN71@GetMotionK

; 233  :         return this->_Ptr == _Right._Ptr;

  000b0	3b d8		 cmp	 ebx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 161  : 		if (pMotionModeGeneralData->MotionVectorMap.end() == pMotionModeGeneralData->MotionVectorMap.find(wMotionIndex))

  000b2	74 21		 je	 SHORT $LN71@GetMotionK

; 162  : 		{
; 163  : 			return FALSE;
; 164  : 		}
; 165  : 
; 166  : 		*pMotionKey = MAKE_MOTION_KEY(wGeneralMode, wMotionIndex);

  000b4	0f b7 ce	 movzx	 ecx, si
$LN79@GetMotionK:

; 171  : 	}
; 172  : 
; 173  : 	return TRUE;

  000b7	0f b7 c7	 movzx	 eax, di
  000ba	c1 e1 10	 shl	 ecx, 16			; 00000010H
  000bd	0b c8		 or	 ecx, eax
  000bf	8b 45 10	 mov	 eax, DWORD PTR _pMotionKey$[ebp]
  000c2	5f		 pop	 edi
  000c3	c1 e1 08	 shl	 ecx, 8

; 174  : }

  000c6	5e		 pop	 esi
  000c7	89 08		 mov	 DWORD PTR [eax], ecx
  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	5b		 pop	 ebx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 0c 00	 ret	 12			; 0000000cH
$LN71@GetMotionK:
  000d5	5f		 pop	 edi
  000d6	5e		 pop	 esi
  000d7	33 c0		 xor	 eax, eax
  000d9	5b		 pop	 ebx
  000da	8b e5		 mov	 esp, ebp
  000dc	5d		 pop	 ebp
  000dd	c2 0c 00	 ret	 12			; 0000000cH
$LN78@GetMotionK:
  000e0	00 00 00 00	 DD	 $LN7@GetMotionK
$LN77@GetMotionK:
  000e4	00		 DB	 0
  000e5	00		 DB	 0
  000e6	00		 DB	 0
  000e7	00		 DB	 0
  000e8	00		 DB	 0
  000e9	00		 DB	 0
?GetMotionKey@CRaceData@@QAEHGGPAK@Z ENDP		; CRaceData::GetMotionKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?NextMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_itor$ = 8						; size = 4
?NextMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z PROC ; CRaceData::NextMotionModeIterator, COMDAT
; _this$ = ecx

; 118  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 119  : 	++itor;

  00005	8b 7d 08	 mov	 edi, DWORD PTR _itor$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b cf		 mov	 ecx, edi
  0000c	e8 00 00 00 00	 call	 ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > > >::operator++
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  00011	8b 8e a0 00 00
	00		 mov	 ecx, DWORD PTR [esi+160]

; 238  :         return !(*this == _Right);

  00017	33 c0		 xor	 eax, eax

; 233  :         return this->_Ptr == _Right._Ptr;

  00019	3b 0f		 cmp	 ecx, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 121  : 	return m_pMotionModeDataMap.end() != itor;

  0001b	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 238  :         return !(*this == _Right);

  0001c	0f 95 c0	 setne	 al
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 121  : 	return m_pMotionModeDataMap.end() != itor;

  0001f	5e		 pop	 esi

; 122  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?NextMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z ENDP ; CRaceData::NextMotionModeIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?CreateMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z
_TEXT	SEGMENT
_itor$ = 8						; size = 4
?CreateMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z PROC ; CRaceData::CreateMotionModeIterator, COMDAT
; _this$ = ecx

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1202 :         return _Get_scary()->_Mysize == 0;

  00003	83 b9 a4 00 00
	00 00		 cmp	 DWORD PTR [ecx+164], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 108  : 	if (m_pMotionModeDataMap.empty())

  0000a	75 06		 jne	 SHORT $LN2@CreateMoti

; 109  : 	{
; 110  : 		return FALSE;

  0000c	33 c0		 xor	 eax, eax

; 116  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN2@CreateMoti:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00012	8b 81 a0 00 00
	00		 mov	 eax, DWORD PTR [ecx+160]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 113  : 	itor = m_pMotionModeDataMap.begin();

  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 45 08	 mov	 eax, DWORD PTR _itor$[ebp]
  0001d	89 08		 mov	 DWORD PTR [eax], ecx

; 114  : 
; 115  : 	return TRUE;

  0001f	b8 01 00 00 00	 mov	 eax, 1

; 116  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?CreateMotionModeIterator@CRaceData@@QAEHAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@@std@@@Z ENDP ; CRaceData::CreateMotionModeIterator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetAttachingBoneName@CRaceData@@QAEHKPAPBD@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_dwPartIndex$ = 8					; size = 4
_c_pszBoneName$ = 12					; size = 4
?GetAttachingBoneName@CRaceData@@QAEHKPAPBD@Z PROC	; CRaceData::GetAttachingBoneName, COMDAT
; _this$ = ecx

; 563  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _dwPartIndex$[ebp]
  0000a	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 564  : 	TAttachingBoneNameMap::iterator itor = m_AttachingBoneNameMap.find(dwPartIndex);

  0000b	8d b1 a8 00 00
	00		 lea	 esi, DWORD PTR [ecx+168]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00011	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001c	8b 4d fc	 mov	 ecx, DWORD PTR __Loc$1[ebp+8]
  0001f	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00023	75 28		 jne	 SHORT $LN44@GetAttachi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	8b 45 08	 mov	 eax, DWORD PTR _dwPartIndex$[ebp]
  00028	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002b	72 20		 jb	 SHORT $LN44@GetAttachi

; 233  :         return this->_Ptr == _Right._Ptr;

  0002d	3b 0e		 cmp	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 565  : 	if (itor == m_AttachingBoneNameMap.end())

  0002f	74 1c		 je	 SHORT $LN44@GetAttachi

; 568  : 	}
; 569  : 
; 570  : 	const std::string & c_rstrBoneName = itor->second;

  00031	83 c1 14	 add	 ecx, 20			; 00000014H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00034	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00038	72 02		 jb	 SHORT $LN40@GetAttachi

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0003a	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN40@GetAttachi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 572  : 	*c_pszBoneName = c_rstrBoneName.c_str();

  0003c	8b 45 0c	 mov	 eax, DWORD PTR _c_pszBoneName$[ebp]
  0003f	5e		 pop	 esi
  00040	89 08		 mov	 DWORD PTR [eax], ecx

; 573  : 
; 574  : 	return TRUE;

  00042	b8 01 00 00 00	 mov	 eax, 1

; 575  : }

  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
$LN44@GetAttachi:

; 566  : 	{
; 567  : 		return FALSE;

  0004d	33 c0		 xor	 eax, eax
  0004f	5e		 pop	 esi

; 575  : }

  00050	8b e5		 mov	 esp, ebp
  00052	5d		 pop	 ebp
  00053	c2 08 00	 ret	 8
?GetAttachingBoneName@CRaceData@@QAEHKPAPBD@Z ENDP	; CRaceData::GetAttachingBoneName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetAttributeDataPtr@CRaceData@@QAEPAVCAttributeData@@XZ
_TEXT	SEGMENT
?GetAttributeDataPtr@CRaceData@@QAEPAVCAttributeData@@XZ PROC ; CRaceData::GetAttributeDataPtr, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4376 :         return _Mypair._Myval2._Mysize == 0;

  00000	83 79 60 00	 cmp	 DWORD PTR [ecx+96], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 548  : {

  00004	56		 push	 esi

; 549  : 	if (m_strAttributeFileName.empty())

  00005	74 30		 je	 SHORT $LN23@GetAttribu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00007	83 79 64 10	 cmp	 DWORD PTR [ecx+100], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  0000b	8d 71 50	 lea	 esi, DWORD PTR [ecx+80]

; 2292 :         const value_type* _Result = _Bx._Buf;

  0000e	8b c6		 mov	 eax, esi

; 2293 :         if (_Large_string_engaged()) {

  00010	72 02		 jb	 SHORT $LN22@GetAttribu

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
$LN22@GetAttribu:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 554  : 	if (!CResourceManager::Instance().IsFileExist(m_strAttributeFileName.c_str()))

  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@SA_NPBD@Z ; CResourceManager::IsFileExist
  0001a	83 c4 04	 add	 esp, 4
  0001d	84 c0		 test	 al, al
  0001f	74 16		 je	 SHORT $LN23@GetAttribu
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00021	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00025	72 02		 jb	 SHORT $LN17@GetAttribu

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00027	8b 36		 mov	 esi, DWORD PTR [esi]
$LN17@GetAttribu:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 559  : 	return (CAttributeData *)CResourceManager::Instance().GetResourcePointer(m_strAttributeFileName.c_str());

  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0002f	56		 push	 esi
  00030	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00035	5e		 pop	 esi

; 560  : }

  00036	c3		 ret	 0
$LN23@GetAttribu:

; 555  : 	{
; 556  : 		return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	5e		 pop	 esi

; 560  : }

  0003a	c3		 ret	 0
?GetAttributeDataPtr@CRaceData@@QAEPAVCAttributeData@@XZ ENDP ; CRaceData::GetAttributeDataPtr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
$T2 = -64						; size = 24
_strLODFileName$3 = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ PROC ; CRaceData::GetLODModelThing, COMDAT
; _this$ = ecx

; 534  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx

; 535  : 	if (!m_pLODModelThing)

  0002b	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0002f	0f 85 08 01 00
	00		 jne	 $LN87@GetLODMode

; 537  : 		std::string strLODFileName = CFileNameHelper::NoExtension(m_strBaseModelFileName) + "_lod_01.gr2";

  00035	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00038	50		 push	 eax
  00039	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ; CFileNameHelper::NoExtension
  00042	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00045	6a 0b		 push	 11			; 0000000bH
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DICOFBOH@_lod_01?4gr2@
  0004c	8b c8		 mov	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 537  : 		std::string strLODFileName = CFileNameHelper::NoExtension(m_strBaseModelFileName) + "_lod_01.gr2";

  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00055	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2349 :     size_type _Mysize = 0; // current length of string

  0005a	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _strLODFileName$3[ebp+16], 0
  00061	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00064	0f 11 45 d8	 movups	 XMMWORD PTR _strLODFileName$3[ebp], xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00068	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _strLODFileName$3[ebp+20], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0006f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00072	0f 11 45 d8	 movups	 XMMWORD PTR _strLODFileName$3[ebp], xmm0
  00076	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0007b	66 0f d6 45 e8	 movq	 QWORD PTR _strLODFileName$3[ebp+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  00080	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00087	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00091	8b 4d d4	 mov	 ecx, DWORD PTR $T2[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 537  : 		std::string strLODFileName = CFileNameHelper::NoExtension(m_strBaseModelFileName) + "_lod_01.gr2";

  00094	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00098	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0009b	72 2c		 jb	 SHORT $LN52@GetLODMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0009d	8b 55 c0	 mov	 edx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000a0	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a1	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a9	72 14		 jb	 SHORT $LN62@GetLODMode

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ab	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ae	83 c1 23	 add	 ecx, 35			; 00000023H
  000b1	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b3	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b6	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000b9	0f 87 9b 00 00
	00		 ja	 $LN112@GetLODMode
$LN62@GetLODMode:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000bf	51		 push	 ecx
  000c0	52		 push	 edx
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c6	83 c4 08	 add	 esp, 8
$LN52@GetLODMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000c9	83 7d ec 10	 cmp	 DWORD PTR _strLODFileName$3[ebp+20], 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  000cd	8d 45 d8	 lea	 eax, DWORD PTR _strLODFileName$3[ebp]

; 5019 :         _My_data._Mysize = 0;

  000d0	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 2293 :         if (_Large_string_engaged()) {

  000d7	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLODFileName$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 538  : 		if (CResourceManager::Instance().IsFileExist(strLODFileName.c_str()))

  000db	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  000dc	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000e3	c6 45 c0 00	 mov	 BYTE PTR $T2[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 538  : 		if (CResourceManager::Instance().IsFileExist(strLODFileName.c_str()))

  000e7	e8 00 00 00 00	 call	 ?IsFileExist@CResourceManager@@SA_NPBD@Z ; CResourceManager::IsFileExist
  000ec	83 c4 04	 add	 esp, 4
  000ef	84 c0		 test	 al, al
  000f1	74 1a		 je	 SHORT $LN3@GetLODMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000f3	83 7d ec 10	 cmp	 DWORD PTR _strLODFileName$3[ebp+20], 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  000f7	8d 45 d8	 lea	 eax, DWORD PTR _strLODFileName$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 540  : 			m_pLODModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(strLODFileName.c_str());

  000fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00100	0f 43 45 d8	 cmovae	 eax, DWORD PTR _strLODFileName$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 540  : 			m_pLODModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(strLODFileName.c_str());

  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  0010a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
$LN3@GetLODMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0010d	8b 4d ec	 mov	 ecx, DWORD PTR _strLODFileName$3[ebp+20]
  00110	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00113	72 28		 jb	 SHORT $LN87@GetLODMode
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00115	8b 55 d8	 mov	 edx, DWORD PTR _strLODFileName$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00118	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00119	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0011b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00121	72 10		 jb	 SHORT $LN97@GetLODMode

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00123	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00126	83 c1 23	 add	 ecx, 35			; 00000023H
  00129	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0012b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0012e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00131	77 2c		 ja	 SHORT $LN113@GetLODMode
$LN97@GetLODMode:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00133	51		 push	 ecx
  00134	52		 push	 edx
  00135	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0013a	83 c4 08	 add	 esp, 8
$LN87@GetLODMode:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 544  : 	return m_pLODModelThing;

  0013d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 545  : }

  00140	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00143	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014a	59		 pop	 ecx
  0014b	5e		 pop	 esi
  0014c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014f	33 cd		 xor	 ecx, ebp
  00151	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
$LN112@GetLODMode:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN113@GetLODMode:
  0015f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN110@GetLODMode:
  00164	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ$0:
  00000	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR _strLODFileName$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetLODModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ ENDP ; CRaceData::GetLODModelThing
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetBaseModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ
_TEXT	SEGMENT
?GetBaseModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ PROC ; CRaceData::GetBaseModelThing, COMDAT
; _this$ = ecx

; 524  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 525  : 	if (!m_pBaseModelThing)

  00003	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  00007	75 1a		 jne	 SHORT $LN11@GetBaseMod
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00009	83 7e 34 10	 cmp	 DWORD PTR [esi+52], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  0000d	8d 46 20	 lea	 eax, DWORD PTR [esi+32]

; 2293 :         if (_Large_string_engaged()) {

  00010	72 02		 jb	 SHORT $LN7@GetBaseMod

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00012	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@GetBaseMod:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 527  : 		m_pBaseModelThing = (CGraphicThing *)CResourceManager::Instance().GetResourcePointer(m_strBaseModelFileName.c_str());

  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00020	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN11@GetBaseMod:

; 528  : 	}
; 529  : 
; 530  : 	return m_pBaseModelThing;
; 531  : }

  00023	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00026	5e		 pop	 esi
  00027	c3		 ret	 0
?GetBaseModelThing@CRaceData@@QAEPAVCGraphicThing@@XZ ENDP ; CRaceData::GetBaseModelThing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetMotionListFileName@CRaceData@@QBEPBDXZ
_TEXT	SEGMENT
?GetMotionListFileName@CRaceData@@QBEPBDXZ PROC		; CRaceData::GetMotionListFileName, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	83 79 7c 10	 cmp	 DWORD PTR [ecx+124], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 68	 lea	 eax, DWORD PTR [ecx+104]

; 2293 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetMotionL
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 520  : 	return m_strMotionListFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetMotionL:

; 521  : }

  0000b	c3		 ret	 0
?GetMotionListFileName@CRaceData@@QBEPBDXZ ENDP		; CRaceData::GetMotionListFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetAttributeFileName@CRaceData@@QBEPBDXZ
_TEXT	SEGMENT
?GetAttributeFileName@CRaceData@@QBEPBDXZ PROC		; CRaceData::GetAttributeFileName, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	83 79 64 10	 cmp	 DWORD PTR [ecx+100], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 50	 lea	 eax, DWORD PTR [ecx+80]

; 2293 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetAttribu
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 515  : 	return m_strAttributeFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetAttribu:

; 516  : }

  0000b	c3		 ret	 0
?GetAttributeFileName@CRaceData@@QBEPBDXZ ENDP		; CRaceData::GetAttributeFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?GetBaseModelFileName@CRaceData@@QBEPBDXZ
_TEXT	SEGMENT
?GetBaseModelFileName@CRaceData@@QBEPBDXZ PROC		; CRaceData::GetBaseModelFileName, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	83 79 34 10	 cmp	 DWORD PTR [ecx+52], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  00004	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]

; 2293 :         if (_Large_string_engaged()) {

  00007	72 02		 jb	 SHORT $LN6@GetBaseMod
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 510  : 	return m_strBaseModelFileName.c_str();

  00009	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@GetBaseMod:

; 511  : }

  0000b	c3		 ret	 0
?GetBaseModelFileName@CRaceData@@QBEPBDXZ ENDP		; CRaceData::GetBaseModelFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?Destroy@CRaceData@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -20						; size = 4
_pMotionModeData$1$ = -16				; size = 4
_pkData$ = -16						; size = 4
_this$1$ = -12						; size = 4
_i$1$ = -8						; size = 4
_itorMode$1$ = -4					; size = 4
?Destroy@CRaceData@@QAEXXZ PROC				; CRaceData::Destroy, COMDAT
; _this$ = ecx

; 588  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  0000a	8b b3 c0 00 00
	00		 mov	 esi, DWORD PTR [ebx+192]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 588  : {

  00010	57		 push	 edi

; 589  : 	m_kMap_dwHairKey_kHair.clear();

  00011	8d bb c0 00 00
	00		 lea	 edi, DWORD PTR [ebx+192]
  00017	89 5d f4	 mov	 DWORD PTR _this$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0001a	8b cf		 mov	 ecx, edi
  0001c	ff 76 04	 push	 DWORD PTR [esi+4]
  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  00025	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  00028	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  0002a	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  0002d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 590  : 	m_kMap_dwShapeKey_kShape.clear();

  00034	8d bb c8 00 00
	00		 lea	 edi, DWORD PTR [ebx+200]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  0003a	8b 37		 mov	 esi, DWORD PTR [edi]

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0003c	8b cf		 mov	 ecx, edi
  0003e	ff 76 04	 push	 DWORD PTR [esi+4]
  00041	57		 push	 edi
  00042	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00047	6a 00		 push	 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1358 :         _Head->_Parent  = _Head;

  00049	89 76 04	 mov	 DWORD PTR [esi+4], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 592  : 	m_strBaseModelFileName = "";

  0004c	8d 4b 20	 lea	 ecx, DWORD PTR [ebx+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1359 :         _Head->_Left    = _Head;

  0004f	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  00051	89 76 08	 mov	 DWORD PTR [esi+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1361 :         _Scary->_Mysize = 0;

  00059	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00060	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00065	6a 00		 push	 0
  00067	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 593  : 	m_strTreeFileName = "";

  0006c	8d 4b 38	 lea	 ecx, DWORD PTR [ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00074	6a 00		 push	 0
  00076	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 594  : 	m_strAttributeFileName = "";

  0007b	8d 4b 50	 lea	 ecx, DWORD PTR [ebx+80]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0007e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00083	6a 0b		 push	 11			; 0000000bH
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LNIEHMJP@motlist?4txt@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 595  : 	m_strMotionListFileName = "motlist.txt";

  0008a	8d 4b 68	 lea	 ecx, DWORD PTR [ebx+104]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0008d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  00092	8b b3 a8 00 00
	00		 mov	 esi, DWORD PTR [ebx+168]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 597  : 	m_AttachingBoneNameMap.clear();

  00098	8d bb a8 00 00
	00		 lea	 edi, DWORD PTR [ebx+168]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0009e	8b cf		 mov	 ecx, edi
  000a0	ff 76 04	 push	 DWORD PTR [esi+4]
  000a3	57		 push	 edi
  000a4	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  000a9	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  000ac	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  000ae	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  000b1	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 598  : 	m_ModelDataMap.clear();

  000b8	8d bb 98 00 00
	00		 lea	 edi, DWORD PTR [ebx+152]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  000be	8b 37		 mov	 esi, DWORD PTR [edi]

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000c0	8b cf		 mov	 ecx, edi
  000c2	ff 76 04	 push	 DWORD PTR [esi+4]
  000c5	57		 push	 edi
  000c6	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  000cb	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  000ce	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  000d0	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 600  : 	m_NormalAttackIndexMap.clear();

  000da	8d bb b8 00 00
	00		 lea	 edi, DWORD PTR [ebx+184]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  000e0	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  000e2	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  000e5	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000e9	75 25		 jne	 SHORT $LN167@Destroy
  000eb	0f 1f 44 00 00	 npad	 5
$LL166@Destroy:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  000f0	ff 76 08	 push	 DWORD PTR [esi+8]
  000f3	8b cf		 mov	 ecx, edi
  000f5	57		 push	 edi
  000f6	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKK@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKK@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKK@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,unsigned long> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,unsigned long>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000fb	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  000fd	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ff	6a 18		 push	 24			; 00000018H
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00107	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0010a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0010e	74 e0		 je	 SHORT $LL166@Destroy
$LN167@Destroy:

; 1358 :         _Head->_Parent  = _Head;

  00110	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1359 :         _Head->_Left    = _Head;

  00113	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1360 :         _Head->_Right   = _Head;

  00115	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 601  : 	m_ComboAttackDataMap.clear();

  00118	8b 5d f4	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1361 :         _Scary->_Mysize = 0;

  0011b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 601  : 	m_ComboAttackDataMap.clear();

  00122	8d bb b0 00 00
	00		 lea	 edi, DWORD PTR [ebx+176]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  00128	8b 37		 mov	 esi, DWORD PTR [edi]

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0012a	8b cf		 mov	 ecx, edi
  0012c	ff 76 04	 push	 DWORD PTR [esi+4]
  0012f	57		 push	 edi
  00130	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00135	81 c3 a0 00 00
	00		 add	 ebx, 160		; 000000a0H

; 1358 :         _Head->_Parent  = _Head;

  0013b	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  0013e	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  00140	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  00143	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0014a	8b 33		 mov	 esi, DWORD PTR [ebx]
  0014c	89 5d ec	 mov	 DWORD PTR _this$1$[ebp], ebx

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0014f	8b 3e		 mov	 edi, DWORD PTR [esi]
  00151	89 7d fc	 mov	 DWORD PTR _itorMode$1$[ebp], edi
  00154	3b fe		 cmp	 edi, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 604  : 	for (; itorMode != m_pMotionModeDataMap.end(); ++itorMode)

  00156	0f 84 31 01 00
	00		 je	 $LN3@Destroy
  0015c	0f 1f 40 00	 npad	 4
$LL62@Destroy:

; 605  : 	{
; 606  : 		TMotionModeData * pMotionModeData = itorMode->second;

  00160	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  00163	89 4d f0	 mov	 DWORD PTR _pMotionModeData$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00166	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00169	8b 30		 mov	 esi, DWORD PTR [eax]
  0016b	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 609  : 		for (; itorMotion != pMotionModeData->MotionVectorMap.end(); ++itorMotion)

  0016d	0f 84 9e 00 00
	00		 je	 $LN6@Destroy
$LL34@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00173	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 612  : 			for (DWORD i = 0; i < rMotionVector.size(); ++i)

  00176	33 c9		 xor	 ecx, ecx
  00178	89 4d f8	 mov	 DWORD PTR _i$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0017b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00180	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00183	2b cb		 sub	 ecx, ebx
  00185	f7 e9		 imul	 ecx
  00187	d1 fa		 sar	 edx, 1
  00189	8b c2		 mov	 eax, edx
  0018b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018e	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 612  : 			for (DWORD i = 0; i < rMotionVector.size(); ++i)

  00190	74 31		 je	 SHORT $LN5@Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00192	33 ff		 xor	 edi, edi
$LL10@Destroy:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 614  : 				CRaceMotionData::Delete(rMotionVector[i].pMotionData);

  00194	ff 74 1f 08	 push	 DWORD PTR [edi+ebx+8]
  00198	e8 00 00 00 00	 call	 ?Delete@CRaceMotionData@@SAXPAV1@@Z ; CRaceMotionData::Delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0019d	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 612  : 			for (DWORD i = 0; i < rMotionVector.size(); ++i)

  001a0	8d 7f 0c	 lea	 edi, DWORD PTR [edi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001a3	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  001a6	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 612  : 			for (DWORD i = 0; i < rMotionVector.size(); ++i)

  001ab	ff 45 f8	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001ae	2b cb		 sub	 ecx, ebx
  001b0	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 614  : 				CRaceMotionData::Delete(rMotionVector[i].pMotionData);

  001b2	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001b5	d1 fa		 sar	 edx, 1
  001b7	8b c2		 mov	 eax, edx
  001b9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001bc	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 612  : 			for (DWORD i = 0; i < rMotionVector.size(); ++i)

  001be	39 45 f8	 cmp	 DWORD PTR _i$1$[ebp], eax
  001c1	72 d1		 jb	 SHORT $LL10@Destroy
$LN5@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  001c3	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001c6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001ca	74 1d		 je	 SHORT $LN33@Destroy

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  001cc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001cf	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001d3	75 10		 jne	 SHORT $LN242@Destroy
$LL31@Destroy:
  001d5	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  001d8	75 0b		 jne	 SHORT $LN242@Destroy

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  001da	8b f0		 mov	 esi, eax
  001dc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001df	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001e3	74 f0		 je	 SHORT $LL31@Destroy
$LN242@Destroy:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  001e5	8b f0		 mov	 esi, eax

; 58   :         } else {

  001e7	eb 16		 jmp	 SHORT $LN38@Destroy
$LN33@Destroy:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  001e9	8b f0		 mov	 esi, eax

; 453  :         while (!_Pnode->_Left->_Isnil) {

  001eb	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001ed	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001f1	75 0c		 jne	 SHORT $LN38@Destroy
$LL37@Destroy:
  001f3	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  001f5	8b f1		 mov	 esi, ecx
  001f7	8b c8		 mov	 ecx, eax
  001f9	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001fd	74 f4		 je	 SHORT $LL37@Destroy
$LN38@Destroy:

; 233  :         return this->_Ptr == _Right._Ptr;

  001ff	8b 4d f0	 mov	 ecx, DWORD PTR _pMotionModeData$1$[ebp]
  00202	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 609  : 		for (; itorMotion != pMotionModeData->MotionVectorMap.end(); ++itorMotion)

  00205	0f 85 68 ff ff
	ff		 jne	 $LL34@Destroy
  0020b	8b 7d fc	 mov	 edi, DWORD PTR _itorMode$1$[ebp]
  0020e	8b 5d ec	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN6@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00211	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 618  : 		ms_MotionModeDataPool.Free(pMotionModeData);

  00216	89 4d f0	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00219	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+24
  0021f	74 0b		 je	 SHORT $LN79@Destroy

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00221	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00223	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+20, 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0022a	eb 0f		 jmp	 SHORT $LN2@Destroy
$LN79@Destroy:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0022c	8d 4d f0	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0022f	51		 push	 ecx
  00230	50		 push	 eax
  00231	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+16
  00236	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSMotionModeData@CRaceData@@@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEPAPAUSMotionModeData@CRaceData@@QAPAU23@ABQAU23@@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Emplace_reallocate<CRaceData::SMotionModeData * const &>
$LN2@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0023b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0023e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00242	74 23		 je	 SHORT $LN61@Destroy

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00244	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00247	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0024b	75 13		 jne	 SHORT $LN243@Destroy
  0024d	0f 1f 00	 npad	 3
$LL59@Destroy:
  00250	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  00253	75 0b		 jne	 SHORT $LN243@Destroy

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00255	8b f8		 mov	 edi, eax
  00257	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0025a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0025e	74 f0		 je	 SHORT $LL59@Destroy
$LN243@Destroy:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00260	8b f8		 mov	 edi, eax
  00262	89 7d fc	 mov	 DWORD PTR _itorMode$1$[ebp], edi

; 58   :         } else {

  00265	eb 1c		 jmp	 SHORT $LN66@Destroy
$LN61@Destroy:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00267	8b f8		 mov	 edi, eax
  00269	89 7d fc	 mov	 DWORD PTR _itorMode$1$[ebp], edi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0026c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0026e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00272	75 0f		 jne	 SHORT $LN66@Destroy
$LL65@Destroy:
  00274	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00276	8b f9		 mov	 edi, ecx
  00278	89 7d fc	 mov	 DWORD PTR _itorMode$1$[ebp], edi
  0027b	8b c8		 mov	 ecx, eax
  0027d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00281	74 f1		 je	 SHORT $LL65@Destroy
$LN66@Destroy:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00283	8b 33		 mov	 esi, DWORD PTR [ebx]

; 233  :         return this->_Ptr == _Right._Ptr;

  00285	3b fe		 cmp	 edi, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 604  : 	for (; itorMode != m_pMotionModeDataMap.end(); ++itorMode)

  00287	0f 85 d3 fe ff
	ff		 jne	 $LL62@Destroy
$LN3@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  0028d	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00290	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00294	75 20		 jne	 SHORT $LN101@Destroy
$LL100@Destroy:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00296	ff 77 08	 push	 DWORD PTR [edi+8]
  00299	8b cb		 mov	 ecx, ebx
  0029b	53		 push	 ebx
  0029c	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  002a1	8b c7		 mov	 eax, edi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  002a3	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  002a5	6a 18		 push	 24			; 00000018H
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002ad	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  002b0	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  002b4	74 e0		 je	 SHORT $LL100@Destroy
$LN101@Destroy:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 622  : 	__Initialize();

  002b6	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1358 :         _Head->_Parent  = _Head;

  002b9	89 76 04	 mov	 DWORD PTR [esi+4], esi

; 1359 :         _Head->_Left    = _Head;

  002bc	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  002be	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  002c1	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 622  : 	__Initialize();

  002c8	e8 00 00 00 00	 call	 ?__Initialize@CRaceData@@IAEXXZ ; CRaceData::__Initialize
  002cd	5f		 pop	 edi
  002ce	5e		 pop	 esi
  002cf	5b		 pop	 ebx

; 623  : }

  002d0	8b e5		 mov	 esp, ebp
  002d2	5d		 pop	 ebp
  002d3	c3		 ret	 0
?Destroy@CRaceData@@QAEXXZ ENDP				; CRaceData::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ??1CRaceData@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CRaceData@@UAE@XZ PROC				; CRaceData::~CRaceData, COMDAT
; _this$ = ecx

; 642  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CRaceData@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx
  00026	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRaceData@@6B@

; 643  : 	Destroy();

  0002c	e8 00 00 00 00	 call	 ?Destroy@CRaceData@@QAEXXZ ; CRaceData::Destroy

; 644  : }

  00031	8d 8f d0 00 00
	00		 lea	 ecx, DWORD PTR [edi+208]
  00037	e8 00 00 00 00	 call	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0003c	8b 87 c8 00 00
	00		 mov	 eax, DWORD PTR [edi+200]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  00042	8d b7 c8 00 00
	00		 lea	 esi, DWORD PTR [edi+200]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00048	8b ce		 mov	 ecx, esi
  0004a	ff 70 04	 push	 DWORD PTR [eax+4]
  0004d	56		 push	 esi
  0004e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSShape@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSShape@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SShape> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SShape>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00053	6a 38		 push	 56			; 00000038H
  00055	ff 36		 push	 DWORD PTR [esi]
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0005c	8b 87 c0 00 00
	00		 mov	 eax, DWORD PTR [edi+192]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  00062	8d b7 c0 00 00
	00		 lea	 esi, DWORD PTR [edi+192]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00068	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0006b	8b ce		 mov	 ecx, esi
  0006d	ff 70 04	 push	 DWORD PTR [eax+4]
  00070	56		 push	 esi
  00071	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSHair@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSHair@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SHair> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SHair>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00076	6a 38		 push	 56			; 00000038H
  00078	ff 36		 push	 DWORD PTR [esi]
  0007a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007f	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  00082	8d 8f b8 00 00
	00		 lea	 ecx, DWORD PTR [edi+184]
  00088	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0008d	8b 87 b0 00 00
	00		 mov	 eax, DWORD PTR [edi+176]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  00093	8d b7 b0 00 00
	00		 lea	 esi, DWORD PTR [edi+176]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00099	8b ce		 mov	 ecx, esi
  0009b	ff 70 04	 push	 DWORD PTR [eax+4]
  0009e	56		 push	 esi
  0009f	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a4	6a 20		 push	 32			; 00000020H
  000a6	ff 36		 push	 DWORD PTR [esi]
  000a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  000ad	8b 87 a8 00 00
	00		 mov	 eax, DWORD PTR [edi+168]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  000b3	8d b7 a8 00 00
	00		 lea	 esi, DWORD PTR [edi+168]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b9	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  000bc	8b ce		 mov	 ecx, esi
  000be	ff 70 04	 push	 DWORD PTR [eax+4]
  000c1	56		 push	 esi
  000c2	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000c7	6a 2c		 push	 44			; 0000002cH
  000c9	ff 36		 push	 DWORD PTR [esi]
  000cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000d0	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  000d3	8d 8f a0 00 00
	00		 lea	 ecx, DWORD PTR [edi+160]
  000d9	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  000de	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  000e4	8d b7 98 00 00
	00		 lea	 esi, DWORD PTR [edi+152]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  000ea	8b ce		 mov	 ecx, esi
  000ec	ff 70 04	 push	 DWORD PTR [eax+4]
  000ef	56		 push	 esi
  000f0	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000f5	6a 20		 push	 32			; 00000020H
  000f7	ff 36		 push	 DWORD PTR [esi]
  000f9	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000fe	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00104	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00107	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0010a	72 2f		 jb	 SHORT $LN172@CRaceData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8b 87 80 00 00
	00		 mov	 eax, DWORD PTR [edi+128]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00112	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00113	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00119	72 16		 jb	 SHORT $LN182@CRaceData

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0011b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0011e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00121	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00123	83 c0 fc	 add	 eax, -4			; fffffffcH
  00126	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00129	0f 87 48 01 00
	00		 ja	 $LN287@CRaceData

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0012f	8b c2		 mov	 eax, edx
$LN182@CRaceData:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00131	51		 push	 ecx
  00132	50		 push	 eax
  00133	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00138	83 c4 08	 add	 esp, 8
$LN172@CRaceData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0013b	c7 87 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+144], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00145	c7 87 94 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+148], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0014f	c6 87 80 00 00
	00 00		 mov	 BYTE PTR [edi+128], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00156	8b 4f 7c	 mov	 ecx, DWORD PTR [edi+124]
  00159	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0015c	72 2c		 jb	 SHORT $LN199@CRaceData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015e	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00161	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00162	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00168	72 16		 jb	 SHORT $LN209@CRaceData

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0016a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0016d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00170	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00172	83 c0 fc	 add	 eax, -4			; fffffffcH
  00175	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00178	0f 87 f9 00 00
	00		 ja	 $LN287@CRaceData

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0017e	8b c2		 mov	 eax, edx
$LN209@CRaceData:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00180	51		 push	 ecx
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00187	83 c4 08	 add	 esp, 8
$LN199@CRaceData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0018a	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00191	c7 47 7c 0f 00
	00 00		 mov	 DWORD PTR [edi+124], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00198	c6 47 68 00	 mov	 BYTE PTR [edi+104], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  0019c	8b 4f 64	 mov	 ecx, DWORD PTR [edi+100]
  0019f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  001a2	72 2c		 jb	 SHORT $LN226@CRaceData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a4	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001a7	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001a8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ae	72 16		 jb	 SHORT $LN236@CRaceData

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001b0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001b6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b8	83 c0 fc	 add	 eax, -4			; fffffffcH
  001bb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001be	0f 87 b3 00 00
	00		 ja	 $LN287@CRaceData

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001c4	8b c2		 mov	 eax, edx
$LN236@CRaceData:

; 255  :         ::operator delete(_Ptr, _Bytes);

  001c6	51		 push	 ecx
  001c7	50		 push	 eax
  001c8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001cd	83 c4 08	 add	 esp, 8
$LN226@CRaceData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  001d0	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  001d7	c7 47 64 0f 00
	00 00		 mov	 DWORD PTR [edi+100], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001de	c6 47 50 00	 mov	 BYTE PTR [edi+80], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  001e2	8b 4f 4c	 mov	 ecx, DWORD PTR [edi+76]
  001e5	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  001e8	72 28		 jb	 SHORT $LN253@CRaceData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ea	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  001ed	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ee	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001f4	72 12		 jb	 SHORT $LN263@CRaceData

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001f6	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001f9	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  001fc	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001fe	83 c0 fc	 add	 eax, -4			; fffffffcH
  00201	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00204	77 71		 ja	 SHORT $LN287@CRaceData

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00206	8b c2		 mov	 eax, edx
$LN263@CRaceData:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00208	51		 push	 ecx
  00209	50		 push	 eax
  0020a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0020f	83 c4 08	 add	 esp, 8
$LN253@CRaceData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00212	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00219	c7 47 4c 0f 00
	00 00		 mov	 DWORD PTR [edi+76], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00220	c6 47 38 00	 mov	 BYTE PTR [edi+56], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00224	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00227	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0022a	72 28		 jb	 SHORT $LN280@CRaceData
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0022c	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0022f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00230	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00236	72 12		 jb	 SHORT $LN290@CRaceData

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00238	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0023b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0023e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00240	83 c0 fc	 add	 eax, -4			; fffffffcH
  00243	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00246	77 2f		 ja	 SHORT $LN287@CRaceData

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00248	8b c2		 mov	 eax, edx
$LN290@CRaceData:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0024a	51		 push	 ecx
  0024b	50		 push	 eax
  0024c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00251	83 c4 08	 add	 esp, 8
$LN280@CRaceData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00254	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0025b	c7 47 34 0f 00
	00 00		 mov	 DWORD PTR [edi+52], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00262	c6 47 20 00	 mov	 BYTE PTR [edi+32], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 644  : }

  00266	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00269	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00270	59		 pop	 ecx
  00271	5f		 pop	 edi
  00272	5e		 pop	 esi
  00273	8b e5		 mov	 esp, ebp
  00275	5d		 pop	 ebp
  00276	c3		 ret	 0
$LN287@CRaceData:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00277	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN296@CRaceData:
  0027c	cc		 int	 3
  0027d	cc		 int	 3
  0027e	cc		 int	 3
  0027f	cc		 int	 3
  00280	cc		 int	 3
  00281	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CRaceData@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CRaceData@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CRaceData@@UAE@XZ ENDP				; CRaceData::~CRaceData
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ??0CRaceData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CRaceData@@QAE@XZ PROC				; CRaceData::CRaceData, COMDAT
; _this$ = ecx

; 638  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CRaceData@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CRaceData@@6B@
  00032	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00035	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0

; 4998 :         _My_data._Mysize = 0;

  00039	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00040	c7 47 34 0f 00
	00 00		 mov	 DWORD PTR [edi+52], 15	; 0000000fH

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00047	c6 47 20 00	 mov	 BYTE PTR [edi+32], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0004b	0f 11 47 38	 movups	 XMMWORD PTR [edi+56], xmm0

; 4998 :         _My_data._Mysize = 0;

  0004f	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00056	c7 47 4c 0f 00
	00 00		 mov	 DWORD PTR [edi+76], 15	; 0000000fH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00064	c6 47 38 00	 mov	 BYTE PTR [edi+56], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00068	0f 11 47 50	 movups	 XMMWORD PTR [edi+80], xmm0

; 4998 :         _My_data._Mysize = 0;

  0006c	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00073	c7 47 64 0f 00
	00 00		 mov	 DWORD PTR [edi+100], 15	; 0000000fH

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0007a	c6 47 50 00	 mov	 BYTE PTR [edi+80], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0007e	0f 11 47 68	 movups	 XMMWORD PTR [edi+104], xmm0

; 4998 :         _My_data._Mysize = 0;

  00082	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00089	c7 47 7c 0f 00
	00 00		 mov	 DWORD PTR [edi+124], 15	; 0000000fH

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00090	c6 47 68 00	 mov	 BYTE PTR [edi+104], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00094	0f 11 87 80 00
	00 00		 movups	 XMMWORD PTR [edi+128], xmm0

; 4998 :         _My_data._Mysize = 0;

  0009b	c7 87 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+144], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000a5	c7 87 94 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+148], 15	; 0000000fH

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000af	c6 87 80 00 00
	00 00		 mov	 BYTE PTR [edi+128], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  000b6	8d b7 98 00 00
	00		 lea	 esi, DWORD PTR [edi+152]
  000bc	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000c0	6a 20		 push	 32			; 00000020H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  000c2	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000c5	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000cb	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000d2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000d7	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000d9	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000dc	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  000df	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000e5	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  000e7	8d b7 a0 00 00
	00		 lea	 esi, DWORD PTR [edi+160]
  000ed	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000f1	6a 18		 push	 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  000f3	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000f6	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000fc	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00103	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00108	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0010a	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0010d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00110	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00116	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  00118	8d b7 a8 00 00
	00		 lea	 esi, DWORD PTR [edi+168]
  0011e	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00122	6a 2c		 push	 44			; 0000002cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  00124	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00127	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0012d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00134	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00139	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0013b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0013e	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00141	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00147	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  00149	8d b7 b0 00 00
	00		 lea	 esi, DWORD PTR [edi+176]
  0014f	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00153	6a 20		 push	 32			; 00000020H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  00155	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00158	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0015e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00165	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0016a	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0016c	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  0016f	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00172	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  00178	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  0017a	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  0017e	8d b7 b8 00 00
	00		 lea	 esi, DWORD PTR [edi+184]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00184	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0018a	6a 18		 push	 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  0018c	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  0018f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00196	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0019b	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0019d	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  001a0	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  001a3	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  001a9	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  001ab	8d b7 c0 00 00
	00		 lea	 esi, DWORD PTR [edi+192]
  001b1	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001b5	6a 38		 push	 56			; 00000038H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  001b7	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001ba	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  001c0	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001c7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  001cc	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  001ce	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  001d1	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  001d4	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  001da	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  001dc	8d b7 c8 00 00
	00		 lea	 esi, DWORD PTR [edi+200]
  001e2	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001e6	6a 38		 push	 56			; 00000038H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 638  : {

  001e8	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  001eb	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  001f1	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  001f8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001fd	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  00200	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00202	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00205	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00208	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0020e	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00210	c7 87 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+208], 0
  0021a	c7 87 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+212], 0
  00224	c7 87 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+216], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 639  : 	__Initialize();

  0022e	8b cf		 mov	 ecx, edi
  00230	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
  00234	e8 00 00 00 00	 call	 ?__Initialize@CRaceData@@IAEXXZ ; CRaceData::__Initialize

; 640  : }

  00239	8b c7		 mov	 eax, edi
  0023b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0023e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00245	59		 pop	 ecx
  00246	5f		 pop	 edi
  00247	5e		 pop	 esi
  00248	8b e5		 mov	 esp, ebp
  0024a	5d		 pop	 ebp
  0024b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRaceData@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 20	 add	 ecx, 32			; 00000020H
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CRaceData@@QAE@XZ$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 38	 add	 ecx, 56			; 00000038H
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CRaceData@@QAE@XZ$2:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 50	 add	 ecx, 80			; 00000050H
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CRaceData@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	83 c1 68	 add	 ecx, 104		; 00000068H
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CRaceData@@QAE@XZ$4:
  0002c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00035	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CRaceData@@QAE@XZ$5:
  0003a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003d	81 c1 98 00 00
	00		 add	 ecx, 152		; 00000098H
  00043	e9 00 00 00 00	 jmp	 ??1?$map@KUSModelData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$6:
  00048	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0004b	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  00051	e9 00 00 00 00	 jmp	 ??1?$map@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$7:
  00056	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0005f	e9 00 00 00 00	 jmp	 ??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$8:
  00064	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	81 c1 b0 00 00
	00		 add	 ecx, 176		; 000000b0H
  0006d	e9 00 00 00 00	 jmp	 ??1?$map@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$9:
  00072	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	81 c1 b8 00 00
	00		 add	 ecx, 184		; 000000b8H
  0007b	e9 00 00 00 00	 jmp	 ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$10:
  00080	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	81 c1 c0 00 00
	00		 add	 ecx, 192		; 000000c0H
  00089	e9 00 00 00 00	 jmp	 ??1?$map@KUSHair@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSHair@CRaceData@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$11:
  0008e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00091	81 c1 c8 00 00
	00		 add	 ecx, 200		; 000000c8H
  00097	e9 00 00 00 00	 jmp	 ??1?$map@KUSShape@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSShape@CRaceData@@@std@@@4@@std@@QAE@XZ
__unwindfunclet$??0CRaceData@@QAE@XZ$12:
  0009c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  000a5	e9 00 00 00 00	 jmp	 ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
  000aa	cc		 int	 3
  000ab	cc		 int	 3
  000ac	cc		 int	 3
  000ad	cc		 int	 3
  000ae	cc		 int	 3
__ehhandler$??0CRaceData@@QAE@XZ:
  000af	90		 npad	 1
  000b0	90		 npad	 1
  000b1	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  000b5	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  000b8	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  000bb	33 c8		 xor	 ecx, eax
  000bd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c2	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CRaceData@@QAE@XZ
  000c7	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CRaceData@@QAE@XZ ENDP				; CRaceData::CRaceData
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?DestroySystem@CRaceData@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CRaceData@@SAXXZ PROC			; CRaceData::DestroySystem, COMDAT

; 101  : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 101  : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 21		 je	 SHORT $LN73@DestroySys
$LL20@DestroySys:

; 266  :         _Func(*_UFirst);

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 114  : 		delete pkData;

  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN26@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN26@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
$LN73@DestroySys:
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+20
  00039	0f 45 fe	 cmovne	 edi, esi
  0003c	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+16, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00042	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+16
  0004f	89 3d 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+8, edi

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00055	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+8

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0005b	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+20, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00061	3b f7		 cmp	 esi, edi
  00063	74 21		 je	 SHORT $LN74@DestroySys
$LL51@DestroySys:

; 266  :         _Func(*_UFirst);

  00065	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 114  : 		delete pkData;

  00067	85 c9		 test	 ecx, ecx
  00069	74 06		 je	 SHORT $LN57@DestroySys
  0006b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006d	6a 01		 push	 1
  0006f	ff 10		 call	 DWORD PTR [eax]
$LN57@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00071	83 c6 04	 add	 esi, 4
  00074	3b f7		 cmp	 esi, edi
  00076	75 ed		 jne	 SHORT $LL51@DestroySys
  00078	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+8
  0007e	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00084	3b f7		 cmp	 esi, edi
$LN74@DestroySys:
  00086	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+20
  0008c	0f 45 fe	 cmovne	 edi, esi
  0008f	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+16, ecx
  00095	89 3d 08 00 00
	00		 mov	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+8, edi
  0009b	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+16
  000a2	5f		 pop	 edi
  000a3	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+20, ecx
  000a9	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 104  : }

  000aa	c3		 ret	 0
?DestroySystem@CRaceData@@SAXXZ ENDP			; CRaceData::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?CreateSystem@CRaceData@@SAXII@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
_uMotModeCapacity$ = 12					; size = 4
?CreateSystem@CRaceData@@SAXII@Z PROC			; CRaceData::CreateSystem, COMDAT

; 95   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+12
  00008	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 95   : {

  0000e	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  0000f	8b 75 0c	 mov	 esi, DWORD PTR _uMotModeCapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  00015	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+28, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0001b	3b f0		 cmp	 esi, eax
  0001d	76 17		 jbe	 SHORT $LN6@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  0001f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00025	0f 87 86 00 00
	00		 ja	 $LN36@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  0002b	56		 push	 esi
  0002c	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+4
  00031	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXI@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Reallocate_exactly
$LN6@CreateSyst:

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+24
  0003b	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+16
  00041	c1 f8 02	 sar	 eax, 2

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00044	3b f0		 cmp	 esi, eax
  00046	76 13		 jbe	 SHORT $LN13@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  00048	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004e	77 61		 ja	 SHORT $LN36@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  00050	56		 push	 esi
  00051	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_MotionModeDataPool@CRaceData@@1V?$CDynamicPool@USMotionModeData@CRaceData@@@@A+16
  00056	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@AAEXI@Z ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Reallocate_exactly
$LN13@CreateSyst:

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005b	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+12
  00060	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  00066	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00069	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  0006c	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+28, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00072	3b f0		 cmp	 esi, eax
  00074	76 13		 jbe	 SHORT $LN22@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  00076	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0007c	77 38		 ja	 SHORT $LN34@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  0007e	56		 push	 esi
  0007f	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+4
  00084	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXI@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Reallocate_exactly
$LN22@CreateSyst:

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00089	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+24
  0008e	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+16
  00094	c1 f8 02	 sar	 eax, 2

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00097	3b f0		 cmp	 esi, eax
  00099	76 13		 jbe	 SHORT $LN29@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  0009b	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  000a1	77 13		 ja	 SHORT $LN34@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  000a3	56		 push	 esi
  000a4	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+16
  000a9	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEXI@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Reallocate_exactly
$LN29@CreateSyst:
  000ae	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 98   : }

  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN36@CreateSyst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1745 :                 _Xlength();

  000b1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSMotionModeData@CRaceData@@V?$allocator@PAUSMotionModeData@CRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData::SMotionModeData *,std::allocator<CRaceData::SMotionModeData *> >::_Xlength
$LN34@CreateSyst:
  000b6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@CAXXZ ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Xlength
$LN38@CreateSyst:
  000bb	cc		 int	 3
?CreateSystem@CRaceData@@SAXII@Z ENDP			; CRaceData::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?Delete@CRaceData@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkRaceData$ = 8					; size = 4
?Delete@CRaceData@@SAXPAV1@@Z PROC			; CRaceData::Delete, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 90   : 	pkRaceData->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkRaceData$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CRaceData@@QAEXXZ ; CRaceData::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 91   : 	ms_kPool.Free(pkRaceData);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 92   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCRaceData@@@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEPAPAVCRaceData@@QAPAV2@ABQAV2@@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Emplace_reallocate<CRaceData * const &>
  00039	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 92   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CRaceData@@SAXPAV1@@Z ENDP			; CRaceData::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?New@CRaceData@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CRaceData@@SAPAV1@XZ PROC				; CRaceData::New, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CRaceData@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00023	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00029	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+16, ecx
  0002f	0f 85 83 00 00
	00		 jne	 $LN4@New

; 65   : 			T* pkNewData = new T;

  00035	68 dc 00 00 00	 push	 220			; 000000dcH
  0003a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003f	83 c4 04	 add	 esp, 4
  00042	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00045	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004c	85 c0		 test	 eax, eax
  0004e	74 09		 je	 SHORT $LN6@New
  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ??0CRaceData@@QAE@XZ	; CRaceData::CRaceData
  00057	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00059	33 c0		 xor	 eax, eax
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0005b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00061	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00068	89 45 f0	 mov	 DWORD PTR _pkNewData$3[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0006b	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+12
  00071	74 1e		 je	 SHORT $LN14@New

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00073	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00075	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  0007c	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 86   : }

  00082	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00085	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008c	59		 pop	 ecx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00091	8d 45 f0	 lea	 eax, DWORD PTR _pkNewData$3[ebp]
  00094	50		 push	 eax
  00095	51		 push	 ecx
  00096	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+4
  0009b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCRaceData@@@?$vector@PAVCRaceData@@V?$allocator@PAVCRaceData@@@std@@@std@@AAEPAPAVCRaceData@@QAPAV2@ABQAV2@@Z ; std::vector<CRaceData *,std::allocator<CRaceData *> >::_Emplace_reallocate<CRaceData * const &>
  000a0	8b 45 f0	 mov	 eax, DWORD PTR _pkNewData$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  000a3	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 86   : }

  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
$LN4@New:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  000b8	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  000bb	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000be	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CRaceData@@1V?$CDynamicPool@VCRaceData@@@@A+20, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp

; 86   : }

  000c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ce	59		 pop	 ecx
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CRaceData@@SAPAV1@XZ$0:
  00000	68 dc 00 00 00	 push	 220			; 000000dcH
  00005	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?New@CRaceData@@SAPAV1@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CRaceData@@SAPAV1@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CRaceData@@SAPAV1@XZ ENDP				; CRaceData::New
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@CAXXZ PROC ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@CAXXZ ENDP ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ PROC ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::~vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6a		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0e		 je	 SHORT $LN8@vector
$LL9@vector:
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ??1SSkin@CRaceData@@QAE@XZ
  00019	83 c6 34	 add	 esi, 52			; 00000034H
  0001c	3b f3		 cmp	 esi, ebx
  0001e	75 f2		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00020	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00023	b8 4f ec c4 4e	 mov	 eax, 1321528399		; 4ec4ec4fH
  00028	8b 37		 mov	 esi, DWORD PTR [edi]
  0002a	2b ce		 sub	 ecx, esi
  0002c	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0002f	c1 fa 04	 sar	 edx, 4
  00032	8b c2		 mov	 eax, edx
  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00039	6b c8 34	 imul	 ecx, eax, 52

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00042	72 12		 jb	 SHORT $LN30@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00044	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00047	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004a	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00052	77 23		 ja	 SHORT $LN27@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00054	8b f2		 mov	 esi, edx
$LN30@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00056	51		 push	 ecx
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0005d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00063	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00066	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  0006d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  00074	5f		 pop	 edi

; 835  :     }

  00075	5e		 pop	 esi
  00076	c3		 ret	 0
$LN27@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00077	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@vector:
  0007c	cc		 int	 3
??1?$vector@USSkin@CRaceData@@V?$allocator@USSkin@CRaceData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >::~vector<CRaceData::SSkin,std::allocator<CRaceData::SSkin> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@USSkin@CRaceData@@@std@@QAEXQAUSSkin@CRaceData@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USSkin@CRaceData@@@std@@QAEXQAUSSkin@CRaceData@@I@Z PROC ; std::allocator<CRaceData::SSkin>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	6b 4d 0c 34	 imul	 ecx, DWORD PTR __Count$[ebp], 52
  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00010	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00012	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00015	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00018	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00020	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00022	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8

; 831  :     }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00037	cc		 int	 3
?deallocate@?$allocator@USSkin@CRaceData@@@std@@QAEXQAUSSkin@CRaceData@@I@Z ENDP ; std::allocator<CRaceData::SSkin>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1SSkin@CRaceData@@QAE@XZ
_TEXT	SEGMENT
??1SSkin@CRaceData@@QAE@XZ PROC				; CRaceData::SSkin::~SSkin, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@SSkin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@SSkin

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 62		 ja	 SHORT $LN50@SSkin

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@SSkin:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@SSkin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00033	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 30 0f 00
	00 00		 mov	 DWORD PTR [esi+48], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 1c 00	 mov	 BYTE PTR [esi+28], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00045	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00048	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0004b	72 28		 jb	 SHORT $LN43@SSkin
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00050	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00051	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00057	72 12		 jb	 SHORT $LN53@SSkin

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00059	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	83 c0 fc	 add	 eax, -4			; fffffffcH
  00064	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00067	77 20		 ja	 SHORT $LN50@SSkin

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00069	8b c2		 mov	 eax, edx
$LN53@SSkin:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006b	51		 push	 ecx
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
$LN43@SSkin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00075	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007c	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00083	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00087	5e		 pop	 esi
  00088	c3		 ret	 0
$LN50@SSkin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00089	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@SSkin:
  0008e	cc		 int	 3
??1SSkin@CRaceData@@QAE@XZ ENDP				; CRaceData::SSkin::~SSkin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
;	COMDAT ??0SSkin@CRaceData@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_rkSkin$ = 8						; size = 4
??0SSkin@CRaceData@@QAE@ABU01@@Z PROC			; CRaceData::SSkin::SSkin, COMDAT
; _this$ = ecx

; 102  : 		SSkin(const SSkin& c_rkSkin)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SSkin@CRaceData@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00030	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 4998 :         _My_data._Mysize = 0;

  00033	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 102  : 		SSkin(const SSkin& c_rkSkin)

  00044	8d 7e 1c	 lea	 edi, DWORD PTR [esi+28]
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0004e	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 4998 :         _My_data._Mysize = 0;

  00051	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00058	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0005f	c6 07 00	 mov	 BYTE PTR [edi], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 112  : 			m_ePart = c_rkSkin.m_ePart;

  00062	8b 55 08	 mov	 edx, DWORD PTR _c_rkSkin$[ebp]

; 102  : 		SSkin(const SSkin& c_rkSkin)

  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 112  : 			m_ePart = c_rkSkin.m_ePart;

  00069	8b 02		 mov	 eax, DWORD PTR [edx]
  0006b	89 06		 mov	 DWORD PTR [esi], eax

; 113  : 			m_stSrcFileName = c_rkSkin.m_stSrcFileName;

  0006d	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00070	3b c8		 cmp	 ecx, eax
  00072	74 15		 je	 SHORT $LN33@SSkin

; 2301 :         return _BUF_SIZE <= _Myres;

  00074	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00078	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0007b	72 02		 jb	 SHORT $LN37@SSkin

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0007d	8b 00		 mov	 eax, DWORD PTR [eax]
$LN37@SSkin:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00086	8b 55 08	 mov	 edx, DWORD PTR _c_rkSkin$[ebp]
$LN33@SSkin:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 114  : 			m_stDstFileName = c_rkSkin.m_stDstFileName;

  00089	8d 42 1c	 lea	 eax, DWORD PTR [edx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  0008c	3b f8		 cmp	 edi, eax
  0008e	74 14		 je	 SHORT $LN49@SSkin

; 2301 :         return _BUF_SIZE <= _Myres;

  00090	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00094	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  00097	72 02		 jb	 SHORT $LN45@SSkin

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00099	8b 00		 mov	 eax, DWORD PTR [eax]
$LN45@SSkin:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0009b	51		 push	 ecx
  0009c	50		 push	 eax
  0009d	8b cf		 mov	 ecx, edi
  0009f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN49@SSkin:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 105  : 		}

  000a4	8b c6		 mov	 eax, esi
  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	5f		 pop	 edi
  000b2	5e		 pop	 esi
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SSkin@CRaceData@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SSkin@CRaceData@@QAE@ABU01@@Z$1:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 1c	 add	 ecx, 28			; 0000001cH
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0SSkin@CRaceData@@QAE@ABU01@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SSkin@CRaceData@@QAE@ABU01@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SSkin@CRaceData@@QAE@ABU01@@Z ENDP			; CRaceData::SSkin::SSkin
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::~map<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SComboAttackData>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 20		 push	 32			; 00000020H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KUSComboAttackData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::~map<unsigned long,CRaceData::SComboAttackData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKUSComboAttackData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SComboAttackData> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1SComboAttackData@CRaceData@@QAE@XZ
_TEXT	SEGMENT
??1SComboAttackData@CRaceData@@QAE@XZ PROC		; CRaceData::SComboAttackData::~SComboAttackData, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN6@SComboAtta

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN22@SComboAtta

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN19@SComboAtta

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN22@SComboAtta:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN6@SComboAtta:
  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN19@SComboAtta:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@SComboAtta:
  00050	cc		 int	 3
??1SComboAttackData@CRaceData@@QAE@XZ ENDP		; CRaceData::SComboAttackData::~SComboAttackData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@KUSModelData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KUSModelData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned long,CRaceData::SModelData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SModelData> > >::~map<unsigned long,CRaceData::SModelData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SModelData> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKUSModelData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CRaceData::SModelData> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CRaceData::SModelData>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 20		 push	 32			; 00000020H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KUSModelData@CRaceData@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKUSModelData@CRaceData@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned long,CRaceData::SModelData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SModelData> > >::~map<unsigned long,CRaceData::SModelData,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CRaceData::SModelData> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__Last$1$ = -4						; size = 4
??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ PROC ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0000a	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0000c	85 db		 test	 ebx, ebx
  0000e	0f 84 b6 00 00
	00		 je	 $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00014	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00017	89 45 fc	 mov	 DWORD PTR __Last$1$[ebp], eax
  0001a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0001b	3b d8		 cmp	 ebx, eax
  0001d	74 54		 je	 SHORT $LN8@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0001f	8d 73 20	 lea	 esi, DWORD PTR [ebx+32]
$LL9@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00022	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00024	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00027	72 2f		 jb	 SHORT $LN73@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0002c	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00033	72 16		 jb	 SHORT $LN41@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00035	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00038	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00040	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00043	0f 87 87 00 00
	00		 ja	 $LN62@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN41@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	8b 45 fc	 mov	 eax, DWORD PTR __Last$1$[ebp]
  00055	83 c4 08	 add	 esp, 8
$LN73@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00058	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0005f	83 c3 30	 add	 ebx, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00062	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0006c	83 c6 30	 add	 esi, 48			; 00000030H
  0006f	3b d8		 cmp	 ebx, eax
  00071	75 af		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00073	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00076	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0007b	8b 37		 mov	 esi, DWORD PTR [edi]
  0007d	2b ce		 sub	 ecx, esi
  0007f	f7 e9		 imul	 ecx
  00081	c1 fa 03	 sar	 edx, 3
  00084	8b c2		 mov	 eax, edx
  00086	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00089	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008b	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0008e	c1 e1 04	 shl	 ecx, 4

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00091	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00097	72 12		 jb	 SHORT $LN65@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00099	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0009c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0009f	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a1	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a7	77 27		 ja	 SHORT $LN62@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000a9	8b f2		 mov	 esi, edx
$LN65@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000ab	51		 push	 ecx
  000ac	56		 push	 esi
  000ad	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b2	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000b5	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 2113 :             _Mylast  = nullptr;

  000bb	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  000c2	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  000c9	5e		 pop	 esi
$LN4@vector:
  000ca	5f		 pop	 edi

; 835  :     }

  000cb	5b		 pop	 ebx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
$LN62@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN74@vector:
  000d5	cc		 int	 3
??1?$vector@USAttachingData@NRaceData@@V?$allocator@USAttachingData@NRaceData@@@std@@@std@@QAE@XZ ENDP ; std::vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >::~vector<NRaceData::SAttachingData,std::allocator<NRaceData::SAttachingData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@@std@@QAE@XZ PROC ; std::map<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::~map<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >
??1?$map@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@@std@@QAE@XZ ENDP ; std::map<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::~map<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,CRaceData::SMotionModeData *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,CRaceData::SMotionModeData *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@GPAUSMotionModeData@CRaceData@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUSMotionModeData@CRaceData@@@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >::~_Tree<std::_Tmap_traits<unsigned short,CRaceData::SMotionModeData *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CRaceData::SMotionModeData *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??_GSMotionModeData@CRaceData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GSMotionModeData@CRaceData@@UAEPAXI@Z PROC		; CRaceData::SMotionModeData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 62   : 		virtual ~SMotionModeData() {}

  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8d 77 08	 lea	 esi, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000a	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 62   : 		virtual ~SMotionModeData() {}

  0000c	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7SMotionModeData@CRaceData@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	56		 push	 esi
  00018	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001d	6a 20		 push	 32			; 00000020H
  0001f	ff 36		 push	 DWORD PTR [esi]
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
  00029	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0002d	74 0b		 je	 SHORT $LN39@scalar
  0002f	6a 10		 push	 16			; 00000010H
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN39@scalar:
  0003a	8b c7		 mov	 eax, edi
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??_GSMotionModeData@CRaceData@@UAEPAXI@Z ENDP		; CRaceData::SMotionModeData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h
;	COMDAT ??1SMotionModeData@CRaceData@@UAE@XZ
_TEXT	SEGMENT
??1SMotionModeData@CRaceData@@UAE@XZ PROC		; CRaceData::SMotionModeData::~SMotionModeData, COMDAT
; _this$ = ecx

; 62   : 		virtual ~SMotionModeData() {}

  00000	56		 push	 esi
  00001	8d 71 08	 lea	 esi, DWORD PTR [ecx+8]
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7SMotionModeData@CRaceData@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	8b ce		 mov	 ecx, esi
  0000e	ff 70 04	 push	 DWORD PTR [eax+4]
  00011	56		 push	 esi
  00012	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00017	6a 20		 push	 32			; 00000020H
  00019	ff 36		 push	 DWORD PTR [esi]
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.h

; 62   : 		virtual ~SMotionModeData() {}

  00024	c3		 ret	 0
??1SMotionModeData@CRaceData@@UAE@XZ ENDP		; CRaceData::SMotionModeData::~SMotionModeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBGV?$vector@USMotion@CRaceData@@V?$allocator@USMotion@CRaceData@@@std@@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned short const ,std::vector<CRaceData::SMotion,std::allocator<CRaceData::SMotion> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@KV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::~map<unsigned long,std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
$T1 = 12						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2730 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	57		 push	 edi

; 2731 :         auto& _My_data = _Mypair._Myval2;
; 2732 :         _STL_INTERNAL_CHECK(!_My_data._Large_string_engaged());
; 2733 : 
; 2734 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2735 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2736 :         } else {
; 2737 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2738 :         }
; 2739 : 
; 2740 :         if (_Count > max_size()) {

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00010	0f 87 9f 00 00
	00		 ja	 $LN29@Construct

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00016	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  0001d	83 ff 10	 cmp	 edi, 16			; 00000010H
  00020	73 1a		 jae	 SHORT $LN3@Construct

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00022	57		 push	 edi
  00023	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2749 :             _My_data._Mysize = _Count;

  00026	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 _memmove
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;
; 2751 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2752 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2753 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2754 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2755 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count);
; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  00037	5b		 pop	 ebx
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN3@Construct:
  0003c	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0003d	8b f7		 mov	 esi, edi
  0003f	83 ce 0f	 or	 esi, 15			; 0000000fH
  00042	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00048	76 15		 jbe	 SHORT $LN10@Construct

; 4885 :             return _Max;

  0004a	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0004f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0005a	83 c4 04	 add	 esp, 4
  0005d	eb 30		 jmp	 SHORT $LN27@Construct
$LN10@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  0005f	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00064	3b f0		 cmp	 esi, eax
  00066	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00069	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00071	72 0b		 jb	 SHORT $LN18@Construct

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00079	83 c4 04	 add	 esp, 4
  0007c	eb 11		 jmp	 SHORT $LN27@Construct
$LN18@Construct:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN19@Construct

; 77   :         return ::operator new(_Bytes);

  00082	50		 push	 eax
  00083	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00088	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0008b	eb 02		 jmp	 SHORT $LN27@Construct
$LN19@Construct:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0008d	33 c0		 xor	 eax, eax
$LN27@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0008f	57		 push	 edi
  00090	ff 75 08	 push	 DWORD PTR __Arg$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00093	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00096	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00097	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  00099	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 2782 :         _My_data._Myres  = _New_capacity;

  0009c	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0009f	e8 00 00 00 00	 call	 _memcpy

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000a4	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000aa	5e		 pop	 esi
  000ab	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
  000af	5f		 pop	 edi

; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2791 :         }
; 2792 : 
; 2793 :         _ASAN_STRING_CREATE(*this);
; 2794 :         _Proxy._Release();
; 2795 :     }

  000b0	5b		 pop	 ebx
  000b1	5d		 pop	 ebp
  000b2	c2 08 00	 ret	 8
$LN29@Construct:

; 2741 :             _Xlen_string(); // result too long

  000b5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN26@Construct:
  000ba	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h
;	COMDAT ?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T1 = 12						; size = 4
_str$ = 12						; size = 4
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z PROC ; CFileNameHelper::NoExtension, COMDAT

; 218  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4646 :         return static_cast<size_type>(

  00006	8b 75 0c	 mov	 esi, DWORD PTR _str$[ebp]

; 2292 :         const value_type* _Result = _Bx._Buf;

  00009	8b d6		 mov	 edx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 218  : {

  0000b	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0000c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 4646 :         return static_cast<size_type>(

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2293 :         if (_Large_string_engaged()) {

  00013	72 02		 jb	 SHORT $LN98@NoExtensio

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00015	8b 16		 mov	 edx, DWORD PTR [esi]
$LN98@NoExtensio:

; 695  :     if (_Hay_size != 0) { // room for match, look for it

  00017	85 c0		 test	 eax, eax
  00019	74 5e		 je	 SHORT $LN97@NoExtensio
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0001b	83 c9 ff	 or	 ecx, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  0001e	48		 dec	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0001f	3b c1		 cmp	 eax, ecx
  00021	0f 42 c8	 cmovb	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00024	03 ca		 add	 ecx, edx

; 465  :         return _Left == _Right;

  00026	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 697  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00029	74 0f		 je	 SHORT $LN90@NoExtensio
  0002b	0f 1f 44 00 00	 npad	 5
$LL16@NoExtensio:

; 699  :             }
; 700  : 
; 701  :             if (_Match_try == _Haystack) {

  00030	3b ca		 cmp	 ecx, edx
  00032	74 45		 je	 SHORT $LN97@NoExtensio

; 696  :         for (auto _Match_try = _Haystack + (_STD min)(_Start_at, _Hay_size - 1);; --_Match_try) {

  00034	49		 dec	 ecx

; 465  :         return _Left == _Right;

  00035	80 39 2e	 cmp	 BYTE PTR [ecx], 46	; 0000002eH

; 697  :             if (_Traits::eq(*_Match_try, _Ch)) {

  00038	75 f6		 jne	 SHORT $LL16@NoExtensio
$LN90@NoExtensio:

; 698  :                 return static_cast<size_t>(_Match_try - _Haystack); // found a match

  0003a	2b ca		 sub	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 221  : 	if (std::string::npos != npos) {

  0003c	83 f9 ff	 cmp	 ecx, -1
  0003f	74 38		 je	 SHORT $LN97@NoExtensio
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00041	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00044	0f 57 c0	 xorps	 xmm0, xmm0
  00047	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0004a	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00051	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00058	39 4e 10	 cmp	 DWORD PTR [esi+16], ecx
  0005b	0f 42 4e 10	 cmovb	 ecx, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0005f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00063	72 02		 jb	 SHORT $LN44@NoExtensio

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00065	8b 36		 mov	 esi, DWORD PTR [esi]
$LN44@NoExtensio:

; 2646 :         _Construct<_Construct_strategy::_From_ptr>(

  00067	51		 push	 ecx
  00068	56		 push	 esi
  00069	8b cb		 mov	 ecx, ebx
  0006b	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
  00070	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 226  : }

  00071	5e		 pop	 esi
  00072	8b c3		 mov	 eax, ebx
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
$LN97@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00079	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  0007c	0f 57 c0	 xorps	 xmm0, xmm0
  0007f	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00082	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00089	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00090	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00094	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00097	89 45 0c	 mov	 DWORD PTR $T1[ebp], eax

; 2293 :         if (_Large_string_engaged()) {

  0009a	72 02		 jb	 SHORT $LN60@NoExtensio

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0009c	8b 36		 mov	 esi, DWORD PTR [esi]
$LN60@NoExtensio:

; 2740 :         if (_Count > max_size()) {

  0009e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000a3	0f 87 a5 00 00
	00		 ja	 $LN103@NoExtensio

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  000a9	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  000b0	83 f8 10	 cmp	 eax, 16			; 00000010H
  000b3	73 18		 jae	 SHORT $LN66@NoExtensio

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000b5	6a 10		 push	 16			; 00000010H
  000b7	56		 push	 esi
  000b8	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  000b9	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000bc	e8 00 00 00 00	 call	 _memmove
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 226  : }

  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	8b c3		 mov	 eax, ebx
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
$LN66@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000cd	8b f8		 mov	 edi, eax
  000cf	83 cf 0f	 or	 edi, 15			; 0000000fH
  000d2	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000d8	76 1a		 jbe	 SHORT $LN74@NoExtensio

; 4885 :             return _Max;

  000da	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000df	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000e4	51		 push	 ecx
  000e5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ea	8b d0		 mov	 edx, eax
  000ec	83 c4 04	 add	 esp, 4
  000ef	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  000f2	eb 3b		 jmp	 SHORT $LN80@NoExtensio
$LN74@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000f4	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000f9	3b f9		 cmp	 edi, ecx
  000fb	0f 42 f9	 cmovb	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000fe	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00101	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00107	72 10		 jb	 SHORT $LN81@NoExtensio

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00109	51		 push	 ecx
  0010a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0010f	8b d0		 mov	 edx, eax
  00111	83 c4 04	 add	 esp, 4
  00114	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  00117	eb 16		 jmp	 SHORT $LN80@NoExtensio
$LN81@NoExtensio:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00119	85 c9		 test	 ecx, ecx
  0011b	74 10		 je	 SHORT $LN82@NoExtensio

; 77   :         return ::operator new(_Bytes);

  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00123	8b d0		 mov	 edx, eax

; 77   :         return ::operator new(_Bytes);

  00125	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00128	8b 45 0c	 mov	 eax, DWORD PTR $T1[ebp]
  0012b	eb 02		 jmp	 SHORT $LN80@NoExtensio
$LN82@NoExtensio:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0012d	33 d2		 xor	 edx, edx
$LN80@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  0012f	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00132	89 13		 mov	 DWORD PTR [ebx], edx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00134	51		 push	 ecx
  00135	56		 push	 esi
  00136	52		 push	 edx

; 2781 :         _My_data._Mysize = _Count;

  00137	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 2782 :         _My_data._Myres  = _New_capacity;

  0013a	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013d	e8 00 00 00 00	 call	 _memcpy
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\filename.h

; 226  : }

  00142	83 c4 0c	 add	 esp, 12			; 0000000cH
  00145	8b c3		 mov	 eax, ebx
  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	5b		 pop	 ebx
  0014a	8b e5		 mov	 esp, ebp
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
$LN103@NoExtensio:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2741 :             _Xlen_string(); // result too long

  0014e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN100@NoExtensio:
  00153	cc		 int	 3
?NoExtension@CFileNameHelper@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAV23@@Z ENDP ; CFileNameHelper::NoExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3528 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3529 :         // assign [_Ptr, _Ptr + _Count)
; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2283 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3531 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3532 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3534 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4903 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4885 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4889 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 77   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3539 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv509 = -12						; size = 4
$T1 = -8						; size = 4
tv521 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv514 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3422 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3423 :         // append [_Ptr, _Ptr + _Count)
; 3424 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3425 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3426 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3427 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3428 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3429 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3430 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3443 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4939 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4941 :         }
; 4942 : 
; 4943 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4885 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv514[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv514[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4889 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv514[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4947 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 77   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4959 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR $T1[ebp], 16	; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv521[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv509[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4960 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv521[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv509[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00123	41		 inc	 ecx

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3434 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4940 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2330 :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\RaceData.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
