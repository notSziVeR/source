; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\Distribute\ActorInstanceBattle.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?CanAct@CActorInstance@@QAE_NXZ			; CActorInstance::CanAct
PUBLIC	?CanMove@CActorInstance@@QAE_NXZ		; CActorInstance::CanMove
PUBLIC	?CanAttack@CActorInstance@@QAE_NXZ		; CActorInstance::CanAttack
PUBLIC	?CanUseSkill@CActorInstance@@QAE_NXZ		; CActorInstance::CanUseSkill
PUBLIC	?CanCheckAttacking@CActorInstance@@QAEHXZ	; CActorInstance::CanCheckAttacking
PUBLIC	?IsClickableDistanceDestInstance@CActorInstance@@QAEHAAV1@M@Z ; CActorInstance::IsClickableDistanceDestInstance
PUBLIC	?InputNormalAttackCommand@CActorInstance@@QAEXM@Z ; CActorInstance::InputNormalAttackCommand
PUBLIC	?InputComboAttackCommand@CActorInstance@@QAE_NM@Z ; CActorInstance::InputComboAttackCommand
PUBLIC	?isAttacking@CActorInstance@@QAEHXZ		; CActorInstance::isAttacking
PUBLIC	?isNormalAttacking@CActorInstance@@QAEHXZ	; CActorInstance::isNormalAttacking
PUBLIC	?isComboAttacking@CActorInstance@@QAEHXZ	; CActorInstance::isComboAttacking
PUBLIC	?IsSplashAttacking@CActorInstance@@QAEHXZ	; CActorInstance::IsSplashAttacking
PUBLIC	?IsUsingMovingSkill@CActorInstance@@QAEHXZ	; CActorInstance::IsUsingMovingSkill
PUBLIC	?IsActEmotion@CActorInstance@@QAEHXZ		; CActorInstance::IsActEmotion
PUBLIC	?GetComboIndex@CActorInstance@@QAEKXZ		; CActorInstance::GetComboIndex
PUBLIC	?GetAttackingElapsedTime@CActorInstance@@QAEMXZ	; CActorInstance::GetAttackingElapsedTime
PUBLIC	?SetBlendingPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@M@Z ; CActorInstance::SetBlendingPosition
PUBLIC	?ResetBlendingPosition@CActorInstance@@QAEXXZ	; CActorInstance::ResetBlendingPosition
PUBLIC	?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z ; CActorInstance::GetBlendingPosition
PUBLIC	?NormalAttack@CActorInstance@@QAEHMM@Z		; CActorInstance::NormalAttack
PUBLIC	?ComboAttack@CActorInstance@@QAEHKMM@Z		; CActorInstance::ComboAttack
PUBLIC	?SetBattleHitEffect@CActorInstance@@QAEXK@Z	; CActorInstance::SetBattleHitEffect
PUBLIC	?SetBattleAttachEffect@CActorInstance@@QAEXK@Z	; CActorInstance::SetBattleAttachEffect
PUBLIC	?CanFishing@CActorInstance@@QAE_NXZ		; CActorInstance::CanFishing
PUBLIC	?OnShootDamage@CActorInstance@@UAEXXZ		; CActorInstance::OnShootDamage
PUBLIC	?ComboProcess@CActorInstance@@QAEXXZ		; CActorInstance::ComboProcess
PUBLIC	?ShakeProcess@CActorInstance@@QAEXXZ		; CActorInstance::ShakeProcess
PUBLIC	?__CanInputNormalAttackCommand@CActorInstance@@QAE_NXZ ; CActorInstance::__CanInputNormalAttackCommand
PUBLIC	?__Shake@CActorInstance@@AAEXK@Z		; CActorInstance::__Shake
PUBLIC	?__IsInSplashTime@CActorInstance@@IAE_NXZ	; CActorInstance::__IsInSplashTime
PUBLIC	?isValidAttacking@CActorInstance@@IAEHXZ	; CActorInstance::isValidAttacking
PUBLIC	?__GetOwnerTime@CActorInstance@@IAEMXZ		; CActorInstance::__GetOwnerTime
PUBLIC	?__GetOwnerVID@CActorInstance@@IAEKXZ		; CActorInstance::__GetOwnerVID
PUBLIC	?__CanPushDestActor@CActorInstance@@IAE_NAAV1@@Z ; CActorInstance::__CanPushDestActor
PUBLIC	?__RunNextCombo@CActorInstance@@IAEXXZ		; CActorInstance::__RunNextCombo
PUBLIC	?__ClearCombo@CActorInstance@@IAEXXZ		; CActorInstance::__ClearCombo
PUBLIC	?__OnEndCombo@CActorInstance@@IAEXXZ		; CActorInstance::__OnEndCombo
PUBLIC	?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess
PUBLIC	?__ProcessMotionEventAttackSuccess@CActorInstance@@IAEXKEAAV1@@Z ; CActorInstance::__ProcessMotionEventAttackSuccess
PUBLIC	?__ProcessMotionAttackSuccess@CActorInstance@@IAEXKAAV1@@Z ; CActorInstance::__ProcessMotionAttackSuccess
PUBLIC	?__HitStone@CActorInstance@@IAEXAAV1@@Z		; CActorInstance::__HitStone
PUBLIC	?__HitGood@CActorInstance@@IAEXAAV1@@Z		; CActorInstance::__HitGood
PUBLIC	?__HitGreate@CActorInstance@@IAEXAAV1@@Z	; CActorInstance::__HitGreate
PUBLIC	?__PushDirect@CActorInstance@@IAEXAAV1@@Z	; CActorInstance::__PushDirect
PUBLIC	?__PushCircle@CActorInstance@@IAEXAAV1@@Z	; CActorInstance::__PushCircle
PUBLIC	?__isInvisible@CActorInstance@@IAE_NXZ		; CActorInstance::__isInvisible
PUBLIC	?__SetFallingDirection@CActorInstance@@IAEXMM@Z	; CActorInstance::__SetFallingDirection
PUBLIC	?__IsMovingSkill@CActorInstance@@IAEHG@Z	; CActorInstance::__IsMovingSkill
PUBLIC	?IS_HUGE_RACE@@YA_NI@Z				; IS_HUGE_RACE
PUBLIC	?IS_PARTY_HUNTING_RACE@@YA_NI@Z			; IS_PARTY_HUNTING_RACE
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
PUBLIC	??_C@_0CF@IFJHLB@Attacking?5motion?5data?5is?5NULL?$CB?5@ ; `string'
PUBLIC	??_C@_0DO@CGEPLNOG@CActorInstance?3?3__RunNextCombo?$CI@ ; `string'
PUBLIC	??_C@_0IP@BHEKJOJN@CActorInstance?3?3__RunNextCombo?$CI@ ; `string'
PUBLIC	??_C@_0ID@NOGKCFDC@CActorInstance?3?3__RunNextCombo?$CI@ ; `string'
PUBLIC	??_C@_0EC@FEDLPHGA@ProcessSucceedingAttacking?3?5Unk@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f666666
PUBLIC	__real@40400000
PUBLIC	__real@41f00000
PUBLIC	__real@42652ee0
PUBLIC	__real@43870000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_rand:PROC
EXTRN	_D3DXVec2Normalize@8:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	?Tracef@@YAXPBDZZ:PROC				; Tracef
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	?ELTimer_GetMSec@@YAKXZ:PROC			; ELTimer_GetMSec
EXTRN	?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ:PROC ; CGraphicObjectInstance::GetPosition
EXTRN	?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0M@Z:PROC ; CEffectManager::CreateEffect
EXTRN	?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z:PROC ; CRaceData::GetMotionDataPointer
EXTRN	?GetNormalAttackIndex@CRaceData@@QAEHGPAG@Z:PROC ; CRaceData::GetNormalAttackIndex
EXTRN	?GetComboDataPointer@CRaceData@@QAEHGGPAPAUSComboAttackData@1@@Z:PROC ; CRaceData::GetComboDataPointer
EXTRN	?GetMotionDuration@CRaceMotionData@@QAEMXZ:PROC	; CRaceMotionData::GetMotionDuration
EXTRN	?IsComboInputTimeData@CRaceMotionData@@QBEHXZ:PROC ; CRaceMotionData::IsComboInputTimeData
EXTRN	?GetComboInputStartTime@CRaceMotionData@@QBEMXZ:PROC ; CRaceMotionData::GetComboInputStartTime
EXTRN	?GetNextComboTime@CRaceMotionData@@QBEMXZ:PROC	; CRaceMotionData::GetNextComboTime
EXTRN	?GetComboInputEndTime@CRaceMotionData@@QBEMXZ:PROC ; CRaceMotionData::GetComboInputEndTime
EXTRN	?isAttackingMotion@CRaceMotionData@@QBEHXZ:PROC	; CRaceMotionData::isAttackingMotion
EXTRN	?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ:PROC ; CRaceMotionData::GetMotionAttackDataPointer
EXTRN	?GetMotionAttackDataReference@CRaceMotionData@@QBEABUSMotionAttackData@NRaceData@@XZ:PROC ; CRaceMotionData::GetMotionAttackDataReference
EXTRN	?HasSplashMotionEvent@CRaceMotionData@@QBEHXZ:PROC ; CRaceMotionData::HasSplashMotionEvent
EXTRN	?IsCancelEnableSkill@CRaceMotionData@@QBEHXZ:PROC ; CRaceMotionData::IsCancelEnableSkill
EXTRN	?GetMotionEventDataCount@CRaceMotionData@@QBEKXZ:PROC ; CRaceMotionData::GetMotionEventDataCount
EXTRN	?GetMotionAttackingEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventDataAttack@NMotionEvent@@@Z:PROC ; CRaceMotionData::GetMotionAttackingEventDataPointer
EXTRN	?Initialize@CPhysicsObject@@QAEXXZ:PROC		; CPhysicsObject::Initialize
EXTRN	?isBlending@CPhysicsObject@@QAE_NXZ:PROC	; CPhysicsObject::isBlending
EXTRN	?SetDirection@CPhysicsObject@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CPhysicsObject::SetDirection
EXTRN	?IncreaseExternalForce@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z:PROC ; CPhysicsObject::IncreaseExternalForce
EXTRN	?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z:PROC ; CPhysicsObject::SetLastPosition
EXTRN	?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; CPhysicsObject::GetLastPosition
EXTRN	?InsertDelay@CGraphicThingInstance@@QAEXM@Z:PROC ; CGraphicThingInstance::InsertDelay
EXTRN	?GetLocalTime@CGraphicThingInstance@@QAEMXZ:PROC ; CGraphicThingInstance::GetLocalTime
EXTRN	?GetRace@CActorInstance@@QAEKXZ:PROC		; CActorInstance::GetRace
EXTRN	?IsNPC@CActorInstance@@QAE_NXZ:PROC		; CActorInstance::IsNPC
EXTRN	?IsStone@CActorInstance@@QAE_NXZ:PROC		; CActorInstance::IsStone
EXTRN	?IsDoor@CActorInstance@@QAE_NXZ:PROC		; CActorInstance::IsDoor
EXTRN	?IsBuilding@CActorInstance@@QAE_NXZ:PROC	; CActorInstance::IsBuilding
EXTRN	?IsBowMode@CActorInstance@@QAE_NXZ:PROC		; CActorInstance::IsBowMode
EXTRN	?AttachEffectByID@CActorInstance@@QAEKKPBDKPBUD3DXVECTOR3@@M1@Z:PROC ; CActorInstance::AttachEffectByID
EXTRN	?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z:PROC ; CActorInstance::InterceptOnceMotion
EXTRN	?PushOnceMotion@CActorInstance@@QAE_NKMM@Z:PROC	; CActorInstance::PushOnceMotion
EXTRN	?PushLoopMotion@CActorInstance@@QAE_NKMM@Z:PROC	; CActorInstance::PushLoopMotion
EXTRN	?isLock@CActorInstance@@QAEHXZ:PROC		; CActorInstance::isLock
EXTRN	?IsUsingSkill@CActorInstance@@QAEHXZ:PROC	; CActorInstance::IsUsingSkill
EXTRN	?CanCancelSkill@CActorInstance@@QAEHXZ:PROC	; CActorInstance::CanCancelSkill
EXTRN	?IsSleep@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsSleep
EXTRN	?IsParalysis@CActorInstance@@QAEHXZ:PROC	; CActorInstance::IsParalysis
EXTRN	?IsFaint@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsFaint
EXTRN	?IsResistFallen@CActorInstance@@QAEHXZ:PROC	; CActorInstance::IsResistFallen
EXTRN	?IsWaiting@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsWaiting
EXTRN	?IsDead@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsDead
EXTRN	?IsStun@CActorInstance@@QAEHXZ:PROC		; CActorInstance::IsStun
EXTRN	?IsKnockDown@CActorInstance@@QAEHXZ:PROC	; CActorInstance::IsKnockDown
EXTRN	?Die@CActorInstance@@QAEXXZ:PROC		; CActorInstance::Die
EXTRN	?GetPositionVectorRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ:PROC ; CActorInstance::GetPositionVectorRef
EXTRN	?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z:PROC ; CActorInstance::NEW_SetAtkPixelPosition
EXTRN	?NEW_GetAtkPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ:PROC ; CActorInstance::NEW_GetAtkPixelPositionRef
EXTRN	?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ:PROC ; CActorInstance::NEW_GetCurPixelPositionRef
EXTRN	?GetPixelPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z:PROC ; CActorInstance::GetPixelPosition
EXTRN	?GetRotation@CActorInstance@@QAEMXZ:PROC	; CActorInstance::GetRotation
EXTRN	?BlendRotation@CActorInstance@@QAEXMM@Z:PROC	; CActorInstance::BlendRotation
EXTRN	?SetAdvancingRotation@CActorInstance@@QAEXM@Z:PROC ; CActorInstance::SetAdvancingRotation
EXTRN	?__GetAttackSpeed@CActorInstance@@IAEMXZ:PROC	; CActorInstance::__GetAttackSpeed
EXTRN	?__IsKnockDownMotion@CActorInstance@@IAE_NXZ:PROC ; CActorInstance::__IsKnockDownMotion
EXTRN	?__IsStandUpMotion@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__IsStandUpMotion
EXTRN	?__IsMountingHorse@CActorInstance@@IAE_NXZ:PROC	; CActorInstance::__IsMountingHorse
EXTRN	?__GetCurrentMotionIndex@CActorInstance@@IAEGXZ:PROC ; CActorInstance::__GetCurrentMotionIndex
EXTRN	?__GetCurrentComboType@CActorInstance@@IAEGXZ:PROC ; CActorInstance::__GetCurrentComboType
EXTRN	?__OnAttack@CActorInstance@@QAEXG@Z:PROC	; CActorInstance::__OnAttack
EXTRN	?__OnHit@CActorInstance@@IAEXIAAV1@H@Z:PROC	; CActorInstance::__OnHit
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIatan2:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A DD 01H DUP (?) ; CSingleton<CEffectManager>::ms_singleton
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@43870000
CONST	SEGMENT
__real@43870000 DD 043870000r			; 270
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0EC@FEDLPHGA@ProcessSucceedingAttacking?3?5Unk@
CONST	SEGMENT
??_C@_0EC@FEDLPHGA@ProcessSucceedingAttacking?3?5Unk@ DB 'ProcessSucceedi'
	DB	'ngAttacking: Unknown AttackingData.iHittingType %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ID@NOGKCFDC@CActorInstance?3?3__RunNextCombo?$CI@
CONST	SEGMENT
??_C@_0ID@NOGKCFDC@CActorInstance?3?3__RunNextCombo?$CI@ DB 'CActorInstan'
	DB	'ce::__RunNextCombo(wComboType=%d, wComboIndex=%d) - (dwComboA'
	DB	'rrayIndex=%d) >= (pComboData->ComboIndexVector.size()=%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IP@BHEKJOJN@CActorInstance?3?3__RunNextCombo?$CI@
CONST	SEGMENT
??_C@_0IP@BHEKJOJN@CActorInstance?3?3__RunNextCombo?$CI@ DB 'CActorInstan'
	DB	'ce::__RunNextCombo(wComboType=%d, wComboIndex=%d) - m_pkCurRa'
	DB	'ceData->GetComboDataPointer(m_wcurMotionMode=%d, &pComboData)'
	DB	' == NULL', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@CGEPLNOG@CActorInstance?3?3__RunNextCombo?$CI@
CONST	SEGMENT
??_C@_0DO@CGEPLNOG@CActorInstance?3?3__RunNextCombo?$CI@ DB 'CActorInstan'
	DB	'ce::__RunNextCombo(wComboType=%d, wComboIndex=%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IFJHLB@Attacking?5motion?5data?5is?5NULL?$CB?5@
CONST	SEGMENT
??_C@_0CF@IFJHLB@Attacking?5motion?5data?5is?5NULL?$CB?5@ DB 'Attacking m'
	DB	'otion data is NULL! : %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?IS_PARTY_HUNTING_RACE@@YA_NI@Z
_TEXT	SEGMENT
_vnum$ = 8						; size = 4
?IS_PARTY_HUNTING_RACE@@YA_NI@Z PROC			; IS_PARTY_HUNTING_RACE, COMDAT

; 680  : 	return true;

  00000	b0 01		 mov	 al, 1

; 681  : 
; 682  : 
; 683  : }

  00002	c3		 ret	 0
?IS_PARTY_HUNTING_RACE@@YA_NI@Z ENDP			; IS_PARTY_HUNTING_RACE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?IS_HUGE_RACE@@YA_NI@Z
_TEXT	SEGMENT
_vnum$ = 8						; size = 4
?IS_HUGE_RACE@@YA_NI@Z PROC				; IS_HUGE_RACE, COMDAT

; 623  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  : 	switch (vnum)

  00003	81 7d 08 bd 09
	00 00		 cmp	 DWORD PTR _vnum$[ebp], 2493 ; 000009bdH
  0000a	0f 94 c0	 sete	 al

; 625  : 	{
; 626  : 	case 2493:
; 627  : 		return true;
; 628  : 	}
; 629  : 	return false;
; 630  : }

  0000d	5d		 pop	 ebp
  0000e	c3		 ret	 0
?IS_HUGE_RACE@@YA_NI@Z ENDP				; IS_HUGE_RACE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__IsMovingSkill@CActorInstance@@IAEHG@Z
_TEXT	SEGMENT
_wSkillNumber$ = 8					; size = 2
?__IsMovingSkill@CActorInstance@@IAEHG@Z PROC		; CActorInstance::__IsMovingSkill, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	enum
; 471  : 	{
; 472  : 		HORSE_DASH_SKILL_NUMBER = 137,
; 473  : 	};
; 474  : 
; 475  : 	return HORSE_DASH_SKILL_NUMBER == wSkillNumber;

  00003	b9 89 00 00 00	 mov	 ecx, 137		; 00000089H
  00008	33 c0		 xor	 eax, eax
  0000a	66 3b 4d 08	 cmp	 cx, WORD PTR _wSkillNumber$[ebp]
  0000e	0f 94 c0	 sete	 al

; 476  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?__IsMovingSkill@CActorInstance@@IAEHG@Z ENDP		; CActorInstance::__IsMovingSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__SetFallingDirection@CActorInstance@@IAEXMM@Z
_TEXT	SEGMENT
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?__SetFallingDirection@CActorInstance@@IAEXMM@Z PROC	; CActorInstance::__SetFallingDirection, COMDAT
; _this$ = ecx

; 1089 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]

; 1090 : 	m_PhysicsObject.SetDirection(D3DXVECTOR3(fx, fy, 0.0f));

  00015	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00018	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 1090 : 	m_PhysicsObject.SetDirection(D3DXVECTOR3(fx, fy, 0.0f));

  0001d	81 c1 c4 03 00
	00		 add	 ecx, 964		; 000003c4H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00023	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 1090 : 	m_PhysicsObject.SetDirection(D3DXVECTOR3(fx, fy, 0.0f));

  00028	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00029	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 306  :     z = fz;

  0002e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 1090 : 	m_PhysicsObject.SetDirection(D3DXVECTOR3(fx, fy, 0.0f));

  00035	e8 00 00 00 00	 call	 ?SetDirection@CPhysicsObject@@QAEXABUD3DXVECTOR3@@@Z ; CPhysicsObject::SetDirection

; 1091 : }

  0003a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003d	33 cd		 xor	 ecx, ebp
  0003f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 08 00	 ret	 8
?__SetFallingDirection@CActorInstance@@IAEXMM@Z ENDP	; CActorInstance::__SetFallingDirection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__isInvisible@CActorInstance@@IAE_NXZ
_TEXT	SEGMENT
tv129 = -4						; size = 4
?__isInvisible@CActorInstance@@IAE_NXZ PROC		; CActorInstance::__isInvisible, COMDAT
; _this$ = ecx

; 1074 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 1075 : 	if (IsDead())

  00007	e8 00 00 00 00	 call	 ?IsDead@CActorInstance@@QAEHXZ ; CActorInstance::IsDead
  0000c	85 c0		 test	 eax, eax
  0000e	75 22		 jne	 SHORT $LN3@isInvisibl

; 1076 : 	{
; 1077 : 		return true;
; 1078 : 	}
; 1079 : 
; 1080 : 	if (CTimer::Instance().GetCurrentSecond() >= m_fInvisibleTime)

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00016	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0001b	d9 5d fc	 fstp	 DWORD PTR tv129[ebp]
  0001e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv129[ebp]
  00023	0f 2f 86 6c 04
	00 00		 comiss	 xmm0, DWORD PTR [esi+1132]
  0002a	5e		 pop	 esi
  0002b	0f 92 c0	 setb	 al

; 1086 : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
$LN3@isInvisibl:

; 1081 : 	{
; 1082 : 		return false;
; 1083 : 	}
; 1084 : 
; 1085 : 	return true;

  00032	b0 01		 mov	 al, 1
  00034	5e		 pop	 esi

; 1086 : }

  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c3		 ret	 0
?__isInvisible@CActorInstance@@IAE_NXZ ENDP		; CActorInstance::__isInvisible
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__PushCircle@CActorInstance@@IAEXAAV1@@Z
_TEXT	SEGMENT
tv245 = -24						; size = 4
tv251 = -20						; size = 4
_v3Direction$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rVictim$ = 8						; size = 4
?__PushCircle@CActorInstance@@IAEXAAV1@@Z PROC		; CActorInstance::__PushCircle, COMDAT
; _this$ = ecx

; 1044 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]

; 1045 : 	const TPixelPosition& c_rkPPosAtk = NEW_GetAtkPixelPositionRef();

  00014	e8 00 00 00 00	 call	 ?NEW_GetAtkPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetAtkPixelPositionRef

; 1048 : 
; 1049 : 	const D3DXVECTOR3& c_rv3SrcPos = v3SrcPos;
; 1050 : 	const D3DXVECTOR3& c_rv3DstPos = rVictim.GetPosition();

  00019	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 11 45 ec	 movss	 DWORD PTR tv251[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 1047 : 	D3DXVECTOR3 v3SrcPos(c_rkPPosAtk.x, -c_rkPPosAtk.y, c_rkPPosAtk.z);

  00024	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00029	f3 0f 11 45 e8	 movss	 DWORD PTR tv245[ebp], xmm0

; 1048 : 
; 1049 : 	const D3DXVECTOR3& c_rv3SrcPos = v3SrcPos;
; 1050 : 	const D3DXVECTOR3& c_rv3DstPos = rVictim.GetPosition();

  0002e	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
  00033	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR tv245[ebp]
  00038	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000

; 1051 : 
; 1052 : 	D3DXVECTOR3 v3Direction;
; 1053 : 	v3Direction.x = c_rv3DstPos.x - c_rv3SrcPos.x;

  0003f	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00043	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR tv251[ebp]
  00048	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Direction$[ebp], xmm0

; 1054 : 	v3Direction.y = c_rv3DstPos.y - c_rv3SrcPos.y;

  0004d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]

; 1055 : 	v3Direction.z = 0.0f;
; 1056 : 	D3DXVec3Normalize(&v3Direction, &v3Direction);

  00052	8d 45 f0	 lea	 eax, DWORD PTR _v3Direction$[ebp]
  00055	f3 0f 5c c1	 subss	 xmm0, xmm1
  00059	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _v3Direction$[ebp+8], 0
  00060	50		 push	 eax
  00061	50		 push	 eax
  00062	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Direction$[ebp+4], xmm0
  00067	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 1057 : 
; 1058 : 	rVictim.__SetFallingDirection(v3Direction.x, v3Direction.y);

  0006c	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v3Direction$[ebp+4]
  00071	83 ec 08	 sub	 esp, 8
  00074	8b ce		 mov	 ecx, esi
  00076	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0007c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _v3Direction$[ebp]
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	e8 00 00 00 00	 call	 ?__SetFallingDirection@CActorInstance@@IAEXMM@Z ; CActorInstance::__SetFallingDirection

; 1059 : }

  0008b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008e	33 cd		 xor	 ecx, ebp
  00090	5e		 pop	 esi
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?__PushCircle@CActorInstance@@IAEXAAV1@@Z ENDP		; CActorInstance::__PushCircle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__PushDirect@CActorInstance@@IAEXAAV1@@Z
_TEXT	SEGMENT
tv171 = -12						; size = 8
_v3Direction$$sroa$90$1$ = -4				; size = 4
_rVictim$ = 8						; size = 4
?__PushDirect@CActorInstance@@IAEXAAV1@@Z PROC		; CActorInstance::__PushDirect, COMDAT
; _this$ = ecx

; 1062 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1063 : 	D3DXVECTOR3 v3Direction;
; 1064 : 	v3Direction.x = cosf(D3DXToRadian(m_fcurRotation + 270.0f));

  00006	f3 0f 10 81 e4
	04 00 00	 movss	 xmm0, DWORD PTR [ecx+1252]
  0000e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@43870000
  00016	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0001e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00021	f2 0f 11 45 f4	 movsd	 QWORD PTR tv171[ebp], xmm0
  00026	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  0002b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  0002f	f3 0f 11 45 fc	 movss	 DWORD PTR _v3Direction$$sroa$90$1$[ebp], xmm0

; 758  :             return (float)sin(_X);

  00034	f2 0f 10 45 f4	 movsd	 xmm0, QWORD PTR tv171[ebp]
  00039	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 1068 : 	rVictim.__SetFallingDirection(v3Direction.x, v3Direction.y);

  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _rVictim$[ebp]
  00041	83 ec 08	 sub	 esp, 8
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00044	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 1068 : 	rVictim.__SetFallingDirection(v3Direction.x, v3Direction.y);

  00048	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0004e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _v3Direction$$sroa$90$1$[ebp]
  00053	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00058	e8 00 00 00 00	 call	 ?__SetFallingDirection@CActorInstance@@IAEXMM@Z ; CActorInstance::__SetFallingDirection

; 1069 : }

  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
?__PushDirect@CActorInstance@@IAEXAAV1@@Z ENDP		; CActorInstance::__PushDirect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__HitGreate@CActorInstance@@IAEXAAV1@@Z
_TEXT	SEGMENT
_v2Normal$ = -20					; size = 8
_v2VictimNormal$ = -12					; size = 8
_fVictimRotRad$ = -4					; size = 4
_fScalar$1$ = 8						; size = 4
_fRotRad$ = 8						; size = 4
_rVictim$ = 8						; size = 4
?__HitGreate@CActorInstance@@IAEXAAV1@@Z PROC		; CActorInstance::__HitGreate, COMDAT
; _this$ = ecx

; 934  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 935  : 	// DISABLE_KNOCKDOWN_ATTACK
; 936  : 	if (rVictim.IsKnockDown())

  00007	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?IsKnockDown@CActorInstance@@QAEHXZ ; CActorInstance::IsKnockDown
  00014	85 c0		 test	 eax, eax
  00016	0f 85 c8 01 00
	00		 jne	 $LN14@HitGreate

; 937  : 	{
; 938  : 		return;
; 939  : 	}
; 940  : 	if (rVictim.__IsStandUpMotion())

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?__IsStandUpMotion@CActorInstance@@IAE_NXZ ; CActorInstance::__IsStandUpMotion
  00023	84 c0		 test	 al, al
  00025	0f 85 b9 01 00
	00		 jne	 $LN14@HitGreate

; 941  : 	{
; 942  : 		return;
; 943  : 	}
; 944  : 	// END_OF_DISABLE_KNOCKDOWN_ATTACK
; 945  : 
; 946  : 	float fRotRad = D3DXToRadian(GetRotation());

  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00032	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35

; 947  : 	float fVictimRotRad = D3DXToRadian(rVictim.GetRotation());

  00038	8b ce		 mov	 ecx, esi
  0003a	d9 5d 08	 fstp	 DWORD PTR _fRotRad$[ebp]
  0003d	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00042	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotRad$[ebp]
  00047	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  0004d	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 947  : 	float fVictimRotRad = D3DXToRadian(rVictim.GetRotation());

  00050	d9 5d fc	 fstp	 DWORD PTR _fVictimRotRad$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00053	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00058	0f 57 c9	 xorps	 xmm1, xmm1
  0005b	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  0005f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotRad$[ebp]

; 653  :             return (float)cos(_X);

  00064	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 90   :     x = fx;

  00067	f3 0f 11 4d ec	 movss	 DWORD PTR _v2Normal$[ebp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0006c	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00071	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 91   :     y = fy;

  00075	f3 0f 11 45 f0	 movss	 DWORD PTR _v2Normal$[ebp+4], xmm0
  0007a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fVictimRotRad$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  0007f	0f 5a c0	 cvtps2pd xmm0, xmm0
  00082	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00087	0f 57 c9	 xorps	 xmm1, xmm1
  0008a	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  0008e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fVictimRotRad$[ebp]

; 653  :             return (float)cos(_X);

  00093	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 90   :     x = fx;

  00096	f3 0f 11 4d f4	 movss	 DWORD PTR _v2VictimNormal$[ebp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0009b	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  000a0	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 952  : 	D3DXVec2Normalize(&v2Normal, &v2Normal);

  000a4	8d 45 ec	 lea	 eax, DWORD PTR _v2Normal$[ebp]
  000a7	50		 push	 eax
  000a8	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 91   :     y = fy;

  000a9	f3 0f 11 45 f8	 movss	 DWORD PTR _v2VictimNormal$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 952  : 	D3DXVec2Normalize(&v2Normal, &v2Normal);

  000ae	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8

; 953  : 	D3DXVec2Normalize(&v2VictimNormal, &v2VictimNormal);

  000b3	8d 45 f4	 lea	 eax, DWORD PTR _v2VictimNormal$[ebp]
  000b6	50		 push	 eax
  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  000bd	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v2VictimNormal$[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 957  : 	rVictim.__Shake(100);

  000c2	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  000c4	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v2VictimNormal$[ebp]
  000c9	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _v2Normal$[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 957  : 	rVictim.__Shake(100);

  000ce	6a 64		 push	 100			; 00000064H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  000d0	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _v2Normal$[ebp]
  000d5	f3 0f 58 c8	 addss	 xmm1, xmm0
  000d9	f3 0f 11 4d 08	 movss	 DWORD PTR _fScalar$1$[ebp], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 957  : 	rVictim.__Shake(100);

  000de	e8 00 00 00 00	 call	 ?__Shake@CActorInstance@@AAEXK@Z ; CActorInstance::__Shake

; 958  : 
; 959  : 	if (rVictim.IsUsingSkill())

  000e3	8b ce		 mov	 ecx, esi
  000e5	e8 00 00 00 00	 call	 ?IsUsingSkill@CActorInstance@@QAEHXZ ; CActorInstance::IsUsingSkill
  000ea	85 c0		 test	 eax, eax
  000ec	0f 85 f2 00 00
	00		 jne	 $LN14@HitGreate

; 960  : 	{
; 961  : 		return;
; 962  : 	}
; 963  : 
; 964  : 	if (rVictim.IsStun())

  000f2	8b ce		 mov	 ecx, esi
  000f4	e8 00 00 00 00	 call	 ?IsStun@CActorInstance@@QAEHXZ ; CActorInstance::IsStun
  000f9	0f 57 c0	 xorps	 xmm0, xmm0
  000fc	85 c0		 test	 eax, eax
  000fe	74 52		 je	 SHORT $LN5@HitGreate

; 965  : 	{
; 966  : 		if (fScalar < 0.0f)

  00100	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _fScalar$1$[ebp]
  00104	77 1f		 ja	 SHORT $LN39@HitGreate

; 967  : 		{
; 968  : 			rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_FLYING);
; 969  : 		}
; 970  : 		else
; 971  : 		{
; 972  : 			if (!rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_FLYING_BACK))

  00106	51		 push	 ecx
  00107	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0010e	6a 00		 push	 0
  00110	51		 push	 ecx
  00111	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00118	8b ce		 mov	 ecx, esi
  0011a	6a 09		 push	 9
  0011c	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
  00121	84 c0		 test	 al, al
  00123	75 1b		 jne	 SHORT $LN9@HitGreate
$LN39@HitGreate:

; 973  : 			{
; 974  : 				rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_FLYING);

  00125	51		 push	 ecx
  00126	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0012d	6a 00		 push	 0
  0012f	51		 push	 ecx
  00130	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00137	8b ce		 mov	 ecx, esi
  00139	6a 06		 push	 6
  0013b	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
$LN9@HitGreate:

; 975  : 			}
; 976  : 		}
; 977  : 
; 978  : 		rVictim.m_isRealDead = true;

  00140	5f		 pop	 edi
  00141	c7 86 88 04 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+1160], 1

; 1003 : 				rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 1004 : 			}
; 1005 : 		}
; 1006 : 	}
; 1007 : }

  0014b	5e		 pop	 esi
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 04 00	 ret	 4
$LN5@HitGreate:

; 979  : 	}
; 980  : 	else
; 981  : 	{
; 982  : 		if (fScalar < 0.0f)

  00152	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _fScalar$1$[ebp]
  00156	51		 push	 ecx
  00157	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0015e	6a 00		 push	 0
  00160	51		 push	 ecx
  00161	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00168	8b ce		 mov	 ecx, esi
  0016a	76 21		 jbe	 SHORT $LN10@HitGreate
$LN43@HitGreate:

; 1003 : 				rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 1004 : 			}
; 1005 : 		}
; 1006 : 	}
; 1007 : }

  0016c	6a 06		 push	 6
  0016e	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
  00173	84 c0		 test	 al, al
  00175	74 6d		 je	 SHORT $LN14@HitGreate
  00177	83 ec 08	 sub	 esp, 8
  0017a	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00182	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00189	6a 07		 push	 7
  0018b	eb 35		 jmp	 SHORT $LN41@HitGreate
$LN10@HitGreate:

; 983  : 		{
; 984  : 			if (rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_FLYING))
; 985  : 			{
; 986  : 				rVictim.PushOnceMotion(CRaceMotionData::NAME_STAND_UP);
; 987  : 				rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 988  : 			}
; 989  : 		}
; 990  : 		else
; 991  : 		{
; 992  : 			if (!rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_FLYING_BACK))

  0018d	6a 09		 push	 9
  0018f	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
  00194	84 c0		 test	 al, al
  00196	75 16		 jne	 SHORT $LN13@HitGreate

; 993  : 			{
; 994  : 				if (rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_FLYING))

  00198	51		 push	 ecx
  00199	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  001a0	6a 00		 push	 0
  001a2	51		 push	 ecx
  001a3	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  001aa	8b ce		 mov	 ecx, esi

; 995  : 				{
; 996  : 					rVictim.PushOnceMotion(CRaceMotionData::NAME_STAND_UP);
; 997  : 					rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 998  : 				}
; 999  : 			}

  001ac	eb be		 jmp	 SHORT $LN43@HitGreate
$LN13@HitGreate:

; 1000 : 			else
; 1001 : 			{
; 1002 : 				rVictim.PushOnceMotion(CRaceMotionData::NAME_STAND_UP_BACK);

  001ae	83 ec 08	 sub	 esp, 8
  001b1	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  001b9	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  001c0	6a 0a		 push	 10			; 0000000aH
$LN41@HitGreate:

; 1003 : 				rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 1004 : 			}
; 1005 : 		}
; 1006 : 	}
; 1007 : }

  001c2	8b ce		 mov	 ecx, esi
  001c4	e8 00 00 00 00	 call	 ?PushOnceMotion@CActorInstance@@QAE_NKMM@Z ; CActorInstance::PushOnceMotion
  001c9	83 ec 08	 sub	 esp, 8
  001cc	8b ce		 mov	 ecx, esi
  001ce	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  001d6	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  001dd	6a 01		 push	 1
  001df	e8 00 00 00 00	 call	 ?PushLoopMotion@CActorInstance@@QAE_NKMM@Z ; CActorInstance::PushLoopMotion
$LN14@HitGreate:
  001e4	5f		 pop	 edi
  001e5	5e		 pop	 esi
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 04 00	 ret	 4
?__HitGreate@CActorInstance@@IAEXAAV1@@Z ENDP		; CActorInstance::__HitGreate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__HitGood@CActorInstance@@IAEXAAV1@@Z
_TEXT	SEGMENT
_v2Normal$1 = -20					; size = 8
_v2VictimNormal$2 = -12					; size = 8
_fVictimRotRad$3 = -4					; size = 4
_fRotRad$4 = 8						; size = 4
_rVictim$ = 8						; size = 4
?__HitGood@CActorInstance@@IAEXAAV1@@Z PROC		; CActorInstance::__HitGood, COMDAT
; _this$ = ecx

; 884  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi

; 885  : 	if (rVictim.IsKnockDown())

  00007	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b ce		 mov	 ecx, esi
  0000f	e8 00 00 00 00	 call	 ?IsKnockDown@CActorInstance@@QAEHXZ ; CActorInstance::IsKnockDown
  00014	85 c0		 test	 eax, eax
  00016	0f 85 3b 01 00
	00		 jne	 $LN11@HitGood

; 886  : 	{
; 887  : 		return;
; 888  : 	}
; 889  : 
; 890  : 	if (rVictim.IsStun())

  0001c	8b ce		 mov	 ecx, esi
  0001e	e8 00 00 00 00	 call	 ?IsStun@CActorInstance@@QAEHXZ ; CActorInstance::IsStun
  00023	8b ce		 mov	 ecx, esi
  00025	85 c0		 test	 eax, eax
  00027	74 0d		 je	 SHORT $LN3@HitGood

; 891  : 	{
; 892  : 		rVictim.Die();

  00029	e8 00 00 00 00	 call	 ?Die@CActorInstance@@QAEXXZ ; CActorInstance::Die
  0002e	5f		 pop	 edi

; 925  : 				{
; 926  : 					rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 927  : 				}
; 928  : 			}
; 929  : 		}
; 930  : 	}
; 931  : }

  0002f	5e		 pop	 esi
  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c2 04 00	 ret	 4
$LN3@HitGood:

; 893  : 	}
; 894  : 	else
; 895  : 	{
; 896  : 		rVictim.__Shake(100);

  00036	6a 64		 push	 100			; 00000064H
  00038	e8 00 00 00 00	 call	 ?__Shake@CActorInstance@@AAEXK@Z ; CActorInstance::__Shake

; 897  : 
; 898  : 		if (!rVictim.isLock())

  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?isLock@CActorInstance@@QAEHXZ ; CActorInstance::isLock
  00044	85 c0		 test	 eax, eax
  00046	0f 85 0b 01 00
	00		 jne	 $LN11@HitGood

; 899  : 		{
; 900  : 			float fRotRad = D3DXToRadian(GetRotation());

  0004c	8b cf		 mov	 ecx, edi
  0004e	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00053	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35

; 901  : 			float fVictimRotRad = D3DXToRadian(rVictim.GetRotation());

  00059	8b ce		 mov	 ecx, esi
  0005b	d9 5d 08	 fstp	 DWORD PTR _fRotRad$4[ebp]
  0005e	e8 00 00 00 00	 call	 ?GetRotation@CActorInstance@@QAEMXZ ; CActorInstance::GetRotation
  00063	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotRad$4[ebp]
  00068	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  0006e	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 901  : 			float fVictimRotRad = D3DXToRadian(rVictim.GetRotation());

  00071	d9 5d fc	 fstp	 DWORD PTR _fVictimRotRad$3[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  00074	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  00079	0f 57 c9	 xorps	 xmm1, xmm1
  0007c	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  00080	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRotRad$4[ebp]

; 653  :             return (float)cos(_X);

  00085	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 90   :     x = fx;

  00088	f3 0f 11 4d ec	 movss	 DWORD PTR _v2Normal$1[ebp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  0008d	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  00092	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 91   :     y = fy;

  00096	f3 0f 11 45 f0	 movss	 DWORD PTR _v2Normal$1[ebp+4], xmm0
  0009b	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fVictimRotRad$3[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 758  :             return (float)sin(_X);

  000a0	0f 5a c0	 cvtps2pd xmm0, xmm0
  000a3	e8 00 00 00 00	 call	 __libm_sse2_sin_precise
  000a8	0f 57 c9	 xorps	 xmm1, xmm1
  000ab	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  000af	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fVictimRotRad$3[ebp]

; 653  :             return (float)cos(_X);

  000b4	0f 5a c0	 cvtps2pd xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 90   :     x = fx;

  000b7	f3 0f 11 4d f4	 movss	 DWORD PTR _v2VictimNormal$2[ebp], xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  000bc	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  000c1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 906  : 			D3DXVec2Normalize(&v2Normal, &v2Normal);

  000c5	8d 45 ec	 lea	 eax, DWORD PTR _v2Normal$1[ebp]
  000c8	50		 push	 eax
  000c9	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 91   :     y = fy;

  000ca	f3 0f 11 45 f8	 movss	 DWORD PTR _v2VictimNormal$2[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 906  : 			D3DXVec2Normalize(&v2Normal, &v2Normal);

  000cf	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8

; 907  : 			D3DXVec2Normalize(&v2VictimNormal, &v2VictimNormal);

  000d4	8d 45 f4	 lea	 eax, DWORD PTR _v2VictimNormal$2[ebp]
  000d7	50		 push	 eax
  000d8	50		 push	 eax
  000d9	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  000de	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v2VictimNormal$2[ebp]
  000e3	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v2VictimNormal$2[ebp+4]
  000e8	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _v2Normal$1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 911  : 			if (fScalar < 0.0f)

  000ed	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  000ee	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _v2Normal$1[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 911  : 			if (fScalar < 0.0f)

  000f3	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  000fa	6a 00		 push	 0
  000fc	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  000fd	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 911  : 			if (fScalar < 0.0f)

  00101	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00108	0f 57 c0	 xorps	 xmm0, xmm0
  0010b	8b ce		 mov	 ecx, esi
  0010d	0f 2f c1	 comiss	 xmm0, xmm1
  00110	77 1f		 ja	 SHORT $LN38@HitGood

; 912  : 			{
; 913  : 				if (rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE))
; 914  : 				{
; 915  : 					rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 916  : 				}
; 917  : 			}
; 918  : 			else
; 919  : 			{
; 920  : 				if (rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE_BACK))

  00112	6a 08		 push	 8
  00114	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
  00119	84 c0		 test	 al, al
  0011b	75 1f		 jne	 SHORT $LN35@HitGood

; 921  : 				{
; 922  : 					rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 923  : 				}
; 924  : 				else if (rVictim.InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE))

  0011d	51		 push	 ecx
  0011e	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00125	6a 00		 push	 0
  00127	51		 push	 ecx
  00128	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  0012f	8b ce		 mov	 ecx, esi
$LN38@HitGood:

; 925  : 				{
; 926  : 					rVictim.PushLoopMotion(CRaceMotionData::NAME_WAIT);
; 927  : 				}
; 928  : 			}
; 929  : 		}
; 930  : 	}
; 931  : }

  00131	6a 05		 push	 5
  00133	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
  00138	84 c0		 test	 al, al
  0013a	74 1b		 je	 SHORT $LN11@HitGood
$LN35@HitGood:
  0013c	83 ec 08	 sub	 esp, 8
  0013f	8b ce		 mov	 ecx, esi
  00141	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00149	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00150	6a 01		 push	 1
  00152	e8 00 00 00 00	 call	 ?PushLoopMotion@CActorInstance@@QAE_NKMM@Z ; CActorInstance::PushLoopMotion
$LN11@HitGood:
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 04 00	 ret	 4
?__HitGood@CActorInstance@@IAEXAAV1@@Z ENDP		; CActorInstance::__HitGood
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__HitStone@CActorInstance@@IAEXAAV1@@Z
_TEXT	SEGMENT
_rVictim$ = 8						; size = 4
?__HitStone@CActorInstance@@IAEXAAV1@@Z PROC		; CActorInstance::__HitStone, COMDAT
; _this$ = ecx

; 872  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 873  : 	if (rVictim.IsStun())

  00004	8b 75 08	 mov	 esi, DWORD PTR _rVictim$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?IsStun@CActorInstance@@QAEHXZ ; CActorInstance::IsStun
  0000e	8b ce		 mov	 ecx, esi
  00010	85 c0		 test	 eax, eax
  00012	74 0a		 je	 SHORT $LN2@HitStone

; 874  : 	{
; 875  : 		rVictim.Die();

  00014	e8 00 00 00 00	 call	 ?Die@CActorInstance@@QAEXXZ ; CActorInstance::Die
  00019	5e		 pop	 esi

; 880  : 	}
; 881  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN2@HitStone:

; 876  : 	}
; 877  : 	else
; 878  : 	{
; 879  : 		rVictim.__Shake(100);

  0001e	6a 64		 push	 100			; 00000064H
  00020	e8 00 00 00 00	 call	 ?__Shake@CActorInstance@@AAEXK@Z ; CActorInstance::__Shake
  00025	5e		 pop	 esi

; 880  : 	}
; 881  : }

  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?__HitStone@CActorInstance@@IAEXAAV1@@Z ENDP		; CActorInstance::__HitStone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__ProcessMotionAttackSuccess@CActorInstance@@IAEXKAAV1@@Z
_TEXT	SEGMENT
_c_pMotionData$ = -4					; size = 4
_dwMotionKey$ = 8					; size = 4
_rVictim$ = 12						; size = 4
?__ProcessMotionAttackSuccess@CActorInstance@@IAEXKAAV1@@Z PROC ; CActorInstance::__ProcessMotionAttackSuccess, COMDAT
; _this$ = ecx

; 599  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 600  : 	CRaceMotionData * c_pMotionData;
; 601  : 
; 602  : 	if (!m_pkCurRaceData->GetMotionDataPointer(dwMotionKey, &c_pMotionData))

  00007	8d 45 fc	 lea	 eax, DWORD PTR _c_pMotionData$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR _dwMotionKey$[ebp]
  0000e	8b 8f 64 04 00
	00		 mov	 ecx, DWORD PTR [edi+1124]
  00014	e8 00 00 00 00	 call	 ?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z ; CRaceData::GetMotionDataPointer
  00019	85 c0		 test	 eax, eax
  0001b	74 20		 je	 SHORT $LN1@ProcessMot

; 603  : 	{
; 604  : 		return;
; 605  : 	}
; 606  : 
; 607  : 	const D3DXVECTOR3& c_rv3VictimPos = rVictim.GetPositionVectorRef();

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR _rVictim$[ebp]
  00020	e8 00 00 00 00	 call	 ?GetPositionVectorRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::GetPositionVectorRef

; 608  : 	__ProcessDataAttackSuccess(c_pMotionData->GetMotionAttackDataReference(), rVictim, c_rv3VictimPos);

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _c_pMotionData$[ebp]
  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	50		 push	 eax
  0002d	ff 75 0c	 push	 DWORD PTR _rVictim$[ebp]
  00030	e8 00 00 00 00	 call	 ?GetMotionAttackDataReference@CRaceMotionData@@QBEABUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataReference
  00035	50		 push	 eax
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess
$LN1@ProcessMot:
  0003d	5f		 pop	 edi

; 609  : }

  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?__ProcessMotionAttackSuccess@CActorInstance@@IAEXKAAV1@@Z ENDP ; CActorInstance::__ProcessMotionAttackSuccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__ProcessMotionEventAttackSuccess@CActorInstance@@IAEXKEAAV1@@Z
_TEXT	SEGMENT
_pMotionData$ = -4					; size = 4
_pMotionEventData$ = 8					; size = 4
_dwMotionKey$ = 8					; size = 4
_byEventIndex$ = 12					; size = 1
_rVictim$ = 16						; size = 4
?__ProcessMotionEventAttackSuccess@CActorInstance@@IAEXKEAAV1@@Z PROC ; CActorInstance::__ProcessMotionEventAttackSuccess, COMDAT
; _this$ = ecx

; 574  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 575  : 	CRaceMotionData * pMotionData;
; 576  : 
; 577  : 	if (!m_pkCurRaceData->GetMotionDataPointer(dwMotionKey, &pMotionData))

  00007	8d 45 fc	 lea	 eax, DWORD PTR _pMotionData$[ebp]
  0000a	50		 push	 eax
  0000b	ff 75 08	 push	 DWORD PTR _dwMotionKey$[ebp]
  0000e	8b 8f 64 04 00
	00		 mov	 ecx, DWORD PTR [edi+1124]
  00014	e8 00 00 00 00	 call	 ?GetMotionDataPointer@CRaceData@@QAEHKPAPAVCRaceMotionData@@@Z ; CRaceData::GetMotionDataPointer
  00019	85 c0		 test	 eax, eax
  0001b	74 41		 je	 SHORT $LN1@ProcessMot

; 578  : 	{
; 579  : 		return;
; 580  : 	}
; 581  : 
; 582  : 	if (byEventIndex >= pMotionData->GetMotionEventDataCount())

  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _pMotionData$[ebp]
  00020	e8 00 00 00 00	 call	 ?GetMotionEventDataCount@CRaceMotionData@@QBEKXZ ; CRaceMotionData::GetMotionEventDataCount
  00025	8b 55 0c	 mov	 edx, DWORD PTR _byEventIndex$[ebp]
  00028	0f b6 ca	 movzx	 ecx, dl
  0002b	3b c8		 cmp	 ecx, eax
  0002d	73 2f		 jae	 SHORT $LN1@ProcessMot

; 583  : 	{
; 584  : 		return;
; 585  : 	}
; 586  : 
; 587  : 	const CRaceMotionData::TMotionAttackingEventData * pMotionEventData;
; 588  : 	if (!pMotionData->GetMotionAttackingEventDataPointer(byEventIndex, &pMotionEventData))

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _pMotionData$[ebp]
  00032	8d 45 08	 lea	 eax, DWORD PTR _pMotionEventData$[ebp]
  00035	50		 push	 eax
  00036	52		 push	 edx
  00037	e8 00 00 00 00	 call	 ?GetMotionAttackingEventDataPointer@CRaceMotionData@@QBEHEPAPBUSMotionEventDataAttack@NMotionEvent@@@Z ; CRaceMotionData::GetMotionAttackingEventDataPointer
  0003c	85 c0		 test	 eax, eax
  0003e	74 1e		 je	 SHORT $LN1@ProcessMot

; 589  : 	{
; 590  : 		return;
; 591  : 	}
; 592  : 
; 593  : 	const D3DXVECTOR3& c_rv3VictimPos = rVictim.GetPositionVectorRef();

  00040	8b 4d 10	 mov	 ecx, DWORD PTR _rVictim$[ebp]
  00043	e8 00 00 00 00	 call	 ?GetPositionVectorRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::GetPositionVectorRef

; 594  : 	__ProcessDataAttackSuccess(pMotionEventData->AttackData, rVictim, c_rv3VictimPos);

  00048	6a 01		 push	 1
  0004a	6a 00		 push	 0
  0004c	50		 push	 eax
  0004d	8b 45 08	 mov	 eax, DWORD PTR _pMotionEventData$[ebp]
  00050	8b cf		 mov	 ecx, edi
  00052	ff 75 10	 push	 DWORD PTR _rVictim$[ebp]
  00055	83 c0 28	 add	 eax, 40			; 00000028H
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ; CActorInstance::__ProcessDataAttackSuccess
$LN1@ProcessMot:
  0005e	5f		 pop	 edi

; 595  : }

  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 0c 00	 ret	 12			; 0000000cH
?__ProcessMotionEventAttackSuccess@CActorInstance@@IAEXKEAAV1@@Z ENDP ; CActorInstance::__ProcessMotionEventAttackSuccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\cmath
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z
_TEXT	SEGMENT
_c_rv3Position$GSCopy$1$ = -56				; size = 4
_v3Pos$1$ = -56						; size = 4
$T1 = -52						; size = 12
$T2 = -40						; size = 12
$T3 = -40						; size = 12
_vec3Effect$ = -28					; size = 12
_vec3Delta$4 = -16					; size = 12
tv632 = -12						; size = 8
tv629 = -12						; size = 8
$T5 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_c_rAttackData$ = 8					; size = 4
_rVictim$ = 12						; size = 4
_c_rv3Position$ = 16					; size = 4
_uiSkill$ = 20						; size = 4
_isSendPacket$ = 24					; size = 4
?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z PROC ; CActorInstance::__ProcessDataAttackSuccess, COMDAT
; _this$ = ecx

; 686  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _c_rv3Position$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _c_rAttackData$[ebp]
  00017	56		 push	 esi
  00018	8b 75 0c	 mov	 esi, DWORD PTR _rVictim$[ebp]
  0001b	57		 push	 edi

; 687  : 	if (NRaceData::HIT_TYPE_NONE == c_rAttackData.iHittingType)

  0001c	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  00020	8b f9		 mov	 edi, ecx
  00022	89 45 c8	 mov	 DWORD PTR _c_rv3Position$GSCopy$1$[ebp], eax
  00025	0f 84 f5 02 00
	00		 je	 $LN1@ProcessDat

; 688  : 	{
; 689  : 		return;
; 690  : 	}
; 691  : 
; 692  : 	InsertDelay(c_rAttackData.fStiffenTime);

  0002b	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00030	51		 push	 ecx
  00031	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00036	e8 00 00 00 00	 call	 ?InsertDelay@CGraphicThingInstance@@QAEXM@Z ; CGraphicThingInstance::InsertDelay

; 693  : 
; 694  : 	if (__CanPushDestActor(rVictim) && c_rAttackData.fExternalForce > 0.0f)

  0003b	56		 push	 esi
  0003c	8b cf		 mov	 ecx, edi
  0003e	e8 00 00 00 00	 call	 ?__CanPushDestActor@CActorInstance@@IAE_NAAV1@@Z ; CActorInstance::__CanPushDestActor
  00043	0f 57 c9	 xorps	 xmm1, xmm1
  00046	84 c0		 test	 al, al
  00048	74 30		 je	 SHORT $LN3@ProcessDat
  0004a	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  0004f	0f 2f c1	 comiss	 xmm0, xmm1
  00052	76 26		 jbe	 SHORT $LN3@ProcessDat

; 695  : 	{
; 696  : 		__PushCircle(rVictim);

  00054	56		 push	 esi
  00055	8b cf		 mov	 ecx, edi
  00057	e8 00 00 00 00	 call	 ?__PushCircle@CActorInstance@@IAEXAAV1@@Z ; CActorInstance::__PushCircle

; 697  : 
; 698  : 		// VICTIM_COLLISION_TEST
; 699  : 		const D3DXVECTOR3& kVictimPos = rVictim.GetPosition();

  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition

; 700  : 		rVictim.m_PhysicsObject.IncreaseExternalForce(kVictimPos, c_rAttackData.fExternalForce); //*nForceRatio/100.0f);

  00063	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  00068	51		 push	 ecx
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	8d 8e c4 03 00
	00		 lea	 ecx, DWORD PTR [esi+964]
  00074	50		 push	 eax
  00075	e8 00 00 00 00	 call	 ?IncreaseExternalForce@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ; CPhysicsObject::IncreaseExternalForce
$LN3@ProcessDat:

; 701  : 
; 702  : 		// VICTIM_COLLISION_TEST_END
; 703  : 	}
; 704  : 
; 705  : 	// Invisible Time
; 706  : 	if (IS_PARTY_HUNTING_RACE(rVictim.GetRace()))

  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ?IS_PARTY_HUNTING_RACE@@YA_NI@Z ; IS_PARTY_HUNTING_RACE
  00087	83 c4 04	 add	 esp, 4
  0008a	84 c0		 test	 al, al
  0008c	74 23		 je	 SHORT $LN4@ProcessDat

; 707  : 	{
; 708  : 		if (uiSkill)

  0008e	83 7d 14 00	 cmp	 DWORD PTR _uiSkill$[ebp], 0
  00092	74 14		 je	 SHORT $LN46@ProcessDat

; 709  : 		{
; 710  : 			rVictim.m_fInvisibleTime = CTimer::Instance().GetCurrentSecond() + c_rAttackData.fInvisibleTime;

  00094	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  0009a	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0009f	d8 43 08	 fadd	 DWORD PTR [ebx+8]
  000a2	d9 9e 6c 04 00
	00		 fstp	 DWORD PTR [esi+1132]
$LN46@ProcessDat:

; 711  : 		}
; 712  : 
; 713  : 		if (m_isMain)

  000a8	83 bf 90 04 00
	00 00		 cmp	 DWORD PTR [edi+1168], 0
  000af	74 14		 je	 SHORT $LN5@ProcessDat
$LN4@ProcessDat:

; 714  : 		{
; 715  : 			rVictim.m_fInvisibleTime = CTimer::Instance().GetCurrentSecond() + c_rAttackData.fInvisibleTime;
; 716  : 		}
; 717  : 	}
; 718  : 	else
; 719  : 	{
; 720  : 		rVictim.m_fInvisibleTime = CTimer::Instance().GetCurrentSecond() + c_rAttackData.fInvisibleTime;
; 721  : 	}
; 722  : 
; 723  : 	// Stiffen Time
; 724  : 	rVictim.InsertDelay(c_rAttackData.fStiffenTime);

  000b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000b7	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  000bc	d8 43 08	 fadd	 DWORD PTR [ebx+8]
  000bf	d9 9e 6c 04 00
	00		 fstp	 DWORD PTR [esi+1132]
$LN5@ProcessDat:
  000c5	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  000ca	51		 push	 ecx
  000cb	8b ce		 mov	 ecx, esi
  000cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d2	e8 00 00 00 00	 call	 ?InsertDelay@CGraphicThingInstance@@QAEXM@Z ; CGraphicThingInstance::InsertDelay
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000d7	f3 0f 10 86 ac
	04 00 00	 movss	 xmm0, DWORD PTR [esi+1196]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 730  : 	if (IS_HUGE_RACE(rVictim.GetRace()))

  000df	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000e1	f3 0f 11 45 e4	 movss	 DWORD PTR _vec3Effect$[ebp], xmm0

; 305  :     y = fy;

  000e6	f3 0f 10 86 b0
	04 00 00	 movss	 xmm0, DWORD PTR [esi+1200]
  000ee	f3 0f 11 45 e8	 movss	 DWORD PTR _vec3Effect$[ebp+4], xmm0

; 306  :     z = fz;

  000f3	f3 0f 10 86 b4
	04 00 00	 movss	 xmm0, DWORD PTR [esi+1204]
  000fb	f3 0f 11 45 ec	 movss	 DWORD PTR _vec3Effect$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 730  : 	if (IS_HUGE_RACE(rVictim.GetRace()))

  00100	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  00105	50		 push	 eax
  00106	e8 00 00 00 00	 call	 ?IS_HUGE_RACE@@YA_NI@Z	; IS_HUGE_RACE
  0010b	83 c4 04	 add	 esp, 4
  0010e	84 c0		 test	 al, al
  00110	74 12		 je	 SHORT $LN8@ProcessDat

; 731  : 	{
; 732  : 		vec3Effect = c_rv3Position;

  00112	8b 45 c8	 mov	 eax, DWORD PTR _c_rv3Position$GSCopy$1$[ebp]
  00115	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00119	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0011c	66 0f d6 45 e4	 movq	 QWORD PTR _vec3Effect$[ebp], xmm0
  00121	89 45 ec	 mov	 DWORD PTR _vec3Effect$[ebp+8], eax
$LN8@ProcessDat:

; 733  : 	}
; 734  : 
; 735  : 	const D3DXVECTOR3 & v3Pos = GetPosition();

  00124	8b cf		 mov	 ecx, edi
  00126	e8 00 00 00 00	 call	 ?GetPosition@CGraphicObjectInstance@@QBEABUD3DXVECTOR3@@XZ ; CGraphicObjectInstance::GetPosition
  0012b	89 45 c8	 mov	 DWORD PTR _v3Pos$1$[ebp], eax

; 737  : 	float fHeight = D3DXToDegree(atan2(-vec3Effect.x + v3Pos.x, +vec3Effect.y - v3Pos.y));

  0012e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00132	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _vec3Effect$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 638  :             return (float)atan2(_Y, _X);

  00137	0f 5a c0	 cvtps2pd xmm0, xmm0
  0013a	f2 0f 11 45 f4	 movsd	 QWORD PTR tv632[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 737  : 	float fHeight = D3DXToDegree(atan2(-vec3Effect.x + v3Pos.x, +vec3Effect.y - v3Pos.y));

  0013f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vec3Effect$[ebp+4]
  00144	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 638  :             return (float)atan2(_Y, _X);

  00149	dd 45 f4	 fld	 QWORD PTR tv632[ebp]
  0014c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0014f	f2 0f 11 45 f4	 movsd	 QWORD PTR tv629[ebp], xmm0
  00154	dd 45 f4	 fld	 QWORD PTR tv629[ebp]
  00157	e8 00 00 00 00	 call	 __CIatan2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 739  : 	if (rVictim.IsBuilding() || rVictim.IsDoor())

  0015c	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\cmath

; 61   :     return _CSTD atan2f(_Yx, _Xx);

  0015e	d9 5d f8	 fstp	 DWORD PTR $T5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 739  : 	if (rVictim.IsBuilding() || rVictim.IsDoor())

  00161	e8 00 00 00 00	 call	 ?IsBuilding@CActorInstance@@QAE_NXZ ; CActorInstance::IsBuilding
  00166	84 c0		 test	 al, al
  00168	75 7c		 jne	 SHORT $LN11@ProcessDat
  0016a	8b ce		 mov	 ecx, esi
  0016c	e8 00 00 00 00	 call	 ?IsDoor@CActorInstance@@QAE_NXZ ; CActorInstance::IsDoor
  00171	84 c0		 test	 al, al
  00173	75 71		 jne	 SHORT $LN11@ProcessDat

; 749  : 		}
; 750  : 	}
; 751  : 	else
; 752  : 	{
; 753  : 		CEffectManager& rkEftMgr = CEffectManager::Instance();
; 754  : 		if (m_dwBattleHitEffectID)

  00175	8b 87 94 04 00
	00		 mov	 eax, DWORD PTR [edi+1172]
  0017b	85 c0		 test	 eax, eax
  0017d	74 3c		 je	 SHORT $LN13@ProcessDat

; 737  : 	float fHeight = D3DXToDegree(atan2(-vec3Effect.x + v3Pos.x, +vec3Effect.y - v3Pos.y));

  0017f	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR $T5[ebp]
  00184	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0

; 756  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, vec3Effect, D3DXVECTOR3(0.0f, 0.0f, fHeight));

  0018c	51		 push	 ecx
  0018d	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  00194	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00197	51		 push	 ecx
  00198	8d 4d e4	 lea	 ecx, DWORD PTR _vec3Effect$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0019b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 756  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, vec3Effect, D3DXVECTOR3(0.0f, 0.0f, fHeight));

  001a2	51		 push	 ecx
  001a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
  001a9	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  001aa	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+4], 0

; 306  :     z = fz;

  001b1	f3 0f 11 45 e0	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 756  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, vec3Effect, D3DXVECTOR3(0.0f, 0.0f, fHeight));

  001b6	e8 00 00 00 00	 call	 ?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0M@Z ; CEffectManager::CreateEffect
$LN13@ProcessDat:

; 757  : 		}
; 758  : 		if (m_dwBattleAttachEffectID)

  001bb	8b 87 98 04 00
	00		 mov	 eax, DWORD PTR [edi+1176]
  001c1	85 c0		 test	 eax, eax
  001c3	0f 84 e3 00 00
	00		 je	 $LN12@ProcessDat

; 759  : 		{
; 760  : 			rVictim.AttachEffectByID(0, NULL, m_dwBattleAttachEffectID);

  001c9	6a 00		 push	 0
  001cb	51		 push	 ecx
  001cc	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  001d3	8b ce		 mov	 ecx, esi
  001d5	6a 00		 push	 0
  001d7	50		 push	 eax
  001d8	6a 00		 push	 0
  001da	6a 00		 push	 0
  001dc	e8 00 00 00 00	 call	 ?AttachEffectByID@CActorInstance@@QAEKKPBDKPBUD3DXVECTOR3@@M1@Z ; CActorInstance::AttachEffectByID
  001e1	e9 c6 00 00 00	 jmp	 $LN12@ProcessDat
$LN11@ProcessDat:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001e6	8b 45 c8	 mov	 eax, DWORD PTR _v3Pos$1$[ebp]
  001e9	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _vec3Effect$[ebp]
  001ee	f3 0f 5c 00	 subss	 xmm0, DWORD PTR [eax]

; 304  :     x = fx;

  001f2	f3 0f 11 45 f0	 movss	 DWORD PTR _vec3Delta$4[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001f7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _vec3Effect$[ebp+4]
  001fc	f3 0f 5c 40 04	 subss	 xmm0, DWORD PTR [eax+4]

; 305  :     y = fy;

  00201	f3 0f 11 45 f4	 movss	 DWORD PTR _vec3Delta$4[ebp+4], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00206	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _vec3Effect$[ebp+8]
  0020b	f3 0f 5c 40 08	 subss	 xmm0, DWORD PTR [eax+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 742  : 		D3DXVec3Normalize(&vec3Delta, &vec3Delta);

  00210	8d 45 f0	 lea	 eax, DWORD PTR _vec3Delta$4[ebp]
  00213	50		 push	 eax
  00214	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00215	f3 0f 11 45 f8	 movss	 DWORD PTR _vec3Delta$4[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 742  : 		D3DXVec3Normalize(&vec3Delta, &vec3Delta);

  0021a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 346  :     x *= f;

  0021f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  00227	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _vec3Delta$4[ebp]

; 347  :     y *= f;

  0022c	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _vec3Delta$4[ebp+4]

; 348  :     z *= f;

  00231	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _vec3Delta$4[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 746  : 		if (m_dwBattleHitEffectID)

  00236	8b 8f 94 04 00
	00		 mov	 ecx, DWORD PTR [edi+1172]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 346  :     x *= f;

  0023c	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 347  :     y *= f;

  00240	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 348  :     z *= f;

  00244	f3 0f 59 d8	 mulss	 xmm3, xmm0
  00248	f3 0f 11 4d f0	 movss	 DWORD PTR _vec3Delta$4[ebp], xmm1
  0024d	f3 0f 11 55 f4	 movss	 DWORD PTR _vec3Delta$4[ebp+4], xmm2
  00252	f3 0f 11 5d f8	 movss	 DWORD PTR _vec3Delta$4[ebp+8], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 746  : 		if (m_dwBattleHitEffectID)

  00257	85 c9		 test	 ecx, ecx
  00259	74 51		 je	 SHORT $LN12@ProcessDat
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0025b	8b 45 c8	 mov	 eax, DWORD PTR _v3Pos$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 748  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, v3Pos + vec3Delta, D3DXVECTOR3(0.0f, 0.0f, 0.0f));

  0025e	51		 push	 ecx
  0025f	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00266	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0026d	f3 0f 58 08	 addss	 xmm1, DWORD PTR [eax]
  00271	f3 0f 58 50 04	 addss	 xmm2, DWORD PTR [eax+4]
  00276	f3 0f 58 58 08	 addss	 xmm3, DWORD PTR [eax+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 748  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, v3Pos + vec3Delta, D3DXVECTOR3(0.0f, 0.0f, 0.0f));

  0027b	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0027e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 748  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, v3Pos + vec3Delta, D3DXVECTOR3(0.0f, 0.0f, 0.0f));

  00285	50		 push	 eax
  00286	8d 45 cc	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00289	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 748  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, v3Pos + vec3Delta, D3DXVECTOR3(0.0f, 0.0f, 0.0f));

  00290	50		 push	 eax
  00291	51		 push	 ecx
  00292	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCEffectManager@@@@0PAVCEffectManager@@A ; CSingleton<CEffectManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00298	f3 0f 11 4d cc	 movss	 DWORD PTR $T1[ebp], xmm1

; 305  :     y = fy;

  0029d	f3 0f 11 55 d0	 movss	 DWORD PTR $T1[ebp+4], xmm2

; 306  :     z = fz;

  002a2	f3 0f 11 5d d4	 movss	 DWORD PTR $T1[ebp+8], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 748  : 			rkEftMgr.CreateEffect(m_dwBattleHitEffectID, v3Pos + vec3Delta, D3DXVECTOR3(0.0f, 0.0f, 0.0f));

  002a7	e8 00 00 00 00	 call	 ?CreateEffect@CEffectManager@@QAEHKABUD3DXVECTOR3@@0M@Z ; CEffectManager::CreateEffect
$LN12@ProcessDat:

; 761  : 		}
; 762  : 	}
; 763  : 
; 764  : 	if (rVictim.IsBuilding())

  002ac	8b ce		 mov	 ecx, esi
  002ae	e8 00 00 00 00	 call	 ?IsBuilding@CActorInstance@@QAE_NXZ ; CActorInstance::IsBuilding
  002b3	84 c0		 test	 al, al
  002b5	75 5b		 jne	 SHORT $LN24@ProcessDat

; 765  : 	{
; 766  : 	}
; 767  : 	else if (rVictim.IsStone() || rVictim.IsDoor())

  002b7	8b ce		 mov	 ecx, esi
  002b9	e8 00 00 00 00	 call	 ?IsStone@CActorInstance@@QAE_NXZ ; CActorInstance::IsStone
  002be	84 c0		 test	 al, al
  002c0	75 48		 jne	 SHORT $LN19@ProcessDat
  002c2	8b ce		 mov	 ecx, esi
  002c4	e8 00 00 00 00	 call	 ?IsDoor@CActorInstance@@QAE_NXZ ; CActorInstance::IsDoor
  002c9	84 c0		 test	 al, al
  002cb	75 3d		 jne	 SHORT $LN19@ProcessDat

; 770  : 	}
; 771  : 	else
; 772  : 	{
; 773  : 		///////////
; 774  : 		// Motion
; 775  : 		if (NRaceData::HIT_TYPE_GOOD == c_rAttackData.iHittingType || rVictim.IsResistFallen())

  002cd	83 7b 04 02	 cmp	 DWORD PTR [ebx+4], 2
  002d1	74 2d		 je	 SHORT $LN22@ProcessDat
  002d3	8b ce		 mov	 ecx, esi
  002d5	e8 00 00 00 00	 call	 ?IsResistFallen@CActorInstance@@QAEHXZ ; CActorInstance::IsResistFallen
  002da	85 c0		 test	 eax, eax
  002dc	75 22		 jne	 SHORT $LN22@ProcessDat

; 779  : 		else if (NRaceData::HIT_TYPE_GREAT == c_rAttackData.iHittingType)

  002de	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  002e1	83 f8 01	 cmp	 eax, 1
  002e4	75 0a		 jne	 SHORT $LN23@ProcessDat

; 780  : 		{
; 781  : 			__HitGreate(rVictim);

  002e6	56		 push	 esi
  002e7	8b cf		 mov	 ecx, edi
  002e9	e8 00 00 00 00	 call	 ?__HitGreate@CActorInstance@@IAEXAAV1@@Z ; CActorInstance::__HitGreate

; 782  : 		}

  002ee	eb 22		 jmp	 SHORT $LN24@ProcessDat
$LN23@ProcessDat:

; 783  : 		else
; 784  : 		{
; 785  : 			TraceError("ProcessSucceedingAttacking: Unknown AttackingData.iHittingType %d", c_rAttackData.iHittingType);

  002f0	50		 push	 eax
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@FEDLPHGA@ProcessSucceedingAttacking?3?5Unk@
  002f6	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  002fb	83 c4 08	 add	 esp, 8
  002fe	eb 12		 jmp	 SHORT $LN24@ProcessDat
$LN22@ProcessDat:

; 776  : 		{
; 777  : 			__HitGood(rVictim);

  00300	56		 push	 esi
  00301	8b cf		 mov	 ecx, edi
  00303	e8 00 00 00 00	 call	 ?__HitGood@CActorInstance@@IAEXAAV1@@Z ; CActorInstance::__HitGood

; 778  : 		}

  00308	eb 08		 jmp	 SHORT $LN24@ProcessDat
$LN19@ProcessDat:

; 768  : 	{
; 769  : 		__HitStone(rVictim);

  0030a	56		 push	 esi
  0030b	8b cf		 mov	 ecx, edi
  0030d	e8 00 00 00 00	 call	 ?__HitStone@CActorInstance@@IAEXAAV1@@Z ; CActorInstance::__HitStone
$LN24@ProcessDat:

; 786  : 		}
; 787  : 	}
; 788  : 
; 789  : 	__OnHit(uiSkill, rVictim, isSendPacket);

  00312	ff 75 18	 push	 DWORD PTR _isSendPacket$[ebp]
  00315	8b cf		 mov	 ecx, edi
  00317	56		 push	 esi
  00318	ff 75 14	 push	 DWORD PTR _uiSkill$[ebp]
  0031b	e8 00 00 00 00	 call	 ?__OnHit@CActorInstance@@IAEXIAAV1@H@Z ; CActorInstance::__OnHit
$LN1@ProcessDat:

; 790  : }

  00320	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00323	5f		 pop	 edi
  00324	5e		 pop	 esi
  00325	33 cd		 xor	 ecx, ebp
  00327	5b		 pop	 ebx
  00328	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032d	8b e5		 mov	 esp, ebp
  0032f	5d		 pop	 ebp
  00330	c2 14 00	 ret	 20			; 00000014H
?__ProcessDataAttackSuccess@CActorInstance@@IAEXABUSAttackData@NRaceData@@AAV1@ABUD3DXVECTOR3@@IH@Z ENDP ; CActorInstance::__ProcessDataAttackSuccess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__OnEndCombo@CActorInstance@@IAEXXZ
_TEXT	SEGMENT
?__OnEndCombo@CActorInstance@@IAEXXZ PROC		; CActorInstance::__OnEndCombo, COMDAT
; _this$ = ecx

; 326  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 	if (__IsMountingHorse())

  00003	e8 00 00 00 00	 call	 ?__IsMountingHorse@CActorInstance@@IAE_NXZ ; CActorInstance::__IsMountingHorse
  00008	84 c0		 test	 al, al
  0000a	74 0a		 je	 SHORT $LN2@OnEndCombo

; 328  : 	{
; 329  : 		m_dwcurComboIndex = 1;

  0000c	c7 86 3c 04 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+1084], 1
$LN2@OnEndCombo:
  00016	5e		 pop	 esi

; 330  : 	}
; 331  : 
; 332  : }

  00017	c3		 ret	 0
?__OnEndCombo@CActorInstance@@IAEXXZ ENDP		; CActorInstance::__OnEndCombo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__ClearCombo@CActorInstance@@IAEXXZ
_TEXT	SEGMENT
?__ClearCombo@CActorInstance@@IAEXXZ PROC		; CActorInstance::__ClearCombo, COMDAT
; _this$ = ecx

; 336  : 	m_dwcurComboIndex = 0;

  00000	c7 81 3c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1084], 0

; 337  : 	m_isPreInput = FALSE;

  0000a	c7 81 50 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1104], 0

; 338  : 	m_pkCurRaceMotionData = NULL;

  00014	c7 81 68 04 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+1128], 0

; 339  : }

  0001e	c3		 ret	 0
?__ClearCombo@CActorInstance@@IAEXXZ ENDP		; CActorInstance::__ClearCombo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__RunNextCombo@CActorInstance@@IAEXXZ
_TEXT	SEGMENT
_pComboData$ = -8					; size = 4
tv306 = -4						; size = 4
?__RunNextCombo@CActorInstance@@IAEXXZ PROC		; CActorInstance::__RunNextCombo, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 285  : 	++m_dwcurComboIndex;

  0000b	8b 87 3c 04 00
	00		 mov	 eax, DWORD PTR [edi+1084]
  00011	40		 inc	 eax
  00012	89 87 3c 04 00
	00		 mov	 DWORD PTR [edi+1084], eax

; 286  : 	///////////////////////////
; 287  : 
; 288  : 	WORD wComboIndex = m_dwcurComboIndex;

  00018	0f b7 f0	 movzx	 esi, ax

; 289  : 	WORD wComboType = __GetCurrentComboType();

  0001b	e8 00 00 00 00	 call	 ?__GetCurrentComboType@CActorInstance@@IAEGXZ ; CActorInstance::__GetCurrentComboType
  00020	0f b7 d8	 movzx	 ebx, ax
  00023	8b c6		 mov	 eax, esi
  00025	89 45 fc	 mov	 DWORD PTR tv306[ebp], eax

; 290  : 
; 291  : 	if (wComboIndex == 0)

  00028	66 85 f6	 test	 si, si
  0002b	75 16		 jne	 SHORT $LN2@RunNextCom

; 292  : 	{
; 293  : 		TraceError("CActorInstance::__RunNextCombo(wComboType=%d, wComboIndex=%d)", wComboType, wComboIndex);

  0002d	50		 push	 eax
  0002e	53		 push	 ebx
  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@CGEPLNOG@CActorInstance?3?3__RunNextCombo?$CI@
  00034	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00039	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003c	5f		 pop	 edi

; 322  : 	}
; 323  : }

  0003d	5e		 pop	 esi
  0003e	5b		 pop	 ebx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN2@RunNextCom:

; 294  : 		return;
; 295  : 	}
; 296  : 
; 297  : 	DWORD dwComboArrayIndex = wComboIndex - 1;
; 298  : 
; 299  : 	CRaceData::TComboData * pComboData;
; 300  : 
; 301  : 	if (!m_pkCurRaceData->GetComboDataPointer(m_wcurMotionMode, wComboType, &pComboData))

  00043	8b 8f 64 04 00
	00		 mov	 ecx, DWORD PTR [edi+1124]
  00049	8d 70 ff	 lea	 esi, DWORD PTR [eax-1]
  0004c	8d 45 f8	 lea	 eax, DWORD PTR _pComboData$[ebp]
  0004f	50		 push	 eax
  00050	0f b7 87 78 03
	00 00		 movzx	 eax, WORD PTR [edi+888]
  00057	53		 push	 ebx
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?GetComboDataPointer@CRaceData@@QAEHGGPAPAUSComboAttackData@1@@Z ; CRaceData::GetComboDataPointer
  0005e	85 c0		 test	 eax, eax
  00060	75 20		 jne	 SHORT $LN3@RunNextCom

; 302  : 	{
; 303  : 		TraceError("CActorInstance::__RunNextCombo(wComboType=%d, wComboIndex=%d) - m_pkCurRaceData->GetComboDataPointer(m_wcurMotionMode=%d, &pComboData) == NULL",

  00062	0f b7 87 78 03
	00 00		 movzx	 eax, WORD PTR [edi+888]
  00069	50		 push	 eax
  0006a	ff 75 fc	 push	 DWORD PTR tv306[ebp]
  0006d	53		 push	 ebx
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0IP@BHEKJOJN@CActorInstance?3?3__RunNextCombo?$CI@
  00073	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00078	83 c4 10	 add	 esp, 16			; 00000010H
  0007b	5f		 pop	 edi

; 322  : 	}
; 323  : }

  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN3@RunNextCom:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00082	8b 45 f8	 mov	 eax, DWORD PTR _pComboData$[ebp]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008a	2b c1		 sub	 eax, ecx
  0008c	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 308  : 	if (dwComboArrayIndex >= pComboData->ComboIndexVector.size())

  0008f	3b f0		 cmp	 esi, eax
  00091	72 1a		 jb	 SHORT $LN4@RunNextCom

; 309  : 	{
; 310  : 		TraceError("CActorInstance::__RunNextCombo(wComboType=%d, wComboIndex=%d) - (dwComboArrayIndex=%d) >= (pComboData->ComboIndexVector.size()=%d)",

  00093	50		 push	 eax
  00094	56		 push	 esi
  00095	ff 75 fc	 push	 DWORD PTR tv306[ebp]
  00098	53		 push	 ebx
  00099	68 00 00 00 00	 push	 OFFSET ??_C@_0ID@NOGKCFDC@CActorInstance?3?3__RunNextCombo?$CI@
  0009e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  000a3	83 c4 14	 add	 esp, 20			; 00000014H
  000a6	5f		 pop	 edi

; 322  : 	}
; 323  : }

  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN4@RunNextCom:

; 311  : 				   wComboType, wComboIndex, dwComboArrayIndex, pComboData->ComboIndexVector.size());
; 312  : 		return;
; 313  : 	}
; 314  : 
; 315  : 	WORD wcurComboMotionIndex = pComboData->ComboIndexVector[dwComboArrayIndex];
; 316  : 	ComboAttack(wcurComboMotionIndex, m_fAtkDirRot, 0.1f);

  000ad	f3 0f 10 87 60
	04 00 00	 movss	 xmm0, DWORD PTR [edi+1120]
  000b5	83 ec 08	 sub	 esp, 8
  000b8	0f b7 04 b1	 movzx	 eax, WORD PTR [ecx+esi*4]
  000bc	8b cf		 mov	 ecx, edi
  000be	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ?ComboAttack@CActorInstance@@QAEHKMM@Z ; CActorInstance::ComboAttack
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000d1	8b 45 f8	 mov	 eax, DWORD PTR _pComboData$[ebp]
  000d4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000d7	2b 08		 sub	 ecx, DWORD PTR [eax]
  000d9	c1 f9 02	 sar	 ecx, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 319  : 	if (m_dwcurComboIndex == pComboData->ComboIndexVector.size())

  000dc	39 8f 3c 04 00
	00		 cmp	 DWORD PTR [edi+1084], ecx
  000e2	75 07		 jne	 SHORT $LN5@RunNextCom

; 320  : 	{
; 321  : 		__OnEndCombo();

  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ?__OnEndCombo@CActorInstance@@IAEXXZ ; CActorInstance::__OnEndCombo
$LN5@RunNextCom:

; 322  : 	}
; 323  : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
?__RunNextCombo@CActorInstance@@IAEXXZ ENDP		; CActorInstance::__RunNextCombo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__CanPushDestActor@CActorInstance@@IAE_NAAV1@@Z
_TEXT	SEGMENT
tv162 = 8						; size = 4
_rkActorDst$ = 8					; size = 4
?__CanPushDestActor@CActorInstance@@IAE_NAAV1@@Z PROC	; CActorInstance::__CanPushDestActor, COMDAT
; _this$ = ecx

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 634  : 	if (rkActorDst.IsBuilding())

  00005	8b 7d 08	 mov	 edi, DWORD PTR _rkActorDst$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	8b cf		 mov	 ecx, edi
  0000c	e8 00 00 00 00	 call	 ?IsBuilding@CActorInstance@@QAE_NXZ ; CActorInstance::IsBuilding
  00011	84 c0		 test	 al, al
  00013	75 7b		 jne	 SHORT $LN11@CanPushDes

; 635  : 	{
; 636  : 		return false;
; 637  : 	}
; 638  : 
; 639  : 	if (rkActorDst.IsDoor())

  00015	8b cf		 mov	 ecx, edi
  00017	e8 00 00 00 00	 call	 ?IsDoor@CActorInstance@@QAE_NXZ ; CActorInstance::IsDoor
  0001c	84 c0		 test	 al, al
  0001e	75 70		 jne	 SHORT $LN11@CanPushDes

; 640  : 	{
; 641  : 		return false;
; 642  : 	}
; 643  : 
; 644  : 	if (rkActorDst.IsStone())

  00020	8b cf		 mov	 ecx, edi
  00022	e8 00 00 00 00	 call	 ?IsStone@CActorInstance@@QAE_NXZ ; CActorInstance::IsStone
  00027	84 c0		 test	 al, al
  00029	75 65		 jne	 SHORT $LN11@CanPushDes

; 645  : 	{
; 646  : 		return false;
; 647  : 	}
; 648  : 
; 649  : 	if (rkActorDst.IsNPC())

  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ?IsNPC@CActorInstance@@QAE_NXZ ; CActorInstance::IsNPC
  00032	84 c0		 test	 al, al
  00034	75 5a		 jne	 SHORT $LN11@CanPushDes

; 650  : 	{
; 651  : 		return false;
; 652  : 	}
; 653  : 
; 654  : 	extern bool IS_HUGE_RACE(unsigned int vnum);
; 655  : 	if (IS_HUGE_RACE(rkActorDst.GetRace()))

  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?GetRace@CActorInstance@@QAEKXZ ; CActorInstance::GetRace
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?IS_HUGE_RACE@@YA_NI@Z	; IS_HUGE_RACE
  00043	83 c4 04	 add	 esp, 4
  00046	84 c0		 test	 al, al
  00048	75 46		 jne	 SHORT $LN11@CanPushDes

; 656  : 	{
; 657  : 		return false;
; 658  : 	}
; 659  : 
; 660  : 	if (rkActorDst.IsStun())

  0004a	8b cf		 mov	 ecx, edi
  0004c	e8 00 00 00 00	 call	 ?IsStun@CActorInstance@@QAEHXZ ; CActorInstance::IsStun
  00051	85 c0		 test	 eax, eax
  00053	75 33		 jne	 SHORT $LN9@CanPushDes

; 661  : 	{
; 662  : 		return true;
; 663  : 	}
; 664  : 
; 665  : 	if (rkActorDst.__GetOwnerVID() != GetVirtualID())

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b ce		 mov	 ecx, esi
  00059	ff 50 48	 call	 DWORD PTR [eax+72]
  0005c	8b cf		 mov	 ecx, edi
  0005e	8b f0		 mov	 esi, eax
  00060	e8 00 00 00 00	 call	 ?__GetOwnerVID@CActorInstance@@IAEKXZ ; CActorInstance::__GetOwnerVID
  00065	3b c6		 cmp	 eax, esi
  00067	75 27		 jne	 SHORT $LN11@CanPushDes

; 666  : 	{
; 667  : 		return false;
; 668  : 	}
; 669  : 
; 670  : 	if (rkActorDst.__GetOwnerTime() > 3.0f)

  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?__GetOwnerTime@CActorInstance@@IAEMXZ ; CActorInstance::__GetOwnerTime
  00070	d9 5d 08	 fstp	 DWORD PTR tv162[ebp]
  00073	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv162[ebp]
  00078	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@40400000
  0007f	5f		 pop	 edi

; 676  : }

  00080	5e		 pop	 esi
  00081	0f 96 c0	 setbe	 al
  00084	5d		 pop	 ebp
  00085	c2 04 00	 ret	 4
$LN9@CanPushDes:
  00088	5f		 pop	 edi

; 673  : 	}
; 674  : 
; 675  : 	return true;

  00089	b0 01		 mov	 al, 1

; 676  : }

  0008b	5e		 pop	 esi
  0008c	5d		 pop	 ebp
  0008d	c2 04 00	 ret	 4
$LN11@CanPushDes:
  00090	5f		 pop	 edi

; 671  : 	{
; 672  : 		return false;

  00091	32 c0		 xor	 al, al

; 676  : }

  00093	5e		 pop	 esi
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
?__CanPushDestActor@CActorInstance@@IAE_NAAV1@@Z ENDP	; CActorInstance::__CanPushDestActor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__GetOwnerVID@CActorInstance@@IAEKXZ
_TEXT	SEGMENT
?__GetOwnerVID@CActorInstance@@IAEKXZ PROC		; CActorInstance::__GetOwnerVID, COMDAT
; _this$ = ecx

; 614  : 	return m_dwOwnerVID;

  00000	8b 81 a0 05 00
	00		 mov	 eax, DWORD PTR [ecx+1440]

; 615  : }

  00006	c3		 ret	 0
?__GetOwnerVID@CActorInstance@@IAEKXZ ENDP		; CActorInstance::__GetOwnerVID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__GetOwnerTime@CActorInstance@@IAEMXZ
_TEXT	SEGMENT
?__GetOwnerTime@CActorInstance@@IAEMXZ PROC		; CActorInstance::__GetOwnerTime, COMDAT
; _this$ = ecx

; 618  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 619  : 	return GetLocalTime() - m_fOwnerBaseTime;

  00003	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  00008	d8 a6 08 05 00
	00		 fsub	 DWORD PTR [esi+1288]
  0000e	5e		 pop	 esi

; 620  : }

  0000f	c3		 ret	 0
?__GetOwnerTime@CActorInstance@@IAEMXZ ENDP		; CActorInstance::__GetOwnerTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?isValidAttacking@CActorInstance@@IAEHXZ
_TEXT	SEGMENT
_fElapsedTime$ = -4					; size = 4
?isValidAttacking@CActorInstance@@IAEHXZ PROC		; CActorInstance::isValidAttacking, COMDAT
; _this$ = ecx

; 364  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 365  : 	if (!m_pkCurRaceMotionData)

  00007	8b 8f 68 04 00
	00		 mov	 ecx, DWORD PTR [edi+1128]
  0000d	85 c9		 test	 ecx, ecx
  0000f	74 51		 je	 SHORT $LN28@isValidAtt

; 366  : 	{
; 367  : 		return FALSE;
; 368  : 	}
; 369  : 
; 370  : 	if (!m_pkCurRaceMotionData->isAttackingMotion())

  00011	e8 00 00 00 00	 call	 ?isAttackingMotion@CRaceMotionData@@QBEHXZ ; CRaceMotionData::isAttackingMotion
  00016	85 c0		 test	 eax, eax
  00018	74 48		 je	 SHORT $LN28@isValidAtt

; 373  : 	}
; 374  : 
; 375  : 	const NRaceData::TMotionAttackData * c_pData = m_pkCurRaceMotionData->GetMotionAttackDataPointer();

  0001a	8b 8f 68 04 00
	00		 mov	 ecx, DWORD PTR [edi+1128]
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataPointer

; 376  : 	float fElapsedTime = GetAttackingElapsedTime();

  00026	8b cf		 mov	 ecx, edi
  00028	8b f0		 mov	 esi, eax
  0002a	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002f	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00032	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 376  : 	float fElapsedTime = GetAttackingElapsedTime();

  00035	d9 5d fc	 fstp	 DWORD PTR _fElapsedTime$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00038	5e		 pop	 esi
  00039	3b c8		 cmp	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 378  : 	for (; itor != c_pData->HitDataContainer.end(); ++itor)

  0003b	74 1b		 je	 SHORT $LN30@isValidAtt
  0003d	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _fElapsedTime$[ebp]
$LL18@isValidAtt:

; 379  : 	{
; 380  : 		const NRaceData::THitData & c_rHitData = *itor;
; 381  : 		if (fElapsedTime > c_rHitData.fAttackStartTime &&

  00042	0f 2f 09	 comiss	 xmm1, DWORD PTR [ecx]
  00045	76 0a		 jbe	 SHORT $LN2@isValidAtt
  00047	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0004c	0f 2f c1	 comiss	 xmm0, xmm1
  0004f	77 07		 ja	 SHORT $LN30@isValidAtt
$LN2@isValidAtt:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 74   :         ++_Ptr;

  00051	83 c1 2c	 add	 ecx, 44			; 0000002cH

; 156  :         return _Ptr == _Right._Ptr;

  00054	3b c8		 cmp	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 378  : 	for (; itor != c_pData->HitDataContainer.end(); ++itor)

  00056	75 ea		 jne	 SHORT $LL18@isValidAtt
$LN30@isValidAtt:

; 382  : 				fElapsedTime < c_rHitData.fAttackEndTime)
; 383  : 		{
; 384  : 			return TRUE;
; 385  : 		}
; 386  : 	}
; 387  : 
; 388  : 	return TRUE;

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	5f		 pop	 edi

; 389  : }

  0005e	8b e5		 mov	 esp, ebp
  00060	5d		 pop	 ebp
  00061	c3		 ret	 0
$LN28@isValidAtt:

; 371  : 	{
; 372  : 		return FALSE;

  00062	33 c0		 xor	 eax, eax
  00064	5f		 pop	 edi

; 389  : }

  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?isValidAttacking@CActorInstance@@IAEHXZ ENDP		; CActorInstance::isValidAttacking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__IsInSplashTime@CActorInstance@@IAE_NXZ
_TEXT	SEGMENT
tv129 = -4						; size = 4
?__IsInSplashTime@CActorInstance@@IAE_NXZ PROC		; CActorInstance::__IsInSplashTime, COMDAT
; _this$ = ecx

; 402  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 403  : 	if (m_kSplashArea.fDisappearingTime > GetLocalTime())

  00007	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  0000c	f3 0f 10 86 98
	03 00 00	 movss	 xmm0, DWORD PTR [esi+920]
  00014	d9 5d fc	 fstp	 DWORD PTR tv129[ebp]
  00017	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv129[ebp]
  0001b	5e		 pop	 esi
  0001c	0f 97 c0	 seta	 al

; 404  : 	{
; 405  : 		return true;
; 406  : 	}
; 407  : 
; 408  : 	return false;
; 409  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?__IsInSplashTime@CActorInstance@@IAE_NXZ ENDP		; CActorInstance::__IsInSplashTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__Shake@CActorInstance@@AAEXK@Z
_TEXT	SEGMENT
_dwDuration$ = 8					; size = 4
?__Shake@CActorInstance@@AAEXK@Z PROC			; CActorInstance::__Shake, COMDAT
; _this$ = ecx

; 813  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 814  : 	DWORD dwCurTime = ELTimer_GetMSec();

  00006	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 815  : 	m_dwShakeTime = dwCurTime + dwDuration;

  0000b	03 45 08	 add	 eax, DWORD PTR _dwDuration$[ebp]
  0000e	89 86 d4 04 00
	00		 mov	 DWORD PTR [esi+1236], eax
  00014	5e		 pop	 esi

; 816  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?__Shake@CActorInstance@@AAEXK@Z ENDP			; CActorInstance::__Shake
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__CanInputNormalAttackCommand@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
tv130 = -8						; size = 4
_fElapsedTime$1 = -4					; size = 4
?__CanInputNormalAttackCommand@CActorInstance@@QAE_NXZ PROC ; CActorInstance::__CanInputNormalAttackCommand, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 522  : 	if (IsWaiting())

  00009	e8 00 00 00 00	 call	 ?IsWaiting@CActorInstance@@QAEHXZ ; CActorInstance::IsWaiting
  0000e	85 c0		 test	 eax, eax
  00010	75 41		 jne	 SHORT $LN6@CanInputNo

; 523  : 	{
; 524  : 		return true;
; 525  : 	}
; 526  : 
; 527  : 	if (isNormalAttacking())

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?isNormalAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isNormalAttacking
  00019	85 c0		 test	 eax, eax
  0001b	74 2f		 je	 SHORT $LN4@CanInputNo

; 528  : 	{
; 529  : 		float fElapsedTime = GetAttackingElapsedTime();

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime

; 530  : 
; 531  : 		if (fElapsedTime > m_pkCurRaceMotionData->GetMotionDuration() * 0.9f)

  00024	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0002a	d9 5d fc	 fstp	 DWORD PTR _fElapsedTime$1[ebp]
  0002d	e8 00 00 00 00	 call	 ?GetMotionDuration@CRaceMotionData@@QAEMXZ ; CRaceMotionData::GetMotionDuration
  00032	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f666666
  00038	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fElapsedTime$1[ebp]
  0003d	5e		 pop	 esi
  0003e	d9 5d f8	 fstp	 DWORD PTR tv130[ebp]
  00041	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR tv130[ebp]
  00045	0f 97 c0	 seta	 al

; 538  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN4@CanInputNo:

; 534  : 		}
; 535  : 	}
; 536  : 
; 537  : 	return false;

  0004c	32 c0		 xor	 al, al
  0004e	5e		 pop	 esi

; 538  : }

  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
$LN6@CanInputNo:

; 532  : 		{
; 533  : 			return true;

  00053	b0 01		 mov	 al, 1
  00055	5e		 pop	 esi

; 538  : }

  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
?__CanInputNormalAttackCommand@CActorInstance@@QAE_NXZ ENDP ; CActorInstance::__CanInputNormalAttackCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?ShakeProcess@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
_v3Pos$1$sroa$185$1$ = -8				; size = 4
_v3Pos$1$sroa$186$1$ = -4				; size = 4
?ShakeProcess@CActorInstance@@QAEXXZ PROC		; CActorInstance::ShakeProcess, COMDAT
; _this$ = ecx

; 819  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 820  : 	if (m_dwShakeTime)

  00009	83 be d4 04 00
	00 00		 cmp	 DWORD PTR [esi+1236], 0
  00010	0f 84 63 01 00
	00		 je	 $LN8@ShakeProce
  00016	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00019	f3 0f 11 45 fc	 movss	 DWORD PTR _v3Pos$1$sroa$186$1$[ebp], xmm0

; 305  :     y = fy;

  0001e	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Pos$1$sroa$185$1$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 824  : 		DWORD dwCurTime = ELTimer_GetMSec();

  00023	e8 00 00 00 00	 call	 ?ELTimer_GetMSec@@YAKXZ	; ELTimer_GetMSec

; 825  : 
; 826  : 		if (m_dwShakeTime < dwCurTime)

  00028	39 86 d4 04 00
	00		 cmp	 DWORD PTR [esi+1236], eax
  0002e	73 12		 jae	 SHORT $LN9@ShakeProce

; 827  : 		{
; 828  : 			m_dwShakeTime = 0;

  00030	c7 86 d4 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1236], 0
  0003a	0f 57 c9	 xorps	 xmm1, xmm1

; 829  : 		}

  0003d	e9 fd 00 00 00	 jmp	 $LN6@ShakeProce
$LN9@ShakeProce:
  00042	57		 push	 edi

; 830  : 		else
; 831  : 		{
; 832  : 			int nShakeSize = 10;
; 833  : 
; 834  : 			switch (rand() % 2)

  00043	e8 00 00 00 00	 call	 _rand
  00048	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  0004d	79 05		 jns	 SHORT $LN22@ShakeProce
  0004f	48		 dec	 eax
  00050	83 c8 fe	 or	 eax, -2			; fffffffeH
  00053	40		 inc	 eax
$LN22@ShakeProce:
  00054	bf 0a 00 00 00	 mov	 edi, 10			; 0000000aH
  00059	83 e8 00	 sub	 eax, 0
  0005c	74 22		 je	 SHORT $LN11@ShakeProce
  0005e	83 e8 01	 sub	 eax, 1
  00061	75 39		 jne	 SHORT $LN2@ShakeProce

; 838  : 				break;
; 839  : 			case 1:
; 840  : 				v3Pos.x -= rand() % nShakeSize;

  00063	e8 00 00 00 00	 call	 _rand
  00068	99		 cdq
  00069	0f 57 c9	 xorps	 xmm1, xmm1
  0006c	f7 ff		 idiv	 edi
  0006e	66 0f 6e c2	 movd	 xmm0, edx
  00072	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00075	f3 0f 5c c8	 subss	 xmm1, xmm0
  00079	f3 0f 11 4d fc	 movss	 DWORD PTR _v3Pos$1$sroa$186$1$[ebp], xmm1
  0007e	eb 1c		 jmp	 SHORT $LN2@ShakeProce
$LN11@ShakeProce:

; 835  : 			{
; 836  : 			case 0:
; 837  : 				v3Pos.x += rand() % nShakeSize;

  00080	e8 00 00 00 00	 call	 _rand
  00085	99		 cdq
  00086	f7 ff		 idiv	 edi
  00088	66 0f 6e c2	 movd	 xmm0, edx
  0008c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0008f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  00097	f3 0f 11 45 fc	 movss	 DWORD PTR _v3Pos$1$sroa$186$1$[ebp], xmm0
$LN2@ShakeProce:

; 841  : 				break;
; 842  : 			}
; 843  : 
; 844  : 			switch (rand() % 2)

  0009c	e8 00 00 00 00	 call	 _rand
  000a1	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000a6	79 05		 jns	 SHORT $LN23@ShakeProce
  000a8	48		 dec	 eax
  000a9	83 c8 fe	 or	 eax, -2			; fffffffeH
  000ac	40		 inc	 eax
$LN23@ShakeProce:
  000ad	83 e8 00	 sub	 eax, 0
  000b0	74 22		 je	 SHORT $LN13@ShakeProce
  000b2	83 e8 01	 sub	 eax, 1
  000b5	75 39		 jne	 SHORT $LN4@ShakeProce

; 848  : 				break;
; 849  : 			case 1:
; 850  : 				v3Pos.y -= rand() % nShakeSize;

  000b7	e8 00 00 00 00	 call	 _rand
  000bc	99		 cdq
  000bd	0f 57 c9	 xorps	 xmm1, xmm1
  000c0	f7 ff		 idiv	 edi
  000c2	66 0f 6e c2	 movd	 xmm0, edx
  000c6	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000c9	f3 0f 5c c8	 subss	 xmm1, xmm0
  000cd	f3 0f 11 4d f8	 movss	 DWORD PTR _v3Pos$1$sroa$185$1$[ebp], xmm1
  000d2	eb 1c		 jmp	 SHORT $LN4@ShakeProce
$LN13@ShakeProce:

; 845  : 			{
; 846  : 			case 0:
; 847  : 				v3Pos.y += rand() % nShakeSize;

  000d4	e8 00 00 00 00	 call	 _rand
  000d9	99		 cdq
  000da	f7 ff		 idiv	 edi
  000dc	66 0f 6e c2	 movd	 xmm0, edx
  000e0	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000e3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@00000000
  000eb	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Pos$1$sroa$185$1$[ebp], xmm0
$LN4@ShakeProce:

; 851  : 				break;
; 852  : 			}
; 853  : 
; 854  : 			switch (rand() % 2)

  000f0	e8 00 00 00 00	 call	 _rand
  000f5	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  000fa	79 05		 jns	 SHORT $LN24@ShakeProce
  000fc	48		 dec	 eax
  000fd	83 c8 fe	 or	 eax, -2			; fffffffeH
  00100	40		 inc	 eax
$LN24@ShakeProce:
  00101	83 e8 00	 sub	 eax, 0
  00104	74 1d		 je	 SHORT $LN15@ShakeProce
  00106	83 e8 01	 sub	 eax, 1
  00109	75 30		 jne	 SHORT $LN20@ShakeProce

; 858  : 				break;
; 859  : 			case 1:
; 860  : 				v3Pos.z -= rand() % nShakeSize;

  0010b	e8 00 00 00 00	 call	 _rand
  00110	99		 cdq
  00111	0f 57 c9	 xorps	 xmm1, xmm1
  00114	f7 ff		 idiv	 edi
  00116	66 0f 6e c2	 movd	 xmm0, edx
  0011a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0011d	f3 0f 5c c8	 subss	 xmm1, xmm0
  00121	eb 1b		 jmp	 SHORT $LN21@ShakeProce
$LN15@ShakeProce:

; 855  : 			{
; 856  : 			case 0:
; 857  : 				v3Pos.z += rand() % nShakeSize;

  00123	e8 00 00 00 00	 call	 _rand
  00128	99		 cdq
  00129	0f 57 c9	 xorps	 xmm1, xmm1
  0012c	f7 ff		 idiv	 edi
  0012e	66 0f 6e c2	 movd	 xmm0, edx
  00132	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00135	f3 0f 58 c8	 addss	 xmm1, xmm0
  00139	eb 03		 jmp	 SHORT $LN21@ShakeProce
$LN20@ShakeProce:
  0013b	0f 57 c9	 xorps	 xmm1, xmm1
$LN21@ShakeProce:
  0013e	5f		 pop	 edi
$LN6@ShakeProce:

; 861  : 				break;
; 862  : 			}
; 863  : 		}
; 864  : 
; 865  : 		m_worldMatrix._41	+= v3Pos.x;

  0013f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _v3Pos$1$sroa$186$1$[ebp]
  00144	f3 0f 58 86 9c
	00 00 00	 addss	 xmm0, DWORD PTR [esi+156]

; 866  : 		m_worldMatrix._42	+= v3Pos.y;
; 867  : 		m_worldMatrix._43	+= v3Pos.z;

  0014c	f3 0f 58 8e a4
	00 00 00	 addss	 xmm1, DWORD PTR [esi+164]
  00154	f3 0f 11 86 9c
	00 00 00	 movss	 DWORD PTR [esi+156], xmm0
  0015c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v3Pos$1$sroa$185$1$[ebp]
  00161	f3 0f 58 86 a0
	00 00 00	 addss	 xmm0, DWORD PTR [esi+160]
  00169	f3 0f 11 8e a4
	00 00 00	 movss	 DWORD PTR [esi+164], xmm1
  00171	f3 0f 11 86 a0
	00 00 00	 movss	 DWORD PTR [esi+160], xmm0
$LN8@ShakeProce:
  00179	5e		 pop	 esi

; 868  : 	}
; 869  : }

  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c3		 ret	 0
?ShakeProcess@CActorInstance@@QAEXXZ ENDP		; CActorInstance::ShakeProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?ComboProcess@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
tv156 = -8						; size = 4
_fElapsedTime$1 = -4					; size = 4
?ComboProcess@CActorInstance@@QAEXXZ PROC		; CActorInstance::ComboProcess, COMDAT
; _this$ = ecx

; 245  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 246  : 	// If combo is on action
; 247  : 	if (0 != m_dwcurComboIndex)

  00009	8b 86 3c 04 00
	00		 mov	 eax, DWORD PTR [esi+1084]
  0000f	85 c0		 test	 eax, eax
  00011	74 63		 je	 SHORT $LN2@ComboProce

; 248  : 	{
; 249  : 		if (!m_pkCurRaceMotionData)

  00013	83 be 68 04 00
	00 00		 cmp	 DWORD PTR [esi+1128], 0
  0001a	75 1a		 jne	 SHORT $LN4@ComboProce

; 250  : 		{
; 251  : 			Tracef("Attacking motion data is NULL! : %d\n", m_dwcurComboIndex);

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@IFJHLB@Attacking?5motion?5data?5is?5NULL?$CB?5@
  00022	e8 00 00 00 00	 call	 ?Tracef@@YAXPBDZZ	; Tracef
  00027	83 c4 08	 add	 esp, 8

; 252  : 			__ClearCombo();

  0002a	8b ce		 mov	 ecx, esi
  0002c	e8 00 00 00 00	 call	 ?__ClearCombo@CActorInstance@@IAEXXZ ; CActorInstance::__ClearCombo
  00031	5e		 pop	 esi

; 279  : 			}
; 280  : 	}
; 281  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN4@ComboProce:

; 253  : 			return;
; 254  : 		}
; 255  : 
; 256  : 		float fElapsedTime = GetAttackingElapsedTime();

  00036	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime

; 257  : 
; 258  : 		// Process PreInput
; 259  : 		if (m_isPreInput)

  0003b	83 be 50 04 00
	00 00		 cmp	 DWORD PTR [esi+1104], 0
  00042	d9 5d fc	 fstp	 DWORD PTR _fElapsedTime$1[ebp]
  00045	74 5b		 je	 SHORT $LN8@ComboProce

; 260  : 		{
; 261  : 			if (fElapsedTime > m_pkCurRaceMotionData->GetNextComboTime())

  00047	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0004d	e8 00 00 00 00	 call	 ?GetNextComboTime@CRaceMotionData@@QBEMXZ ; CRaceMotionData::GetNextComboTime
  00052	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fElapsedTime$1[ebp]
  00057	d9 5d f8	 fstp	 DWORD PTR tv156[ebp]
  0005a	0f 2f 45 f8	 comiss	 xmm0, DWORD PTR tv156[ebp]
  0005e	76 42		 jbe	 SHORT $LN8@ComboProce

; 262  : 			{
; 263  : 				__RunNextCombo();

  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?__RunNextCombo@CActorInstance@@IAEXXZ ; CActorInstance::__RunNextCombo

; 264  : 				m_isPreInput = FALSE;

  00067	c7 86 50 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1104], 0
  00071	5e		 pop	 esi

; 279  : 			}
; 280  : 	}
; 281  : }

  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
$LN2@ComboProce:

; 265  : 
; 266  : 				return;
; 267  : 			}
; 268  : 		}
; 269  : 	}
; 270  : 	else
; 271  : 	{
; 272  : 		m_isPreInput = FALSE;

  00076	c7 86 50 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1104], 0

; 273  : 
; 274  : 		if (!IsUsingSkill())

  00080	e8 00 00 00 00	 call	 ?IsUsingSkill@CActorInstance@@QAEHXZ ; CActorInstance::IsUsingSkill
  00085	85 c0		 test	 eax, eax
  00087	75 19		 jne	 SHORT $LN8@ComboProce

; 275  : 			if (m_isNextPreInput)

  00089	39 86 54 04 00
	00		 cmp	 DWORD PTR [esi+1108], eax
  0008f	74 11		 je	 SHORT $LN8@ComboProce

; 276  : 			{
; 277  : 				__RunNextCombo();

  00091	8b ce		 mov	 ecx, esi
  00093	e8 00 00 00 00	 call	 ?__RunNextCombo@CActorInstance@@IAEXXZ ; CActorInstance::__RunNextCombo

; 278  : 				m_isNextPreInput = FALSE;

  00098	c7 86 54 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1108], 0
$LN8@ComboProce:
  000a2	5e		 pop	 esi

; 279  : 			}
; 280  : 	}
; 281  : }

  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c3		 ret	 0
?ComboProcess@CActorInstance@@QAEXXZ ENDP		; CActorInstance::ComboProcess
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?OnShootDamage@CActorInstance@@UAEXXZ
_TEXT	SEGMENT
?OnShootDamage@CActorInstance@@UAEXXZ PROC		; CActorInstance::OnShootDamage, COMDAT
; _this$ = ecx

; 793  : {

  00000	56		 push	 esi

; 794  : 	if (IsStun())

  00001	8d b1 14 fd ff
	ff		 lea	 esi, DWORD PTR [ecx-748]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?IsStun@CActorInstance@@QAEHXZ ; CActorInstance::IsStun
  0000e	8b ce		 mov	 ecx, esi
  00010	85 c0		 test	 eax, eax
  00012	74 06		 je	 SHORT $LN2@OnShootDam
  00014	5e		 pop	 esi

; 795  : 	{
; 796  : 		Die();

  00015	e9 00 00 00 00	 jmp	 ?Die@CActorInstance@@QAEXXZ ; CActorInstance::Die
$LN2@OnShootDam:

; 797  : 	}
; 798  : 	else
; 799  : 	{
; 800  : 		__Shake(100);

  0001a	6a 64		 push	 100			; 00000064H
  0001c	e8 00 00 00 00	 call	 ?__Shake@CActorInstance@@AAEXK@Z ; CActorInstance::__Shake

; 801  : 
; 802  : 		if (!isLock() && !__IsKnockDownMotion() && !__IsStandUpMotion())

  00021	8b ce		 mov	 ecx, esi
  00023	e8 00 00 00 00	 call	 ?isLock@CActorInstance@@QAEHXZ ; CActorInstance::isLock
  00028	85 c0		 test	 eax, eax
  0002a	75 50		 jne	 SHORT $LN5@OnShootDam
  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?__IsKnockDownMotion@CActorInstance@@IAE_NXZ ; CActorInstance::__IsKnockDownMotion
  00033	84 c0		 test	 al, al
  00035	75 45		 jne	 SHORT $LN5@OnShootDam
  00037	8b ce		 mov	 ecx, esi
  00039	e8 00 00 00 00	 call	 ?__IsStandUpMotion@CActorInstance@@IAE_NXZ ; CActorInstance::__IsStandUpMotion
  0003e	84 c0		 test	 al, al
  00040	75 3a		 jne	 SHORT $LN5@OnShootDam

; 803  : 		{
; 804  : 			if (InterceptOnceMotion(CRaceMotionData::NAME_DAMAGE))

  00042	51		 push	 ecx
  00043	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  0004a	6a 00		 push	 0
  0004c	51		 push	 ecx
  0004d	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00054	8b ce		 mov	 ecx, esi
  00056	6a 05		 push	 5
  00058	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion
  0005d	84 c0		 test	 al, al
  0005f	74 1b		 je	 SHORT $LN5@OnShootDam

; 805  : 			{
; 806  : 				PushLoopMotion(CRaceMotionData::NAME_WAIT);

  00061	83 ec 08	 sub	 esp, 8
  00064	8b ce		 mov	 ecx, esi
  00066	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  0006e	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  00075	6a 01		 push	 1
  00077	e8 00 00 00 00	 call	 ?PushLoopMotion@CActorInstance@@QAE_NKMM@Z ; CActorInstance::PushLoopMotion
$LN5@OnShootDam:

; 807  : 			}
; 808  : 		}
; 809  : 	}
; 810  : }

  0007c	5e		 pop	 esi
  0007d	c3		 ret	 0
?OnShootDamage@CActorInstance@@UAEXXZ ENDP		; CActorInstance::OnShootDamage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?CanFishing@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanFishing@CActorInstance@@QAE_NXZ PROC		; CActorInstance::CanFishing, COMDAT
; _this$ = ecx

; 119  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 120  : 	if (!CanAct())

  00003	e8 00 00 00 00	 call	 ?CanAct@CActorInstance@@QAE_NXZ ; CActorInstance::CanAct
  00008	84 c0		 test	 al, al
  0000a	74 28		 je	 SHORT $LN9@CanFishing

; 121  : 	{
; 122  : 		return false;
; 123  : 	}
; 124  : 
; 125  : 	if (IsUsingSkill())

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?IsUsingSkill@CActorInstance@@QAEHXZ ; CActorInstance::IsUsingSkill
  00013	85 c0		 test	 eax, eax
  00015	75 1d		 jne	 SHORT $LN9@CanFishing

; 126  : 	{
; 127  : 		return false;
; 128  : 	}
; 129  : 
; 130  : 	switch (__GetCurrentMotionIndex())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?__GetCurrentMotionIndex@CActorInstance@@IAEGXZ ; CActorInstance::__GetCurrentMotionIndex
  0001e	0f b7 c0	 movzx	 eax, ax
  00021	83 e8 01	 sub	 eax, 1
  00024	74 0a		 je	 SHORT $LN6@CanFishing
  00026	83 e8 01	 sub	 eax, 1
  00029	74 05		 je	 SHORT $LN6@CanFishing
  0002b	83 e8 01	 sub	 eax, 1
  0002e	75 04		 jne	 SHORT $LN9@CanFishing
$LN6@CanFishing:

; 138  : 		break;
; 139  : 	}
; 140  : 
; 141  : 	return true;

  00030	b0 01		 mov	 al, 1
  00032	5e		 pop	 esi

; 142  : }

  00033	c3		 ret	 0
$LN9@CanFishing:

; 131  : 	{
; 132  : 	case CRaceMotionData::NAME_WAIT:
; 133  : 	case CRaceMotionData::NAME_WALK:
; 134  : 	case CRaceMotionData::NAME_RUN:
; 135  : 		break;
; 136  : 	default:
; 137  : 		return false;

  00034	32 c0		 xor	 al, al
  00036	5e		 pop	 esi

; 142  : }

  00037	c3		 ret	 0
?CanFishing@CActorInstance@@QAE_NXZ ENDP		; CActorInstance::CanFishing
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?SetBattleAttachEffect@CActorInstance@@QAEXK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?SetBattleAttachEffect@CActorInstance@@QAEXK@Z PROC	; CActorInstance::SetBattleAttachEffect, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : 	m_dwBattleAttachEffectID = dwID;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwID$[ebp]
  00006	89 81 98 04 00
	00		 mov	 DWORD PTR [ecx+1176], eax

; 17   : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetBattleAttachEffect@CActorInstance@@QAEXK@Z ENDP	; CActorInstance::SetBattleAttachEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?SetBattleHitEffect@CActorInstance@@QAEXK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?SetBattleHitEffect@CActorInstance@@QAEXK@Z PROC	; CActorInstance::SetBattleHitEffect, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 11   : 	m_dwBattleHitEffectID = dwID;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwID$[ebp]
  00006	89 81 94 04 00
	00		 mov	 DWORD PTR [ecx+1172], eax

; 12   : }

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?SetBattleHitEffect@CActorInstance@@QAEXK@Z ENDP	; CActorInstance::SetBattleHitEffect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?ComboAttack@CActorInstance@@QAEHKMM@Z
_TEXT	SEGMENT
_dwMotionIndex$ = 8					; size = 4
_fDirRot$ = 12						; size = 4
_fBlendTime$ = 16					; size = 4
?ComboAttack@CActorInstance@@QAEHKMM@Z PROC		; CActorInstance::ComboAttack, COMDAT
; _this$ = ecx

; 560  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 561  : 	BlendRotation(fDirRot, fBlendTime);

  00003	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fBlendTime$[ebp]
  00008	57		 push	 edi
  00009	83 ec 08	 sub	 esp, 8
  0000c	8b f9		 mov	 edi, ecx
  0000e	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00014	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fDirRot$[ebp]
  00019	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001e	e8 00 00 00 00	 call	 ?BlendRotation@CActorInstance@@QAEXMM@Z ; CActorInstance::BlendRotation

; 562  : 	SetAdvancingRotation(fDirRot);

  00023	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fDirRot$[ebp]
  00028	51		 push	 ecx
  00029	8b cf		 mov	 ecx, edi
  0002b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00030	e8 00 00 00 00	 call	 ?SetAdvancingRotation@CActorInstance@@QAEXM@Z ; CActorInstance::SetAdvancingRotation

; 563  : 
; 564  : 	InterceptOnceMotion(dwMotionIndex, fBlendTime, 0, __GetAttackSpeed());

  00035	8b cf		 mov	 ecx, edi
  00037	e8 00 00 00 00	 call	 ?__GetAttackSpeed@CActorInstance@@IAEMXZ ; CActorInstance::__GetAttackSpeed
  0003c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fBlendTime$[ebp]
  00041	51		 push	 ecx
  00042	d9 1c 24	 fstp	 DWORD PTR [esp]
  00045	6a 00		 push	 0
  00047	51		 push	 ecx
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	8b cf		 mov	 ecx, edi
  0004f	ff 75 08	 push	 DWORD PTR _dwMotionIndex$[ebp]
  00052	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion

; 565  : 
; 566  : 	__OnAttack(dwMotionIndex);

  00057	ff 75 08	 push	 DWORD PTR _dwMotionIndex$[ebp]
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?__OnAttack@CActorInstance@@QAEXG@Z ; CActorInstance::__OnAttack

; 567  : 
; 568  : 	NEW_SetAtkPixelPosition(NEW_GetCurPixelPositionRef());

  00061	8b cf		 mov	 ecx, edi
  00063	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetCurPixelPositionRef
  00068	50		 push	 eax
  00069	8b cf		 mov	 ecx, edi
  0006b	e8 00 00 00 00	 call	 ?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z ; CActorInstance::NEW_SetAtkPixelPosition

; 569  : 
; 570  : 	return TRUE;

  00070	b8 01 00 00 00	 mov	 eax, 1
  00075	5f		 pop	 edi

; 571  : }

  00076	5d		 pop	 ebp
  00077	c2 0c 00	 ret	 12			; 0000000cH
?ComboAttack@CActorInstance@@QAEHKMM@Z ENDP		; CActorInstance::ComboAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?NormalAttack@CActorInstance@@QAEHMM@Z
_TEXT	SEGMENT
_wMotionIndex$ = -4					; size = 2
tv90 = 8						; size = 4
_fDirRot$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
?NormalAttack@CActorInstance@@QAEHMM@Z PROC		; CActorInstance::NormalAttack, COMDAT
; _this$ = ecx

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 542  : 	WORD wMotionIndex;
; 543  : 	if (!m_pkCurRaceData->GetNormalAttackIndex(m_wcurMotionMode, &wMotionIndex))

  00007	8d 45 fc	 lea	 eax, DWORD PTR _wMotionIndex$[ebp]
  0000a	50		 push	 eax
  0000b	0f b7 86 78 03
	00 00		 movzx	 eax, WORD PTR [esi+888]
  00012	8b 8e 64 04 00
	00		 mov	 ecx, DWORD PTR [esi+1124]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ?GetNormalAttackIndex@CRaceData@@QAEHGPAG@Z ; CRaceData::GetNormalAttackIndex
  0001e	85 c0		 test	 eax, eax
  00020	75 07		 jne	 SHORT $LN2@NormalAtta
  00022	5e		 pop	 esi

; 557  : }

  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
$LN2@NormalAtta:

; 544  : 	{
; 545  : 		return FALSE;
; 546  : 	}
; 547  : 
; 548  : 	BlendRotation(fDirRot, fBlendTime);

  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fBlendTime$[ebp]
  0002e	83 ec 08	 sub	 esp, 8
  00031	8b ce		 mov	 ecx, esi
  00033	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00039	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDirRot$[ebp]
  0003e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00043	e8 00 00 00 00	 call	 ?BlendRotation@CActorInstance@@QAEXMM@Z ; CActorInstance::BlendRotation

; 549  : 	SetAdvancingRotation(fDirRot);

  00048	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDirRot$[ebp]
  0004d	51		 push	 ecx
  0004e	8b ce		 mov	 ecx, esi
  00050	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00055	e8 00 00 00 00	 call	 ?SetAdvancingRotation@CActorInstance@@QAEXM@Z ; CActorInstance::SetAdvancingRotation

; 550  : 	InterceptOnceMotion(wMotionIndex, 0.1f, 0, __GetAttackSpeed());

  0005a	8b ce		 mov	 ecx, esi
  0005c	e8 00 00 00 00	 call	 ?__GetAttackSpeed@CActorInstance@@IAEMXZ ; CActorInstance::__GetAttackSpeed
  00061	0f b7 45 fc	 movzx	 eax, WORD PTR _wMotionIndex$[ebp]
  00065	51		 push	 ecx
  00066	d9 5d 08	 fstp	 DWORD PTR tv90[ebp]
  00069	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv90[ebp]
  0006e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00073	6a 00		 push	 0
  00075	51		 push	 ecx
  00076	c7 04 24 cd cc
	cc 3d		 mov	 DWORD PTR [esp], 1036831949 ; 3dcccccdH
  0007d	8b ce		 mov	 ecx, esi
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?InterceptOnceMotion@CActorInstance@@QAE_NKMIM@Z ; CActorInstance::InterceptOnceMotion

; 551  : 
; 552  : 	__OnAttack(wMotionIndex);

  00085	ff 75 fc	 push	 DWORD PTR _wMotionIndex$[ebp]
  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?__OnAttack@CActorInstance@@QAEXG@Z ; CActorInstance::__OnAttack

; 553  : 
; 554  : 	NEW_SetAtkPixelPosition(NEW_GetCurPixelPositionRef());

  0008f	8b ce		 mov	 ecx, esi
  00091	e8 00 00 00 00	 call	 ?NEW_GetCurPixelPositionRef@CActorInstance@@QAEABUD3DXVECTOR3@@XZ ; CActorInstance::NEW_GetCurPixelPositionRef
  00096	50		 push	 eax
  00097	8b ce		 mov	 ecx, esi
  00099	e8 00 00 00 00	 call	 ?NEW_SetAtkPixelPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@@Z ; CActorInstance::NEW_SetAtkPixelPosition

; 555  : 
; 556  : 	return TRUE;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	5e		 pop	 esi

; 557  : }

  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c2 08 00	 ret	 8
?NormalAttack@CActorInstance@@QAEHMM@Z ENDP		; CActorInstance::NormalAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pPosition$ = 8						; size = 4
?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z PROC ; CActorInstance::GetBlendingPosition, COMDAT
; _this$ = ecx

; 1027 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 1028 : 	if (m_PhysicsObject.isBlending())

  00005	8b 75 08	 mov	 esi, DWORD PTR _pPosition$[ebp]
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8d 8f c4 03 00
	00		 lea	 ecx, DWORD PTR [edi+964]
  00011	e8 00 00 00 00	 call	 ?isBlending@CPhysicsObject@@QAE_NXZ ; CPhysicsObject::isBlending
  00016	84 c0		 test	 al, al
  00018	74 47		 je	 SHORT $LN2@GetBlendin

; 1029 : 	{
; 1030 : 		m_PhysicsObject.GetLastPosition(pPosition);

  0001a	56		 push	 esi
  0001b	8d 8f c4 03 00
	00		 lea	 ecx, DWORD PTR [edi+964]
  00021	e8 00 00 00 00	 call	 ?GetLastPosition@CPhysicsObject@@QAEXPAUD3DXVECTOR3@@@Z ; CPhysicsObject::GetLastPosition

; 1031 : 		pPosition->x += m_x;

  00026	f3 0f 10 87 ac
	04 00 00	 movss	 xmm0, DWORD PTR [edi+1196]
  0002e	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  00032	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 1032 : 		pPosition->y += m_y;

  00036	f3 0f 10 87 b0
	04 00 00	 movss	 xmm0, DWORD PTR [edi+1200]
  0003e	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  00043	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 1033 : 		pPosition->z += m_z;

  00048	f3 0f 10 87 b4
	04 00 00	 movss	 xmm0, DWORD PTR [edi+1204]
  00050	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  00055	5f		 pop	 edi
  00056	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0

; 1040 : 	}
; 1041 : }

  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN2@GetBlendin:

; 1034 : 	}
; 1035 : 	else
; 1036 : 	{
; 1037 : 		pPosition->x = m_x;

  00061	8b 87 ac 04 00
	00		 mov	 eax, DWORD PTR [edi+1196]
  00067	89 06		 mov	 DWORD PTR [esi], eax

; 1038 : 		pPosition->y = m_y;

  00069	8b 87 b0 04 00
	00		 mov	 eax, DWORD PTR [edi+1200]
  0006f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1039 : 		pPosition->z = m_z;

  00072	8b 87 b4 04 00
	00		 mov	 eax, DWORD PTR [edi+1204]
  00078	5f		 pop	 edi
  00079	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1040 : 	}
; 1041 : }

  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	5d		 pop	 ebp
  0007f	c2 04 00	 ret	 4
?GetBlendingPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z ENDP ; CActorInstance::GetBlendingPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?ResetBlendingPosition@CActorInstance@@QAEXXZ
_TEXT	SEGMENT
?ResetBlendingPosition@CActorInstance@@QAEXXZ PROC	; CActorInstance::ResetBlendingPosition, COMDAT
; _this$ = ecx

; 1023 : 	m_PhysicsObject.Initialize();

  00000	81 c1 c4 03 00
	00		 add	 ecx, 964		; 000003c4H
  00006	e9 00 00 00 00	 jmp	 ?Initialize@CPhysicsObject@@QAEXXZ ; CPhysicsObject::Initialize
?ResetBlendingPosition@CActorInstance@@QAEXXZ ENDP	; CActorInstance::ResetBlendingPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?SetBlendingPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@M@Z
_TEXT	SEGMENT
_Position$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rPosition$ = 8					; size = 4
_fBlendingTime$ = 12					; size = 4
?SetBlendingPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@M@Z PROC ; CActorInstance::SetBlendingPosition, COMDAT
; _this$ = ecx

; 1010 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _c_rPosition$[ebp]

; 1011 : 	//return;
; 1012 : 	TPixelPosition Position;
; 1013 : 
; 1014 : 	Position.x = c_rPosition.x - m_x;
; 1015 : 	Position.y = c_rPosition.y - m_y;
; 1016 : 	Position.z = 0;
; 1017 : 
; 1018 : 	m_PhysicsObject.SetLastPosition(Position, fBlendingTime);

  00013	51		 push	 ecx
  00014	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Position$[ebp+8], 0
  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 5c 81 ac
	04 00 00	 subss	 xmm0, DWORD PTR [ecx+1196]
  00027	f3 0f 11 45 f0	 movss	 DWORD PTR _Position$[ebp], xmm0
  0002c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00031	8d 45 f0	 lea	 eax, DWORD PTR _Position$[ebp]
  00034	f3 0f 5c 81 b0
	04 00 00	 subss	 xmm0, DWORD PTR [ecx+1200]
  0003c	81 c1 c4 03 00
	00		 add	 ecx, 964		; 000003c4H
  00042	f3 0f 11 45 f4	 movss	 DWORD PTR _Position$[ebp+4], xmm0
  00047	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fBlendingTime$[ebp]
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?SetLastPosition@CPhysicsObject@@QAEXABUD3DXVECTOR3@@M@Z ; CPhysicsObject::SetLastPosition

; 1019 : }

  00057	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005a	33 cd		 xor	 ecx, ebp
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?SetBlendingPosition@CActorInstance@@QAEXABUD3DXVECTOR3@@M@Z ENDP ; CActorInstance::SetBlendingPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ
_TEXT	SEGMENT
tv66 = -4						; size = 4
?GetAttackingElapsedTime@CActorInstance@@QAEMXZ PROC	; CActorInstance::GetAttackingElapsedTime, COMDAT
; _this$ = ecx

; 515  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 516  : 	return (GetLocalTime() - m_kCurMotNode.fStartTime) * m_kCurMotNode.fSpeedRatio;

  00007	e8 00 00 00 00	 call	 ?GetLocalTime@CGraphicThingInstance@@QAEMXZ ; CGraphicThingInstance::GetLocalTime
  0000c	d8 a6 64 03 00
	00		 fsub	 DWORD PTR [esi+868]
  00012	d9 5d fc	 fstp	 DWORD PTR tv66[ebp]
  00015	d9 86 6c 03 00
	00		 fld	 DWORD PTR [esi+876]
  0001b	d8 4d fc	 fmul	 DWORD PTR tv66[ebp]
  0001e	5e		 pop	 esi

; 517  : //	return (GetLocalTime() - m_kCurMotNode.fStartTime) * __GetAttackSpeed();
; 518  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ENDP	; CActorInstance::GetAttackingElapsedTime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?GetComboIndex@CActorInstance@@QAEKXZ
_TEXT	SEGMENT
?GetComboIndex@CActorInstance@@QAEKXZ PROC		; CActorInstance::GetComboIndex, COMDAT
; _this$ = ecx

; 511  : 	return m_dwcurComboIndex;

  00000	8b 81 3c 04 00
	00		 mov	 eax, DWORD PTR [ecx+1084]

; 512  : }

  00006	c3		 ret	 0
?GetComboIndex@CActorInstance@@QAEKXZ ENDP		; CActorInstance::GetComboIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?IsActEmotion@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?IsActEmotion@CActorInstance@@QAEHXZ PROC		; CActorInstance::IsActEmotion, COMDAT
; _this$ = ecx

; 480  : 	DWORD dwCurMotionIndex = __GetCurrentMotionIndex();

  00000	e8 00 00 00 00	 call	 ?__GetCurrentMotionIndex@CActorInstance@@IAEGXZ ; CActorInstance::__GetCurrentMotionIndex
  00005	0f b7 c0	 movzx	 eax, ax

; 481  : 	switch (dwCurMotionIndex)

  00008	05 cb fe ff ff	 add	 eax, -309		; fffffecbH
  0000d	83 f8 07	 cmp	 eax, 7
  00010	77 14		 ja	 SHORT $LN2@IsActEmoti
  00012	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN13@IsActEmoti[eax]
  00019	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN14@IsActEmoti[eax*4]
$LN4@IsActEmoti:

; 482  : 	{
; 483  : 	case CRaceMotionData::NAME_FRENCH_KISS_START+0:
; 484  : 	case CRaceMotionData::NAME_FRENCH_KISS_START+1:
; 485  : 	case CRaceMotionData::NAME_FRENCH_KISS_START+2:
; 486  : 	case CRaceMotionData::NAME_FRENCH_KISS_START+3:
; 487  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 488  : 	case CRaceMotionData::NAME_FRENCH_KISS_START+4:
; 489  : #endif
; 490  : 	case CRaceMotionData::NAME_KISS_START+0:
; 491  : 	case CRaceMotionData::NAME_KISS_START+1:
; 492  : 	case CRaceMotionData::NAME_KISS_START+2:
; 493  : 	case CRaceMotionData::NAME_KISS_START+3:
; 494  : #ifdef ENABLE_WOLFMAN_CHARACTER
; 495  : 	case CRaceMotionData::NAME_KISS_START+4:
; 496  : #endif
; 497  : 		return TRUE;

  00020	b8 01 00 00 00	 mov	 eax, 1

; 502  : }

  00025	c3		 ret	 0
$LN2@IsActEmoti:

; 498  : 		break;
; 499  : 	}
; 500  : 
; 501  : 	return FALSE;

  00026	33 c0		 xor	 eax, eax

; 502  : }

  00028	c3		 ret	 0
  00029	0f 1f 00	 npad	 3
$LN14@IsActEmoti:
  0002c	00 00 00 00	 DD	 $LN4@IsActEmoti
$LN13@IsActEmoti:
  00030	00		 DB	 0
  00031	00		 DB	 0
  00032	00		 DB	 0
  00033	00		 DB	 0
  00034	00		 DB	 0
  00035	00		 DB	 0
  00036	00		 DB	 0
  00037	00		 DB	 0
?IsActEmotion@CActorInstance@@QAEHXZ ENDP		; CActorInstance::IsActEmotion
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?IsUsingMovingSkill@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?IsUsingMovingSkill@CActorInstance@@QAEHXZ PROC		; CActorInstance::IsUsingMovingSkill, COMDAT
; _this$ = ecx

; 506  : 	return __IsMovingSkill(m_kCurMotNode.uSkill);

  00000	0f b7 81 74 03
	00 00		 movzx	 eax, WORD PTR [ecx+884]
  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ?__IsMovingSkill@CActorInstance@@IAEHG@Z ; CActorInstance::__IsMovingSkill

; 507  : }

  0000d	c3		 ret	 0
?IsUsingMovingSkill@CActorInstance@@QAEHXZ ENDP		; CActorInstance::IsUsingMovingSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?IsSplashAttacking@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?IsSplashAttacking@CActorInstance@@QAEHXZ PROC		; CActorInstance::IsSplashAttacking, COMDAT
; _this$ = ecx

; 455  : 	if (!m_pkCurRaceMotionData)

  00000	8b 89 68 04 00
	00		 mov	 ecx, DWORD PTR [ecx+1128]
  00006	85 c9		 test	 ecx, ecx
  00008	74 0c		 je	 SHORT $LN3@IsSplashAt

; 456  : 	{
; 457  : 		return FALSE;
; 458  : 	}
; 459  : 
; 460  : 	if (m_pkCurRaceMotionData->HasSplashMotionEvent())

  0000a	e8 00 00 00 00	 call	 ?HasSplashMotionEvent@CRaceMotionData@@QBEHXZ ; CRaceMotionData::HasSplashMotionEvent
  0000f	f7 d8		 neg	 eax
  00011	1b c0		 sbb	 eax, eax
  00013	f7 d8		 neg	 eax

; 466  : }

  00015	c3		 ret	 0
$LN3@IsSplashAt:

; 461  : 	{
; 462  : 		return TRUE;
; 463  : 	}
; 464  : 
; 465  : 	return FALSE;

  00016	33 c0		 xor	 eax, eax

; 466  : }

  00018	c3		 ret	 0
?IsSplashAttacking@CActorInstance@@QAEHXZ ENDP		; CActorInstance::IsSplashAttacking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?isComboAttacking@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?isComboAttacking@CActorInstance@@QAEHXZ PROC		; CActorInstance::isComboAttacking, COMDAT
; _this$ = ecx

; 433  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 434  : 	if (!m_pkCurRaceMotionData)

  00003	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 21		 je	 SHORT $LN6@isComboAtt

; 435  : 	{
; 436  : 		return FALSE;
; 437  : 	}
; 438  : 
; 439  : 	if (!m_pkCurRaceMotionData->isAttackingMotion())

  0000d	e8 00 00 00 00	 call	 ?isAttackingMotion@CRaceMotionData@@QBEHXZ ; CRaceMotionData::isAttackingMotion
  00012	85 c0		 test	 eax, eax
  00014	74 18		 je	 SHORT $LN6@isComboAtt

; 440  : 	{
; 441  : 		return FALSE;
; 442  : 	}
; 443  : 
; 444  : 	const NRaceData::TMotionAttackData * c_pData = m_pkCurRaceMotionData->GetMotionAttackDataPointer();

  00016	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0001c	e8 00 00 00 00	 call	 ?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataPointer

; 445  : 	if (NRaceData::MOTION_TYPE_COMBO != c_pData->iMotionType)

  00021	33 c9		 xor	 ecx, ecx
  00023	5e		 pop	 esi
  00024	83 78 18 02	 cmp	 DWORD PTR [eax+24], 2
  00028	0f 94 c1	 sete	 cl
  0002b	8b c1		 mov	 eax, ecx

; 448  : 	}
; 449  : 
; 450  : 	return TRUE;
; 451  : }

  0002d	c3		 ret	 0
$LN6@isComboAtt:

; 446  : 	{
; 447  : 		return FALSE;

  0002e	33 c0		 xor	 eax, eax
  00030	5e		 pop	 esi

; 448  : 	}
; 449  : 
; 450  : 	return TRUE;
; 451  : }

  00031	c3		 ret	 0
?isComboAttacking@CActorInstance@@QAEHXZ ENDP		; CActorInstance::isComboAttacking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?isNormalAttacking@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?isNormalAttacking@CActorInstance@@QAEHXZ PROC		; CActorInstance::isNormalAttacking, COMDAT
; _this$ = ecx

; 412  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 413  : 	if (!m_pkCurRaceMotionData)

  00003	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  00009	85 c9		 test	 ecx, ecx
  0000b	74 21		 je	 SHORT $LN6@isNormalAt

; 414  : 	{
; 415  : 		return FALSE;
; 416  : 	}
; 417  : 
; 418  : 	if (!m_pkCurRaceMotionData->isAttackingMotion())

  0000d	e8 00 00 00 00	 call	 ?isAttackingMotion@CRaceMotionData@@QBEHXZ ; CRaceMotionData::isAttackingMotion
  00012	85 c0		 test	 eax, eax
  00014	74 18		 je	 SHORT $LN6@isNormalAt

; 419  : 	{
; 420  : 		return FALSE;
; 421  : 	}
; 422  : 
; 423  : 	const NRaceData::TMotionAttackData * c_pData = m_pkCurRaceMotionData->GetMotionAttackDataPointer();

  00016	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0001c	e8 00 00 00 00	 call	 ?GetMotionAttackDataPointer@CRaceMotionData@@QBEPBUSMotionAttackData@NRaceData@@XZ ; CRaceMotionData::GetMotionAttackDataPointer

; 424  : 	if (NRaceData::MOTION_TYPE_NORMAL != c_pData->iMotionType)

  00021	33 c9		 xor	 ecx, ecx
  00023	5e		 pop	 esi
  00024	83 78 18 01	 cmp	 DWORD PTR [eax+24], 1
  00028	0f 94 c1	 sete	 cl
  0002b	8b c1		 mov	 eax, ecx

; 427  : 	}
; 428  : 
; 429  : 	return TRUE;
; 430  : }

  0002d	c3		 ret	 0
$LN6@isNormalAt:

; 425  : 	{
; 426  : 		return FALSE;

  0002e	33 c0		 xor	 eax, eax
  00030	5e		 pop	 esi

; 427  : 	}
; 428  : 
; 429  : 	return TRUE;
; 430  : }

  00031	c3		 ret	 0
?isNormalAttacking@CActorInstance@@QAEHXZ ENDP		; CActorInstance::isNormalAttacking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?isAttacking@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?isAttacking@CActorInstance@@QAEHXZ PROC		; CActorInstance::isAttacking, COMDAT
; _this$ = ecx

; 344  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 345  : 	if (isNormalAttacking())

  00003	e8 00 00 00 00	 call	 ?isNormalAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isNormalAttacking
  00008	85 c0		 test	 eax, eax
  0000a	75 1a		 jne	 SHORT $LN6@isAttackin

; 346  : 	{
; 347  : 		return TRUE;
; 348  : 	}
; 349  : 
; 350  : 	if (isComboAttacking())

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?isComboAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isComboAttacking
  00013	85 c0		 test	 eax, eax
  00015	75 0f		 jne	 SHORT $LN6@isAttackin

; 351  : 	{
; 352  : 		return TRUE;
; 353  : 	}
; 354  : 
; 355  : 	if (IsSplashAttacking())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?IsSplashAttacking@CActorInstance@@QAEHXZ ; CActorInstance::IsSplashAttacking
  0001e	f7 d8		 neg	 eax
  00020	5e		 pop	 esi
  00021	1b c0		 sbb	 eax, eax
  00023	f7 d8		 neg	 eax

; 358  : 	}
; 359  : 
; 360  : 	return FALSE;
; 361  : }

  00025	c3		 ret	 0
$LN6@isAttackin:

; 356  : 	{
; 357  : 		return TRUE;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	5e		 pop	 esi

; 358  : 	}
; 359  : 
; 360  : 	return FALSE;
; 361  : }

  0002c	c3		 ret	 0
?isAttacking@CActorInstance@@QAEHXZ ENDP		; CActorInstance::isAttacking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?InputComboAttackCommand@CActorInstance@@QAE_NM@Z
_TEXT	SEGMENT
tv186 = -4						; size = 4
tv180 = -4						; size = 4
tv175 = -4						; size = 4
tv166 = -4						; size = 4
_fElapsedTime$1 = 8					; size = 4
_fElapsedTime$2 = 8					; size = 4
_fDirRot$ = 8						; size = 4
?InputComboAttackCommand@CActorInstance@@QAE_NM@Z PROC	; CActorInstance::InputComboAttackCommand, COMDAT
; _this$ = ecx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 189  : 	m_fAtkDirRot = fDirRot;

  00004	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDirRot$[ebp]
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 190  : 
; 191  : 	if (m_isPreInput)

  0000c	83 be 50 04 00
	00 00		 cmp	 DWORD PTR [esi+1104], 0
  00013	f3 0f 11 86 60
	04 00 00	 movss	 DWORD PTR [esi+1120], xmm0
  0001b	75 58		 jne	 SHORT $LN12@InputCombo

; 192  : 	{
; 193  : 		return false;
; 194  : 	}
; 195  : 
; 196  : 	/////////////////////////////////////////////////////////////////////////////////
; 197  : 
; 198  : 	// Process Input
; 199  : 	if (0 == m_dwcurComboIndex)

  0001d	83 be 3c 04 00
	00 00		 cmp	 DWORD PTR [esi+1084], 0
  00024	0f 84 c0 00 00
	00		 je	 $LN14@InputCombo

; 200  : 	{
; 201  : 		__RunNextCombo();
; 202  : 		return true;
; 203  : 	}
; 204  : 	else if (m_pkCurRaceMotionData->IsComboInputTimeData())

  0002a	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  00030	e8 00 00 00 00	 call	 ?IsComboInputTimeData@CRaceMotionData@@QBEHXZ ; CRaceMotionData::IsComboInputTimeData
  00035	8b ce		 mov	 ecx, esi
  00037	85 c0		 test	 eax, eax
  00039	0f 84 84 00 00
	00		 je	 $LN5@InputCombo

; 205  : 	{
; 206  : 		float fElapsedTime = GetAttackingElapsedTime();

  0003f	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime

; 207  : 
; 208  : 		if (fElapsedTime > m_pkCurRaceMotionData->GetComboInputEndTime())

  00044	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0004a	d9 5d 08	 fstp	 DWORD PTR _fElapsedTime$2[ebp]
  0004d	e8 00 00 00 00	 call	 ?GetComboInputEndTime@CRaceMotionData@@QBEMXZ ; CRaceMotionData::GetComboInputEndTime
  00052	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$2[ebp]
  00057	d9 5d fc	 fstp	 DWORD PTR tv186[ebp]
  0005a	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv186[ebp]
  0005e	76 1e		 jbe	 SHORT $LN7@InputCombo

; 209  : 		{
; 210  : 			if (IsBowMode())

  00060	8b ce		 mov	 ecx, esi
  00062	e8 00 00 00 00	 call	 ?IsBowMode@CActorInstance@@QAE_NXZ ; CActorInstance::IsBowMode
  00067	84 c0		 test	 al, al
  00069	74 0a		 je	 SHORT $LN12@InputCombo

; 211  : 			{
; 212  : 				m_isNextPreInput = TRUE;

  0006b	c7 86 54 04 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+1108], 1
$LN12@InputCombo:

; 237  : 		}
; 238  : 	}
; 239  : 	// Process Input
; 240  : 
; 241  : 	return false;
; 242  : }

  00075	32 c0		 xor	 al, al
  00077	5e		 pop	 esi
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
$LN7@InputCombo:

; 213  : 			}
; 214  : 			return false;
; 215  : 		}
; 216  : 
; 217  : 		if (fElapsedTime > m_pkCurRaceMotionData->GetNextComboTime())

  0007e	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  00084	e8 00 00 00 00	 call	 ?GetNextComboTime@CRaceMotionData@@QBEMXZ ; CRaceMotionData::GetNextComboTime
  00089	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$2[ebp]
  0008e	d9 5d fc	 fstp	 DWORD PTR tv180[ebp]
  00091	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv180[ebp]
  00095	77 53		 ja	 SHORT $LN14@InputCombo

; 218  : 		{
; 219  : 			// args : BlendingTime
; 220  : 			__RunNextCombo();
; 221  : 			return true;
; 222  : 		}
; 223  : 		else if (fElapsedTime > m_pkCurRaceMotionData->GetComboInputStartTime())

  00097	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0009d	e8 00 00 00 00	 call	 ?GetComboInputStartTime@CRaceMotionData@@QBEMXZ ; CRaceMotionData::GetComboInputStartTime
  000a2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$2[ebp]
  000a7	d9 5d fc	 fstp	 DWORD PTR tv175[ebp]
  000aa	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv175[ebp]
  000ae	76 c5		 jbe	 SHORT $LN12@InputCombo

; 224  : 		{
; 225  : 			m_isPreInput = TRUE;

  000b0	c7 86 50 04 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+1104], 1

; 237  : 		}
; 238  : 	}
; 239  : 	// Process Input
; 240  : 
; 241  : 	return false;
; 242  : }

  000ba	32 c0		 xor	 al, al
  000bc	5e		 pop	 esi
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
$LN5@InputCombo:

; 226  : 			return false;
; 227  : 		}
; 228  : 	}
; 229  : 	else
; 230  : 	{
; 231  : 		float fElapsedTime = GetAttackingElapsedTime();

  000c3	e8 00 00 00 00	 call	 ?GetAttackingElapsedTime@CActorInstance@@QAEMXZ ; CActorInstance::GetAttackingElapsedTime

; 232  : 		if (fElapsedTime > m_pkCurRaceMotionData->GetMotionDuration() * 0.9f)

  000c8	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  000ce	d9 5d 08	 fstp	 DWORD PTR _fElapsedTime$1[ebp]
  000d1	e8 00 00 00 00	 call	 ?GetMotionDuration@CRaceMotionData@@QAEMXZ ; CRaceMotionData::GetMotionDuration
  000d6	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f666666
  000dc	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$1[ebp]
  000e1	d9 5d fc	 fstp	 DWORD PTR tv166[ebp]
  000e4	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv166[ebp]
  000e8	76 8b		 jbe	 SHORT $LN12@InputCombo
$LN14@InputCombo:

; 233  : 		{
; 234  : 			// args : BlendingTime
; 235  : 			__RunNextCombo();

  000ea	8b ce		 mov	 ecx, esi
  000ec	e8 00 00 00 00	 call	 ?__RunNextCombo@CActorInstance@@IAEXXZ ; CActorInstance::__RunNextCombo

; 236  : 			return true;

  000f1	b0 01		 mov	 al, 1
  000f3	5e		 pop	 esi

; 237  : 		}
; 238  : 	}
; 239  : 	// Process Input
; 240  : 
; 241  : 	return false;
; 242  : }

  000f4	8b e5		 mov	 esp, ebp
  000f6	5d		 pop	 ebp
  000f7	c2 04 00	 ret	 4
?InputComboAttackCommand@CActorInstance@@QAE_NM@Z ENDP	; CActorInstance::InputComboAttackCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?InputNormalAttackCommand@CActorInstance@@QAEXM@Z
_TEXT	SEGMENT
_fDirRot$ = 8						; size = 4
?InputNormalAttackCommand@CActorInstance@@QAEXM@Z PROC	; CActorInstance::InputNormalAttackCommand, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 178  : 	if (!__CanInputNormalAttackCommand())

  00006	e8 00 00 00 00	 call	 ?__CanInputNormalAttackCommand@CActorInstance@@QAE_NXZ ; CActorInstance::__CanInputNormalAttackCommand
  0000b	84 c0		 test	 al, al
  0000d	74 24		 je	 SHORT $LN1@InputNorma

; 179  : 	{
; 180  : 		return;
; 181  : 	}
; 182  : 
; 183  : 	m_fAtkDirRot = fDirRot;

  0000f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDirRot$[ebp]

; 184  : 	NormalAttack(m_fAtkDirRot);

  00014	83 ec 08	 sub	 esp, 8
  00017	8b ce		 mov	 ecx, esi
  00019	f3 0f 11 86 60
	04 00 00	 movss	 DWORD PTR [esi+1120], xmm0
  00021	c7 44 24 04 cd
	cc cc 3d	 mov	 DWORD PTR [esp+4], 1036831949 ; 3dcccccdH
  00029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0002e	e8 00 00 00 00	 call	 ?NormalAttack@CActorInstance@@QAEHMM@Z ; CActorInstance::NormalAttack
$LN1@InputNorma:
  00033	5e		 pop	 esi

; 185  : }

  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?InputNormalAttackCommand@CActorInstance@@QAEXM@Z ENDP	; CActorInstance::InputNormalAttackCommand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?IsClickableDistanceDestInstance@CActorInstance@@QAEHAAV1@M@Z
_TEXT	SEGMENT
_i$1$ = -28						; size = 4
tv780 = -24						; size = 4
$T1 = -20						; size = 4
_kPPosSrc$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_rkInstDst$ = 8						; size = 4
_fDistance$ = 12					; size = 4
?IsClickableDistanceDestInstance@CActorInstance@@QAEHAAV1@M@Z PROC ; CActorInstance::IsClickableDistanceDestInstance, COMDAT
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 20	 sub	 esp, 32			; 00000020H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  00014	56		 push	 esi
  00015	57		 push	 edi

; 146  : 	TPixelPosition kPPosSrc;
; 147  : 	GetPixelPosition(&kPPosSrc);

  00016	8d 44 24 18	 lea	 eax, DWORD PTR _kPPosSrc$[esp+40]
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?GetPixelPosition@CActorInstance@@QAEXPAUD3DXVECTOR3@@@Z ; CActorInstance::GetPixelPosition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00020	8b 4d 08	 mov	 ecx, DWORD PTR _rkInstDst$[ebp]
  00023	8b 89 84 03 00
	00		 mov	 ecx, DWORD PTR [ecx+900]
  00029	89 4c 24 14	 mov	 DWORD PTR $T1[esp+40], ecx

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0002d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002f	89 44 24 0c	 mov	 DWORD PTR _i$1$[esp+40], eax
  00033	3b c1		 cmp	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 154  : 	for (i = rkLstkDefPtInst.begin(); i != rkLstkDefPtInst.end(); ++i)

  00035	0f 84 9c 00 00
	00		 je	 $LN85@IsClickabl
  0003b	0f 1f 44 00 00	 npad	 5
$LL25@IsClickabl:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00040	8b 70 18	 mov	 esi, DWORD PTR [eax+24]
  00043	8b 78 1c	 mov	 edi, DWORD PTR [eax+28]
  00046	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 159  : 		for (j = rkVctkDefSphere.begin(); j != rkVctkDefSphere.end(); ++j)

  00048	74 7f		 je	 SHORT $LN2@IsClickabl
  0004a	66 0f 1f 44 00
	00		 npad	 6
$LL47@IsClickabl:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00050	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00054	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  00059	f3 0f 5c 5c 24
	1c		 subss	 xmm3, DWORD PTR _kPPosSrc$[esp+44]
  0005f	f3 0f 5c 4c 24
	18		 subss	 xmm1, DWORD PTR _kPPosSrc$[esp+40]
  00065	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0006a	f3 0f 5c 44 24
	20		 subss	 xmm0, DWORD PTR _kPPosSrc$[esp+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 164  : 			float fAtkDistance = rkSphere.fRadius + fDistance;

  00070	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fDistance$[ebp]
  00075	f3 0f 58 56 18	 addss	 xmm2, DWORD PTR [esi+24]

; 166  : 			if (fAtkDistance > fMovDistance)

  0007a	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0007e	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00082	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00086	f3 0f 58 d9	 addss	 xmm3, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 164  : 			float fAtkDistance = rkSphere.fRadius + fDistance;

  0008a	f3 0f 11 54 24
	10		 movss	 DWORD PTR tv780[esp+40], xmm2
  00090	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00093	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00097	0f 5a c3	 cvtps2pd xmm0, xmm3
  0009a	66 0f 2e c8	 ucomisd xmm1, xmm0
  0009e	77 06		 ja	 SHORT $LN86@IsClickabl
  000a0	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000a4	eb 05		 jmp	 SHORT $LN87@IsClickabl
$LN86@IsClickabl:
  000a6	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN87@IsClickabl:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 166  : 			if (fAtkDistance > fMovDistance)

  000ab	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR tv780[esp+40]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000b1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 166  : 			if (fAtkDistance > fMovDistance)

  000b5	0f 2f c8	 comiss	 xmm1, xmm0
  000b8	77 32		 ja	 SHORT $LN78@IsClickabl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 74   :         ++_Ptr;

  000ba	83 c6 1c	 add	 esi, 28			; 0000001cH

; 156  :         return _Ptr == _Right._Ptr;

  000bd	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 159  : 		for (j = rkVctkDefSphere.begin(); j != rkVctkDefSphere.end(); ++j)

  000bf	75 8f		 jne	 SHORT $LL47@IsClickabl
  000c1	8b 44 24 0c	 mov	 eax, DWORD PTR _i$1$[esp+40]
  000c5	8b 4c 24 14	 mov	 ecx, DWORD PTR $T1[esp+40]
$LN2@IsClickabl:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  000c9	8b 00		 mov	 eax, DWORD PTR [eax]
  000cb	89 44 24 0c	 mov	 DWORD PTR _i$1$[esp+40], eax

; 198  :         return this->_Ptr == _Right._Ptr;

  000cf	3b c1		 cmp	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp

; 154  : 	for (i = rkLstkDefPtInst.begin(); i != rkLstkDefPtInst.end(); ++i)

  000d1	0f 85 69 ff ff
	ff		 jne	 $LL25@IsClickabl
$LN85@IsClickabl:

; 167  : 			{
; 168  : 				return TRUE;
; 169  : 			}
; 170  : 		}
; 171  : 	}
; 172  : 
; 173  : 	return FALSE;

  000d7	33 c0		 xor	 eax, eax

; 174  : }

  000d9	5f		 pop	 edi
  000da	5e		 pop	 esi
  000db	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+32]
  000df	33 cc		 xor	 ecx, esp
  000e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN78@IsClickabl:
  000ec	8b 4c 24 24	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+40]
  000f0	b8 01 00 00 00	 mov	 eax, 1
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	33 cc		 xor	 ecx, esp
  000f9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000fe	8b e5		 mov	 esp, ebp
  00100	5d		 pop	 ebp
  00101	c2 08 00	 ret	 8
?IsClickableDistanceDestInstance@CActorInstance@@QAEHAAV1@M@Z ENDP ; CActorInstance::IsClickableDistanceDestInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?CanCheckAttacking@CActorInstance@@QAEHXZ
_TEXT	SEGMENT
?CanCheckAttacking@CActorInstance@@QAEHXZ PROC		; CActorInstance::CanCheckAttacking, COMDAT
; _this$ = ecx

; 393  : 	if (isAttacking())

  00000	e8 00 00 00 00	 call	 ?isAttacking@CActorInstance@@QAEHXZ ; CActorInstance::isAttacking
  00005	f7 d8		 neg	 eax
  00007	1b c0		 sbb	 eax, eax
  00009	f7 d8		 neg	 eax

; 394  : 	{
; 395  : 		return true;
; 396  : 	}
; 397  : 
; 398  : 	return false;
; 399  : }

  0000b	c3		 ret	 0
?CanCheckAttacking@CActorInstance@@QAEHXZ ENDP		; CActorInstance::CanCheckAttacking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?CanUseSkill@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanUseSkill@CActorInstance@@QAE_NXZ PROC		; CActorInstance::CanUseSkill, COMDAT
; _this$ = ecx

; 50   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 51   : 	if (!CanAct())

  00003	e8 00 00 00 00	 call	 ?CanAct@CActorInstance@@QAE_NXZ ; CActorInstance::CanAct
  00008	84 c0		 test	 al, al
  0000a	74 3e		 je	 SHORT $LN12@CanUseSkil

; 52   : 	{
; 53   : 		return false;
; 54   : 	}
; 55   : 
; 56   : 	DWORD dwCurMotionIndex = __GetCurrentMotionIndex();

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?__GetCurrentMotionIndex@CActorInstance@@IAEGXZ ; CActorInstance::__GetCurrentMotionIndex
  00013	0f b7 c0	 movzx	 eax, ax

; 57   : 
; 58   : 	// Locked during attack
; 59   : 	switch (dwCurMotionIndex)

  00016	83 c0 e6	 add	 eax, -26		; ffffffe6H
  00019	83 f8 05	 cmp	 eax, 5
  0001c	77 0e		 ja	 SHORT $LN2@CanUseSkil
  0001e	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN16@CanUseSkil[eax]
  00025	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN17@CanUseSkil[eax*4]
$LN2@CanUseSkil:

; 60   : 	{
; 61   : 	case CRaceMotionData::NAME_FISHING_THROW:
; 62   : 	case CRaceMotionData::NAME_FISHING_WAIT:
; 63   : 	case CRaceMotionData::NAME_FISHING_STOP:
; 64   : 	case CRaceMotionData::NAME_FISHING_REACT:
; 65   : 	case CRaceMotionData::NAME_FISHING_CATCH:
; 66   : 	case CRaceMotionData::NAME_FISHING_FAIL:
; 67   : 		return TRUE;
; 68   : 		break;
; 69   : 	}
; 70   : 
; 71   : 	// Locked during using skill
; 72   : 	if (IsUsingSkill())

  0002c	8b ce		 mov	 ecx, esi
  0002e	e8 00 00 00 00	 call	 ?IsUsingSkill@CActorInstance@@QAEHXZ ; CActorInstance::IsUsingSkill
  00033	85 c0		 test	 eax, eax
  00035	74 0f		 je	 SHORT $LN11@CanUseSkil

; 73   : 	{
; 74   : 		if (m_pkCurRaceMotionData->IsCancelEnableSkill())

  00037	8b 8e 68 04 00
	00		 mov	 ecx, DWORD PTR [esi+1128]
  0003d	e8 00 00 00 00	 call	 ?IsCancelEnableSkill@CRaceMotionData@@QBEHXZ ; CRaceMotionData::IsCancelEnableSkill
  00042	85 c0		 test	 eax, eax
  00044	74 04		 je	 SHORT $LN12@CanUseSkil
$LN11@CanUseSkil:

; 80   : 	}
; 81   : 
; 82   : 	return true;

  00046	b0 01		 mov	 al, 1
  00048	5e		 pop	 esi

; 83   : }

  00049	c3		 ret	 0
$LN12@CanUseSkil:

; 75   : 		{
; 76   : 			return TRUE;
; 77   : 		}
; 78   : 
; 79   : 		return FALSE;

  0004a	32 c0		 xor	 al, al
  0004c	5e		 pop	 esi

; 83   : }

  0004d	c3		 ret	 0
  0004e	66 90		 npad	 2
$LN17@CanUseSkil:
  00050	00 00 00 00	 DD	 $LN11@CanUseSkil
$LN16@CanUseSkil:
  00054	00		 DB	 0
  00055	00		 DB	 0
  00056	00		 DB	 0
  00057	00		 DB	 0
  00058	00		 DB	 0
  00059	00		 DB	 0
?CanUseSkill@CActorInstance@@QAE_NXZ ENDP		; CActorInstance::CanUseSkill
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?CanAttack@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanAttack@CActorInstance@@QAE_NXZ PROC			; CActorInstance::CanAttack, COMDAT
; _this$ = ecx

; 101  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 102  : 	if (!CanAct())

  00003	e8 00 00 00 00	 call	 ?CanAct@CActorInstance@@QAE_NXZ ; CActorInstance::CanAct
  00008	84 c0		 test	 al, al
  0000a	74 1d		 je	 SHORT $LN6@CanAttack

; 103  : 	{
; 104  : 		return false;
; 105  : 	}
; 106  : 
; 107  : 	if (IsUsingSkill())

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?IsUsingSkill@CActorInstance@@QAEHXZ ; CActorInstance::IsUsingSkill
  00013	85 c0		 test	 eax, eax
  00015	74 0e		 je	 SHORT $LN4@CanAttack

; 108  : 	{
; 109  : 		if (!CanCancelSkill())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?CanCancelSkill@CActorInstance@@QAEHXZ ; CActorInstance::CanCancelSkill
  0001e	85 c0		 test	 eax, eax
  00020	5e		 pop	 esi
  00021	0f 95 c0	 setne	 al

; 116  : }

  00024	c3		 ret	 0
$LN4@CanAttack:

; 112  : 		}
; 113  : 	}
; 114  : 
; 115  : 	return true;

  00025	b0 01		 mov	 al, 1
  00027	5e		 pop	 esi

; 116  : }

  00028	c3		 ret	 0
$LN6@CanAttack:

; 110  : 		{
; 111  : 			return false;

  00029	32 c0		 xor	 al, al
  0002b	5e		 pop	 esi

; 116  : }

  0002c	c3		 ret	 0
?CanAttack@CActorInstance@@QAE_NXZ ENDP			; CActorInstance::CanAttack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?CanMove@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanMove@CActorInstance@@QAE_NXZ PROC			; CActorInstance::CanMove, COMDAT
; _this$ = ecx

; 86   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 87   : 	if (!CanAct())

  00003	e8 00 00 00 00	 call	 ?CanAct@CActorInstance@@QAE_NXZ ; CActorInstance::CanAct
  00008	84 c0		 test	 al, al
  0000a	74 0e		 je	 SHORT $LN5@CanMove

; 88   : 	{
; 89   : 		return false;
; 90   : 	}
; 91   : 
; 92   : 	if (isLock())

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?isLock@CActorInstance@@QAEHXZ ; CActorInstance::isLock
  00013	85 c0		 test	 eax, eax
  00015	5e		 pop	 esi
  00016	0f 94 c0	 sete	 al

; 95   : 	}
; 96   : 
; 97   : 	return true;
; 98   : }

  00019	c3		 ret	 0
$LN5@CanMove:

; 93   : 	{
; 94   : 		return false;

  0001a	32 c0		 xor	 al, al
  0001c	5e		 pop	 esi

; 95   : 	}
; 96   : 
; 97   : 	return true;
; 98   : }

  0001d	c3		 ret	 0
?CanMove@CActorInstance@@QAE_NXZ ENDP			; CActorInstance::CanMove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?CanAct@CActorInstance@@QAE_NXZ
_TEXT	SEGMENT
?CanAct@CActorInstance@@QAE_NXZ PROC			; CActorInstance::CanAct, COMDAT
; _this$ = ecx

; 20   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 21   : 	if (IsDead())

  00003	e8 00 00 00 00	 call	 ?IsDead@CActorInstance@@QAEHXZ ; CActorInstance::IsDead
  00008	85 c0		 test	 eax, eax
  0000a	75 2f		 jne	 SHORT $LN8@CanAct

; 22   : 	{
; 23   : 		return false;
; 24   : 	}
; 25   : 
; 26   : 	if (IsStun())

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 ?IsStun@CActorInstance@@QAEHXZ ; CActorInstance::IsStun
  00013	85 c0		 test	 eax, eax
  00015	75 24		 jne	 SHORT $LN8@CanAct

; 27   : 	{
; 28   : 		return false;
; 29   : 	}
; 30   : 
; 31   : 	if (IsParalysis())

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?IsParalysis@CActorInstance@@QAEHXZ ; CActorInstance::IsParalysis
  0001e	85 c0		 test	 eax, eax
  00020	75 19		 jne	 SHORT $LN8@CanAct

; 32   : 	{
; 33   : 		return false;
; 34   : 	}
; 35   : 
; 36   : 	if (IsFaint())

  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?IsFaint@CActorInstance@@QAEHXZ ; CActorInstance::IsFaint
  00029	85 c0		 test	 eax, eax
  0002b	75 0e		 jne	 SHORT $LN8@CanAct

; 37   : 	{
; 38   : 		return false;
; 39   : 	}
; 40   : 
; 41   : 	if (IsSleep())

  0002d	8b ce		 mov	 ecx, esi
  0002f	e8 00 00 00 00	 call	 ?IsSleep@CActorInstance@@QAEHXZ ; CActorInstance::IsSleep
  00034	85 c0		 test	 eax, eax
  00036	5e		 pop	 esi
  00037	0f 94 c0	 sete	 al

; 44   : 	}
; 45   : 
; 46   : 	return true;
; 47   : }

  0003a	c3		 ret	 0
$LN8@CanAct:

; 42   : 	{
; 43   : 		return false;

  0003b	32 c0		 xor	 al, al
  0003d	5e		 pop	 esi

; 44   : 	}
; 45   : 
; 46   : 	return true;
; 47   : }

  0003e	c3		 ret	 0
?CanAct@CActorInstance@@QAE_NXZ ENDP			; CActorInstance::CanAct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\GameLib\ActorInstanceBattle.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
