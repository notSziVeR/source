; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\Distribute\TextureSet.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??_GCGraphicImageInstance@@UAEPAXI@Z		; CGraphicImageInstance::`scalar deleting destructor'
PUBLIC	??0STerrainTexture@@QAE@XZ			; STerrainTexture::STerrainTexture
PUBLIC	??1STerrainTexture@@QAE@XZ			; STerrainTexture::~STerrainTexture
PUBLIC	??0STerrainTexture@@QAE@ABU0@@Z			; STerrainTexture::STerrainTexture
PUBLIC	??0CTextureSet@@QAE@XZ				; CTextureSet::CTextureSet
PUBLIC	??1CTextureSet@@UAE@XZ				; CTextureSet::~CTextureSet
PUBLIC	?Initialize@CTextureSet@@QAEXXZ			; CTextureSet::Initialize
PUBLIC	?Clear@CTextureSet@@QAEXXZ			; CTextureSet::Clear
PUBLIC	?Create@CTextureSet@@QAEXXZ			; CTextureSet::Create
PUBLIC	?Load@CTextureSet@@QAE_NPBDM@Z			; CTextureSet::Load
PUBLIC	?Save@CTextureSet@@QAE_NPBD@Z			; CTextureSet::Save
PUBLIC	?GetTextureCount@CTextureSet@@QAEKXZ		; CTextureSet::GetTextureCount
PUBLIC	?GetTexture@CTextureSet@@QAEAAUSTerrainTexture@@K@Z ; CTextureSet::GetTexture
PUBLIC	?RemoveTexture@CTextureSet@@QAE_NK@Z		; CTextureSet::RemoveTexture
PUBLIC	?SetTexture@CTextureSet@@QAE_NKPBDMMMM_NGGM@Z	; CTextureSet::SetTexture
PUBLIC	?Reload@CTextureSet@@QAEXM@Z			; CTextureSet::Reload
PUBLIC	?AddTexture@CTextureSet@@QAE_NPBDMMMM_NGGM@Z	; CTextureSet::AddTexture
PUBLIC	?AddEmptyTexture@CTextureSet@@IAEXXZ		; CTextureSet::AddEmptyTexture
PUBLIC	?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z ; std::allocator<STerrainTexture>::deallocate
PUBLIC	??1?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::~vector<STerrainTexture,std::allocator<STerrainTexture> >
PUBLIC	?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Change_array
PUBLIC	?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Xlength
PUBLIC	??_GCTextureSet@@UAEPAXI@Z			; CTextureSet::`scalar deleting destructor'
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
PUBLIC	??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
PUBLIC	??$destroy@USTerrainTexture@@@?$_Default_allocator_traits@V?$allocator@USTerrainTexture@@@std@@@std@@SAXAAV?$allocator@USTerrainTexture@@@1@QAUSTerrainTexture@@@Z ; std::_Default_allocator_traits<std::allocator<STerrainTexture> >::destroy<STerrainTexture>
PUBLIC	??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_copy<STerrainTexture *,STerrainTexture *,std::allocator<STerrainTexture> >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<STerrainTexture> >
PUBLIC	??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Emplace_reallocate<STerrainTexture const &>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<STerrainTexture> >::~_Uninitialized_backout_al<std::allocator<STerrainTexture> >
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_move<STerrainTexture *,std::allocator<STerrainTexture> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CGraphicImageInstance@@6B@			; CGraphicImageInstance::`vftable'
PUBLIC	??_7CTextureSet@@6B@				; CTextureSet::`vftable'
PUBLIC	??_C@_0BP@PGALBFBK@d?3?1ymir?5work?1special?1error?4tga@ ; `string'
PUBLIC	??_C@_0CC@NFEEIIKK@TextureSet?3?3Load?5?3?5cannot?5load?5@ ; `string'
PUBLIC	??_C@_0L@FLIBEPMB@textureset@			; `string'
PUBLIC	??_C@_0DL@HIELGKBC@TextureSet?3?3Load?5?3?5syntax?5error@ ; `string'
PUBLIC	??_C@_0N@MMECMGAI@texturecount@			; `string'
PUBLIC	??_C@_0DN@FCLAEMJC@TextureSet?3?3Load?5?3?5syntax?5error@ ; `string'
PUBLIC	??_C@_0M@NDPMIDHE@texture?$CF03d@		; `string'
PUBLIC	??_C@_0DF@CFOIFDDM@CTextureSet?3?3Load?5?3?5SetTexture?5@ ; `string'
PUBLIC	??_C@_0FF@IFFABLMH@CTextureSet?3?3SetTexture?5?3?5Index@ ; `string'
PUBLIC	??_C@_0DF@JOIEGDLH@CTerrainImpl?3?3GenerateTexture?5?3@ ; `string'
PUBLIC	??_C@_0CG@GCCGCFA@You?5cannot?5add?5more?5than?5255?5te@ ; `string'
PUBLIC	??_C@_09OINHJNMP@Duplicate@			; `string'
PUBLIC	??_C@_0CJ@ELAAMMOC@Texture?5of?5the?5same?5name?5alread@ ; `string'
PUBLIC	??_C@_0DL@BLPPCNGA@CTerrainImpl?3?3GenerateTexture?5?3@ ; `string'
PUBLIC	??_C@_01NOFIACDB@w@				; `string'
PUBLIC	??_C@_0M@MPCHGPBP@TextureSet?6@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BC@GGJBGKJP@TextureCount?5?$CFld?6@	; `string'
PUBLIC	??_C@_0BD@BJELLKNB@Start?5Texture?$CF03d?6@	; `string'
PUBLIC	??_C@_09BMPLDMAP@?5?5?5?5?$CC?$CFs?$CC?6@	; `string'
PUBLIC	??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@		; `string'
PUBLIC	??_C@_07EIKGIFBE@?5?5?5?5?$CFd?6@		; `string'
PUBLIC	??_C@_08PFAGAKKH@?5?5?5?5?$CFhu?6@		; `string'
PUBLIC	??_C@_0BB@GNLMPHOK@End?5Texture?$CF03d?6@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicImageInstance@@6B@			; CGraphicImageInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicImageInstance@@@8		; CGraphicImageInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicImageInstance@@8			; CGraphicImageInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicImageInstance@@8			; CGraphicImageInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicImageInstance@@8		; CGraphicImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CTextureSet@@6B@				; CTextureSet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCTextureSet@@@8				; CTextureSet `RTTI Type Descriptor'
PUBLIC	??_R3CTextureSet@@8				; CTextureSet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CTextureSet@@8				; CTextureSet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CTextureSet@@8			; CTextureSet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_atof:PROC
EXTRN	_atol:PROC
EXTRN	__atoi64:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?LogBox@@YAXPBD0PAUHWND__@@@Z:PROC		; LogBox
EXTRN	?LoadMultipleTextData@@YA_NPBDAAV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@@Z:PROC ; LoadMultipleTextData
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?Destroy@CGraphicImageInstance@@QAEXXZ:PROC	; CGraphicImageInstance::Destroy
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?ReloadImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::ReloadImagePointer
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	?OnRender@CGraphicImageInstance@@MAEXXZ:PROC	; CGraphicImageInstance::OnRender
EXTRN	?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ:PROC ; CGraphicImageInstance::OnSetImagePointer
EXTRN	?OnIsType@CGraphicImageInstance@@MAEHK@Z:PROC	; CGraphicImageInstance::OnIsType
EXTRN	??_ECGraphicImageInstance@@UAEPAXI@Z:PROC	; CGraphicImageInstance::`vector deleting destructor'
EXTRN	??_ECTextureSet@@UAEPAXI@Z:PROC			; CTextureSet::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CTextureSet@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CTextureSet@@8 DD FLAT:??_R0?AVCTextureSet@@@8 ; CTextureSet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CTextureSet@@8
rdata$r	ENDS
;	COMDAT ??_R2CTextureSet@@8
rdata$r	SEGMENT
??_R2CTextureSet@@8 DD FLAT:??_R1A@?0A@EA@CTextureSet@@8 ; CTextureSet::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CTextureSet@@8
rdata$r	SEGMENT
??_R3CTextureSet@@8 DD 00H				; CTextureSet::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CTextureSet@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCTextureSet@@@8
data$rs	SEGMENT
??_R0?AVCTextureSet@@@8 DD FLAT:??_7type_info@@6B@	; CTextureSet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCTextureSet@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CTextureSet@@6B@
rdata$r	SEGMENT
??_R4CTextureSet@@6B@ DD 00H				; CTextureSet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCTextureSet@@@8
	DD	FLAT:??_R3CTextureSet@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicImageInstance@@8 DD FLAT:??_R0?AVCGraphicImageInstance@@@8 ; CGraphicImageInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R2CGraphicImageInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicImageInstance@@8 ; CGraphicImageInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicImageInstance@@8
rdata$r	SEGMENT
??_R3CGraphicImageInstance@@8 DD 00H			; CGraphicImageInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicImageInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicImageInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicImageInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicImageInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicImageInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicImageInstance@@6B@ DD 00H			; CGraphicImageInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicImageInstance@@@8
	DD	FLAT:??_R3CGraphicImageInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GNLMPHOK@End?5Texture?$CF03d?6@
CONST	SEGMENT
??_C@_0BB@GNLMPHOK@End?5Texture?$CF03d?6@ DB 'End Texture%03d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFAGAKKH@?5?5?5?5?$CFhu?6@
CONST	SEGMENT
??_C@_08PFAGAKKH@?5?5?5?5?$CFhu?6@ DB '    %hu', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07EIKGIFBE@?5?5?5?5?$CFd?6@
CONST	SEGMENT
??_C@_07EIKGIFBE@?5?5?5?5?$CFd?6@ DB '    %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@
CONST	SEGMENT
??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@ DB '    %f', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BMPLDMAP@?5?5?5?5?$CC?$CFs?$CC?6@
CONST	SEGMENT
??_C@_09BMPLDMAP@?5?5?5?5?$CC?$CFs?$CC?6@ DB '    "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BJELLKNB@Start?5Texture?$CF03d?6@
CONST	SEGMENT
??_C@_0BD@BJELLKNB@Start?5Texture?$CF03d?6@ DB 'Start Texture%03d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GGJBGKJP@TextureCount?5?$CFld?6@
CONST	SEGMENT
??_C@_0BC@GGJBGKJP@TextureCount?5?$CFld?6@ DB 'TextureCount %ld', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPCHGPBP@TextureSet?6@
CONST	SEGMENT
??_C@_0M@MPCHGPBP@TextureSet?6@ DB 'TextureSet', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w@
CONST	SEGMENT
??_C@_01NOFIACDB@w@ DB 'w', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BLPPCNGA@CTerrainImpl?3?3GenerateTexture?5?3@
CONST	SEGMENT
??_C@_0DL@BLPPCNGA@CTerrainImpl?3?3GenerateTexture?5?3@ DB 'CTerrainImpl:'
	DB	':GenerateTexture : It''s not an image file. %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ELAAMMOC@Texture?5of?5the?5same?5name?5alread@
CONST	SEGMENT
??_C@_0CJ@ELAAMMOC@Texture?5of?5the?5same?5name?5alread@ DB 'Texture of t'
	DB	'he same name already exists.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OINHJNMP@Duplicate@
CONST	SEGMENT
??_C@_09OINHJNMP@Duplicate@ DB 'Duplicate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GCCGCFA@You?5cannot?5add?5more?5than?5255?5te@
CONST	SEGMENT
??_C@_0CG@GCCGCFA@You?5cannot?5add?5more?5than?5255?5te@ DB 'You cannot a'
	DB	'dd more than 255 texture.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JOIEGDLH@CTerrainImpl?3?3GenerateTexture?5?3@
CONST	SEGMENT
??_C@_0DF@JOIEGDLH@CTerrainImpl?3?3GenerateTexture?5?3@ DB 'CTerrainImpl:'
	DB	':GenerateTexture : %s is NOT Image File', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@IFFABLMH@CTextureSet?3?3SetTexture?5?3?5Index@
CONST	SEGMENT
??_C@_0FF@IFFABLMH@CTextureSet?3?3SetTexture?5?3?5Index@ DB 'CTextureSet:'
	DB	':SetTexture : Index Error : Index(%d) is Larger than TextureS'
	DB	'et Size(%d)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CFOIFDDM@CTextureSet?3?3Load?5?3?5SetTexture?5@
CONST	SEGMENT
??_C@_0DF@CFOIFDDM@CTextureSet?3?3Load?5?3?5SetTexture?5@ DB 'CTextureSet'
	DB	'::Load : SetTexture failed : Filename: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDPMIDHE@texture?$CF03d@
CONST	SEGMENT
??_C@_0M@NDPMIDHE@texture?$CF03d@ DB 'texture%03d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@FCLAEMJC@TextureSet?3?3Load?5?3?5syntax?5error@
CONST	SEGMENT
??_C@_0DN@FCLAEMJC@TextureSet?3?3Load?5?3?5syntax?5error@ DB 'TextureSet:'
	DB	':Load : syntax error, TextureCount (filename: %s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MMECMGAI@texturecount@
CONST	SEGMENT
??_C@_0N@MMECMGAI@texturecount@ DB 'texturecount', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@HIELGKBC@TextureSet?3?3Load?5?3?5syntax?5error@
CONST	SEGMENT
??_C@_0DL@HIELGKBC@TextureSet?3?3Load?5?3?5syntax?5error@ DB 'TextureSet:'
	DB	':Load : syntax error, TextureSet (filename: %s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLIBEPMB@textureset@
CONST	SEGMENT
??_C@_0L@FLIBEPMB@textureset@ DB 'textureset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NFEEIIKK@TextureSet?3?3Load?5?3?5cannot?5load?5@
CONST	SEGMENT
??_C@_0CC@NFEEIIKK@TextureSet?3?3Load?5?3?5cannot?5load?5@ DB 'TextureSet'
	DB	'::Load : cannot load %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PGALBFBK@d?3?1ymir?5work?1special?1error?4tga@
CONST	SEGMENT
??_C@_0BP@PGALBFBK@d?3?1ymir?5work?1special?1error?4tga@ DB 'd:/ymir work'
	DB	'/special/error.tga', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CTextureSet@@6B@
CONST	SEGMENT
??_7CTextureSet@@6B@ DD FLAT:??_R4CTextureSet@@6B@	; CTextureSet::`vftable'
	DD	FLAT:??_ECTextureSet@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CGraphicImageInstance@@6B@
CONST	SEGMENT
??_7CGraphicImageInstance@@6B@ DD FLAT:??_R4CGraphicImageInstance@@6B@ ; CGraphicImageInstance::`vftable'
	DD	FLAT:??_ECGraphicImageInstance@@UAEPAXI@Z
	DD	FLAT:?OnRender@CGraphicImageInstance@@MAEXXZ
	DD	FLAT:?OnSetImagePointer@CGraphicImageInstance@@MAEXXZ
	DD	FLAT:?OnIsType@CGraphicImageInstance@@MAEHK@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@_N@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAEAAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z$0
__unwindtable$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z$2
__ehfuncinfo$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddEmptyTexture@CTextureSet@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddEmptyTexture@CTextureSet@@IAEXXZ$0
__ehfuncinfo$?AddEmptyTexture@CTextureSet@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddEmptyTexture@CTextureSet@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Load@CTextureSet@@QAE_NPBDM@Z DD 019930522H
	DD	0dH
	DD	FLAT:__unwindtable$?Load@CTextureSet@@QAE_NPBDM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Load@CTextureSet@@QAE_NPBDM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$37
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$28
	DD	00H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$8
	DD	07H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$9
	DD	08H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$10
	DD	09H
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$11
	DD	0aH
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$12
	DD	0bH
	DD	FLAT:__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$13
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CTextureSet@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CTextureSet@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CTextureSet@@QAE@XZ$0
__ehfuncinfo$??0CTextureSet@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CTextureSet@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0STerrainTexture@@QAE@ABU0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0STerrainTexture@@QAE@ABU0@@Z$0
__ehfuncinfo$??0STerrainTexture@@QAE@ABU0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0STerrainTexture@@QAE@ABU0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0STerrainTexture@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0STerrainTexture@@QAE@XZ$0
__ehfuncinfo$??0STerrainTexture@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0STerrainTexture@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCGraphicImage@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z PROC ; std::_Uninitialized_move<STerrainTexture *,std::allocator<STerrainTexture> >, COMDAT

; 1788 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0002b	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]

; 1789 :     // move [_First, _Last) to raw _Dest, using _Al
; 1790 :     // note: only called internally from elsewhere in the STL
; 1791 :     using _Ptrval     = typename _Alloc::value_type*;
; 1792 :     auto _UFirst      = _Get_unwrapped(_First);

  0002e	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00031	89 7d e8	 mov	 DWORD PTR __Backout$[ebp], edi
  00034	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi
  00037	89 45 f0	 mov	 DWORD PTR __Backout$[ebp+8], eax

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0003a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	3b f3		 cmp	 esi, ebx
  00046	74 1e		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@ABU0@@Z

; 1664 :         ++_Last;

  00050	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00056	81 c6 9c 00 00
	00		 add	 esi, 156		; 0000009cH

; 1664 :         ++_Last;

  0005c	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);
; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005f	3b f3		 cmp	 esi, ebx
  00061	75 e5		 jne	 SHORT $LL4@Uninitiali
  00063	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00066	50		 push	 eax
  00067	57		 push	 edi
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1807 :         _Backout._Emplace_back(_STD move(*_UFirst));
; 1808 :     }
; 1809 : 
; 1810 :     return _Backout._Release();

  00071	8b c7		 mov	 eax, edi

; 1811 : }

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<STerrainTexture> >::~_Uninitialized_backout_al<std::allocator<STerrainTexture> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ENDP ; std::_Uninitialized_move<STerrainTexture *,std::allocator<STerrainTexture> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5234 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0000d	72 02		 jb	 SHORT $LN6@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN6@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]
  00014	56		 push	 esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00015	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00019	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  0001c	72 02		 jb	 SHORT $LN11@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0001e	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN11@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	56		 push	 esi
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  00029	83 c4 10	 add	 esp, 16			; 00000010H

; 5235 :     return _Left.compare(_Right) < 0;

  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	5e		 pop	 esi

; 5236 : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  0000a	e8 00 00 00 00	 call	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0000f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00015	72 27		 jb	 SHORT $LN21@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00019	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 12		 jb	 SHORT $LN31@destroy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00025	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00028	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	77 20		 ja	 SHORT $LN28@destroy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00032	8b c2		 mov	 eax, edx
$LN31@destroy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00034	51		 push	 ecx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN21@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004f	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 691  :     }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN28@destroy:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00052	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@destroy:
  00057	cc		 int	 3
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<STerrainTexture> >::~_Uninitialized_backout_al<std::allocator<STerrainTexture> >, COMDAT
; _this$ = ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1659 :     }

  00010	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<STerrainTexture> >::~_Uninitialized_backout_al<std::allocator<STerrainTexture> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z
_TEXT	SEGMENT
_this$ = -44						; size = 4
__Oldsize$1$ = -40					; size = 4
__Whereoff$1$ = -36					; size = 4
__Constructed_last$ = -36				; size = 4
tv303 = -32						; size = 4
$T2 = -28						; size = 4
__Constructed_first$ = -24				; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z PROC ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Emplace_reallocate<STerrainTexture const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d d4	 mov	 DWORD PTR _this$[ebp], ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00030	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00033	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00038	2b 33		 sub	 esi, DWORD PTR [ebx]

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0003a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003d	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0003f	f7 ee		 imul	 esi
  00041	03 d6		 add	 edx, esi
  00043	c1 fa 07	 sar	 edx, 7
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	89 45 dc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  00050	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00055	f7 e9		 imul	 ecx
  00057	03 d1		 add	 edx, ecx
  00059	c1 fa 07	 sar	 edx, 7
  0005c	8b c2		 mov	 eax, edx
  0005e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00061	03 c2		 add	 eax, edx
  00063	89 45 d8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00066	3d 41 1a a4 01	 cmp	 eax, 27531841		; 01a41a41H
  0006b	0f 84 42 01 00
	00		 je	 $LN40@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00071	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00074	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00077	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00079	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  0007e	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00080	b8 41 1a a4 01	 mov	 eax, 27531841		; 01a41a41H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00085	03 d1		 add	 edx, ecx
  00087	c1 fa 07	 sar	 edx, 7
  0008a	8b ca		 mov	 ecx, edx
  0008c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0008f	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00091	8b d1		 mov	 edx, ecx
  00093	d1 ea		 shr	 edx, 1
  00095	2b c2		 sub	 eax, edx
  00097	3b c8		 cmp	 ecx, eax
  00099	76 1a		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  0009b	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  000a0	be 41 1a a4 01	 mov	 esi, 27531841		; 01a41a41H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a5	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  000a6	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a9	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ae	83 c4 04	 add	 esp, 4
  000b1	8b f8		 mov	 edi, eax
  000b3	eb 49		 jmp	 SHORT $LN36@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  000b5	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000b8	8b f7		 mov	 esi, edi
  000ba	3b c7		 cmp	 eax, edi
  000bc	0f 43 f0	 cmovae	 esi, eax
  000bf	81 fe 41 1a a4
	01		 cmp	 esi, 27531841		; 01a41a41H
  000c5	0f 87 ed 00 00
	00		 ja	 $LN41@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000cb	69 c6 9c 00 00
	00		 imul	 eax, esi, 156
  000d1	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000d4	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000d9	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000db	50		 push	 eax
  000dc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000e1	83 c4 04	 add	 esp, 4
  000e4	8b f8		 mov	 edi, eax
  000e6	eb 16		 jmp	 SHORT $LN36@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000e8	85 c0		 test	 eax, eax
  000ea	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000f2	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000f5	8b f8		 mov	 edi, eax
  000f7	eb 02		 jmp	 SHORT $LN37@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000f9	33 ff		 xor	 edi, edi
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  000fb	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN36@Emplace_re:
  000fe	69 45 dc 9c 00
	00 00		 imul	 eax, DWORD PTR __Whereoff$1$[ebp], 156
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00105	ff 75 0c	 push	 DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 895  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

  00108	89 7d e4	 mov	 DWORD PTR $T2[ebp], edi

; 896  :         pointer _Constructed_first      = _Constructed_last;
; 897  : 
; 898  :         _TRY_BEGIN

  0010b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00112	03 c7		 add	 eax, edi
  00114	89 45 e0	 mov	 DWORD PTR tv303[ebp], eax
  00117	8d 88 9c 00 00
	00		 lea	 ecx, DWORD PTR [eax+156]
  0011d	89 4d dc	 mov	 DWORD PTR __Constructed_last$[ebp], ecx
  00120	89 4d e8	 mov	 DWORD PTR __Constructed_first$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00123	8b c8		 mov	 ecx, eax
  00125	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@ABU0@@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 900  :         _Constructed_first = _Newvec + _Whereoff;

  0012a	8b 45 e0	 mov	 eax, DWORD PTR tv303[ebp]

; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  0012d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00130	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00133	89 45 e8	 mov	 DWORD PTR __Constructed_first$[ebp], eax
  00136	8b 03		 mov	 eax, DWORD PTR [ebx]
  00138	53		 push	 ebx
  00139	57		 push	 edi
  0013a	3b d1		 cmp	 edx, ecx
  0013c	75 09		 jne	 SHORT $LN4@Emplace_re

; 903  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 904  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 905  :             } else {
; 906  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  0013e	51		 push	 ecx
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_copy<STerrainTexture *,STerrainTexture *,std::allocator<STerrainTexture> >

; 907  :             }
; 908  :         } else { // provide basic guarantee

  00145	eb 1c		 jmp	 SHORT $LN38@Emplace_re
$LN4@Emplace_re:

; 909  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

  00147	52		 push	 edx
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_move<STerrainTexture *,std::allocator<STerrainTexture> >
  0014e	83 c4 10	 add	 esp, 16			; 00000010H

; 910  :             _Constructed_first = _Newvec;

  00151	89 7d e8	 mov	 DWORD PTR __Constructed_first$[ebp], edi

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  00154	53		 push	 ebx
  00155	ff 75 dc	 push	 DWORD PTR __Constructed_last$[ebp]
  00158	ff 73 04	 push	 DWORD PTR [ebx+4]
  0015b	ff 75 08	 push	 DWORD PTR __Whereptr$[ebp]
  0015e	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAUSTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@QAU1@0PAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_move<STerrainTexture *,std::allocator<STerrainTexture> >
$LN38@Emplace_re:

; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00163	8b 45 d8	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00166	83 c4 10	 add	 esp, 16			; 00000010H
  00169	40		 inc	 eax
  0016a	8b cb		 mov	 ecx, ebx
  0016c	56		 push	 esi
  0016d	50		 push	 eax
  0016e	57		 push	 edi
  0016f	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  00174	8b 45 e0	 mov	 eax, DWORD PTR tv303[ebp]

; 921  :     }

  00177	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0017a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00181	59		 pop	 ecx
  00182	5f		 pop	 edi
  00183	5e		 pop	 esi
  00184	5b		 pop	 ebx
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c2 08 00	 ret	 8
__catch$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z$0:

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

  0018b	8b 75 d4	 mov	 esi, DWORD PTR _this$[ebp]
  0018e	56		 push	 esi
  0018f	ff 75 dc	 push	 DWORD PTR __Constructed_last$[ebp]
  00192	ff 75 e8	 push	 DWORD PTR __Constructed_first$[ebp]
  00195	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
  0019a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 915  :         _Al.deallocate(_Newvec, _Newcapacity);

  0019d	8b ce		 mov	 ecx, esi
  0019f	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  001a2	ff 75 e4	 push	 DWORD PTR $T2[ebp]
  001a5	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z ; std::allocator<STerrainTexture>::deallocate

; 916  :         _RERAISE;

  001aa	6a 00		 push	 0
  001ac	6a 00		 push	 0
  001ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN40@Emplace_re:

; 888  :             _Xlength();

  001b3	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Xlength
$LN41@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001b8	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN35@Emplace_re:
  001bd	cc		 int	 3
  001be	cc		 int	 3
  001bf	cc		 int	 3
  001c0	cc		 int	 3
  001c1	cc		 int	 3
  001c2	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z ENDP ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Emplace_reallocate<STerrainTexture const &>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<STerrainTexture> >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0002b	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
  0002e	89 7d e8	 mov	 DWORD PTR __Backout$[ebp], edi
  00031	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi
  00034	89 5d f0	 mov	 DWORD PTR __Backout$[ebp+8], ebx

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00037	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	85 f6		 test	 esi, esi
  00043	74 15		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00045	8b cf		 mov	 ecx, edi
  00047	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@XZ ; STerrainTexture::STerrainTexture

; 1664 :         ++_Last;

  0004c	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH
  00052	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00055	83 ee 01	 sub	 esi, 1
  00058	75 eb		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0005a	53		 push	 ebx
  0005b	57		 push	 edi
  0005c	57		 push	 edi
  0005d	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  00065	8b c7		 mov	 eax, edi

; 1907 : }

  00067	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00071	59		 pop	 ecx
  00072	5f		 pop	 edi
  00073	5e		 pop	 esi
  00074	5b		 pop	 ebx
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<STerrainTexture> >::~_Uninitialized_backout_al<std::allocator<STerrainTexture> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<STerrainTexture> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Appended_first$ = -36					; size = 4
_this$ = -32						; size = 4
__Oldsize$1$ = -28					; size = 4
__Appended_last$ = -28					; size = 4
$T2 = -24						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b d9		 mov	 ebx, ecx
  0002d	89 5d e0	 mov	 DWORD PTR _this$[ebp], ebx

; 1575 :         if (_Newsize > max_size()) {

  00030	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  00033	81 ff 41 1a a4
	01		 cmp	 edi, 27531841		; 01a41a41H
  00039	0f 87 2e 01 00
	00		 ja	 $LN33@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0003f	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00042	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00047	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00049	f7 e9		 imul	 ecx
  0004b	03 d1		 add	 edx, ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00050	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00052	c1 fa 07	 sar	 edx, 7
  00055	8b c2		 mov	 eax, edx
  00057	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005a	03 c2		 add	 eax, edx
  0005c	89 45 e4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005f	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00064	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00066	b8 41 1a a4 01	 mov	 eax, 27531841		; 01a41a41H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006b	03 d1		 add	 edx, ecx
  0006d	c1 fa 07	 sar	 edx, 7
  00070	8b ca		 mov	 ecx, edx
  00072	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00075	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00077	8b d1		 mov	 edx, ecx
  00079	d1 ea		 shr	 edx, 1
  0007b	2b c2		 sub	 eax, edx
  0007d	3b c8		 cmp	 ecx, eax
  0007f	76 1a		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  00081	b8 9c ff ff ff	 mov	 eax, -100		; ffffff9cH
  00086	be 41 1a a4 01	 mov	 esi, 27531841		; 01a41a41H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008b	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0008c	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00094	83 c4 04	 add	 esp, 4
  00097	8b f8		 mov	 edi, eax
  00099	eb 4d		 jmp	 SHORT $LN31@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009b	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  0009e	3b f7		 cmp	 esi, edi
  000a0	73 1f		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  000a2	8b f7		 mov	 esi, edi
  000a4	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  000a7	69 c6 9c 00 00
	00		 imul	 eax, esi, 156

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000ad	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000b2	72 1e		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ba	83 c4 04	 add	 esp, 4
  000bd	8b f8		 mov	 edi, eax
  000bf	eb 27		 jmp	 SHORT $LN31@Resize_rea
$LN11@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2039 :         return _Geometric; // geometric growth is sufficient

  000c1	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000c4	81 fe 41 1a a4
	01		 cmp	 esi, 27531841		; 01a41a41H
  000ca	0f 87 a2 00 00
	00		 ja	 $LN34@Resize_rea
  000d0	eb d5		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 10		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000dc	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000df	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  000e2	8b f8		 mov	 edi, eax
  000e4	eb 05		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e6	33 ff		 xor	 edi, edi
$LN31@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000e8	89 7d e8	 mov	 DWORD PTR $T2[ebp], edi
$LN21@Resize_rea:
  000eb	8b 55 e4	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1589 :         pointer _Appended_last        = _Appended_first;
; 1590 : 
; 1591 :         _TRY_BEGIN
; 1592 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1593 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1594 :         } else {
; 1595 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ee	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000f1	69 ca 9c 00 00
	00		 imul	 ecx, edx, 156
  000f7	2b c2		 sub	 eax, edx
  000f9	53		 push	 ebx
  000fa	50		 push	 eax
  000fb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00102	03 cf		 add	 ecx, edi
  00104	51		 push	 ecx
  00105	89 4d dc	 mov	 DWORD PTR __Appended_first$[ebp], ecx
  00108	89 4d e4	 mov	 DWORD PTR __Appended_last$[ebp], ecx
  0010b	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<STerrainTexture> >
  00110	83 c4 0c	 add	 esp, 12			; 0000000cH
  00113	89 45 e4	 mov	 DWORD PTR __Appended_last$[ebp], eax

; 1597 :         }
; 1598 : 
; 1599 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 1601 :         } else {
; 1602 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  00116	53		 push	 ebx
  00117	57		 push	 edi
  00118	ff 73 04	 push	 DWORD PTR [ebx+4]
  0011b	ff 33		 push	 DWORD PTR [ebx]
  0011d	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_copy<STerrainTexture *,STerrainTexture *,std::allocator<STerrainTexture> >
  00122	83 c4 10	 add	 esp, 16			; 00000010H

; 1608 :         _CATCH_END
; 1609 : 
; 1610 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00125	8b cb		 mov	 ecx, ebx
  00127	56		 push	 esi
  00128	ff 75 08	 push	 DWORD PTR __Newsize$[ebp]
  0012b	57		 push	 edi
  0012c	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Change_array

; 1611 :     }

  00131	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00134	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0013b	59		 pop	 ecx
  0013c	5f		 pop	 edi
  0013d	5e		 pop	 esi
  0013e	5b		 pop	 ebx
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 08 00	 ret	 8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1603 :         }
; 1604 :         _CATCH_ALL
; 1605 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

  00145	8b 75 e0	 mov	 esi, DWORD PTR _this$[ebp]
  00148	56		 push	 esi
  00149	ff 75 e4	 push	 DWORD PTR __Appended_last$[ebp]
  0014c	ff 75 dc	 push	 DWORD PTR __Appended_first$[ebp]
  0014f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
  00154	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1606 :         _Al.deallocate(_Newvec, _Newcapacity);

  00157	8b ce		 mov	 ecx, esi
  00159	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  0015c	ff 75 e8	 push	 DWORD PTR $T2[ebp]
  0015f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z ; std::allocator<STerrainTexture>::deallocate

; 1607 :         _RERAISE;

  00164	6a 00		 push	 0
  00166	6a 00		 push	 0
  00168	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN33@Resize_rea:

; 1576 :             _Xlength();

  0016d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Xlength
$LN34@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00172	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN30@Resize_rea:
  00177	cc		 int	 3
  00178	cc		 int	 3
  00179	cc		 int	 3
  0017a	cc		 int	 3
  0017b	cc		 int	 3
  0017c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 34		 jne	 SHORT $LN3@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	57		 push	 edi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 76 08	 push	 DWORD PTR [esi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b fe		 mov	 edi, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 382  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00027	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
  0002a	50		 push	 eax
  0002b	53		 push	 ebx
  0002c	e8 00 00 00 00	 call	 ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00031	6a 34		 push	 52			; 00000034H
  00033	57		 push	 edi
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0003f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00043	74 d3		 je	 SHORT $LL2@Erase_tree
  00045	5f		 pop	 edi
  00046	5b		 pop	 ebx
$LN3@Erase_tree:
  00047	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 34		 push	 52			; 00000034H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1618 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1626 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z PROC ; std::_Uninitialized_copy<STerrainTexture *,STerrainTexture *,std::allocator<STerrainTexture> >, COMDAT

; 1680 :     _InIt _First, _Se _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0002b	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]

; 1681 :     // copy [_First, _Last) to raw _Dest, using _Al
; 1682 :     // note: only called internally from elsewhere in the STL
; 1683 :     using _Ptrval = typename _Alloc::value_type*;
; 1684 : 
; 1685 : #ifdef __cpp_lib_concepts
; 1686 :     auto _UFirst = _RANGES _Unwrap_iter<_Se>(_STD move(_First));
; 1687 :     auto _ULast  = _RANGES _Unwrap_sent<_InIt>(_STD move(_Last));
; 1688 : #else // ^^^ __cpp_lib_concepts / !__cpp_lib_concepts vvv
; 1689 :     // In pre-concepts world, _Uninitialized_copy should only ever be called with an iterator
; 1690 :     // and sentinel of the same type, so `_Get_unwrapped` is fine to call.
; 1691 :     auto _UFirst = _Get_unwrapped(_STD move(_First));

  0002e	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00031	89 7d e8	 mov	 DWORD PTR __Backout$[ebp], edi
  00034	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi
  00037	89 45 f0	 mov	 DWORD PTR __Backout$[ebp+8], eax

; 1692 :     auto _ULast = _Get_unwrapped(_STD move(_Last));
; 1693 : #endif // ^^^ !__cpp_lib_concepts ^^^
; 1694 : 
; 1695 :     constexpr bool _Can_memmove = _Sent_copy_cat<decltype(_UFirst), decltype(_ULast), _Ptrval>::_Bitcopy_constructible
; 1696 :                                && _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>::value;
; 1697 : 
; 1698 :     if constexpr (_Can_memmove) {
; 1699 : #if _HAS_CXX20
; 1700 :         if (!_STD is_constant_evaluated())
; 1701 : #endif // _HAS_CXX20
; 1702 :         {
; 1703 :             if constexpr (is_same_v<decltype(_UFirst), decltype(_ULast)>) {
; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));
; 1705 :                 _Dest += _ULast - _UFirst;
; 1706 :             } else {
; 1707 :                 const auto _Count = static_cast<size_t>(_ULast - _UFirst);
; 1708 :                 _Copy_memmove_n(_To_address(_UFirst), _Count, _Unfancy(_Dest));
; 1709 :                 _Dest += _Count;
; 1710 :             }
; 1711 :             return _Dest;
; 1712 :         }
; 1713 :     }
; 1714 : 
; 1715 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  0003a	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	3b f3		 cmp	 esi, ebx
  00046	74 1e		 je	 SHORT $LN3@Uninitiali
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00048	56		 push	 esi
  00049	8b cf		 mov	 ecx, edi
  0004b	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@ABU0@@Z

; 1664 :         ++_Last;

  00050	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH

; 1692 :     auto _ULast = _Get_unwrapped(_STD move(_Last));
; 1693 : #endif // ^^^ !__cpp_lib_concepts ^^^
; 1694 : 
; 1695 :     constexpr bool _Can_memmove = _Sent_copy_cat<decltype(_UFirst), decltype(_ULast), _Ptrval>::_Bitcopy_constructible
; 1696 :                                && _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>::value;
; 1697 : 
; 1698 :     if constexpr (_Can_memmove) {
; 1699 : #if _HAS_CXX20
; 1700 :         if (!_STD is_constant_evaluated())
; 1701 : #endif // _HAS_CXX20
; 1702 :         {
; 1703 :             if constexpr (is_same_v<decltype(_UFirst), decltype(_ULast)>) {
; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));
; 1705 :                 _Dest += _ULast - _UFirst;
; 1706 :             } else {
; 1707 :                 const auto _Count = static_cast<size_t>(_ULast - _UFirst);
; 1708 :                 _Copy_memmove_n(_To_address(_UFirst), _Count, _Unfancy(_Dest));
; 1709 :                 _Dest += _Count;
; 1710 :             }
; 1711 :             return _Dest;
; 1712 :         }
; 1713 :     }
; 1714 : 
; 1715 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  00056	81 c6 9c 00 00
	00		 add	 esi, 156		; 0000009cH

; 1664 :         ++_Last;

  0005c	89 7d ec	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 1692 :     auto _ULast = _Get_unwrapped(_STD move(_Last));
; 1693 : #endif // ^^^ !__cpp_lib_concepts ^^^
; 1694 : 
; 1695 :     constexpr bool _Can_memmove = _Sent_copy_cat<decltype(_UFirst), decltype(_ULast), _Ptrval>::_Bitcopy_constructible
; 1696 :                                && _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>::value;
; 1697 : 
; 1698 :     if constexpr (_Can_memmove) {
; 1699 : #if _HAS_CXX20
; 1700 :         if (!_STD is_constant_evaluated())
; 1701 : #endif // _HAS_CXX20
; 1702 :         {
; 1703 :             if constexpr (is_same_v<decltype(_UFirst), decltype(_ULast)>) {
; 1704 :                 _Copy_memmove(_To_address(_UFirst), _To_address(_ULast), _Unfancy(_Dest));
; 1705 :                 _Dest += _ULast - _UFirst;
; 1706 :             } else {
; 1707 :                 const auto _Count = static_cast<size_t>(_ULast - _UFirst);
; 1708 :                 _Copy_memmove_n(_To_address(_UFirst), _Count, _Unfancy(_Dest));
; 1709 :                 _Dest += _Count;
; 1710 :             }
; 1711 :             return _Dest;
; 1712 :         }
; 1713 :     }
; 1714 : 
; 1715 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  0005f	3b f3		 cmp	 esi, ebx
  00061	75 e5		 jne	 SHORT $LL4@Uninitiali
  00063	8b 45 14	 mov	 eax, DWORD PTR __Al$[ebp]
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00066	50		 push	 eax
  00067	57		 push	 edi
  00068	57		 push	 edi
  00069	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1717 :         _Backout._Emplace_back(*_UFirst);
; 1718 :     }
; 1719 : 
; 1720 :     return _Backout._Release();

  00071	8b c7		 mov	 eax, edi

; 1721 : }

  00073	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00076	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007d	59		 pop	 ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<STerrainTexture> >::~_Uninitialized_backout_al<std::allocator<STerrainTexture> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z ENDP ; std::_Uninitialized_copy<STerrainTexture *,STerrainTexture *,std::allocator<STerrainTexture> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$destroy@USTerrainTexture@@@?$_Default_allocator_traits@V?$allocator@USTerrainTexture@@@std@@@std@@SAXAAV?$allocator@USTerrainTexture@@@1@QAUSTerrainTexture@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@USTerrainTexture@@@?$_Default_allocator_traits@V?$allocator@USTerrainTexture@@@std@@@std@@SAXAAV?$allocator@USTerrainTexture@@@1@QAUSTerrainTexture@@@Z PROC ; std::_Default_allocator_traits<std::allocator<STerrainTexture> >::destroy<STerrainTexture>, COMDAT

; 685  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 21   : 	}

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Ptr$[ebp]
  00007	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0000a	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0000f	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00012	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00015	72 27		 jb	 SHORT $LN21@destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00019	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00020	72 12		 jb	 SHORT $LN31@destroy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00022	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00025	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00028	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00030	77 20		 ja	 SHORT $LN28@destroy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00032	8b c2		 mov	 eax, edx
$LN31@destroy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00034	51		 push	 ecx
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN21@destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004f	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 691  :     }

  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN28@destroy:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00052	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN39@destroy:
  00057	cc		 int	 3
??$destroy@USTerrainTexture@@@?$_Default_allocator_traits@V?$allocator@USTerrainTexture@@@std@@@std@@SAXAAV?$allocator@USTerrainTexture@@@1@QAUSTerrainTexture@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STerrainTexture> >::destroy<STerrainTexture>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z PROC ; std::_Destroy_range<std::allocator<STerrainTexture> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 58		 je	 SHORT $LN50@Destroy_ra
  0000f	83 c6 14	 add	 esi, 20			; 00000014H
$LL4@Destroy_ra:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 21   : 	}

  00012	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00015	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0001a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0001c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0001f	72 28		 jb	 SHORT $LN49@Destroy_ra
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00021	8b 46 ec	 mov	 eax, DWORD PTR [esi-20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00024	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN36@Destroy_ra

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	83 c0 fc	 add	 eax, -4			; fffffffcH
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 2e		 ja	 SHORT $LN33@Destroy_ra

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b c2		 mov	 eax, edx
$LN36@Destroy_ra:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00046	83 c4 08	 add	 esp, 8
$LN49@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00049	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00050	c7 06 0f 00 00
	00		 mov	 DWORD PTR [esi], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00056	c6 46 ec 00	 mov	 BYTE PTR [esi-20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0005a	81 c6 9c 00 00
	00		 add	 esi, 156		; 0000009cH
  00060	8d 46 ec	 lea	 eax, DWORD PTR [esi-20]
  00063	3b c7		 cmp	 eax, edi
  00065	75 ab		 jne	 SHORT $LL4@Destroy_ra
$LN50@Destroy_ra:
  00067	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00068	5e		 pop	 esi
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN33@Destroy_ra:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN51@Destroy_ra:
  00070	cc		 int	 3
??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<STerrainTexture> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 34		 push	 52			; 00000034H
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCTextureSet@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTextureSet@@UAEPAXI@Z PROC				; CTextureSet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CTextureSet@@UAE@XZ	; CTextureSet::~CTextureSet
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 c4 00 00 00	 push	 196			; 000000c4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCTextureSet@@UAEPAXI@Z ENDP				; CTextureSet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ PROC ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ ENDP ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z PROC ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 53		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000c	57		 push	 edi
  0000d	56		 push	 esi
  0000e	ff 76 04	 push	 DWORD PTR [esi+4]
  00011	50		 push	 eax
  00012	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00017	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001a	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  0001f	8b 3e		 mov	 edi, DWORD PTR [esi]
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	2b cf		 sub	 ecx, edi
  00026	f7 e9		 imul	 ecx
  00028	03 d1		 add	 edx, ecx
  0002a	c1 fa 07	 sar	 edx, 7
  0002d	8b c2		 mov	 eax, edx
  0002f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00032	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00034	69 c8 9c 00 00
	00		 imul	 ecx, eax, 156

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00040	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00042	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00045	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00048	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004a	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0004d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00050	77 2f		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00052	8b fa		 mov	 edi, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00054	51		 push	 ecx
  00055	57		 push	 edi
  00056	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005b	83 c4 08	 add	 esp, 8
  0005e	5f		 pop	 edi
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0005f	69 45 0c 9c 00
	00 00		 imul	 eax, DWORD PTR __Newsize$[ebp], 156
  00066	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00069	89 0e		 mov	 DWORD PTR [esi], ecx
  0006b	03 c1		 add	 eax, ecx
  0006d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00070	69 45 10 9c 00
	00 00		 imul	 eax, DWORD PTR __Newcapacity$[ebp], 156
  00077	03 c1		 add	 eax, ecx
  00079	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0007c	5e		 pop	 esi

; 2096 :     }

  0007d	5d		 pop	 ebp
  0007e	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00081	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00086	cc		 int	 3
?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z ENDP ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -28						; size = 4
__Size$1$ = -24						; size = 4
$T2 = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z PROC ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e4	 mov	 DWORD PTR _this$[ebp], edi

; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00038	2b 37		 sub	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0003a	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0003d	f7 ee		 imul	 esi
  0003f	03 d6		 add	 edx, esi
  00041	c1 fa 07	 sar	 edx, 7
  00044	8b c2		 mov	 eax, edx
  00046	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00049	03 c2		 add	 eax, edx
  0004b	89 45 e8	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0004e	81 fb 41 1a a4
	01		 cmp	 ebx, 27531841		; 01a41a41H
  00054	0f 87 80 00 00
	00		 ja	 $LN25@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0005a	69 c3 9c 00 00
	00		 imul	 eax, ebx, 156

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00065	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006d	83 c4 04	 add	 esp, 4
  00070	8b f0		 mov	 esi, eax
  00072	eb 16		 jmp	 SHORT $LN23@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00074	85 c0		 test	 eax, eax
  00076	74 10		 je	 SHORT $LN16@Reallocate

; 77   :         return ::operator new(_Bytes);

  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00081	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  00084	8b f0		 mov	 esi, eax
  00086	eb 05		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00088	33 f6		 xor	 esi, esi
$LN23@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1675 :         _TRY_BEGIN

  0008a	89 75 ec	 mov	 DWORD PTR $T2[ebp], esi
$LN14@Reallocate:

; 1676 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1677 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 1678 :         } else {
; 1679 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  0008d	57		 push	 edi
  0008e	56		 push	 esi
  0008f	ff 77 04	 push	 DWORD PTR [edi+4]
  00092	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00099	ff 37		 push	 DWORD PTR [edi]
  0009b	e8 00 00 00 00	 call	 ??$_Uninitialized_copy@PAUSTerrainTexture@@PAU1@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@00AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_copy<STerrainTexture *,STerrainTexture *,std::allocator<STerrainTexture> >
  000a0	83 c4 10	 add	 esp, 16			; 00000010H

; 1684 :         _CATCH_END
; 1685 : 
; 1686 :         _Change_array(_Newvec, _Size, _Newcapacity);

  000a3	8b cf		 mov	 ecx, edi
  000a5	53		 push	 ebx
  000a6	ff 75 e8	 push	 DWORD PTR __Size$1$[ebp]
  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 ?_Change_array@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXQAUSTerrainTexture@@II@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Change_array

; 1687 :     }

  000af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b9	59		 pop	 ecx
  000ba	5f		 pop	 edi
  000bb	5e		 pop	 esi
  000bc	5b		 pop	 ebx
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
__catch$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z$0:

; 1680 :         }
; 1681 :         _CATCH_ALL
; 1682 :         _Al.deallocate(_Newvec, _Newcapacity);

  000c3	ff 75 08	 push	 DWORD PTR __Newcapacity$[ebp]
  000c6	8b 4d e4	 mov	 ecx, DWORD PTR _this$[ebp]
  000c9	ff 75 ec	 push	 DWORD PTR $T2[ebp]
  000cc	e8 00 00 00 00	 call	 ?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z ; std::allocator<STerrainTexture>::deallocate

; 1683 :         _RERAISE;

  000d1	6a 00		 push	 0
  000d3	6a 00		 push	 0
  000d5	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN25@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000da	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN22@Reallocate:
  000df	cc		 int	 3
  000e0	cc		 int	 3
  000e1	cc		 int	 3
  000e2	cc		 int	 3
  000e3	cc		 int	 3
  000e4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z ENDP ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Reallocate_exactly
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ PROC ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::~vector<STerrainTexture,std::allocator<STerrainTexture> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 67		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >

; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	03 d1		 add	 edx, ecx
  00027	c1 fa 07	 sar	 edx, 7
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00031	69 c8 9c 00 00
	00		 imul	 ecx, eax, 156

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00037	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003d	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003f	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00042	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00045	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0004a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004d	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004f	8b fa		 mov	 edi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00051	51		 push	 ecx
  00052	57		 push	 edi
  00053	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00058	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0005b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2113 :             _Mylast  = nullptr;

  00061	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00068	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006f	5f		 pop	 edi
$LN4@vector:
  00070	5e		 pop	 esi

; 835  :     }

  00071	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00072	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00077	cc		 int	 3
??1?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ENDP ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::~vector<STerrainTexture,std::allocator<STerrainTexture> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z PROC ; std::allocator<STerrainTexture>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	69 4d 0c 9c 00
	00 00		 imul	 ecx, DWORD PTR __Count$[ebp], 156
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00013	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00015	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00018	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00020	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00023	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00025	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00027	51		 push	 ecx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8

; 831  :     }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003a	cc		 int	 3
?deallocate@?$allocator@USTerrainTexture@@@std@@QAEXQAUSTerrainTexture@@I@Z ENDP ; std::allocator<STerrainTexture>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?AddEmptyTexture@CTextureSet@@IAEXXZ
_TEXT	SEGMENT
_eraser$ = -172						; size = 156
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?AddEmptyTexture@CTextureSet@@IAEXXZ PROC		; CTextureSet::AddEmptyTexture, COMDAT
; _this$ = ecx

; 110  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddEmptyTexture@CTextureSet@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a0 00 00
	00		 sub	 esp, 160		; 000000a0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	8b f1		 mov	 esi, ecx

; 111  : 	TTerrainTexture eraser;

  0002e	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _eraser$[ebp]
  00034	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@XZ ; STerrainTexture::STerrainTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00039	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 112  : 	m_Textures.push_back(eraser);

  0003c	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00046	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00049	74 17		 je	 SHORT $LN7@AddEmptyTe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0004b	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _eraser$[ebp]
  00051	51		 push	 ecx
  00052	8b c8		 mov	 ecx, eax
  00054	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@ABU0@@Z
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  00059	81 46 08 9c 00
	00 00		 add	 DWORD PTR [esi+8], 156	; 0000009cH

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00060	eb 0d		 jmp	 SHORT $LN6@AddEmptyTe
$LN7@AddEmptyTe:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00062	8d 95 54 ff ff
	ff		 lea	 edx, DWORD PTR _eraser$[ebp]
  00068	52		 push	 edx
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABUSTerrainTexture@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEPAUSTerrainTexture@@QAU2@ABU2@@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Emplace_reallocate<STerrainTexture const &>
$LN6@AddEmptyTe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 21   : 	}

  0006f	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR _eraser$[ebp+28]
  00075	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0007a	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _eraser$[ebp+20]
  00080	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00083	72 2b		 jb	 SHORT $LN28@AddEmptyTe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00085	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _eraser$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0008b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0008c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0008e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00094	72 10		 jb	 SHORT $LN38@AddEmptyTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00096	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00099	83 c1 23	 add	 ecx, 35			; 00000023H
  0009c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009e	83 c0 fc	 add	 eax, -4			; fffffffcH
  000a1	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000a4	77 24		 ja	 SHORT $LN48@AddEmptyTe
$LN38@AddEmptyTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a6	51		 push	 ecx
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ad	83 c4 08	 add	 esp, 8
$LN28@AddEmptyTe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 113  : }

  000b0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ba	59		 pop	 ecx
  000bb	5e		 pop	 esi
  000bc	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bf	33 cd		 xor	 ecx, ebp
  000c1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c6	8b e5		 mov	 esp, ebp
  000c8	5d		 pop	 ebp
  000c9	c3		 ret	 0
$LN48@AddEmptyTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ca	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN46@AddEmptyTe:
  000cf	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddEmptyTexture@CTextureSet@@IAEXXZ$0:
  00000	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _eraser$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1STerrainTexture@@QAE@XZ ; STerrainTexture::~STerrainTexture
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?AddEmptyTexture@CTextureSet@@IAEXXZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddEmptyTexture@CTextureSet@@IAEXXZ
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddEmptyTexture@CTextureSet@@IAEXXZ ENDP		; CTextureSet::AddEmptyTexture
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?AddTexture@CTextureSet@@QAE_NPBDMMMM_NGGM@Z
_TEXT	SEGMENT
_this$1$ = -12						; size = 4
$T1 = -8						; size = 4
__My_data$1$ = -4					; size = 4
__Newcapacity$1$ = 8					; size = 4
_c_szFileName$ = 8					; size = 4
_fuScale$ = 12						; size = 4
_fvScale$ = 16						; size = 4
_fuOffset$ = 20						; size = 4
_fvOffset$ = 24						; size = 4
_bSplat$ = 28						; size = 1
_usBegin$ = 32						; size = 2
_usEnd$ = 36						; size = 2
_fTerrainTexCoordBase$ = 40				; size = 4
?AddTexture@CTextureSet@@QAE_NPBDMMMM_NGGM@Z PROC	; CTextureSet::AddTexture, COMDAT
; _this$ = ecx

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	89 5d f4	 mov	 DWORD PTR _this$1$[ebp], ebx

; 201  : 	if (GetTextureCount() >= 256)

  0000c	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00011	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00016	72 1a		 jb	 SHORT $LN5@AddTexture

; 202  : 	{
; 203  : 		LogBox("You cannot add more than 255 texture.");

  00018	6a 00		 push	 0
  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@GCCGCFA@You?5cannot?5add?5more?5than?5255?5te@
  00021	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 204  : 		return false;

  00029	32 c0		 xor	 al, al
  0002b	5b		 pop	 ebx

; 240  : }

  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 24 00	 ret	 36			; 00000024H
$LN5@AddTexture:
  00032	56		 push	 esi
  00033	57		 push	 edi

; 205  : 	}
; 206  : 
; 207  : 	for (unsigned long i = 1; i < GetTextureCount(); ++i)

  00034	8b cb		 mov	 ecx, ebx
  00036	bf 01 00 00 00	 mov	 edi, 1
  0003b	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00040	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00043	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00046	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]
  00049	89 75 fc	 mov	 DWORD PTR __My_data$1$[ebp], esi
  0004c	3b c7		 cmp	 eax, edi
  0004e	76 65		 jbe	 SHORT $LN45@AddTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00050	8b 36		 mov	 esi, DWORD PTR [esi]
  00052	81 c6 9c 00 00
	00		 add	 esi, 156		; 0000009cH
$LL4@AddTexture:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00058	8b cb		 mov	 ecx, ebx
  0005a	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0005d	0f 1f 00	 npad	 3
$LL46@AddTexture:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL46@AddTexture
  00067	2b ca		 sub	 ecx, edx

; 2292 :         const value_type* _Result = _Bx._Buf;

  00069	8b c6		 mov	 eax, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  0006b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN16@AddTexture

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 06		 mov	 eax, DWORD PTR [esi]
$LN16@AddTexture:

; 4817 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00073	51		 push	 ecx
  00074	53		 push	 ebx
  00075	ff 76 10	 push	 DWORD PTR [esi+16]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 209  : 		if (0 == m_Textures[i].stFilename.compare(c_szFileName))

  00081	85 c0		 test	 eax, eax
  00083	74 11		 je	 SHORT $LN41@AddTexture

; 205  : 	}
; 206  : 
; 207  : 	for (unsigned long i = 1; i < GetTextureCount(); ++i)

  00085	47		 inc	 edi
  00086	81 c6 9c 00 00
	00		 add	 esi, 156		; 0000009cH
  0008c	3b 7d f8	 cmp	 edi, DWORD PTR $T1[ebp]
  0008f	72 c7		 jb	 SHORT $LL4@AddTexture

; 209  : 		if (0 == m_Textures[i].stFilename.compare(c_szFileName))

  00091	8b 7d fc	 mov	 edi, DWORD PTR __My_data$1$[ebp]
  00094	eb 21		 jmp	 SHORT $LN3@AddTexture
$LN41@AddTexture:

; 210  : 		{
; 211  : 			LogBox("Texture of the same name already exists.", "Duplicate");

  00096	6a 00		 push	 0
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_09OINHJNMP@Duplicate@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@ELAAMMOC@Texture?5of?5the?5same?5name?5alread@
  000a2	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox
  000a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 212  : 			return false;

  000aa	32 c0		 xor	 al, al
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	5b		 pop	 ebx

; 240  : }

  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 24 00	 ret	 36			; 00000024H
$LN45@AddTexture:
  000b5	8b fe		 mov	 edi, esi
$LN3@AddTexture:

; 213  : 		}
; 214  : 	}
; 215  : 
; 216  : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer(c_szFileName);

  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  000bd	53		 push	 ebx
  000be	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  000c3	8b f0		 mov	 esi, eax

; 217  : 
; 218  : 	if (!pResource->IsType(CGraphicImage::Type()))

  000c5	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  000ca	50		 push	 eax
  000cb	8b ce		 mov	 ecx, esi
  000cd	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType
  000d2	84 c0		 test	 al, al
  000d4	75 26		 jne	 SHORT $LN7@AddTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000d6	83 7e 20 10	 cmp	 DWORD PTR [esi+32], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  000da	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]

; 2293 :         if (_Large_string_engaged()) {

  000dd	72 02		 jb	 SHORT $LN25@AddTexture

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000df	8b 00		 mov	 eax, DWORD PTR [eax]
$LN25@AddTexture:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 220  : 		LogBox("CTerrainImpl::GenerateTexture : It's not an image file. %s", pResource->GetFileName());

  000e1	6a 00		 push	 0
  000e3	50		 push	 eax
  000e4	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@BLPPCNGA@CTerrainImpl?3?3GenerateTexture?5?3@
  000e9	e8 00 00 00 00	 call	 ?LogBox@@YAXPBD0PAUHWND__@@@Z ; LogBox
  000ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 221  : 		return false;

  000f1	32 c0		 xor	 al, al
  000f3	5f		 pop	 edi
  000f4	5e		 pop	 esi
  000f5	5b		 pop	 ebx

; 240  : }

  000f6	8b e5		 mov	 esp, ebp
  000f8	5d		 pop	 ebp
  000f9	c2 24 00	 ret	 36			; 00000024H
$LN7@AddTexture:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000fc	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000ff	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00104	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00106	f7 e9		 imul	 ecx
  00108	03 d1		 add	 edx, ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0010a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0010d	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0010f	c1 fa 07	 sar	 edx, 7
  00112	8b c2		 mov	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 224  : 	m_Textures.reserve(m_Textures.size() + 1);

  00114	42		 inc	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00115	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 224  : 	m_Textures.reserve(m_Textures.size() + 1);

  00118	03 c2		 add	 eax, edx
  0011a	89 45 08	 mov	 DWORD PTR __Newcapacity$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0011d	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00122	f7 e9		 imul	 ecx
  00124	03 d1		 add	 edx, ecx

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00126	8b 4d 08	 mov	 ecx, DWORD PTR __Newcapacity$1$[ebp]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00129	c1 fa 07	 sar	 edx, 7
  0012c	8b c2		 mov	 eax, edx
  0012e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00131	03 c2		 add	 eax, edx

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00133	3b c8		 cmp	 ecx, eax
  00135	76 14		 jbe	 SHORT $LN32@AddTexture

; 1744 :             if (_Newcapacity > max_size()) {

  00137	81 f9 41 1a a4
	01		 cmp	 ecx, 27531841		; 01a41a41H
  0013d	0f 87 80 00 00
	00		 ja	 $LN51@AddTexture

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  00143	51		 push	 ecx
  00144	8b cf		 mov	 ecx, edi
  00146	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXI@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Reallocate_exactly
$LN32@AddTexture:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 227  : 	AddEmptyTexture();

  0014b	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0014e	e8 00 00 00 00	 call	 ?AddEmptyTexture@CTextureSet@@IAEXXZ ; CTextureSet::AddEmptyTexture

; 228  : 	SetTexture(m_Textures.size() - 1,

  00153	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _fTerrainTexCoordBase$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00158	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 228  : 	SetTexture(m_Textures.size() - 1,

  0015d	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0015e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00161	2b 0f		 sub	 ecx, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 228  : 	SetTexture(m_Textures.size() - 1,

  00163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00168	ff 75 24	 push	 DWORD PTR _usEnd$[ebp]
  0016b	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fvOffset$[ebp]
  00170	ff 75 20	 push	 DWORD PTR _usBegin$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00173	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 228  : 	SetTexture(m_Textures.size() - 1,

  00175	ff 75 1c	 push	 DWORD PTR _bSplat$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00178	03 d1		 add	 edx, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 228  : 	SetTexture(m_Textures.size() - 1,

  0017a	8b 4d f4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0017d	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00180	c1 fa 07	 sar	 edx, 7
  00183	8b c2		 mov	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 228  : 	SetTexture(m_Textures.size() - 1,

  00185	4a		 dec	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00186	c1 e8 1f	 shr	 eax, 31			; 0000001fH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 228  : 	SetTexture(m_Textures.size() - 1,

  00189	03 c2		 add	 eax, edx
  0018b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00191	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fuOffset$[ebp]
  00196	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0019c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fvScale$[ebp]
  001a1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001a7	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fuScale$[ebp]
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	53		 push	 ebx
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ?SetTexture@CTextureSet@@QAE_NKPBDMMMM_NGGM@Z ; CTextureSet::SetTexture
  001b8	5f		 pop	 edi
  001b9	5e		 pop	 esi

; 229  : 			   c_szFileName,
; 230  : 			   fuScale,
; 231  : 			   fvScale,
; 232  : 			   fuOffset,
; 233  : 			   fvOffset,
; 234  : 			   bSplat,
; 235  : 			   usBegin,
; 236  : 			   usEnd,
; 237  : 			   fTerrainTexCoordBase);
; 238  : 
; 239  : 	return true;

  001ba	b0 01		 mov	 al, 1
  001bc	5b		 pop	 ebx

; 240  : }

  001bd	8b e5		 mov	 esp, ebp
  001bf	5d		 pop	 ebp
  001c0	c2 24 00	 ret	 36			; 00000024H
$LN51@AddTexture:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1745 :                 _Xlength();

  001c3	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@CAXXZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Xlength
$LN49@AddTexture:
  001c8	cc		 int	 3
?AddTexture@CTextureSet@@QAE_NPBDMMMM_NGGM@Z ENDP	; CTextureSet::AddTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?Reload@CTextureSet@@QAEXM@Z
_TEXT	SEGMENT
tv245 = -12						; size = 4
_dwIndex$1$ = -8					; size = 4
tv246 = -4						; size = 4
_fTerrainTexCoordBase$ = 8				; size = 4
?Reload@CTextureSet@@QAEXM@Z PROC			; CTextureSet::Reload, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 178  : 	for (DWORD dwIndex = 1; dwIndex < GetTextureCount(); ++dwIndex)

  00009	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _dwIndex$1$[ebp], 1
  00010	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00015	83 f8 01	 cmp	 eax, 1
  00018	0f 86 c1 00 00
	00		 jbe	 $LN3@Reload
  0001e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTerrainTexCoordBase$[ebp]
  00023	b8 9c 00 00 00	 mov	 eax, 156		; 0000009cH
  00028	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0002f	f3 0f 11 45 f4	 movss	 DWORD PTR tv245[ebp], xmm0
  00034	89 45 fc	 mov	 DWORD PTR tv246[ebp], eax
  00037	56		 push	 esi
$LL4@Reload:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00038	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0003b	03 f0		 add	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  0003d	8b c6		 mov	 eax, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  0003f	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00043	72 02		 jb	 SHORT $LN11@Reload

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00045	8b 06		 mov	 eax, DWORD PTR [esi]
$LN11@Reload:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 182  : 		tex.ImageInstance.ReloadImagePointer((CGraphicImage *) CResourceManager::Instance().GetResourcePointer(tex.stFilename.c_str()));

  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00053	50		 push	 eax
  00054	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00057	e8 00 00 00 00	 call	 ?ReloadImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::ReloadImagePointer

; 183  : 		tex.pd3dTexture = tex.ImageInstance.GetTexturePointer()->GetD3DTexture();

  0005c	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  0005f	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture

; 184  : 
; 185  : 		D3DXMatrixScaling(&tex.m_matTransform, fTerrainTexCoordBase * tex.UScale, -fTerrainTexCoordBase * tex.VScale, 0.0f);

  0006b	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR tv245[ebp]
  00070	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00073	f3 0f 59 46 48	 mulss	 xmm0, DWORD PTR [esi+72]
  00078	89 46 18	 mov	 DWORD PTR [esi+24], eax
  0007b	8d 46 5c	 lea	 eax, DWORD PTR [esi+92]
  0007e	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00086	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTerrainTexCoordBase$[ebp]
  00091	f3 0f 59 46 44	 mulss	 xmm0, DWORD PTR [esi+68]
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	50		 push	 eax
  0009c	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16

; 186  : 		tex.m_matTransform._41 = tex.UOffset;
; 187  : 		tex.m_matTransform._42 = -tex.VOffset;

  000a1	f3 0f 10 46 50	 movss	 xmm0, DWORD PTR [esi+80]
  000a6	8b cf		 mov	 ecx, edi
  000a8	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000ab	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000b2	81 45 fc 9c 00
	00 00		 add	 DWORD PTR tv246[ebp], 156 ; 0000009cH
  000b9	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
  000bf	f3 0f 11 86 90
	00 00 00	 movss	 DWORD PTR [esi+144], xmm0
  000c7	8b 75 f8	 mov	 esi, DWORD PTR _dwIndex$1$[ebp]
  000ca	46		 inc	 esi
  000cb	89 75 f8	 mov	 DWORD PTR _dwIndex$1$[ebp], esi
  000ce	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  000d3	3b f0		 cmp	 esi, eax
  000d5	8b 45 fc	 mov	 eax, DWORD PTR tv246[ebp]
  000d8	0f 82 5a ff ff
	ff		 jb	 $LL4@Reload
  000de	5e		 pop	 esi
$LN3@Reload:
  000df	5f		 pop	 edi

; 188  : 	}
; 189  : }

  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?Reload@CTextureSet@@QAEXM@Z ENDP			; CTextureSet::Reload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?SetTexture@CTextureSet@@QAE_NKPBDMMMM_NGGM@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pResource$1$ = 8					; size = 4
_ulIndex$ = 8						; size = 4
_c_szFileName$ = 12					; size = 4
_fuScale$ = 16						; size = 4
_fvScale$ = 20						; size = 4
_fuOffset$ = 24						; size = 4
_fvOffset$ = 28						; size = 4
_bSplat$ = 32						; size = 1
_usBegin$ = 36						; size = 2
_usEnd$ = 40						; size = 2
_fTerrainTexCoordBase$ = 44				; size = 4
?SetTexture@CTextureSet@@QAE_NKPBDMMMM_NGGM@Z PROC	; CTextureSet::SetTexture, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	56		 push	 esi
  00007	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000a	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000d	2b 70 04	 sub	 esi, DWORD PTR [eax+4]
  00010	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00015	f7 ee		 imul	 esi
  00017	03 d6		 add	 edx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 142  : 	if (ulIndex >= m_Textures.size())

  00019	8b 75 08	 mov	 esi, DWORD PTR _ulIndex$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001c	c1 fa 07	 sar	 edx, 7
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 142  : 	if (ulIndex >= m_Textures.size())

  00026	3b f0		 cmp	 esi, eax
  00028	72 18		 jb	 SHORT $LN2@SetTexture

; 143  : 	{
; 144  : 		TraceError("CTextureSet::SetTexture : Index Error : Index(%d) is Larger than TextureSet Size(%d)", ulIndex, m_Textures.size());

  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@IFFABLMH@CTextureSet?3?3SetTexture?5?3?5Index@
  00031	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 145  : 		return false;

  00039	32 c0		 xor	 al, al
  0003b	5e		 pop	 esi

; 174  : }

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 28 00	 ret	 40			; 00000028H
$LN2@SetTexture:

; 146  : 	}
; 147  : 
; 148  : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer(c_szFileName);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00048	57		 push	 edi
  00049	ff 75 0c	 push	 DWORD PTR _c_szFileName$[ebp]
  0004c	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00051	8b f8		 mov	 edi, eax
  00053	89 7d 08	 mov	 DWORD PTR _pResource$1$[ebp], edi

; 149  : 
; 150  : 	if (!pResource->IsType(CGraphicImage::Type()))

  00056	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  0005b	50		 push	 eax
  0005c	8b cf		 mov	 ecx, edi
  0005e	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType
  00063	84 c0		 test	 al, al
  00065	75 23		 jne	 SHORT $LN3@SetTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00067	83 7f 20 10	 cmp	 DWORD PTR [edi+32], 16	; 00000010H

; 4259 :         return _Mypair._Myval2._Myptr();

  0006b	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]

; 2293 :         if (_Large_string_engaged()) {

  0006e	72 02		 jb	 SHORT $LN14@SetTexture

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00070	8b 00		 mov	 eax, DWORD PTR [eax]
$LN14@SetTexture:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 152  : 		TraceError("CTerrainImpl::GenerateTexture : %s is NOT Image File", pResource->GetFileName());

  00072	50		 push	 eax
  00073	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@JOIEGDLH@CTerrainImpl?3?3GenerateTexture?5?3@
  00078	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0007d	83 c4 08	 add	 esp, 8

; 153  : 		return false;

  00080	32 c0		 xor	 al, al
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi

; 174  : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c2 28 00	 ret	 40			; 00000028H
$LN3@SetTexture:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0008a	8b 55 0c	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
  0008d	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0008f	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00092	69 fe 9c 00 00
	00		 imul	 edi, esi, 156
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00098	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0009b	03 78 04	 add	 edi, DWORD PTR [eax+4]
  0009e	66 90		 npad	 2
$LL26@SetTexture:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL26@SetTexture
  000a7	2b ce		 sub	 ecx, esi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000a9	51		 push	 ecx
  000aa	52		 push	 edx
  000ab	8b cf		 mov	 ecx, edi
  000ad	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 159  : 	tex.UScale = fuScale;

  000b2	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fuScale$[ebp]

; 160  : 	tex.VScale = fvScale;
; 161  : 	tex.UOffset = fuOffset;
; 162  : 	tex.VOffset = fvOffset;
; 163  : 	tex.bSplat = bSplat;
; 164  : 	tex.Begin = usBegin;
; 165  : 	tex.End = usEnd;
; 166  : 	tex.ImageInstance.SetImagePointer(static_cast<CGraphicImage *>(pResource));

  000b7	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  000ba	8a 45 20	 mov	 al, BYTE PTR _bSplat$[ebp]
  000bd	ff 75 08	 push	 DWORD PTR _pResource$1$[ebp]
  000c0	f3 0f 11 47 44	 movss	 DWORD PTR [edi+68], xmm0
  000c5	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fvScale$[ebp]
  000ca	f3 0f 11 47 48	 movss	 DWORD PTR [edi+72], xmm0
  000cf	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fuOffset$[ebp]
  000d4	88 47 54	 mov	 BYTE PTR [edi+84], al
  000d7	66 8b 45 24	 mov	 ax, WORD PTR _usBegin$[ebp]
  000db	f3 0f 11 47 4c	 movss	 DWORD PTR [edi+76], xmm0
  000e0	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fvOffset$[ebp]
  000e5	66 89 47 56	 mov	 WORD PTR [edi+86], ax
  000e9	66 8b 45 28	 mov	 ax, WORD PTR _usEnd$[ebp]
  000ed	f3 0f 11 47 50	 movss	 DWORD PTR [edi+80], xmm0
  000f2	66 89 47 58	 mov	 WORD PTR [edi+88], ax
  000f6	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 167  : 	tex.pd3dTexture = tex.ImageInstance.GetTexturePointer()->GetD3DTexture();

  000fb	8d 4f 1c	 lea	 ecx, DWORD PTR [edi+28]
  000fe	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00103	8b c8		 mov	 ecx, eax
  00105	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture

; 168  : 
; 169  : 
; 170  : 	D3DXMatrixScaling(&tex.m_matTransform, fTerrainTexCoordBase * tex.UScale, -fTerrainTexCoordBase * tex.VScale, 0.0f);

  0010a	f3 0f 10 4d 2c	 movss	 xmm1, DWORD PTR _fTerrainTexCoordBase$[ebp]
  0010f	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00112	0f 28 c1	 movaps	 xmm0, xmm1
  00115	89 47 18	 mov	 DWORD PTR [edi+24], eax
  00118	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0011f	8d 47 5c	 lea	 eax, DWORD PTR [edi+92]
  00122	f3 0f 59 47 48	 mulss	 xmm0, DWORD PTR [edi+72]
  00127	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  0012f	f3 0f 59 4f 44	 mulss	 xmm1, DWORD PTR [edi+68]
  00134	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013a	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0013f	50		 push	 eax
  00140	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16

; 171  : 	tex.m_matTransform._41 = tex.UOffset;
; 172  : 	tex.m_matTransform._42 = -tex.VOffset;

  00145	f3 0f 10 47 50	 movss	 xmm0, DWORD PTR [edi+80]
  0014a	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  0014d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00154	89 87 8c 00 00
	00		 mov	 DWORD PTR [edi+140], eax

; 173  : 	return true;

  0015a	b0 01		 mov	 al, 1
  0015c	f3 0f 11 87 90
	00 00 00	 movss	 DWORD PTR [edi+144], xmm0
  00164	5f		 pop	 edi
  00165	5e		 pop	 esi

; 174  : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 28 00	 ret	 40			; 00000028H
?SetTexture@CTextureSet@@QAE_NKPBDMMMM_NGGM@Z ENDP	; CTextureSet::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Ref.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?RemoveTexture@CTextureSet@@QAE_NK@Z
_TEXT	SEGMENT
tv1512 = -8						; size = 4
__Last$1$ = -4						; size = 4
tv1506 = 8						; size = 4
_ulIndex$ = 8						; size = 4
?RemoveTexture@CTextureSet@@QAE_NK@Z PROC		; CTextureSet::RemoveTexture, COMDAT
; _this$ = ecx

; 243  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 244  : 	if (GetTextureCount() <= ulIndex)

  00009	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _ulIndex$[ebp]
  00011	3b c1		 cmp	 eax, ecx
  00013	77 09		 ja	 SHORT $LN2@RemoveText

; 245  : 	{
; 246  : 		return false;

  00015	32 c0		 xor	 al, al
  00017	5b		 pop	 ebx

; 252  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
$LN2@RemoveText:
  0001e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 119  :         _Ptr += _Off;

  0001f	69 f9 9c 00 00
	00		 imul	 edi, ecx, 156

; 1859 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00025	83 c3 04	 add	 ebx, 4
  00028	89 5d f8	 mov	 DWORD PTR tv1512[ebp], ebx

; 1792 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  0002b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 119  :         _Ptr += _Off;

  0002e	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH

; 1792 :         _Move_unchecked(_Whereptr + 1, _Mylast, _Whereptr);

  00034	89 4d fc	 mov	 DWORD PTR __Last$1$[ebp], ecx
  00037	03 3b		 add	 edi, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4211 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  00039	3b f9		 cmp	 edi, ecx
  0003b	0f 84 08 01 00
	00		 je	 $LN20@RemoveText
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1859 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00041	56		 push	 esi
  00042	8d 77 84	 lea	 esi, DWORD PTR [edi-124]
$LL21@RemoveText:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00045	8d 46 e0	 lea	 eax, DWORD PTR [esi-32]
  00048	3b c7		 cmp	 eax, edi
  0004a	74 1c		 je	 SHORT $LN25@RemoveText

; 2301 :         return _BUF_SIZE <= _Myres;

  0004c	83 be 90 00 00
	00 10		 cmp	 DWORD PTR [esi+144], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00053	8b c7		 mov	 eax, edi

; 2293 :         if (_Large_string_engaged()) {

  00055	72 02		 jb	 SHORT $LN29@RemoveText

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00057	8b 07		 mov	 eax, DWORD PTR [edi]
$LN29@RemoveText:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00059	ff b6 8c 00 00
	00		 push	 DWORD PTR [esi+140]
  0005f	8d 4e e0	 lea	 ecx, DWORD PTR [esi-32]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN25@RemoveText:
  00068	8b 86 94 00 00
	00		 mov	 eax, DWORD PTR [esi+148]
  0006e	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  00071	8d 86 9c 00 00
	00		 lea	 eax, DWORD PTR [esi+156]
  00077	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0007a	89 45 08	 mov	 DWORD PTR tv1506[ebp], eax
  0007d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00080	8b 8e b0 00 00
	00		 mov	 ecx, DWORD PTR [esi+176]
  00086	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
  0008c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0008f	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Ref.h

; 69   : 		m_pObject = pObject;

  00092	8b 8e b4 00 00
	00		 mov	 ecx, DWORD PTR [esi+180]
  00098	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  0009b	89 4e 18	 mov	 DWORD PTR [esi+24], ecx

; 70   : 
; 71   : 		if (m_pObject)

  0009e	85 c9		 test	 ecx, ecx
  000a0	74 05		 je	 SHORT $LN38@RemoveText

; 72   : 		{
; 73   : 			m_pObject->AddReference();

  000a2	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN38@RemoveText:

; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  000a7	85 db		 test	 ebx, ebx
  000a9	74 07		 je	 SHORT $LN39@RemoveText

; 77   : 		{
; 78   : 			pOldObject->Release();

  000ab	8b cb		 mov	 ecx, ebx
  000ad	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN39@RemoveText:
  000b2	8b 86 b8 00 00
	00		 mov	 eax, DWORD PTR [esi+184]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4211 :     for (; _First != _Last; ++_Dest, (void) ++_First) {

  000b8	81 c7 9c 00 00
	00		 add	 edi, 156		; 0000009cH
  000be	8b 8e bc 00 00
	00		 mov	 ecx, DWORD PTR [esi+188]
  000c4	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000c7	89 4e 20	 mov	 DWORD PTR [esi+32], ecx
  000ca	8b 86 c0 00 00
	00		 mov	 eax, DWORD PTR [esi+192]
  000d0	89 46 24	 mov	 DWORD PTR [esi+36], eax
  000d3	8b 86 c4 00 00
	00		 mov	 eax, DWORD PTR [esi+196]
  000d9	89 46 28	 mov	 DWORD PTR [esi+40], eax
  000dc	8b 86 c8 00 00
	00		 mov	 eax, DWORD PTR [esi+200]
  000e2	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  000e5	8b 86 cc 00 00
	00		 mov	 eax, DWORD PTR [esi+204]
  000eb	89 46 30	 mov	 DWORD PTR [esi+48], eax
  000ee	8a 86 d0 00 00
	00		 mov	 al, BYTE PTR [esi+208]
  000f4	88 46 34	 mov	 BYTE PTR [esi+52], al
  000f7	0f b7 86 d2 00
	00 00		 movzx	 eax, WORD PTR [esi+210]
  000fe	66 89 46 36	 mov	 WORD PTR [esi+54], ax
  00102	0f b7 86 d4 00
	00 00		 movzx	 eax, WORD PTR [esi+212]
  00109	66 89 46 38	 mov	 WORD PTR [esi+56], ax
  0010d	0f 10 86 d8 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+216]
  00114	0f 11 46 3c	 movups	 XMMWORD PTR [esi+60], xmm0
  00118	0f 10 86 e8 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+232]
  0011f	0f 11 46 4c	 movups	 XMMWORD PTR [esi+76], xmm0
  00123	0f 10 86 f8 00
	00 00		 movups	 xmm0, XMMWORD PTR [esi+248]
  0012a	0f 11 46 5c	 movups	 XMMWORD PTR [esi+92], xmm0
  0012e	0f 10 86 08 01
	00 00		 movups	 xmm0, XMMWORD PTR [esi+264]
  00135	0f 11 46 6c	 movups	 XMMWORD PTR [esi+108], xmm0
  00139	8b 75 08	 mov	 esi, DWORD PTR tv1506[ebp]
  0013c	3b 7d fc	 cmp	 edi, DWORD PTR __Last$1$[ebp]
  0013f	0f 85 00 ff ff
	ff		 jne	 $LL21@RemoveText
  00145	8b 5d f8	 mov	 ebx, DWORD PTR tv1512[ebp]
  00148	5e		 pop	 esi
$LN20@RemoveText:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1793 :         _Alty_traits::destroy(_Getal(), _Unfancy(_Mylast - 1));

  00149	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0014c	2d 9c 00 00 00	 sub	 eax, 156		; 0000009cH
  00151	50		 push	 eax
  00152	53		 push	 ebx
  00153	e8 00 00 00 00	 call	 ??$destroy@USTerrainTexture@@@?$_Default_allocator_traits@V?$allocator@USTerrainTexture@@@std@@@std@@SAXAAV?$allocator@USTerrainTexture@@@1@QAUSTerrainTexture@@@Z ; std::_Default_allocator_traits<std::allocator<STerrainTexture> >::destroy<STerrainTexture>
  00158	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 251  : 	return true;

  0015b	b0 01		 mov	 al, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1795 :         --_Mylast;

  0015d	81 43 04 64 ff
	ff ff		 add	 DWORD PTR [ebx+4], -156	; ffffff64H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 251  : 	return true;

  00164	5f		 pop	 edi
  00165	5b		 pop	 ebx

; 252  : }

  00166	8b e5		 mov	 esp, ebp
  00168	5d		 pop	 ebp
  00169	c2 04 00	 ret	 4
?RemoveTexture@CTextureSet@@QAE_NK@Z ENDP		; CTextureSet::RemoveTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?GetTexture@CTextureSet@@QAEAAUSTerrainTexture@@K@Z
_TEXT	SEGMENT
_ulIndex$ = 8						; size = 4
?GetTexture@CTextureSet@@QAEAAUSTerrainTexture@@K@Z PROC ; CTextureSet::GetTexture, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 122  : 	if (GetTextureCount() <= ulIndex)

  00006	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  0000b	8b 4d 08	 mov	 ecx, DWORD PTR _ulIndex$[ebp]
  0000e	3b c1		 cmp	 eax, ecx
  00010	77 08		 ja	 SHORT $LN2@GetTexture

; 123  : 	{
; 124  : 		return m_ErrorTexture;

  00012	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00015	5e		 pop	 esi

; 128  : }

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
$LN2@GetTexture:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0001a	69 c1 9c 00 00
	00		 imul	 eax, ecx, 156
  00020	03 46 04	 add	 eax, DWORD PTR [esi+4]
  00023	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 128  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?GetTexture@CTextureSet@@QAEAAUSTerrainTexture@@K@Z ENDP ; CTextureSet::GetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?GetTextureCount@CTextureSet@@QAEKXZ
_TEXT	SEGMENT
?GetTextureCount@CTextureSet@@QAEKXZ PROC		; CTextureSet::GetTextureCount, COMDAT
; _this$ = ecx

; 116  : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00009	2b 71 04	 sub	 esi, DWORD PTR [ecx+4]
  0000c	f7 ee		 imul	 esi
  0000e	03 d6		 add	 edx, esi
  00010	c1 fa 07	 sar	 edx, 7
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 117  : 	return m_Textures.size();

  0001a	5e		 pop	 esi

; 118  : }

  0001b	c3		 ret	 0
?GetTextureCount@CTextureSet@@QAEKXZ ENDP		; CTextureSet::GetTextureCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?Save@CTextureSet@@QAE_NPBD@Z
_TEXT	SEGMENT
tv278 = -4						; size = 4
_i$1$ = 8						; size = 4
_c_pszFileName$ = 8					; size = 4
?Save@CTextureSet@@QAE_NPBD@Z PROC			; CTextureSet::Save, COMDAT
; _this$ = ecx

; 255  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 256  : 	FILE * pFile = fopen(c_pszFileName, "w");

  00006	68 00 00 00 00	 push	 OFFSET ??_C@_01NOFIACDB@w@
  0000b	ff 75 08	 push	 DWORD PTR _c_pszFileName$[ebp]
  0000e	8b d9		 mov	 ebx, ecx
  00010	e8 00 00 00 00	 call	 _fopen
  00015	8b f8		 mov	 edi, eax
  00017	83 c4 08	 add	 esp, 8

; 257  : 
; 258  : 	if (!pFile)

  0001a	85 ff		 test	 edi, edi
  0001c	75 0a		 jne	 SHORT $LN5@Save

; 259  : 	{
; 260  : 		return false;

  0001e	5f		 pop	 edi
  0001f	32 c0		 xor	 al, al

; 288  : }

  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN5@Save:

; 261  : 	}
; 262  : 
; 263  : 	fprintf(pFile, "TextureSet\n");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MPCHGPBP@TextureSet?6@
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 _fprintf

; 264  : 	fprintf(pFile, "\n");

  00033	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00038	57		 push	 edi
  00039	e8 00 00 00 00	 call	 _fprintf
  0003e	83 c4 10	 add	 esp, 16			; 00000010H

; 265  : 
; 266  : 	// @fixme004
; 267  : 	fprintf(pFile, "TextureCount %ld\n", GetTextureCount() ? (GetTextureCount() - 1) : 0);

  00041	8b cb		 mov	 ecx, ebx
  00043	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00048	85 c0		 test	 eax, eax
  0004a	74 0a		 je	 SHORT $LN7@Save
  0004c	8b cb		 mov	 ecx, ebx
  0004e	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00053	48		 dec	 eax
  00054	eb 02		 jmp	 SHORT $LN8@Save
$LN7@Save:
  00056	33 c0		 xor	 eax, eax
$LN8@Save:
  00058	50		 push	 eax
  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GGJBGKJP@TextureCount?5?$CFld?6@
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 _fprintf

; 268  : 	fprintf(pFile, "\n");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00069	57		 push	 edi
  0006a	e8 00 00 00 00	 call	 _fprintf
  0006f	83 c4 14	 add	 esp, 20			; 00000014H

; 269  : 
; 270  : 	for (DWORD i = 1; i < GetTextureCount(); ++i)

  00072	c7 45 08 01 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 1
  00079	8b cb		 mov	 ecx, ebx
  0007b	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  00080	83 f8 01	 cmp	 eax, 1
  00083	0f 86 01 01 00
	00		 jbe	 $LN3@Save

; 265  : 
; 266  : 	// @fixme004
; 267  : 	fprintf(pFile, "TextureCount %ld\n", GetTextureCount() ? (GetTextureCount() - 1) : 0);

  00089	b8 9c 00 00 00	 mov	 eax, 156		; 0000009cH
  0008e	89 45 fc	 mov	 DWORD PTR tv278[ebp], eax
  00091	56		 push	 esi
$LL4@Save:

; 274  : 		fprintf(pFile, "Start Texture%03d\n", i);

  00092	ff 75 08	 push	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00095	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 274  : 		fprintf(pFile, "Start Texture%03d\n", i);

  00098	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BJELLKNB@Start?5Texture?$CF03d?6@
  0009d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0009e	03 f0		 add	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 274  : 		fprintf(pFile, "Start Texture%03d\n", i);

  000a0	e8 00 00 00 00	 call	 _fprintf
  000a5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  000a8	8b c6		 mov	 eax, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  000aa	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  000ae	72 02		 jb	 SHORT $LN14@Save

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000b0	8b 06		 mov	 eax, DWORD PTR [esi]
$LN14@Save:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 275  : 		fprintf(pFile, "    \"%s\"\n", rTex.stFilename.c_str());

  000b2	50		 push	 eax
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_09BMPLDMAP@?5?5?5?5?$CC?$CFs?$CC?6@
  000b8	57		 push	 edi
  000b9	e8 00 00 00 00	 call	 _fprintf
  000be	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]

; 276  : 		fprintf(pFile, "    %f\n", rTex.UScale);

  000c3	83 c4 04	 add	 esp, 4
  000c6	0f 5a c0	 cvtps2pd xmm0, xmm0
  000c9	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@
  000d3	57		 push	 edi
  000d4	e8 00 00 00 00	 call	 _fprintf
  000d9	f3 0f 10 46 48	 movss	 xmm0, DWORD PTR [esi+72]

; 277  : 		fprintf(pFile, "    %f\n", rTex.VScale);

  000de	83 c4 08	 add	 esp, 8
  000e1	0f 5a c0	 cvtps2pd xmm0, xmm0
  000e4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@
  000ee	57		 push	 edi
  000ef	e8 00 00 00 00	 call	 _fprintf
  000f4	f3 0f 10 46 4c	 movss	 xmm0, DWORD PTR [esi+76]

; 278  : 		fprintf(pFile, "    %f\n", rTex.UOffset);

  000f9	83 c4 08	 add	 esp, 8
  000fc	0f 5a c0	 cvtps2pd xmm0, xmm0
  000ff	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00104	68 00 00 00 00	 push	 OFFSET ??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@
  00109	57		 push	 edi
  0010a	e8 00 00 00 00	 call	 _fprintf
  0010f	f3 0f 10 46 50	 movss	 xmm0, DWORD PTR [esi+80]

; 279  : 		fprintf(pFile, "    %f\n", rTex.VOffset);

  00114	83 c4 08	 add	 esp, 8
  00117	0f 5a c0	 cvtps2pd xmm0, xmm0
  0011a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_07ELCCFBHK@?5?5?5?5?$CFf?6@
  00124	57		 push	 edi
  00125	e8 00 00 00 00	 call	 _fprintf

; 280  : 		fprintf(pFile, "    %d\n", rTex.bSplat);

  0012a	0f b6 46 54	 movzx	 eax, BYTE PTR [esi+84]
  0012e	50		 push	 eax
  0012f	68 00 00 00 00	 push	 OFFSET ??_C@_07EIKGIFBE@?5?5?5?5?$CFd?6@
  00134	57		 push	 edi
  00135	e8 00 00 00 00	 call	 _fprintf

; 281  : 		fprintf(pFile, "    %hu\n", rTex.Begin);

  0013a	0f b7 46 56	 movzx	 eax, WORD PTR [esi+86]
  0013e	50		 push	 eax
  0013f	68 00 00 00 00	 push	 OFFSET ??_C@_08PFAGAKKH@?5?5?5?5?$CFhu?6@
  00144	57		 push	 edi
  00145	e8 00 00 00 00	 call	 _fprintf

; 282  : 		fprintf(pFile, "    %hu\n", rTex.End);

  0014a	0f b7 46 58	 movzx	 eax, WORD PTR [esi+88]
  0014e	50		 push	 eax
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_08PFAGAKKH@?5?5?5?5?$CFhu?6@
  00154	57		 push	 edi
  00155	e8 00 00 00 00	 call	 _fprintf

; 283  : 		fprintf(pFile, "End Texture%03d\n", i);

  0015a	8b 75 08	 mov	 esi, DWORD PTR _i$1$[ebp]
  0015d	56		 push	 esi
  0015e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GNLMPHOK@End?5Texture?$CF03d?6@
  00163	57		 push	 edi
  00164	e8 00 00 00 00	 call	 _fprintf
  00169	81 45 fc 9c 00
	00 00		 add	 DWORD PTR tv278[ebp], 156 ; 0000009cH
  00170	83 c4 40	 add	 esp, 64			; 00000040H
  00173	46		 inc	 esi
  00174	8b cb		 mov	 ecx, ebx
  00176	89 75 08	 mov	 DWORD PTR _i$1$[ebp], esi
  00179	e8 00 00 00 00	 call	 ?GetTextureCount@CTextureSet@@QAEKXZ ; CTextureSet::GetTextureCount
  0017e	3b f0		 cmp	 esi, eax
  00180	8b 45 fc	 mov	 eax, DWORD PTR tv278[ebp]
  00183	0f 82 09 ff ff
	ff		 jb	 $LL4@Save
  00189	5e		 pop	 esi
$LN3@Save:

; 284  : 	}
; 285  : 
; 286  : 	fclose(pFile);

  0018a	57		 push	 edi
  0018b	e8 00 00 00 00	 call	 _fclose
  00190	83 c4 04	 add	 esp, 4

; 287  : 	return true;

  00193	b0 01		 mov	 al, 1
  00195	5f		 pop	 edi

; 288  : }

  00196	5b		 pop	 ebx
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 04 00	 ret	 4
?Save@CTextureSet@@QAE_NPBD@Z ENDP			; CTextureSet::Save
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?Load@CTextureSet@@QAE_NPBDM@Z
_TEXT	SEGMENT
__Loc$2 = -348						; size = 12
_i$1$ = -336						; size = 4
tv4224 = -332						; size = 4
_fuScale$3 = -328					; size = 4
_fvScale$4 = -324					; size = 4
_fuOffset$5 = -320					; size = 4
$T6 = -316						; size = 8
$T7 = -316						; size = 8
__Loc$8 = -308						; size = 12
__Loc$9 = -308						; size = 12
__Loc$10 = -308						; size = 12
__Loc$11 = -308						; size = 12
tv4210 = -296						; size = 4
_fvOffset$12 = -296					; size = 4
_lCount$1$ = -292					; size = 4
tv4212 = -292						; size = 4
_this$1$ = -288						; size = 4
_stTokenVectorMap$1$ = -284				; size = 4
__Oldsize$1$ = -284					; size = 4
_bSplat$13 = -284					; size = 1
_stTokenVectorMap$ = -280				; size = 8
$T14 = -269						; size = 1
$T15 = -269						; size = 1
_$S2$16 = -268						; size = 24
_$S3$17 = -244						; size = 24
_$S4$18 = -220						; size = 24
_$S5$19 = -196						; size = 24
_$S6$20 = -172						; size = 24
_$S7$21 = -148						; size = 24
_$S8$22 = -124						; size = 24
_$S1$23 = -100						; size = 24
$T24 = -100						; size = 24
$T25 = -100						; size = 24
$T26 = -76						; size = 24
$T27 = -76						; size = 24
$T28 = -76						; size = 24
_szTextureName$ = -52					; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szTextureSetFileName$ = 8				; size = 4
_fTerrainTexCoordBase$ = 12				; size = 4
?Load@CTextureSet@@QAE_NPBDM@Z PROC			; CTextureSet::Load, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Load@CTextureSet@@QAE_NPBDM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 50 01 00
	00		 sub	 esp, 336		; 00000150H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	89 8d e0 fe ff
	ff		 mov	 DWORD PTR _this$1$[ebp], ecx

; 27   : 	NANOBEGIN

  00034	eb		 DB	 -21			; ffffffebH
  00035	03		 DB	 3
  00036	d6		 DB	 -42			; ffffffd6H
  00037	d7		 DB	 -41			; ffffffd7H
  00038	01		 DB	 1
  00039	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  0003f	e8 00 00 00 00	 call	 ?Clear@CTextureSet@@QAEXXZ ; CTextureSet::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00044	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00046	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVectorMap$[ebp], 0
  00050	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _stTokenVectorMap$[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0005a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005f	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  00061	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00064	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00067	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006d	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _stTokenVectorMap$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 32   : 	if (!LoadMultipleTextData(c_szTextureSetFileName, stTokenVectorMap))

  00073	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00080	50		 push	 eax
  00081	ff 75 08	 push	 DWORD PTR _c_szTextureSetFileName$[ebp]
  00084	e8 00 00 00 00	 call	 ?LoadMultipleTextData@@YA_NPBDAAV?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@@Z ; LoadMultipleTextData
  00089	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008c	84 c0		 test	 al, al
  0008e	75 0a		 jne	 SHORT $LN5@Load

; 33   : 	{
; 34   : 		TraceError("TextureSet::Load : cannot load %s", c_szTextureSetFileName);

  00090	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0CC@NFEEIIKK@TextureSet?3?3Load?5?3?5cannot?5load?5@
  00095	e9 20 01 00 00	 jmp	 $LN28@Load
$LN5@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0009a	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 38   : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("textureset"))

  000a0	8d 4d 9c	 lea	 ecx, DWORD PTR $T25[ebp]
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FLIBEPMB@textureset@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  000a8	89 85 dc fe ff
	ff		 mov	 DWORD PTR tv4212[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 38   : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("textureset"))

  000ae	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  000b3	8d 45 9c	 lea	 eax, DWORD PTR $T25[ebp]
  000b6	50		 push	 eax
  000b7	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR __Loc$11[ebp]
  000bd	50		 push	 eax
  000be	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  000c4	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000c9	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$11[ebp+8]
  000cf	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000d3	75 18		 jne	 SHORT $LN165@Load
  000d5	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  000d8	50		 push	 eax
  000d9	8d 45 9c	 lea	 eax, DWORD PTR $T25[ebp]
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  000e2	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000e5	84 c0		 test	 al, al
  000e7	75 04		 jne	 SHORT $LN165@Load
  000e9	b1 01		 mov	 cl, 1
  000eb	eb 02		 jmp	 SHORT $LN166@Load
$LN165@Load:
  000ed	32 c9		 xor	 cl, cl
$LN166@Load:

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  000ef	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  000f5	84 c9		 test	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  000f7	8b 4d b0	 mov	 ecx, DWORD PTR $T25[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  000fa	8b f8		 mov	 edi, eax
  000fc	0f 45 fe	 cmovne	 edi, esi
  000ff	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _stTokenVectorMap$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00105	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00108	72 38		 jb	 SHORT $LN189@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010a	8b 55 9c	 mov	 edx, DWORD PTR $T25[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0010d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010e	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00110	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00116	72 14		 jb	 SHORT $LN199@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00118	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0011b	83 c1 23	 add	 ecx, 35			; 00000023H
  0011e	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00120	83 c0 fc	 add	 eax, -4			; fffffffcH
  00123	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00126	0f 87 ff 09 00
	00		 ja	 $LN594@Load
$LN199@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0012c	51		 push	 ecx
  0012d	52		 push	 edx
  0012e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00133	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00139	83 c4 08	 add	 esp, 8
  0013c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _stTokenVectorMap$1$[ebp], eax
$LN189@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 38   : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("textureset"))

  00142	39 bd dc fe ff
	ff		 cmp	 DWORD PTR tv4212[ebp], edi
  00148	75 07		 jne	 SHORT $LN6@Load

; 39   : 	{
; 40   : 		TraceError("TextureSet::Load : syntax error, TextureSet (filename: %s)", c_szTextureSetFileName);
; 41   : 		return false;

  0014a	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0DL@HIELGKBC@TextureSet?3?3Load?5?3?5syntax?5error@
  0014f	eb 69		 jmp	 SHORT $LN28@Load
$LN6@Load:

; 44   : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("texturecount"))

  00151	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMECMGAI@texturecount@
  00156	8d 4d 9c	 lea	 ecx, DWORD PTR $T24[ebp]
  00159	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0015e	8d 45 9c	 lea	 eax, DWORD PTR $T24[ebp]
  00161	50		 push	 eax
  00162	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR __Loc$9[ebp]
  00168	50		 push	 eax
  00169	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  0016f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00174	8b bd d4 fe ff
	ff		 mov	 edi, DWORD PTR __Loc$9[ebp+8]
  0017a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0017e	75 18		 jne	 SHORT $LN709@Load
  00180	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00183	50		 push	 eax
  00184	8d 45 9c	 lea	 eax, DWORD PTR $T24[ebp]
  00187	50		 push	 eax
  00188	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0018d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00190	84 c0		 test	 al, al
  00192	75 04		 jne	 SHORT $LN709@Load
  00194	b0 01		 mov	 al, 1
  00196	eb 02		 jmp	 SHORT $LN710@Load
$LN709@Load:
  00198	32 c0		 xor	 al, al
$LN710@Load:

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  0019a	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 44   : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("texturecount"))

  001a0	8d 4d 9c	 lea	 ecx, DWORD PTR $T24[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  001a3	84 c0		 test	 al, al
  001a5	0f 45 f7	 cmovne	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 44   : 	if (stTokenVectorMap.end() == stTokenVectorMap.find("texturecount"))

  001a8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001ad	39 b5 e4 fe ff
	ff		 cmp	 DWORD PTR _stTokenVectorMap$1$[ebp], esi
  001b3	75 1e		 jne	 SHORT $LN7@Load

; 45   : 	{
; 46   : 		TraceError("TextureSet::Load : syntax error, TextureCount (filename: %s)", c_szTextureSetFileName);
; 47   : 		return false;

  001b5	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0DN@FCLAEMJC@TextureSet?3?3Load?5?3?5syntax?5error@
$LN28@Load:
  001ba	8b 75 08	 mov	 esi, DWORD PTR _c_szTextureSetFileName$[ebp]
  001bd	56		 push	 esi
  001be	50		 push	 eax
  001bf	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  001c4	83 c4 08	 add	 esp, 8
  001c7	c6 85 f3 fe ff
	ff 00		 mov	 BYTE PTR $T14[ebp], 0
  001ce	e9 0d 09 00 00	 jmp	 $LN29@Load
$LN7@Load:

; 48   : 	}
; 49   : 
; 50   : 	Create();

  001d3	8b bd e0 fe ff
	ff		 mov	 edi, DWORD PTR _this$1$[ebp]
  001d9	8b cf		 mov	 ecx, edi
  001db	e8 00 00 00 00	 call	 ?Create@CTextureSet@@QAEXXZ ; CTextureSet::Create

; 52   : 	const std::string & c_rstrCount = stTokenVectorMap["texturecount"][0];

  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MMECMGAI@texturecount@
  001e5	8d 4d b4	 lea	 ecx, DWORD PTR $T28[ebp]
  001e8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  001ed	8d 45 b4	 lea	 eax, DWORD PTR $T28[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 52   : 	const std::string & c_rstrCount = stTokenVectorMap["texturecount"][0];

  001f0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  001f4	50		 push	 eax
  001f5	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR __Loc$8[ebp]
  001fb	50		 push	 eax
  001fc	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  00202	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00207	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$8[ebp+8]
  0020d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00211	75 18		 jne	 SHORT $LN744@Load
  00213	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00216	50		 push	 eax
  00217	8d 45 b4	 lea	 eax, DWORD PTR $T28[ebp]
  0021a	50		 push	 eax
  0021b	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00220	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00223	84 c0		 test	 al, al
  00225	75 04		 jne	 SHORT $LN744@Load
  00227	b0 01		 mov	 al, 1
  00229	eb 02		 jmp	 SHORT $LN745@Load
$LN744@Load:
  0022b	32 c0		 xor	 al, al
$LN745@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 197  :         if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  0022d	84 c0		 test	 al, al
  0022f	0f 85 b0 00 00
	00		 jne	 $LN738@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00235	81 bd ec fe ff
	ff c4 4e ec 04	 cmp	 DWORD PTR _stTokenVectorMap$[ebp+4], 82595524 ; 04ec4ec4H
  0023f	0f 84 eb 08 00
	00		 je	 $LN880@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00245	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0024b	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00251	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00257	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00259	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0025d	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00267	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0026c	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0026f	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00275	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00278	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0027c	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00283	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0028a	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR $T28[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0028e	50		 push	 eax
  0028f	ff b5 d0 fe ff
	ff		 push	 DWORD PTR __Loc$8[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00295	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00299	f3 0f 7e 45 c4	 movq	 xmm0, QWORD PTR $T28[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0029e	ff b5 cc fe ff
	ff		 push	 DWORD PTR __Loc$8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  002a4	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4998 :         _My_data._Mysize = 0;

  002a9	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T28[ebp+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  002b0	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T28[ebp+20], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  002b7	c6 45 b4 00	 mov	 BYTE PTR $T28[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  002bb	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  002c2	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  002c9	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  002d0	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  002d2	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  002d5	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  002d8	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  002de	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  002e3	8b f0		 mov	 esi, eax
$LN738@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  002e5	8b 76 28	 mov	 esi, DWORD PTR [esi+40]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 52   : 	const std::string & c_rstrCount = stTokenVectorMap["texturecount"][0];

  002e8	8d 4d b4	 lea	 ecx, DWORD PTR $T28[ebp]
  002eb	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ef	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  002f4	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  002f8	72 02		 jb	 SHORT $LN875@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  002fa	8b 36		 mov	 esi, DWORD PTR [esi]
$LN875@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 54   : 	long lCount = atol(c_rstrCount.c_str());

  002fc	56		 push	 esi
  002fd	e8 00 00 00 00	 call	 _atol
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00302	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 57   : 	m_Textures.resize(lCount + 1);

  00305	83 c7 04	 add	 edi, 4
  00308	89 85 dc fe ff
	ff		 mov	 DWORD PTR _lCount$1$[ebp], eax
  0030e	83 c4 04	 add	 esp, 4
  00311	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00314	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00319	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0031b	f7 e9		 imul	 ecx
  0031d	03 d1		 add	 edx, ecx
  0031f	c1 fa 07	 sar	 edx, 7
  00322	8b c2		 mov	 eax, edx
  00324	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00327	03 c2		 add	 eax, edx
  00329	89 85 e4 fe ff
	ff		 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  0032f	3b f0		 cmp	 esi, eax
  00331	73 18		 jae	 SHORT $LN868@Load

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  00333	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00336	69 f6 9c 00 00
	00		 imul	 esi, esi, 156
  0033c	57		 push	 edi
  0033d	50		 push	 eax
  0033e	03 37		 add	 esi, DWORD PTR [edi]
  00340	56		 push	 esi
  00341	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00346	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 1627 :             return;

  00349	eb 43		 jmp	 SHORT $LN894@Load
$LN868@Load:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  0034b	76 44		 jbe	 SHORT $LN869@Load

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0034d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00350	b8 d3 20 0d d2	 mov	 eax, -770891565		; d20d20d3H
  00355	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00357	f7 e9		 imul	 ecx
  00359	03 d1		 add	 edx, ecx
  0035b	c1 fa 07	 sar	 edx, 7
  0035e	8b c2		 mov	 eax, edx
  00360	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00363	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00365	3b f0		 cmp	 esi, eax
  00367	76 11		 jbe	 SHORT $LN870@Load

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00369	8d 85 f3 fe ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  0036f	8b cf		 mov	 ecx, edi
  00371	50		 push	 eax
  00372	56		 push	 esi
  00373	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00378	eb 17		 jmp	 SHORT $LN869@Load
$LN870@Load:

; 1635 :             }
; 1636 : 
; 1637 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1638 :             const pointer _Oldlast = _Mylast;
; 1639 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1640 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1641 :             } else {
; 1642 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0037a	2b b5 e4 fe ff
	ff		 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
  00380	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00383	57		 push	 edi
  00384	56		 push	 esi
  00385	50		 push	 eax
  00386	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USTerrainTexture@@@std@@@std@@YAPAUSTerrainTexture@@PAU1@IAAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<STerrainTexture> >
  0038b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN894@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 59   : 	for (long i = 0; i < lCount; ++i)

  0038e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN869@Load:
  00391	33 c0		 xor	 eax, eax
  00393	39 85 dc fe ff
	ff		 cmp	 DWORD PTR _lCount$1$[ebp], eax
  00399	0f 8e 11 07 00
	00		 jle	 $LN889@Load
  0039f	90		 npad	 1
$LL4@Load:

; 60   : 	{
; 61   : 		_snprintf(szTextureName, sizeof(szTextureName), "texture%03d", i + 1);

  003a0	40		 inc	 eax
  003a1	50		 push	 eax
  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDPMIDHE@texture?$CF03d@
  003a7	89 85 b4 fe ff
	ff		 mov	 DWORD PTR tv4224[ebp], eax
  003ad	89 85 b0 fe ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  003b3	8d 45 cc	 lea	 eax, DWORD PTR _szTextureName$[ebp]
  003b6	6a 21		 push	 33			; 00000021H
  003b8	50		 push	 eax
  003b9	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  003be	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 63   : 		if (stTokenVectorMap.end() == stTokenVectorMap.find(szTextureName))

  003c4	8d 4d b4	 lea	 ecx, DWORD PTR $T27[ebp]
  003c7	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  003ca	89 85 d8 fe ff
	ff		 mov	 DWORD PTR tv4210[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 63   : 		if (stTokenVectorMap.end() == stTokenVectorMap.find(szTextureName))

  003d0	8d 45 cc	 lea	 eax, DWORD PTR _szTextureName$[ebp]
  003d3	50		 push	 eax
  003d4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  003d9	8d 45 b4	 lea	 eax, DWORD PTR $T27[ebp]
  003dc	50		 push	 eax
  003dd	8d 85 a4 fe ff
	ff		 lea	 eax, DWORD PTR __Loc$2[ebp]
  003e3	50		 push	 eax
  003e4	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  003ea	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  003ef	8b bd ac fe ff
	ff		 mov	 edi, DWORD PTR __Loc$2[ebp+8]
  003f5	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  003f9	75 18		 jne	 SHORT $LN888@Load
  003fb	8d 47 10	 lea	 eax, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  003fe	50		 push	 eax
  003ff	8d 45 b4	 lea	 eax, DWORD PTR $T27[ebp]
  00402	50		 push	 eax
  00403	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00408	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0040b	84 c0		 test	 al, al
  0040d	75 04		 jne	 SHORT $LN888@Load
  0040f	b0 01		 mov	 al, 1
  00411	eb 02		 jmp	 SHORT $LN108@Load
$LN888@Load:
  00413	32 c0		 xor	 al, al
$LN108@Load:

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  00415	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
  0041b	84 c0		 test	 al, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0041d	8b 4d c8	 mov	 ecx, DWORD PTR $T27[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1368 :         if (_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  00420	0f 45 f7	 cmovne	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00423	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00426	72 2c		 jb	 SHORT $LN131@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00428	8b 55 b4	 mov	 edx, DWORD PTR $T27[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0042b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0042c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0042e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00434	72 14		 jb	 SHORT $LN141@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00436	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00439	83 c1 23	 add	 ecx, 35			; 00000023H
  0043c	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0043e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00441	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00444	0f 87 e1 06 00
	00		 ja	 $LN594@Load
$LN141@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0044a	51		 push	 ecx
  0044b	52		 push	 edx
  0044c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00451	83 c4 08	 add	 esp, 8
$LN131@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 63   : 		if (stTokenVectorMap.end() == stTokenVectorMap.find(szTextureName))

  00454	39 b5 d8 fe ff
	ff		 cmp	 DWORD PTR tv4210[ebp], esi
  0045a	0f 84 3e 06 00
	00		 je	 $LN2@Load

; 68   : 		const CTokenVector & rVector = stTokenVectorMap[szTextureName];

  00460	8d 45 cc	 lea	 eax, DWORD PTR _szTextureName$[ebp]
  00463	50		 push	 eax
  00464	8d 4d b4	 lea	 ecx, DWORD PTR $T26[ebp]
  00467	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0046c	8d 45 b4	 lea	 eax, DWORD PTR $T26[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 68   : 		const CTokenVector & rVector = stTokenVectorMap[szTextureName];

  0046f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00473	50		 push	 eax
  00474	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR __Loc$10[ebp]
  0047a	50		 push	 eax
  0047b	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  00481	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00486	8b b5 d4 fe ff
	ff		 mov	 esi, DWORD PTR __Loc$10[ebp+8]
  0048c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00490	75 18		 jne	 SHORT $LN456@Load
  00492	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00495	50		 push	 eax
  00496	8d 45 b4	 lea	 eax, DWORD PTR $T26[ebp]
  00499	50		 push	 eax
  0049a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0049f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  004a2	84 c0		 test	 al, al
  004a4	75 04		 jne	 SHORT $LN456@Load
  004a6	b0 01		 mov	 al, 1
  004a8	eb 02		 jmp	 SHORT $LN457@Load
$LN456@Load:
  004aa	32 c0		 xor	 al, al
$LN457@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 197  :         if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

  004ac	84 c0		 test	 al, al
  004ae	0f 85 ba 00 00
	00		 jne	 $LN450@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  004b4	81 bd ec fe ff
	ff c4 4e ec 04	 cmp	 DWORD PTR _stTokenVectorMap$[ebp+4], 82595524 ; 04ec4ec4H
  004be	0f 84 6c 06 00
	00		 je	 $LN880@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  004c4	8b b5 e8 fe ff
	ff		 mov	 esi, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  004ca	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  004d0	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax

; 77   :         return ::operator new(_Bytes);

  004d6	6a 34		 push	 52			; 00000034H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  004d8	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  004dc	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  004e6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  004eb	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  004ee	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  004f8	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  004fb	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00501	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00505	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0050c	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00513	0f 10 45 b4	 movups	 xmm0, XMMWORD PTR $T26[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00517	50		 push	 eax
  00518	ff b5 d0 fe ff
	ff		 push	 DWORD PTR __Loc$10[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0051e	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00522	f3 0f 7e 45 c4	 movq	 xmm0, QWORD PTR $T26[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00527	ff b5 cc fe ff
	ff		 push	 DWORD PTR __Loc$10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0052d	66 0f d6 40 20	 movq	 QWORD PTR [eax+32], xmm0

; 4998 :         _My_data._Mysize = 0;

  00532	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T26[ebp+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00539	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T26[ebp+20], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00540	c6 45 b4 00	 mov	 BYTE PTR $T26[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00544	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  0054b	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0
  00552	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00559	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0055b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0055e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00561	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00567	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Insert_node
  0056c	8b f0		 mov	 esi, eax
$LN450@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0056e	8b 4d c8	 mov	 ecx, DWORD PTR $T26[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 68   : 		const CTokenVector & rVector = stTokenVectorMap[szTextureName];

  00571	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00575	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00578	72 2c		 jb	 SHORT $LN587@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0057a	8b 55 b4	 mov	 edx, DWORD PTR $T26[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0057d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0057e	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00580	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00586	72 14		 jb	 SHORT $LN597@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00588	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0058b	83 c1 23	 add	 ecx, 35			; 00000023H
  0058e	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00590	83 c0 fc	 add	 eax, -4			; fffffffcH
  00593	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00596	0f 87 8f 05 00
	00		 ja	 $LN594@Load
$LN597@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0059c	51		 push	 ecx
  0059d	52		 push	 edx
  0059e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  005a3	83 c4 08	 add	 esp, 8
$LN587@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  005a6	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T26[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  005ad	c7 45 c8 0f 00
	00 00		 mov	 DWORD PTR $T26[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  005b4	c6 45 b4 00	 mov	 BYTE PTR $T26[ebp], 0

; 4259 :         return _Mypair._Myval2._Myptr();

  005b8	8b 46 28	 mov	 eax, DWORD PTR [esi+40]

; 2293 :         if (_Large_string_engaged()) {

  005bb	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  005bf	72 02		 jb	 SHORT $LN607@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  005c1	8b 00		 mov	 eax, DWORD PTR [eax]
$LN607@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 70   : 		const std::string & c_rstrFileName	= rVector[0].c_str();

  005c3	50		 push	 eax
  005c4	8d 4d 9c	 lea	 ecx, DWORD PTR _$S1$23[ebp]
  005c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  005cc	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  005cf	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 70   : 		const std::string & c_rstrFileName	= rVector[0].c_str();

  005d2	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  005d6	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  005da	72 02		 jb	 SHORT $LN616@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  005dc	8b 00		 mov	 eax, DWORD PTR [eax]
$LN616@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 71   : 		const std::string & c_rstrUScale	= rVector[1].c_str();

  005de	50		 push	 eax
  005df	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _$S2$16[ebp]
  005e5	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  005ea	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  005ed	83 c0 30	 add	 eax, 48			; 00000030H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 71   : 		const std::string & c_rstrUScale	= rVector[1].c_str();

  005f0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  005f4	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  005f8	72 02		 jb	 SHORT $LN221@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  005fa	8b 00		 mov	 eax, DWORD PTR [eax]
$LN221@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 72   : 		const std::string & c_rstrVScale	= rVector[2].c_str();

  005fc	50		 push	 eax
  005fd	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _$S3$17[ebp]
  00603	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  00608	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0060b	83 c0 48	 add	 eax, 72			; 00000048H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 72   : 		const std::string & c_rstrVScale	= rVector[2].c_str();

  0060e	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00612	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00616	72 02		 jb	 SHORT $LN634@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00618	8b 00		 mov	 eax, DWORD PTR [eax]
$LN634@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 73   : 		const std::string & c_rstrUOffset	= rVector[3].c_str();

  0061a	50		 push	 eax
  0061b	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$18[ebp]
  00621	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  00626	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00629	83 c0 60	 add	 eax, 96			; 00000060H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 73   : 		const std::string & c_rstrUOffset	= rVector[3].c_str();

  0062c	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00630	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00634	72 02		 jb	 SHORT $LN643@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00636	8b 00		 mov	 eax, DWORD PTR [eax]
$LN643@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 74   : 		const std::string & c_rstrVOffset	= rVector[4].c_str();

  00638	50		 push	 eax
  00639	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$19[ebp]
  0063f	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  00644	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00647	83 c0 78	 add	 eax, 120		; 00000078H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 74   : 		const std::string & c_rstrVOffset	= rVector[4].c_str();

  0064a	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0064e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00652	72 02		 jb	 SHORT $LN652@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00654	8b 00		 mov	 eax, DWORD PTR [eax]
$LN652@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 75   : 		const std::string & c_rstrbSplat	= rVector[5].c_str();

  00656	50		 push	 eax
  00657	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S6$20[ebp]
  0065d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  00662	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00665	05 90 00 00 00	 add	 eax, 144		; 00000090H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 75   : 		const std::string & c_rstrbSplat	= rVector[5].c_str();

  0066a	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0066e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00672	72 02		 jb	 SHORT $LN661@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00674	8b 00		 mov	 eax, DWORD PTR [eax]
$LN661@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 76   : 		const std::string & c_rstrBegin		= rVector[6].c_str();

  00676	50		 push	 eax
  00677	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S7$21[ebp]
  0067d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  00682	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00685	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 76   : 		const std::string & c_rstrBegin		= rVector[6].c_str();

  0068a	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0068e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H
  00692	72 02		 jb	 SHORT $LN670@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00694	8b 00		 mov	 eax, DWORD PTR [eax]
$LN670@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 77   : 		const std::string & c_rstrEnd		= rVector[7].c_str();

  00696	50		 push	 eax
  00697	8d 4d 84	 lea	 ecx, DWORD PTR _$S8$22[ebp]
  0069a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0069f	83 bd 08 ff ff
	ff 10		 cmp	 DWORD PTR _$S2$16[ebp+20], 16 ; 00000010H
  006a6	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _$S2$16[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 77   : 		const std::string & c_rstrEnd		= rVector[7].c_str();

  006ac	c6 45 fc 0c	 mov	 BYTE PTR __$EHRec$[ebp+8], 12 ; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  006b0	0f 43 85 f4 fe
	ff ff		 cmovae	 eax, DWORD PTR _$S2$16[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 83   : 		fuScale	= atof(c_rstrUScale.c_str());

  006b7	50		 push	 eax
  006b8	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  006bd	83 bd 20 ff ff
	ff 10		 cmp	 DWORD PTR _$S3$17[ebp+20], 16 ; 00000010H
  006c4	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _$S3$17[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 83   : 		fuScale	= atof(c_rstrUScale.c_str());

  006ca	d9 9d b8 fe ff
	ff		 fstp	 DWORD PTR _fuScale$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  006d0	0f 43 85 0c ff
	ff ff		 cmovae	 eax, DWORD PTR _$S3$17[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 84   : 		fvScale = atof(c_rstrVScale.c_str());

  006d7	50		 push	 eax
  006d8	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  006dd	83 bd 38 ff ff
	ff 10		 cmp	 DWORD PTR _$S4$18[ebp+20], 16 ; 00000010H
  006e4	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _$S4$18[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 84   : 		fvScale = atof(c_rstrVScale.c_str());

  006ea	d9 9d bc fe ff
	ff		 fstp	 DWORD PTR _fvScale$4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  006f0	0f 43 85 24 ff
	ff ff		 cmovae	 eax, DWORD PTR _$S4$18[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 85   : 		fuOffset = atof(c_rstrUOffset.c_str());

  006f7	50		 push	 eax
  006f8	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  006fd	83 bd 50 ff ff
	ff 10		 cmp	 DWORD PTR _$S5$19[ebp+20], 16 ; 00000010H
  00704	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _$S5$19[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 85   : 		fuOffset = atof(c_rstrUOffset.c_str());

  0070a	d9 9d c0 fe ff
	ff		 fstp	 DWORD PTR _fuOffset$5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00710	0f 43 85 3c ff
	ff ff		 cmovae	 eax, DWORD PTR _$S5$19[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 86   : 		fvOffset = atof(c_rstrVOffset.c_str());

  00717	50		 push	 eax
  00718	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0071d	83 bd 68 ff ff
	ff 10		 cmp	 DWORD PTR _$S6$20[ebp+20], 16 ; 00000010H
  00724	8d 85 54 ff ff
	ff		 lea	 eax, DWORD PTR _$S6$20[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 86   : 		fvOffset = atof(c_rstrVOffset.c_str());

  0072a	d9 9d d8 fe ff
	ff		 fstp	 DWORD PTR _fvOffset$12[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00730	0f 43 85 54 ff
	ff ff		 cmovae	 eax, DWORD PTR _$S6$20[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 87   : 		bSplat = 0 != atoi(c_rstrbSplat.c_str());

  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 __atoi64
  0073d	83 c4 14	 add	 esp, 20			; 00000014H
  00740	85 c0		 test	 eax, eax
  00742	75 0a		 jne	 SHORT $LN890@Load
  00744	88 85 e4 fe ff
	ff		 mov	 BYTE PTR _bSplat$13[ebp], al
  0074a	85 d2		 test	 edx, edx
  0074c	74 07		 je	 SHORT $LN12@Load
$LN890@Load:
  0074e	c6 85 e4 fe ff
	ff 01		 mov	 BYTE PTR _bSplat$13[ebp], 1
$LN12@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00755	83 7d 80 10	 cmp	 DWORD PTR _$S7$21[ebp+20], 16 ; 00000010H
  00759	8d 85 6c ff ff
	ff		 lea	 eax, DWORD PTR _$S7$21[ebp]
  0075f	0f 43 85 6c ff
	ff ff		 cmovae	 eax, DWORD PTR _$S7$21[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 88   : 		usBegin = static_cast<unsigned short>(atoi(c_rstrBegin.c_str()));

  00766	50		 push	 eax
  00767	e8 00 00 00 00	 call	 __atoi64
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0076c	83 7d 98 10	 cmp	 DWORD PTR _$S8$22[ebp+20], 16 ; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 88   : 		usBegin = static_cast<unsigned short>(atoi(c_rstrBegin.c_str()));

  00770	0f b7 f0	 movzx	 esi, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  00773	8d 45 84	 lea	 eax, DWORD PTR _$S8$22[ebp]

; 2293 :         if (_Large_string_engaged()) {

  00776	0f 43 45 84	 cmovae	 eax, DWORD PTR _$S8$22[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 89   : 		usEnd = static_cast<unsigned short>(atoi(c_rstrEnd.c_str()));

  0077a	50		 push	 eax
  0077b	e8 00 00 00 00	 call	 __atoi64
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00780	83 7d b0 10	 cmp	 DWORD PTR _$S1$23[ebp+20], 16 ; 00000010H
  00784	8d 4d 9c	 lea	 ecx, DWORD PTR _$S1$23[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 91   : 		if (!SetTexture(i + 1, c_rstrFileName.c_str(), fuScale, fvScale, fuOffset, fvOffset, bSplat, usBegin, usEnd, fTerrainTexCoordBase))

  00787	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fTerrainTexCoordBase$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  0078c	0f 43 4d 9c	 cmovae	 ecx, DWORD PTR _$S1$23[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 91   : 		if (!SetTexture(i + 1, c_rstrFileName.c_str(), fuScale, fvScale, fuOffset, fvOffset, bSplat, usBegin, usEnd, fTerrainTexCoordBase))

  00790	83 c4 04	 add	 esp, 4
  00793	0f b7 c0	 movzx	 eax, ax
  00796	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079b	f3 0f 10 85 d8
	fe ff ff	 movss	 xmm0, DWORD PTR _fvOffset$12[ebp]
  007a3	50		 push	 eax
  007a4	56		 push	 esi
  007a5	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _bSplat$13[ebp]
  007ab	83 ec 10	 sub	 esp, 16			; 00000010H
  007ae	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  007b4	f3 0f 10 85 c0
	fe ff ff	 movss	 xmm0, DWORD PTR _fuOffset$5[ebp]
  007bc	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  007c2	f3 0f 10 85 bc
	fe ff ff	 movss	 xmm0, DWORD PTR _fvScale$4[ebp]
  007ca	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  007d0	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _fuScale$3[ebp]
  007d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007dd	51		 push	 ecx
  007de	ff b5 b4 fe ff
	ff		 push	 DWORD PTR tv4224[ebp]
  007e4	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
  007ea	e8 00 00 00 00	 call	 ?SetTexture@CTextureSet@@QAE_NKPBDMMMM_NGGM@Z ; CTextureSet::SetTexture
  007ef	84 c0		 test	 al, al
  007f1	75 19		 jne	 SHORT $LN9@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  007f3	83 7d b0 10	 cmp	 DWORD PTR _$S1$23[ebp+20], 16 ; 00000010H
  007f7	8d 45 9c	 lea	 eax, DWORD PTR _$S1$23[ebp]
  007fa	0f 43 45 9c	 cmovae	 eax, DWORD PTR _$S1$23[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 93   : 			TraceError("CTextureSet::Load : SetTexture failed : Filename: %s", c_rstrFileName.c_str());

  007fe	50		 push	 eax
  007ff	68 00 00 00 00	 push	 OFFSET ??_C@_0DF@CFOIFDDM@CTextureSet?3?3Load?5?3?5SetTexture?5@
  00804	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00809	83 c4 08	 add	 esp, 8
$LN9@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0080c	8b 4d 98	 mov	 ecx, DWORD PTR _$S8$22[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  0080f	c6 45 fc 0b	 mov	 BYTE PTR __$EHRec$[ebp+8], 11 ; 0000000bH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00813	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00816	72 2c		 jb	 SHORT $LN244@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00818	8b 55 84	 mov	 edx, DWORD PTR _$S8$22[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0081b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0081c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0081e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00824	72 14		 jb	 SHORT $LN254@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00826	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00829	83 c1 23	 add	 ecx, 35			; 00000023H
  0082c	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0082e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00831	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00834	0f 87 f1 02 00
	00		 ja	 $LN594@Load
$LN254@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0083a	51		 push	 ecx
  0083b	52		 push	 edx
  0083c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00841	83 c4 08	 add	 esp, 8
$LN244@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00844	8b 4d 80	 mov	 ecx, DWORD PTR _$S7$21[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  00847	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _$S8$22[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0084e	c7 45 98 0f 00
	00 00		 mov	 DWORD PTR _$S8$22[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00855	c6 45 84 00	 mov	 BYTE PTR _$S8$22[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  00859	c6 45 fc 0a	 mov	 BYTE PTR __$EHRec$[ebp+8], 10 ; 0000000aH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0085d	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00860	72 2f		 jb	 SHORT $LN433@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00862	8b 95 6c ff ff
	ff		 mov	 edx, DWORD PTR _$S7$21[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00868	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00869	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0086b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00871	72 14		 jb	 SHORT $LN443@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00873	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00876	83 c1 23	 add	 ecx, 35			; 00000023H
  00879	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0087b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0087e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00881	0f 87 a4 02 00
	00		 ja	 $LN594@Load
$LN443@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00887	51		 push	 ecx
  00888	52		 push	 edx
  00889	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0088e	83 c4 08	 add	 esp, 8
$LN433@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00891	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _$S6$20[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  00897	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S7$21[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  008a1	c7 45 80 0f 00
	00 00		 mov	 DWORD PTR _$S7$21[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  008a8	c6 85 6c ff ff
	ff 00		 mov	 BYTE PTR _$S7$21[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  008af	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  008b3	83 f9 10	 cmp	 ecx, 16			; 00000010H
  008b6	72 2f		 jb	 SHORT $LN271@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008b8	8b 95 54 ff ff
	ff		 mov	 edx, DWORD PTR _$S6$20[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  008be	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  008bf	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  008c1	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  008c7	72 14		 jb	 SHORT $LN281@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  008c9	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  008cc	83 c1 23	 add	 ecx, 35			; 00000023H
  008cf	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  008d1	83 c0 fc	 add	 eax, -4			; fffffffcH
  008d4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  008d7	0f 87 4e 02 00
	00		 ja	 $LN594@Load
$LN281@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  008dd	51		 push	 ecx
  008de	52		 push	 edx
  008df	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  008e4	83 c4 08	 add	 esp, 8
$LN271@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  008e7	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _$S5$19[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  008ed	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S6$20[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  008f7	c7 85 68 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S6$20[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00901	c6 85 54 ff ff
	ff 00		 mov	 BYTE PTR _$S6$20[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  00908	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0090c	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0090f	72 2f		 jb	 SHORT $LN298@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00911	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _$S5$19[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00917	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00918	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0091a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00920	72 14		 jb	 SHORT $LN308@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00922	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00925	83 c1 23	 add	 ecx, 35			; 00000023H
  00928	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0092a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0092d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00930	0f 87 f5 01 00
	00		 ja	 $LN594@Load
$LN308@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00936	51		 push	 ecx
  00937	52		 push	 edx
  00938	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0093d	83 c4 08	 add	 esp, 8
$LN298@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00940	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _$S4$18[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  00946	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S5$19[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00950	c7 85 50 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S5$19[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0095a	c6 85 3c ff ff
	ff 00		 mov	 BYTE PTR _$S5$19[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  00961	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00965	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00968	72 2f		 jb	 SHORT $LN325@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0096a	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR _$S4$18[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00970	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00971	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00973	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00979	72 14		 jb	 SHORT $LN335@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0097b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0097e	83 c1 23	 add	 ecx, 35			; 00000023H
  00981	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00983	83 c0 fc	 add	 eax, -4			; fffffffcH
  00986	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00989	0f 87 9c 01 00
	00		 ja	 $LN594@Load
$LN335@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0098f	51		 push	 ecx
  00990	52		 push	 edx
  00991	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00996	83 c4 08	 add	 esp, 8
$LN325@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00999	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _$S3$17[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  0099f	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S4$18[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  009a9	c7 85 38 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S4$18[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  009b3	c6 85 24 ff ff
	ff 00		 mov	 BYTE PTR _$S4$18[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  009ba	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  009be	83 f9 10	 cmp	 ecx, 16			; 00000010H
  009c1	72 2f		 jb	 SHORT $LN352@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009c3	8b 95 0c ff ff
	ff		 mov	 edx, DWORD PTR _$S3$17[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  009c9	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009ca	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  009cc	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  009d2	72 14		 jb	 SHORT $LN362@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  009d4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  009d7	83 c1 23	 add	 ecx, 35			; 00000023H
  009da	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  009dc	83 c0 fc	 add	 eax, -4			; fffffffcH
  009df	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009e2	0f 87 43 01 00
	00		 ja	 $LN594@Load
$LN362@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  009e8	51		 push	 ecx
  009e9	52		 push	 edx
  009ea	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  009ef	83 c4 08	 add	 esp, 8
$LN352@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  009f2	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _$S2$16[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  009f8	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S3$17[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00a02	c7 85 20 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S3$17[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00a0c	c6 85 0c ff ff
	ff 00		 mov	 BYTE PTR _$S3$17[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  00a13	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00a17	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00a1a	72 2f		 jb	 SHORT $LN379@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a1c	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR _$S2$16[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00a22	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a23	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a25	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a2b	72 14		 jb	 SHORT $LN389@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a2d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a30	83 c1 23	 add	 ecx, 35			; 00000023H
  00a33	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a35	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a38	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a3b	0f 87 ea 00 00
	00		 ja	 $LN594@Load
$LN389@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a41	51		 push	 ecx
  00a42	52		 push	 edx
  00a43	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a48	83 c4 08	 add	 esp, 8
$LN379@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a4b	8b 4d b0	 mov	 ecx, DWORD PTR _$S1$23[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  00a4e	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _$S2$16[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00a58	c7 85 08 ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR _$S2$16[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00a62	c6 85 f4 fe ff
	ff 00		 mov	 BYTE PTR _$S2$16[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 95   : 	}

  00a69	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a6d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00a70	72 2c		 jb	 SHORT $LN2@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a72	8b 55 9c	 mov	 edx, DWORD PTR _$S1$23[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00a75	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a76	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a78	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a7e	72 14		 jb	 SHORT $LN416@Load

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a80	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a83	83 c1 23	 add	 ecx, 35			; 00000023H
  00a86	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a88	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a8b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a8e	0f 87 97 00 00
	00		 ja	 $LN594@Load
$LN416@Load:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a94	51		 push	 ecx
  00a95	52		 push	 edx
  00a96	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a9b	83 c4 08	 add	 esp, 8
$LN2@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 59   : 	for (long i = 0; i < lCount; ++i)

  00a9e	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]
  00aa4	3b 85 dc fe ff
	ff		 cmp	 eax, DWORD PTR _lCount$1$[ebp]
  00aaa	0f 8c f0 f8 ff
	ff		 jl	 $LL4@Load
$LN889@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00ab0	8b 75 08	 mov	 esi, DWORD PTR _c_szTextureSetFileName$[ebp]
  00ab3	8b ce		 mov	 ecx, esi
  00ab5	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL891@Load:
  00ab8	8a 01		 mov	 al, BYTE PTR [ecx]
  00aba	41		 inc	 ecx
  00abb	84 c0		 test	 al, al
  00abd	75 f9		 jne	 SHORT $LL891@Load
  00abf	2b ca		 sub	 ecx, edx

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ac1	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 97   : 	m_stFileName.assign(c_szTextureSetFileName);

  00ac2	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00ac8	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 97   : 	m_stFileName.assign(c_szTextureSetFileName);

  00ac9	8d 89 ac 00 00
	00		 lea	 ecx, DWORD PTR [ecx+172]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00acf	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 98   : 	NANOEND

  00ad4	eb		 DB	 -21			; ffffffebH
  00ad5	03		 DB	 3
  00ad6	d6		 DB	 -42			; ffffffd6H
  00ad7	d7		 DB	 -41			; ffffffd7H
  00ad8	00		 DB	 0
  00ad9	c6 85 f3 fe ff
	ff 01		 mov	 BYTE PTR $T14[ebp], 1
$LN29@Load:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00ae0	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00ae6	ff 70 04	 push	 DWORD PTR [eax+4]
  00ae9	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _stTokenVectorMap$[ebp]
  00aef	50		 push	 eax
  00af0	8b c8		 mov	 ecx, eax
  00af2	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > > > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00af7	6a 34		 push	 52			; 00000034H
  00af9	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _stTokenVectorMap$[ebp]
  00aff	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 98   : 	NANOEND

  00b04	8a 85 f3 fe ff
	ff		 mov	 al, BYTE PTR $T14[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00b0a	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 100  : }

  00b0d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00b10	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00b17	59		 pop	 ecx
  00b18	5f		 pop	 edi
  00b19	5e		 pop	 esi
  00b1a	5b		 pop	 ebx
  00b1b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b1e	33 cd		 xor	 ecx, ebp
  00b20	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b25	8b e5		 mov	 esp, ebp
  00b27	5d		 pop	 ebp
  00b28	c2 08 00	 ret	 8
$LN594@Load:
  00b2b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN880@Load:
  00b30	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN893@Load:
  00b35	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$0:
  00000	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR _stTokenVectorMap$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$3:
  0000b	8d 4d b4	 lea	 ecx, DWORD PTR $T28[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$37:
  00013	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$5:
  0001e	8d 4d b4	 lea	 ecx, DWORD PTR $T26[ebp]
  00021	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$28:
  00026	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0002c	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@2@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >,void *> > >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$6:
  00031	8d 4d 9c	 lea	 ecx, DWORD PTR _$S1$23[ebp]
  00034	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$7:
  00039	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _$S2$16[ebp]
  0003f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$8:
  00044	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _$S3$17[ebp]
  0004a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$9:
  0004f	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR _$S4$18[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$10:
  0005a	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR _$S5$19[ebp]
  00060	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$11:
  00065	8d 8d 54 ff ff
	ff		 lea	 ecx, DWORD PTR _$S6$20[ebp]
  0006b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$12:
  00070	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _$S7$21[ebp]
  00076	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Load@CTextureSet@@QAE_NPBDM@Z$13:
  0007b	8d 4d 84	 lea	 ecx, DWORD PTR _$S8$22[ebp]
  0007e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
__ehhandler$?Load@CTextureSet@@QAE_NPBDM@Z:
  00088	90		 npad	 1
  00089	90		 npad	 1
  0008a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0008e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00091	8b 8a a0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-352]
  00097	33 c8		 xor	 ecx, eax
  00099	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  000a1	33 c8		 xor	 ecx, eax
  000a3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a8	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Load@CTextureSet@@QAE_NPBDM@Z
  000ad	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Load@CTextureSet@@QAE_NPBDM@Z ENDP			; CTextureSet::Load
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?Create@CTextureSet@@QAEXXZ
_TEXT	SEGMENT
?Create@CTextureSet@@QAEXXZ PROC			; CTextureSet::Create, COMDAT
; _this$ = ecx

; 19   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20   : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer("d:/ymir work/special/error.tga");

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00009	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@PGALBFBK@d?3?1ymir?5work?1special?1error?4tga@
  0000e	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer

; 21   : 	m_ErrorTexture.ImageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  00013	50		 push	 eax
  00014	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00017	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 22   : 	AddEmptyTexture();

  0001c	8b ce		 mov	 ecx, esi
  0001e	5e		 pop	 esi
  0001f	e9 00 00 00 00	 jmp	 ?AddEmptyTexture@CTextureSet@@IAEXXZ ; CTextureSet::AddEmptyTexture
?Create@CTextureSet@@QAEXXZ ENDP			; CTextureSet::Create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?Clear@CTextureSet@@QAEXXZ
_TEXT	SEGMENT
?Clear@CTextureSet@@QAEXXZ PROC				; CTextureSet::Clear, COMDAT
; _this$ = ecx

; 103  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 104  : 	m_ErrorTexture.ImageInstance.Destroy();

  00003	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
  00006	e8 00 00 00 00	 call	 ?Destroy@CGraphicImageInstance@@QAEXXZ ; CGraphicImageInstance::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 105  : 	m_Textures.clear();

  0000e	83 c6 04	 add	 esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00011	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00014	3b c1		 cmp	 eax, ecx
  00016	74 10		 je	 SHORT $LN3@Clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  00018	56		 push	 esi
  00019	51		 push	 ecx
  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@USTerrainTexture@@@std@@@std@@YAXPAUSTerrainTexture@@QAU1@AAV?$allocator@USTerrainTexture@@@0@@Z ; std::_Destroy_range<std::allocator<STerrainTexture> >

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	83 c4 0c	 add	 esp, 12			; 0000000cH
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN3@Clear:
  00028	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 107  : }

  00029	c3		 ret	 0
?Clear@CTextureSet@@QAEXXZ ENDP				; CTextureSet::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ?Initialize@CTextureSet@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CTextureSet@@QAEXXZ PROC			; CTextureSet::Initialize, COMDAT
; _this$ = ecx

; 16   : }

  00000	c2 00 00	 ret	 0
?Initialize@CTextureSet@@QAEXXZ ENDP			; CTextureSet::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ??1CTextureSet@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CTextureSet@@UAE@XZ PROC				; CTextureSet::~CTextureSet, COMDAT
; _this$ = ecx

; 10   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CTextureSet@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextureSet@@6B@

; 11   : 	Clear();

  0002b	e8 00 00 00 00	 call	 ?Clear@CTextureSet@@QAEXXZ ; CTextureSet::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00030	8b 8e c0 00 00
	00		 mov	 ecx, DWORD PTR [esi+192]
  00036	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00039	72 2f		 jb	 SHORT $LN15@CTextureSe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003b	8b 86 ac 00 00
	00		 mov	 eax, DWORD PTR [esi+172]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00041	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00042	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00048	72 16		 jb	 SHORT $LN25@CTextureSe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0004d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00050	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00052	83 c0 fc	 add	 eax, -4			; fffffffcH
  00055	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00058	0f 87 89 00 00
	00		 ja	 $LN53@CTextureSe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005e	8b c2		 mov	 eax, edx
$LN25@CTextureSe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00060	51		 push	 ecx
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8
$LN15@CTextureSe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 21   : 	}

  0006a	8d 4e 2c	 lea	 ecx, DWORD PTR [esi+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0006d	c7 86 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+188], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00077	c7 86 c0 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+192], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00081	c6 86 ac 00 00
	00 00		 mov	 BYTE PTR [esi+172], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 21   : 	}

  00088	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0008d	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  00090	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00093	72 28		 jb	 SHORT $LN46@CTextureSe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00095	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00098	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00099	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009f	72 12		 jb	 SHORT $LN56@CTextureSe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a4	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000a7	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a9	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ac	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000af	77 36		 ja	 SHORT $LN53@CTextureSe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000b1	8b c2		 mov	 eax, edx
$LN56@CTextureSe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000b3	51		 push	 ecx
  000b4	50		 push	 eax
  000b5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000ba	83 c4 08	 add	 esp, 8
$LN46@CTextureSe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 12   : }

  000bd	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  000c0	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  000c7	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000ce	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 12   : }

  000d2	e8 00 00 00 00	 call	 ??1?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::~vector<STerrainTexture,std::allocator<STerrainTexture> >
  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5e		 pop	 esi
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c3		 ret	 0
$LN53@CTextureSe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN63@CTextureSe:
  000ec	cc		 int	 3
  000ed	cc		 int	 3
  000ee	cc		 int	 3
  000ef	cc		 int	 3
  000f0	cc		 int	 3
  000f1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CTextureSet@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CTextureSet@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CTextureSet@@UAE@XZ ENDP				; CTextureSet::~CTextureSet
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp
;	COMDAT ??0CTextureSet@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTextureSet@@QAE@XZ PROC				; CTextureSet::CTextureSet, COMDAT
; _this$ = ecx

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CTextureSet@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CTextureSet@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00036	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0003d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 5    : {

  00044	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  00047	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004e	e8 00 00 00 00	 call	 ??0STerrainTexture@@QAE@XZ ; STerrainTexture::STerrainTexture
  00053	0f 57 c0	 xorps	 xmm0, xmm0

; 7    : }

  00056	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00058	0f 11 86 ac 00
	00 00		 movups	 XMMWORD PTR [esi+172], xmm0

; 4998 :         _My_data._Mysize = 0;

  0005f	c7 86 bc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+188], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00069	c7 86 c0 00 00
	00 0f 00 00 00	 mov	 DWORD PTR [esi+192], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00073	c6 86 ac 00 00
	00 00		 mov	 BYTE PTR [esi+172], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.cpp

; 7    : }

  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00084	59		 pop	 ecx
  00085	5e		 pop	 esi
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CTextureSet@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@USTerrainTexture@@V?$allocator@USTerrainTexture@@@std@@@std@@QAE@XZ ; std::vector<STerrainTexture,std::allocator<STerrainTexture> >::~vector<STerrainTexture,std::allocator<STerrainTexture> >
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$??0CTextureSet@@QAE@XZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CTextureSet@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CTextureSet@@QAE@XZ ENDP				; CTextureSet::CTextureSet
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Ref.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0STerrainTexture@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -24						; size = 4
__Result$1$ = -20					; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0STerrainTexture@@QAE@ABU0@@Z PROC			; STerrainTexture::STerrainTexture, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0STerrainTexture@@QAE@ABU0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx
  00029	89 75 e8	 mov	 DWORD PTR _this$[ebp], esi

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002c	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
  0002f	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00032	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2292 :         const value_type* _Result = _Bx._Buf;

  0003c	8b cf		 mov	 ecx, edi

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2293 :         if (_Large_string_engaged()) {

  00045	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00049	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0004c	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax

; 2292 :         const value_type* _Result = _Bx._Buf;

  0004f	89 7d ec	 mov	 DWORD PTR __Result$1$[ebp], edi

; 2293 :         if (_Large_string_engaged()) {

  00052	72 05		 jb	 SHORT $LN16@STerrainTe

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00054	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00056	89 4d ec	 mov	 DWORD PTR __Result$1$[ebp], ecx
$LN16@STerrainTe:

; 2740 :         if (_Count > max_size()) {

  00059	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0005e	0f 87 48 01 00
	00		 ja	 $LN59@STerrainTe

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00064	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
  0006b	83 f8 10	 cmp	 eax, 16			; 00000010H
  0006e	73 0e		 jae	 SHORT $LN22@STerrainTe

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00070	6a 10		 push	 16			; 00000010H
  00072	51		 push	 ecx
  00073	56		 push	 esi

; 2749 :             _My_data._Mysize = _Count;

  00074	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00077	e8 00 00 00 00	 call	 _memmove

; 2767 :             return;

  0007c	eb 78		 jmp	 SHORT $LN57@STerrainTe
$LN22@STerrainTe:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0007e	8b f8		 mov	 edi, eax
  00080	83 cf 0f	 or	 edi, 15			; 0000000fH
  00083	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00089	76 1a		 jbe	 SHORT $LN29@STerrainTe

; 4885 :             return _Max;

  0008b	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00090	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00095	51		 push	 ecx
  00096	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009b	8b c8		 mov	 ecx, eax
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  000a3	eb 3b		 jmp	 SHORT $LN36@STerrainTe
$LN29@STerrainTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a5	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000aa	3b f9		 cmp	 edi, ecx
  000ac	0f 42 f9	 cmovb	 edi, ecx

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000af	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 10		 jb	 SHORT $LN37@STerrainTe

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c0	8b c8		 mov	 ecx, eax
  000c2	83 c4 04	 add	 esp, 4
  000c5	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  000c8	eb 16		 jmp	 SHORT $LN36@STerrainTe
$LN37@STerrainTe:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ca	85 c9		 test	 ecx, ecx
  000cc	74 10		 je	 SHORT $LN38@STerrainTe

; 77   :         return ::operator new(_Bytes);

  000ce	51		 push	 ecx
  000cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000d4	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  000d6	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000d9	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  000dc	eb 02		 jmp	 SHORT $LN36@STerrainTe
$LN38@STerrainTe:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000de	33 c9		 xor	 ecx, ecx
$LN36@STerrainTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2781 :         _My_data._Mysize = _Count;

  000e0	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000e3	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e4	50		 push	 eax
  000e5	ff 75 ec	 push	 DWORD PTR __Result$1$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000e8	89 0e		 mov	 DWORD PTR [esi], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ea	51		 push	 ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  000eb	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ee	e8 00 00 00 00	 call	 _memcpy
  000f3	8b 7d 08	 mov	 edi, DWORD PTR ___that$[ebp]
$LN57@STerrainTe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Ref.h

; 32   : 		m_pObject = NULL;

  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000fc	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000ff	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], OFFSET ??_7CGraphicImageInstance@@6B@
  00106	0f 10 47 20	 movups	 xmm0, XMMWORD PTR [edi+32]
  0010a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00111	0f 11 46 20	 movups	 XMMWORD PTR [esi+32], xmm0
  00115	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00118	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0011b	89 46 30	 mov	 DWORD PTR [esi+48], eax
  0011e	89 4e 34	 mov	 DWORD PTR [esi+52], ecx
  00121	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 98   : 		m_pObject = pObject;

  00128	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  0012b	89 4e 38	 mov	 DWORD PTR [esi+56], ecx

; 99   : 
; 100  : 		if (m_pObject)

  0012e	85 c9		 test	 ecx, ecx
  00130	74 05		 je	 SHORT $LN52@STerrainTe

; 101  : 		{
; 102  : 			m_pObject->AddReference();

  00132	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN52@STerrainTe:
  00137	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0013a	8b 4f 40	 mov	 ecx, DWORD PTR [edi+64]
  0013d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00140	89 4e 40	 mov	 DWORD PTR [esi+64], ecx
  00143	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00146	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00149	8b 47 48	 mov	 eax, DWORD PTR [edi+72]
  0014c	89 46 48	 mov	 DWORD PTR [esi+72], eax
  0014f	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00152	89 46 4c	 mov	 DWORD PTR [esi+76], eax
  00155	8b 47 50	 mov	 eax, DWORD PTR [edi+80]
  00158	89 46 50	 mov	 DWORD PTR [esi+80], eax
  0015b	8a 47 54	 mov	 al, BYTE PTR [edi+84]
  0015e	88 46 54	 mov	 BYTE PTR [esi+84], al
  00161	0f b7 47 56	 movzx	 eax, WORD PTR [edi+86]
  00165	66 89 46 56	 mov	 WORD PTR [esi+86], ax
  00169	0f b7 47 58	 movzx	 eax, WORD PTR [edi+88]
  0016d	66 89 46 58	 mov	 WORD PTR [esi+88], ax
  00171	8b c6		 mov	 eax, esi
  00173	0f 10 47 5c	 movups	 xmm0, XMMWORD PTR [edi+92]
  00177	0f 11 46 5c	 movups	 XMMWORD PTR [esi+92], xmm0
  0017b	0f 10 47 6c	 movups	 xmm0, XMMWORD PTR [edi+108]
  0017f	0f 11 46 6c	 movups	 XMMWORD PTR [esi+108], xmm0
  00183	0f 10 47 7c	 movups	 xmm0, XMMWORD PTR [edi+124]
  00187	0f 11 46 7c	 movups	 XMMWORD PTR [esi+124], xmm0
  0018b	0f 10 87 8c 00
	00 00		 movups	 xmm0, XMMWORD PTR [edi+140]
  00192	0f 11 86 8c 00
	00 00		 movups	 XMMWORD PTR [esi+140], xmm0
  00199	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0019c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001a3	59		 pop	 ecx
  001a4	5f		 pop	 edi
  001a5	5e		 pop	 esi
  001a6	8b e5		 mov	 esp, ebp
  001a8	5d		 pop	 ebp
  001a9	c2 04 00	 ret	 4
$LN59@STerrainTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2741 :             _Xlen_string(); // result too long

  001ac	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@STerrainTe:
  001b1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0STerrainTexture@@QAE@ABU0@@Z$0:
  00000	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0STerrainTexture@@QAE@ABU0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0STerrainTexture@@QAE@ABU0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0STerrainTexture@@QAE@ABU0@@Z ENDP			; STerrainTexture::STerrainTexture
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
;	COMDAT ??1STerrainTexture@@QAE@XZ
_TEXT	SEGMENT
??1STerrainTexture@@QAE@XZ PROC				; STerrainTexture::~STerrainTexture, COMDAT
; _this$ = ecx

; 20   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 21   : 	}

  00003	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00006	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0000b	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00011	72 27		 jb	 SHORT $LN15@STerrainTe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00015	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00016	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001c	72 12		 jb	 SHORT $LN25@STerrainTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00021	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00024	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00026	83 c0 fc	 add	 eax, -4			; fffffffcH
  00029	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002c	77 1f		 ja	 SHORT $LN22@STerrainTe

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002e	8b c2		 mov	 eax, edx
$LN25@STerrainTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@STerrainTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00041	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00048	c6 06 00	 mov	 BYTE PTR [esi], 0
  0004b	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 21   : 	}

  0004c	c3		 ret	 0
$LN22@STerrainTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@STerrainTe:
  00052	cc		 int	 3
??1STerrainTexture@@QAE@XZ ENDP				; STerrainTexture::~STerrainTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h
;	COMDAT ??0STerrainTexture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0STerrainTexture@@QAE@XZ PROC				; STerrainTexture::STerrainTexture, COMDAT
; _this$ = ecx

; 16   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0STerrainTexture@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002c	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0002f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00036	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4998 :         _My_data._Mysize = 0;

  0003d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004b	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\PRTerrainLib\TextureSet.h

; 16   : 	{

  0004e	8d 4e 1c	 lea	 ecx, DWORD PTR [esi+28]
  00051	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00058	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005f	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  00064	33 c0		 xor	 eax, eax
  00066	c7 46 44 00 00
	80 40		 mov	 DWORD PTR [esi+68], 1082130432 ; 40800000H
  0006d	89 46 56	 mov	 DWORD PTR [esi+86], eax

; 17   : 	}

  00070	8b c6		 mov	 eax, esi
  00072	c7 46 48 00 00
	80 40		 mov	 DWORD PTR [esi+72], 1082130432 ; 40800000H
  00079	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00080	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00087	c6 46 54 01	 mov	 BYTE PTR [esi+84], 1
  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	5e		 pop	 esi
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0STerrainTexture@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0STerrainTexture@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0STerrainTexture@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0STerrainTexture@@QAE@XZ ENDP				; STerrainTexture::STerrainTexture
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicImageInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicImageInstance@@UAEPAXI@Z PROC		; CGraphicImageInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 28		 push	 40			; 00000028H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicImageInstance@@UAEPAXI@Z ENDP		; CGraphicImageInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  00006	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00007	8b 5d 14	 mov	 ebx, DWORD PTR __Right_size$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000a	56		 push	 esi

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  0000b	8b 75 10	 mov	 esi, DWORD PTR __Right$[ebp]

; 600  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

  0000e	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  0000f	8b 7d 0c	 mov	 edi, DWORD PTR __Left_size$[ebp]
  00012	3b df		 cmp	 ebx, edi
  00014	8b cf		 mov	 ecx, edi
  00016	0f 42 cb	 cmovb	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00019	83 e9 04	 sub	 ecx, 4
  0001c	72 13		 jb	 SHORT $LN12@Traits_com
  0001e	66 90		 npad	 2
$LL13@Traits_com:
  00020	8b 02		 mov	 eax, DWORD PTR [edx]
  00022	3b 06		 cmp	 eax, DWORD PTR [esi]
  00024	75 10		 jne	 SHORT $LN11@Traits_com
  00026	83 c2 04	 add	 edx, 4
  00029	83 c6 04	 add	 esi, 4
  0002c	83 e9 04	 sub	 ecx, 4
  0002f	73 ef		 jae	 SHORT $LL13@Traits_com
$LN12@Traits_com:
  00031	83 f9 fc	 cmp	 ecx, -4			; fffffffcH
  00034	74 34		 je	 SHORT $LN10@Traits_com
$LN11@Traits_com:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	3a 06		 cmp	 al, BYTE PTR [esi]
  0003a	75 27		 jne	 SHORT $LN14@Traits_com
  0003c	83 f9 fd	 cmp	 ecx, -3			; fffffffdH
  0003f	74 29		 je	 SHORT $LN10@Traits_com
  00041	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00044	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  00047	75 1a		 jne	 SHORT $LN14@Traits_com
  00049	83 f9 fe	 cmp	 ecx, -2			; fffffffeH
  0004c	74 1c		 je	 SHORT $LN10@Traits_com
  0004e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00051	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00054	75 0d		 jne	 SHORT $LN14@Traits_com
  00056	83 f9 ff	 cmp	 ecx, -1
  00059	74 0f		 je	 SHORT $LN10@Traits_com
  0005b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0005e	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00061	74 07		 je	 SHORT $LN10@Traits_com
$LN14@Traits_com:
  00063	1b c0		 sbb	 eax, eax
  00065	83 c8 01	 or	 eax, 1
  00068	eb 02		 jmp	 SHORT $LN15@Traits_com
$LN10@Traits_com:
  0006a	33 c0		 xor	 eax, eax
$LN15@Traits_com:

; 601  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 602  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));
; 603  : 
; 604  :     if (_Ans != 0) {

  0006c	85 c0		 test	 eax, eax
  0006e	75 10		 jne	 SHORT $LN1@Traits_com

; 605  :         return _Ans;
; 606  :     }
; 607  : 
; 608  :     if (_Left_size < _Right_size) {

  00070	3b df		 cmp	 ebx, edi
  00072	76 08		 jbe	 SHORT $LN16@Traits_com

; 613  :         return 1;
; 614  :     }
; 615  : 
; 616  :     return 0;
; 617  : }

  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	83 c8 ff	 or	 eax, -1
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN16@Traits_com:

; 609  :         return -1;
; 610  :     }
; 611  : 
; 612  :     if (_Left_size > _Right_size) {

  0007c	1b c0		 sbb	 eax, eax
  0007e	f7 d8		 neg	 eax
$LN1@Traits_com:

; 613  :         return 1;
; 614  :     }
; 615  : 
; 616  :     return 0;
; 617  : }

  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	0f 84 a6 00 00
	00		 je	 $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000e	53		 push	 ebx
  0000f	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00012	3b f3		 cmp	 esi, ebx
  00014	74 47		 je	 SHORT $LN8@vector
$LL9@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00016	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00019	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0001c	72 27		 jb	 SHORT $LN28@vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001e	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00020	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00021	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00027	72 12		 jb	 SHORT $LN38@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00029	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	83 c0 fc	 add	 eax, -4			; fffffffcH
  00034	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00037	77 7e		 ja	 SHORT $LN58@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00039	8b c2		 mov	 eax, edx
$LN38@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003b	51		 push	 ecx
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00042	83 c4 08	 add	 esp, 8
$LN28@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00045	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0004c	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00053	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00056	83 c6 18	 add	 esi, 24			; 00000018H
  00059	3b f3		 cmp	 esi, ebx
  0005b	75 b9		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0005d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00060	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00065	8b 37		 mov	 esi, DWORD PTR [edi]
  00067	2b ce		 sub	 ecx, esi
  00069	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0006b	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0006c	c1 fa 02	 sar	 edx, 2
  0006f	8b c2		 mov	 eax, edx
  00071	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00074	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00076	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00079	c1 e1 03	 shl	 ecx, 3

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00082	72 12		 jb	 SHORT $LN61@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00084	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00087	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008a	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0008f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00092	77 23		 ja	 SHORT $LN58@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00094	8b f2		 mov	 esi, edx
$LN61@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00096	51		 push	 ecx
  00097	56		 push	 esi
  00098	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0009d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000a3	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000a6	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  000ad	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  000b4	5f		 pop	 edi

; 835  :     }

  000b5	5e		 pop	 esi
  000b6	c3		 ret	 0
$LN58@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b7	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN69@vector:
  000bc	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3528 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3529 :         // assign [_Ptr, _Ptr + _Count)
; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2283 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3531 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3532 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3534 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4903 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4885 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4889 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 77   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3539 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2674 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 415  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2740 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memmove

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00054	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4885 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN42@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN42@basic_stri
$LN30@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN42@basic_stri
$LN31@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN42@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN40@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00003	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 0c	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 08	 push	 DWORD PTR __Stream$[ebp]
  0000f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00014	ff 70 04	 push	 DWORD PTR [eax+4]
  00017	ff 30		 push	 DWORD PTR [eax]
  00019	e8 00 00 00 00	 call	 ___stdio_common_vfprintf
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);
; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);
; 842  :         __crt_va_end(_ArgList);
; 843  :         return _Result;
; 844  :     }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
