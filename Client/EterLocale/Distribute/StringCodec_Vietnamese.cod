; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\Distribute\StringCodec_Vietnamese.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z	; EL_String_Decode_Vietnamese
PUBLIC	?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z	; EL_String_Encode_Vietnamese
_DATA	SEGMENT
?cp1258_to_unicode@@3PA_WA DW 00H			; cp1258_to_unicode
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	05aH
	DW	05bH
	DW	05cH
	DW	05dH
	DW	05eH
	DW	05fH
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	020acH
	DW	081H
	DW	0201aH
	DW	0192H
	DW	0201eH
	DW	02026H
	DW	02020H
	DW	02021H
	DW	02c6H
	DW	02030H
	DW	08aH
	DW	02039H
	DW	0152H
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	02018H
	DW	02019H
	DW	0201cH
	DW	0201dH
	DW	02022H
	DW	02013H
	DW	02014H
	DW	02dcH
	DW	02122H
	DW	09aH
	DW	0203aH
	DW	0153H
	DW	09dH
	DW	09eH
	DW	0178H
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0aaH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0aeH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0baH
	DW	0bbH
	DW	0bcH
	DW	0bdH
	DW	0beH
	DW	0bfH
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0102H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0300H
	DW	0cdH
	DW	0ceH
	DW	0cfH
	DW	0110H
	DW	0d1H
	DW	0309H
	DW	0d3H
	DW	0d4H
	DW	01a0H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0daH
	DW	0dbH
	DW	0dcH
	DW	01afH
	DW	0303H
	DW	0dfH
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0103H
	DW	0e4H
	DW	0e5H
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0301H
	DW	0edH
	DW	0eeH
	DW	0efH
	DW	0111H
	DW	0f1H
	DW	0323H
	DW	0f3H
	DW	0f4H
	DW	01a1H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	01b0H
	DW	020abH
	DW	0ffH
?cp1258_composed_table@@3PAY04_WA DW 0c1H		; cp1258_composed_table
	DW	0c0H
	DW	01ea2H
	DW	0c3H
	DW	01ea0H
	DW	0e1H
	DW	0e0H
	DW	01ea3H
	DW	0e3H
	DW	01ea1H
	DW	01eaeH
	DW	01eb0H
	DW	01eb2H
	DW	01eb4H
	DW	01eb6H
	DW	01eafH
	DW	01eb1H
	DW	01eb3H
	DW	01eb5H
	DW	01eb7H
	DW	01ea4H
	DW	01ea6H
	DW	01ea8H
	DW	01eaaH
	DW	01eacH
	DW	01ea5H
	DW	01ea7H
	DW	01ea9H
	DW	01eabH
	DW	01eadH
	DW	0c9H
	DW	0c8H
	DW	01ebaH
	DW	01ebcH
	DW	01eb8H
	DW	0e9H
	DW	0e8H
	DW	01ebbH
	DW	01ebdH
	DW	01eb9H
	DW	01ebeH
	DW	01ec0H
	DW	01ec2H
	DW	01ec4H
	DW	01ec6H
	DW	01ebfH
	DW	01ec1H
	DW	01ec3H
	DW	01ec5H
	DW	01ec7H
	DW	0cdH
	DW	0ccH
	DW	01ec8H
	DW	0128H
	DW	01ecaH
	DW	0edH
	DW	0ecH
	DW	01ec9H
	DW	0129H
	DW	01ecbH
	DW	0d3H
	DW	0d2H
	DW	01eceH
	DW	0d5H
	DW	01eccH
	DW	0f3H
	DW	0f2H
	DW	01ecfH
	DW	0f5H
	DW	01ecdH
	DW	01ed0H
	DW	01ed2H
	DW	01ed4H
	DW	01ed6H
	DW	01ed8H
	DW	01ed1H
	DW	01ed3H
	DW	01ed5H
	DW	01ed7H
	DW	01ed9H
	DW	01edaH
	DW	01edcH
	DW	01edeH
	DW	01ee0H
	DW	01ee2H
	DW	01edbH
	DW	01eddH
	DW	01edfH
	DW	01ee1H
	DW	01ee3H
	DW	0daH
	DW	0d9H
	DW	01ee6H
	DW	0168H
	DW	01ee4H
	DW	0faH
	DW	0f9H
	DW	01ee7H
	DW	0169H
	DW	01ee5H
	DW	01ee8H
	DW	01eeaH
	DW	01eecH
	DW	01eeeH
	DW	01ef0H
	DW	01ee9H
	DW	01eebH
	DW	01eedH
	DW	01eefH
	DW	01ef1H
	DW	0ddH
	DW	01ef2H
	DW	01ef6H
	DW	01ef8H
	DW	01ef4H
	DW	0fdH
	DW	01ef3H
	DW	01ef7H
	DW	01ef9H
	DW	01ef5H
_DATA	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?DecomposeTone@@YA_N_WPAD@Z
_TEXT	SEGMENT
_input$ = 8						; size = 2
_tone$ = 12						; size = 4
?DecomposeTone@@YA_N_WPAD@Z PROC			; DecomposeTone, COMDAT

; 453  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 454  : 	switch (input)

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _input$[ebp]
  00007	3d a0 1e 00 00	 cmp	 eax, 7840		; 00001ea0H
  0000c	77 1c		 ja	 SHORT $LN125@DecomposeT
  0000e	74 5a		 je	 SHORT $LN100@DecomposeT
  00010	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  00015	3d a9 00 00 00	 cmp	 eax, 169		; 000000a9H
  0001a	77 58		 ja	 SHORT $LN2@DecomposeT
  0001c	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN126@DecomposeT[eax]
  00023	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN127@DecomposeT[eax*4]
$LN125@DecomposeT:
  0002a	2d a1 1e 00 00	 sub	 eax, 7841		; 00001ea1H
  0002f	83 f8 58	 cmp	 eax, 88			; 00000058H
  00032	77 40		 ja	 SHORT $LN2@DecomposeT
  00034	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN128@DecomposeT[eax]
  0003b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN129@DecomposeT[eax*4]
$LN4@DecomposeT:

; 455  : 	{
; 456  : 	case 0x00c1:
; 457  : 	case 0x00e1:
; 458  : 	case 0x1eae:
; 459  : 	case 0x1eaf:
; 460  : 	case 0x1ea4:
; 461  : 	case 0x1ea5:
; 462  : 	case 0x00c9:
; 463  : 	case 0x00e9:
; 464  : 	case 0x1ebe:
; 465  : 	case 0x1ebf:
; 466  : 	case 0x00cd:
; 467  : 	case 0x00ed:
; 468  : 	case 0x00d3:
; 469  : 	case 0x00f3:
; 470  : 	case 0x1ed0:
; 471  : 	case 0x1ed1:
; 472  : 	case 0x1eda:
; 473  : 	case 0x1edb:
; 474  : 	case 0x00da:
; 475  : 	case 0x00fa:
; 476  : 	case 0x1ee8:
; 477  : 	case 0x1ee9:
; 478  : 	case 0x00dd:
; 479  : 	case 0x00fd:
; 480  : 		*tone = (char)0xec;

  00042	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00045	c6 00 ec	 mov	 BYTE PTR [eax], -20	; ffffffecH

; 481  : 		return true;

  00048	b0 01		 mov	 al, 1

; 589  : }

  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
$LN28@DecomposeT:

; 482  : 	case 0x00c0:
; 483  : 	case 0x00e0:
; 484  : 	case 0x1eb0:
; 485  : 	case 0x1eb1:
; 486  : 	case 0x1ea6:
; 487  : 	case 0x1ea7:
; 488  : 	case 0x00c8:
; 489  : 	case 0x00e8:
; 490  : 	case 0x1ec0:
; 491  : 	case 0x1ec1:
; 492  : 	case 0x00cc:
; 493  : 	case 0x00ec:
; 494  : 	case 0x00d2:
; 495  : 	case 0x00f2:
; 496  : 	case 0x1ed2:
; 497  : 	case 0x1ed3:
; 498  : 	case 0x1edc:
; 499  : 	case 0x1edd:
; 500  : 	case 0x00d9:
; 501  : 	case 0x00f9:
; 502  : 	case 0x1eea:
; 503  : 	case 0x1eeb:
; 504  : 	case 0x1ef2:
; 505  : 	case 0x1ef3:
; 506  : 		*tone = (char)0xcc;

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  0004f	c6 00 cc	 mov	 BYTE PTR [eax], -52	; ffffffccH

; 507  : 		return true;

  00052	b0 01		 mov	 al, 1

; 589  : }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN52@DecomposeT:

; 508  : 	case 0x1ea2:
; 509  : 	case 0x1ea3:
; 510  : 	case 0x1eb2:
; 511  : 	case 0x1eb3:
; 512  : 	case 0x1ea8:
; 513  : 	case 0x1ea9:
; 514  : 	case 0x1eba:
; 515  : 	case 0x1ebb:
; 516  : 	case 0x1ec2:
; 517  : 	case 0x1ec3:
; 518  : 	case 0x1ec8:
; 519  : 	case 0x1ec9:
; 520  : 	case 0x1ece:
; 521  : 	case 0x1ecf:
; 522  : 	case 0x1ed4:
; 523  : 	case 0x1ed5:
; 524  : 	case 0x1ede:
; 525  : 	case 0x1edf:
; 526  : 	case 0x1ee6:
; 527  : 	case 0x1ee7:
; 528  : 	case 0x1eec:
; 529  : 	case 0x1eed:
; 530  : 	case 0x1ef6:
; 531  : 	case 0x1ef7:
; 532  : 		*tone = (char)0xd2;

  00056	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00059	c6 00 d2	 mov	 BYTE PTR [eax], -46	; ffffffd2H

; 533  : 		return true;

  0005c	b0 01		 mov	 al, 1

; 589  : }

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN76@DecomposeT:

; 534  : 	case 0x00c3:
; 535  : 	case 0x00e3:
; 536  : 	case 0x1eb4:
; 537  : 	case 0x1eb5:
; 538  : 	case 0x1eaa:
; 539  : 	case 0x1eab:
; 540  : 	case 0x1ebc:
; 541  : 	case 0x1ebd:
; 542  : 	case 0x1ec4:
; 543  : 	case 0x1ec5:
; 544  : 	case 0x0128:
; 545  : 	case 0x0129:
; 546  : 	case 0x00d5:
; 547  : 	case 0x00f5:
; 548  : 	case 0x1ed6:
; 549  : 	case 0x1ed7:
; 550  : 	case 0x1ee0:
; 551  : 	case 0x1ee1:
; 552  : 	case 0x0169:
; 553  : 	case 0x0168:
; 554  : 	case 0x1eee:
; 555  : 	case 0x1eef:
; 556  : 	case 0x1ef8:
; 557  : 	case 0x1ef9:
; 558  : 		*tone = (char)0xde;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  00063	c6 00 de	 mov	 BYTE PTR [eax], -34	; ffffffdeH

; 559  : 		return true;

  00066	b0 01		 mov	 al, 1

; 589  : }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN100@DecomposeT:

; 560  : 	case 0x1ea0:
; 561  : 	case 0x1ea1:
; 562  : 	case 0x1eb6:
; 563  : 	case 0x1eb7:
; 564  : 	case 0x1eac:
; 565  : 	case 0x1ead:
; 566  : 	case 0x1eb8:
; 567  : 	case 0x1eb9:
; 568  : 	case 0x1ec6:
; 569  : 	case 0x1ec7:
; 570  : 	case 0x1eca:
; 571  : 	case 0x1ecb:
; 572  : 	case 0x1ecc:
; 573  : 	case 0x1ecd:
; 574  : 	case 0x1ed8:
; 575  : 	case 0x1ed9:
; 576  : 	case 0x1ee2:
; 577  : 	case 0x1ee3:
; 578  : 	case 0x1ee4:
; 579  : 	case 0x1ee5:
; 580  : 	case 0x1ef0:
; 581  : 	case 0x1ef1:
; 582  : 	case 0x1ef4:
; 583  : 	case 0x1ef5:
; 584  : 		*tone = (char)0xf2;

  0006a	8b 45 0c	 mov	 eax, DWORD PTR _tone$[ebp]
  0006d	c6 00 f2	 mov	 BYTE PTR [eax], -14	; fffffff2H

; 585  : 		return true;

  00070	b0 01		 mov	 al, 1

; 589  : }

  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN2@DecomposeT:

; 586  : 	}
; 587  : 
; 588  : 	return false;

  00074	32 c0		 xor	 al, al

; 589  : }

  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
$LN127@DecomposeT:
  00078	00 00 00 00	 DD	 $LN28@DecomposeT
  0007c	00 00 00 00	 DD	 $LN4@DecomposeT
  00080	00 00 00 00	 DD	 $LN76@DecomposeT
  00084	00 00 00 00	 DD	 $LN2@DecomposeT
$LN126@DecomposeT:
  00088	00		 DB	 0
  00089	01		 DB	 1
  0008a	03		 DB	 3
  0008b	02		 DB	 2
  0008c	03		 DB	 3
  0008d	03		 DB	 3
  0008e	03		 DB	 3
  0008f	03		 DB	 3
  00090	00		 DB	 0
  00091	01		 DB	 1
  00092	03		 DB	 3
  00093	03		 DB	 3
  00094	00		 DB	 0
  00095	01		 DB	 1
  00096	03		 DB	 3
  00097	03		 DB	 3
  00098	03		 DB	 3
  00099	03		 DB	 3
  0009a	00		 DB	 0
  0009b	01		 DB	 1
  0009c	03		 DB	 3
  0009d	02		 DB	 2
  0009e	03		 DB	 3
  0009f	03		 DB	 3
  000a0	03		 DB	 3
  000a1	00		 DB	 0
  000a2	01		 DB	 1
  000a3	03		 DB	 3
  000a4	03		 DB	 3
  000a5	01		 DB	 1
  000a6	03		 DB	 3
  000a7	03		 DB	 3
  000a8	00		 DB	 0
  000a9	01		 DB	 1
  000aa	03		 DB	 3
  000ab	02		 DB	 2
  000ac	03		 DB	 3
  000ad	03		 DB	 3
  000ae	03		 DB	 3
  000af	03		 DB	 3
  000b0	00		 DB	 0
  000b1	01		 DB	 1
  000b2	03		 DB	 3
  000b3	03		 DB	 3
  000b4	00		 DB	 0
  000b5	01		 DB	 1
  000b6	03		 DB	 3
  000b7	03		 DB	 3
  000b8	03		 DB	 3
  000b9	03		 DB	 3
  000ba	00		 DB	 0
  000bb	01		 DB	 1
  000bc	03		 DB	 3
  000bd	02		 DB	 2
  000be	03		 DB	 3
  000bf	03		 DB	 3
  000c0	03		 DB	 3
  000c1	00		 DB	 0
  000c2	01		 DB	 1
  000c3	03		 DB	 3
  000c4	03		 DB	 3
  000c5	01		 DB	 1
  000c6	03		 DB	 3
  000c7	03		 DB	 3
  000c8	03		 DB	 3
  000c9	03		 DB	 3
  000ca	03		 DB	 3
  000cb	03		 DB	 3
  000cc	03		 DB	 3
  000cd	03		 DB	 3
  000ce	03		 DB	 3
  000cf	03		 DB	 3
  000d0	03		 DB	 3
  000d1	03		 DB	 3
  000d2	03		 DB	 3
  000d3	03		 DB	 3
  000d4	03		 DB	 3
  000d5	03		 DB	 3
  000d6	03		 DB	 3
  000d7	03		 DB	 3
  000d8	03		 DB	 3
  000d9	03		 DB	 3
  000da	03		 DB	 3
  000db	03		 DB	 3
  000dc	03		 DB	 3
  000dd	03		 DB	 3
  000de	03		 DB	 3
  000df	03		 DB	 3
  000e0	03		 DB	 3
  000e1	03		 DB	 3
  000e2	03		 DB	 3
  000e3	03		 DB	 3
  000e4	03		 DB	 3
  000e5	03		 DB	 3
  000e6	03		 DB	 3
  000e7	03		 DB	 3
  000e8	03		 DB	 3
  000e9	03		 DB	 3
  000ea	03		 DB	 3
  000eb	03		 DB	 3
  000ec	03		 DB	 3
  000ed	03		 DB	 3
  000ee	03		 DB	 3
  000ef	03		 DB	 3
  000f0	02		 DB	 2
  000f1	02		 DB	 2
  000f2	03		 DB	 3
  000f3	03		 DB	 3
  000f4	03		 DB	 3
  000f5	03		 DB	 3
  000f6	03		 DB	 3
  000f7	03		 DB	 3
  000f8	03		 DB	 3
  000f9	03		 DB	 3
  000fa	03		 DB	 3
  000fb	03		 DB	 3
  000fc	03		 DB	 3
  000fd	03		 DB	 3
  000fe	03		 DB	 3
  000ff	03		 DB	 3
  00100	03		 DB	 3
  00101	03		 DB	 3
  00102	03		 DB	 3
  00103	03		 DB	 3
  00104	03		 DB	 3
  00105	03		 DB	 3
  00106	03		 DB	 3
  00107	03		 DB	 3
  00108	03		 DB	 3
  00109	03		 DB	 3
  0010a	03		 DB	 3
  0010b	03		 DB	 3
  0010c	03		 DB	 3
  0010d	03		 DB	 3
  0010e	03		 DB	 3
  0010f	03		 DB	 3
  00110	03		 DB	 3
  00111	03		 DB	 3
  00112	03		 DB	 3
  00113	03		 DB	 3
  00114	03		 DB	 3
  00115	03		 DB	 3
  00116	03		 DB	 3
  00117	03		 DB	 3
  00118	03		 DB	 3
  00119	03		 DB	 3
  0011a	03		 DB	 3
  0011b	03		 DB	 3
  0011c	03		 DB	 3
  0011d	03		 DB	 3
  0011e	03		 DB	 3
  0011f	03		 DB	 3
  00120	03		 DB	 3
  00121	03		 DB	 3
  00122	03		 DB	 3
  00123	03		 DB	 3
  00124	03		 DB	 3
  00125	03		 DB	 3
  00126	03		 DB	 3
  00127	03		 DB	 3
  00128	03		 DB	 3
  00129	03		 DB	 3
  0012a	03		 DB	 3
  0012b	03		 DB	 3
  0012c	03		 DB	 3
  0012d	03		 DB	 3
  0012e	03		 DB	 3
  0012f	03		 DB	 3
  00130	02		 DB	 2
  00131	02		 DB	 2
  00132	66 90		 npad	 2
$LN129@DecomposeT:
  00134	00 00 00 00	 DD	 $LN100@DecomposeT
  00138	00 00 00 00	 DD	 $LN52@DecomposeT
  0013c	00 00 00 00	 DD	 $LN4@DecomposeT
  00140	00 00 00 00	 DD	 $LN28@DecomposeT
  00144	00 00 00 00	 DD	 $LN76@DecomposeT
$LN128@DecomposeT:
  00148	00		 DB	 0
  00149	01		 DB	 1
  0014a	01		 DB	 1
  0014b	02		 DB	 2
  0014c	02		 DB	 2
  0014d	03		 DB	 3
  0014e	03		 DB	 3
  0014f	01		 DB	 1
  00150	01		 DB	 1
  00151	04		 DB	 4
  00152	04		 DB	 4
  00153	00		 DB	 0
  00154	00		 DB	 0
  00155	02		 DB	 2
  00156	02		 DB	 2
  00157	03		 DB	 3
  00158	03		 DB	 3
  00159	01		 DB	 1
  0015a	01		 DB	 1
  0015b	04		 DB	 4
  0015c	04		 DB	 4
  0015d	00		 DB	 0
  0015e	00		 DB	 0
  0015f	00		 DB	 0
  00160	00		 DB	 0
  00161	01		 DB	 1
  00162	01		 DB	 1
  00163	04		 DB	 4
  00164	04		 DB	 4
  00165	02		 DB	 2
  00166	02		 DB	 2
  00167	03		 DB	 3
  00168	03		 DB	 3
  00169	01		 DB	 1
  0016a	01		 DB	 1
  0016b	04		 DB	 4
  0016c	04		 DB	 4
  0016d	00		 DB	 0
  0016e	00		 DB	 0
  0016f	01		 DB	 1
  00170	01		 DB	 1
  00171	00		 DB	 0
  00172	00		 DB	 0
  00173	00		 DB	 0
  00174	00		 DB	 0
  00175	01		 DB	 1
  00176	01		 DB	 1
  00177	02		 DB	 2
  00178	02		 DB	 2
  00179	03		 DB	 3
  0017a	03		 DB	 3
  0017b	01		 DB	 1
  0017c	01		 DB	 1
  0017d	04		 DB	 4
  0017e	04		 DB	 4
  0017f	00		 DB	 0
  00180	00		 DB	 0
  00181	02		 DB	 2
  00182	02		 DB	 2
  00183	03		 DB	 3
  00184	03		 DB	 3
  00185	01		 DB	 1
  00186	01		 DB	 1
  00187	04		 DB	 4
  00188	04		 DB	 4
  00189	00		 DB	 0
  0018a	00		 DB	 0
  0018b	00		 DB	 0
  0018c	00		 DB	 0
  0018d	01		 DB	 1
  0018e	01		 DB	 1
  0018f	02		 DB	 2
  00190	02		 DB	 2
  00191	03		 DB	 3
  00192	03		 DB	 3
  00193	01		 DB	 1
  00194	01		 DB	 1
  00195	04		 DB	 4
  00196	04		 DB	 4
  00197	00		 DB	 0
  00198	00		 DB	 0
  00199	03		 DB	 3
  0019a	03		 DB	 3
  0019b	00		 DB	 0
  0019c	00		 DB	 0
  0019d	01		 DB	 1
  0019e	01		 DB	 1
  0019f	04		 DB	 4
  001a0	04		 DB	 4
?DecomposeTone@@YA_N_WPAD@Z ENDP			; DecomposeTone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?DecomposeLetter@@YA_N_WPAD@Z
_TEXT	SEGMENT
_input$ = 8						; size = 2
_letter$ = 12						; size = 4
?DecomposeLetter@@YA_N_WPAD@Z PROC			; DecomposeLetter, COMDAT

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 239  : 	switch (input)

  00003	66 8b 4d 08	 mov	 cx, WORD PTR _input$[ebp]
  00007	0f b7 c1	 movzx	 eax, cx
  0000a	3d a0 1e 00 00	 cmp	 eax, 7840		; 00001ea0H
  0000f	77 34		 ja	 SHORT $LN137@DecomposeL
  00011	74 5f		 je	 SHORT $LN4@DecomposeL
  00013	2d c0 00 00 00	 sub	 eax, 192		; 000000c0H
  00018	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  0001d	0f 87 4d 01 00
	00		 ja	 $LN2@DecomposeL
  00023	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN139@DecomposeL[eax]
  0002a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN140@DecomposeL[eax*4]
$LN126@DecomposeL:

; 408  : 		return true;
; 409  : 	case 0x0102:
; 410  : 		*letter = (char)0xc3;
; 411  : 		return true;
; 412  : 	case 0x0103:
; 413  : 		*letter = (char)0xe3;
; 414  : 		return true;
; 415  : 	case 0x0110:
; 416  : 		*letter = (char)0xd0;

  00031	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00034	c6 00 d0	 mov	 BYTE PTR [eax], -48	; ffffffd0H

; 450  : }

  00037	b0 01		 mov	 al, 1
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN127@DecomposeL:

; 417  : 		return true;
; 418  : 	case 0x0111:
; 419  : 		*letter = (char)0xf0;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0003e	c6 00 f0	 mov	 BYTE PTR [eax], -16	; fffffff0H

; 450  : }

  00041	b0 01		 mov	 al, 1
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
$LN137@DecomposeL:

; 239  : 	switch (input)

  00045	3d 1c 20 00 00	 cmp	 eax, 8220		; 0000201cH
  0004a	0f 87 12 01 00
	00		 ja	 $LN138@DecomposeL
  00050	0f 84 3b 01 00
	00		 je	 $LN134@DecomposeL
  00056	2d a1 1e 00 00	 sub	 eax, 7841		; 00001ea1H
  0005b	83 f8 58	 cmp	 eax, 88			; 00000058H
  0005e	0f 87 0c 01 00
	00		 ja	 $LN2@DecomposeL
  00064	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN141@DecomposeL[eax]
  0006b	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN142@DecomposeL[eax*4]
$LN4@DecomposeL:

; 240  : 	{
; 241  : 	case 0x00c1:
; 242  : 	case 0x00c0:
; 243  : 	case 0x1ea2:
; 244  : 	case 0x00c3:
; 245  : 	case 0x1ea0:
; 246  : 		*letter = 'A';

  00072	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00075	c6 00 41	 mov	 BYTE PTR [eax], 65	; 00000041H

; 450  : }

  00078	b0 01		 mov	 al, 1
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
$LN9@DecomposeL:

; 247  : 		return true;
; 248  : 	case 0x00e1:
; 249  : 	case 0x00e0:
; 250  : 	case 0x1ea3:
; 251  : 	case 0x00e3:
; 252  : 	case 0x1ea1:
; 253  : 		*letter = 'a';

  0007c	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0007f	c6 00 61	 mov	 BYTE PTR [eax], 97	; 00000061H

; 450  : }

  00082	b0 01		 mov	 al, 1
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN14@DecomposeL:

; 254  : 		return true;
; 255  : 	case 0x1eae:
; 256  : 	case 0x1eb0:
; 257  : 	case 0x1eb2:
; 258  : 	case 0x1eb4:
; 259  : 	case 0x1eb6:
; 260  : 		*letter = (char)0xc3;

  00086	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00089	c6 00 c3	 mov	 BYTE PTR [eax], -61	; ffffffc3H

; 450  : }

  0008c	b0 01		 mov	 al, 1
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN19@DecomposeL:

; 261  : 		return true;
; 262  : 	case 0x1eaf:
; 263  : 	case 0x1eb1:
; 264  : 	case 0x1eb3:
; 265  : 	case 0x1eb5:
; 266  : 	case 0x1eb7:
; 267  : 		*letter = (char)0xe3;

  00090	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00093	c6 00 e3	 mov	 BYTE PTR [eax], -29	; ffffffe3H

; 450  : }

  00096	b0 01		 mov	 al, 1
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN24@DecomposeL:

; 268  : 		return true;
; 269  : 	case 0x1ea4:
; 270  : 	case 0x1ea6:
; 271  : 	case 0x1ea8:
; 272  : 	case 0x1eaa:
; 273  : 	case 0x1eac:
; 274  : 		*letter = (char)0xc2;

  0009a	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0009d	c6 00 c2	 mov	 BYTE PTR [eax], -62	; ffffffc2H

; 450  : }

  000a0	b0 01		 mov	 al, 1
  000a2	5d		 pop	 ebp
  000a3	c3		 ret	 0
$LN29@DecomposeL:

; 275  : 		return true;
; 276  : 	case 0x1ea5:
; 277  : 	case 0x1ea7:
; 278  : 	case 0x1ea9:
; 279  : 	case 0x1eab:
; 280  : 	case 0x1ead:
; 281  : 		*letter = (char)0xe2;

  000a4	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000a7	c6 00 e2	 mov	 BYTE PTR [eax], -30	; ffffffe2H

; 450  : }

  000aa	b0 01		 mov	 al, 1
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
$LN34@DecomposeL:

; 282  : 		return true;
; 283  : 	case 0x00c9:
; 284  : 	case 0x00c8:
; 285  : 	case 0x1eba:
; 286  : 	case 0x1ebc:
; 287  : 	case 0x1eb8:
; 288  : 		*letter = (char)'E';

  000ae	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000b1	c6 00 45	 mov	 BYTE PTR [eax], 69	; 00000045H

; 450  : }

  000b4	b0 01		 mov	 al, 1
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
$LN39@DecomposeL:

; 289  : 		return true;
; 290  : 	case 0x00e9:
; 291  : 	case 0x00e8:
; 292  : 	case 0x1ebb:
; 293  : 	case 0x1ebd:
; 294  : 	case 0x1eb9:
; 295  : 		*letter = (char)'e';

  000b8	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000bb	c6 00 65	 mov	 BYTE PTR [eax], 101	; 00000065H

; 450  : }

  000be	b0 01		 mov	 al, 1
  000c0	5d		 pop	 ebp
  000c1	c3		 ret	 0
$LN44@DecomposeL:

; 296  : 		return true;
; 297  : 	case 0x1ebe:
; 298  : 	case 0x1ec0:
; 299  : 	case 0x1ec2:
; 300  : 	case 0x1ec4:
; 301  : 	case 0x1ec6:
; 302  : 		*letter = (char)0xca;

  000c2	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000c5	c6 00 ca	 mov	 BYTE PTR [eax], -54	; ffffffcaH

; 450  : }

  000c8	b0 01		 mov	 al, 1
  000ca	5d		 pop	 ebp
  000cb	c3		 ret	 0
$LN49@DecomposeL:

; 303  : 		return true;
; 304  : 	case 0x1ebf:
; 305  : 	case 0x1ec1:
; 306  : 	case 0x1ec3:
; 307  : 	case 0x1ec5:
; 308  : 	case 0x1ec7:
; 309  : 		*letter = (char)0xea;

  000cc	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000cf	c6 00 ea	 mov	 BYTE PTR [eax], -22	; ffffffeaH

; 450  : }

  000d2	b0 01		 mov	 al, 1
  000d4	5d		 pop	 ebp
  000d5	c3		 ret	 0
$LN54@DecomposeL:

; 310  : 		return true;
; 311  : 	case 0x00cd:
; 312  : 	case 0x00cc:
; 313  : 	case 0x1ec8:
; 314  : 	case 0x0128:
; 315  : 	case 0x1eca:
; 316  : 		*letter = (char)'I';

  000d6	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000d9	c6 00 49	 mov	 BYTE PTR [eax], 73	; 00000049H

; 450  : }

  000dc	b0 01		 mov	 al, 1
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
$LN59@DecomposeL:

; 317  : 		return true;
; 318  : 	case 0x00ed:
; 319  : 	case 0x00ec:
; 320  : 	case 0x1ec9:
; 321  : 	case 0x0129:
; 322  : 	case 0x1ecb:
; 323  : 		*letter = (char)'i';

  000e0	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000e3	c6 00 69	 mov	 BYTE PTR [eax], 105	; 00000069H

; 450  : }

  000e6	b0 01		 mov	 al, 1
  000e8	5d		 pop	 ebp
  000e9	c3		 ret	 0
$LN64@DecomposeL:

; 324  : 		return true;
; 325  : 	case 0x00d3:
; 326  : 	case 0x00d2:
; 327  : 	case 0x1ece:
; 328  : 	case 0x00d5:
; 329  : 	case 0x1ecc:
; 330  : 		*letter = (char)'O';

  000ea	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000ed	c6 00 4f	 mov	 BYTE PTR [eax], 79	; 0000004fH

; 450  : }

  000f0	b0 01		 mov	 al, 1
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN69@DecomposeL:

; 331  : 		return true;
; 332  : 	case 0x00f3:
; 333  : 	case 0x00f2:
; 334  : 	case 0x1ecf:
; 335  : 	case 0x00f5:
; 336  : 	case 0x1ecd:
; 337  : 		*letter = (char)'o';

  000f4	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  000f7	c6 00 6f	 mov	 BYTE PTR [eax], 111	; 0000006fH

; 450  : }

  000fa	b0 01		 mov	 al, 1
  000fc	5d		 pop	 ebp
  000fd	c3		 ret	 0
$LN74@DecomposeL:

; 338  : 		return true;
; 339  : 	case 0x1ed0:
; 340  : 	case 0x1ed2:
; 341  : 	case 0x1ed4:
; 342  : 	case 0x1ed6:
; 343  : 	case 0x1ed8:
; 344  : 		*letter = (char)0xd4;

  000fe	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00101	c6 00 d4	 mov	 BYTE PTR [eax], -44	; ffffffd4H

; 450  : }

  00104	b0 01		 mov	 al, 1
  00106	5d		 pop	 ebp
  00107	c3		 ret	 0
$LN79@DecomposeL:

; 345  : 		return true;
; 346  : 	case 0x1ed1:
; 347  : 	case 0x1ed3:
; 348  : 	case 0x1ed5:
; 349  : 	case 0x1ed7:
; 350  : 	case 0x1ed9:
; 351  : 		*letter = (char)0xf4;

  00108	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0010b	c6 00 f4	 mov	 BYTE PTR [eax], -12	; fffffff4H

; 450  : }

  0010e	b0 01		 mov	 al, 1
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
$LN84@DecomposeL:

; 352  : 		return true;
; 353  : 	case 0x1eda:
; 354  : 	case 0x1edc:
; 355  : 	case 0x1ede:
; 356  : 	case 0x1ee0:
; 357  : 	case 0x1ee2:
; 358  : 		*letter = (char)0xd5;

  00112	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00115	c6 00 d5	 mov	 BYTE PTR [eax], -43	; ffffffd5H

; 450  : }

  00118	b0 01		 mov	 al, 1
  0011a	5d		 pop	 ebp
  0011b	c3		 ret	 0
$LN89@DecomposeL:

; 359  : 		return true;
; 360  : 	case 0x1edb:
; 361  : 	case 0x1edd:
; 362  : 	case 0x1edf:
; 363  : 	case 0x1ee1:
; 364  : 	case 0x1ee3:
; 365  : 		*letter = (char)0xf5;

  0011c	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0011f	c6 00 f5	 mov	 BYTE PTR [eax], -11	; fffffff5H

; 450  : }

  00122	b0 01		 mov	 al, 1
  00124	5d		 pop	 ebp
  00125	c3		 ret	 0
$LN94@DecomposeL:

; 366  : 		return true;
; 367  : 	case 0x00da:
; 368  : 	case 0x00d9:
; 369  : 	case 0x1ee6:
; 370  : 	case 0x0168:
; 371  : 	case 0x1ee4:
; 372  : 		*letter = (char)'U';

  00126	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00129	c6 00 55	 mov	 BYTE PTR [eax], 85	; 00000055H

; 450  : }

  0012c	b0 01		 mov	 al, 1
  0012e	5d		 pop	 ebp
  0012f	c3		 ret	 0
$LN99@DecomposeL:

; 373  : 		return true;
; 374  : 	case 0x00fa:
; 375  : 	case 0x00f9:
; 376  : 	case 0x1ee7:
; 377  : 	case 0x0169:
; 378  : 	case 0x1ee5:
; 379  : 		*letter = (char)'u';

  00130	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00133	c6 00 75	 mov	 BYTE PTR [eax], 117	; 00000075H

; 450  : }

  00136	b0 01		 mov	 al, 1
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
$LN104@DecomposeL:

; 380  : 		return true;
; 381  : 	case 0x1ee8:
; 382  : 	case 0x1eea:
; 383  : 	case 0x1eec:
; 384  : 	case 0x1eee:
; 385  : 	case 0x1ef0:
; 386  : 		*letter = (char)0xdd;

  0013a	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0013d	c6 00 dd	 mov	 BYTE PTR [eax], -35	; ffffffddH

; 450  : }

  00140	b0 01		 mov	 al, 1
  00142	5d		 pop	 ebp
  00143	c3		 ret	 0
$LN109@DecomposeL:

; 387  : 		return true;
; 388  : 	case 0x1ee9:
; 389  : 	case 0x1eeb:
; 390  : 	case 0x1eed:
; 391  : 	case 0x1eef:
; 392  : 	case 0x1ef1:
; 393  : 		*letter = (char)0xfd;

  00144	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00147	c6 00 fd	 mov	 BYTE PTR [eax], -3	; fffffffdH

; 450  : }

  0014a	b0 01		 mov	 al, 1
  0014c	5d		 pop	 ebp
  0014d	c3		 ret	 0
$LN114@DecomposeL:

; 394  : 		return true;
; 395  : 	case 0x1ef2:
; 396  : 	case 0x00dd:
; 397  : 	case 0x1ef6:
; 398  : 	case 0x1ef8:
; 399  : 	case 0x1ef4:
; 400  : 		*letter = (char)'Y';

  0014e	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00151	c6 00 59	 mov	 BYTE PTR [eax], 89	; 00000059H

; 450  : }

  00154	b0 01		 mov	 al, 1
  00156	5d		 pop	 ebp
  00157	c3		 ret	 0
$LN119@DecomposeL:

; 401  : 		return true;
; 402  : 	case 0x1ef3:
; 403  : 	case 0x00fd:
; 404  : 	case 0x1ef7:
; 405  : 	case 0x1ef9:
; 406  : 	case 0x1ef5:
; 407  : 		*letter = (char)'y';

  00158	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0015b	c6 00 79	 mov	 BYTE PTR [eax], 121	; 00000079H

; 450  : }

  0015e	b0 01		 mov	 al, 1
  00160	5d		 pop	 ebp
  00161	c3		 ret	 0
$LN138@DecomposeL:

; 239  : 	switch (input)

  00162	3d 1d 20 00 00	 cmp	 eax, 8221		; 0000201dH
  00167	74 28		 je	 SHORT $LN134@DecomposeL
  00169	3d ab 20 00 00	 cmp	 eax, 8363		; 000020abH
  0016e	74 17		 je	 SHORT $LN132@DecomposeL
$LN2@DecomposeL:

; 441  : 		return true;
; 442  : 	}
; 443  : 
; 444  : 	if (input < 256)

  00170	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00175	66 3b c8	 cmp	 cx, ax
  00178	73 09		 jae	 SHORT $LN135@DecomposeL

; 445  : 	{
; 446  : 		*letter = (char)input;

  0017a	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0017d	88 08		 mov	 BYTE PTR [eax], cl

; 450  : }

  0017f	b0 01		 mov	 al, 1
  00181	5d		 pop	 ebp
  00182	c3		 ret	 0
$LN135@DecomposeL:

; 447  : 		return true;
; 448  : 	}
; 449  : 	return false;

  00183	32 c0		 xor	 al, al

; 450  : }

  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
$LN132@DecomposeL:

; 420  : 		return true;
; 421  : 	case 0x01a0:
; 422  : 		*letter = (char)0xd5;
; 423  : 		return true;
; 424  : 	case 0x01a1:
; 425  : 		*letter = (char)0xf5;
; 426  : 		return true;
; 427  : 	case 0x01af:
; 428  : 		*letter = (char)0xdd;
; 429  : 		return true;
; 430  : 	case 0x01b0:
; 431  : 		*letter = (char)0xfd;
; 432  : 		return true;
; 433  : 	case 0x20ab:
; 434  : 		*letter = (char)0xfe;

  00187	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  0018a	c6 00 fe	 mov	 BYTE PTR [eax], -2	; fffffffeH

; 450  : }

  0018d	b0 01		 mov	 al, 1
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
$LN134@DecomposeL:

; 435  : 		return true;
; 436  : 	case 0x201c:
; 437  : 		*letter = (char)'"';
; 438  : 		return true;
; 439  : 	case 0x201d:
; 440  : 		*letter = (char)'"';

  00191	8b 45 0c	 mov	 eax, DWORD PTR _letter$[ebp]
  00194	c6 00 22	 mov	 BYTE PTR [eax], 34	; 00000022H

; 450  : }

  00197	b0 01		 mov	 al, 1
  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
  0019b	90		 npad	 1
$LN140@DecomposeL:
  0019c	00 00 00 00	 DD	 $LN4@DecomposeL
  001a0	00 00 00 00	 DD	 $LN34@DecomposeL
  001a4	00 00 00 00	 DD	 $LN54@DecomposeL
  001a8	00 00 00 00	 DD	 $LN64@DecomposeL
  001ac	00 00 00 00	 DD	 $LN94@DecomposeL
  001b0	00 00 00 00	 DD	 $LN114@DecomposeL
  001b4	00 00 00 00	 DD	 $LN9@DecomposeL
  001b8	00 00 00 00	 DD	 $LN39@DecomposeL
  001bc	00 00 00 00	 DD	 $LN59@DecomposeL
  001c0	00 00 00 00	 DD	 $LN69@DecomposeL
  001c4	00 00 00 00	 DD	 $LN99@DecomposeL
  001c8	00 00 00 00	 DD	 $LN119@DecomposeL
  001cc	00 00 00 00	 DD	 $LN14@DecomposeL
  001d0	00 00 00 00	 DD	 $LN19@DecomposeL
  001d4	00 00 00 00	 DD	 $LN126@DecomposeL
  001d8	00 00 00 00	 DD	 $LN127@DecomposeL
  001dc	00 00 00 00	 DD	 $LN84@DecomposeL
  001e0	00 00 00 00	 DD	 $LN89@DecomposeL
  001e4	00 00 00 00	 DD	 $LN104@DecomposeL
  001e8	00 00 00 00	 DD	 $LN109@DecomposeL
  001ec	00 00 00 00	 DD	 $LN2@DecomposeL
$LN139@DecomposeL:
  001f0	00		 DB	 0
  001f1	00		 DB	 0
  001f2	14		 DB	 20			; 00000014H
  001f3	00		 DB	 0
  001f4	14		 DB	 20			; 00000014H
  001f5	14		 DB	 20			; 00000014H
  001f6	14		 DB	 20			; 00000014H
  001f7	14		 DB	 20			; 00000014H
  001f8	01		 DB	 1
  001f9	01		 DB	 1
  001fa	14		 DB	 20			; 00000014H
  001fb	14		 DB	 20			; 00000014H
  001fc	02		 DB	 2
  001fd	02		 DB	 2
  001fe	14		 DB	 20			; 00000014H
  001ff	14		 DB	 20			; 00000014H
  00200	14		 DB	 20			; 00000014H
  00201	14		 DB	 20			; 00000014H
  00202	03		 DB	 3
  00203	03		 DB	 3
  00204	14		 DB	 20			; 00000014H
  00205	03		 DB	 3
  00206	14		 DB	 20			; 00000014H
  00207	14		 DB	 20			; 00000014H
  00208	14		 DB	 20			; 00000014H
  00209	04		 DB	 4
  0020a	04		 DB	 4
  0020b	14		 DB	 20			; 00000014H
  0020c	14		 DB	 20			; 00000014H
  0020d	05		 DB	 5
  0020e	14		 DB	 20			; 00000014H
  0020f	14		 DB	 20			; 00000014H
  00210	06		 DB	 6
  00211	06		 DB	 6
  00212	14		 DB	 20			; 00000014H
  00213	06		 DB	 6
  00214	14		 DB	 20			; 00000014H
  00215	14		 DB	 20			; 00000014H
  00216	14		 DB	 20			; 00000014H
  00217	14		 DB	 20			; 00000014H
  00218	07		 DB	 7
  00219	07		 DB	 7
  0021a	14		 DB	 20			; 00000014H
  0021b	14		 DB	 20			; 00000014H
  0021c	08		 DB	 8
  0021d	08		 DB	 8
  0021e	14		 DB	 20			; 00000014H
  0021f	14		 DB	 20			; 00000014H
  00220	14		 DB	 20			; 00000014H
  00221	14		 DB	 20			; 00000014H
  00222	09		 DB	 9
  00223	09		 DB	 9
  00224	14		 DB	 20			; 00000014H
  00225	09		 DB	 9
  00226	14		 DB	 20			; 00000014H
  00227	14		 DB	 20			; 00000014H
  00228	14		 DB	 20			; 00000014H
  00229	0a		 DB	 10			; 0000000aH
  0022a	0a		 DB	 10			; 0000000aH
  0022b	14		 DB	 20			; 00000014H
  0022c	14		 DB	 20			; 00000014H
  0022d	0b		 DB	 11			; 0000000bH
  0022e	14		 DB	 20			; 00000014H
  0022f	14		 DB	 20			; 00000014H
  00230	14		 DB	 20			; 00000014H
  00231	14		 DB	 20			; 00000014H
  00232	0c		 DB	 12			; 0000000cH
  00233	0d		 DB	 13			; 0000000dH
  00234	14		 DB	 20			; 00000014H
  00235	14		 DB	 20			; 00000014H
  00236	14		 DB	 20			; 00000014H
  00237	14		 DB	 20			; 00000014H
  00238	14		 DB	 20			; 00000014H
  00239	14		 DB	 20			; 00000014H
  0023a	14		 DB	 20			; 00000014H
  0023b	14		 DB	 20			; 00000014H
  0023c	14		 DB	 20			; 00000014H
  0023d	14		 DB	 20			; 00000014H
  0023e	14		 DB	 20			; 00000014H
  0023f	14		 DB	 20			; 00000014H
  00240	0e		 DB	 14			; 0000000eH
  00241	0f		 DB	 15			; 0000000fH
  00242	14		 DB	 20			; 00000014H
  00243	14		 DB	 20			; 00000014H
  00244	14		 DB	 20			; 00000014H
  00245	14		 DB	 20			; 00000014H
  00246	14		 DB	 20			; 00000014H
  00247	14		 DB	 20			; 00000014H
  00248	14		 DB	 20			; 00000014H
  00249	14		 DB	 20			; 00000014H
  0024a	14		 DB	 20			; 00000014H
  0024b	14		 DB	 20			; 00000014H
  0024c	14		 DB	 20			; 00000014H
  0024d	14		 DB	 20			; 00000014H
  0024e	14		 DB	 20			; 00000014H
  0024f	14		 DB	 20			; 00000014H
  00250	14		 DB	 20			; 00000014H
  00251	14		 DB	 20			; 00000014H
  00252	14		 DB	 20			; 00000014H
  00253	14		 DB	 20			; 00000014H
  00254	14		 DB	 20			; 00000014H
  00255	14		 DB	 20			; 00000014H
  00256	14		 DB	 20			; 00000014H
  00257	14		 DB	 20			; 00000014H
  00258	02		 DB	 2
  00259	08		 DB	 8
  0025a	14		 DB	 20			; 00000014H
  0025b	14		 DB	 20			; 00000014H
  0025c	14		 DB	 20			; 00000014H
  0025d	14		 DB	 20			; 00000014H
  0025e	14		 DB	 20			; 00000014H
  0025f	14		 DB	 20			; 00000014H
  00260	14		 DB	 20			; 00000014H
  00261	14		 DB	 20			; 00000014H
  00262	14		 DB	 20			; 00000014H
  00263	14		 DB	 20			; 00000014H
  00264	14		 DB	 20			; 00000014H
  00265	14		 DB	 20			; 00000014H
  00266	14		 DB	 20			; 00000014H
  00267	14		 DB	 20			; 00000014H
  00268	14		 DB	 20			; 00000014H
  00269	14		 DB	 20			; 00000014H
  0026a	14		 DB	 20			; 00000014H
  0026b	14		 DB	 20			; 00000014H
  0026c	14		 DB	 20			; 00000014H
  0026d	14		 DB	 20			; 00000014H
  0026e	14		 DB	 20			; 00000014H
  0026f	14		 DB	 20			; 00000014H
  00270	14		 DB	 20			; 00000014H
  00271	14		 DB	 20			; 00000014H
  00272	14		 DB	 20			; 00000014H
  00273	14		 DB	 20			; 00000014H
  00274	14		 DB	 20			; 00000014H
  00275	14		 DB	 20			; 00000014H
  00276	14		 DB	 20			; 00000014H
  00277	14		 DB	 20			; 00000014H
  00278	14		 DB	 20			; 00000014H
  00279	14		 DB	 20			; 00000014H
  0027a	14		 DB	 20			; 00000014H
  0027b	14		 DB	 20			; 00000014H
  0027c	14		 DB	 20			; 00000014H
  0027d	14		 DB	 20			; 00000014H
  0027e	14		 DB	 20			; 00000014H
  0027f	14		 DB	 20			; 00000014H
  00280	14		 DB	 20			; 00000014H
  00281	14		 DB	 20			; 00000014H
  00282	14		 DB	 20			; 00000014H
  00283	14		 DB	 20			; 00000014H
  00284	14		 DB	 20			; 00000014H
  00285	14		 DB	 20			; 00000014H
  00286	14		 DB	 20			; 00000014H
  00287	14		 DB	 20			; 00000014H
  00288	14		 DB	 20			; 00000014H
  00289	14		 DB	 20			; 00000014H
  0028a	14		 DB	 20			; 00000014H
  0028b	14		 DB	 20			; 00000014H
  0028c	14		 DB	 20			; 00000014H
  0028d	14		 DB	 20			; 00000014H
  0028e	14		 DB	 20			; 00000014H
  0028f	14		 DB	 20			; 00000014H
  00290	14		 DB	 20			; 00000014H
  00291	14		 DB	 20			; 00000014H
  00292	14		 DB	 20			; 00000014H
  00293	14		 DB	 20			; 00000014H
  00294	14		 DB	 20			; 00000014H
  00295	14		 DB	 20			; 00000014H
  00296	14		 DB	 20			; 00000014H
  00297	14		 DB	 20			; 00000014H
  00298	04		 DB	 4
  00299	0a		 DB	 10			; 0000000aH
  0029a	14		 DB	 20			; 00000014H
  0029b	14		 DB	 20			; 00000014H
  0029c	14		 DB	 20			; 00000014H
  0029d	14		 DB	 20			; 00000014H
  0029e	14		 DB	 20			; 00000014H
  0029f	14		 DB	 20			; 00000014H
  002a0	14		 DB	 20			; 00000014H
  002a1	14		 DB	 20			; 00000014H
  002a2	14		 DB	 20			; 00000014H
  002a3	14		 DB	 20			; 00000014H
  002a4	14		 DB	 20			; 00000014H
  002a5	14		 DB	 20			; 00000014H
  002a6	14		 DB	 20			; 00000014H
  002a7	14		 DB	 20			; 00000014H
  002a8	14		 DB	 20			; 00000014H
  002a9	14		 DB	 20			; 00000014H
  002aa	14		 DB	 20			; 00000014H
  002ab	14		 DB	 20			; 00000014H
  002ac	14		 DB	 20			; 00000014H
  002ad	14		 DB	 20			; 00000014H
  002ae	14		 DB	 20			; 00000014H
  002af	14		 DB	 20			; 00000014H
  002b0	14		 DB	 20			; 00000014H
  002b1	14		 DB	 20			; 00000014H
  002b2	14		 DB	 20			; 00000014H
  002b3	14		 DB	 20			; 00000014H
  002b4	14		 DB	 20			; 00000014H
  002b5	14		 DB	 20			; 00000014H
  002b6	14		 DB	 20			; 00000014H
  002b7	14		 DB	 20			; 00000014H
  002b8	14		 DB	 20			; 00000014H
  002b9	14		 DB	 20			; 00000014H
  002ba	14		 DB	 20			; 00000014H
  002bb	14		 DB	 20			; 00000014H
  002bc	14		 DB	 20			; 00000014H
  002bd	14		 DB	 20			; 00000014H
  002be	14		 DB	 20			; 00000014H
  002bf	14		 DB	 20			; 00000014H
  002c0	14		 DB	 20			; 00000014H
  002c1	14		 DB	 20			; 00000014H
  002c2	14		 DB	 20			; 00000014H
  002c3	14		 DB	 20			; 00000014H
  002c4	14		 DB	 20			; 00000014H
  002c5	14		 DB	 20			; 00000014H
  002c6	14		 DB	 20			; 00000014H
  002c7	14		 DB	 20			; 00000014H
  002c8	14		 DB	 20			; 00000014H
  002c9	14		 DB	 20			; 00000014H
  002ca	14		 DB	 20			; 00000014H
  002cb	14		 DB	 20			; 00000014H
  002cc	14		 DB	 20			; 00000014H
  002cd	14		 DB	 20			; 00000014H
  002ce	14		 DB	 20			; 00000014H
  002cf	14		 DB	 20			; 00000014H
  002d0	10		 DB	 16			; 00000010H
  002d1	11		 DB	 17			; 00000011H
  002d2	14		 DB	 20			; 00000014H
  002d3	14		 DB	 20			; 00000014H
  002d4	14		 DB	 20			; 00000014H
  002d5	14		 DB	 20			; 00000014H
  002d6	14		 DB	 20			; 00000014H
  002d7	14		 DB	 20			; 00000014H
  002d8	14		 DB	 20			; 00000014H
  002d9	14		 DB	 20			; 00000014H
  002da	14		 DB	 20			; 00000014H
  002db	14		 DB	 20			; 00000014H
  002dc	14		 DB	 20			; 00000014H
  002dd	14		 DB	 20			; 00000014H
  002de	14		 DB	 20			; 00000014H
  002df	12		 DB	 18			; 00000012H
  002e0	13		 DB	 19			; 00000013H
  002e1	0f 1f 00	 npad	 3
$LN142@DecomposeL:
  002e4	00 00 00 00	 DD	 $LN9@DecomposeL
  002e8	00 00 00 00	 DD	 $LN4@DecomposeL
  002ec	00 00 00 00	 DD	 $LN24@DecomposeL
  002f0	00 00 00 00	 DD	 $LN29@DecomposeL
  002f4	00 00 00 00	 DD	 $LN14@DecomposeL
  002f8	00 00 00 00	 DD	 $LN19@DecomposeL
  002fc	00 00 00 00	 DD	 $LN34@DecomposeL
  00300	00 00 00 00	 DD	 $LN39@DecomposeL
  00304	00 00 00 00	 DD	 $LN44@DecomposeL
  00308	00 00 00 00	 DD	 $LN49@DecomposeL
  0030c	00 00 00 00	 DD	 $LN54@DecomposeL
  00310	00 00 00 00	 DD	 $LN59@DecomposeL
  00314	00 00 00 00	 DD	 $LN64@DecomposeL
  00318	00 00 00 00	 DD	 $LN69@DecomposeL
  0031c	00 00 00 00	 DD	 $LN74@DecomposeL
  00320	00 00 00 00	 DD	 $LN79@DecomposeL
  00324	00 00 00 00	 DD	 $LN84@DecomposeL
  00328	00 00 00 00	 DD	 $LN89@DecomposeL
  0032c	00 00 00 00	 DD	 $LN94@DecomposeL
  00330	00 00 00 00	 DD	 $LN99@DecomposeL
  00334	00 00 00 00	 DD	 $LN104@DecomposeL
  00338	00 00 00 00	 DD	 $LN109@DecomposeL
  0033c	00 00 00 00	 DD	 $LN114@DecomposeL
  00340	00 00 00 00	 DD	 $LN119@DecomposeL
$LN141@DecomposeL:
  00344	00		 DB	 0
  00345	01		 DB	 1
  00346	00		 DB	 0
  00347	02		 DB	 2
  00348	03		 DB	 3
  00349	02		 DB	 2
  0034a	03		 DB	 3
  0034b	02		 DB	 2
  0034c	03		 DB	 3
  0034d	02		 DB	 2
  0034e	03		 DB	 3
  0034f	02		 DB	 2
  00350	03		 DB	 3
  00351	04		 DB	 4
  00352	05		 DB	 5
  00353	04		 DB	 4
  00354	05		 DB	 5
  00355	04		 DB	 4
  00356	05		 DB	 5
  00357	04		 DB	 4
  00358	05		 DB	 5
  00359	04		 DB	 4
  0035a	05		 DB	 5
  0035b	06		 DB	 6
  0035c	07		 DB	 7
  0035d	06		 DB	 6
  0035e	07		 DB	 7
  0035f	06		 DB	 6
  00360	07		 DB	 7
  00361	08		 DB	 8
  00362	09		 DB	 9
  00363	08		 DB	 8
  00364	09		 DB	 9
  00365	08		 DB	 8
  00366	09		 DB	 9
  00367	08		 DB	 8
  00368	09		 DB	 9
  00369	08		 DB	 8
  0036a	09		 DB	 9
  0036b	0a		 DB	 10			; 0000000aH
  0036c	0b		 DB	 11			; 0000000bH
  0036d	0a		 DB	 10			; 0000000aH
  0036e	0b		 DB	 11			; 0000000bH
  0036f	0c		 DB	 12			; 0000000cH
  00370	0d		 DB	 13			; 0000000dH
  00371	0c		 DB	 12			; 0000000cH
  00372	0d		 DB	 13			; 0000000dH
  00373	0e		 DB	 14			; 0000000eH
  00374	0f		 DB	 15			; 0000000fH
  00375	0e		 DB	 14			; 0000000eH
  00376	0f		 DB	 15			; 0000000fH
  00377	0e		 DB	 14			; 0000000eH
  00378	0f		 DB	 15			; 0000000fH
  00379	0e		 DB	 14			; 0000000eH
  0037a	0f		 DB	 15			; 0000000fH
  0037b	0e		 DB	 14			; 0000000eH
  0037c	0f		 DB	 15			; 0000000fH
  0037d	10		 DB	 16			; 00000010H
  0037e	11		 DB	 17			; 00000011H
  0037f	10		 DB	 16			; 00000010H
  00380	11		 DB	 17			; 00000011H
  00381	10		 DB	 16			; 00000010H
  00382	11		 DB	 17			; 00000011H
  00383	10		 DB	 16			; 00000010H
  00384	11		 DB	 17			; 00000011H
  00385	10		 DB	 16			; 00000010H
  00386	11		 DB	 17			; 00000011H
  00387	12		 DB	 18			; 00000012H
  00388	13		 DB	 19			; 00000013H
  00389	12		 DB	 18			; 00000012H
  0038a	13		 DB	 19			; 00000013H
  0038b	14		 DB	 20			; 00000014H
  0038c	15		 DB	 21			; 00000015H
  0038d	14		 DB	 20			; 00000014H
  0038e	15		 DB	 21			; 00000015H
  0038f	14		 DB	 20			; 00000014H
  00390	15		 DB	 21			; 00000015H
  00391	14		 DB	 20			; 00000014H
  00392	15		 DB	 21			; 00000015H
  00393	14		 DB	 20			; 00000014H
  00394	15		 DB	 21			; 00000015H
  00395	16		 DB	 22			; 00000016H
  00396	17		 DB	 23			; 00000017H
  00397	16		 DB	 22			; 00000016H
  00398	17		 DB	 23			; 00000017H
  00399	16		 DB	 22			; 00000016H
  0039a	17		 DB	 23			; 00000017H
  0039b	16		 DB	 22			; 00000016H
  0039c	17		 DB	 23			; 00000017H
?DecomposeLetter@@YA_N_WPAD@Z ENDP			; DecomposeLetter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?ComposeTone@@YA_W_W0@Z
_TEXT	SEGMENT
_prev$ = 8						; size = 2
_tone$ = 12						; size = 2
?ComposeTone@@YA_W_W0@Z PROC				; ComposeTone, COMDAT

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	int col, row;
; 88   : 
; 89   : 	switch (tone)

  00003	0f b7 45 0c	 movzx	 eax, WORD PTR _tone$[ebp]
  00007	66 8b 55 08	 mov	 dx, WORD PTR _prev$[ebp]
  0000b	05 00 fd ff ff	 add	 eax, -768		; fffffd00H
  00010	83 f8 23	 cmp	 eax, 35			; 00000023H
  00013	0f 87 bd 01 00
	00		 ja	 $LN11@ComposeTon
  00019	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN39@ComposeTon[eax]
  00020	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN40@ComposeTon[eax*4]
$LN6@ComposeTon:

; 90   : 	{
; 91   : 	case 0x0301:
; 92   : 		col = 0;

  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?cp1258_composed_table@@3PAY04_WA

; 93   : 		break;

  0002c	eb 1a		 jmp	 SHORT $LN2@ComposeTon
$LN7@ComposeTon:

; 94   : 	case 0x0300:
; 95   : 		col = 1;

  0002e	b9 02 00 00 00	 mov	 ecx, OFFSET ?cp1258_composed_table@@3PAY04_WA+2

; 96   : 		break;

  00033	eb 13		 jmp	 SHORT $LN2@ComposeTon
$LN8@ComposeTon:

; 97   : 	case 0x0309:
; 98   : 		col = 2;

  00035	b9 04 00 00 00	 mov	 ecx, OFFSET ?cp1258_composed_table@@3PAY04_WA+4

; 99   : 		break;

  0003a	eb 0c		 jmp	 SHORT $LN2@ComposeTon
$LN9@ComposeTon:

; 100  : 	case 0x0303:
; 101  : 		col = 3;

  0003c	b9 06 00 00 00	 mov	 ecx, OFFSET ?cp1258_composed_table@@3PAY04_WA+6

; 102  : 		break;

  00041	eb 05		 jmp	 SHORT $LN2@ComposeTon
$LN10@ComposeTon:

; 103  : 	case 0x0323:
; 104  : 		col = 4;

  00043	b9 08 00 00 00	 mov	 ecx, OFFSET ?cp1258_composed_table@@3PAY04_WA+8
$LN2@ComposeTon:

; 108  : 	}
; 109  : 
; 110  : 	switch (prev)

  00048	0f b7 c2	 movzx	 eax, dx
  0004b	3d a0 01 00 00	 cmp	 eax, 416		; 000001a0H
  00050	0f 87 45 01 00
	00		 ja	 $LN38@ComposeTon
  00056	0f 84 31 01 00
	00		 je	 $LN28@ComposeTon
  0005c	83 e8 41	 sub	 eax, 65			; 00000041H
  0005f	3d c2 00 00 00	 cmp	 eax, 194		; 000000c2H
  00064	0f 87 6c 01 00
	00		 ja	 $LN11@ComposeTon
  0006a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN41@ComposeTon[eax]
  00071	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN42@ComposeTon[eax*4]
$LN12@ComposeTon:

; 111  : 	{
; 112  : 	case 0x0041:
; 113  : 		row = 0;

  00078	33 c0		 xor	 eax, eax

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  0007a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0007d	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
$LN13@ComposeTon:

; 114  : 		break;
; 115  : 	case 0x0061:
; 116  : 		row = 1;

  00083	b8 01 00 00 00	 mov	 eax, 1

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00088	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0008b	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN14@ComposeTon:

; 117  : 		break;
; 118  : 	case 0x0102:
; 119  : 		row = 2;

  00091	b8 02 00 00 00	 mov	 eax, 2

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00096	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00099	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
$LN15@ComposeTon:

; 120  : 		break;
; 121  : 	case 0x0103:
; 122  : 		row = 3;

  0009f	b8 03 00 00 00	 mov	 eax, 3

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000a4	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000a7	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
$LN16@ComposeTon:

; 123  : 		break;
; 124  : 	case 0x00C2:
; 125  : 		row = 4;

  000ad	b8 04 00 00 00	 mov	 eax, 4

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000b2	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000b5	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$LN17@ComposeTon:

; 126  : 		break;
; 127  : 	case 0x00E2:
; 128  : 		row = 5;

  000bb	b8 05 00 00 00	 mov	 eax, 5

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000c0	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000c3	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000c7	5d		 pop	 ebp
  000c8	c3		 ret	 0
$LN18@ComposeTon:

; 129  : 		break;
; 130  : 	case 0x0045:
; 131  : 		row = 6;

  000c9	b8 06 00 00 00	 mov	 eax, 6

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000ce	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000d1	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000d5	5d		 pop	 ebp
  000d6	c3		 ret	 0
$LN19@ComposeTon:

; 132  : 		break;
; 133  : 	case 0x0065:
; 134  : 		row = 7;

  000d7	b8 07 00 00 00	 mov	 eax, 7

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000dc	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000df	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000e3	5d		 pop	 ebp
  000e4	c3		 ret	 0
$LN20@ComposeTon:

; 135  : 		break;
; 136  : 	case 0x00CA:
; 137  : 		row = 8;

  000e5	b8 08 00 00 00	 mov	 eax, 8

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000ea	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000ed	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
$LN21@ComposeTon:

; 138  : 		break;
; 139  : 	case 0x00EA:
; 140  : 		row = 9;

  000f3	b8 09 00 00 00	 mov	 eax, 9

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  000f8	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000fb	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
$LN22@ComposeTon:

; 141  : 		break;
; 142  : 	case 0x0049:
; 143  : 		row = 10;

  00101	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00106	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00109	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0010d	5d		 pop	 ebp
  0010e	c3		 ret	 0
$LN23@ComposeTon:

; 144  : 		break;
; 145  : 	case 0x0069:
; 146  : 		row = 11;

  0010f	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00114	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00117	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
$LN24@ComposeTon:

; 147  : 		break;
; 148  : 	case 0x004F:
; 149  : 		row = 12;

  0011d	b8 0c 00 00 00	 mov	 eax, 12			; 0000000cH

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00122	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00125	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00129	5d		 pop	 ebp
  0012a	c3		 ret	 0
$LN25@ComposeTon:

; 150  : 		break;
; 151  : 	case 0x006F:
; 152  : 		row = 13;

  0012b	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00130	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00133	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00137	5d		 pop	 ebp
  00138	c3		 ret	 0
$LN26@ComposeTon:

; 153  : 		break;
; 154  : 	case 0x00D4:
; 155  : 		row = 14;

  00139	b8 0e 00 00 00	 mov	 eax, 14			; 0000000eH

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  0013e	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00141	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00145	5d		 pop	 ebp
  00146	c3		 ret	 0
$LN27@ComposeTon:

; 156  : 		break;
; 157  : 	case 0x00F4:
; 158  : 		row = 15;

  00147	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  0014c	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0014f	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
$LN30@ComposeTon:

; 165  : 		break;
; 166  : 	case 0x0055:
; 167  : 		row = 18;

  00155	b8 12 00 00 00	 mov	 eax, 18			; 00000012H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  0015a	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0015d	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
$LN31@ComposeTon:

; 168  : 		break;
; 169  : 	case 0x0075:
; 170  : 		row = 19;

  00163	b8 13 00 00 00	 mov	 eax, 19			; 00000013H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00168	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0016b	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN34@ComposeTon:

; 177  : 		break;
; 178  : 	case 0x0059:
; 179  : 		row = 22;

  00171	b8 16 00 00 00	 mov	 eax, 22			; 00000016H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00176	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00179	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0017d	5d		 pop	 ebp
  0017e	c3		 ret	 0
$LN35@ComposeTon:

; 180  : 		break;
; 181  : 	case 0x0079:
; 182  : 		row = 23;

  0017f	b8 17 00 00 00	 mov	 eax, 23			; 00000017H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00184	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00187	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
$LN28@ComposeTon:

; 159  : 		break;
; 160  : 	case 0x01A0:
; 161  : 		row = 16;

  0018d	b8 10 00 00 00	 mov	 eax, 16			; 00000010H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  00192	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00195	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  00199	5d		 pop	 ebp
  0019a	c3		 ret	 0
$LN38@ComposeTon:

; 108  : 	}
; 109  : 
; 110  : 	switch (prev)

  0019b	2d a1 01 00 00	 sub	 eax, 417		; 000001a1H
  001a0	74 26		 je	 SHORT $LN29@ComposeTon
  001a2	83 e8 0e	 sub	 eax, 14			; 0000000eH
  001a5	74 13		 je	 SHORT $LN32@ComposeTon
  001a7	83 e8 01	 sub	 eax, 1
  001aa	75 2a		 jne	 SHORT $LN11@ComposeTon

; 174  : 		break;
; 175  : 	case 0x01B0:
; 176  : 		row = 21;

  001ac	b8 15 00 00 00	 mov	 eax, 21			; 00000015H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  001b1	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001b4	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  001b8	5d		 pop	 ebp
  001b9	c3		 ret	 0
$LN32@ComposeTon:

; 171  : 		break;
; 172  : 	case 0x01AF:
; 173  : 		row = 20;

  001ba	b8 14 00 00 00	 mov	 eax, 20			; 00000014H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  001bf	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001c2	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  001c6	5d		 pop	 ebp
  001c7	c3		 ret	 0
$LN29@ComposeTon:

; 162  : 		break;
; 163  : 	case 0x01A1:
; 164  : 		row = 17;

  001c8	b8 11 00 00 00	 mov	 eax, 17			; 00000011H

; 183  : 		break;
; 184  : 	default:
; 185  : 		return prev;
; 186  : 	}
; 187  : 
; 188  : 	return cp1258_composed_table[row][col];

  001cd	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  001d0	66 8b 04 41	 mov	 ax, WORD PTR [ecx+eax*2]

; 189  : }

  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
$LN11@ComposeTon:

; 105  : 		break;
; 106  : 	default:
; 107  : 		return prev;

  001d6	66 8b c2	 mov	 ax, dx

; 189  : }

  001d9	5d		 pop	 ebp
  001da	c3		 ret	 0
  001db	90		 npad	 1
$LN40@ComposeTon:
  001dc	00 00 00 00	 DD	 $LN7@ComposeTon
  001e0	00 00 00 00	 DD	 $LN6@ComposeTon
  001e4	00 00 00 00	 DD	 $LN9@ComposeTon
  001e8	00 00 00 00	 DD	 $LN8@ComposeTon
  001ec	00 00 00 00	 DD	 $LN10@ComposeTon
  001f0	00 00 00 00	 DD	 $LN11@ComposeTon
$LN39@ComposeTon:
  001f4	00		 DB	 0
  001f5	01		 DB	 1
  001f6	05		 DB	 5
  001f7	02		 DB	 2
  001f8	05		 DB	 5
  001f9	05		 DB	 5
  001fa	05		 DB	 5
  001fb	05		 DB	 5
  001fc	05		 DB	 5
  001fd	03		 DB	 3
  001fe	05		 DB	 5
  001ff	05		 DB	 5
  00200	05		 DB	 5
  00201	05		 DB	 5
  00202	05		 DB	 5
  00203	05		 DB	 5
  00204	05		 DB	 5
  00205	05		 DB	 5
  00206	05		 DB	 5
  00207	05		 DB	 5
  00208	05		 DB	 5
  00209	05		 DB	 5
  0020a	05		 DB	 5
  0020b	05		 DB	 5
  0020c	05		 DB	 5
  0020d	05		 DB	 5
  0020e	05		 DB	 5
  0020f	05		 DB	 5
  00210	05		 DB	 5
  00211	05		 DB	 5
  00212	05		 DB	 5
  00213	05		 DB	 5
  00214	05		 DB	 5
  00215	05		 DB	 5
  00216	05		 DB	 5
  00217	04		 DB	 4
$LN42@ComposeTon:
  00218	00 00 00 00	 DD	 $LN12@ComposeTon
  0021c	00 00 00 00	 DD	 $LN18@ComposeTon
  00220	00 00 00 00	 DD	 $LN22@ComposeTon
  00224	00 00 00 00	 DD	 $LN24@ComposeTon
  00228	00 00 00 00	 DD	 $LN30@ComposeTon
  0022c	00 00 00 00	 DD	 $LN34@ComposeTon
  00230	00 00 00 00	 DD	 $LN13@ComposeTon
  00234	00 00 00 00	 DD	 $LN19@ComposeTon
  00238	00 00 00 00	 DD	 $LN23@ComposeTon
  0023c	00 00 00 00	 DD	 $LN25@ComposeTon
  00240	00 00 00 00	 DD	 $LN31@ComposeTon
  00244	00 00 00 00	 DD	 $LN35@ComposeTon
  00248	00 00 00 00	 DD	 $LN16@ComposeTon
  0024c	00 00 00 00	 DD	 $LN20@ComposeTon
  00250	00 00 00 00	 DD	 $LN26@ComposeTon
  00254	00 00 00 00	 DD	 $LN17@ComposeTon
  00258	00 00 00 00	 DD	 $LN21@ComposeTon
  0025c	00 00 00 00	 DD	 $LN27@ComposeTon
  00260	00 00 00 00	 DD	 $LN14@ComposeTon
  00264	00 00 00 00	 DD	 $LN15@ComposeTon
  00268	00 00 00 00	 DD	 $LN11@ComposeTon
$LN41@ComposeTon:
  0026c	00		 DB	 0
  0026d	14		 DB	 20			; 00000014H
  0026e	14		 DB	 20			; 00000014H
  0026f	14		 DB	 20			; 00000014H
  00270	01		 DB	 1
  00271	14		 DB	 20			; 00000014H
  00272	14		 DB	 20			; 00000014H
  00273	14		 DB	 20			; 00000014H
  00274	02		 DB	 2
  00275	14		 DB	 20			; 00000014H
  00276	14		 DB	 20			; 00000014H
  00277	14		 DB	 20			; 00000014H
  00278	14		 DB	 20			; 00000014H
  00279	14		 DB	 20			; 00000014H
  0027a	03		 DB	 3
  0027b	14		 DB	 20			; 00000014H
  0027c	14		 DB	 20			; 00000014H
  0027d	14		 DB	 20			; 00000014H
  0027e	14		 DB	 20			; 00000014H
  0027f	14		 DB	 20			; 00000014H
  00280	04		 DB	 4
  00281	14		 DB	 20			; 00000014H
  00282	14		 DB	 20			; 00000014H
  00283	14		 DB	 20			; 00000014H
  00284	05		 DB	 5
  00285	14		 DB	 20			; 00000014H
  00286	14		 DB	 20			; 00000014H
  00287	14		 DB	 20			; 00000014H
  00288	14		 DB	 20			; 00000014H
  00289	14		 DB	 20			; 00000014H
  0028a	14		 DB	 20			; 00000014H
  0028b	14		 DB	 20			; 00000014H
  0028c	06		 DB	 6
  0028d	14		 DB	 20			; 00000014H
  0028e	14		 DB	 20			; 00000014H
  0028f	14		 DB	 20			; 00000014H
  00290	07		 DB	 7
  00291	14		 DB	 20			; 00000014H
  00292	14		 DB	 20			; 00000014H
  00293	14		 DB	 20			; 00000014H
  00294	08		 DB	 8
  00295	14		 DB	 20			; 00000014H
  00296	14		 DB	 20			; 00000014H
  00297	14		 DB	 20			; 00000014H
  00298	14		 DB	 20			; 00000014H
  00299	14		 DB	 20			; 00000014H
  0029a	09		 DB	 9
  0029b	14		 DB	 20			; 00000014H
  0029c	14		 DB	 20			; 00000014H
  0029d	14		 DB	 20			; 00000014H
  0029e	14		 DB	 20			; 00000014H
  0029f	14		 DB	 20			; 00000014H
  002a0	0a		 DB	 10			; 0000000aH
  002a1	14		 DB	 20			; 00000014H
  002a2	14		 DB	 20			; 00000014H
  002a3	14		 DB	 20			; 00000014H
  002a4	0b		 DB	 11			; 0000000bH
  002a5	14		 DB	 20			; 00000014H
  002a6	14		 DB	 20			; 00000014H
  002a7	14		 DB	 20			; 00000014H
  002a8	14		 DB	 20			; 00000014H
  002a9	14		 DB	 20			; 00000014H
  002aa	14		 DB	 20			; 00000014H
  002ab	14		 DB	 20			; 00000014H
  002ac	14		 DB	 20			; 00000014H
  002ad	14		 DB	 20			; 00000014H
  002ae	14		 DB	 20			; 00000014H
  002af	14		 DB	 20			; 00000014H
  002b0	14		 DB	 20			; 00000014H
  002b1	14		 DB	 20			; 00000014H
  002b2	14		 DB	 20			; 00000014H
  002b3	14		 DB	 20			; 00000014H
  002b4	14		 DB	 20			; 00000014H
  002b5	14		 DB	 20			; 00000014H
  002b6	14		 DB	 20			; 00000014H
  002b7	14		 DB	 20			; 00000014H
  002b8	14		 DB	 20			; 00000014H
  002b9	14		 DB	 20			; 00000014H
  002ba	14		 DB	 20			; 00000014H
  002bb	14		 DB	 20			; 00000014H
  002bc	14		 DB	 20			; 00000014H
  002bd	14		 DB	 20			; 00000014H
  002be	14		 DB	 20			; 00000014H
  002bf	14		 DB	 20			; 00000014H
  002c0	14		 DB	 20			; 00000014H
  002c1	14		 DB	 20			; 00000014H
  002c2	14		 DB	 20			; 00000014H
  002c3	14		 DB	 20			; 00000014H
  002c4	14		 DB	 20			; 00000014H
  002c5	14		 DB	 20			; 00000014H
  002c6	14		 DB	 20			; 00000014H
  002c7	14		 DB	 20			; 00000014H
  002c8	14		 DB	 20			; 00000014H
  002c9	14		 DB	 20			; 00000014H
  002ca	14		 DB	 20			; 00000014H
  002cb	14		 DB	 20			; 00000014H
  002cc	14		 DB	 20			; 00000014H
  002cd	14		 DB	 20			; 00000014H
  002ce	14		 DB	 20			; 00000014H
  002cf	14		 DB	 20			; 00000014H
  002d0	14		 DB	 20			; 00000014H
  002d1	14		 DB	 20			; 00000014H
  002d2	14		 DB	 20			; 00000014H
  002d3	14		 DB	 20			; 00000014H
  002d4	14		 DB	 20			; 00000014H
  002d5	14		 DB	 20			; 00000014H
  002d6	14		 DB	 20			; 00000014H
  002d7	14		 DB	 20			; 00000014H
  002d8	14		 DB	 20			; 00000014H
  002d9	14		 DB	 20			; 00000014H
  002da	14		 DB	 20			; 00000014H
  002db	14		 DB	 20			; 00000014H
  002dc	14		 DB	 20			; 00000014H
  002dd	14		 DB	 20			; 00000014H
  002de	14		 DB	 20			; 00000014H
  002df	14		 DB	 20			; 00000014H
  002e0	14		 DB	 20			; 00000014H
  002e1	14		 DB	 20			; 00000014H
  002e2	14		 DB	 20			; 00000014H
  002e3	14		 DB	 20			; 00000014H
  002e4	14		 DB	 20			; 00000014H
  002e5	14		 DB	 20			; 00000014H
  002e6	14		 DB	 20			; 00000014H
  002e7	14		 DB	 20			; 00000014H
  002e8	14		 DB	 20			; 00000014H
  002e9	14		 DB	 20			; 00000014H
  002ea	14		 DB	 20			; 00000014H
  002eb	14		 DB	 20			; 00000014H
  002ec	14		 DB	 20			; 00000014H
  002ed	0c		 DB	 12			; 0000000cH
  002ee	14		 DB	 20			; 00000014H
  002ef	14		 DB	 20			; 00000014H
  002f0	14		 DB	 20			; 00000014H
  002f1	14		 DB	 20			; 00000014H
  002f2	14		 DB	 20			; 00000014H
  002f3	14		 DB	 20			; 00000014H
  002f4	14		 DB	 20			; 00000014H
  002f5	0d		 DB	 13			; 0000000dH
  002f6	14		 DB	 20			; 00000014H
  002f7	14		 DB	 20			; 00000014H
  002f8	14		 DB	 20			; 00000014H
  002f9	14		 DB	 20			; 00000014H
  002fa	14		 DB	 20			; 00000014H
  002fb	14		 DB	 20			; 00000014H
  002fc	14		 DB	 20			; 00000014H
  002fd	14		 DB	 20			; 00000014H
  002fe	14		 DB	 20			; 00000014H
  002ff	0e		 DB	 14			; 0000000eH
  00300	14		 DB	 20			; 00000014H
  00301	14		 DB	 20			; 00000014H
  00302	14		 DB	 20			; 00000014H
  00303	14		 DB	 20			; 00000014H
  00304	14		 DB	 20			; 00000014H
  00305	14		 DB	 20			; 00000014H
  00306	14		 DB	 20			; 00000014H
  00307	14		 DB	 20			; 00000014H
  00308	14		 DB	 20			; 00000014H
  00309	14		 DB	 20			; 00000014H
  0030a	14		 DB	 20			; 00000014H
  0030b	14		 DB	 20			; 00000014H
  0030c	14		 DB	 20			; 00000014H
  0030d	0f		 DB	 15			; 0000000fH
  0030e	14		 DB	 20			; 00000014H
  0030f	14		 DB	 20			; 00000014H
  00310	14		 DB	 20			; 00000014H
  00311	14		 DB	 20			; 00000014H
  00312	14		 DB	 20			; 00000014H
  00313	14		 DB	 20			; 00000014H
  00314	14		 DB	 20			; 00000014H
  00315	10		 DB	 16			; 00000010H
  00316	14		 DB	 20			; 00000014H
  00317	14		 DB	 20			; 00000014H
  00318	14		 DB	 20			; 00000014H
  00319	14		 DB	 20			; 00000014H
  0031a	14		 DB	 20			; 00000014H
  0031b	14		 DB	 20			; 00000014H
  0031c	14		 DB	 20			; 00000014H
  0031d	14		 DB	 20			; 00000014H
  0031e	14		 DB	 20			; 00000014H
  0031f	11		 DB	 17			; 00000011H
  00320	14		 DB	 20			; 00000014H
  00321	14		 DB	 20			; 00000014H
  00322	14		 DB	 20			; 00000014H
  00323	14		 DB	 20			; 00000014H
  00324	14		 DB	 20			; 00000014H
  00325	14		 DB	 20			; 00000014H
  00326	14		 DB	 20			; 00000014H
  00327	14		 DB	 20			; 00000014H
  00328	14		 DB	 20			; 00000014H
  00329	14		 DB	 20			; 00000014H
  0032a	14		 DB	 20			; 00000014H
  0032b	14		 DB	 20			; 00000014H
  0032c	14		 DB	 20			; 00000014H
  0032d	12		 DB	 18			; 00000012H
  0032e	13		 DB	 19			; 00000013H
?ComposeTone@@YA_W_W0@Z ENDP				; ComposeTone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?IsTone@@YA_N_W@Z
_TEXT	SEGMENT
_tone$ = 8						; size = 2
?IsTone@@YA_N_W@Z PROC					; IsTone, COMDAT

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	switch (tone)

  00003	0f b7 45 08	 movzx	 eax, WORD PTR _tone$[ebp]
  00007	05 00 fd ff ff	 add	 eax, -768		; fffffd00H
  0000c	83 f8 23	 cmp	 eax, 35			; 00000023H
  0000f	77 12		 ja	 SHORT $LN9@IsTone
  00011	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN11@IsTone[eax]
  00018	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN12@IsTone[eax*4]
$LN4@IsTone:

; 73   : 	{
; 74   : 	case 0x0300:
; 75   : 	case 0x0301:
; 76   : 	case 0x0309:
; 77   : 	case 0x0303:
; 78   : 	case 0x0323:
; 79   : 		return true;

  0001f	b0 01		 mov	 al, 1

; 82   : 	}
; 83   : }

  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
$LN9@IsTone:

; 80   : 	default:
; 81   : 		return false;

  00023	32 c0		 xor	 al, al

; 82   : 	}
; 83   : }

  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
  00027	90		 npad	 1
$LN12@IsTone:
  00028	00 00 00 00	 DD	 $LN4@IsTone
  0002c	00 00 00 00	 DD	 $LN9@IsTone
$LN11@IsTone:
  00030	00		 DB	 0
  00031	00		 DB	 0
  00032	01		 DB	 1
  00033	00		 DB	 0
  00034	01		 DB	 1
  00035	01		 DB	 1
  00036	01		 DB	 1
  00037	01		 DB	 1
  00038	01		 DB	 1
  00039	00		 DB	 0
  0003a	01		 DB	 1
  0003b	01		 DB	 1
  0003c	01		 DB	 1
  0003d	01		 DB	 1
  0003e	01		 DB	 1
  0003f	01		 DB	 1
  00040	01		 DB	 1
  00041	01		 DB	 1
  00042	01		 DB	 1
  00043	01		 DB	 1
  00044	01		 DB	 1
  00045	01		 DB	 1
  00046	01		 DB	 1
  00047	01		 DB	 1
  00048	01		 DB	 1
  00049	01		 DB	 1
  0004a	01		 DB	 1
  0004b	01		 DB	 1
  0004c	01		 DB	 1
  0004d	01		 DB	 1
  0004e	01		 DB	 1
  0004f	01		 DB	 1
  00050	01		 DB	 1
  00051	01		 DB	 1
  00052	01		 DB	 1
  00053	00		 DB	 0
?IsTone@@YA_N_W@Z ENDP					; IsTone
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z
_TEXT	SEGMENT
_tone$1 = -1						; size = 1
_wide$ = 8						; size = 4
_wideLen$ = 12						; size = 4
_letter$2 = 15						; size = 1
_multi$ = 16						; size = 4
_multiLen$ = 20						; size = 4
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z PROC	; EL_String_Encode_Vietnamese, COMDAT

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 593  : 	if (wideLen < 0)

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR _wideLen$[ebp]
  00008	56		 push	 esi
  00009	85 db		 test	 ebx, ebx
  0000b	79 18		 jns	 SHORT $LN4@EL_String_

; 594  : 	{
; 595  : 		wideLen = (int)wcslen(wide) + 1;

  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _wide$[ebp]
  00010	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
$LL15@EL_String_:
  00013	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00016	83 c1 02	 add	 ecx, 2
  00019	66 85 c0	 test	 ax, ax
  0001c	75 f5		 jne	 SHORT $LL15@EL_String_
  0001e	2b ca		 sub	 ecx, edx
  00020	d1 f9		 sar	 ecx, 1
  00022	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LN4@EL_String_:

; 596  : 	}
; 597  : 
; 598  : 	int src = 0;

  00025	33 f6		 xor	 esi, esi

; 599  : 	int dest = 0;

  00027	33 d2		 xor	 edx, edx

; 600  : 
; 601  : 	if (wideLen > 0)

  00029	85 db		 test	 ebx, ebx
  0002b	7e 5b		 jle	 SHORT $LN17@EL_String_
  0002d	57		 push	 edi
  0002e	8b 7d 14	 mov	 edi, DWORD PTR _multiLen$[ebp]
$LL2@EL_String_:

; 602  : 	{
; 603  : 		while (src < wideLen && dest < multiLen)

  00031	3b d7		 cmp	 edx, edi
  00033	7d 4a		 jge	 SHORT $LN16@EL_String_

; 604  : 		{
; 605  : 			char letter;
; 606  : 			if (DecomposeLetter(wide[src], &letter))

  00035	8d 45 0f	 lea	 eax, DWORD PTR _letter$2[ebp]
  00038	50		 push	 eax
  00039	8b 45 08	 mov	 eax, DWORD PTR _wide$[ebp]
  0003c	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?DecomposeLetter@@YA_N_WPAD@Z ; DecomposeLetter
  00046	8b 4d 10	 mov	 ecx, DWORD PTR _multi$[ebp]
  00049	83 c4 08	 add	 esp, 8
  0004c	84 c0		 test	 al, al
  0004e	74 07		 je	 SHORT $LN6@EL_String_

; 607  : 			{
; 608  : 				multi[dest++] = letter;

  00050	8a 45 0f	 mov	 al, BYTE PTR _letter$2[ebp]
  00053	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00056	42		 inc	 edx
$LN6@EL_String_:

; 609  : 			}
; 610  : 
; 611  : 			char tone;
; 612  : 			if (DecomposeTone(wide[src], &tone) && dest < multiLen)

  00057	8d 45 ff	 lea	 eax, DWORD PTR _tone$1[ebp]
  0005a	50		 push	 eax
  0005b	8b 45 08	 mov	 eax, DWORD PTR _wide$[ebp]
  0005e	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ?DecomposeTone@@YA_N_WPAD@Z ; DecomposeTone
  00068	83 c4 08	 add	 esp, 8
  0006b	84 c0		 test	 al, al
  0006d	74 0b		 je	 SHORT $LN7@EL_String_
  0006f	3b d7		 cmp	 edx, edi
  00071	7d 07		 jge	 SHORT $LN7@EL_String_

; 613  : 			{
; 614  : 				multi[dest++] = tone;

  00073	8a 45 ff	 mov	 al, BYTE PTR _tone$1[ebp]
  00076	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00079	42		 inc	 edx
$LN7@EL_String_:

; 615  : 			}
; 616  : 
; 617  : 			++src;

  0007a	46		 inc	 esi
  0007b	3b f3		 cmp	 esi, ebx
  0007d	7c b2		 jl	 SHORT $LL2@EL_String_
$LN16@EL_String_:
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi

; 618  : 		}
; 619  : 	}
; 620  : 
; 621  : 	return dest;

  00081	8b c2		 mov	 eax, edx

; 622  : }

  00083	5b		 pop	 ebx
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
$LN17@EL_String_:
  00088	5e		 pop	 esi

; 618  : 		}
; 619  : 	}
; 620  : 
; 621  : 	return dest;

  00089	8b c2		 mov	 eax, edx

; 622  : }

  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
?EL_String_Encode_Vietnamese@@YAHPB_WHPADH@Z ENDP	; EL_String_Encode_Vietnamese
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\StringCodec_Vietnamese.cpp
;	COMDAT ?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z
_TEXT	SEGMENT
_multi$ = 8						; size = 4
_multiLen$ = 12						; size = 4
_wide$ = 16						; size = 4
_wideLen$ = 20						; size = 4
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z PROC	; EL_String_Decode_Vietnamese, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 	if (multiLen < 0)

  00003	8b 55 08	 mov	 edx, DWORD PTR _multi$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _multiLen$[ebp]
  0000a	56		 push	 esi
  0000b	85 db		 test	 ebx, ebx
  0000d	79 11		 jns	 SHORT $LN4@EL_String_

; 194  : 	{
; 195  : 		multiLen = (int)strlen(multi) + 1;

  0000f	8b ca		 mov	 ecx, edx
  00011	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$LL15@EL_String_:
  00014	8a 01		 mov	 al, BYTE PTR [ecx]
  00016	41		 inc	 ecx
  00017	84 c0		 test	 al, al
  00019	75 f9		 jne	 SHORT $LL15@EL_String_
  0001b	2b ce		 sub	 ecx, esi
  0001d	8d 59 01	 lea	 ebx, DWORD PTR [ecx+1]
$LN4@EL_String_:

; 196  : 	}
; 197  : 
; 198  : 	int src = 0;
; 199  : 	int dest = 0;

  00020	33 f6		 xor	 esi, esi

; 200  : 
; 201  : 	if (multiLen > 0)

  00022	85 db		 test	 ebx, ebx
  00024	7e 74		 jle	 SHORT $LN17@EL_String_

; 202  : 	{
; 203  : 
; 204  : 		wchar_t prev = cp1258_to_unicode[(BYTE)multi[src++]];

  00026	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00029	57		 push	 edi
  0002a	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
  0002d	0f b7 0c 45 00
	00 00 00	 movzx	 ecx, WORD PTR ?cp1258_to_unicode@@3PA_WA[eax*2]

; 205  : 
; 206  : 		while (src < multiLen)

  00035	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
  00038	3b df		 cmp	 ebx, edi
  0003a	7e 4b		 jle	 SHORT $LN3@EL_String_
  0003c	0f 1f 40 00	 npad	 4
$LL2@EL_String_:

; 207  : 		{
; 208  : 			wchar_t unicode = cp1258_to_unicode[(BYTE)multi[src]];

  00040	0f b6 04 17	 movzx	 eax, BYTE PTR [edi+edx]
  00044	0f b7 14 45 00
	00 00 00	 movzx	 edx, WORD PTR ?cp1258_to_unicode@@3PA_WA[eax*2]

; 209  : 
; 210  : 
; 211  : 			if (IsTone(unicode))

  0004c	52		 push	 edx
  0004d	e8 00 00 00 00	 call	 ?IsTone@@YA_N_W@Z	; IsTone
  00052	83 c4 04	 add	 esp, 4
  00055	84 c0		 test	 al, al
  00057	74 12		 je	 SHORT $LN6@EL_String_

; 212  : 			{
; 213  : 
; 214  : 				prev = ComposeTone(prev, unicode);

  00059	52		 push	 edx
  0005a	51		 push	 ecx
  0005b	e8 00 00 00 00	 call	 ?ComposeTone@@YA_W_W0@Z	; ComposeTone
  00060	0f b7 c8	 movzx	 ecx, ax
  00063	83 c4 08	 add	 esp, 8

; 215  : 			}

  00066	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
  00069	eb 14		 jmp	 SHORT $LN7@EL_String_
$LN6@EL_String_:

; 216  : 			else
; 217  : 			{
; 218  : 
; 219  : 				if (dest < wideLen)

  0006b	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
  0006e	3b f0		 cmp	 esi, eax
  00070	7d 0b		 jge	 SHORT $LN8@EL_String_

; 220  : 				{
; 221  : 					wide[dest++] = prev;

  00072	8b 45 10	 mov	 eax, DWORD PTR _wide$[ebp]
  00075	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
  00079	46		 inc	 esi
  0007a	8b 45 14	 mov	 eax, DWORD PTR _wideLen$[ebp]
$LN8@EL_String_:

; 222  : 				}
; 223  : 				prev = unicode;

  0007d	8b ca		 mov	 ecx, edx
$LN7@EL_String_:

; 205  : 
; 206  : 		while (src < multiLen)

  0007f	8b 55 08	 mov	 edx, DWORD PTR _multi$[ebp]

; 224  : 			}
; 225  : 			++src;

  00082	47		 inc	 edi
  00083	3b fb		 cmp	 edi, ebx
  00085	7c b9		 jl	 SHORT $LL2@EL_String_
$LN3@EL_String_:

; 226  : 		}
; 227  : 
; 228  : 		if (dest < wideLen)

  00087	5f		 pop	 edi
  00088	3b f0		 cmp	 esi, eax
  0008a	7d 0e		 jge	 SHORT $LN17@EL_String_

; 229  : 		{
; 230  : 			wide[dest++] = prev;

  0008c	8b 45 10	 mov	 eax, DWORD PTR _wide$[ebp]
  0008f	66 89 0c 70	 mov	 WORD PTR [eax+esi*2], cx
  00093	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00096	5e		 pop	 esi

; 231  : 		}
; 232  : 	}
; 233  : 
; 234  : 	return dest;
; 235  : }

  00097	5b		 pop	 ebx
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
$LN17@EL_String_:
  0009a	8b c6		 mov	 eax, esi
  0009c	5e		 pop	 esi
  0009d	5b		 pop	 ebx
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?EL_String_Decode_Vietnamese@@YAHPBDHPA_WH@Z ENDP	; EL_String_Decode_Vietnamese
_TEXT	ENDS
END
