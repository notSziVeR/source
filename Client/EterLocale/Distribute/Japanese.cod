; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\Distribute\Japanese.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ShiftJIS_IsLeadByte@@YAHD@Z			; ShiftJIS_IsLeadByte
PUBLIC	?ShiftJIS_IsTrailByte@@YAHD@Z			; ShiftJIS_IsTrailByte
PUBLIC	?ShiftJIS_StringCompareCI@@YAHPBD0I@Z		; ShiftJIS_StringCompareCI
EXTRN	_tolower:PROC
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_StringCompareCI@@YAHPBD0I@Z
_TEXT	SEGMENT
_szStringLeft$ = 8					; size = 4
_szStringRight$ = 12					; size = 4
_sizeLength$ = 16					; size = 4
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z PROC		; ShiftJIS_StringCompareCI, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 27   : 	const unsigned char* uszString1 = (const unsigned char*) szStringLeft;
; 28   : 	const unsigned char* uszString2 = (const unsigned char*) szStringRight;

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _szStringRight$[ebp]
  00007	56		 push	 esi

; 29   : 	unsigned short c1, c2;
; 30   : 
; 31   : 	if ( sizeLength == 0 )

  00008	8b 75 10	 mov	 esi, DWORD PTR _sizeLength$[ebp]
  0000b	57		 push	 edi
$LN41@ShiftJIS_S:

; 32   : 	{
; 33   : 		return 0;
; 34   : 	}
; 35   : 	while ( sizeLength-- )

  0000c	85 f6		 test	 esi, esi
  0000e	0f 84 d9 00 00
	00		 je	 $LN31@ShiftJIS_S

; 36   : 	{
; 37   : 		c1 = *uszString1++;

  00014	8b 55 08	 mov	 edx, DWORD PTR _szStringLeft$[ebp]

; 38   : 		if ( MACRO_IsLeadByte(c1) )

  00017	b8 81 00 00 00	 mov	 eax, 129		; 00000081H
  0001c	4e		 dec	 esi
  0001d	bf 9f 00 00 00	 mov	 edi, 159		; 0000009fH
  00022	0f b6 0a	 movzx	 ecx, BYTE PTR [edx]
  00025	42		 inc	 edx
  00026	89 55 08	 mov	 DWORD PTR _szStringLeft$[ebp], edx
  00029	66 3b c1	 cmp	 ax, cx
  0002c	77 05		 ja	 SHORT $LN8@ShiftJIS_S
  0002e	66 3b cf	 cmp	 cx, di
  00031	76 0c		 jbe	 SHORT $LN7@ShiftJIS_S
$LN8@ShiftJIS_S:
  00033	8d 81 20 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-224]
  00039	66 83 f8 1c	 cmp	 ax, 28			; 0000001cH
  0003d	77 42		 ja	 SHORT $LN5@ShiftJIS_S
$LN7@ShiftJIS_S:

; 39   : 		{
; 40   : 			if ( sizeLength == 0 )

  0003f	85 f6		 test	 esi, esi
  00041	75 22		 jne	 SHORT $LN9@ShiftJIS_S

; 41   : 			{
; 42   : 				c1 = 0;
; 43   : 				c2 = MACRO_IsLeadByte( *uszString2 ) ? 0 : *uszString2;

  00043	8a 0b		 mov	 cl, BYTE PTR [ebx]
  00045	33 ff		 xor	 edi, edi
  00047	80 f9 81	 cmp	 cl, 129			; 00000081H
  0004a	72 09		 jb	 SHORT $LN24@ShiftJIS_S
  0004c	80 f9 9f	 cmp	 cl, 159			; 0000009fH
  0004f	0f 86 98 00 00
	00		 jbe	 $LN31@ShiftJIS_S
$LN24@ShiftJIS_S:
  00055	8d 41 20	 lea	 eax, DWORD PTR [ecx+32]
  00058	3c 1c		 cmp	 al, 28			; 0000001cH
  0005a	0f 86 8d 00 00
	00		 jbe	 $LN31@ShiftJIS_S
  00060	0f b6 c1	 movzx	 eax, cl

; 81   : 		}
; 82   : test:

  00063	eb 7a		 jmp	 SHORT $test$43
$LN9@ShiftJIS_S:

; 44   : 				goto test;
; 45   : 			}
; 46   : 			if ( *uszString1 == '\0' )

  00065	8a 02		 mov	 al, BYTE PTR [edx]
  00067	84 c0		 test	 al, al
  00069	75 04		 jne	 SHORT $LN11@ShiftJIS_S

; 47   : 			{
; 48   : 				c1 = 0;

  0006b	33 ff		 xor	 edi, edi

; 49   : 			}

  0006d	eb 1e		 jmp	 SHORT $LN6@ShiftJIS_S
$LN11@ShiftJIS_S:

; 50   : 			else
; 51   : 			{
; 52   : 				c1 = ((c1 << 8) | *uszString1++);

  0006f	c1 e1 08	 shl	 ecx, 8
  00072	0f b6 c0	 movzx	 eax, al
  00075	66 0b c8	 or	 cx, ax
  00078	42		 inc	 edx
  00079	0f b7 f9	 movzx	 edi, cx
  0007c	89 55 08	 mov	 DWORD PTR _szStringLeft$[ebp], edx

; 53   : 			}
; 54   : 		}

  0007f	eb 0c		 jmp	 SHORT $LN6@ShiftJIS_S
$LN5@ShiftJIS_S:

; 55   : 		else
; 56   : 		{
; 57   : 			c1 = tolower(c1);

  00081	51		 push	 ecx
  00082	e8 00 00 00 00	 call	 _tolower
  00087	83 c4 04	 add	 esp, 4
  0008a	0f b7 f8	 movzx	 edi, ax
$LN6@ShiftJIS_S:

; 58   : 		}
; 59   : 
; 60   : 		c2 = *uszString2++;

  0008d	0f b6 0b	 movzx	 ecx, BYTE PTR [ebx]

; 61   : 		if ( MACRO_IsLeadByte(c2) )

  00090	b8 81 00 00 00	 mov	 eax, 129		; 00000081H
  00095	43		 inc	 ebx
  00096	66 3b c1	 cmp	 ax, cx
  00099	77 0a		 ja	 SHORT $LN16@ShiftJIS_S
  0009b	b8 9f 00 00 00	 mov	 eax, 159		; 0000009fH
  000a0	66 3b c8	 cmp	 cx, ax
  000a3	76 0c		 jbe	 SHORT $LN15@ShiftJIS_S
$LN16@ShiftJIS_S:
  000a5	8d 81 20 ff ff
	ff		 lea	 eax, DWORD PTR [ecx-224]
  000ab	66 83 f8 1c	 cmp	 ax, 28			; 0000001cH
  000af	77 22		 ja	 SHORT $LN13@ShiftJIS_S
$LN15@ShiftJIS_S:

; 62   : 		{
; 63   : 			if ( sizeLength == 0 )

  000b1	85 f6		 test	 esi, esi
  000b3	75 04		 jne	 SHORT $LN17@ShiftJIS_S

; 64   : 			{
; 65   : 				c2 = 0;

  000b5	33 c0		 xor	 eax, eax

; 66   : 				goto test;

  000b7	eb 26		 jmp	 SHORT $test$43
$LN17@ShiftJIS_S:

; 67   : 			}
; 68   : 			sizeLength--;
; 69   : 			if ( *uszString2 == '\0' )

  000b9	8a 03		 mov	 al, BYTE PTR [ebx]
  000bb	4e		 dec	 esi
  000bc	84 c0		 test	 al, al
  000be	75 04		 jne	 SHORT $LN19@ShiftJIS_S

; 70   : 			{
; 71   : 				c2 = 0;

  000c0	33 c0		 xor	 eax, eax

; 72   : 			}

  000c2	eb 1b		 jmp	 SHORT $test$43
$LN19@ShiftJIS_S:

; 73   : 			else
; 74   : 			{
; 75   : 				c2 = ((c2 << 8) | *uszString2++);

  000c4	c1 e1 08	 shl	 ecx, 8
  000c7	0f b6 c0	 movzx	 eax, al
  000ca	66 0b c8	 or	 cx, ax
  000cd	43		 inc	 ebx
  000ce	0f b7 c1	 movzx	 eax, cx

; 76   : 			}
; 77   : 		}

  000d1	eb 0c		 jmp	 SHORT $test$43
$LN13@ShiftJIS_S:

; 78   : 		else
; 79   : 		{
; 80   : 			c2 = tolower(c2);

  000d3	51		 push	 ecx
  000d4	e8 00 00 00 00	 call	 _tolower
  000d9	83 c4 04	 add	 esp, 4
  000dc	0f b7 c0	 movzx	 eax, ax
$test$43:

; 83   : 		if (c1 != c2)

  000df	66 3b c7	 cmp	 ax, di
  000e2	75 10		 jne	 SHORT $LN39@ShiftJIS_S

; 86   : 		}
; 87   : 
; 88   : 		if (c1 == 0)

  000e4	66 85 ff	 test	 di, di
  000e7	0f 85 1f ff ff
	ff		 jne	 $LN41@ShiftJIS_S
$LN31@ShiftJIS_S:
  000ed	5f		 pop	 edi

; 89   : 		{
; 90   : 			return (0);
; 91   : 		}
; 92   : 	}
; 93   : 	return 0;
; 94   : }

  000ee	5e		 pop	 esi
  000ef	33 c0		 xor	 eax, eax
  000f1	5b		 pop	 ebx
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
$LN39@ShiftJIS_S:

; 84   : 		{
; 85   : 			return ( (c1 > c2) ? 1 : -1);

  000f4	1b c0		 sbb	 eax, eax
  000f6	5f		 pop	 edi
  000f7	83 e0 02	 and	 eax, 2

; 89   : 		{
; 90   : 			return (0);
; 91   : 		}
; 92   : 	}
; 93   : 	return 0;
; 94   : }

  000fa	5e		 pop	 esi
  000fb	48		 dec	 eax
  000fc	5b		 pop	 ebx
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?ShiftJIS_StringCompareCI@@YAHPBD0I@Z ENDP		; ShiftJIS_StringCompareCI
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_IsTrailByte@@YAHD@Z
_TEXT	SEGMENT
_chByte$ = 8						; size = 1
?ShiftJIS_IsTrailByte@@YAHD@Z PROC			; ShiftJIS_IsTrailByte, COMDAT

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 20   : 	const unsigned char byByte = (const unsigned char) chByte;

  00003	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]

; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  00006	3c 40		 cmp	 al, 64			; 00000040H
  00008	72 04		 jb	 SHORT $LN3@ShiftJIS_I
  0000a	3c 7e		 cmp	 al, 126			; 0000007eH
  0000c	76 06		 jbe	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  0000e	04 80		 add	 al, -128		; ffffff80H
  00010	3c 7c		 cmp	 al, 124			; 0000007cH
  00012	77 07		 ja	 SHORT $LN4@ShiftJIS_I
$LN5@ShiftJIS_I:
  00014	b8 01 00 00 00	 mov	 eax, 1

; 23   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@ShiftJIS_I:

; 21   : 
; 22   : 	return MACRO_IsTailByte( byByte );

  0001b	33 c0		 xor	 eax, eax

; 23   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?ShiftJIS_IsTrailByte@@YAHD@Z ENDP			; ShiftJIS_IsTrailByte
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLocale\Japanese.cpp
;	COMDAT ?ShiftJIS_IsLeadByte@@YAHD@Z
_TEXT	SEGMENT
_chByte$ = 8						; size = 1
?ShiftJIS_IsLeadByte@@YAHD@Z PROC			; ShiftJIS_IsLeadByte, COMDAT

; 12   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 13   : 	const unsigned char byByte = (const unsigned char) chByte;

  00003	8a 45 08	 mov	 al, BYTE PTR _chByte$[ebp]

; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  00006	3c 81		 cmp	 al, 129			; 00000081H
  00008	72 04		 jb	 SHORT $LN3@ShiftJIS_I
  0000a	3c 9f		 cmp	 al, 159			; 0000009fH
  0000c	76 06		 jbe	 SHORT $LN5@ShiftJIS_I
$LN3@ShiftJIS_I:
  0000e	04 20		 add	 al, 32			; 00000020H
  00010	3c 1c		 cmp	 al, 28			; 0000001cH
  00012	77 07		 ja	 SHORT $LN4@ShiftJIS_I
$LN5@ShiftJIS_I:
  00014	b8 01 00 00 00	 mov	 eax, 1

; 16   : }

  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@ShiftJIS_I:

; 14   : 
; 15   : 	return MACRO_IsLeadByte( byByte );

  0001b	33 c0		 xor	 eax, eax

; 16   : }

  0001d	5d		 pop	 ebp
  0001e	c3		 ret	 0
?ShiftJIS_IsLeadByte@@YAHD@Z ENDP			; ShiftJIS_IsLeadByte
_TEXT	ENDS
END
