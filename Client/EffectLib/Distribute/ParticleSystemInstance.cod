; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Distribute\ParticleSystemInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CDynamicPool<CParticleSystemInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8 ; CDynamicPool<CParticleSystemInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CDynamicPool<CParticleSystemInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z ; CDynamicPool<CParticleSystemInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
PUBLIC	??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CParticleSystemInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z:PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vector deleting destructor'
;	COMDAT ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CDynamicPool<CParticleSystemInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCParticleSystemInstance@@@@8 ; CDynamicPool<CParticleSystemInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8 DD 00H ; CDynamicPool<CParticleSystemInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CParticleSystemInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCParticleSystemInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCParticleSystemInstance@@@@6B@ DD 00H ; CDynamicPool<CParticleSystemInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCParticleSystemInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCParticleSystemInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDe'
	DB	'corator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDec'
	DB	'orator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpd'
	DB	'ateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@N'
	DB	'EffectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEff'
	DB	'ectUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffe'
	DB	'ctUpdateDecorator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecora'
	DB	'tor@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8 DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDeco'
	DB	'rator@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD 00H ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@@8
	DD	FLAT:??_R3?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ DD FLAT:??_R4?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`vftable'
	DD	FLAT:??_E?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?DestroySystem@CParticleSystemInstance@@SAXXZ	; CParticleSystemInstance::DestroySystem
PUBLIC	?New@CParticleSystemInstance@@SAPAV1@XZ		; CParticleSystemInstance::New
PUBLIC	?Delete@CParticleSystemInstance@@SAXPAV1@@Z	; CParticleSystemInstance::Delete
PUBLIC	??0CParticleSystemInstance@@QAE@XZ		; CParticleSystemInstance::CParticleSystemInstance
PUBLIC	??1CParticleSystemInstance@@UAE@XZ		; CParticleSystemInstance::~CParticleSystemInstance
PUBLIC	?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z ; CParticleSystemInstance::OnSetDataPointer
PUBLIC	?CreateParticles@CParticleSystemInstance@@QAEXM@Z ; CParticleSystemInstance::CreateParticles
PUBLIC	?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ; CParticleSystemInstance::GetEmissionCount
PUBLIC	?IsSpecialRender@CParticleSystemInstance@@QBE_NXZ ; CParticleSystemInstance::IsSpecialRender
PUBLIC	?SetSpecialRender@CParticleSystemInstance@@QAEXXZ ; CParticleSystemInstance::SetSpecialRender
PUBLIC	?OnInitialize@CParticleSystemInstance@@MAEXXZ	; CParticleSystemInstance::OnInitialize
PUBLIC	?OnDestroy@CParticleSystemInstance@@MAEXXZ	; CParticleSystemInstance::OnDestroy
PUBLIC	?OnUpdate@CParticleSystemInstance@@MAE_NM@Z	; CParticleSystemInstance::OnUpdate
PUBLIC	?OnRender@CParticleSystemInstance@@MAEXXZ	; CParticleSystemInstance::OnRender
PUBLIC	?deallocate@?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@QAEXQAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@2@I@Z ; std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > >::deallocate
PUBLIC	??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength
PUBLIC	??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >
PUBLIC	?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
PUBLIC	??_GCParticleSystemInstance@@UAEPAXI@Z		; CParticleSystemInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
PUBLIC	?Delete@?$CDynamicPool@VCParticleSystemInstance@@@@KAXPAVCParticleSystemInstance@@@Z ; CDynamicPool<CParticleSystemInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength
PUBLIC	??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>
PUBLIC	??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>
PUBLIC	??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
PUBLIC	??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
PUBLIC	??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
PUBLIC	??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
PUBLIC	?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
PUBLIC	??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>
PUBLIC	??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
PUBLIC	?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
PUBLIC	?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A ; CParticleSystemInstance::ms_kPool
PUBLIC	??_7CParticleSystemInstance@@6B@		; CParticleSystemInstance::`vftable'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CParticleSystemInstance@@6B@		; CParticleSystemInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCParticleSystemInstance@@@8		; CParticleSystemInstance `RTTI Type Descriptor'
PUBLIC	??_R3CParticleSystemInstance@@8			; CParticleSystemInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CParticleSystemInstance@@8			; CParticleSystemInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CParticleSystemInstance@@8	; CParticleSystemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CEffectElementBaseInstance@@8	; CEffectElementBaseInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCEffectElementBaseInstance@@@8		; CEffectElementBaseInstance `RTTI Type Descriptor'
PUBLIC	??_R3CEffectElementBaseInstance@@8		; CEffectElementBaseInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CEffectElementBaseInstance@@8		; CEffectElementBaseInstance::`RTTI Base Class Array'
PUBLIC	__real@00000000
PUBLIC	__real@3727c5ac
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@42652ee0
PUBLIC	__real@42c80000
PUBLIC	__real@447a0000
PUBLIC	__real@c2c80000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXVec3TransformNormal@12:PROC
EXTRN	?random@@YAKXZ:PROC				; random
EXTRN	?frandom@@YAMMM@Z:PROC				; frandom
EXTRN	?random_range@@YAJJJ@Z:PROC			; random_range
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z:PROC ; CEffectElementBase::GetPosition
EXTRN	?GetEmitterShape@CEmitterProperty@@QAEEXZ:PROC	; CEmitterProperty::GetEmitterShape
EXTRN	?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ:PROC ; CEmitterProperty::GetEmitterAdvancedType
EXTRN	?isEmitFromEdge@CEmitterProperty@@QAEHXZ:PROC	; CEmitterProperty::isEmitFromEdge
EXTRN	?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingSize
EXTRN	?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingAngularVelocity
EXTRN	?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingDirectionX
EXTRN	?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingDirectionY
EXTRN	?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingDirectionZ
EXTRN	?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmittingVelocity
EXTRN	?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetEmissionCountPerSecond
EXTRN	?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetParticleLifeTime
EXTRN	?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetParticleSizeX
EXTRN	?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z:PROC ; CEmitterProperty::GetParticleSizeY
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTextureReference
EXTRN	?New@CGraphicImageInstance@@SAPAV1@XZ:PROC	; CGraphicImageInstance::New
EXTRN	?Delete@CGraphicImageInstance@@SAXPAV1@@Z:PROC	; CGraphicImageInstance::Delete
EXTRN	?GetEmitterPropertyPointer@CParticleSystemData@@QAEPAVCEmitterProperty@@XZ:PROC ; CParticleSystemData::GetEmitterPropertyPointer
EXTRN	?GetParticlePropertyPointer@CParticleSystemData@@QAEPAVCParticleProperty@@XZ:PROC ; CParticleSystemData::GetParticlePropertyPointer
EXTRN	?BuildDecorator@CParticleSystemData@@QAEXPAVCParticleInstance@@@Z:PROC ; CParticleSystemData::BuildDecorator
EXTRN	??0CEffectElementBaseInstance@@QAE@XZ:PROC	; CEffectElementBaseInstance::CEffectElementBaseInstance
EXTRN	??1CEffectElementBaseInstance@@UAE@XZ:PROC	; CEffectElementBaseInstance::~CEffectElementBaseInstance
EXTRN	?Initialize@CEffectElementBaseInstance@@QAEXXZ:PROC ; CEffectElementBaseInstance::Initialize
EXTRN	?Destroy@CEffectElementBaseInstance@@QAEXXZ:PROC ; CEffectElementBaseInstance::Destroy
EXTRN	?isActive@CEffectElementBaseInstance@@QAE_NXZ:PROC ; CEffectElementBaseInstance::isActive
EXTRN	?GetRadiusApproximation@CParticleInstance@@QAEMXZ:PROC ; CParticleInstance::GetRadiusApproximation
EXTRN	?Update@CParticleInstance@@QAEHMM@Z:PROC	; CParticleInstance::Update
EXTRN	?New@CParticleInstance@@SAPAV1@XZ:PROC		; CParticleInstance::New
EXTRN	?DestroySystem@CParticleInstance@@SAXXZ:PROC	; CParticleInstance::DestroySystem
EXTRN	?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z:PROC ; CParticleInstance::Transform
EXTRN	?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z:PROC ; CParticleInstance::Transform
EXTRN	?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ:PROC ; CParticleInstance::GetParticleMeshPointer
EXTRN	?DeleteThis@CParticleInstance@@QAEXXZ:PROC	; CParticleInstance::DeleteThis
EXTRN	?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z:PROC ; Frustum::ViewVolumeTest
EXTRN	?Identity@CScreen@@SAXXZ:PROC			; CScreen::Identity
EXTRN	??_ECParticleSystemInstance@@UAEPAXI@Z:PROC	; CParticleSystemInstance::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CIatan2:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	?ms_frustum@CScreen@@1VFrustum@@A:BYTE		; CScreen::ms_frustum
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CParticleSystemInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CParticleSystemInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R2CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R2CEffectElementBaseInstance@@8 DD FLAT:??_R1A@?0A@EA@CEffectElementBaseInstance@@8 ; CEffectElementBaseInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R3CEffectElementBaseInstance@@8 DD 00H		; CEffectElementBaseInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCEffectElementBaseInstance@@@8
data$rs	SEGMENT
??_R0?AVCEffectElementBaseInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CEffectElementBaseInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCEffectElementBaseInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CEffectElementBaseInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CEffectElementBaseInstance@@8 DD FLAT:??_R0?AVCEffectElementBaseInstance@@@8 ; CEffectElementBaseInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CParticleSystemInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CParticleSystemInstance@@8 DD FLAT:??_R0?AVCParticleSystemInstance@@@8 ; CParticleSystemInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CParticleSystemInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CParticleSystemInstance@@8
rdata$r	SEGMENT
??_R2CParticleSystemInstance@@8 DD FLAT:??_R1A@?0A@EA@CParticleSystemInstance@@8 ; CParticleSystemInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CEffectElementBaseInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CParticleSystemInstance@@8
rdata$r	SEGMENT
??_R3CParticleSystemInstance@@8 DD 00H			; CParticleSystemInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CParticleSystemInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCParticleSystemInstance@@@8
data$rs	SEGMENT
??_R0?AVCParticleSystemInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CParticleSystemInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCParticleSystemInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CParticleSystemInstance@@6B@
rdata$r	SEGMENT
??_R4CParticleSystemInstance@@6B@ DD 00H		; CParticleSystemInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCParticleSystemInstance@@@8
	DD	FLAT:??_R3CParticleSystemInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CParticleSystemInstance@@6B@
CONST	SEGMENT
??_7CParticleSystemInstance@@6B@ DD FLAT:??_R4CParticleSystemInstance@@6B@ ; CParticleSystemInstance::`vftable'
	DD	FLAT:??_ECParticleSystemInstance@@UAEPAXI@Z
	DD	FLAT:?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z
	DD	FLAT:?OnInitialize@CParticleSystemInstance@@MAEXXZ
	DD	FLAT:?OnDestroy@CParticleSystemInstance@@MAEXXZ
	DD	FLAT:?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
	DD	FLAT:?OnRender@CParticleSystemInstance@@MAEXXZ
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@ ; CParticleSystemInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A
_DATA	SEGMENT
?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A DD FLAT:??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@ ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z$0
__ehfuncinfo$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Attach_head@U?$_List_simple_types@PAVCParticleInstance@@@std@@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXAAV?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
__ehfuncinfo$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$2
__ehfuncinfo$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Construct_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PAVCParticleInstance@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z$2
__ehfuncinfo$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$construct@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@AAV12@@?$_Default_allocator_traits@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@1@QAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@AAV31@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z$2
__ehfuncinfo$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace_back@AAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAEXAAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$3
__ehfuncinfo$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@PAV12@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@00AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$6 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	04H
	DD	05H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$6
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$4
	DD	02H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$5
	DD	0ffffffffH
	DD	00H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z$0
__ehfuncinfo$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABQAVCParticleInstance@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@1@ABQAVCParticleInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z$1
__ehfuncinfo$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@ABQAVCParticleInstance@@@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEPAU?$_List_node@PAVCParticleInstance@@PAX@1@QAU21@ABQAVCParticleInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z$1
__ehfuncinfo$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAEXABQAVCParticleInstance@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z$2
__ehfuncinfo$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCParticleSystemInstance@@@@QAEPAVCParticleSystemInstance@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z$1
__ehfuncinfo$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateParticles@CParticleSystemInstance@@QAEXM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateParticles@CParticleSystemInstance@@QAEXM@Z$1
__ehfuncinfo$?CreateParticles@CParticleSystemInstance@@QAEXM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateParticles@CParticleSystemInstance@@QAEXM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CParticleSystemInstance@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$2
__ehfuncinfo$??0CParticleSystemInstance@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CParticleSystemInstance@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CParticleSystemInstance@@SAPAV1@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CParticleSystemInstance@@SAPAV1@XZ$0
__ehfuncinfo$?New@CParticleSystemInstance@@SAPAV1@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CParticleSystemInstance@@SAPAV1@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; ??ms_kPool$initializer$@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >, COMDAT
; _this$ = ecx

; 733  :         if (_Added == 0) {

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 2f		 je	 SHORT $LN3@List_node_

; 734  :             return;
; 735  :         }
; 736  : 
; 737  :         _Construct_in_place(_Head->_Prev, pointer{});

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00009	56		 push	 esi
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 738  :         _Construct_in_place(_Tail->_Next, pointer{});

  00011	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 739  :         pointer _Subject = _Head;

  0001a	8b 71 0c	 mov	 esi, DWORD PTR [ecx+12]

; 740  :         while (_Subject) {

  0001d	85 f6		 test	 esi, esi
  0001f	74 13		 je	 SHORT $LN36@List_node_
$LL2@List_node_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00021	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00023	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00025	6a 0c		 push	 12			; 0000000cH
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 740  :         while (_Subject) {

  00030	85 f6		 test	 esi, esi
  00032	75 ed		 jne	 SHORT $LL2@List_node_
$LN36@List_node_:
  00034	5e		 pop	 esi
$LN3@List_node_:

; 741  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 742  :         }
; 743  :     }

  00035	c3		 ret	 0
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT
; _this$ = ecx

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00000	ff 71 08	 push	 DWORD PTR [ecx+8]
  00003	ff 71 04	 push	 DWORD PTR [ecx+4]
  00006	ff 31		 push	 DWORD PTR [ecx]
  00008	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1659 :     }

  00010	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCParticleSystemInstance@@PAPAV1@@std@@YAPAPAVCParticleSystemInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CParticleSystemInstance * *,CParticleSystemInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00028	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0002b	8b 5d 10	 mov	 ebx, DWORD PTR __Al$[ebp]
  0002e	89 75 e8	 mov	 DWORD PTR __Backout$[ebp], esi
  00031	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi
  00034	89 5d f0	 mov	 DWORD PTR __Backout$[ebp+8], ebx

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00037	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00041	85 ff		 test	 edi, edi
  00043	74 34		 je	 SHORT $LN3@Uninitiali
  00045	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@Uninitiali:

; 77   :         return ::operator new(_Bytes);

  00050	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00058	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0005f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00064	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00067	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  00069	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  0006c	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  0006e	83 c6 08	 add	 esi, 8
  00071	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00074	83 ef 01	 sub	 edi, 1
  00077	75 d7		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00079	53		 push	 ebx
  0007a	56		 push	 esi
  0007b	56		 push	 esi
  0007c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  00084	8b c6		 mov	 eax, esi

; 1907 : }

  00086	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00089	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00090	59		 pop	 ecx
  00091	5f		 pop	 edi
  00092	5e		 pop	 esi
  00093	5b		 pop	 ebx
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Appended$2 = -108					; size = 16
__Backout$3 = -92					; size = 12
__Newnode$4 = -80					; size = 8
__Newnode$5 = -72					; size = 8
__Newvec$ = -64						; size = 4
__Appended_first$ = -60					; size = 4
__Al$ = -56						; size = 4
__Backout$2$ = -52					; size = 4
__ULast$1$ = -48					; size = 4
tv1186 = -44						; size = 4
__Appended_last$ = -40					; size = 4
tv1192 = -36						; size = 4
__UFirst$1$ = -32					; size = 4
__Appended$3$ = -28					; size = 4
__Newcapacity$ = -24					; size = 4
__Newvec$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d cc	 mov	 DWORD PTR __Backout$2$[ebp], edi

; 1575 :         if (_Newsize > max_size()) {

  00030	81 7d 08 ff ff
	ff 1f		 cmp	 DWORD PTR __Newsize$[ebp], 536870911 ; 1fffffffH
  00037	0f 87 5b 02 00
	00		 ja	 $LN273@Resize_rea

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00040	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00045	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00047	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0004a	2b 37		 sub	 esi, DWORD PTR [edi]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004c	c1 f9 03	 sar	 ecx, 3

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004f	8b d1		 mov	 edx, ecx

; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00051	c1 fe 03	 sar	 esi, 3

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00054	d1 ea		 shr	 edx, 1
  00056	2b c2		 sub	 eax, edx

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();

  00058	89 7d c8	 mov	 DWORD PTR __Al$[ebp], edi

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005b	3b c8		 cmp	 ecx, eax
  0005d	76 1f		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0005f	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00064	c7 45 e8 ff ff
	ff 1f		 mov	 DWORD PTR __Newcapacity$[ebp], 536870911 ; 1fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006b	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0006c	89 45 dc	 mov	 DWORD PTR tv1192[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00074	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00077	83 c4 04	 add	 esp, 4
  0007a	8b d8		 mov	 ebx, eax
  0007c	eb 55		 jmp	 SHORT $LN269@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0007e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00081	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00084	3b c2		 cmp	 eax, edx
  00086	73 22		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00088	8b c2		 mov	 eax, edx
  0008a	89 45 e8	 mov	 DWORD PTR __Newcapacity$[ebp], eax
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0008d	c1 e0 03	 shl	 eax, 3
  00090	89 45 dc	 mov	 DWORD PTR tv1192[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00093	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00098	72 20		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0009a	50		 push	 eax
  0009b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a0	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  000a3	83 c4 04	 add	 esp, 4
  000a6	8b d8		 mov	 ebx, eax
  000a8	eb 29		 jmp	 SHORT $LN269@Resize_rea
$LN11@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2039 :         return _Geometric; // geometric growth is sufficient

  000aa	89 45 e8	 mov	 DWORD PTR __Newcapacity$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  000ad	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  000b2	0f 87 e5 01 00
	00		 ja	 $LN274@Resize_rea
  000b8	eb d3		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 13		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000c4	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]

; 77   :         return ::operator new(_Bytes);

  000c7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ca	8b d8		 mov	 ebx, eax
  000cc	89 45 ec	 mov	 DWORD PTR __Newvec$1$[ebp], eax
  000cf	eb 05		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000d1	33 db		 xor	 ebx, ebx
$LN269@Resize_rea:

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d3	89 5d ec	 mov	 DWORD PTR __Newvec$1$[ebp], ebx
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000d6	8d 0c f3	 lea	 ecx, DWORD PTR [ebx+esi*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d9	89 5d c0	 mov	 DWORD PTR __Newvec$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000dc	57		 push	 edi
  000dd	2b d6		 sub	 edx, esi
  000df	89 4d c4	 mov	 DWORD PTR __Appended_first$[ebp], ecx
  000e2	52		 push	 edx
  000e3	51		 push	 ecx
  000e4	89 4d d8	 mov	 DWORD PTR __Appended_last$[ebp], ecx
  000e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ee	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 1597 :         }
; 1598 : 
; 1599 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 1601 :         } else {
; 1602 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  000f3	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1691 :     auto _UFirst = _Get_unwrapped(_STD move(_First));

  000f9	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000fb	89 45 d8	 mov	 DWORD PTR __Appended_last$[ebp], eax

; 1597 :         }
; 1598 : 
; 1599 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);
; 1601 :         } else {
; 1602 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);

  000fe	89 55 d0	 mov	 DWORD PTR __ULast$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1691 :     auto _UFirst = _Get_unwrapped(_STD move(_First));

  00101	89 4d e0	 mov	 DWORD PTR __UFirst$1$[ebp], ecx

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00104	89 5d a4	 mov	 DWORD PTR __Backout$3[ebp], ebx
  00107	89 5d a8	 mov	 DWORD PTR __Backout$3[ebp+4], ebx
  0010a	89 7d ac	 mov	 DWORD PTR __Backout$3[ebp+8], edi

; 1715 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

  0010d	8b 45 a0	 mov	 eax, DWORD PTR __Appended$2[ebp+12]
  00110	89 45 e4	 mov	 DWORD PTR __Appended$3$[ebp], eax
$LN271@Resize_rea:

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  00113	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00117	3b ca		 cmp	 ecx, edx
  00119	0f 84 d8 00 00
	00		 je	 $LN30@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  0011f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 618  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  00125	33 ff		 xor	 edi, edi

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00127	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0012e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00130	89 45 d4	 mov	 DWORD PTR tv1186[ebp], eax

; 618  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  00133	89 5d 94	 mov	 DWORD PTR __Appended$2[ebp], ebx
  00136	89 7d 98	 mov	 DWORD PTR __Appended$2[ebp+4], edi

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00139	8b 30		 mov	 esi, DWORD PTR [eax]

; 655  :         if (_First == _Last) { // throws

  0013b	3b f0		 cmp	 esi, eax
  0013d	74 5b		 je	 SHORT $LN59@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0013f	89 5d b8	 mov	 DWORD PTR __Newnode$5[ebp], ebx

; 77   :         return ::operator new(_Bytes);

  00142	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 659  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  00144	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00148	89 7d bc	 mov	 DWORD PTR __Newnode$5[ebp+4], edi

; 77   :         return ::operator new(_Bytes);

  0014b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 662  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  00150	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00153	83 c4 04	 add	 esp, 4
  00156	89 45 e4	 mov	 DWORD PTR __Appended$3$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 666  :             ++_Added;

  00159	bf 01 00 00 00	 mov	 edi, 1
  0015e	89 45 a0	 mov	 DWORD PTR __Appended$2[ebp+12], eax
  00161	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN270@Resize_rea:

; 667  :             ++_First; // throws
; 668  :         }
; 669  : 
; 670  :         while (_First != _Last) { // throws

  00164	8b 36		 mov	 esi, DWORD PTR [esi]
  00166	89 7d 98	 mov	 DWORD PTR __Appended$2[ebp+4], edi
  00169	89 45 9c	 mov	 DWORD PTR __Appended$2[ebp+8], eax
  0016c	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Newnode$5[ebp+4], 0
  00173	3b 75 d4	 cmp	 esi, DWORD PTR tv1186[ebp]
  00176	74 22		 je	 SHORT $LN59@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00178	6a 0c		 push	 12			; 0000000cH

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0017a	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Newnode$5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00181	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 672  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), *_First); // throws

  00186	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00189	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 676  :             ++_Added;

  0018c	47		 inc	 edi
  0018d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00190	8b 4d 9c	 mov	 ecx, DWORD PTR __Appended$2[ebp+8]
  00193	89 01		 mov	 DWORD PTR [ecx], eax
  00195	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 677  :             ++_First; // throws
; 678  :         }

  00198	eb ca		 jmp	 SHORT $LN270@Resize_rea
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0019a	89 5d b0	 mov	 DWORD PTR __Newnode$4[ebp], ebx

; 77   :         return ::operator new(_Bytes);

  0019d	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 713  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  0019f	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+12], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001a3	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  001aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  001af	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  001b2	c7 45 98 00 00
	00 00		 mov	 DWORD PTR __Appended$2[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 716  :         if (_Local_added == 0) {

  001b9	85 ff		 test	 edi, edi
  001bb	75 07		 jne	 SHORT $LN138@Resize_rea

; 717  :             _Construct_in_place(_Newnode._Ptr->_Next, _Newnode._Ptr);

  001bd	89 00		 mov	 DWORD PTR [eax], eax

; 718  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Newnode._Ptr);

  001bf	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 719  :         } else {

  001c2	eb 10		 jmp	 SHORT $LN139@Resize_rea
$LN138@Resize_rea:

; 720  :             const auto _Local_head = _Head;
; 721  :             const auto _Local_tail = _Tail;
; 722  :             _Construct_in_place(_Newnode._Ptr->_Next, _Local_head);

  001c4	8b 55 e4	 mov	 edx, DWORD PTR __Appended$3$[ebp]

; 723  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Local_tail);

  001c7	8b 4d 9c	 mov	 ecx, DWORD PTR __Appended$2[ebp+8]
  001ca	89 10		 mov	 DWORD PTR [eax], edx
  001cc	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 724  :             _Construct_in_place(_Local_head->_Prev, _Newnode._Ptr);

  001cf	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 725  :             _Construct_in_place(_Local_tail->_Next, _Newnode._Ptr);

  001d2	89 01		 mov	 DWORD PTR [ecx], eax
$LN139@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  001d4	8b 4d e0	 mov	 ecx, DWORD PTR __UFirst$1$[ebp]
  001d7	8b 55 d0	 mov	 edx, DWORD PTR __ULast$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 728  :         _List_data._Mysize = _Local_added;

  001da	89 7b 04	 mov	 DWORD PTR [ebx+4], edi

; 729  :         _List_data._Myhead = _Newnode._Release();

  001dd	89 03		 mov	 DWORD PTR [ebx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  001df	83 c3 08	 add	 ebx, 8

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  001e2	83 c1 08	 add	 ecx, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  001e5	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR __Newnode$4[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  001ec	89 5d a8	 mov	 DWORD PTR __Backout$3[ebp+4], ebx

; 1716 :     for (; _UFirst != _ULast; ++_UFirst) {

  001ef	89 4d e0	 mov	 DWORD PTR __UFirst$1$[ebp], ecx
  001f2	e9 1c ff ff ff	 jmp	 $LN271@Resize_rea
$LN30@Resize_rea:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  001f7	8b 7d cc	 mov	 edi, DWORD PTR __Backout$2$[ebp]
  001fa	57		 push	 edi
  001fb	53		 push	 ebx
  001fc	53		 push	 ebx
  001fd	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00202	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00204	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00207	85 c0		 test	 eax, eax
  00209	74 3b		 je	 SHORT $LN235@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0020b	57		 push	 edi
  0020c	ff 77 04	 push	 DWORD PTR [edi+4]
  0020f	50		 push	 eax
  00210	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00215	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00218	83 c4 0c	 add	 esp, 12			; 0000000cH
  0021b	8b 07		 mov	 eax, DWORD PTR [edi]
  0021d	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0021f	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00222	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00228	72 12		 jb	 SHORT $LN245@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0022a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0022d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00230	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00232	83 c0 fc	 add	 eax, -4			; fffffffcH
  00235	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00238	77 68		 ja	 SHORT $LN242@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0023a	8b c2		 mov	 eax, edx
$LN245@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0023c	51		 push	 ecx
  0023d	50		 push	 eax
  0023e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00243	83 c4 08	 add	 esp, 8
$LN235@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00246	8b 4d ec	 mov	 ecx, DWORD PTR __Newvec$1$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00249	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0024c	89 0f		 mov	 DWORD PTR [edi], ecx
  0024e	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00251	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00254	8b 45 dc	 mov	 eax, DWORD PTR tv1192[ebp]
  00257	03 c1		 add	 eax, ecx
  00259	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 1611 :     }

  0025c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0025f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00266	59		 pop	 ecx
  00267	5f		 pop	 edi
  00268	5e		 pop	 esi
  00269	5b		 pop	 ebx
  0026a	8b e5		 mov	 esp, ebp
  0026c	5d		 pop	 ebp
  0026d	c2 08 00	 ret	 8
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1603 :         }
; 1604 :         _CATCH_ALL
; 1605 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

  00270	8b 75 c8	 mov	 esi, DWORD PTR __Al$[ebp]
  00273	56		 push	 esi
  00274	ff 75 d8	 push	 DWORD PTR __Appended_last$[ebp]
  00277	ff 75 c4	 push	 DWORD PTR __Appended_first$[ebp]
  0027a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  0027f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1606 :         _Al.deallocate(_Newvec, _Newcapacity);

  00282	8b ce		 mov	 ecx, esi
  00284	ff 75 e8	 push	 DWORD PTR __Newcapacity$[ebp]
  00287	ff 75 c0	 push	 DWORD PTR __Newvec$[ebp]
  0028a	e8 00 00 00 00	 call	 ?deallocate@?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@QAEXQAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@2@I@Z ; std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > >::deallocate

; 1607 :         _RERAISE;

  0028f	6a 00		 push	 0
  00291	6a 00		 push	 0
  00293	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN273@Resize_rea:

; 1576 :             _Xlength();

  00298	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength
$LN274@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0029d	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN242@Resize_rea:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a2	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN268@Resize_rea:
  002a7	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$2:
  00000	8d 4d a4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~_Uninitialized_backout_al<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$3:
  00008	8d 4d 94	 lea	 ecx, DWORD PTR __Appended$2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<CParticleInstance *,void *> > >
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$4:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR __Newnode$5[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z$5:
  00018	8d 4d b0	 lea	 ecx, DWORD PTR __Newnode$4[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
  0003d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv495 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN66@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN67@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv495[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 921  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN66@Emplace_re:

; 888  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN67@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN64@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 0c		 push	 12			; 0000000cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCRotationDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CRotationDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCGravityDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CGravityDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CAirResistanceDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCNullDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CNullDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A ; CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool'', COMDAT

; 280  : template <class T> CDynamicPoolEx<T> CPooledObject<T>::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@?$CPooledObject@VCHeaderDecorator@NEffectUpdateDecorator@@@@1V?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CPooledObject<NEffectUpdateDecorator::CHeaderDecorator>::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@KAXPAVCHeaderDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCHeaderDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CHeaderDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@KAXPAVCNullDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCNullDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CNullDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCWDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationCCWDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationCCWDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@KAXPAVCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCTextureAnimationRandomDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CTextureAnimationRandomDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@KAXPAVCAirResistanceDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCAirResistanceDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CAirResistanceDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@KAXPAVCGravityDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCGravityDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CGravityDecorator>
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAEPAXI@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete, COMDAT

; 232  : 		::operator delete (pkData);

  00000	e9 00 00 00 00	 jmp	 ??3@YAXPAX@Z		; operator delete
?Delete@?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@KAXPAVCRotationDecorator@NEffectUpdateDecorator@@@Z ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ PROC ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>, COMDAT
; _this$ = ecx

; 136  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0002d	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00030	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00033	3b f3		 cmp	 esi, ebx
  00035	74 11		 je	 SHORT $LN19@CDynamicPo
$LL20@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00037	ff 36		 push	 DWORD PTR [esi]
  00039	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0003e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 232  : 		::operator delete (pkData);

  00041	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00044	3b f3		 cmp	 esi, ebx
  00046	75 ef		 jne	 SHORT $LL20@CDynamicPo
$LN19@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004b	3b 47 08	 cmp	 eax, DWORD PTR [edi+8]
  0004e	74 03		 je	 SHORT $LN26@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00050	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN26@CDynamicPo:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00053	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00056	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00059	74 03		 je	 SHORT $LN29@CDynamicPo

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005b	89 47 14	 mov	 DWORD PTR [edi+20], eax
$LN29@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 41		 je	 SHORT $LN35@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN51@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 7b		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN51@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  0008b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00092	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00095	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2114 :             _Myend   = nullptr;

  0009c	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
$LN35@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  000a3	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a6	85 c0		 test	 eax, eax
  000a8	74 41		 je	 SHORT $LN60@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000aa	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  000ad	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000af	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b8	72 12		 jb	 SHORT $LN76@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000bd	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000c0	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000c8	77 33		 ja	 SHORT $LN73@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000ca	8b c2		 mov	 eax, edx
$LN76@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000cc	51		 push	 ecx
  000cd	50		 push	 eax
  000ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  000d3	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000da	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  000dd	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 2114 :             _Myend   = nullptr;

  000e4	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN60@CDynamicPo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 146  : 	}

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	5b		 pop	 ebx
  000f9	8b e5		 mov	 esp, ebp
  000fb	5d		 pop	 ebp
  000fc	c3		 ret	 0
$LN73@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fd	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN86@CDynamicPo:
  00102	cc		 int	 3
  00103	cc		 int	 3
  00104	cc		 int	 3
  00105	cc		 int	 3
  00106	cc		 int	 3
  00107	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$CDynamicPoolEx@VCRotationDecorator@NEffectUpdateDecorator@@@@UAE@XZ ENDP ; CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>::~CDynamicPoolEx<NEffectUpdateDecorator::CRotationDecorator>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0000b	3b fb		 cmp	 edi, ebx
  0000d	74 39		 je	 SHORT $LN3@Destroy_ra
  0000f	56		 push	 esi
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00010	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  00012	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00015	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  0001b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0001d	85 c0		 test	 eax, eax
  0001f	74 13		 je	 SHORT $LN17@Destroy_ra
$LL18@Destroy_ra:

; 329  :             _Pnext = _Pnode->_Next;

  00021	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 0c		 push	 12			; 0000000cH
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0002e	8b c6		 mov	 eax, esi
  00030	85 f6		 test	 esi, esi
  00032	75 ed		 jne	 SHORT $LL18@Destroy_ra
$LN17@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00034	6a 0c		 push	 12			; 0000000cH
  00036	ff 37		 push	 DWORD PTR [edi]
  00038	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {

  0003d	83 c7 08	 add	 edi, 8

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {

  00043	3b fb		 cmp	 edi, ebx
  00045	75 c9		 jne	 SHORT $LL4@Destroy_ra
  00047	5e		 pop	 esi
$LN3@Destroy_ra:
  00048	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00049	5b		 pop	 ebx
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -44					; size = 4
tv348 = -40						; size = 4
tv309 = -40						; size = 4
_dwFrameIndex$1$ = -36					; size = 4
_FunObj$GSCopy$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>, COMDAT
; _this$ = ecx

; 25   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _FunObj$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	89 45 e0	 mov	 DWORD PTR _FunObj$GSCopy$1$[ebp], eax

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00019	33 c9		 xor	 ecx, ecx
  0001b	89 5d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001e	89 4d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00021	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00024	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  00027	2b c2		 sub	 eax, edx
  00029	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 9a 01 00
	00		 je	 $LN69@ForEachPar
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ForEachPar:

; 28   : 		{
; 29   : 			STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00040	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00049	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0005f	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  00062	8b 4d dc	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]
  00065	8b 04 c8	 mov	 eax, DWORD PTR [eax+ecx*8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00068	8b 30		 mov	 esi, DWORD PTR [eax]
  0006a	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0006c	0f 84 43 01 00
	00		 je	 $LN2@ForEachPar
$LL41@ForEachPar:

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00072	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  00075	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00078	8b cf		 mov	 ecx, edi
  0007a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0007e	74 42		 je	 SHORT $LN31@ForEachPar

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  00080	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  00085	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00088	d9 5d d8	 fstp	 DWORD PTR tv309[ebp]
  0008b	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00090	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00095	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  0009a	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0009d	f3 0f 58 47 0c	 addss	 xmm0, DWORD PTR [edi+12]
  000a2	f3 0f 58 57 10	 addss	 xmm2, DWORD PTR [edi+16]
  000a7	f3 0f 58 4f 14	 addss	 xmm1, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000ac	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000b1	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv309[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 38   : 		y = b;

  000b6	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000bb	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000c0	eb 2e		 jmp	 SHORT $LN72@ForEachPar
$LN31@ForEachPar:

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000c2	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000c7	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000cc	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000cf	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000d4	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  000d9	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000de	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000e3	d9 5d d8	 fstp	 DWORD PTR tv348[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 39   : 		z = c;

  000e6	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000eb	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR tv348[ebp]
$LN72@ForEachPar:

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  000f0	51		 push	 ecx
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00101	83 f8 02	 cmp	 eax, 2
  00104	0f 95 c0	 setne	 al
  00107	84 c0		 test	 al, al
  00109	75 0e		 jne	 SHORT $LN8@ForEachPar
  0010b	38 43 04	 cmp	 BYTE PTR [ebx+4], al
  0010e	75 09		 jne	 SHORT $LN8@ForEachPar
  00110	38 43 68	 cmp	 BYTE PTR [ebx+104], al
  00113	0f 84 b3 00 00
	00		 je	 $LN70@ForEachPar
$LN8@ForEachPar:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 407  : 		pInstance->Transform(pmat);

  00119	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 43   : 				FunObj(*itor);

  0011c	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 407  : 		pInstance->Transform(pmat);

  0011f	8b cb		 mov	 ecx, ebx
  00121	ff 30		 push	 DWORD PTR [eax]
  00123	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform

; 408  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00128	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012e	8b cb		 mov	 ecx, ebx
  00130	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00135	6a 14		 push	 20			; 00000014H
  00137	50		 push	 eax
  00138	6a 02		 push	 2
  0013a	6a 05		 push	 5
  0013c	8b cf		 mov	 ecx, edi
  0013e	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 409  : 		pInstance->Transform(pmat, D3DXToRadian(-60.0f));

  00143	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
  00146	51		 push	 ecx
  00147	c7 04 24 92 0a
	86 bf		 mov	 DWORD PTR [esp], -1081734510 ; bf860a92H
  0014e	8b cb		 mov	 ecx, ebx
  00150	ff 30		 push	 DWORD PTR [eax]
  00152	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform

; 410  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00157	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0015d	8b cb		 mov	 ecx, ebx
  0015f	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00164	6a 14		 push	 20			; 00000014H
  00166	50		 push	 eax
  00167	6a 02		 push	 2
  00169	6a 05		 push	 5
  0016b	8b cf		 mov	 ecx, edi
  0016d	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 411  : 		pInstance->Transform(pmat, D3DXToRadian(+60.0f));

  00172	8b 45 e0	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
  00175	51		 push	 ecx
  00176	c7 04 24 92 0a
	86 3f		 mov	 DWORD PTR [esp], 1065749138 ; 3f860a92H
  0017d	8b cb		 mov	 ecx, ebx
  0017f	ff 30		 push	 DWORD PTR [eax]
  00181	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform

; 412  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00186	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0018c	8b cb		 mov	 ecx, ebx
  0018e	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00193	6a 14		 push	 20			; 00000014H
  00195	50		 push	 eax
  00196	6a 02		 push	 2
  00198	6a 05		 push	 5
  0019a	8b cf		 mov	 ecx, edi
  0019c	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001a1	8b 5d d4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 198  :         return this->_Ptr == _Right._Ptr;

  001a4	8b 4d dc	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  001a7	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  001a9	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 198  :         return this->_Ptr == _Right._Ptr;

  001ac	3b 34 c8	 cmp	 esi, DWORD PTR [eax+ecx*8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  001af	0f 85 bd fe ff
	ff		 jne	 $LL41@ForEachPar
$LN2@ForEachPar:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001b5	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  001b8	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001b9	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  001bc	2b c2		 sub	 eax, edx
  001be	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  001c1	89 4d dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
  001c4	3b c8		 cmp	 ecx, eax
  001c6	0f 82 74 fe ff
	ff		 jb	 $LL4@ForEachPar
$LN70@ForEachPar:
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
$LN69@ForEachPar:

; 44   : 			}
; 45   : 		}
; 46   : 	}

  001ce	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d1	33 cd		 xor	 ecx, ebp
  001d3	5b		 pop	 ebx
  001d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d9	8b e5		 mov	 esp, ebp
  001db	5d		 pop	 ebp
  001dc	c2 04 00	 ret	 4
??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -44					; size = 4
_FunObj$GSCopy$1$ = -40					; size = 4
tv348 = -36						; size = 4
tv309 = -36						; size = 4
_dwFrameIndex$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>, COMDAT
; _this$ = ecx

; 25   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _FunObj$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	89 45 d8	 mov	 DWORD PTR _FunObj$GSCopy$1$[ebp], eax

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00019	33 c9		 xor	 ecx, ecx
  0001b	89 5d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001e	89 4d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00021	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00024	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  00027	2b c2		 sub	 eax, edx
  00029	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 73 01 00
	00		 je	 $LN69@ForEachPar
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ForEachPar:

; 28   : 		{
; 29   : 			STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00040	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00049	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0005f	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  00062	8b 4d e0	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]
  00065	8b 04 c8	 mov	 eax, DWORD PTR [eax+ecx*8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00068	8b 30		 mov	 esi, DWORD PTR [eax]
  0006a	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0006c	0f 84 1c 01 00
	00		 je	 $LN2@ForEachPar
$LL41@ForEachPar:

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00072	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  00075	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00078	8b cf		 mov	 ecx, edi
  0007a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0007e	74 42		 je	 SHORT $LN31@ForEachPar

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  00080	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  00085	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00088	d9 5d dc	 fstp	 DWORD PTR tv309[ebp]
  0008b	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00090	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00095	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  0009a	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0009d	f3 0f 58 47 0c	 addss	 xmm0, DWORD PTR [edi+12]
  000a2	f3 0f 58 57 10	 addss	 xmm2, DWORD PTR [edi+16]
  000a7	f3 0f 58 4f 14	 addss	 xmm1, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000ac	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000b1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv309[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 38   : 		y = b;

  000b6	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000bb	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000c0	eb 2e		 jmp	 SHORT $LN72@ForEachPar
$LN31@ForEachPar:

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000c2	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000c7	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000cc	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000cf	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000d4	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  000d9	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000de	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000e3	d9 5d dc	 fstp	 DWORD PTR tv348[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 39   : 		z = c;

  000e6	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv348[ebp]
$LN72@ForEachPar:

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  000f0	51		 push	 ecx
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00101	83 f8 02	 cmp	 eax, 2
  00104	0f 95 c0	 setne	 al
  00107	84 c0		 test	 al, al
  00109	75 0e		 jne	 SHORT $LN8@ForEachPar
  0010b	38 43 04	 cmp	 BYTE PTR [ebx+4], al
  0010e	75 09		 jne	 SHORT $LN8@ForEachPar
  00110	38 43 68	 cmp	 BYTE PTR [ebx+104], al
  00113	0f 84 8c 00 00
	00		 je	 $LN70@ForEachPar
$LN8@ForEachPar:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 389  : 		pInstance->Transform(pmat, D3DXToRadian(-30.0f));

  00119	8b 45 d8	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 43   : 				FunObj(*itor);

  0011c	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 389  : 		pInstance->Transform(pmat, D3DXToRadian(-30.0f));

  0011f	51		 push	 ecx
  00120	c7 04 24 92 0a
	06 bf		 mov	 DWORD PTR [esp], -1090123118 ; bf060a92H
  00127	8b cb		 mov	 ecx, ebx
  00129	ff 30		 push	 DWORD PTR [eax]
  0012b	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform

; 390  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00130	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00136	8b cb		 mov	 ecx, ebx
  00138	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  0013d	6a 14		 push	 20			; 00000014H
  0013f	50		 push	 eax
  00140	6a 02		 push	 2
  00142	6a 05		 push	 5
  00144	8b cf		 mov	 ecx, edi
  00146	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 391  : 
; 392  : 		pInstance->Transform(pmat, D3DXToRadian(+30.0f));

  0014b	8b 45 d8	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
  0014e	51		 push	 ecx
  0014f	c7 04 24 92 0a
	06 3f		 mov	 DWORD PTR [esp], 1057360530 ; 3f060a92H
  00156	8b cb		 mov	 ecx, ebx
  00158	ff 30		 push	 DWORD PTR [eax]
  0015a	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@M@Z ; CParticleInstance::Transform

; 393  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  0015f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00165	8b cb		 mov	 ecx, ebx
  00167	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  0016c	6a 14		 push	 20			; 00000014H
  0016e	50		 push	 eax
  0016f	6a 02		 push	 2
  00171	6a 05		 push	 5
  00173	8b cf		 mov	 ecx, edi
  00175	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0017a	8b 5d d4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 198  :         return this->_Ptr == _Right._Ptr;

  0017d	8b 4d e0	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00180	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00182	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 198  :         return this->_Ptr == _Right._Ptr;

  00185	3b 34 c8	 cmp	 esi, DWORD PTR [eax+ecx*8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  00188	0f 85 e4 fe ff
	ff		 jne	 $LL41@ForEachPar
$LN2@ForEachPar:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0018e	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00191	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00192	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  00195	2b c2		 sub	 eax, edx
  00197	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  0019a	89 4d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
  0019d	3b c8		 cmp	 ecx, eax
  0019f	0f 82 9b fe ff
	ff		 jb	 $LL4@ForEachPar
$LN70@ForEachPar:
  001a5	5f		 pop	 edi
  001a6	5e		 pop	 esi
$LN69@ForEachPar:

; 44   : 			}
; 45   : 		}
; 46   : 	}

  001a7	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001aa	33 cd		 xor	 ecx, ebp
  001ac	5b		 pop	 ebx
  001ad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c2 04 00	 ret	 4
??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -44					; size = 4
_FunObj$GSCopy$1$ = -40					; size = 4
tv348 = -36						; size = 4
tv309 = -36						; size = 4
_dwFrameIndex$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>, COMDAT
; _this$ = ecx

; 25   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _FunObj$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	89 45 d8	 mov	 DWORD PTR _FunObj$GSCopy$1$[ebp], eax

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00019	33 c9		 xor	 ecx, ecx
  0001b	89 5d d4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0001e	89 4d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00021	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  00024	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  00027	2b c2		 sub	 eax, edx
  00029	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 38 01 00
	00		 je	 $LN69@ForEachPar
  00034	56		 push	 esi
  00035	57		 push	 edi
  00036	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL4@ForEachPar:

; 28   : 		{
; 29   : 			STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00040	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00043	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00049	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0004e	8b c8		 mov	 ecx, eax
  00050	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00055	50		 push	 eax
  00056	6a 00		 push	 0
  00058	8b ce		 mov	 ecx, esi
  0005a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0005f	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  00062	8b 4d e0	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]
  00065	8b 04 c8	 mov	 eax, DWORD PTR [eax+ecx*8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00068	8b 30		 mov	 esi, DWORD PTR [eax]
  0006a	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0006c	0f 84 e1 00 00
	00		 je	 $LN2@ForEachPar
$LL41@ForEachPar:

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00072	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  00075	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00078	8b cf		 mov	 ecx, edi
  0007a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0007e	74 42		 je	 SHORT $LN31@ForEachPar

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  00080	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  00085	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00088	d9 5d dc	 fstp	 DWORD PTR tv309[ebp]
  0008b	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00090	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00095	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  0009a	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0009d	f3 0f 58 47 0c	 addss	 xmm0, DWORD PTR [edi+12]
  000a2	f3 0f 58 57 10	 addss	 xmm2, DWORD PTR [edi+16]
  000a7	f3 0f 58 4f 14	 addss	 xmm1, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000ac	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000b1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv309[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 38   : 		y = b;

  000b6	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000bb	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000c0	eb 2e		 jmp	 SHORT $LN72@ForEachPar
$LN31@ForEachPar:

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000c2	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000c7	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000cc	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000cf	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000d4	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  000d9	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000de	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000e3	d9 5d dc	 fstp	 DWORD PTR tv348[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 39   : 		z = c;

  000e6	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000eb	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv348[ebp]
$LN72@ForEachPar:

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  000f0	51		 push	 ecx
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  00101	83 f8 02	 cmp	 eax, 2
  00104	0f 95 c0	 setne	 al
  00107	84 c0		 test	 al, al
  00109	75 0a		 jne	 SHORT $LN8@ForEachPar
  0010b	38 43 04	 cmp	 BYTE PTR [ebx+4], al
  0010e	75 05		 jne	 SHORT $LN8@ForEachPar
  00110	38 43 68	 cmp	 BYTE PTR [ebx+104], al
  00113	74 55		 je	 SHORT $LN70@ForEachPar
$LN8@ForEachPar:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 434  : 		pInstance->Transform(pmat);

  00115	8b 45 d8	 mov	 eax, DWORD PTR _FunObj$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 43   : 				FunObj(*itor);

  00118	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 434  : 		pInstance->Transform(pmat);

  0011b	8b cf		 mov	 ecx, edi
  0011d	ff 30		 push	 DWORD PTR [eax]
  0011f	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform

; 435  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00124	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012a	8b cf		 mov	 ecx, edi
  0012c	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  00131	6a 14		 push	 20			; 00000014H
  00133	50		 push	 eax
  00134	6a 02		 push	 2
  00136	6a 05		 push	 5
  00138	8b cb		 mov	 ecx, ebx
  0013a	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0013f	8b 5d d4	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 198  :         return this->_Ptr == _Right._Ptr;

  00142	8b 4d e0	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00145	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00147	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 198  :         return this->_Ptr == _Right._Ptr;

  0014a	3b 34 c8	 cmp	 esi, DWORD PTR [eax+ecx*8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0014d	0f 85 1f ff ff
	ff		 jne	 $LL41@ForEachPar
$LN2@ForEachPar:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00153	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00156	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00157	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  0015a	2b c2		 sub	 eax, edx
  0015c	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  0015f	89 4d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
  00162	3b c8		 cmp	 ecx, eax
  00164	0f 82 d6 fe ff
	ff		 jb	 $LL4@ForEachPar
$LN70@ForEachPar:
  0016a	5f		 pop	 edi
  0016b	5e		 pop	 esi
$LN69@ForEachPar:

; 44   : 			}
; 45   : 		}
; 46   : 	}

  0016c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016f	33 cd		 xor	 ecx, ebp
  00171	5b		 pop	 ebx
  00172	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c2 04 00	 ret	 4
??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h
;	COMDAT ??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -40					; size = 4
tv348 = -36						; size = 4
tv309 = -36						; size = 4
_dwFrameIndex$1$ = -32					; size = 4
$T1 = -28						; size = 12
$T2 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_FunObj$ = 8						; size = 4
??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z PROC ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>, COMDAT
; _this$ = ecx

; 25   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b d9		 mov	 ebx, ecx

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00013	33 c9		 xor	 ecx, ecx
  00015	89 5d d8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  00018	89 4d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001b	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
  0001e	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  00021	2b c2		 sub	 eax, edx
  00023	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00026	85 c0		 test	 eax, eax
  00028	0f 84 2b 01 00
	00		 je	 $LN69@ForEachPar
  0002e	56		 push	 esi
  0002f	57		 push	 edi
$LL4@ForEachPar:

; 28   : 		{
; 29   : 			STATEMANAGER.SetTexture(0, m_kVct_pkImgInst[dwFrameIndex]->GetTextureReference().GetD3DTexture());

  00030	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00033	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00039	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0003e	8b c8		 mov	 ecx, eax
  00040	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00045	50		 push	 eax
  00046	6a 00		 push	 0
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0004f	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  00052	8b 4d e0	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]
  00055	8b 04 c8	 mov	 eax, DWORD PTR [eax+ecx*8]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00058	8b 30		 mov	 esi, DWORD PTR [eax]
  0005a	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0005c	0f 84 de 00 00
	00		 je	 $LN2@ForEachPar
$LL41@ForEachPar:

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00062	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  00065	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 57   : 		if (m_pParticleProperty->m_bAttachFlag)

  00068	8b cf		 mov	 ecx, edi
  0006a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0006e	74 42		 je	 SHORT $LN31@ForEachPar

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  00070	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
  00075	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00078	d9 5d dc	 fstp	 DWORD PTR tv309[ebp]
  0007b	f3 0f 10 40 30	 movss	 xmm0, DWORD PTR [eax+48]
  00080	f3 0f 10 50 34	 movss	 xmm2, DWORD PTR [eax+52]
  00085	f3 0f 10 48 38	 movss	 xmm1, DWORD PTR [eax+56]
  0008a	8d 45 f0	 lea	 eax, DWORD PTR $T2[ebp]
  0008d	f3 0f 58 47 0c	 addss	 xmm0, DWORD PTR [edi+12]
  00092	f3 0f 58 57 10	 addss	 xmm2, DWORD PTR [edi+16]
  00097	f3 0f 58 4f 14	 addss	 xmm1, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  0009c	f3 0f 11 45 f0	 movss	 DWORD PTR $T2[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000a1	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv309[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 38   : 		y = b;

  000a6	f3 0f 11 55 f4	 movss	 DWORD PTR $T2[ebp+4], xmm2

; 39   : 		z = c;

  000ab	f3 0f 11 4d f8	 movss	 DWORD PTR $T2[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 58   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(

  000b0	eb 2e		 jmp	 SHORT $LN72@ForEachPar
$LN31@ForEachPar:

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000b2	e8 00 00 00 00	 call	 ?GetRadiusApproximation@CParticleInstance@@QAEMXZ ; CParticleInstance::GetRadiusApproximation
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000b7	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000bc	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 37   : 		x = a;

  000bf	f3 0f 11 45 e4	 movss	 DWORD PTR $T1[ebp], xmm0

; 38   : 		y = b;

  000c4	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  000c9	f3 0f 11 45 e8	 movss	 DWORD PTR $T1[ebp+4], xmm0

; 39   : 		z = c;

  000ce	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000d3	d9 5d dc	 fstp	 DWORD PTR tv348[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\SphereLib\vector.h

; 39   : 		z = c;

  000d6	f3 0f 11 45 ec	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 65   : 			return CScreen::GetFrustum().ViewVolumeTest(Vector3d(pInstance->m_v3Position.x, pInstance->m_v3Position.y, pInstance->m_v3Position.z), pInstance->GetRadiusApproximation()) != VS_OUTSIDE;

  000db	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv348[ebp]
$LN72@ForEachPar:

; 32   : 			{
; 33   : #ifdef INGAME_WIKI
; 34   : 				if ((!InFrustum(*itor) && !m_wikiIgnoreFrustum)
; 35   : #else
; 36   : 				if (!InFrustum(*itor))
; 37   : #endif
; 38   : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 39   : 					&& !m_isSpecialRender

  000e0	51		 push	 ecx
  000e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e6	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  000eb	50		 push	 eax
  000ec	e8 00 00 00 00	 call	 ?ViewVolumeTest@Frustum@@QBE?AW4ViewState@@ABVVector3d@@M@Z ; Frustum::ViewVolumeTest
  000f1	83 f8 02	 cmp	 eax, 2
  000f4	0f 95 c0	 setne	 al
  000f7	84 c0		 test	 al, al
  000f9	75 0a		 jne	 SHORT $LN8@ForEachPar
  000fb	38 43 04	 cmp	 BYTE PTR [ebx+4], al
  000fe	75 05		 jne	 SHORT $LN8@ForEachPar
  00100	38 43 68	 cmp	 BYTE PTR [ebx+104], al
  00103	74 52		 je	 SHORT $LN70@ForEachPar
$LN8@ForEachPar:

; 40   : #endif
; 41   : 					)
; 42   : 					return;
; 43   : 				FunObj(*itor);

  00105	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 420  : 		pInstance->Transform();

  00108	8b cf		 mov	 ecx, edi
  0010a	6a 00		 push	 0
  0010c	e8 00 00 00 00	 call	 ?Transform@CParticleInstance@@QAEXPBUD3DXMATRIX@@@Z ; CParticleInstance::Transform

; 421  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, pInstance->GetParticleMeshPointer(), sizeof(TPTVertex));

  00111	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00117	8b cf		 mov	 ecx, edi
  00119	e8 00 00 00 00	 call	 ?GetParticleMeshPointer@CParticleInstance@@QAEPAUSPTVertex@@XZ ; CParticleInstance::GetParticleMeshPointer
  0011e	6a 14		 push	 20			; 00000014H
  00120	50		 push	 eax
  00121	6a 02		 push	 2
  00123	6a 05		 push	 5
  00125	8b cb		 mov	 ecx, ebx
  00127	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0012c	8b 5d d8	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]

; 198  :         return this->_Ptr == _Right._Ptr;

  0012f	8b 4d e0	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00132	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00134	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 198  :         return this->_Ptr == _Right._Ptr;

  00137	3b 34 c8	 cmp	 esi, DWORD PTR [eax+ecx*8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 31   : 			for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end(); ++itor)

  0013a	0f 85 22 ff ff
	ff		 jne	 $LL41@ForEachPar
$LN2@ForEachPar:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00140	8b 43 54	 mov	 eax, DWORD PTR [ebx+84]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  00143	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00144	8b 53 50	 mov	 edx, DWORD PTR [ebx+80]
  00147	2b c2		 sub	 eax, edx
  00149	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.h

; 27   : 		for (dwFrameIndex = 0; dwFrameIndex < m_kVct_pkImgInst.size(); dwFrameIndex++)

  0014c	89 4d e0	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], ecx
  0014f	3b c8		 cmp	 ecx, eax
  00151	0f 82 d9 fe ff
	ff		 jb	 $LL4@ForEachPar
$LN70@ForEachPar:
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
$LN69@ForEachPar:

; 44   : 			}
; 45   : 		}
; 46   : 	}

  00159	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015c	33 cd		 xor	 ecx, ebp
  0015e	5b		 pop	 ebx
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 04 00	 ret	 4
??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z ENDP ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CParticleSystemInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A ; CParticleSystemInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CParticleSystemInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CParticleSystemInstance::ms_kPool'', COMDAT

; 8    : CDynamicPool<CParticleSystemInstance>	CParticleSystemInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CParticleSystemInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CParticleSystemInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CParticleSystemInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCParticleSystemInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CParticleSystemInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCParticleSystemInstance@@@@KAXPAVCParticleSystemInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCParticleSystemInstance@@@@KAXPAVCParticleSystemInstance@@@Z PROC ; CDynamicPool<CParticleSystemInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCParticleSystemInstance@@@@KAXPAVCParticleSystemInstance@@@Z ENDP ; CDynamicPool<CParticleSystemInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ PROC ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCParticleSystemInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCParticleSystemInstance@@@@UAE@XZ ENDP ; CDynamicPool<CParticleSystemInstance>::~CDynamicPool<CParticleSystemInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCParticleSystemInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCParticleSystemInstance@@UAEPAXI@Z PROC		; CParticleSystemInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CParticleSystemInstance@@UAE@XZ ; CParticleSystemInstance::~CParticleSystemInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 6c		 push	 108			; 0000006cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCParticleSystemInstance@@UAEPAXI@Z ENDP		; CParticleSystemInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXQAPAVCGraphicImageInstance@@II@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1665 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1666 :         auto& _Al         = _Getal();
; 1667 :         auto& _My_data    = _Mypair._Myval2;
; 1668 :         pointer& _Myfirst = _My_data._Myfirst;
; 1669 :         pointer& _Mylast  = _My_data._Mylast;
; 1670 : 
; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN55@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 77   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicImageInstance@@PAPAV1@@std@@YAPAPAVCGraphicImageInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicImageInstance * *,CGraphicImageInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN39@Reallocate

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN49@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN46@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN49@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN39@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1687 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN46@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN53@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ PROC ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 835  :     }

  0004a	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00050	cc		 int	 3
??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 4f		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00009	56		 push	 esi
  0000a	ff 76 04	 push	 DWORD PTR [esi+4]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	83 c4 0c	 add	 esp, 12			; 0000000cH
  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001d	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00020	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00026	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00028	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0002e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00030	83 c0 fc	 add	 eax, -4			; fffffffcH
  00033	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00036	77 22		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00038	8b c2		 mov	 eax, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003a	51		 push	 ecx
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00041	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00047	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00051	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00058	5e		 pop	 esi

; 835  :     }

  00059	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  0005f	cc		 int	 3
??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@QAEXQAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@QAEXQAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@2@I@Z PROC ; std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > >::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0000d	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8

; 831  :     }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00038	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003d	cc		 int	 3
?deallocate@?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@QAEXQAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@2@I@Z ENDP ; std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnRender@CParticleSystemInstance@@MAEXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -8						; size = 4
$T3 = -8						; size = 4
$T4 = -8						; size = 4
$T5 = -8						; size = 4
$T6 = -1						; size = 1
?OnRender@CParticleSystemInstance@@MAEXXZ PROC		; CParticleSystemInstance::OnRender, COMDAT
; _this$ = ecx

; 441  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 442  : 	CScreen::Identity();

  00009	e8 00 00 00 00	 call	 ?Identity@CScreen@@SAXXZ ; CScreen::Identity

; 443  : 	STATEMANAGER.SetRenderState(D3DRS_SRCBLEND, m_pParticleProperty->m_bySrcBlendType);

  0000e	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00017	0f b6 40 10	 movzx	 eax, BYTE PTR [eax+16]
  0001b	50		 push	 eax
  0001c	6a 13		 push	 19			; 00000013H
  0001e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 444  : 	STATEMANAGER.SetRenderState(D3DRS_DESTBLEND, m_pParticleProperty->m_byDestBlendType);

  00023	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00026	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0002c	0f b6 40 11	 movzx	 eax, BYTE PTR [eax+17]
  00030	50		 push	 eax
  00031	6a 14		 push	 20			; 00000014H
  00033	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 445  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, m_pParticleProperty->m_byColorOperationType);

  00038	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00041	0f b6 40 12	 movzx	 eax, BYTE PTR [eax+18]
  00045	50		 push	 eax
  00046	6a 01		 push	 1
  00048	6a 00		 push	 0
  0004a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 446  : 	if (m_pParticleProperty->m_byBillboardType < BILLBOARD_TYPE_2FACE)

  0004f	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00052	8a 48 13	 mov	 cl, BYTE PTR [eax+19]
  00055	80 f9 04	 cmp	 cl, 4
  00058	73 2a		 jae	 SHORT $LN2@OnRender

; 447  : 	{
; 448  : 		if (!m_pParticleProperty->m_bAttachFlag)

  0005a	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0005e	8b ce		 mov	 ecx, esi
  00060	75 0e		 jne	 SHORT $LN4@OnRender

; 449  : 		{
; 450  : 			ForEachParticleRendering(NParticleRenderer::NormalRenderer());

  00062	8d 45 ff	 lea	 eax, DWORD PTR $T6[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UNormalRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUNormalRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::NormalRenderer>
  0006b	5e		 pop	 esi

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN4@OnRender:

; 428  : 		: pmat(pmat)

  00070	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00073	89 45 f8	 mov	 DWORD PTR $T5[ebp], eax

; 451  : 		}
; 452  : 		else
; 453  : 		{
; 454  : 			ForEachParticleRendering(NParticleRenderer::AttachRenderer(mc_pmatLocal));

  00076	8d 45 f8	 lea	 eax, DWORD PTR $T5[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UAttachRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUAttachRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::AttachRenderer>
  0007f	5e		 pop	 esi

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
$LN2@OnRender:

; 455  : 		}
; 456  : 	}
; 457  : 	else if (m_pParticleProperty->m_byBillboardType == BILLBOARD_TYPE_2FACE)

  00084	75 31		 jne	 SHORT $LN6@OnRender

; 458  : 	{
; 459  : 		if (!m_pParticleProperty->m_bAttachFlag)

  00086	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0008a	8b ce		 mov	 ecx, esi
  0008c	75 15		 jne	 SHORT $LN8@OnRender

; 460  : 		{
; 461  : 			ForEachParticleRendering(NParticleRenderer::TwoSideRenderer());

  0008e	8d 45 f8	 lea	 eax, DWORD PTR $T4[ebp]

; 383  : 		: pmat(pmat)

  00091	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp], 0

; 460  : 		{
; 461  : 			ForEachParticleRendering(NParticleRenderer::TwoSideRenderer());

  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
  0009e	5e		 pop	 esi

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  0009f	8b e5		 mov	 esp, ebp
  000a1	5d		 pop	 ebp
  000a2	c3		 ret	 0
$LN8@OnRender:

; 383  : 		: pmat(pmat)

  000a3	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a6	89 45 f8	 mov	 DWORD PTR $T3[ebp], eax

; 462  : 		}
; 463  : 		else
; 464  : 		{
; 465  : 			ForEachParticleRendering(NParticleRenderer::TwoSideRenderer(mc_pmatLocal));

  000a9	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
  000ac	50		 push	 eax
  000ad	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UTwoSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUTwoSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::TwoSideRenderer>
  000b2	5e		 pop	 esi

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
$LN6@OnRender:

; 466  : 		}
; 467  : 	}
; 468  : 	else if (m_pParticleProperty->m_byBillboardType == BILLBOARD_TYPE_3FACE)

  000b7	80 f9 05	 cmp	 cl, 5
  000ba	75 2c		 jne	 SHORT $LN12@OnRender

; 469  : 	{
; 470  : 		if (!m_pParticleProperty->m_bAttachFlag)

  000bc	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000c0	8b ce		 mov	 ecx, esi
  000c2	75 15		 jne	 SHORT $LN11@OnRender

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  000c4	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]

; 401  : 		: pmat(pmat)

  000c7	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
  000d4	5e		 pop	 esi
  000d5	8b e5		 mov	 esp, ebp
  000d7	5d		 pop	 ebp
  000d8	c3		 ret	 0
$LN11@OnRender:

; 401  : 		: pmat(pmat)

  000d9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000dc	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax

; 471  : 		{
; 472  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer());
; 473  : 		}
; 474  : 		else
; 475  : 		{
; 476  : 			ForEachParticleRendering(NParticleRenderer::ThreeSideRenderer(mc_pmatLocal));
; 477  : 		}
; 478  : 	}
; 479  : }

  000df	8d 45 f8	 lea	 eax, DWORD PTR $T1[ebp]
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 ??$ForEachParticleRendering@UThreeSideRenderer@NParticleRenderer@@@CParticleSystemInstance@@QAEXAAUThreeSideRenderer@NParticleRenderer@@@Z ; CParticleSystemInstance::ForEachParticleRendering<NParticleRenderer::ThreeSideRenderer>
$LN12@OnRender:
  000e8	5e		 pop	 esi
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
?OnRender@CParticleSystemInstance@@MAEXXZ ENDP		; CParticleSystemInstance::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
_TEXT	SEGMENT
__First$1$ = -56					; size = 4
tv1731 = -52						; size = 4
_fAngularVelocity$ = -48				; size = 4
_dwFrameCount$1$ = -44					; size = 4
$T2 = -40						; size = 4
__Where$1$ = -40					; size = 4
_dwFrameIndex$2$ = -40					; size = 4
_dwFrameIndex$1$ = -36					; size = 4
tv1693 = -36						; size = 4
_bMakeParticle$1$ = -29					; size = 1
$T3 = -28						; size = 12
__Op$4 = -24						; size = 8
__Right_head$1$ = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fElapsedTime$ = 8					; size = 4
?OnUpdate@CParticleSystemInstance@@MAE_NM@Z PROC	; CParticleSystemInstance::OnUpdate, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b d9		 mov	 ebx, ecx

; 297  : 	bool bMakeParticle = true;
; 298  : 
; 299  : 	/////
; 300  : 
; 301  : 	if (m_fLocalTime >= m_pEmitterProperty->GetCycleLength())

  0002d	8b 7b 64	 mov	 edi, DWORD PTR [ebx+100]
  00030	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00035	c6 45 e3 01	 mov	 BYTE PTR _bMakeParticle$1$[ebp], 1
  00039	0f 2f 47 08	 comiss	 xmm0, DWORD PTR [edi+8]
  0003d	72 4f		 jb	 SHORT $LN15@OnUpdate

; 302  : 	{
; 303  : 		if (m_pEmitterProperty->isCycleLoop() && --m_iLoopCount != 0)

  0003f	83 7f 0c 00	 cmp	 DWORD PTR [edi+12], 0
  00043	8d 4b 40	 lea	 ecx, DWORD PTR [ebx+64]
  00046	74 20		 je	 SHORT $LN278@OnUpdate
  00048	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004a	83 ea 01	 sub	 edx, 1
  0004d	89 11		 mov	 DWORD PTR [ecx], edx
  0004f	74 17		 je	 SHORT $LN278@OnUpdate

; 304  : 		{
; 305  : 			if (m_iLoopCount < 0)

  00051	33 f6		 xor	 esi, esi
  00053	8b c2		 mov	 eax, edx
  00055	85 d2		 test	 edx, edx
  00057	0f 48 c6	 cmovs	 eax, esi
  0005a	89 01		 mov	 DWORD PTR [ecx], eax

; 306  : 			{
; 307  : 				m_iLoopCount = 0;
; 308  : 			}
; 309  : 			m_fLocalTime = m_fLocalTime - m_pEmitterProperty->GetCycleLength();

  0005c	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]
  00061	f3 0f 11 43 10	 movss	 DWORD PTR [ebx+16], xmm0

; 310  : 		}

  00066	eb 26		 jmp	 SHORT $LN15@OnUpdate
$LN278@OnUpdate:

; 311  : 		else
; 312  : 		{
; 313  : 			bMakeParticle = false;
; 314  : 			m_iLoopCount = 1;

  00068	c7 01 01 00 00
	00		 mov	 DWORD PTR [ecx], 1

; 315  : 			if (GetEmissionCount() == 0)

  0006e	8b cb		 mov	 ecx, ebx
  00070	c6 45 e3 00	 mov	 BYTE PTR _bMakeParticle$1$[ebp], 0
  00074	f3 0f 11 45 d8	 movss	 DWORD PTR $T2[ebp], xmm0
  00079	e8 00 00 00 00	 call	 ?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ; CParticleSystemInstance::GetEmissionCount
  0007e	85 c0		 test	 eax, eax
  00080	75 07		 jne	 SHORT $LN286@OnUpdate

; 316  : 			{
; 317  : 				return false;

  00082	32 c0		 xor	 al, al
  00084	e9 b5 02 00 00	 jmp	 $LN1@OnUpdate
$LN286@OnUpdate:

; 315  : 			if (GetEmissionCount() == 0)

  00089	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR $T2[ebp]
$LN15@OnUpdate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  0008e	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00091	8b 70 74	 mov	 esi, DWORD PTR [eax+116]
  00094	2b 70 70	 sub	 esi, DWORD PTR [eax+112]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 328  : 	m_pEmitterProperty->GetEmittingAngularVelocity(m_fLocalTime, &fAngularVelocity);

  00097	8d 45 d0	 lea	 eax, DWORD PTR _fAngularVelocity$[ebp]
  0009a	50		 push	 eax
  0009b	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009c	c1 fe 02	 sar	 esi, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 328  : 	m_pEmitterProperty->GetEmittingAngularVelocity(m_fLocalTime, &fAngularVelocity);

  0009f	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a1	89 75 d4	 mov	 DWORD PTR _dwFrameCount$1$[ebp], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 328  : 	m_pEmitterProperty->GetEmittingAngularVelocity(m_fLocalTime, &fAngularVelocity);

  000a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a9	e8 00 00 00 00	 call	 ?GetEmittingAngularVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingAngularVelocity

; 329  : 
; 330  : 	if (fAngularVelocity && !m_pParticleProperty->m_bAttachFlag)

  000ae	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _fAngularVelocity$[ebp]
  000b3	0f 57 c0	 xorps	 xmm0, xmm0
  000b6	0f 2e c8	 ucomiss xmm1, xmm0
  000b9	9f		 lahf
  000ba	f6 c4 44	 test	 ah, 68			; 00000044H
  000bd	7b 2e		 jnp	 SHORT $LN16@OnUpdate
  000bf	8b 43 60	 mov	 eax, DWORD PTR [ebx+96]
  000c2	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  000c6	75 25		 jne	 SHORT $LN16@OnUpdate

; 332  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &D3DXVECTOR3(0.0f, 0.0f, 1.0f), mc_pmatLocal);

  000c8	ff 73 08	 push	 DWORD PTR [ebx+8]
  000cb	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000ce	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 332  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &D3DXVECTOR3(0.0f, 0.0f, 1.0f), mc_pmatLocal);

  000d5	83 c0 7c	 add	 eax, 124		; 0000007cH
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  000d8	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 332  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &D3DXVECTOR3(0.0f, 0.0f, 1.0f), mc_pmatLocal);

  000df	51		 push	 ecx
  000e0	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  000e1	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR $T3[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 332  : 		D3DXVec3TransformNormal(&m_pParticleProperty->m_v3ZAxis, &D3DXVECTOR3(0.0f, 0.0f, 1.0f), mc_pmatLocal);

  000e8	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
$LN16@OnUpdate:

; 333  : 	}
; 334  : 
; 335  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; dwFrameIndex++)

  000ed	33 c0		 xor	 eax, eax
  000ef	89 45 dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], eax
  000f2	85 f6		 test	 esi, esi
  000f4	0f 8e 4d 01 00
	00		 jle	 $LN279@OnUpdate
  000fa	66 0f 1f 44 00
	00		 npad	 6
$LL4@OnUpdate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00100	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  00107	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  0010a	8b 04 08	 mov	 eax, DWORD PTR [eax+ecx]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  0010d	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 338  : 		for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end();)

  0010f	3b f0		 cmp	 esi, eax
  00111	0f 84 1e 01 00
	00		 je	 $LN2@OnUpdate
  00117	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL5@OnUpdate:

; 339  : 		{
; 340  : 			CParticleInstance * pInstance = *itor;
; 341  : 
; 342  : 			if (!pInstance->Update(fElapsedTime, fAngularVelocity))

  00120	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR _fAngularVelocity$[ebp]
  00125	83 ec 08	 sub	 esp, 8
  00128	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0012b	8b cf		 mov	 ecx, edi
  0012d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00133	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	e8 00 00 00 00	 call	 ?Update@CParticleInstance@@QAEHMM@Z ; CParticleInstance::Update
  00142	85 c0		 test	 eax, eax
  00144	75 3d		 jne	 SHORT $LN17@OnUpdate

; 343  : 			{
; 344  : 				pInstance->DeleteThis();

  00146	8b cf		 mov	 ecx, edi
  00148	e8 00 00 00 00	 call	 ?DeleteThis@CParticleInstance@@QAEXXZ ; CParticleInstance::DeleteThis
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0014d	8b 4d dc	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]
  00150	8b 53 44	 mov	 edx, DWORD PTR [ebx+68]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1411 :         const auto _Result = _Where._Ptr->_Next;

  00153	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00155	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00157	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0015e	03 d0		 add	 edx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00160	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00163	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00164	89 38		 mov	 DWORD PTR [eax], edi

; 397  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  00166	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00168	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0016b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 398  :         --_Mysize;

  0016e	ff 4a 04	 dec	 DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00171	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00176	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 347  : 				m_dwCurrentEmissionCount--;

  00179	8b f7		 mov	 esi, edi
  0017b	ff 4b 3c	 dec	 DWORD PTR [ebx+60]

; 348  : 			}

  0017e	e9 9c 00 00 00	 jmp	 $LN242@OnUpdate
$LN17@OnUpdate:

; 349  : 			else
; 350  : 			{
; 351  : 				if (pInstance->m_byFrameIndex != dwFrameIndex)

  00183	0f b6 47 50	 movzx	 eax, BYTE PTR [edi+80]
  00187	3b 45 dc	 cmp	 eax, DWORD PTR _dwFrameIndex$1$[ebp]
  0018a	0f 84 8d 00 00
	00		 je	 $LN19@OnUpdate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00190	8b 4d d4	 mov	 ecx, DWORD PTR _dwFrameCount$1$[ebp]
  00193	03 c8		 add	 ecx, eax
  00195	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  00198	81 7c c8 04 55
	55 55 15	 cmp	 DWORD PTR [eax+ecx*8+4], 357913941 ; 15555555H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001a0	8d 3c c8	 lea	 edi, DWORD PTR [eax+ecx*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  001a3	8b 07		 mov	 eax, DWORD PTR [edi]
  001a5	89 45 d8	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1012 :         if (_Mysize == max_size()) {

  001a8	0f 84 ae 01 00
	00		 je	 $LN264@OnUpdate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001ae	89 7d e8	 mov	 DWORD PTR __Op$4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  001b1	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001b3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001ba	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  001c1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  001c9	8b 55 d8	 mov	 edx, DWORD PTR __Where$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001cc	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  001ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1017 :         ++_Mysize;

  001d1	ff 47 04	 inc	 DWORD PTR [edi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  001d4	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  001d7	89 10		 mov	 DWORD PTR [eax], edx

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  001d9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 604  :         _Insert_before->_Prev = _Result;

  001dc	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  001df	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001e1	8b 4d dc	 mov	 ecx, DWORD PTR _dwFrameIndex$1$[ebp]
  001e4	8b 53 44	 mov	 edx, DWORD PTR [ebx+68]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1411 :         const auto _Result = _Where._Ptr->_Next;

  001e7	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  001e9	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001ea	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 587  :     }

  001f1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001f8	03 d0		 add	 edx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 603  :         this->_Ptr            = pointer{};

  001fa	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Op$4[ebp+4], 0

; 396  :         _Pnode->_Prev->_Next = _Pnode->_Next;

  00201	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00204	89 38		 mov	 DWORD PTR [eax], edi

; 397  :         _Pnode->_Next->_Prev = _Pnode->_Prev;

  00206	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00208	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0020b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 398  :         --_Mysize;

  0020e	ff 4a 04	 dec	 DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00211	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00216	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 354  : 					itor = m_ParticleInstanceListVector[dwFrameIndex].erase(itor);

  00219	8b f7		 mov	 esi, edi

; 355  : 				}

  0021b	eb 02		 jmp	 SHORT $LN242@OnUpdate
$LN19@OnUpdate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  0021d	8b 36		 mov	 esi, DWORD PTR [esi]
$LN242@OnUpdate:

; 198  :         return this->_Ptr == _Right._Ptr;

  0021f	8b 55 dc	 mov	 edx, DWORD PTR _dwFrameIndex$1$[ebp]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00222	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]

; 198  :         return this->_Ptr == _Right._Ptr;

  00225	8d 0c d5 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*8]
  0022c	3b 34 01	 cmp	 esi, DWORD PTR [ecx+eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 338  : 		for (; itor != m_ParticleInstanceListVector[dwFrameIndex].end();)

  0022f	0f 85 eb fe ff
	ff		 jne	 $LL5@OnUpdate
$LN2@OnUpdate:

; 333  : 	}
; 334  : 
; 335  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; dwFrameIndex++)

  00235	8b 45 dc	 mov	 eax, DWORD PTR _dwFrameIndex$1$[ebp]
  00238	8b 75 d4	 mov	 esi, DWORD PTR _dwFrameCount$1$[ebp]
  0023b	40		 inc	 eax
  0023c	89 45 dc	 mov	 DWORD PTR _dwFrameIndex$1$[ebp], eax
  0023f	3b c6		 cmp	 eax, esi
  00241	0f 8c b9 fe ff
	ff		 jl	 $LL4@OnUpdate
$LN279@OnUpdate:

; 356  : 				else
; 357  : 				{
; 358  : 					++itor;
; 359  : 				}
; 360  : 			}
; 361  : 		}
; 362  : 	}
; 363  : 	if (isActive() && bMakeParticle)

  00247	8b cb		 mov	 ecx, ebx
  00249	e8 00 00 00 00	 call	 ?isActive@CEffectElementBaseInstance@@QAE_NXZ ; CEffectElementBaseInstance::isActive
  0024e	84 c0		 test	 al, al
  00250	74 18		 je	 SHORT $LN21@OnUpdate
  00252	80 7d e3 00	 cmp	 BYTE PTR _bMakeParticle$1$[ebp], 0
  00256	74 12		 je	 SHORT $LN21@OnUpdate

; 364  : 	{
; 365  : 		CreateParticles(fElapsedTime);

  00258	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebp]
  0025d	51		 push	 ecx
  0025e	8b cb		 mov	 ecx, ebx
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	e8 00 00 00 00	 call	 ?CreateParticles@CParticleSystemInstance@@QAEXM@Z ; CParticleSystemInstance::CreateParticles
$LN21@OnUpdate:

; 368  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; ++dwFrameIndex)

  0026a	33 c9		 xor	 ecx, ecx
  0026c	89 4d d8	 mov	 DWORD PTR _dwFrameIndex$2$[ebp], ecx
  0026f	85 f6		 test	 esi, esi
  00271	0f 8e c5 00 00
	00		 jle	 $LN280@OnUpdate
  00277	c1 e6 03	 shl	 esi, 3
  0027a	89 75 dc	 mov	 DWORD PTR tv1693[ebp], esi
  0027d	0f 1f 00	 npad	 3
$LL10@OnUpdate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00280	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  00283	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  00286	8d 0c 06	 lea	 ecx, DWORD PTR [esi+eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00289	8b 02		 mov	 eax, DWORD PTR [edx]
  0028b	89 45 cc	 mov	 DWORD PTR tv1731[ebp], eax

; 1512 :         if (this != _STD addressof(_Right) && _Right_data._Mysize != 0) { // worth splicing, do it

  0028e	3b d1		 cmp	 edx, ecx
  00290	74 51		 je	 SHORT $LN63@OnUpdate
  00292	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00295	85 ff		 test	 edi, edi
  00297	74 4a		 je	 SHORT $LN63@OnUpdate

; 1513 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1514 :             _STL_VERIFY(_Where._Getcont() == _STD addressof(_Mypair._Myval2), "list splice iterator outside range");
; 1515 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1516 :             const auto _Right_head = _Right_data._Myhead;

  00299	8b 01		 mov	 eax, DWORD PTR [ecx]
  0029b	89 45 ec	 mov	 DWORD PTR __Right_head$1$[ebp], eax

; 1517 :             _Splice(_Where._Ptr, _Right, _Right_head->_Next, _Right_head, _Right_data._Mysize);

  0029e	8b 00		 mov	 eax, DWORD PTR [eax]
  002a0	89 45 c8	 mov	 DWORD PTR __First$1$[ebp], eax

; 1806 :             if (max_size() - _My_data._Mysize < _Count) {

  002a3	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H
  002a8	2b 42 04	 sub	 eax, DWORD PTR [edx+4]
  002ab	3b c7		 cmp	 eax, edi
  002ad	0f 82 a9 00 00
	00		 jb	 $LN264@OnUpdate

; 1808 :             }
; 1809 : 
; 1810 :             auto& _Right_data = _Right._Mypair._Myval2;
; 1811 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1812 :             // transfer ownership
; 1813 :             if (_Count == 1) {
; 1814 :                 _My_data._Adopt_unique(_Right_data, _First);
; 1815 :             } else if (_Count == _Right_data._Mysize) {
; 1816 :                 _My_data._Adopt_all(_Right_data);
; 1817 :             } else {
; 1818 :                 _My_data._Adopt_range(_Right_data, _First, _Last);
; 1819 :             }
; 1820 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1821 : 
; 1822 :             _My_data._Mysize += _Count;

  002b3	01 7a 04	 add	 DWORD PTR [edx+4], edi

; 1823 :             _Right_data._Mysize -= _Count;

  002b6	29 79 04	 sub	 DWORD PTR [ecx+4], edi

; 475  :         const auto _First_prev  = _First->_Prev;

  002b9	8b 75 c8	 mov	 esi, DWORD PTR __First$1$[ebp]

; 476  :         _First_prev->_Next      = _Last;

  002bc	8b 7d ec	 mov	 edi, DWORD PTR __Right_head$1$[ebp]

; 477  :         const auto _Last_prev   = _Last->_Prev;
; 478  :         _Last_prev->_Next       = _Before;

  002bf	8b 45 cc	 mov	 eax, DWORD PTR tv1731[ebp]
  002c2	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  002c5	89 3a		 mov	 DWORD PTR [edx], edi
  002c7	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  002ca	89 01		 mov	 DWORD PTR [ecx], eax

; 479  :         const auto _Before_prev = _Before->_Prev;

  002cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 480  :         _Before_prev->_Next     = _First;

  002cf	89 30		 mov	 DWORD PTR [eax], esi

; 481  : 
; 482  :         // fixup the _Prev values
; 483  :         _Before->_Prev = _Last_prev;

  002d1	8b 75 cc	 mov	 esi, DWORD PTR tv1731[ebp]
  002d4	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 485  :         _First->_Prev  = _Before_prev;

  002d7	8b 4d c8	 mov	 ecx, DWORD PTR __First$1$[ebp]
  002da	8b 75 dc	 mov	 esi, DWORD PTR tv1693[ebp]

; 484  :         _Last->_Prev   = _First_prev;

  002dd	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 485  :         _First->_Prev  = _Before_prev;

  002e0	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN63@OnUpdate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  002e3	8b 7b 44	 mov	 edi, DWORD PTR [ebx+68]
  002e6	03 fe		 add	 edi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  002e8	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 325  :         _Head->_Prev->_Next = nullptr;

  002ea	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002ed	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  002f3	8b 01		 mov	 eax, DWORD PTR [ecx]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  002f5	85 c0		 test	 eax, eax
  002f7	74 1d		 je	 SHORT $LN72@OnUpdate
  002f9	0f 1f 80 00 00
	00 00		 npad	 7
$LL73@OnUpdate:

; 329  :             _Pnext = _Pnode->_Next;

  00300	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00302	6a 0c		 push	 12			; 0000000cH
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0030a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  0030d	8b c6		 mov	 eax, esi
  0030f	85 f6		 test	 esi, esi
  00311	75 ed		 jne	 SHORT $LL73@OnUpdate
  00313	8b 75 dc	 mov	 esi, DWORD PTR tv1693[ebp]
$LN72@OnUpdate:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00316	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 368  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; ++dwFrameIndex)

  00318	83 c6 08	 add	 esi, 8
  0031b	8b 4d d8	 mov	 ecx, DWORD PTR _dwFrameIndex$2$[ebp]
  0031e	41		 inc	 ecx
  0031f	89 75 dc	 mov	 DWORD PTR tv1693[ebp], esi
  00322	89 4d d8	 mov	 DWORD PTR _dwFrameIndex$2$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00325	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00327	8b 07		 mov	 eax, DWORD PTR [edi]
  00329	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  0032c	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 368  : 	for (dwFrameIndex = 0; dwFrameIndex < dwFrameCount; ++dwFrameIndex)

  00333	3b 4d d4	 cmp	 ecx, DWORD PTR _dwFrameCount$1$[ebp]
  00336	0f 8c 44 ff ff
	ff		 jl	 $LL10@OnUpdate
$LN280@OnUpdate:

; 369  : 	{
; 370  : 		m_ParticleInstanceListVector[dwFrameIndex].splice(m_ParticleInstanceListVector[dwFrameIndex].end(), m_ParticleInstanceListVector[dwFrameIndex + dwFrameCount]);
; 371  : 		m_ParticleInstanceListVector[dwFrameIndex + dwFrameCount].clear();
; 372  : 	}
; 373  : 
; 374  : 	return true;

  0033c	b0 01		 mov	 al, 1
$LN1@OnUpdate:

; 375  : }

  0033e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00341	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00348	59		 pop	 ecx
  00349	5f		 pop	 edi
  0034a	5e		 pop	 esi
  0034b	5b		 pop	 ebx
  0034c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0034f	33 cd		 xor	 ecx, ebp
  00351	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00356	8b e5		 mov	 esp, ebp
  00358	5d		 pop	 ebp
  00359	c2 04 00	 ret	 4
$LN264@OnUpdate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1807 :                 _Xlength_error("list too long");

  0035c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00361	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN288@OnUpdate:
  00366	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z$1:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Op$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnUpdate@CParticleSystemInstance@@MAE_NM@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnUpdate@CParticleSystemInstance@@MAE_NM@Z ENDP	; CParticleSystemInstance::OnUpdate
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnDestroy@CParticleSystemInstance@@MAEXXZ
_TEXT	SEGMENT
?OnDestroy@CParticleSystemInstance@@MAEXXZ PROC		; CParticleSystemInstance::OnDestroy, COMDAT
; _this$ = ecx

; 516  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1859 :         return iterator(_My_data._Myfirst, _STD addressof(_My_data));

  00004	8d 73 44	 lea	 esi, DWORD PTR [ebx+68]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 516  : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3e		 mov	 edi, DWORD PTR [esi]
  0000a	3b 7b 48	 cmp	 edi, DWORD PTR [ebx+72]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 518  : 	for (i = m_ParticleInstanceListVector.begin(); i != m_ParticleInstanceListVector.end(); ++i)

  0000d	74 56		 je	 SHORT $LN3@OnDestroy
  0000f	90		 npad	 1
$LL34@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1087 :         return iterator(_Mypair._Myval2._Myhead->_Next, _STD addressof(_Mypair._Myval2));

  00010	8b 07		 mov	 eax, DWORD PTR [edi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 523  : 		for (j = rkLst_kParticleInst.begin(); j != rkLst_kParticleInst.end(); ++j)

  00016	74 10		 je	 SHORT $LN6@OnDestroy
$LL38@OnDestroy:

; 524  : 		{
; 525  : 			CParticleInstance* pkParticleInst = *j;
; 526  : 			pkParticleInst->DeleteThis();

  00018	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0001b	e8 00 00 00 00	 call	 ?DeleteThis@CParticleInstance@@QAEXXZ ; CParticleInstance::DeleteThis
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 165  :         this->_Ptr = this->_Ptr->_Next;

  00020	8b 36		 mov	 esi, DWORD PTR [esi]

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00022	8b 07		 mov	 eax, DWORD PTR [edi]

; 198  :         return this->_Ptr == _Right._Ptr;

  00024	3b f0		 cmp	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 523  : 		for (j = rkLst_kParticleInst.begin(); j != rkLst_kParticleInst.end(); ++j)

  00026	75 f0		 jne	 SHORT $LL38@OnDestroy
$LN6@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 325  :         _Head->_Prev->_Next = nullptr;

  00028	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00031	8b 00		 mov	 eax, DWORD PTR [eax]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00033	85 c0		 test	 eax, eax
  00035	74 13		 je	 SHORT $LN47@OnDestroy
$LL48@OnDestroy:

; 329  :             _Pnext = _Pnode->_Next;

  00037	8b 30		 mov	 esi, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00039	6a 0c		 push	 12			; 0000000cH
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00041	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00044	8b c6		 mov	 eax, esi
  00046	85 f6		 test	 esi, esi
  00048	75 ed		 jne	 SHORT $LL48@OnDestroy
$LN47@OnDestroy:

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0004a	8b 07		 mov	 eax, DWORD PTR [edi]
  0004c	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0004e	8b 07		 mov	 eax, DWORD PTR [edi]
  00050	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  00053	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 74   :         ++_Ptr;

  0005a	83 c7 08	 add	 edi, 8

; 156  :         return _Ptr == _Right._Ptr;

  0005d	3b 7b 48	 cmp	 edi, DWORD PTR [ebx+72]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 518  : 	for (i = m_ParticleInstanceListVector.begin(); i != m_ParticleInstanceListVector.end(); ++i)

  00060	75 ae		 jne	 SHORT $LL34@OnDestroy
  00062	8d 73 44	 lea	 esi, DWORD PTR [ebx+68]
$LN3@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0006a	3b c1		 cmp	 eax, ecx
  0006c	74 10		 je	 SHORT $LN90@OnDestroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  0006e	56		 push	 esi
  0006f	51		 push	 ecx
  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00076	8b 06		 mov	 eax, DWORD PTR [esi]
  00078	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007b	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN90@OnDestroy:

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0007e	8b 7b 54	 mov	 edi, DWORD PTR [ebx+84]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00081	8b 73 50	 mov	 esi, DWORD PTR [ebx+80]
  00084	3b f7		 cmp	 esi, edi
  00086	74 11		 je	 SHORT $LN107@OnDestroy
$LL108@OnDestroy:

; 266  :         _Func(*_UFirst);

  00088	ff 36		 push	 DWORD PTR [esi]
  0008a	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  0008f	83 c6 04	 add	 esi, 4
  00092	83 c4 04	 add	 esp, 4
  00095	3b f7		 cmp	 esi, edi
  00097	75 ef		 jne	 SHORT $LL108@OnDestroy
$LN107@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00099	8b 43 50	 mov	 eax, DWORD PTR [ebx+80]
  0009c	3b 43 54	 cmp	 eax, DWORD PTR [ebx+84]
  0009f	74 03		 je	 SHORT $LN110@OnDestroy

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  000a1	89 43 54	 mov	 DWORD PTR [ebx+84], eax
$LN110@OnDestroy:
  000a4	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 535  : }

  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	c3		 ret	 0
?OnDestroy@CParticleSystemInstance@@MAEXXZ ENDP		; CParticleSystemInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnInitialize@CParticleSystemInstance@@MAEXXZ
_TEXT	SEGMENT
?OnInitialize@CParticleSystemInstance@@MAEXXZ PROC	; CParticleSystemInstance::OnInitialize, COMDAT
; _this$ = ecx

; 507  : 	m_dwCurrentEmissionCount = 0;

  00000	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 508  : 	m_iLoopCount = 0;

  00007	c7 41 40 00 00
	00 00		 mov	 DWORD PTR [ecx+64], 0

; 509  : 	m_fEmissionResidue = 0.0f;

  0000e	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0

; 510  : #ifdef ENABLE_RENDER_TARGET_EFFECT
; 511  : 	m_isSpecialRender = false;

  00015	c6 41 68 00	 mov	 BYTE PTR [ecx+104], 0

; 512  : #endif
; 513  : }

  00019	c3		 ret	 0
?OnInitialize@CParticleSystemInstance@@MAEXXZ ENDP	; CParticleSystemInstance::OnInitialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?SetSpecialRender@CParticleSystemInstance@@QAEXXZ
_TEXT	SEGMENT
?SetSpecialRender@CParticleSystemInstance@@QAEXXZ PROC	; CParticleSystemInstance::SetSpecialRender, COMDAT
; _this$ = ecx

; 34   : 	m_isSpecialRender = true;

  00000	c6 41 68 01	 mov	 BYTE PTR [ecx+104], 1

; 35   : }

  00004	c3		 ret	 0
?SetSpecialRender@CParticleSystemInstance@@QAEXXZ ENDP	; CParticleSystemInstance::SetSpecialRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?IsSpecialRender@CParticleSystemInstance@@QBE_NXZ
_TEXT	SEGMENT
?IsSpecialRender@CParticleSystemInstance@@QBE_NXZ PROC	; CParticleSystemInstance::IsSpecialRender, COMDAT
; _this$ = ecx

; 39   : 	return m_isSpecialRender;

  00000	8a 41 68	 mov	 al, BYTE PTR [ecx+104]

; 40   : }

  00003	c3		 ret	 0
?IsSpecialRender@CParticleSystemInstance@@QBE_NXZ ENDP	; CParticleSystemInstance::IsSpecialRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?GetEmissionCount@CParticleSystemInstance@@QAEKXZ
_TEXT	SEGMENT
?GetEmissionCount@CParticleSystemInstance@@QAEKXZ PROC	; CParticleSystemInstance::GetEmissionCount, COMDAT
; _this$ = ecx

; 45   : 	return m_dwCurrentEmissionCount;

  00000	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]

; 46   : }

  00003	c3		 ret	 0
?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ENDP	; CParticleSystemInstance::GetEmissionCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\EffectUpdateDecorator.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?CreateParticles@CParticleSystemInstance@@QAEXM@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -164					; size = 4
_fEmissionCount$ = -160					; size = 4
_i$1$ = -156						; size = 4
_fElapsedTime$GSCopy$1$ = -152				; size = 4
_fLieRotation$1$ = -148					; size = 4
_fVelocity$ = -144					; size = 4
_v2HalfSize$ = -140					; size = 8
_pNewDecorator$1$ = -132				; size = 4
$T2 = -132						; size = 4
_pFirstInstance$1$ = -128				; size = 4
__real@447a0000$1$ = -124				; size = 4
tv2644 = -120						; size = 8
tv2641 = -120						; size = 8
tv2635 = -120						; size = 8
__Op$3 = -120						; size = 8
_iCreatingCount$1$ = -108				; size = 4
_fLifeTime$ = -104					; size = 4
_fEmittingSize$ = -100					; size = 4
_pDest$1$ = -96						; size = 4
__Where$1$ = -96					; size = 4
tv844 = -96						; size = 4
tv820 = -96						; size = 4
tv778 = -96						; size = 4
tv736 = -96						; size = 4
tv659 = -96						; size = 4
tv648 = -96						; size = 4
tv637 = -96						; size = 4
$T4 = -96						; size = 4
tv517 = -96						; size = 4
tv506 = -96						; size = 4
tv495 = -96						; size = 4
tv484 = -96						; size = 4
tv455 = -96						; size = 4
tv426 = -96						; size = 4
tv364 = -96						; size = 4
tv353 = -96						; size = 4
$T5 = -92						; size = 12
$T6 = -80						; size = 12
__v3TimePosition$ = -68					; size = 12
__v3Velocity$ = -56					; size = 12
_v3Velocity$7 = -44					; size = 12
_v3TimePosition$8 = -32					; size = 12
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
_fElapsedTime$ = 8					; size = 4
?CreateParticles@CParticleSystemInstance@@QAEXM@Z PROC	; CParticleSystemInstance::CreateParticles, COMDAT
; _this$ = ecx

; 49   : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f8	 and	 esp, -8			; fffffff8H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	6a ff		 push	 -1
  00018	68 00 00 00 00	 push	 __ehhandler$?CreateParticles@CParticleSystemInstance@@QAEXM@Z
  0001d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00023	50		 push	 eax
  00024	53		 push	 ebx
  00025	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	56		 push	 esi
  00036	57		 push	 edi
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	8b f1		 mov	 esi, ecx
  00043	89 b5 5c ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00049	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR _fElapsedTime$[ebx]

; 50   : 	float fEmissionCount;
; 51   : 	m_pEmitterProperty->GetEmissionCountPerSecond(m_fLocalTime, &fEmissionCount);

  0004e	8d 85 60 ff ff
	ff		 lea	 eax, DWORD PTR _fEmissionCount$[ebp]
  00054	50		 push	 eax
  00055	f3 0f 11 85 68
	ff ff ff	 movss	 DWORD PTR _fElapsedTime$GSCopy$1$[ebp], xmm0
  0005d	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00062	51		 push	 ecx
  00063	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00066	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006b	e8 00 00 00 00	 call	 ?GetEmissionCountPerSecond@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmissionCountPerSecond

; 52   : 
; 53   : 	float fCreatingValue = fEmissionCount * (fElapsedTime / 1.0f) + m_fEmissionResidue;

  00070	f3 0f 10 8d 68
	ff ff ff	 movss	 xmm1, DWORD PTR _fElapsedTime$GSCopy$1$[ebp]

; 54   : 	int iCreatingCount = int(fCreatingValue);
; 55   : 	m_fEmissionResidue = fCreatingValue - iCreatingCount;
; 56   : 
; 57   : 	int icurEmissionCount = GetEmissionCount();

  00078	8b ce		 mov	 ecx, esi
  0007a	f3 0f 59 8d 60
	ff ff ff	 mulss	 xmm1, DWORD PTR _fEmissionCount$[ebp]
  00082	f3 0f 58 4e 38	 addss	 xmm1, DWORD PTR [esi+56]
  00087	f3 0f 2c f9	 cvttss2si edi, xmm1
  0008b	66 0f 6e c7	 movd	 xmm0, edi
  0008f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00092	f3 0f 5c c8	 subss	 xmm1, xmm0
  00096	f3 0f 11 4e 38	 movss	 DWORD PTR [esi+56], xmm1
  0009b	e8 00 00 00 00	 call	 ?GetEmissionCount@CParticleSystemInstance@@QAEKXZ ; CParticleSystemInstance::GetEmissionCount

; 58   : 	int iMaxEmissionCount = int(m_pEmitterProperty->GetMaxEmissionCount());

  000a0	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  000a3	0f 57 c0	 xorps	 xmm0, xmm0

; 59   : 	int iNextEmissionCount = int(icurEmissionCount + iCreatingCount);
; 60   : 	iCreatingCount -= max(0, iNextEmissionCount - iMaxEmissionCount);
; 61   : 
; 62   : 	float fLifeTime = 0.0f;
; 63   : 	float fEmittingSize = 0.0f;
; 64   : 	D3DXVECTOR3 _v3TimePosition;
; 65   : 	D3DXVECTOR3 _v3Velocity;
; 66   : 	float fVelocity = 0.0f;
; 67   : 	D3DXVECTOR2 v2HalfSize;
; 68   : 	float fLieRotation = 0;

  000a6	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _fLieRotation$1$[ebp], xmm0
  000ae	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  000b1	b8 00 00 00 00	 mov	 eax, 0
  000b6	2b 4a 04	 sub	 ecx, DWORD PTR [edx+4]
  000b9	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _fLifeTime$[ebp], 0
  000c0	0f 49 c1	 cmovns	 eax, ecx
  000c3	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _fEmittingSize$[ebp], 0
  000ca	2b f8		 sub	 edi, eax
  000cc	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _fVelocity$[ebp], 0
  000d6	89 7d 94	 mov	 DWORD PTR _iCreatingCount$1$[ebp], edi

; 69   : 	if (iCreatingCount)

  000d9	0f 84 b2 01 00
	00		 je	 $LN10@CreatePart

; 70   : 	{
; 71   : 		m_pEmitterProperty->GetParticleLifeTime(m_fLocalTime, &fLifeTime);

  000df	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  000e4	8d 45 98	 lea	 eax, DWORD PTR _fLifeTime$[ebp]
  000e7	50		 push	 eax
  000e8	51		 push	 ecx
  000e9	8b ca		 mov	 ecx, edx
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	e8 00 00 00 00	 call	 ?GetParticleLifeTime@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleLifeTime

; 72   : 		if (fLifeTime == 0.0f)

  000f5	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  000fa	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  00101	9f		 lahf
  00102	f6 c4 44	 test	 ah, 68			; 00000044H
  00105	0f 8b c6 09 00
	00		 jnp	 $LN3@CreatePart

; 73   : 		{
; 74   : 			return;
; 75   : 		}
; 76   : 
; 77   : 		m_pEmitterProperty->GetEmittingSize(m_fLocalTime, &fEmittingSize);

  0010b	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00110	8d 45 9c	 lea	 eax, DWORD PTR _fEmittingSize$[ebp]
  00113	50		 push	 eax
  00114	51		 push	 ecx
  00115	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	e8 00 00 00 00	 call	 ?GetEmittingSize@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingSize

; 78   : 
; 79   : 		m_pData->GetPosition(m_fLocalTime, _v3TimePosition);

  00122	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00127	8d 45 bc	 lea	 eax, DWORD PTR __v3TimePosition$[ebp]
  0012a	50		 push	 eax
  0012b	51		 push	 ecx
  0012c	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0012f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00134	e8 00 00 00 00	 call	 ?GetPosition@CEffectElementBase@@QAEXMAAUD3DXVECTOR3@@@Z ; CEffectElementBase::GetPosition

; 80   : 
; 81   : 		m_pEmitterProperty->GetEmittingDirectionX(m_fLocalTime, &_v3Velocity.x);

  00139	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0013e	8d 45 c8	 lea	 eax, DWORD PTR __v3Velocity$[ebp]
  00141	50		 push	 eax
  00142	51		 push	 ecx
  00143	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014b	e8 00 00 00 00	 call	 ?GetEmittingDirectionX@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionX

; 82   : 		m_pEmitterProperty->GetEmittingDirectionY(m_fLocalTime, &_v3Velocity.y);

  00150	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00155	8d 45 cc	 lea	 eax, DWORD PTR __v3Velocity$[ebp+4]
  00158	50		 push	 eax
  00159	51		 push	 ecx
  0015a	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  0015d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00162	e8 00 00 00 00	 call	 ?GetEmittingDirectionY@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionY

; 83   : 		m_pEmitterProperty->GetEmittingDirectionZ(m_fLocalTime, &_v3Velocity.z);

  00167	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0016c	8d 45 d0	 lea	 eax, DWORD PTR __v3Velocity$[ebp+8]
  0016f	50		 push	 eax
  00170	51		 push	 ecx
  00171	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00174	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00179	e8 00 00 00 00	 call	 ?GetEmittingDirectionZ@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingDirectionZ

; 84   : 
; 85   : 		m_pEmitterProperty->GetEmittingVelocity(m_fLocalTime, &fVelocity);

  0017e	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00183	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _fVelocity$[ebp]
  00189	50		 push	 eax
  0018a	51		 push	 ecx
  0018b	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?GetEmittingVelocity@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetEmittingVelocity

; 86   : 
; 87   : 		m_pEmitterProperty->GetParticleSizeX(m_fLocalTime, &v2HalfSize.x);

  00198	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  0019d	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _v2HalfSize$[ebp]
  001a3	50		 push	 eax
  001a4	51		 push	 ecx
  001a5	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	e8 00 00 00 00	 call	 ?GetParticleSizeX@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleSizeX

; 88   : 		m_pEmitterProperty->GetParticleSizeY(m_fLocalTime, &v2HalfSize.y);

  001b2	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  001b7	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _v2HalfSize$[ebp+4]
  001bd	50		 push	 eax
  001be	51		 push	 ecx
  001bf	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	e8 00 00 00 00	 call	 ?GetParticleSizeY@CEmitterProperty@@QAEXMPAM@Z ; CEmitterProperty::GetParticleSizeY

; 89   : 
; 90   : 		v2HalfSize.x *= m_fScaleParticle;

  001cc	f3 0f 10 4e 28	 movss	 xmm1, DWORD PTR [esi+40]

; 91   : 		v2HalfSize.y *= m_fScaleParticle;
; 92   : 
; 93   : 		if (BILLBOARD_TYPE_LIE == m_pParticleProperty->m_byBillboardType && mc_pmatLocal)

  001d1	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  001d4	0f 28 c1	 movaps	 xmm0, xmm1
  001d7	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _v2HalfSize$[ebp]
  001df	f3 0f 59 8d 78
	ff ff ff	 mulss	 xmm1, DWORD PTR _v2HalfSize$[ebp+4]
  001e7	f3 0f 11 85 74
	ff ff ff	 movss	 DWORD PTR _v2HalfSize$[ebp], xmm0
  001ef	f3 0f 11 8d 78
	ff ff ff	 movss	 DWORD PTR _v2HalfSize$[ebp+4], xmm1
  001f7	80 78 13 03	 cmp	 BYTE PTR [eax+19], 3
  001fb	0f 85 90 00 00
	00		 jne	 $LN10@CreatePart
  00201	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00204	85 ff		 test	 edi, edi
  00206	0f 84 82 00 00
	00		 je	 $LN168@CreatePart

; 94   : 		{
; 95   : 			float fsx = mc_pmatLocal->_32;

  0020c	f3 0f 10 4f 24	 movss	 xmm1, DWORD PTR [edi+36]

; 96   : 			float fcx = sqrtf(1.0f - fsx * fsx);

  00211	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00219	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0021d	f3 0f 5c c1	 subss	 xmm0, xmm1
  00221	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00224	0f 5a c0	 cvtps2pd xmm0, xmm0
  00227	66 0f 2e c8	 ucomisd xmm1, xmm0
  0022b	77 06		 ja	 SHORT $LN170@CreatePart
  0022d	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00231	eb 05		 jmp	 SHORT $LN171@CreatePart
$LN170@CreatePart:
  00233	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN171@CreatePart:
  00238	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 98   : 			if (fcx >= 0.00001f)

  0023c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3727c5ac
  00243	72 49		 jb	 SHORT $LN168@CreatePart

; 100  : 				fLieRotation = D3DXToDegree(atan2f(-mc_pmatLocal->_12, mc_pmatLocal->_22));

  00245	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  0024a	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 638  :             return (float)atan2(_Y, _X);

  00251	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00255	f2 0f 11 45 88	 movsd	 QWORD PTR tv2644[ebp], xmm0
  0025a	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  0025f	dd 45 88	 fld	 QWORD PTR tv2644[ebp]
  00262	0f 5a c0	 cvtps2pd xmm0, xmm0
  00265	f2 0f 11 45 88	 movsd	 QWORD PTR tv2641[ebp], xmm0
  0026a	dd 45 88	 fld	 QWORD PTR tv2641[ebp]
  0026d	e8 00 00 00 00	 call	 __CIatan2
  00272	dd 5d 88	 fstp	 QWORD PTR tv2635[ebp]
  00275	f2 0f 10 4d 88	 movsd	 xmm1, QWORD PTR tv2635[ebp]
  0027a	66 0f 5a c9	 cvtpd2ps xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 100  : 				fLieRotation = D3DXToDegree(atan2f(-mc_pmatLocal->_12, mc_pmatLocal->_22));

  0027e	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42652ee0
  00286	f3 0f 11 8d 6c
	ff ff ff	 movss	 DWORD PTR _fLieRotation$1$[ebp], xmm1
$LN168@CreatePart:

; 101  : 			}
; 102  : 		}
; 103  : 
; 104  : 	}
; 105  : 
; 106  : 	CParticleInstance * pFirstInstance = 0;

  0028e	8b 7d 94	 mov	 edi, DWORD PTR _iCreatingCount$1$[ebp]
$LN10@CreatePart:
  00291	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _pFirstInstance$1$[ebp], 0

; 108  : 	for (int i = 0; i < iCreatingCount; ++i)

  00298	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$1$[ebp], 0
  002a2	85 ff		 test	 edi, edi
  002a4	0f 8e 27 08 00
	00		 jle	 $LN3@CreatePart
  002aa	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@447a0000
  002b0	d9 5d 84	 fstp	 DWORD PTR __real@447a0000$1$[ebp]
$LL4@CreatePart:

; 109  : 	{
; 110  : 		CParticleInstance * pInstance;
; 111  : 
; 112  : 		pInstance = CParticleInstance::New();

  002b3	e8 00 00 00 00	 call	 ?New@CParticleInstance@@SAPAV1@XZ ; CParticleInstance::New

; 113  : 		pInstance->m_pParticleProperty = m_pParticleProperty;

  002b8	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  002bb	8b f8		 mov	 edi, eax
  002bd	89 4f 5c	 mov	 DWORD PTR [edi+92], ecx

; 114  : 		pInstance->m_pEmitterProperty = m_pEmitterProperty;

  002c0	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  002c3	89 4f 60	 mov	 DWORD PTR [edi+96], ecx

; 115  : 
; 116  : 		// LifeTime
; 117  : 		pInstance->m_fLifeTime = fLifeTime;

  002c6	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  002cb	f3 0f 11 47 54	 movss	 DWORD PTR [edi+84], xmm0

; 118  : 		pInstance->m_fLastLifeTime = fLifeTime;

  002d0	f3 0f 10 45 98	 movss	 xmm0, DWORD PTR _fLifeTime$[ebp]
  002d5	f3 0f 11 47 58	 movss	 DWORD PTR [edi+88], xmm0

; 119  : 
; 120  : 		// Position
; 121  : 		switch (m_pEmitterProperty->GetEmitterShape())

  002da	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  002dd	e8 00 00 00 00	 call	 ?GetEmitterShape@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterShape
  002e2	0f b6 c0	 movzx	 eax, al
  002e5	83 f8 03	 cmp	 eax, 3
  002e8	0f 87 47 02 00
	00		 ja	 $LN18@CreatePart
  002ee	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN166@CreatePart[eax*4]
$LN11@CreatePart:

; 122  : 		{
; 123  : 		case CEmitterProperty::EMITTER_SHAPE_POINT:
; 124  : 			pInstance->m_v3Position.x = 0.0f;

  002f5	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 125  : 			pInstance->m_v3Position.y = 0.0f;

  002fc	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 126  : 			pInstance->m_v3Position.z = 0.0f;

  00303	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 127  : 			break;

  0030a	e9 26 02 00 00	 jmp	 $LN18@CreatePart
$LN12@CreatePart:

; 128  : 
; 129  : 		case CEmitterProperty::EMITTER_SHAPE_ELLIPSE:
; 130  : 			pInstance->m_v3Position.x = frandom(-500.0f, 500.0f);

  0030f	83 ec 08	 sub	 esp, 8
  00312	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  0031a	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  00321	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00326	d9 5d a0	 fstp	 DWORD PTR tv353[ebp]
  00329	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv353[ebp]

; 131  : 			pInstance->m_v3Position.y = frandom(-500.0f, 500.0f);

  0032e	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  00336	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0
  0033b	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  00342	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00347	83 c4 08	 add	 esp, 8

; 132  : 			pInstance->m_v3Position.z = 0.0f;
; 133  : 			D3DXVec3Normalize(&pInstance->m_v3Position, &pInstance->m_v3Position);

  0034a	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0034d	d9 5d a0	 fstp	 DWORD PTR tv364[ebp]
  00350	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv364[ebp]
  00355	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0
  0035a	50		 push	 eax
  0035b	50		 push	 eax
  0035c	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00363	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 134  : 
; 135  : 			if (m_pEmitterProperty->isEmitFromEdge())

  00368	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  0036b	e8 00 00 00 00	 call	 ?isEmitFromEdge@CEmitterProperty@@QAEHXZ ; CEmitterProperty::isEmitFromEdge
  00370	85 c0		 test	 eax, eax
  00372	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00375	0f 84 6e 01 00
	00		 je	 $LN13@CreatePart

; 136  : 			{
; 137  : 				pInstance->m_v3Position *= (m_pEmitterProperty->m_fEmittingRadius + fEmittingSize);

  0037b	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _fEmittingSize$[ebp]
  00380	f3 0f 58 48 28	 addss	 xmm1, DWORD PTR [eax+40]

; 138  : 			}

  00385	e9 87 01 00 00	 jmp	 $LN173@CreatePart
$LN15@CreatePart:

; 139  : 			else
; 140  : 			{
; 141  : 				pInstance->m_v3Position *= (frandom(0.0f, m_pEmitterProperty->m_fEmittingRadius) + fEmittingSize);
; 142  : 			}
; 143  : 			break;
; 144  : 
; 145  : 		case CEmitterProperty::EMITTER_SHAPE_SQUARE:
; 146  : 			pInstance->m_v3Position.x = (frandom(-m_pEmitterProperty->m_v3EmittingSize.x / 2.0f, m_pEmitterProperty->m_v3EmittingSize.x / 2.0f) + fEmittingSize);

  0038a	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  0038d	83 ec 08	 sub	 esp, 8
  00390	f3 0f 10 48 1c	 movss	 xmm1, DWORD PTR [eax+28]
  00395	0f 28 c1	 movaps	 xmm0, xmm1
  00398	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0039f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  003a7	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  003af	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003b5	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003ba	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  003bf	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  003c2	d9 5d a0	 fstp	 DWORD PTR tv426[ebp]
  003c5	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv426[ebp]
  003ca	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0

; 147  : 			pInstance->m_v3Position.y = (frandom(-m_pEmitterProperty->m_v3EmittingSize.y / 2.0f, m_pEmitterProperty->m_v3EmittingSize.y / 2.0f) + fEmittingSize);

  003cf	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  003d2	f3 0f 10 48 20	 movss	 xmm1, DWORD PTR [eax+32]
  003d7	0f 28 c1	 movaps	 xmm0, xmm1
  003da	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  003e1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  003e9	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  003f1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003f7	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003fc	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00401	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  00404	d9 5d a0	 fstp	 DWORD PTR tv455[ebp]
  00407	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv455[ebp]
  0040c	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0

; 148  : 			pInstance->m_v3Position.z = (frandom(-m_pEmitterProperty->m_v3EmittingSize.z / 2.0f, m_pEmitterProperty->m_v3EmittingSize.z / 2.0f) + fEmittingSize);

  00411	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00414	f3 0f 10 48 24	 movss	 xmm1, DWORD PTR [eax+36]
  00419	0f 28 c1	 movaps	 xmm0, xmm1
  0041c	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00423	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0042b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00433	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00439	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0043e	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00443	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  00446	83 c4 08	 add	 esp, 8
  00449	d9 5d a0	 fstp	 DWORD PTR tv484[ebp]
  0044c	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv484[ebp]
  00451	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0

; 149  : 			break;

  00456	e9 da 00 00 00	 jmp	 $LN18@CreatePart
$LN16@CreatePart:

; 150  : 
; 151  : 		case CEmitterProperty::EMITTER_SHAPE_SPHERE:
; 152  : 			pInstance->m_v3Position.x = frandom(-500.0f, 500.0f);

  0045b	83 ec 08	 sub	 esp, 8
  0045e	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  00466	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  0046d	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00472	d9 5d a0	 fstp	 DWORD PTR tv495[ebp]
  00475	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv495[ebp]

; 153  : 			pInstance->m_v3Position.y = frandom(-500.0f, 500.0f);

  0047a	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  00482	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0
  00487	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  0048e	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00493	d9 5d a0	 fstp	 DWORD PTR tv506[ebp]
  00496	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv506[ebp]

; 154  : 			pInstance->m_v3Position.z = frandom(-500.0f, 500.0f);

  0049b	c7 44 24 04 00
	00 fa 43	 mov	 DWORD PTR [esp+4], 1140457472 ; 43fa0000H
  004a3	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0
  004a8	c7 04 24 00 00
	fa c3		 mov	 DWORD PTR [esp], -1007026176 ; c3fa0000H
  004af	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  004b4	83 c4 08	 add	 esp, 8

; 155  : 			D3DXVec3Normalize(&pInstance->m_v3Position, &pInstance->m_v3Position);

  004b7	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  004ba	d9 5d a0	 fstp	 DWORD PTR tv517[ebp]
  004bd	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv517[ebp]
  004c2	f3 0f 11 47 14	 movss	 DWORD PTR [edi+20], xmm0
  004c7	50		 push	 eax
  004c8	50		 push	 eax
  004c9	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 156  : 
; 157  : 			if (m_pEmitterProperty->isEmitFromEdge())

  004ce	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  004d1	e8 00 00 00 00	 call	 ?isEmitFromEdge@CEmitterProperty@@QAEHXZ ; CEmitterProperty::isEmitFromEdge
  004d6	85 c0		 test	 eax, eax
  004d8	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  004db	74 0c		 je	 SHORT $LN13@CreatePart

; 158  : 			{
; 159  : 				pInstance->m_v3Position *= (m_pEmitterProperty->m_fEmittingRadius + fEmittingSize);

  004dd	f3 0f 10 4d 9c	 movss	 xmm1, DWORD PTR _fEmittingSize$[ebp]
  004e2	f3 0f 58 48 28	 addss	 xmm1, DWORD PTR [eax+40]

; 160  : 			}

  004e7	eb 28		 jmp	 SHORT $LN173@CreatePart
$LN13@CreatePart:

; 169  : 		D3DXVECTOR3 v3TimePosition = _v3TimePosition;

  004e9	f3 0f 10 40 28	 movss	 xmm0, DWORD PTR [eax+40]
  004ee	83 ec 08	 sub	 esp, 8
  004f1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004f7	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  004fe	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00503	d8 45 9c	 fadd	 DWORD PTR _fEmittingSize$[ebp]
  00506	83 c4 08	 add	 esp, 8
  00509	d9 5d a0	 fstp	 DWORD PTR $T4[ebp]
  0050c	f3 0f 10 4d a0	 movss	 xmm1, DWORD PTR $T4[ebp]
$LN173@CreatePart:
  00511	0f 28 c1	 movaps	 xmm0, xmm1
  00514	f3 0f 59 47 0c	 mulss	 xmm0, DWORD PTR [edi+12]
  00519	f3 0f 11 47 0c	 movss	 DWORD PTR [edi+12], xmm0
  0051e	0f 28 c1	 movaps	 xmm0, xmm1
  00521	f3 0f 59 4f 14	 mulss	 xmm1, DWORD PTR [edi+20]
  00526	f3 0f 59 47 10	 mulss	 xmm0, DWORD PTR [edi+16]
  0052b	f3 0f 11 4f 14	 movss	 DWORD PTR [edi+20], xmm1
  00530	f3 0f 11 47 10	 movss	 DWORD PTR [edi+16], xmm0
$LN18@CreatePart:
  00535	f3 0f 7e 45 bc	 movq	 xmm0, QWORD PTR __v3TimePosition$[ebp]

; 170  : 
; 171  : 		pInstance->m_v3Position += v3TimePosition;

  0053a	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0053d	8b 45 c4	 mov	 eax, DWORD PTR __v3TimePosition$[ebp+8]
  00540	66 0f d6 45 e0	 movq	 QWORD PTR _v3TimePosition$8[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  00545	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR __v3TimePosition$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 169  : 		D3DXVECTOR3 v3TimePosition = _v3TimePosition;

  0054a	89 45 e8	 mov	 DWORD PTR _v3TimePosition$8[ebp+8], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  0054d	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  00551	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 329  :     y += v.y;

  00555	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _v3TimePosition$8[ebp+4]
  0055a	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  0055f	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 330  :     z += v.z;

  00564	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _v3TimePosition$8[ebp+8]
  00569	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0056e	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 173  : 		if (mc_pmatLocal && !m_pParticleProperty->m_bAttachFlag)

  00573	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00576	85 d2		 test	 edx, edx
  00578	74 1e		 je	 SHORT $LN19@CreatePart
  0057a	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0057d	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  00581	75 15		 jne	 SHORT $LN19@CreatePart

; 174  : 		{
; 175  : 			D3DXVec3TransformCoord(&pInstance->m_v3Position, &pInstance->m_v3Position, mc_pmatLocal);

  00583	52		 push	 edx
  00584	51		 push	 ecx
  00585	51		 push	 ecx
  00586	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 176  : 			D3DXVec3TransformCoord(&v3TimePosition, &v3TimePosition, mc_pmatLocal);

  0058b	ff 76 08	 push	 DWORD PTR [esi+8]
  0058e	8d 45 e0	 lea	 eax, DWORD PTR _v3TimePosition$8[ebp]
  00591	50		 push	 eax
  00592	50		 push	 eax
  00593	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
$LN19@CreatePart:

; 177  : 		}
; 178  : 		pInstance->m_v3StartPosition = v3TimePosition;

  00598	f3 0f 7e 45 e0	 movq	 xmm0, QWORD PTR _v3TimePosition$8[ebp]
  0059d	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  005a1	8b 45 e8	 mov	 eax, DWORD PTR _v3TimePosition$8[ebp+8]
  005a4	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 179  : 		//pInstance->m_v3LastPosition = pInstance->m_v3Position;
; 180  : 
; 181  : 		// Direction & Velocity
; 182  : 		pInstance->m_v3Velocity.x = 0.0f;

  005a7	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0

; 183  : 		pInstance->m_v3Velocity.y = 0.0f;

  005ae	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0

; 184  : 		pInstance->m_v3Velocity.z = 0.0f;

  005b5	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 185  : 
; 186  : 		if (CEmitterProperty::EMITTER_ADVANCED_TYPE_INNER == m_pEmitterProperty->GetEmitterAdvancedType())

  005bc	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  005bf	e8 00 00 00 00	 call	 ?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterAdvancedType
  005c4	3c 02		 cmp	 al, 2
  005c6	75 47		 jne	 SHORT $LN20@CreatePart
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005c8	f3 0f 10 57 0c	 movss	 xmm2, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 188  : 			D3DXVec3Normalize(&pInstance->m_v3Velocity, &(pInstance->m_v3Position - v3TimePosition));

  005cd	8d 45 b0	 lea	 eax, DWORD PTR $T6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  005d0	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  005d5	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  005da	f3 0f 5c 55 e0	 subss	 xmm2, DWORD PTR _v3TimePosition$8[ebp]
  005df	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _v3TimePosition$8[ebp+4]
  005e4	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _v3TimePosition$8[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 188  : 			D3DXVec3Normalize(&pInstance->m_v3Velocity, &(pInstance->m_v3Position - v3TimePosition));

  005e9	50		 push	 eax
  005ea	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  005ed	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  005ee	f3 0f 11 55 b0	 movss	 DWORD PTR $T6[ebp], xmm2

; 305  :     y = fy;

  005f3	f3 0f 11 4d b4	 movss	 DWORD PTR $T6[ebp+4], xmm1

; 306  :     z = fz;

  005f8	f3 0f 11 45 b8	 movss	 DWORD PTR $T6[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 188  : 			D3DXVec3Normalize(&pInstance->m_v3Velocity, &(pInstance->m_v3Position - v3TimePosition));

  005fd	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 346  :     x *= f;

  00602	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@c2c80000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 190  : 		}

  0060a	e9 c4 00 00 00	 jmp	 $LN174@CreatePart
$LN20@CreatePart:

; 191  : 		else if (CEmitterProperty::EMITTER_ADVANCED_TYPE_OUTER == m_pEmitterProperty->GetEmitterAdvancedType())

  0060f	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00612	e8 00 00 00 00	 call	 ?GetEmitterAdvancedType@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterAdvancedType
  00617	3c 01		 cmp	 al, 1
  00619	0f 85 de 00 00
	00		 jne	 $LN24@CreatePart

; 192  : 		{
; 193  : 			if (m_pEmitterProperty->GetEmitterShape() == CEmitterProperty::EMITTER_SHAPE_POINT)

  0061f	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  00622	e8 00 00 00 00	 call	 ?GetEmitterShape@CEmitterProperty@@QAEEXZ ; CEmitterProperty::GetEmitterShape
  00627	84 c0		 test	 al, al
  00629	75 66		 jne	 SHORT $LN23@CreatePart

; 194  : 			{
; 195  : 				pInstance->m_v3Velocity.x = frandom(-100.0f, 100.0f);

  0062b	83 ec 08	 sub	 esp, 8
  0062e	c7 44 24 04 00
	00 c8 42	 mov	 DWORD PTR [esp+4], 1120403456 ; 42c80000H
  00636	c7 04 24 00 00
	c8 c2		 mov	 DWORD PTR [esp], -1027080192 ; c2c80000H
  0063d	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00642	d9 5d a0	 fstp	 DWORD PTR tv637[ebp]
  00645	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv637[ebp]

; 196  : 				pInstance->m_v3Velocity.y = frandom(-100.0f, 100.0f);

  0064a	c7 44 24 04 00
	00 c8 42	 mov	 DWORD PTR [esp+4], 1120403456 ; 42c80000H
  00652	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  00657	c7 04 24 00 00
	c8 c2		 mov	 DWORD PTR [esp], -1027080192 ; c2c80000H
  0065e	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00663	d9 5d a0	 fstp	 DWORD PTR tv648[ebp]
  00666	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv648[ebp]

; 197  : 				pInstance->m_v3Velocity.z = frandom(-100.0f, 100.0f);

  0066b	c7 44 24 04 00
	00 c8 42	 mov	 DWORD PTR [esp+4], 1120403456 ; 42c80000H
  00673	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  00678	c7 04 24 00 00
	c8 c2		 mov	 DWORD PTR [esp], -1027080192 ; c2c80000H
  0067f	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00684	d9 5d a0	 fstp	 DWORD PTR tv659[ebp]
  00687	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv659[ebp]
  0068c	83 c4 08	 add	 esp, 8

; 198  : 			}

  0068f	eb 67		 jmp	 SHORT $LN175@CreatePart
$LN23@CreatePart:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00691	f3 0f 10 57 0c	 movss	 xmm2, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 201  : 				D3DXVec3Normalize(&pInstance->m_v3Velocity, &(pInstance->m_v3Position - v3TimePosition));

  00696	8d 45 a4	 lea	 eax, DWORD PTR $T5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00699	f3 0f 10 4f 10	 movss	 xmm1, DWORD PTR [edi+16]
  0069e	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  006a3	f3 0f 5c 55 e0	 subss	 xmm2, DWORD PTR _v3TimePosition$8[ebp]
  006a8	f3 0f 5c 4d e4	 subss	 xmm1, DWORD PTR _v3TimePosition$8[ebp+4]
  006ad	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR _v3TimePosition$8[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 201  : 				D3DXVec3Normalize(&pInstance->m_v3Velocity, &(pInstance->m_v3Position - v3TimePosition));

  006b2	50		 push	 eax
  006b3	8d 47 24	 lea	 eax, DWORD PTR [edi+36]
  006b6	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  006b7	f3 0f 11 55 a4	 movss	 DWORD PTR $T5[ebp], xmm2

; 305  :     y = fy;

  006bc	f3 0f 11 4d a8	 movss	 DWORD PTR $T5[ebp+4], xmm1

; 306  :     z = fz;

  006c1	f3 0f 11 45 ac	 movss	 DWORD PTR $T5[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 201  : 				D3DXVec3Normalize(&pInstance->m_v3Velocity, &(pInstance->m_v3Position - v3TimePosition));

  006c6	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 346  :     x *= f;

  006cb	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@42c80000
$LN174@CreatePart:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 206  : 		D3DXVECTOR3 v3Velocity = _v3Velocity;

  006d3	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  006d8	f3 0f 59 c1	 mulss	 xmm0, xmm1
  006dc	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  006e1	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  006e6	f3 0f 59 c1	 mulss	 xmm0, xmm1
  006ea	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  006ef	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  006f4	f3 0f 59 c1	 mulss	 xmm0, xmm1
$LN175@CreatePart:
  006f8	f3 0f 11 47 2c	 movss	 DWORD PTR [edi+44], xmm0
$LN24@CreatePart:
  006fd	f3 0f 7e 45 c8	 movq	 xmm0, QWORD PTR __v3Velocity$[ebp]

; 207  : 		if (mc_pmatLocal && !m_pParticleProperty->m_bAttachFlag)

  00702	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00705	8b 45 d0	 mov	 eax, DWORD PTR __v3Velocity$[ebp+8]
  00708	66 0f d6 45 d4	 movq	 QWORD PTR _v3Velocity$7[ebp], xmm0
  0070d	89 45 dc	 mov	 DWORD PTR _v3Velocity$7[ebp+8], eax
  00710	85 c9		 test	 ecx, ecx
  00712	74 14		 je	 SHORT $LN25@CreatePart
  00714	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  00717	83 78 20 00	 cmp	 DWORD PTR [eax+32], 0
  0071b	75 0b		 jne	 SHORT $LN25@CreatePart

; 208  : 		{
; 209  : 			D3DXVec3TransformNormal(&v3Velocity, &v3Velocity, mc_pmatLocal);

  0071d	51		 push	 ecx
  0071e	8d 45 d4	 lea	 eax, DWORD PTR _v3Velocity$7[ebp]
  00721	50		 push	 eax
  00722	50		 push	 eax
  00723	e8 00 00 00 00	 call	 _D3DXVec3TransformNormal@12
$LN25@CreatePart:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  00728	f3 0f 10 45 d4	 movss	 xmm0, DWORD PTR _v3Velocity$7[ebp]
  0072d	f3 0f 58 47 24	 addss	 xmm0, DWORD PTR [edi+36]
  00732	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0

; 329  :     y += v.y;

  00737	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _v3Velocity$7[ebp+4]
  0073c	f3 0f 58 47 28	 addss	 xmm0, DWORD PTR [edi+40]
  00741	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0

; 330  :     z += v.z;

  00746	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _v3Velocity$7[ebp+8]
  0074b	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  00750	f3 0f 11 47 2c	 movss	 DWORD PTR [edi+44], xmm0
  00755	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 213  : 		if (m_pEmitterProperty->m_v3EmittingDirection.x > 0.0f)

  00758	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  0075b	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  00760	0f 2f c8	 comiss	 xmm1, xmm0
  00763	76 48		 jbe	 SHORT $LN26@CreatePart

; 214  : 		{
; 215  : 			pInstance->m_v3Velocity.x += frandom(-m_pEmitterProperty->m_v3EmittingDirection.x / 2.0f, m_pEmitterProperty->m_v3EmittingDirection.x / 2.0f) * 1000.0f;

  00765	0f 28 c1	 movaps	 xmm0, xmm1
  00768	83 ec 08	 sub	 esp, 8
  0076b	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00772	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0077a	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00782	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00788	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0078d	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  00792	d8 4d 84	 fmul	 DWORD PTR __real@447a0000$1$[ebp]
  00795	83 c4 08	 add	 esp, 8
  00798	d9 5d a0	 fstp	 DWORD PTR tv736[ebp]
  0079b	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv736[ebp]
  007a0	f3 0f 58 47 24	 addss	 xmm0, DWORD PTR [edi+36]
  007a5	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0
  007aa	0f 57 c0	 xorps	 xmm0, xmm0
$LN26@CreatePart:

; 216  : 		}
; 217  : 		if (m_pEmitterProperty->m_v3EmittingDirection.y > 0.0f)

  007ad	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  007b0	f3 0f 10 48 30	 movss	 xmm1, DWORD PTR [eax+48]
  007b5	0f 2f c8	 comiss	 xmm1, xmm0
  007b8	76 48		 jbe	 SHORT $LN27@CreatePart

; 218  : 		{
; 219  : 			pInstance->m_v3Velocity.y += frandom(-m_pEmitterProperty->m_v3EmittingDirection.y / 2.0f, m_pEmitterProperty->m_v3EmittingDirection.y / 2.0f) * 1000.0f;

  007ba	0f 28 c1	 movaps	 xmm0, xmm1
  007bd	83 ec 08	 sub	 esp, 8
  007c0	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  007c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  007cf	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  007d7	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  007dd	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  007e2	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  007e7	d8 4d 84	 fmul	 DWORD PTR __real@447a0000$1$[ebp]
  007ea	83 c4 08	 add	 esp, 8
  007ed	d9 5d a0	 fstp	 DWORD PTR tv778[ebp]
  007f0	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv778[ebp]
  007f5	f3 0f 58 47 28	 addss	 xmm0, DWORD PTR [edi+40]
  007fa	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  007ff	0f 57 c0	 xorps	 xmm0, xmm0
$LN27@CreatePart:

; 220  : 		}
; 221  : 		if (m_pEmitterProperty->m_v3EmittingDirection.z > 0.0f)

  00802	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  00805	f3 0f 10 48 34	 movss	 xmm1, DWORD PTR [eax+52]
  0080a	0f 2f c8	 comiss	 xmm1, xmm0
  0080d	76 45		 jbe	 SHORT $LN28@CreatePart

; 222  : 		{
; 223  : 			pInstance->m_v3Velocity.z += frandom(-m_pEmitterProperty->m_v3EmittingDirection.z / 2.0f, m_pEmitterProperty->m_v3EmittingDirection.z / 2.0f) * 1000.0f;

  0080f	0f 28 c1	 movaps	 xmm0, xmm1
  00812	83 ec 08	 sub	 esp, 8
  00815	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0081c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00824	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  0082c	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00832	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00837	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  0083c	d8 4d 84	 fmul	 DWORD PTR __real@447a0000$1$[ebp]
  0083f	83 c4 08	 add	 esp, 8
  00842	d9 5d a0	 fstp	 DWORD PTR tv820[ebp]
  00845	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv820[ebp]
  0084a	f3 0f 58 47 2c	 addss	 xmm0, DWORD PTR [edi+44]
  0084f	f3 0f 11 47 2c	 movss	 DWORD PTR [edi+44], xmm0
$LN28@CreatePart:

; 224  : 		}
; 225  : 
; 226  : 		pInstance->m_v3Velocity *= fVelocity;

  00854	f3 0f 10 8d 70
	ff ff ff	 movss	 xmm1, DWORD PTR _fVelocity$[ebp]

; 233  : 		pInstance->m_fRotation = frandom(m_pParticleProperty->m_wRotationRandomStartingBegin, m_pParticleProperty->m_wRotationRandomStartingEnd);

  0085c	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 346  :     x *= f;

  0085f	0f 28 c1	 movaps	 xmm0, xmm1
  00862	f3 0f 59 47 24	 mulss	 xmm0, DWORD PTR [edi+36]
  00867	f3 0f 11 47 24	 movss	 DWORD PTR [edi+36], xmm0

; 347  :     y *= f;

  0086c	0f 28 c1	 movaps	 xmm0, xmm1
  0086f	f3 0f 59 47 28	 mulss	 xmm0, DWORD PTR [edi+40]

; 348  :     z *= f;

  00874	f3 0f 59 4f 2c	 mulss	 xmm1, DWORD PTR [edi+44]
  00879	f3 0f 11 47 28	 movss	 DWORD PTR [edi+40], xmm0
  0087e	f3 0f 11 4f 2c	 movss	 DWORD PTR [edi+44], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 229  : 		pInstance->m_v2HalfSize = v2HalfSize;

  00883	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _v2HalfSize$[ebp]
  0088b	f3 0f 11 47 30	 movss	 DWORD PTR [edi+48], xmm0
  00890	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR _v2HalfSize$[ebp+4]
  00898	f3 0f 11 47 34	 movss	 DWORD PTR [edi+52], xmm0

; 230  : 
; 231  : 		// Rotation
; 232  : 		pInstance->m_fRotation = m_pParticleProperty->m_wRotationRandomStartingBegin;

  0089d	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  008a0	0f b7 40 1c	 movzx	 eax, WORD PTR [eax+28]
  008a4	66 0f 6e c0	 movd	 xmm0, eax
  008a8	0f 5b c0	 cvtdq2ps xmm0, xmm0
  008ab	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0

; 233  : 		pInstance->m_fRotation = frandom(m_pParticleProperty->m_wRotationRandomStartingBegin, m_pParticleProperty->m_wRotationRandomStartingEnd);

  008b0	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  008b3	0f b7 41 1e	 movzx	 eax, WORD PTR [ecx+30]
  008b7	66 0f 6e c0	 movd	 xmm0, eax
  008bb	0f b7 41 1c	 movzx	 eax, WORD PTR [ecx+28]
  008bf	0f 5b c0	 cvtdq2ps xmm0, xmm0
  008c2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  008c8	66 0f 6e c0	 movd	 xmm0, eax
  008cc	0f 5b c0	 cvtdq2ps xmm0, xmm0
  008cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d4	e8 00 00 00 00	 call	 ?frandom@@YAMMM@Z	; frandom
  008d9	d9 5d a0	 fstp	 DWORD PTR tv844[ebp]
  008dc	f3 0f 10 45 a0	 movss	 xmm0, DWORD PTR tv844[ebp]
  008e1	83 c4 08	 add	 esp, 8
  008e4	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0

; 234  : 		if (BILLBOARD_TYPE_LIE == m_pParticleProperty->m_byBillboardType && mc_pmatLocal)

  008e9	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  008ec	80 78 13 03	 cmp	 BYTE PTR [eax+19], 3
  008f0	75 13		 jne	 SHORT $LN29@CreatePart
  008f2	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  008f6	74 0d		 je	 SHORT $LN29@CreatePart

; 235  : 		{
; 236  : 			pInstance->m_fRotation += fLieRotation;

  008f8	f3 0f 58 85 6c
	ff ff ff	 addss	 xmm0, DWORD PTR _fLieRotation$1$[ebp]
  00900	f3 0f 11 47 40	 movss	 DWORD PTR [edi+64], xmm0
$LN29@CreatePart:

; 237  : 		}
; 238  : 
; 239  : 		// Texture Animation
; 240  : 		pInstance->m_byFrameIndex = 0;

  00905	c6 47 50 00	 mov	 BYTE PTR [edi+80], 0

; 241  : 		pInstance->m_byTextureAnimationType = m_pParticleProperty->GetTextureAnimationType();

  00909	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  0090c	8a 40 04	 mov	 al, BYTE PTR [eax+4]
  0090f	88 47 48	 mov	 BYTE PTR [edi+72], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00912	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00915	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00918	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  0091b	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 243  : 		if (m_pParticleProperty->GetTextureAnimationFrameCount() > 1)

  0091e	83 f8 01	 cmp	 eax, 1
  00921	76 4f		 jbe	 SHORT $LN34@CreatePart

; 244  : 		{
; 245  : 			if (CParticleProperty::TEXTURE_ANIMATION_TYPE_RANDOM_DIRECTION == m_pParticleProperty->GetTextureAnimationType())

  00923	80 79 04 04	 cmp	 BYTE PTR [ecx+4], 4
  00927	75 28		 jne	 SHORT $LN33@CreatePart

; 246  : 			{
; 247  : 				if (random() & 1)

  00929	e8 00 00 00 00	 call	 ?random@@YAKXZ		; random
  0092e	a8 01		 test	 al, 1
  00930	74 0a		 je	 SHORT $LN32@CreatePart

; 248  : 				{
; 249  : 					pInstance->m_byFrameIndex = 0;

  00932	c6 47 50 00	 mov	 BYTE PTR [edi+80], 0

; 250  : 					pInstance->m_byTextureAnimationType = CParticleProperty::TEXTURE_ANIMATION_TYPE_CW;

  00936	c6 47 48 01	 mov	 BYTE PTR [edi+72], 1

; 251  : 				}

  0093a	eb 15		 jmp	 SHORT $LN33@CreatePart
$LN32@CreatePart:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  0093c	8b 46 60	 mov	 eax, DWORD PTR [esi+96]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0093f	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  00942	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]
  00945	c1 f9 02	 sar	 ecx, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 254  : 					pInstance->m_byFrameIndex = m_pParticleProperty->GetTextureAnimationFrameCount() - 1;

  00948	fe c9		 dec	 cl
  0094a	88 4f 50	 mov	 BYTE PTR [edi+80], cl

; 255  : 					pInstance->m_byTextureAnimationType = CParticleProperty::TEXTURE_ANIMATION_TYPE_CCW;

  0094d	c6 47 48 02	 mov	 BYTE PTR [edi+72], 2
$LN33@CreatePart:

; 256  : 				}
; 257  : 			}
; 258  : 			if (m_pParticleProperty->m_bTexAniRandomStartFrameFlag)

  00951	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00954	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00958	74 18		 je	 SHORT $LN34@CreatePart
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0095a	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  0095d	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  00960	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 260  : 				pInstance->m_byFrameIndex = random_range(0, m_pParticleProperty->GetTextureAnimationFrameCount() - 1);

  00963	48		 dec	 eax
  00964	50		 push	 eax
  00965	6a 00		 push	 0
  00967	e8 00 00 00 00	 call	 ?random_range@@YAJJJ@Z	; random_range
  0096c	83 c4 08	 add	 esp, 8
  0096f	88 47 50	 mov	 BYTE PTR [edi+80], al
$LN34@CreatePart:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00972	f3 0f 10 8d 68
	ff ff ff	 movss	 xmm1, DWORD PTR _fElapsedTime$GSCopy$1$[ebp]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0097a	f3 0f 10 5f 10	 movss	 xmm3, DWORD PTR [edi+16]

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0097f	0f 28 c1	 movaps	 xmm0, xmm1
  00982	f3 0f 59 47 28	 mulss	 xmm0, DWORD PTR [edi+40]
  00987	0f 28 e1	 movaps	 xmm4, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 280  : 		if (!pFirstInstance)

  0098a	8b 4d 80	 mov	 ecx, DWORD PTR _pFirstInstance$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0098d	f3 0f 59 67 24	 mulss	 xmm4, DWORD PTR [edi+36]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 280  : 		if (!pFirstInstance)

  00992	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00993	f3 0f 59 4f 2c	 mulss	 xmm1, DWORD PTR [edi+44]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00998	f3 0f 5c d8	 subss	 xmm3, xmm0
  0099c	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  009a1	f3 0f 10 57 14	 movss	 xmm2, DWORD PTR [edi+20]
  009a6	f3 0f 5c c4	 subss	 xmm0, xmm4
  009aa	f3 0f 5c d1	 subss	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 266  : 			pInstance->m_v3LastPosition = pInstance->m_v3Position - (pInstance->m_v3Velocity * fElapsedTime);

  009ae	f3 0f 11 47 18	 movss	 DWORD PTR [edi+24], xmm0
  009b3	f3 0f 11 5f 1c	 movss	 DWORD PTR [edi+28], xmm3
  009b8	f3 0f 11 57 20	 movss	 DWORD PTR [edi+32], xmm2

; 267  : 			pInstance->m_v2Scale.x = m_pParticleProperty->m_TimeEventScaleX.front().m_Value;

  009bd	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  009c0	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  009c3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  009c8	f3 0f 11 47 38	 movss	 DWORD PTR [edi+56], xmm0

; 268  : 			pInstance->m_v2Scale.y = m_pParticleProperty->m_TimeEventScaleY.front().m_Value;

  009cd	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  009d0	8b 40 4c	 mov	 eax, DWORD PTR [eax+76]
  009d3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  009d8	f3 0f 11 47 3c	 movss	 DWORD PTR [edi+60], xmm0

; 269  : 			//pInstance->m_v2Scale = m_pParticleProperty->m_TimeEventScaleXY.front().m_Value;
; 270  : #ifdef WORLD_EDITOR
; 271  : 			pInstance->m_Color.r = m_pParticleProperty->m_TimeEventColorRed.front().m_Value;
; 272  : 			pInstance->m_Color.g = m_pParticleProperty->m_TimeEventColorGreen.front().m_Value;
; 273  : 			pInstance->m_Color.b = m_pParticleProperty->m_TimeEventColorBlue.front().m_Value;
; 274  : 			pInstance->m_Color.a = m_pParticleProperty->m_TimeEventAlpha.front().m_Value;
; 275  : #else
; 276  : 			pInstance->m_dcColor = m_pParticleProperty->m_TimeEventColor.front().m_Value;

  009dd	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  009e0	8b 40 58	 mov	 eax, DWORD PTR [eax+88]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.h

; 146  : 		m_dwColor = r.m_dwColor;

  009e3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  009e6	89 47 44	 mov	 DWORD PTR [edi+68], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 280  : 		if (!pFirstInstance)

  009e9	85 c9		 test	 ecx, ecx
  009eb	75 0d		 jne	 SHORT $LN35@CreatePart

; 281  : 		{
; 282  : 			m_pData->BuildDecorator(pInstance);

  009ed	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  009f0	e8 00 00 00 00	 call	 ?BuildDecorator@CParticleSystemData@@QAEXPAVCParticleInstance@@@Z ; CParticleSystemData::BuildDecorator

; 283  : 			pFirstInstance = pInstance;

  009f5	89 7d 80	 mov	 DWORD PTR _pFirstInstance$1$[ebp], edi

; 284  : 		}

  009f8	eb 5a		 jmp	 SHORT $LN36@CreatePart
$LN35@CreatePart:

; 287  : 			pInstance->m_pDecorator = pFirstInstance->m_pDecorator->Clone(pFirstInstance, pInstance);

  009fa	8b 71 70	 mov	 esi, DWORD PTR [ecx+112]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\EffectUpdateDecorator.h

; 54   : 		CBaseDecorator * pNewDecorator = __Clone(pFirstInstance, pInstance);

  009fd	51		 push	 ecx
  009fe	8b ce		 mov	 ecx, esi
  00a00	8b 06		 mov	 eax, DWORD PTR [esi]
  00a02	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00a05	ff d0		 call	 eax

; 55   : 		CBaseDecorator * pSrc = this;
; 56   : 		CBaseDecorator * pDest = pNewDecorator;
; 57   : 		while (pSrc->m_NextDecorator)

  00a07	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00a0a	83 c6 04	 add	 esi, 4
  00a0d	89 85 7c ff ff
	ff		 mov	 DWORD PTR _pNewDecorator$1$[ebp], eax
  00a13	89 45 a0	 mov	 DWORD PTR _pDest$1$[ebp], eax
  00a16	85 c9		 test	 ecx, ecx
  00a18	74 31		 je	 SHORT $LN128@CreatePart
  00a1a	66 0f 1f 44 00
	00		 npad	 6
$LL127@CreatePart:

; 58   : 		{
; 59   : 			pDest->m_NextDecorator = pSrc->m_NextDecorator->__Clone(pFirstInstance, pInstance);

  00a20	8b 01		 mov	 eax, DWORD PTR [ecx]
  00a22	57		 push	 edi
  00a23	ff 75 80	 push	 DWORD PTR _pFirstInstance$1$[ebp]
  00a26	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00a29	ff d0		 call	 eax
  00a2b	8b 55 a0	 mov	 edx, DWORD PTR _pDest$1$[ebp]
  00a2e	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 60   : 			pDest->m_NextDecorator->m_PrevDecorator = pDest;

  00a31	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 61   : 
; 62   : 			pSrc = pSrc->m_NextDecorator;

  00a34	8b 36		 mov	 esi, DWORD PTR [esi]

; 63   : 			pDest = pDest->m_NextDecorator;

  00a36	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00a39	83 c6 04	 add	 esi, 4
  00a3c	89 4d a0	 mov	 DWORD PTR _pDest$1$[ebp], ecx
  00a3f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00a41	85 c9		 test	 ecx, ecx
  00a43	75 db		 jne	 SHORT $LL127@CreatePart
  00a45	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _pNewDecorator$1$[ebp]
$LN128@CreatePart:
  00a4b	8b b5 5c ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 287  : 			pInstance->m_pDecorator = pFirstInstance->m_pDecorator->Clone(pFirstInstance, pInstance);

  00a51	89 47 70	 mov	 DWORD PTR [edi+112], eax
$LN36@CreatePart:

; 288  : 		}
; 289  : 
; 290  : 		m_ParticleInstanceListVector[pInstance->m_byFrameIndex].push_back(pInstance);

  00a54	0f b6 4f 50	 movzx	 ecx, BYTE PTR [edi+80]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00a58	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  00a5b	81 7c c8 04 55
	55 55 15	 cmp	 DWORD PTR [eax+ecx*8+4], 357913941 ; 15555555H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00a63	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00a66	8b 08		 mov	 ecx, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00a68	89 85 7c ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00a6e	89 4d a0	 mov	 DWORD PTR __Where$1$[ebp], ecx

; 1012 :         if (_Mysize == max_size()) {

  00a71	74 7e		 je	 SHORT $LN158@CreatePart
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00a73	89 45 88	 mov	 DWORD PTR __Op$3[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00a76	6a 0c		 push	 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00a78	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00a7f	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR __Op$3[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00a86	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  00a8b	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00a91	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00a94	8b 55 a0	 mov	 edx, DWORD PTR __Where$1$[ebp]

; 587  :     }

  00a97	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00a9e	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 1017 :         ++_Mysize;

  00aa1	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00aa4	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00aa7	89 10		 mov	 DWORD PTR [eax], edx

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00aa9	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 604  :         _Insert_before->_Prev = _Result;

  00aac	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 605  :         _Insert_after->_Next  = _Result;

  00aaf	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 108  : 	for (int i = 0; i < iCreatingCount; ++i)

  00ab1	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _i$1$[ebp]

; 291  : 		m_dwCurrentEmissionCount++;

  00ab7	ff 46 3c	 inc	 DWORD PTR [esi+60]
  00aba	40		 inc	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 603  :         this->_Ptr            = pointer{};

  00abb	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR __Op$3[ebp+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 108  : 	for (int i = 0; i < iCreatingCount; ++i)

  00ac2	89 85 64 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], eax
  00ac8	3b 45 94	 cmp	 eax, DWORD PTR _iCreatingCount$1$[ebp]
  00acb	0f 8c e2 f7 ff
	ff		 jl	 $LL4@CreatePart
$LN3@CreatePart:

; 293  : }

  00ad1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00ad4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00adb	59		 pop	 ecx
  00adc	5f		 pop	 edi
  00add	5e		 pop	 esi
  00ade	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ae1	33 cd		 xor	 ecx, ebp
  00ae3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ae8	8b e5		 mov	 esp, ebp
  00aea	5d		 pop	 ebp
  00aeb	8b e3		 mov	 esp, ebx
  00aed	5b		 pop	 ebx
  00aee	c2 04 00	 ret	 4
$LN158@CreatePart:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1013 :             _Xlength_error("list too long");

  00af1	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00af6	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN172@CreatePart:
  00afb	90		 npad	 1
$LN166@CreatePart:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 293  : }

  00afc	00 00 00 00	 DD	 $LN11@CreatePart
  00b00	00 00 00 00	 DD	 $LN12@CreatePart
  00b04	00 00 00 00	 DD	 $LN15@CreatePart
  00b08	00 00 00 00	 DD	 $LN16@CreatePart
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateParticles@CParticleSystemInstance@@QAEXM@Z$1:
  00000	8d 4d 88	 lea	 ecx, DWORD PTR __Op$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@PAVCParticleInstance@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<CParticleInstance *,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?CreateParticles@CParticleSystemInstance@@QAEXM@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 58 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-168]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateParticles@CParticleSystemInstance@@QAEXM@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateParticles@CParticleSystemInstance@@QAEXM@Z ENDP	; CParticleSystemInstance::CreateParticles
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
_pkImgInstNew$1 = 8					; size = 4
_pElement$ = 8						; size = 4
$T2 = 11						; size = 1
?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z PROC ; CParticleSystemInstance::OnSetDataPointer, COMDAT
; _this$ = ecx

; 482  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx

; 483  : 	m_pData = (CParticleSystemData *)pElement;

  00009	8b 4d 08	 mov	 ecx, DWORD PTR _pElement$[ebp]
  0000c	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  0000f	89 4f 5c	 mov	 DWORD PTR [edi+92], ecx

; 484  : 
; 485  : 	m_dwCurrentEmissionCount = 0;

  00012	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0

; 486  : 	m_pParticleProperty = m_pData->GetParticlePropertyPointer();

  00019	e8 00 00 00 00	 call	 ?GetParticlePropertyPointer@CParticleSystemData@@QAEPAVCParticleProperty@@XZ ; CParticleSystemData::GetParticlePropertyPointer

; 487  : 	m_pEmitterProperty = m_pData->GetEmitterPropertyPointer();

  0001e	8b 4f 5c	 mov	 ecx, DWORD PTR [edi+92]
  00021	89 47 60	 mov	 DWORD PTR [edi+96], eax
  00024	e8 00 00 00 00	 call	 ?GetEmitterPropertyPointer@CParticleSystemData@@QAEPAVCEmitterProperty@@XZ ; CParticleSystemData::GetEmitterPropertyPointer
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00029	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 489  : 	m_ParticleInstanceListVector.resize(m_pParticleProperty->GetTextureAnimationFrameCount() * 2 + 2);

  0002c	8d 5f 44	 lea	 ebx, DWORD PTR [edi+68]
  0002f	89 47 64	 mov	 DWORD PTR [edi+100], eax
  00032	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00035	89 47 40	 mov	 DWORD PTR [edi+64], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00038	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  0003b	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0003e	8b 33		 mov	 esi, DWORD PTR [ebx]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00040	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 489  : 	m_ParticleInstanceListVector.resize(m_pParticleProperty->GetTextureAnimationFrameCount() * 2 + 2);

  00043	8d 0c 45 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0004a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0004d	8b d0		 mov	 edx, eax
  0004f	2b d6		 sub	 edx, esi
  00051	c1 fa 03	 sar	 edx, 3

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00054	3b ca		 cmp	 ecx, edx
  00056	73 10		 jae	 SHORT $LN24@OnSetDataP

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;
; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  00058	53		 push	 ebx
  00059	8d 34 ce	 lea	 esi, DWORD PTR [esi+ecx*8]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAXPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@QAV10@AAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00063	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 1627 :             return;

  00066	eb 2b		 jmp	 SHORT $LN42@OnSetDataP
$LN24@OnSetDataP:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00068	76 2c		 jbe	 SHORT $LN25@OnSetDataP

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0006a	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0006d	2b c6		 sub	 eax, esi
  0006f	c1 f8 03	 sar	 eax, 3

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00072	3b c8		 cmp	 ecx, eax
  00074	76 0e		 jbe	 SHORT $LN26@OnSetDataP

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00076	8d 45 0b	 lea	 eax, DWORD PTR $T2[ebp]
  00079	50		 push	 eax
  0007a	51		 push	 ecx
  0007b	8b cb		 mov	 ecx, ebx
  0007d	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00082	eb 12		 jmp	 SHORT $LN25@OnSetDataP
$LN26@OnSetDataP:

; 1635 :             }
; 1636 : 
; 1637 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1638 :             const pointer _Oldlast = _Mylast;
; 1639 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1640 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1641 :             } else {
; 1642 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00084	53		 push	 ebx
  00085	2b ca		 sub	 ecx, edx
  00087	51		 push	 ecx
  00088	ff 73 04	 push	 DWORD PTR [ebx+4]
  0008b	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@std@@@std@@YAPAV?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@0@PAV10@IAAV?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00090	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN42@OnSetDataP:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 494  : 	m_kVct_pkImgInst.reserve(m_pParticleProperty->m_ImageVector.size());

  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN25@OnSetDataP:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00096	8b 47 60	 mov	 eax, DWORD PTR [edi+96]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 494  : 	m_kVct_pkImgInst.reserve(m_pParticleProperty->m_ImageVector.size());

  00099	8d 77 50	 lea	 esi, DWORD PTR [edi+80]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009c	8b 48 74	 mov	 ecx, DWORD PTR [eax+116]
  0009f	2b 48 70	 sub	 ecx, DWORD PTR [eax+112]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000a2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a5	2b 06		 sub	 eax, DWORD PTR [esi]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000a7	c1 f9 02	 sar	 ecx, 2

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  000aa	c1 f8 02	 sar	 eax, 2

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  000ad	3b c8		 cmp	 ecx, eax
  000af	76 10		 jbe	 SHORT $LN31@OnSetDataP

; 1744 :             if (_Newcapacity > max_size()) {

  000b1	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  000b7	77 6c		 ja	 SHORT $LN44@OnSetDataP

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  000b9	51		 push	 ecx
  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Reallocate_exactly
$LN31@OnSetDataP:

; 1931 :         auto& _My_data = _Mypair._Myval2;

  000c1	8b 4f 60	 mov	 ecx, DWORD PTR [edi+96]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 495  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  000c4	33 db		 xor	 ebx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000c6	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  000c9	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  000cc	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 495  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  000cf	85 c0		 test	 eax, eax
  000d1	74 49		 je	 SHORT $LN3@OnSetDataP
$LL4@OnSetDataP:

; 496  : 	{
; 497  : 		CGraphicImage * pImage = m_pParticleProperty->m_ImageVector[i];

  000d3	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  000d6	8b 3c 98	 mov	 edi, DWORD PTR [eax+ebx*4]

; 498  : 
; 499  : 		CGraphicImageInstance* pkImgInstNew = CGraphicImageInstance::New();

  000d9	e8 00 00 00 00	 call	 ?New@CGraphicImageInstance@@SAPAV1@XZ ; CGraphicImageInstance::New

; 500  : 		pkImgInstNew->SetImagePointer(pImage);

  000de	57		 push	 edi
  000df	8b c8		 mov	 ecx, eax
  000e1	89 45 08	 mov	 DWORD PTR _pkImgInstNew$1[ebp], eax
  000e4	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  000e9	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000ec	3b 4e 08	 cmp	 ecx, DWORD PTR [esi+8]
  000ef	74 0b		 je	 SHORT $LN13@OnSetDataP

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000f1	8b 45 08	 mov	 eax, DWORD PTR _pkImgInstNew$1[ebp]
  000f4	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  000f6	83 46 04 04	 add	 DWORD PTR [esi+4], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000fa	eb 0c		 jmp	 SHORT $LN2@OnSetDataP
$LN13@OnSetDataP:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000fc	8d 45 08	 lea	 eax, DWORD PTR _pkImgInstNew$1[ebp]
  000ff	50		 push	 eax
  00100	51		 push	 ecx
  00101	8b ce		 mov	 ecx, esi
  00103	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicImageInstance@@@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@AAEPAPAVCGraphicImageInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Emplace_reallocate<CGraphicImageInstance * const &>
$LN2@OnSetDataP:

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00108	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 495  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  0010b	43		 inc	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  0010c	8b 48 60	 mov	 ecx, DWORD PTR [eax+96]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0010f	8b 41 74	 mov	 eax, DWORD PTR [ecx+116]
  00112	2b 41 70	 sub	 eax, DWORD PTR [ecx+112]
  00115	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 495  : 	for (DWORD i = 0; i < m_pParticleProperty->m_ImageVector.size(); ++i)

  00118	3b d8		 cmp	 ebx, eax
  0011a	72 b7		 jb	 SHORT $LL4@OnSetDataP
$LN3@OnSetDataP:
  0011c	5f		 pop	 edi

; 503  : }

  0011d	5e		 pop	 esi
  0011e	5b		 pop	 ebx
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
$LN44@OnSetDataP:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1745 :                 _Xlength();

  00125	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::_Xlength
$LN41@OnSetDataP:
  0012a	cc		 int	 3
?OnSetDataPointer@CParticleSystemInstance@@UAEXPAVCEffectElementBase@@@Z ENDP ; CParticleSystemInstance::OnSetDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ??1CParticleSystemInstance@@UAE@XZ
_TEXT	SEGMENT
??1CParticleSystemInstance@@UAE@XZ PROC			; CParticleSystemInstance::~CParticleSystemInstance, COMDAT
; _this$ = ecx

; 543  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CParticleSystemInstance@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CParticleS

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CParticleS

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 31		 ja	 SHORT $LN19@CParticleS

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CParticleS:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN6@CParticleS:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 546  : }

  00051	8d 4e 44	 lea	 ecx, DWORD PTR [esi+68]
  00054	e8 00 00 00 00	 call	 ??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
  00059	8b ce		 mov	 ecx, esi
  0005b	5e		 pop	 esi
  0005c	e9 00 00 00 00	 jmp	 ??1CEffectElementBaseInstance@@UAE@XZ ; CEffectElementBaseInstance::~CEffectElementBaseInstance
$LN19@CParticleS:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@CParticleS:
  00066	cc		 int	 3
??1CParticleSystemInstance@@UAE@XZ ENDP			; CParticleSystemInstance::~CParticleSystemInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ??0CParticleSystemInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CParticleSystemInstance@@QAE@XZ PROC			; CParticleSystemInstance::CParticleSystemInstance, COMDAT
; _this$ = ecx

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CParticleSystemInstance@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CEffectElementBaseInstance@@QAE@XZ ; CEffectElementBaseInstance::CEffectElementBaseInstance
  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CParticleSystemInstance@@6B@
  00034	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0003b	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  00042	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  00049	c7 46 4c 00 00
	00 00		 mov	 DWORD PTR [esi+76], 0
  00050	c7 46 50 00 00
	00 00		 mov	 DWORD PTR [esi+80], 0
  00057	c7 46 54 00 00
	00 00		 mov	 DWORD PTR [esi+84], 0
  0005e	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 539  : 	Initialize();

  00065	8b ce		 mov	 ecx, esi
  00067	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0006b	e8 00 00 00 00	 call	 ?Initialize@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Initialize

; 540  : }

  00070	8b c6		 mov	 eax, esi
  00072	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007c	59		 pop	 ecx
  0007d	5e		 pop	 esi
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CEffectElementBaseInstance@@UAE@XZ ; CEffectElementBaseInstance::~CEffectElementBaseInstance
__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 44	 add	 ecx, 68			; 00000044H
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@V?$allocator@V?$list@PAVCParticleInstance@@V?$allocator@PAVCParticleInstance@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >::~vector<std::list<CParticleInstance *,std::allocator<CParticleInstance *> >,std::allocator<std::list<CParticleInstance *,std::allocator<CParticleInstance *> > > >
__unwindfunclet$??0CParticleSystemInstance@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 50	 add	 ecx, 80			; 00000050H
  00019	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCGraphicImageInstance@@V?$allocator@PAVCGraphicImageInstance@@@std@@@std@@QAE@XZ ; std::vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >::~vector<CGraphicImageInstance *,std::allocator<CGraphicImageInstance *> >
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CParticleSystemInstance@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CParticleSystemInstance@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CParticleSystemInstance@@QAE@XZ ENDP			; CParticleSystemInstance::CParticleSystemInstance
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?Delete@CParticleSystemInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkPSInst$ = 8						; size = 4
?Delete@CParticleSystemInstance@@SAXPAV1@@Z PROC	; CParticleSystemInstance::Delete, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 27   : 	pkPSInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkPSInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CEffectElementBaseInstance@@QAEXXZ ; CEffectElementBaseInstance::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 28   : 	ms_kPool.Free(pkPSInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 29   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
  00039	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 29   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CParticleSystemInstance@@SAXPAV1@@Z ENDP	; CParticleSystemInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?New@CParticleSystemInstance@@SAPAV1@XZ
_TEXT	SEGMENT
$T2 = -16						; size = 4
_pkNewData$3 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?New@CParticleSystemInstance@@SAPAV1@XZ PROC		; CParticleSystemInstance::New, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?New@CParticleSystemInstance@@SAPAV1@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00023	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00029	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16, ecx
  0002f	0f 85 80 00 00
	00		 jne	 $LN4@New

; 65   : 			T* pkNewData = new T;

  00035	6a 6c		 push	 108			; 0000006cH
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 f0	 mov	 DWORD PTR $T2[ebp], eax
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	85 c0		 test	 eax, eax
  0004b	74 09		 je	 SHORT $LN6@New
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ??0CParticleSystemInstance@@QAE@XZ ; CParticleSystemInstance::CParticleSystemInstance
  00054	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  00056	33 c0		 xor	 eax, eax
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00058	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  0005e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00065	89 45 f0	 mov	 DWORD PTR _pkNewData$3[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00068	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+12
  0006e	74 1e		 je	 SHORT $LN14@New

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00070	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00072	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00079	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 23   : }

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0008e	8d 45 f0	 lea	 eax, DWORD PTR _pkNewData$3[ebp]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
  00098	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCParticleSystemInstance@@@?$vector@PAVCParticleSystemInstance@@V?$allocator@PAVCParticleSystemInstance@@@std@@@std@@AAEPAPAVCParticleSystemInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CParticleSystemInstance *,std::allocator<CParticleSystemInstance *> >::_Emplace_reallocate<CParticleSystemInstance * const &>
  0009d	8b 45 f0	 mov	 eax, DWORD PTR _pkNewData$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  000a0	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 23   : }

  000a6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b0	59		 pop	 ecx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
$LN4@New:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  000b5	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  000b8	83 c1 fc	 add	 ecx, -4			; fffffffcH
  000bb	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 23   : }

  000c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cb	59		 pop	 ecx
  000cc	8b e5		 mov	 esp, ebp
  000ce	5d		 pop	 ebp
  000cf	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CParticleSystemInstance@@SAPAV1@XZ$0:
  00000	6a 6c		 push	 108			; 0000006cH
  00002	8b 45 f0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?New@CParticleSystemInstance@@SAPAV1@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?New@CParticleSystemInstance@@SAPAV1@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?New@CParticleSystemInstance@@SAPAV1@XZ ENDP		; CParticleSystemInstance::New
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?DestroySystem@CParticleSystemInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CParticleSystemInstance@@SAXXZ PROC	; CParticleSystemInstance::DestroySystem, COMDAT

; 13   : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 13   : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 21		 je	 SHORT $LN40@DestroySys
$LL20@DestroySys:

; 266  :         _Func(*_UFirst);

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterLib\Pool.h

; 114  : 		delete pkData;

  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN26@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN26@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
$LN40@DestroySys:
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20
  00039	0f 45 fe	 cmovne	 edi, esi
  0003c	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16, ecx
  00042	89 3d 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+8, edi
  00048	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+16
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 16   : 	CParticleInstance::DestroySystem();

  0004f	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CParticleSystemInstance@@2V?$CDynamicPool@VCParticleSystemInstance@@@@A+20, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp

; 16   : 	CParticleInstance::DestroySystem();

  00056	5e		 pop	 esi
  00057	e9 00 00 00 00	 jmp	 ?DestroySystem@CParticleInstance@@SAXXZ ; CParticleInstance::DestroySystem
?DestroySystem@CParticleSystemInstance@@SAXXZ ENDP	; CParticleSystemInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXIW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\ParticleSystemInstance.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	c2 00 00	 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
