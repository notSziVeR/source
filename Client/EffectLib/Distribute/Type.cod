; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Distribute\Type.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z ; GetTokenTimeEventFloat
PUBLIC	?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
PUBLIC	?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange
PUBLIC	?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z ; InsertItemTimeEventFloat
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Emplace_reallocate@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEPAV?$CTimeEvent@M@@QAV2@ABV2@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Emplace_reallocate<CTimeEvent<float> const &>
PUBLIC	??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	_atof:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z:PROC ; CTextFileLoader::GetTokenVector
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z$0
__ehfuncinfo$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z PROC ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>, COMDAT

; 4146 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4147 :     // implement copy_backward-like function as memmove
; 4148 :     auto _FirstPtr              = _To_address(_First);
; 4149 :     auto _LastPtr               = _To_address(_Last);
; 4150 :     auto _DestPtr               = _To_address(_Dest);
; 4151 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4152 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4153 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4154 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4155 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4156 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4157 :         return static_cast<_CtgIt2>(_Result);
; 4158 :     } else {
; 4159 :         return _Dest - (_LastPtr - _FirstPtr);
; 4160 :     }
; 4161 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z ENDP ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEPAV?$CTimeEvent@M@@QAV2@ABV2@@Z
_TEXT	SEGMENT
tv521 = -12						; size = 4
__Newsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
$T4 = 8							; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEPAV?$CTimeEvent@M@@QAV2@ABV2@@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Emplace_reallocate<CTimeEvent<float> const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 11		 mov	 edx, DWORD PTR [ecx]

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	53		 push	 ebx
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR __Whereptr$[ebp]
  00010	2b c2		 sub	 eax, edx
  00012	57		 push	 edi
  00013	8b fe		 mov	 edi, esi
  00015	c1 f8 03	 sar	 eax, 3
  00018	2b fa		 sub	 edi, edx
  0001a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0001d	c1 ff 03	 sar	 edi, 3

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00025	0f 84 18 01 00
	00		 je	 $LN79@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 58 01	 lea	 ebx, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 5d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 03	 sar	 ecx, 3

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  0004d	bb ff ff ff 1f	 mov	 ebx, 536870911		; 1fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b d0		 mov	 edx, eax
  0005d	eb 45		 jmp	 SHORT $LN77@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	3b c3		 cmp	 eax, ebx
  00064	0f 43 d8	 cmovae	 ebx, eax
  00067	81 fb ff ff ff
	1f		 cmp	 ebx, 536870911		; 1fffffffH
  0006d	0f 87 d5 00 00
	00		 ja	 $LN80@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00073	8d 04 dd 00 00
	00 00		 lea	 eax, DWORD PTR [ebx*8]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b d0		 mov	 edx, eax
  0008c	eb 16		 jmp	 SHORT $LN77@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 10		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	89 45 08	 mov	 DWORD PTR $T4[ebp], eax
  0009e	8b d0		 mov	 edx, eax
  000a0	eb 05		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a2	33 d2		 xor	 edx, edx
$LN77@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a4	89 55 08	 mov	 DWORD PTR $T4[ebp], edx
$LN23@Emplace_re:
  000a7	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000aa	8d 3c fa	 lea	 edi, DWORD PTR [edx+edi*8]
  000ad	89 7d f4	 mov	 DWORD PTR tv521[ebp], edi
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000b5	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000bb	89 0f		 mov	 DWORD PTR [edi], ecx
  000bd	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  000c0	8b 00		 mov	 eax, DWORD PTR [eax]
  000c2	3b f7		 cmp	 esi, edi
  000c4	75 21		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000c6	8b f2		 mov	 esi, edx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000c8	3b c7		 cmp	 eax, edi
  000ca	74 5c		 je	 SHORT $LN54@Emplace_re
  000cc	0f 1f 40 00	 npad	 4
$LL33@Emplace_re:

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1664 :         ++_Last;

  000d2	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  000d5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d8	83 c0 08	 add	 eax, 8

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000db	89 4e f8	 mov	 DWORD PTR [esi-8], ecx
  000de	89 56 fc	 mov	 DWORD PTR [esi-4], edx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000e1	3b c7		 cmp	 eax, edi
  000e3	75 eb		 jne	 SHORT $LL33@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000e5	eb 41		 jmp	 SHORT $LN54@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000e7	8b fa		 mov	 edi, edx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000e9	3b c6		 cmp	 eax, esi
  000eb	74 18		 je	 SHORT $LN43@Emplace_re
  000ed	0f 1f 00	 npad	 3
$LL44@Emplace_re:

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1664 :         ++_Last;

  000f2	8d 7f 08	 lea	 edi, DWORD PTR [edi+8]
  000f5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000f8	83 c0 08	 add	 eax, 8

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000fb	89 4f f8	 mov	 DWORD PTR [edi-8], ecx
  000fe	89 57 fc	 mov	 DWORD PTR [edi-4], edx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00101	3b c6		 cmp	 eax, esi
  00103	75 eb		 jne	 SHORT $LL44@Emplace_re
$LN43@Emplace_re:

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  00105	8b 7d fc	 mov	 edi, DWORD PTR _this$1$[ebp]
  00108	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]

; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0010b	3b f7		 cmp	 esi, edi
  0010d	74 19		 je	 SHORT $LN54@Emplace_re
  0010f	8b 55 f4	 mov	 edx, DWORD PTR tv521[ebp]
  00112	2b d6		 sub	 edx, esi
$LL55@Emplace_re:

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  00114	8b 06		 mov	 eax, DWORD PTR [esi]
  00116	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00119	89 44 32 08	 mov	 DWORD PTR [edx+esi+8], eax
  0011d	89 4c 32 0c	 mov	 DWORD PTR [edx+esi+12], ecx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00121	83 c6 08	 add	 esi, 8
  00124	3b f7		 cmp	 esi, edi
  00126	75 ec		 jne	 SHORT $LL55@Emplace_re
$LN54@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00128	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0012b	53		 push	 ebx
  0012c	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  0012f	ff 75 08	 push	 DWORD PTR $T4[ebp]
  00132	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  00137	8b 45 f4	 mov	 eax, DWORD PTR tv521[ebp]
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi
  0013c	5b		 pop	 ebx

; 921  :     }

  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 08 00	 ret	 8
$LN79@Emplace_re:

; 888  :             _Xlength();

  00143	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
$LN80@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00148	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN76@Emplace_re:
  0014d	cc		 int	 3
??$_Emplace_reallocate@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEPAV?$CTimeEvent@M@@QAV2@ABV2@@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Emplace_reallocate<CTimeEvent<float> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi
  00010	57		 push	 edi
  00011	81 fb ff ff ff
	1f		 cmp	 ebx, 536870911		; 1fffffffH
  00017	0f 87 b2 00 00
	00		 ja	 $LN62@Resize_rea

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0001d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00020	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00025	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00027	c1 f9 03	 sar	 ecx, 3

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0002a	8b d1		 mov	 edx, ecx
  0002c	d1 ea		 shr	 edx, 1
  0002e	2b c2		 sub	 eax, edx
  00030	3b c8		 cmp	 ecx, eax
  00032	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  00034	b8 f8 ff ff ff	 mov	 eax, -8			; fffffff8H
  00039	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00044	83 c4 04	 add	 esp, 4
  00047	eb 3d		 jmp	 SHORT $LN60@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00049	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  0004c	3b fb		 cmp	 edi, ebx
  0004e	73 1b		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00050	8b fb		 mov	 edi, ebx
$LN18@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00052	8d 04 fd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*8]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00059	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0005e	72 15		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00066	83 c4 04	 add	 esp, 4
  00069	eb 1b		 jmp	 SHORT $LN60@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  0006b	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00071	77 61		 ja	 SHORT $LN63@Resize_rea
  00073	eb dd		 jmp	 SHORT $LN18@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  00075	85 c0		 test	 eax, eax
  00077	74 0b		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007f	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00082	eb 02		 jmp	 SHORT $LN60@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00084	33 c0		 xor	 eax, eax
$LN60@Resize_rea:

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00086	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  00089	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0008c	8b f0		 mov	 esi, eax

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  0008e	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax

; 1794 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1795 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1796 : #if _HAS_CXX20
; 1797 :         if (!_STD is_constant_evaluated())
; 1798 : #endif // _HAS_CXX20
; 1799 :         {
; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1801 :             return _Dest + (_ULast - _UFirst);
; 1802 :         }
; 1803 :     }
; 1804 : 
; 1805 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};
; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00091	8b 12		 mov	 edx, DWORD PTR [edx]
  00093	3b d1		 cmp	 edx, ecx
  00095	74 24		 je	 SHORT $LN41@Resize_rea
  00097	8b d9		 mov	 ebx, ecx
  00099	0f 1f 80 00 00
	00 00		 npad	 7
$LL42@Resize_rea:

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000a0	8b 02		 mov	 eax, DWORD PTR [edx]

; 1664 :         ++_Last;

  000a2	8d 76 08	 lea	 esi, DWORD PTR [esi+8]
  000a5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000a8	83 c2 08	 add	 edx, 8

; 1663 :         allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

  000ab	89 46 f8	 mov	 DWORD PTR [esi-8], eax
  000ae	89 4e fc	 mov	 DWORD PTR [esi-4], ecx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000b1	3b d3		 cmp	 edx, ebx
  000b3	75 eb		 jne	 SHORT $LL42@Resize_rea
  000b5	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  000b8	8b 45 fc	 mov	 eax, DWORD PTR $T2[ebp]
$LN41@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1610 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000be	57		 push	 edi
  000bf	53		 push	 ebx
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	5b		 pop	 ebx

; 1611 :     }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
$LN62@Resize_rea:

; 1576 :             _Xlength();

  000cf	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
$LN63@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000d4	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN59@Resize_rea:
  000d9	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
;	COMDAT ?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z
_TEXT	SEGMENT
_TimeEvent$ = -8					; size = 8
_pTable$ = 8						; size = 4
_fTime$ = 12						; size = 4
_fValue$ = 16						; size = 4
?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z PROC ; InsertItemTimeEventFloat, COMDAT

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   : 	for (; itor != pTable->end(); ++itor)

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fTime$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  0000c	8b 5d 08	 mov	 ebx, DWORD PTR _pTable$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 26   : {

  0000f	56		 push	 esi
  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00011	8b 33		 mov	 esi, DWORD PTR [ebx]
  00013	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00016	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 28   : 	for (; itor != pTable->end(); ++itor)

  00018	74 16		 je	 SHORT $LN59@InsertItem
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL47@InsertItem:

; 29   : 	{
; 30   : 		TTimeEventTypeFloat & rTimeEvent = *itor;
; 31   : 		if (rTimeEvent.m_fTime > fTime)

  00020	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00024	0f 2f c1	 comiss	 xmm0, xmm1
  00027	77 07		 ja	 SHORT $LN59@InsertItem
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 74   :         ++_Ptr;

  00029	83 c6 08	 add	 esi, 8

; 156  :         return _Ptr == _Right._Ptr;

  0002c	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 28   : 	for (; itor != pTable->end(); ++itor)

  0002e	75 f0		 jne	 SHORT $LL47@InsertItem
$LN59@InsertItem:

; 32   : 		{
; 33   : 			break;
; 34   : 		}
; 35   : 	}
; 36   : 
; 37   : 	TTimeEventTypeFloat TimeEvent;
; 38   : 	TimeEvent.m_fTime = fTime;
; 39   : 	TimeEvent.m_Value = fValue;

  00030	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fValue$[ebp]
  00035	f3 0f 11 4d f8	 movss	 DWORD PTR _TimeEvent$[ebp], xmm1
  0003a	f3 0f 11 45 fc	 movss	 DWORD PTR _TimeEvent$[ebp+4], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1043 :         if (_Oldlast != _My_data._Myend) {

  0003f	3b 7b 08	 cmp	 edi, DWORD PTR [ebx+8]
  00042	74 49		 je	 SHORT $LN10@InsertItem

; 1044 :             if (_Whereptr == _Oldlast) { // at back, provide strong guarantee

  00044	3b f7		 cmp	 esi, edi
  00046	75 16		 jne	 SHORT $LN11@InsertItem

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00048	8b 45 f8	 mov	 eax, DWORD PTR _TimeEvent$[ebp]
  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _TimeEvent$[ebp+4]
  0004e	89 07		 mov	 DWORD PTR [edi], eax
  00050	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00053	83 43 04 08	 add	 DWORD PTR [ebx+4], 8
  00057	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 42   : }

  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c3		 ret	 0
$LN11@InsertItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1052 :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  0005e	8b 47 f8	 mov	 eax, DWORD PTR [edi-8]
  00061	8d 57 f8	 lea	 edx, DWORD PTR [edi-8]
  00064	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4249 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  00067	57		 push	 edi
  00068	52		 push	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1052 :                 _Alty_traits::construct(_Al, _Unfancy(_Oldlast), _STD move(_Oldlast[-1]));

  00069	89 07		 mov	 DWORD PTR [edi], eax
  0006b	89 4f 04	 mov	 DWORD PTR [edi+4], ecx

; 1053 :                 _ASAN_VECTOR_RELEASE_GUARD;
; 1054 :                 ++_My_data._Mylast;

  0006e	83 43 04 08	 add	 DWORD PTR [ebx+4], 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4249 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAV?$CTimeEvent@M@@PAV1@@std@@YAPAV?$CTimeEvent@M@@PAV1@00@Z ; std::_Copy_backward_memmove<CTimeEvent<float> *,CTimeEvent<float> *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1056 :                 *_Whereptr = _STD move(_Obj._Get_value());

  00078	8b 45 f8	 mov	 eax, DWORD PTR _TimeEvent$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4249 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  0007b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1056 :                 *_Whereptr = _STD move(_Obj._Get_value());

  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _TimeEvent$[ebp+4]
  00081	89 06		 mov	 DWORD PTR [esi], eax
  00083	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00086	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 42   : }

  00087	5e		 pop	 esi
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c3		 ret	 0
$LN10@InsertItem:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1062 :         return _Make_iterator(_Emplace_reallocate(_Whereptr, _STD forward<_Valty>(_Val)...));

  0008d	8d 45 f8	 lea	 eax, DWORD PTR _TimeEvent$[ebp]
  00090	8b cb		 mov	 ecx, ebx
  00092	50		 push	 eax
  00093	56		 push	 esi
  00094	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABV?$CTimeEvent@M@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEPAV?$CTimeEvent@M@@QAV2@ABV2@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Emplace_reallocate<CTimeEvent<float> const &>
  00099	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 42   : }

  0009a	5e		 pop	 esi
  0009b	5b		 pop	 ebx
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?InsertItemTimeEventFloat@@YAXPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@MM@Z ENDP ; InsertItemTimeEventFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange, COMDAT

; 2205 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z PROC ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXQAV?$CTimeEvent@M@@II@Z ENDP ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp
;	COMDAT ?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
_TEXT	SEGMENT
_c_szKey$GSCopy$1$ = -64				; size = 4
$T3 = -64						; size = 4
_pTokenVector$ = -60					; size = 4
$T4 = -56						; size = 4
tv985 = -56						; size = 4
$T5 = -52						; size = 4
_i$1$ = -52						; size = 4
__Oldsize$1$ = -48					; size = 4
_rTextFileLoader$GSCopy$1$ = -48			; size = 4
tv993 = -48						; size = 4
tv989 = -48						; size = 4
tv148 = -48						; size = 4
tv133 = -48						; size = 4
tv982 = -41						; size = 1
$T6 = -41						; size = 1
$T7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_rTextFileLoader$ = 8					; size = 4
_c_szKey$ = 12						; size = 4
_pTimeEventTableFloat$ = 16				; size = 4
?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z PROC ; GetTokenTimeEventFloat, COMDAT

; 5    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b 4d 0c	 mov	 ecx, DWORD PTR _c_szKey$[ebp]
  0002d	0f 57 c0	 xorps	 xmm0, xmm0
  00030	8b 45 08	 mov	 eax, DWORD PTR _rTextFileLoader$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00033	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 5    : {

  00035	8b 7d 10	 mov	 edi, DWORD PTR _pTimeEventTableFloat$[ebp]
  00038	89 45 d0	 mov	 DWORD PTR _rTextFileLoader$GSCopy$1$[ebp], eax
  0003b	89 4d c0	 mov	 DWORD PTR _c_szKey$GSCopy$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003e	0f 11 45 d8	 movups	 XMMWORD PTR $T7[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00042	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 415  :             return __builtin_strlen(_First);

  00049	8d 56 01	 lea	 edx, DWORD PTR [esi+1]

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0004c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 0
$LL137@GetTokenTi:

; 415  :             return __builtin_strlen(_First);

  00053	8a 06		 mov	 al, BYTE PTR [esi]
  00055	46		 inc	 esi
  00056	84 c0		 test	 al, al
  00058	75 f9		 jne	 SHORT $LL137@GetTokenTi
  0005a	2b f2		 sub	 esi, edx

; 2740 :         if (_Count > max_size()) {

  0005c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00062	0f 87 b7 02 00
	00		 ja	 $LN143@GetTokenTi

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00068	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
  0006f	83 fe 10	 cmp	 esi, 16			; 00000010H
  00072	73 18		 jae	 SHORT $LN51@GetTokenTi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00074	56		 push	 esi
  00075	51		 push	 ecx
  00076	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]

; 2749 :             _My_data._Mysize = _Count;

  00079	89 75 e8	 mov	 DWORD PTR $T7[ebp+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0007c	50		 push	 eax
  0007d	e8 00 00 00 00	 call	 _memcpy

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00082	c6 44 35 d8 00	 mov	 BYTE PTR $T7[ebp+esi], 0

; 2757 :             } else { // _Strat == _Construct_strategy::_From_string
; 2758 : #ifdef _INSERT_STRING_ANNOTATION
; 2759 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2760 : #else // ^^^ _INSERT_STRING_ANNOTATION ^^^ // vvv !_INSERT_STRING_ANNOTATION vvv
; 2761 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2762 : #endif // !_INSERT_STRING_ANNOTATION
; 2763 :             }
; 2764 : 
; 2765 :             _ASAN_STRING_CREATE(*this);
; 2766 :             _Proxy._Release();
; 2767 :             return;

  00087	e9 86 00 00 00	 jmp	 $LN140@GetTokenTi
$LN51@GetTokenTi:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0008c	8b c6		 mov	 eax, esi
  0008e	83 c8 0f	 or	 eax, 15			; 0000000fH
  00091	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00096	76 1c		 jbe	 SHORT $LN58@GetTokenTi

; 4885 :             return _Max;

  00098	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  0009d	c7 45 c8 ff ff
	ff 7f		 mov	 DWORD PTR $T4[ebp], 2147483647 ; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a4	51		 push	 ecx
  000a5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000aa	8b c8		 mov	 ecx, eax
  000ac	83 c4 04	 add	 esp, 4
  000af	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp]
  000b2	eb 41		 jmp	 SHORT $LN141@GetTokenTi
$LN58@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b4	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  000b9	3b c1		 cmp	 eax, ecx
  000bb	0f 42 c1	 cmovb	 eax, ecx
  000be	89 45 c8	 mov	 DWORD PTR $T4[ebp], eax

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000c1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ca	72 10		 jb	 SHORT $LN66@GetTokenTi

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cc	51		 push	 ecx
  000cd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d2	8b c8		 mov	 ecx, eax
  000d4	83 c4 04	 add	 esp, 4
  000d7	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp]
  000da	eb 19		 jmp	 SHORT $LN141@GetTokenTi
$LN66@GetTokenTi:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000dc	85 c9		 test	 ecx, ecx
  000de	74 13		 je	 SHORT $LN67@GetTokenTi

; 77   :         return ::operator new(_Bytes);

  000e0	51		 push	 ecx
  000e1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000e6	8b c8		 mov	 ecx, eax
  000e8	89 45 cc	 mov	 DWORD PTR $T5[ebp], eax
  000eb	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp]

; 77   :         return ::operator new(_Bytes);

  000ee	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000f1	eb 05		 jmp	 SHORT $LN65@GetTokenTi
$LN67@GetTokenTi:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000f3	33 c9		 xor	 ecx, ecx
$LN141@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000f5	89 4d cc	 mov	 DWORD PTR $T5[ebp], ecx
$LN65@GetTokenTi:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f8	56		 push	 esi
  000f9	ff 75 c0	 push	 DWORD PTR _c_szKey$GSCopy$1$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000fc	89 4d d8	 mov	 DWORD PTR $T7[ebp], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000ff	51		 push	 ecx

; 2781 :         _My_data._Mysize = _Count;

  00100	89 75 e8	 mov	 DWORD PTR $T7[ebp+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  00103	89 45 ec	 mov	 DWORD PTR $T7[ebp+20], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00106	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0010b	8b 45 cc	 mov	 eax, DWORD PTR $T5[ebp]
  0010e	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0
$LN140@GetTokenTi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 7    : 	if (!rTextFileLoader.GetTokenVector(c_szKey, &pTokenVector))

  00112	83 c4 0c	 add	 esp, 12			; 0000000cH
  00115	8b 4d d0	 mov	 ecx, DWORD PTR _rTextFileLoader$GSCopy$1$[ebp]
  00118	8d 45 c4	 lea	 eax, DWORD PTR _pTokenVector$[ebp]
  0011b	50		 push	 eax
  0011c	8d 45 d8	 lea	 eax, DWORD PTR $T7[ebp]
  0011f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00126	50		 push	 eax
  00127	e8 00 00 00 00	 call	 ?GetTokenVector@CTextFileLoader@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAPAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@3@@Z ; CTextFileLoader::GetTokenVector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0012c	8b 4d ec	 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 7    : 	if (!rTextFileLoader.GetTokenVector(c_szKey, &pTokenVector))

  0012f	85 c0		 test	 eax, eax
  00131	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00138	0f 94 c0	 sete	 al
  0013b	88 45 d7	 mov	 BYTE PTR tv982[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0013e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00141	72 2f		 jb	 SHORT $LN86@GetTokenTi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00143	8b 55 d8	 mov	 edx, DWORD PTR $T7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00146	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00147	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00149	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0014f	72 14		 jb	 SHORT $LN96@GetTokenTi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00151	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00154	83 c1 23	 add	 ecx, 35			; 00000023H
  00157	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00159	83 c0 fc	 add	 eax, -4			; fffffffcH
  0015c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0015f	0f 87 bf 01 00
	00		 ja	 $LN144@GetTokenTi
$LN96@GetTokenTi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00165	51		 push	 ecx
  00166	52		 push	 edx
  00167	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016c	8a 45 d7	 mov	 al, BYTE PTR tv982[ebp]
  0016f	83 c4 08	 add	 esp, 8
$LN86@GetTokenTi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 7    : 	if (!rTextFileLoader.GetTokenVector(c_szKey, &pTokenVector))

  00172	84 c0		 test	 al, al
  00174	74 07		 je	 SHORT $LN5@GetTokenTi

; 8    : 	{
; 9    : 		return FALSE;

  00176	33 c0		 xor	 eax, eax
  00178	e9 82 01 00 00	 jmp	 $LN1@GetTokenTi
$LN5@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0017d	8b 07		 mov	 eax, DWORD PTR [edi]
  0017f	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00182	3b c6		 cmp	 eax, esi
  00184	74 05		 je	 SHORT $LN101@GetTokenTi

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00186	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00189	8b f0		 mov	 esi, eax
$LN101@GetTokenTi:

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0018b	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	2b 08		 sub	 ecx, DWORD PTR [eax]
  00193	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00198	f7 e9		 imul	 ecx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  0019a	8b c6		 mov	 eax, esi

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0019c	c1 fa 02	 sar	 edx, 2
  0019f	8b ca		 mov	 ecx, edx
  001a1	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  001a4	03 ca		 add	 ecx, edx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  001a6	8b 17		 mov	 edx, DWORD PTR [edi]
  001a8	2b c2		 sub	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 13   : 	pTimeEventTableFloat->resize(pTokenVector->size() / 2);

  001aa	d1 e9		 shr	 ecx, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  001ac	c1 f8 03	 sar	 eax, 3
  001af	89 45 d0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  001b2	3b c8		 cmp	 ecx, eax
  001b4	73 08		 jae	 SHORT $LN109@GetTokenTi

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  001b6	8d 04 ca	 lea	 eax, DWORD PTR [edx+ecx*8]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  001b9	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1627 :             return;

  001bc	eb 27		 jmp	 SHORT $LN110@GetTokenTi
$LN109@GetTokenTi:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  001be	76 25		 jbe	 SHORT $LN110@GetTokenTi

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  001c0	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  001c3	2b c2		 sub	 eax, edx
  001c5	c1 f8 03	 sar	 eax, 3

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  001c8	3b c8		 cmp	 ecx, eax
  001ca	76 0e		 jbe	 SHORT $LN111@GetTokenTi

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  001cc	8d 45 d7	 lea	 eax, DWORD PTR $T6[ebp]
  001cf	50		 push	 eax
  001d0	51		 push	 ecx
  001d1	8b cf		 mov	 ecx, edi
  001d3	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  001d8	eb 0b		 jmp	 SHORT $LN110@GetTokenTi
$LN111@GetTokenTi:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  001da	2b 4d d0	 sub	 ecx, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  001dd	74 03		 je	 SHORT $LN116@GetTokenTi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  001df	8d 34 ce	 lea	 esi, DWORD PTR [esi+ecx*8]
$LN116@GetTokenTi:
  001e2	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN110@GetTokenTi:

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001e5	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 15   : 	DWORD dwIndex = 0;

  001e8	33 f6		 xor	 esi, esi

; 16   : 	for (DWORD i = 0; i < pTokenVector->size(); i += 2, ++dwIndex)

  001ea	89 75 cc	 mov	 DWORD PTR _i$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001ed	8b 10		 mov	 edx, DWORD PTR [eax]
  001ef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001f2	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001f7	2b ca		 sub	 ecx, edx
  001f9	89 55 c0	 mov	 DWORD PTR $T3[ebp], edx
  001fc	f7 e9		 imul	 ecx
  001fe	c1 fa 02	 sar	 edx, 2
  00201	8b c2		 mov	 eax, edx
  00203	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00206	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 16   : 	for (DWORD i = 0; i < pTokenVector->size(); i += 2, ++dwIndex)

  00208	0f 84 ec 00 00
	00		 je	 $LN3@GetTokenTi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1966 :         auto& _My_data = _Mypair._Myval2;

  0020e	89 75 c8	 mov	 DWORD PTR tv985[ebp], esi
$LL4@GetTokenTi:

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00211	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  00214	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00217	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0021c	2b 4d c0	 sub	 ecx, DWORD PTR $T3[ebp]
  0021f	f7 e9		 imul	 ecx
  00221	c1 fa 02	 sar	 edx, 2
  00224	8b c2		 mov	 eax, edx
  00226	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00229	03 c2		 add	 eax, edx
  0022b	3b 45 cc	 cmp	 eax, DWORD PTR _i$1$[ebp]
  0022e	0f 86 e6 00 00
	00		 jbe	 $LN128@GetTokenTi

; 1969 :         }
; 1970 : 
; 1971 :         return _My_data._Myfirst[_Pos];

  00234	8b 45 c0	 mov	 eax, DWORD PTR $T3[ebp]
  00237	03 45 c8	 add	 eax, DWORD PTR tv985[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0023a	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  0023e	72 02		 jb	 SHORT $LN17@GetTokenTi

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00240	8b 00		 mov	 eax, DWORD PTR [eax]
$LN17@GetTokenTi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 18   : 		pTimeEventTableFloat->at(dwIndex).m_fTime = atof(pTokenVector->at(i).c_str());

  00242	50		 push	 eax
  00243	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00248	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 18   : 		pTimeEventTableFloat->at(dwIndex).m_fTime = atof(pTokenVector->at(i).c_str());

  0024b	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0024e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00250	2b c1		 sub	 eax, ecx
  00252	c1 f8 03	 sar	 eax, 3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 18   : 		pTimeEventTableFloat->at(dwIndex).m_fTime = atof(pTokenVector->at(i).c_str());

  00255	d9 5d d0	 fstp	 DWORD PTR tv133[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00258	3b c6		 cmp	 eax, esi
  0025a	0f 86 c9 00 00
	00		 jbe	 $LN129@GetTokenTi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 18   : 		pTimeEventTableFloat->at(dwIndex).m_fTime = atof(pTokenVector->at(i).c_str());

  00260	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv133[ebp]
  00265	f3 0f 11 04 f1	 movss	 DWORD PTR [ecx+esi*8], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0026a	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  0026d	8b 10		 mov	 edx, DWORD PTR [eax]
  0026f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00272	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00277	2b ca		 sub	 ecx, edx
  00279	89 55 d0	 mov	 DWORD PTR tv989[ebp], edx
  0027c	f7 e9		 imul	 ecx
  0027e	8b 45 cc	 mov	 eax, DWORD PTR _i$1$[ebp]
  00281	c1 fa 02	 sar	 edx, 2
  00284	40		 inc	 eax
  00285	8b ca		 mov	 ecx, edx
  00287	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0028a	03 ca		 add	 ecx, edx
  0028c	3b c8		 cmp	 ecx, eax
  0028e	0f 86 86 00 00
	00		 jbe	 $LN128@GetTokenTi

; 1969 :         }
; 1970 : 
; 1971 :         return _My_data._Myfirst[_Pos];

  00294	8b 45 c8	 mov	 eax, DWORD PTR tv985[ebp]
  00297	83 c0 18	 add	 eax, 24			; 00000018H
  0029a	03 45 d0	 add	 eax, DWORD PTR tv989[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0029d	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  002a1	72 02		 jb	 SHORT $LN30@GetTokenTi

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  002a3	8b 00		 mov	 eax, DWORD PTR [eax]
$LN30@GetTokenTi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 19   : 		pTimeEventTableFloat->at(dwIndex).m_Value = atof(pTokenVector->at(i + 1).c_str());

  002a5	50		 push	 eax
  002a6	e8 00 00 00 00	 call	 _atof
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002ab	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 19   : 		pTimeEventTableFloat->at(dwIndex).m_Value = atof(pTokenVector->at(i + 1).c_str());

  002ae	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002b1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  002b3	2b c1		 sub	 eax, ecx
  002b5	c1 f8 03	 sar	 eax, 3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 19   : 		pTimeEventTableFloat->at(dwIndex).m_Value = atof(pTokenVector->at(i + 1).c_str());

  002b8	d9 5d d0	 fstp	 DWORD PTR tv148[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  002bb	3b c6		 cmp	 eax, esi
  002bd	76 6a		 jbe	 SHORT $LN129@GetTokenTi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 16   : 	for (DWORD i = 0; i < pTokenVector->size(); i += 2, ++dwIndex)

  002bf	f3 0f 10 45 d0	 movss	 xmm0, DWORD PTR tv148[ebp]
  002c4	83 45 cc 02	 add	 DWORD PTR _i$1$[ebp], 2
  002c8	83 45 c8 30	 add	 DWORD PTR tv985[ebp], 48 ; 00000030H

; 19   : 		pTimeEventTableFloat->at(dwIndex).m_Value = atof(pTokenVector->at(i + 1).c_str());

  002cc	f3 0f 11 44 f1
	04		 movss	 DWORD PTR [ecx+esi*8+4], xmm0
  002d2	46		 inc	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002d3	8b 45 c4	 mov	 eax, DWORD PTR _pTokenVector$[ebp]
  002d6	8b 10		 mov	 edx, DWORD PTR [eax]
  002d8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002db	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002e0	2b ca		 sub	 ecx, edx
  002e2	89 55 c0	 mov	 DWORD PTR $T3[ebp], edx
  002e5	f7 e9		 imul	 ecx
  002e7	c1 fa 02	 sar	 edx, 2
  002ea	8b c2		 mov	 eax, edx
  002ec	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002ef	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EffectLib\Type.cpp

; 16   : 	for (DWORD i = 0; i < pTokenVector->size(); i += 2, ++dwIndex)

  002f1	39 45 cc	 cmp	 DWORD PTR _i$1$[ebp], eax
  002f4	0f 82 17 ff ff
	ff		 jb	 $LL4@GetTokenTi
$LN3@GetTokenTi:

; 20   : 	}
; 21   : 
; 22   : 	return TRUE;

  002fa	b8 01 00 00 00	 mov	 eax, 1
$LN1@GetTokenTi:

; 23   : }

  002ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00302	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00309	59		 pop	 ecx
  0030a	5f		 pop	 edi
  0030b	5e		 pop	 esi
  0030c	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030f	33 cd		 xor	 ecx, ebp
  00311	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00316	8b e5		 mov	 esp, ebp
  00318	5d		 pop	 ebp
  00319	c3		 ret	 0
$LN128@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1968 :             _Xrange();

  0031a	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
$LN143@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2741 :             _Xlen_string(); // result too long

  0031f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN144@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00324	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN129@GetTokenTi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1968 :             _Xrange();

  00329	e8 00 00 00 00	 call	 ?_Xrange@?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@CAXXZ ; std::vector<CTimeEvent<float>,std::allocator<CTimeEvent<float> > >::_Xrange
$LN139@GetTokenTi:
  0032e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z$0:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T7[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetTokenTimeEventFloat@@YAHAAVCTextFileLoader@@PBDPAV?$vector@V?$CTimeEvent@M@@V?$allocator@V?$CTimeEvent@M@@@std@@@std@@@Z ENDP ; GetTokenTimeEventFloat
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange, COMDAT

; 2205 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
