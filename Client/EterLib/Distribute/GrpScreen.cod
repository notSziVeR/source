; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\GrpScreen.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_diffuseColor@CScreen@@1KA			; CScreen::ms_diffuseColor
PUBLIC	?ms_clearColor@CScreen@@1KA			; CScreen::ms_clearColor
PUBLIC	?ms_clearStencil@CScreen@@1KA			; CScreen::ms_clearStencil
PUBLIC	?ms_clearDepth@CScreen@@1MA			; CScreen::ms_clearDepth
_BSS	SEGMENT
?ms_clearColor@CScreen@@1KA DD 01H DUP (?)		; CScreen::ms_clearColor
?ms_clearStencil@CScreen@@1KA DD 01H DUP (?)		; CScreen::ms_clearStencil
_BSS	ENDS
_DATA	SEGMENT
?ms_diffuseColor@CScreen@@1KA DD 0ffffffffH		; CScreen::ms_diffuseColor
?ms_clearDepth@CScreen@@1MA DD 03f800000r	; 1	; CScreen::ms_clearDepth
_DATA	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??0D3DXPLANE@@QAE@XZ				; D3DXPLANE::D3DXPLANE
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	??0CScreen@@QAE@XZ				; CScreen::CScreen
PUBLIC	??1CScreen@@UAE@XZ				; CScreen::~CScreen
PUBLIC	?ClearDepthBuffer@CScreen@@QAEXXZ		; CScreen::ClearDepthBuffer
PUBLIC	?Clear@CScreen@@QAEXXZ				; CScreen::Clear
PUBLIC	?Begin@CScreen@@QAE_NXZ				; CScreen::Begin
PUBLIC	?End@CScreen@@QAEXXZ				; CScreen::End
PUBLIC	?Show@CScreen@@QAEXPAUHWND__@@@Z		; CScreen::Show
PUBLIC	?Show@CScreen@@QAEXPAUtagRECT@@@Z		; CScreen::Show
PUBLIC	?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z	; CScreen::Show
PUBLIC	?RenderLine2d@CScreen@@QAEXMMMMM@Z		; CScreen::RenderLine2d
PUBLIC	?RenderBox2d@CScreen@@QAEXMMMMM@Z		; CScreen::RenderBox2d
PUBLIC	?RenderBar2d@CScreen@@QAEXMMMMM@Z		; CScreen::RenderBar2d
PUBLIC	?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z	; CScreen::RenderGradationBar2d
PUBLIC	?RenderCircle2d@CScreen@@QAEXMMMMH@Z		; CScreen::RenderCircle2d
PUBLIC	?RenderCircle3d@CScreen@@QAEXMMMMH@Z		; CScreen::RenderCircle3d
PUBLIC	?RenderLine3d@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderLine3d
PUBLIC	?RenderBox3d@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderBox3d
PUBLIC	?RenderBar3d@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderBar3d
PUBLIC	?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z	; CScreen::RenderBar3d
PUBLIC	?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z	; CScreen::RenderGradationBar3d
PUBLIC	?RenderLineCube@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderLineCube
PUBLIC	?RenderCube@CScreen@@QAEXMMMMMM@Z		; CScreen::RenderCube
PUBLIC	?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z	; CScreen::RenderCube
PUBLIC	?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z	; CScreen::RenderTextureBox
PUBLIC	?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z ; CScreen::RenderBillboard
PUBLIC	?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z		; CScreen::DrawMinorGrid
PUBLIC	?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z		; CScreen::DrawGrid
PUBLIC	?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderD3DXMesh
PUBLIC	?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderSphere
PUBLIC	?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderCylinder
PUBLIC	?SetColorOperation@CScreen@@QAEXXZ		; CScreen::SetColorOperation
PUBLIC	?SetDiffuseOperation@CScreen@@QAEXXZ		; CScreen::SetDiffuseOperation
PUBLIC	?SetBlendOperation@CScreen@@QAEXXZ		; CScreen::SetBlendOperation
PUBLIC	?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ; CScreen::SetOneColorOperation
PUBLIC	?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ; CScreen::SetAddColorOperation
PUBLIC	?SetDiffuseColor@CScreen@@QAEXK@Z		; CScreen::SetDiffuseColor
PUBLIC	?SetDiffuseColor@CScreen@@QAEXMMMM@Z		; CScreen::SetDiffuseColor
PUBLIC	?SetClearColor@CScreen@@QAEXMMMM@Z		; CScreen::SetClearColor
PUBLIC	?SetClearDepth@CScreen@@QAEXM@Z			; CScreen::SetClearDepth
PUBLIC	?SetClearStencil@CScreen@@QAEXK@Z		; CScreen::SetClearStencil
PUBLIC	?SetCursorPosition@CScreen@@QAEXHHHH@Z		; CScreen::SetCursorPosition
PUBLIC	?GetCursorPosition@CScreen@@QAE_NPAM00@Z	; CScreen::GetCursorPosition
PUBLIC	?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z	; CScreen::GetCursorXYPosition
PUBLIC	?GetCursorZPosition@CScreen@@QAE_NPAM@Z		; CScreen::GetCursorZPosition
PUBLIC	?GetPickingPosition@CScreen@@QAEXMPAM00@Z	; CScreen::GetPickingPosition
PUBLIC	?ProjectPosition@CScreen@@QAEXMMMPAM0@Z		; CScreen::ProjectPosition
PUBLIC	?ProjectPosition@CScreen@@QAEXMMMPAM00@Z	; CScreen::ProjectPosition
PUBLIC	?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z	; CScreen::UnprojectPosition
PUBLIC	?IsLostDevice@CScreen@@QAEHXZ			; CScreen::IsLostDevice
PUBLIC	?RestoreDevice@CScreen@@QAEHXZ			; CScreen::RestoreDevice
PUBLIC	?BuildViewFrustum@CScreen@@QAEXXZ		; CScreen::BuildViewFrustum
PUBLIC	?Identity@CScreen@@SAXXZ			; CScreen::Identity
PUBLIC	??_GCScreen@@UAEPAXI@Z				; CScreen::`scalar deleting destructor'
PUBLIC	??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
PUBLIC	?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
PUBLIC	??1CD3DXMeshRenderingOption@@UAE@XZ		; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
PUBLIC	??_GCD3DXMeshRenderingOption@@UAEPAXI@Z		; CD3DXMeshRenderingOption::`scalar deleting destructor'
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_frustum@CScreen@@1VFrustum@@A		; CScreen::ms_frustum
PUBLIC	??_7CScreen@@6B@				; CScreen::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7CD3DXMeshRenderingOption@@6B@		; CD3DXMeshRenderingOption::`vftable'
PUBLIC	??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CScreen@@6B@				; CScreen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4CD3DXMeshRenderingOption@@6B@		; CD3DXMeshRenderingOption::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCD3DXMeshRenderingOption@@@8		; CD3DXMeshRenderingOption `RTTI Type Descriptor'
PUBLIC	??_R3CD3DXMeshRenderingOption@@8		; CD3DXMeshRenderingOption::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CD3DXMeshRenderingOption@@8		; CD3DXMeshRenderingOption::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8	; CD3DXMeshRenderingOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40c90fdb
PUBLIC	__real@437f0000
PUBLIC	__real@47480000
PUBLIC	__real@4caba950
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXVec3Project@24:PROC
EXTRN	_D3DXVec3Unproject@24:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	?Tracenf@@YAXPBDZZ:PROC				; Tracenf
EXTRN	?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ:PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
EXTRN	?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z:PROC ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
EXTRN	?GetColor@CGraphicBase@@QAEKMMMM@Z:PROC		; CGraphicBase::GetColor
EXTRN	?ResetFaceCount@CGraphicBase@@QAEXXZ:PROC	; CGraphicBase::ResetFaceCount
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	??0CGraphicCollisionObject@@QAE@XZ:PROC		; CGraphicCollisionObject::CGraphicCollisionObject
EXTRN	??1CGraphicCollisionObject@@UAE@XZ:PROC		; CGraphicCollisionObject::~CGraphicCollisionObject
EXTRN	?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z:PROC ; CGraphicCollisionObject::IntersectTriangle
EXTRN	?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z:PROC ; Frustum::BuildViewFrustum2
EXTRN	??_ECScreen@@UAEPAXI@Z:PROC			; CScreen::`vector deleting destructor'
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SetDefaultState@CStateManager@@QAEXXZ:PROC	; CStateManager::SetDefaultState
EXTRN	?BeginScene@CStateManager@@QAE_NXZ:PROC		; CStateManager::BeginScene
EXTRN	?EndScene@CStateManager@@QAEXXZ:PROC		; CStateManager::EndScene
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetFVF@CStateManager@@QAEXK@Z:PROC		; CStateManager::SetFVF
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z:PROC ; CStateManager::SetStreamSource
EXTRN	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z:PROC ; CStateManager::SetIndices
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	??_ECD3DXMeshRenderingOption@@UAEPAXI@Z:PROC	; CD3DXMeshRenderingOption::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_cos_precise:PROC
EXTRN	__libm_sse2_sin_precise:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matProj
EXTRN	?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matInverseView
EXTRN	?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matWorld
EXTRN	?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A:DWORD ; CGraphicBase::ms_lpSphereMesh
EXTRN	?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A:DWORD ; CGraphicBase::ms_lpCylinderMesh
EXTRN	?ms_iD3DAdapterInfo@CGraphicBase@@1IA:DWORD	; CGraphicBase::ms_iD3DAdapterInfo
EXTRN	?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A:BYTE ; CGraphicBase::ms_kD3DDetector
EXTRN	?ms_lpd3d@CGraphicBase@@1PAUIDirect3D9@@A:DWORD	; CGraphicBase::ms_lpd3d
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A:BYTE ; CGraphicBase::ms_Viewport
EXTRN	?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A:DWORD ; CGraphicBase::ms_lpd3dMatStack
EXTRN	?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A:BYTE ; CGraphicBase::ms_d3dPresentParameter
EXTRN	?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayOrig
EXTRN	?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A:BYTE ; CGraphicBase::ms_vtPickRayDir
EXTRN	?ms_fFieldOfView@CGraphicBase@@1MA:DWORD	; CGraphicBase::ms_fFieldOfView
EXTRN	?ms_fAspect@CGraphicBase@@1MA:DWORD		; CGraphicBase::ms_fAspect
EXTRN	?ms_fNearY@CGraphicBase@@1MA:DWORD		; CGraphicBase::ms_fNearY
EXTRN	?ms_fFarY@CGraphicBase@@1MA:DWORD		; CGraphicBase::ms_fFarY
EXTRN	?ms_Ray@CGraphicBase@@1VCRay@@A:BYTE		; CGraphicBase::ms_Ray
EXTRN	?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA:BYTE	; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
EXTRN	?g_isBrowserMode@@3_NA:BYTE			; g_isBrowserMode
EXTRN	?g_rcBrowser@@3UtagRECT@@A:BYTE			; g_rcBrowser
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?ms_frustum@CScreen@@1VFrustum@@A DB 074H DUP (?)	; CScreen::ms_frustum
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4caba950
CONST	SEGMENT
__real@4caba950 DD 04caba950r			; 9e+07
CONST	ENDS
;	COMDAT __real@47480000
CONST	SEGMENT
__real@47480000 DD 047480000r			; 51200
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8 DD FLAT:??_R0?AVCD3DXMeshRenderingOption@@@8 ; CD3DXMeshRenderingOption::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CD3DXMeshRenderingOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CD3DXMeshRenderingOption@@8
rdata$r	SEGMENT
??_R2CD3DXMeshRenderingOption@@8 DD FLAT:??_R1A@?0A@EA@CD3DXMeshRenderingOption@@8 ; CD3DXMeshRenderingOption::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CD3DXMeshRenderingOption@@8
rdata$r	SEGMENT
??_R3CD3DXMeshRenderingOption@@8 DD 00H			; CD3DXMeshRenderingOption::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CD3DXMeshRenderingOption@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCD3DXMeshRenderingOption@@@8
data$rs	SEGMENT
??_R0?AVCD3DXMeshRenderingOption@@@8 DD FLAT:??_7type_info@@6B@ ; CD3DXMeshRenderingOption `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCD3DXMeshRenderingOption@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CD3DXMeshRenderingOption@@6B@
rdata$r	SEGMENT
??_R4CD3DXMeshRenderingOption@@6B@ DD 00H		; CD3DXMeshRenderingOption::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCD3DXMeshRenderingOption@@@8
	DD	FLAT:??_R3CD3DXMeshRenderingOption@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CScreen@@6B@
rdata$r	SEGMENT
??_R4CScreen@@6B@ DD 00H				; CScreen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCScreen@@@8
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@
CONST	SEGMENT
??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@ DB 'BeginScene FAILED', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB
CONST	SEGMENT
?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB DW 00H ; `CScreen::GetCursorZPosition'::`2'::sc_awFillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
CONST	ENDS
;	COMDAT ?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB
CONST	SEGMENT
?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB DW 00H ; `CScreen::GetCursorXYPosition'::`2'::sc_awFillRectIndices
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
CONST	ENDS
;	COMDAT ??_7CD3DXMeshRenderingOption@@6B@
CONST	SEGMENT
??_7CD3DXMeshRenderingOption@@6B@ DD FLAT:??_R4CD3DXMeshRenderingOption@@6B@ ; CD3DXMeshRenderingOption::`vftable'
	DD	FLAT:??_ECD3DXMeshRenderingOption@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CScreen@@6B@
CONST	SEGMENT
??_7CScreen@@6B@ DD FLAT:??_R4CScreen@@6B@		; CScreen::`vftable'
	DD	FLAT:??_ECScreen@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CD3DXMeshRenderingOption@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z$0
__ehfuncinfo$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CD3DXMeshRenderingOption@@QAE@W4_D3DFILLMODE@@ABUD3DXMATRIX@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCircle3d@CScreen@@QAEXMMMMH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCircle3d@CScreen@@QAEXMMMMH@Z$0
__ehfuncinfo$?RenderCircle3d@CScreen@@QAEXMMMMH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCircle3d@CScreen@@QAEXMMMMH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RenderCircle2d@CScreen@@QAEXMMMMH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RenderCircle2d@CScreen@@QAEXMMMMH@Z$0
__ehfuncinfo$?RenderCircle2d@CScreen@@QAEXMMMMH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?RenderCircle2d@CScreen@@QAEXMMMMH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z PROC ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ENDP ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv427 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00012	0f 87 f6 00 00
	00		 ja	 $LN81@Resize_rea

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00018	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00020	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00022	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00024	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00029	d1 fa		 sar	 edx, 1
  0002b	8b ca		 mov	 ecx, edx
  0002d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00030	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00032	8b d1		 mov	 edx, ecx
  00034	d1 ea		 shr	 edx, 1
  00036	2b c2		 sub	 eax, edx
  00038	3b c8		 cmp	 ecx, eax
  0003a	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0003c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00042	89 45 fc	 mov	 DWORD PTR tv427[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00045	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b d8		 mov	 ebx, eax
  0004f	eb 46		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00051	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00054	3b c3		 cmp	 eax, ebx
  00056	73 1f		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00058	8b c3		 mov	 eax, ebx
$LN77@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0005a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005d	c1 e0 02	 shl	 eax, 2
  00060	89 45 fc	 mov	 DWORD PTR tv427[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00063	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00068	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00070	83 c4 04	 add	 esp, 4
  00073	8b d8		 mov	 ebx, eax
  00075	eb 20		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00077	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0007c	0f 87 91 00 00
	00		 ja	 $LN82@Resize_rea
  00082	eb d6		 jmp	 SHORT $LN77@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  00084	85 c0		 test	 eax, eax
  00086	74 0d		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00091	8b d8		 mov	 ebx, eax
  00093	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00095	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00097	53		 push	 ebx
  00098	ff 77 04	 push	 DWORD PTR [edi+4]
  0009b	ff 37		 push	 DWORD PTR [edi]
  0009d	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000a2	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000a7	85 f6		 test	 esi, esi
  000a9	74 3f		 je	 SHORT $LN59@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ab	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ae	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000b3	2b ce		 sub	 ecx, esi
  000b5	f7 e9		 imul	 ecx
  000b7	d1 fa		 sar	 edx, 1
  000b9	8b c2		 mov	 eax, edx
  000bb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000be	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c3	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000cc	72 12		 jb	 SHORT $LN69@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ce	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000d1	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d4	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d6	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000d9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000dc	77 2b		 ja	 SHORT $LN66@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000de	8b f2		 mov	 esi, edx
$LN69@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000e0	51		 push	 ecx
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e7	83 c4 08	 add	 esp, 8
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  000ea	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ed	89 1f		 mov	 DWORD PTR [edi], ebx
  000ef	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000f2	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000f5	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR tv427[ebp]
  000fb	03 c3		 add	 eax, ebx
  000fd	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx

; 1611 :     }

  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
$LN66@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00109	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  0010e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN82@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00113	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN79@Resize_rea:
  00118	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCD3DXMeshRenderingOption@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCD3DXMeshRenderingOption@@UAEPAXI@Z PROC		; CD3DXMeshRenderingOption::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CD3DXMeshRenderingOption@@UAE@XZ ; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 08		 push	 8
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCD3DXMeshRenderingOption@@UAEPAXI@Z ENDP		; CD3DXMeshRenderingOption::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ??1CD3DXMeshRenderingOption@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CD3DXMeshRenderingOption@@UAE@XZ PROC		; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption, COMDAT
; _this$ = ecx

; 336  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CD3DXMeshRenderingOption@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 337  : 		ms_lpd3dDevice->SetFVF(m_dwVS);

  00025	ff 76 04	 push	 DWORD PTR [esi+4]
  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CD3DXMeshRenderingOption@@6B@
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00033	50		 push	 eax
  00034	8b 10		 mov	 edx, DWORD PTR [eax]
  00036	ff 92 64 01 00
	00		 call	 DWORD PTR [edx+356]

; 338  : 
; 339  : 		STATEMANAGER.RestoreTransform(D3DTS_WORLD);

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00042	68 00 01 00 00	 push	 256			; 00000100H
  00047	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 340  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00052	6a 02		 push	 2
  00054	6a 00		 push	 0
  00056	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 341  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  0005b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00061	6a 01		 push	 1
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 342  : 		STATEMANAGER.RestoreTextureStageState(0, D3DTSS_ALPHAOP);

  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00070	6a 04		 push	 4
  00072	6a 00		 push	 0
  00074	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 343  : 		STATEMANAGER.SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007f	6a 03		 push	 3
  00081	6a 08		 push	 8
  00083	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 344  : 	}

  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5e		 pop	 esi
  0009b	8b e5		 mov	 esp, ebp
  0009d	5d		 pop	 ebp
  0009e	c3		 ret	 0
  0009f	cc		 int	 3
  000a0	cc		 int	 3
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CD3DXMeshRenderingOption@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CD3DXMeshRenderingOption@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CD3DXMeshRenderingOption@@UAE@XZ ENDP		; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldsize$1$ = -4					; size = 4
__Newsize$ = 8						; size = 4
$T2 = 11						; size = 1
?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize, COMDAT
; _this$ = ecx

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00006	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]
  00009	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00011	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00014	8b d3		 mov	 edx, ebx
  00016	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00018	2b d1		 sub	 edx, ecx
  0001a	f7 ea		 imul	 edx
  0001c	d1 fa		 sar	 edx, 1
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 45 fc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00028	3b f0		 cmp	 esi, eax
  0002a	73 12		 jae	 SHORT $LN4@resize

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  0002c	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  0002f	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);
; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00032	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00035	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
$LN4@resize:

; 1630 :         if (_Newsize > _Oldsize) { // append

  0003e	76 3c		 jbe	 SHORT $LN5@resize

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00040	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00043	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00048	2b 0f		 sub	 ecx, DWORD PTR [edi]
  0004a	f7 e9		 imul	 ecx
  0004c	d1 fa		 sar	 edx, 1
  0004e	8b c2		 mov	 eax, edx
  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00053	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00055	3b f0		 cmp	 esi, eax
  00057	76 15		 jbe	 SHORT $LN6@resize

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00059	8d 45 0b	 lea	 eax, DWORD PTR $T2[ebp]
  0005c	8b cf		 mov	 ecx, edi
  0005e	50		 push	 eax
  0005f	56		 push	 esi
  00060	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
  00065	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c2 04 00	 ret	 4
$LN6@resize:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0006e	2b 75 fc	 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  00071	74 06		 je	 SHORT $LN11@resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00073	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00076	8d 1c 83	 lea	 ebx, DWORD PTR [ebx+eax*4]
$LN11@resize:
  00079	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
$LN5@resize:
  0007c	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c2 04 00	 ret	 4
?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005d	5f		 pop	 edi

; 835  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00065	cc		 int	 3
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCScreen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCScreen@@UAEPAXI@Z PROC				; CScreen::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 04		 push	 4
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCScreen@@UAEPAXI@Z ENDP				; CScreen::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?Identity@CScreen@@SAXXZ
_TEXT	SEGMENT
?Identity@CScreen@@SAXXZ PROC				; CScreen::Identity, COMDAT

; 865  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  0000b	68 00 01 00 00	 push	 256			; 00000100H
  00010	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 866  : }

  00015	c3		 ret	 0
?Identity@CScreen@@SAXXZ ENDP				; CScreen::Identity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?BuildViewFrustum@CScreen@@QAEXXZ
_TEXT	SEGMENT
tv131 = -84						; size = 4
tv135 = -80						; size = 4
tv136 = -76						; size = 4
tv137 = -72						; size = 4
$T1 = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?BuildViewFrustum@CScreen@@QAEXXZ PROC			; CScreen::BuildViewFrustum, COMDAT
; _this$ = ecx

; 878  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 54	 sub	 esp, 84			; 00000054H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 879  : 	const D3DXVECTOR3& c_rv3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 880  : 	const D3DXVECTOR3& c_rv3View = CCameraManager::Instance().GetCurrentCamera()->GetView();

  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00023	8d 78 30	 lea	 edi, DWORD PTR [eax+48]
  00026	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 881  : 	ms_frustum.BuildViewFrustum2(

  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fAspect@CGraphicBase@@1MA
  00033	f3 0f 11 45 b8	 movss	 DWORD PTR tv137[ebp], xmm0
  00038	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fFieldOfView@CGraphicBase@@1MA
  00040	f3 0f 11 45 b4	 movss	 DWORD PTR tv136[ebp], xmm0
  00045	8d 70 54	 lea	 esi, DWORD PTR [eax+84]
  00048	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fFarY@CGraphicBase@@1MA
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00050	8d 45 bc	 lea	 eax, DWORD PTR $T1[ebp]
  00053	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 881  : 	ms_frustum.BuildViewFrustum2(

  00058	f3 0f 11 45 b0	 movss	 DWORD PTR tv135[ebp], xmm0
  0005d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_fNearY@CGraphicBase@@1MA
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00065	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0006a	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 881  : 	ms_frustum.BuildViewFrustum2(

  0006b	f3 0f 11 45 ac	 movss	 DWORD PTR tv131[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00070	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 881  : 	ms_frustum.BuildViewFrustum2(

  00075	f3 0f 10 45 b8	 movss	 xmm0, DWORD PTR tv137[ebp]
  0007a	8d 45 bc	 lea	 eax, DWORD PTR $T1[ebp]
  0007d	56		 push	 esi
  0007e	57		 push	 edi
  0007f	83 ec 10	 sub	 esp, 16			; 00000010H
  00082	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_frustum@CScreen@@1VFrustum@@A ; CScreen::ms_frustum
  00087	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0008d	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR tv136[ebp]
  00092	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00098	f3 0f 10 45 b0	 movss	 xmm0, DWORD PTR tv135[ebp]
  0009d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000a3	f3 0f 10 45 ac	 movss	 xmm0, DWORD PTR tv131[ebp]
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ?BuildViewFrustum2@Frustum@@QAEXAAUD3DXMATRIX@@MMMMABUD3DXVECTOR3@@1@Z ; Frustum::BuildViewFrustum2

; 882  : 		ms_matView * ms_matProj,
; 883  : 		ms_fNearY,
; 884  : 		ms_fFarY,
; 885  : 		ms_fFieldOfView,
; 886  : 		ms_fAspect,
; 887  : 		c_rv3Eye, c_rv3View);
; 888  : }

  000b3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b6	5f		 pop	 edi
  000b7	33 cd		 xor	 ecx, ebp
  000b9	5e		 pop	 esi
  000ba	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
?BuildViewFrustum@CScreen@@QAEXXZ ENDP			; CScreen::BuildViewFrustum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RestoreDevice@CScreen@@QAEHXZ
_TEXT	SEGMENT
_iD3DAdapterInfo$1$ = -4				; size = 4
?RestoreDevice@CScreen@@QAEHXZ PROC			; CScreen::RestoreDevice, COMDAT
; _this$ = ecx

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 666  : 	if (!ms_lpd3dDevice)

  00006	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0000c	57		 push	 edi
  0000d	85 f6		 test	 esi, esi
  0000f	74 7f		 je	 SHORT $LN10@RestoreDev

; 667  : 	{
; 668  : 		return FALSE;
; 669  : 	}
; 670  : 
; 671  : 	UINT iD3DAdapterInfo = ms_iD3DAdapterInfo;

  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo

; 672  : 	IDirect3D9& rkD3D = *ms_lpd3d;

  00016	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?ms_lpd3d@CGraphicBase@@1PAUIDirect3D9@@A ; CGraphicBase::ms_lpd3d
  0001c	89 45 fc	 mov	 DWORD PTR _iD3DAdapterInfo$1$[ebp], eax

; 673  : 	IDirect3DDevice9& rkD3DDev = *ms_lpd3dDevice;
; 674  : 	D3DPRESENT_PARAMETERS& rkD3DPP = ms_d3dPresentParameter;
; 675  : 	D3D_CDisplayModeAutoDetector& rkD3DDetector = ms_kD3DDetector;
; 676  : 
; 677  : 	HRESULT hrTestCooperativeLevel = rkD3DDev.TestCooperativeLevel();

  0001f	8b 06		 mov	 eax, DWORD PTR [esi]
  00021	56		 push	 esi
  00022	ff 50 0c	 call	 DWORD PTR [eax+12]

; 678  : 
; 679  : 	if (FAILED(hrTestCooperativeLevel))

  00025	85 c0		 test	 eax, eax
  00027	79 5b		 jns	 SHORT $LN5@RestoreDev

; 680  : 	{
; 681  : 		if (D3DERR_DEVICELOST == hrTestCooperativeLevel)

  00029	3d 68 08 76 88	 cmp	 eax, -2005530520	; 88760868H
  0002e	74 60		 je	 SHORT $LN10@RestoreDev

; 682  : 		{
; 683  : 			return FALSE;
; 684  : 		}
; 685  : 
; 686  : 		if (D3DERR_DEVICENOTRESET == hrTestCooperativeLevel)

  00030	3d 69 08 76 88	 cmp	 eax, -2005530519	; 88760869H
  00035	75 4d		 jne	 SHORT $LN5@RestoreDev

; 687  : 		{
; 688  : 			D3D_CAdapterInfo* pkD3DAdapterInfo = rkD3DDetector.GetD3DAdapterInfop(ms_iD3DAdapterInfo);

  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_iD3DAdapterInfo@CGraphicBase@@1IA ; CGraphicBase::ms_iD3DAdapterInfo
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kD3DDetector@CGraphicBase@@1VD3D_CDisplayModeAutoDetector@@A ; CGraphicBase::ms_kD3DDetector
  00042	e8 00 00 00 00	 call	 ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop

; 689  : 
; 690  : 			if (!pkD3DAdapterInfo)

  00047	85 c0		 test	 eax, eax
  00049	74 45		 je	 SHORT $LN10@RestoreDev

; 691  : 			{
; 692  : 				return FALSE;
; 693  : 			}
; 694  : 
; 695  : 			D3DDISPLAYMODE & rkD3DDMDesktop = pkD3DAdapterInfo->GetDesktopD3DDisplayModer();

  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 ?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer

; 696  : 
; 697  : 			if (FAILED(rkD3D.GetAdapterDisplayMode(iD3DAdapterInfo, &rkD3DDMDesktop)))

  00052	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00054	8b f8		 mov	 edi, eax
  00056	57		 push	 edi
  00057	ff 75 fc	 push	 DWORD PTR _iD3DAdapterInfo$1$[ebp]
  0005a	53		 push	 ebx
  0005b	ff 51 20	 call	 DWORD PTR [ecx+32]
  0005e	85 c0		 test	 eax, eax
  00060	78 2e		 js	 SHORT $LN10@RestoreDev

; 698  : 			{
; 699  : 				return FALSE;
; 700  : 			}
; 701  : 
; 702  : 			rkD3DPP.BackBufferFormat = rkD3DDMDesktop.Format;

  00062	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00065	a3 08 00 00 00	 mov	 DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+8, eax

; 703  : 
; 704  : 			HRESULT hrReset = rkD3DDev.Reset(&rkD3DPP);

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	68 00 00 00 00	 push	 OFFSET ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A ; CGraphicBase::ms_d3dPresentParameter
  00071	56		 push	 esi
  00072	ff 50 40	 call	 DWORD PTR [eax+64]

; 705  : 
; 706  : 			if (FAILED(hrReset))

  00075	85 c0		 test	 eax, eax
  00077	78 17		 js	 SHORT $LN10@RestoreDev

; 707  : 			{
; 708  : 				return FALSE;
; 709  : 			}
; 710  : 
; 711  : 			STATEMANAGER.SetDefaultState();

  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007f	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState
$LN5@RestoreDev:

; 712  : 		}
; 713  : 	}
; 714  : 
; 715  : 	return TRUE;
; 716  : 
; 717  : }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c3		 ret	 0
$LN10@RestoreDev:
  00090	5f		 pop	 edi
  00091	5e		 pop	 esi
  00092	33 c0		 xor	 eax, eax
  00094	5b		 pop	 ebx
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?RestoreDevice@CScreen@@QAEHXZ ENDP			; CScreen::RestoreDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?IsLostDevice@CScreen@@QAEHXZ
_TEXT	SEGMENT
?IsLostDevice@CScreen@@QAEHXZ PROC			; CScreen::IsLostDevice, COMDAT
; _this$ = ecx

; 649  : 	if (!ms_lpd3dDevice)

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00006	85 c9		 test	 ecx, ecx
  00008	74 10		 je	 SHORT $LN5@IsLostDevi

; 650  : 	{
; 651  : 		return TRUE;
; 652  : 	}
; 653  : 
; 654  : 	IDirect3DDevice9& rkD3DDev = *ms_lpd3dDevice;
; 655  : 	HRESULT hrTestCooperativeLevel = rkD3DDev.TestCooperativeLevel();

  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	51		 push	 ecx
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]

; 656  : 	if (FAILED(hrTestCooperativeLevel))

  00010	33 c9		 xor	 ecx, ecx
  00012	85 c0		 test	 eax, eax
  00014	0f 98 c1	 sets	 cl
  00017	8b c1		 mov	 eax, ecx

; 659  : 	}
; 660  : 
; 661  : 	return FALSE;
; 662  : }

  00019	c3		 ret	 0
$LN5@IsLostDevi:

; 657  : 	{
; 658  : 		return TRUE;

  0001a	b8 01 00 00 00	 mov	 eax, 1

; 659  : 	}
; 660  : 
; 661  : 	return FALSE;
; 662  : }

  0001f	c3		 ret	 0
?IsLostDevice@CScreen@@QAEHXZ ENDP			; CScreen::IsLostDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z
_TEXT	SEGMENT
_Output$ = -28						; size = 12
_Input$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pfX$ = 20						; size = 4
_pfY$ = 24						; size = 4
_pfZ$ = 28						; size = 4
?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z PROC		; CScreen::UnprojectPosition, COMDAT
; _this$ = ecx

; 801  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 804  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _Input$[ebp]
  00018	53		 push	 ebx
  00019	8b 5d 1c	 mov	 ebx, DWORD PTR _pfZ$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR _pfX$[ebp]
  00020	57		 push	 edi
  00021	8b 7d 18	 mov	 edi, DWORD PTR _pfY$[ebp]
  00024	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  00029	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002e	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00033	f3 0f 11 45 f0	 movss	 DWORD PTR _Input$[ebp], xmm0

; 305  :     y = fy;

  00038	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 804  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  0003d	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A ; CGraphicBase::ms_Viewport
  00042	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00043	f3 0f 11 45 f4	 movss	 DWORD PTR _Input$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 804  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00048	8d 45 e4	 lea	 eax, DWORD PTR _Output$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0004b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 804  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00050	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00051	f3 0f 11 45 f8	 movss	 DWORD PTR _Input$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 804  : 	D3DXVec3Unproject(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00056	e8 00 00 00 00	 call	 _D3DXVec3Unproject@24

; 805  : 
; 806  : 	*pfX = Output.x;

  0005b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Output$[ebp]

; 807  : 	*pfY = Output.y;
; 808  : 	*pfZ = Output.z;
; 809  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00067	33 cd		 xor	 ecx, ebp
  00069	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Output$[ebp+4]
  0006e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00072	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Output$[ebp+8]
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  0007d	5b		 pop	 ebx
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 18 00	 ret	 24			; 00000018H
?UnprojectPosition@CScreen@@QAEXMMMPAM00@Z ENDP		; CScreen::UnprojectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?ProjectPosition@CScreen@@QAEXMMMPAM00@Z
_TEXT	SEGMENT
_Output$ = -28						; size = 12
_Input$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pfX$ = 20						; size = 4
_pfY$ = 24						; size = 4
_pfZ$ = 28						; size = 4
?ProjectPosition@CScreen@@QAEXMMMPAM00@Z PROC		; CScreen::ProjectPosition, COMDAT
; _this$ = ecx

; 790  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 793  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _Input$[ebp]
  00018	53		 push	 ebx
  00019	8b 5d 1c	 mov	 ebx, DWORD PTR _pfZ$[ebp]
  0001c	56		 push	 esi
  0001d	8b 75 14	 mov	 esi, DWORD PTR _pfX$[ebp]
  00020	57		 push	 edi
  00021	8b 7d 18	 mov	 edi, DWORD PTR _pfY$[ebp]
  00024	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  00029	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002e	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00033	f3 0f 11 45 f0	 movss	 DWORD PTR _Input$[ebp], xmm0

; 305  :     y = fy;

  00038	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 793  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  0003d	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A ; CGraphicBase::ms_Viewport
  00042	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00043	f3 0f 11 45 f4	 movss	 DWORD PTR _Input$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 793  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00048	8d 45 e4	 lea	 eax, DWORD PTR _Output$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0004b	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 793  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00050	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00051	f3 0f 11 45 f8	 movss	 DWORD PTR _Input$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 793  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00056	e8 00 00 00 00	 call	 _D3DXVec3Project@24

; 794  : 
; 795  : 	*pfX = Output.x;

  0005b	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Output$[ebp]

; 796  : 	*pfY = Output.y;
; 797  : 	*pfZ = Output.z;
; 798  : }

  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00067	33 cd		 xor	 ecx, ebp
  00069	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Output$[ebp+4]
  0006e	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00072	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _Output$[ebp+8]
  00077	5f		 pop	 edi
  00078	5e		 pop	 esi
  00079	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  0007d	5b		 pop	 ebx
  0007e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c2 18 00	 ret	 24			; 00000018H
?ProjectPosition@CScreen@@QAEXMMMPAM00@Z ENDP		; CScreen::ProjectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?ProjectPosition@CScreen@@QAEXMMMPAM0@Z
_TEXT	SEGMENT
_Output$ = -28						; size = 12
_Input$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_pfX$ = 20						; size = 4
_pfY$ = 24						; size = 4
?ProjectPosition@CScreen@@QAEXMMMPAM0@Z PROC		; CScreen::ProjectPosition, COMDAT
; _this$ = ecx

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _x$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 783  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00015	8d 45 f0	 lea	 eax, DWORD PTR _Input$[ebp]
  00018	56		 push	 esi
  00019	8b 75 14	 mov	 esi, DWORD PTR _pfX$[ebp]
  0001c	57		 push	 edi
  0001d	8b 7d 18	 mov	 edi, DWORD PTR _pfY$[ebp]
  00020	68 00 00 00 00	 push	 OFFSET ?ms_matWorld@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matWorld
  00025	68 00 00 00 00	 push	 OFFSET ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matView
  0002a	68 00 00 00 00	 push	 OFFSET ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matProj
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0002f	f3 0f 11 45 f0	 movss	 DWORD PTR _Input$[ebp], xmm0

; 305  :     y = fy;

  00034	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _y$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 783  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00039	68 00 00 00 00	 push	 OFFSET ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A ; CGraphicBase::ms_Viewport
  0003e	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0003f	f3 0f 11 45 f4	 movss	 DWORD PTR _Input$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 783  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00044	8d 45 e4	 lea	 eax, DWORD PTR _Output$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00047	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _z$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 783  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  0004c	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0004d	f3 0f 11 45 f8	 movss	 DWORD PTR _Input$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 783  : 	D3DXVec3Project(&Output, &Input, &ms_Viewport, &ms_matProj, &ms_matView, &ms_matWorld);

  00052	e8 00 00 00 00	 call	 _D3DXVec3Project@24

; 784  : 
; 785  : 	*pfX = Output.x;

  00057	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _Output$[ebp]

; 786  : 	*pfY = Output.y;
; 787  : }

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00063	33 cd		 xor	 ecx, ebp
  00065	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _Output$[ebp+4]
  0006a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c2 14 00	 ret	 20			; 00000014H
?ProjectPosition@CScreen@@QAEXMMMPAM0@Z ENDP		; CScreen::ProjectPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?GetPickingPosition@CScreen@@QAEXMPAM00@Z
_TEXT	SEGMENT
_t$ = 8							; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_z$ = 20						; size = 4
?GetPickingPosition@CScreen@@QAEXMPAM00@Z PROC		; CScreen::GetPickingPosition, COMDAT
; _this$ = ecx

; 604  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 605  : 	*x = ms_vtPickRayOrig.x + ms_vtPickRayDir.x * t;

  00003	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _t$[ebp]
  00008	8b 45 0c	 mov	 eax, DWORD PTR _x$[ebp]
  0000b	0f 28 c1	 movaps	 xmm0, xmm1
  0000e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A
  00016	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A
  0001e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 606  : 	*y = ms_vtPickRayOrig.y + ms_vtPickRayDir.y * t;

  00022	0f 28 c1	 movaps	 xmm0, xmm1
  00025	f3 0f 59 05 04
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+4
  0002d	8b 45 10	 mov	 eax, DWORD PTR _y$[ebp]
  00030	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+4
  00038	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 607  : 	*z = ms_vtPickRayOrig.z + ms_vtPickRayDir.z * t;

  0003c	f3 0f 59 0d 08
	00 00 00	 mulss	 xmm1, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+8
  00044	8b 45 14	 mov	 eax, DWORD PTR _z$[ebp]
  00047	f3 0f 58 0d 08
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8
  0004f	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 608  : }

  00053	5d		 pop	 ebp
  00054	c2 10 00	 ret	 16			; 00000010H
?GetPickingPosition@CScreen@@QAEXMPAM00@Z ENDP		; CScreen::GetPickingPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?GetCursorZPosition@CScreen@@QAE_NPAM@Z
_TEXT	SEGMENT
_u$ = -76						; size = 4
_v$ = -72						; size = 4
_t$ = -68						; size = 4
$T1 = -64						; size = 12
$T2 = -64						; size = 12
$T3 = -64						; size = 12
$T4 = -64						; size = 12
_v3Eye$ = -64						; size = 12
_posVertices$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_pz$ = 8						; size = 4
?GetCursorZPosition@CScreen@@QAE_NPAM@Z PROC		; CScreen::GetCursorZPosition, COMDAT
; _this$ = ecx

; 576  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR _pz$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 577  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00018	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0001e	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 580  : 	posVertices[0] = TPosition(v3Eye.x - 90000000.0f, 0.0f, v3Eye.z + 90000000.0f);

  00023	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@4caba950
  0002b	0f 57 ed	 xorps	 xmm5, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0002e	be 02 00 00 00	 mov	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB+2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 577  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00033	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  00038	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0003b	66 0f d6 45 c0	 movq	 QWORD PTR _v3Eye$[ebp], xmm0

; 580  : 	posVertices[0] = TPosition(v3Eye.x - 90000000.0f, 0.0f, v3Eye.z + 90000000.0f);

  00040	f3 0f 10 75 c0	 movss	 xmm6, DWORD PTR _v3Eye$[ebp]
  00045	89 45 c8	 mov	 DWORD PTR _v3Eye$[ebp+8], eax
  00048	0f 28 ce	 movaps	 xmm1, xmm6
  0004b	f3 0f 10 65 c8	 movss	 xmm4, DWORD PTR _v3Eye$[ebp+8]
  00050	f3 0f 5c cb	 subss	 xmm1, xmm3
  00054	0f 28 d4	 movaps	 xmm2, xmm4

; 582  : 	posVertices[2] = TPosition(v3Eye.x + 90000000.0f, 0.0f, v3Eye.z + 90000000.0f);

  00057	f3 0f 58 f3	 addss	 xmm6, xmm3
  0005b	f3 0f 58 d3	 addss	 xmm2, xmm3
  0005f	f3 0f 5c e3	 subss	 xmm4, xmm3
  00063	0f 28 c1	 movaps	 xmm0, xmm1
  00066	0f 14 cd	 unpcklps xmm1, xmm5
  00069	0f 14 c5	 unpcklps xmm0, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0006c	f3 0f 11 55 c8	 movss	 DWORD PTR $T4[ebp+8], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 580  : 	posVertices[0] = TPosition(v3Eye.x - 90000000.0f, 0.0f, v3Eye.z + 90000000.0f);

  00071	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp+8]
  00074	89 45 d4	 mov	 DWORD PTR _posVertices$[ebp+8], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00077	f3 0f 11 65 c8	 movss	 DWORD PTR $T3[ebp+8], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 581  : 	posVertices[1] = TPosition(v3Eye.x - 90000000.0f, 0.0f, v3Eye.z - 90000000.0f);

  0007c	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp+8]
  0007f	66 0f d6 45 cc	 movq	 QWORD PTR _posVertices$[ebp], xmm0

; 582  : 	posVertices[2] = TPosition(v3Eye.x + 90000000.0f, 0.0f, v3Eye.z + 90000000.0f);

  00084	0f 28 c6	 movaps	 xmm0, xmm6
  00087	89 45 e0	 mov	 DWORD PTR _posVertices$[ebp+20], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0008a	f3 0f 11 55 c8	 movss	 DWORD PTR $T2[ebp+8], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 582  : 	posVertices[2] = TPosition(v3Eye.x + 90000000.0f, 0.0f, v3Eye.z + 90000000.0f);

  0008f	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp+8]
  00092	0f 14 c5	 unpcklps xmm0, xmm5
  00095	89 45 ec	 mov	 DWORD PTR _posVertices$[ebp+32], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00098	f3 0f 11 65 c8	 movss	 DWORD PTR $T1[ebp+8], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 583  : 	posVertices[3] = TPosition(v3Eye.x + 90000000.0f, 0.0f, v3Eye.z - 90000000.0f);

  0009d	8b 45 c8	 mov	 eax, DWORD PTR $T1[ebp+8]
  000a0	0f 14 f5	 unpcklps xmm6, xmm5
  000a3	66 0f d6 4d d8	 movq	 QWORD PTR _posVertices$[ebp+12], xmm1
  000a8	66 0f d6 45 e4	 movq	 QWORD PTR _posVertices$[ebp+24], xmm0
  000ad	66 0f d6 75 f0	 movq	 QWORD PTR _posVertices$[ebp+36], xmm6
  000b2	89 45 f8	 mov	 DWORD PTR _posVertices$[ebp+44], eax
$LL4@GetCursorZ:

; 589  : 	{
; 590  : 		if (IntersectTriangle(ms_vtPickRayOrig, ms_vtPickRayDir,

  000b5	8d 45 bc	 lea	 eax, DWORD PTR _t$[ebp]
  000b8	50		 push	 eax
  000b9	8d 45 b8	 lea	 eax, DWORD PTR _v$[ebp]
  000bc	50		 push	 eax
  000bd	8d 45 b4	 lea	 eax, DWORD PTR _u$[ebp]
  000c0	50		 push	 eax
  000c1	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  000c5	8d 4d cc	 lea	 ecx, DWORD PTR _posVertices$[ebp]
  000c8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000cb	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000ce	50		 push	 eax
  000cf	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000d2	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d5	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000d8	50		 push	 eax
  000d9	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  000dd	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000e0	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000e3	8b cf		 mov	 ecx, edi
  000e5	50		 push	 eax
  000e6	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayDir
  000eb	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
  000f0	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  000f5	84 c0		 test	 al, al
  000f7	75 1e		 jne	 SHORT $LN23@GetCursorZ

; 584  : 
; 585  : 	static const WORD sc_awFillRectIndices[6] = { 0, 2, 1, 2, 3, 1, };
; 586  : 
; 587  : 	float u, v, t;
; 588  : 	for (int i = 0; i < 2; ++i)

  000f9	83 c6 06	 add	 esi, 6
  000fc	81 fe 0e 00 00
	00		 cmp	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorZPosition@CScreen@@QAE_NPAM@Z@4QBGB+14
  00102	7c b1		 jl	 SHORT $LL4@GetCursorZ

; 598  : 		}
; 599  : 	}
; 600  : 	return false;
; 601  : }

  00104	5f		 pop	 edi
  00105	5e		 pop	 esi
  00106	5b		 pop	 ebx
  00107	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010a	33 cd		 xor	 ecx, ebp
  0010c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 04 00	 ret	 4
$LN23@GetCursorZ:

; 591  : 							  posVertices[sc_awFillRectIndices[i * 3 + 0]],
; 592  : 							  posVertices[sc_awFillRectIndices[i * 3 + 1]],
; 593  : 							  posVertices[sc_awFillRectIndices[i * 3 + 2]],
; 594  : 							  &u, &v, &t))
; 595  : 		{
; 596  : 			*pz = ms_vtPickRayOrig.z + ms_vtPickRayDir.z * t;

  00117	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _t$[ebp]

; 597  : 			return true;

  0011c	b0 01		 mov	 al, 1
  0011e	f3 0f 59 05 08
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+8

; 598  : 		}
; 599  : 	}
; 600  : 	return false;
; 601  : }

  00126	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8
  00133	33 cd		 xor	 ecx, ebp
  00135	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00139	5b		 pop	 ebx
  0013a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c2 04 00	 ret	 4
?GetCursorZPosition@CScreen@@QAE_NPAM@Z ENDP		; CScreen::GetCursorZPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z
_TEXT	SEGMENT
_u$ = -80						; size = 4
_v$ = -76						; size = 4
_py$GSCopy$1$ = -72					; size = 4
_t$ = -68						; size = 4
$T1 = -64						; size = 12
$T2 = -64						; size = 12
$T3 = -64						; size = 12
$T4 = -64						; size = 12
_v3Eye$ = -64						; size = 12
_posVertices$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_px$ = 8						; size = 4
_py$ = 12						; size = 4
?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z PROC		; CScreen::GetCursorXYPosition, COMDAT
; _this$ = ecx

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 0c	 mov	 eax, DWORD PTR _py$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _px$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	89 45 b8	 mov	 DWORD PTR _py$GSCopy$1$[ebp], eax

; 548  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00024	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 551  : 	posVertices[0] = TPosition(v3Eye.x - 90000000.0f, v3Eye.y + 90000000.0f, 0.0f);

  00029	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@4caba950
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00031	be 02 00 00 00	 mov	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB+2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 548  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00036	f3 0f 7e 40 30	 movq	 xmm0, QWORD PTR [eax+48]
  0003b	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  0003e	66 0f d6 45 c0	 movq	 QWORD PTR _v3Eye$[ebp], xmm0

; 551  : 	posVertices[0] = TPosition(v3Eye.x - 90000000.0f, v3Eye.y + 90000000.0f, 0.0f);

  00043	f3 0f 10 6d c0	 movss	 xmm5, DWORD PTR _v3Eye$[ebp]
  00048	f3 0f 10 65 c4	 movss	 xmm4, DWORD PTR _v3Eye$[ebp+4]
  0004d	0f 28 cd	 movaps	 xmm1, xmm5
  00050	f3 0f 5c ca	 subss	 xmm1, xmm2
  00054	89 45 c8	 mov	 DWORD PTR _v3Eye$[ebp+8], eax
  00057	0f 28 dc	 movaps	 xmm3, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0005a	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 551  : 	posVertices[0] = TPosition(v3Eye.x - 90000000.0f, v3Eye.y + 90000000.0f, 0.0f);

  00061	8b 45 c8	 mov	 eax, DWORD PTR $T4[ebp+8]
  00064	f3 0f 58 da	 addss	 xmm3, xmm2

; 553  : 	posVertices[2] = TPosition(v3Eye.x + 90000000.0f, v3Eye.y + 90000000.0f, 0.0f);

  00068	f3 0f 58 ea	 addss	 xmm5, xmm2
  0006c	89 45 d4	 mov	 DWORD PTR _posVertices$[ebp+8], eax
  0006f	f3 0f 5c e2	 subss	 xmm4, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00073	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 552  : 	posVertices[1] = TPosition(v3Eye.x - 90000000.0f, v3Eye.y - 90000000.0f, 0.0f);

  0007a	8b 45 c8	 mov	 eax, DWORD PTR $T3[ebp+8]
  0007d	0f 28 c1	 movaps	 xmm0, xmm1
  00080	89 45 e0	 mov	 DWORD PTR _posVertices$[ebp+20], eax
  00083	0f 14 c3	 unpcklps xmm0, xmm3
  00086	66 0f d6 45 cc	 movq	 QWORD PTR _posVertices$[ebp], xmm0

; 553  : 	posVertices[2] = TPosition(v3Eye.x + 90000000.0f, v3Eye.y + 90000000.0f, 0.0f);

  0008b	0f 28 c5	 movaps	 xmm0, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0008e	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 553  : 	posVertices[2] = TPosition(v3Eye.x + 90000000.0f, v3Eye.y + 90000000.0f, 0.0f);

  00095	8b 45 c8	 mov	 eax, DWORD PTR $T2[ebp+8]
  00098	0f 14 cc	 unpcklps xmm1, xmm4
  0009b	0f 14 c3	 unpcklps xmm0, xmm3
  0009e	89 45 ec	 mov	 DWORD PTR _posVertices$[ebp+32], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  000a1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 554  : 	posVertices[3] = TPosition(v3Eye.x + 90000000.0f, v3Eye.y - 90000000.0f, 0.0f);

  000a8	8b 45 c8	 mov	 eax, DWORD PTR $T1[ebp+8]
  000ab	0f 14 ec	 unpcklps xmm5, xmm4
  000ae	66 0f d6 4d d8	 movq	 QWORD PTR _posVertices$[ebp+12], xmm1
  000b3	66 0f d6 45 e4	 movq	 QWORD PTR _posVertices$[ebp+24], xmm0
  000b8	66 0f d6 6d f0	 movq	 QWORD PTR _posVertices$[ebp+36], xmm5
  000bd	89 45 f8	 mov	 DWORD PTR _posVertices$[ebp+44], eax
$LL4@GetCursorX:

; 560  : 	{
; 561  : 		if (IntersectTriangle(ms_vtPickRayOrig, ms_vtPickRayDir,

  000c0	8d 45 bc	 lea	 eax, DWORD PTR _t$[ebp]
  000c3	50		 push	 eax
  000c4	8d 45 b4	 lea	 eax, DWORD PTR _v$[ebp]
  000c7	50		 push	 eax
  000c8	8d 45 b0	 lea	 eax, DWORD PTR _u$[ebp]
  000cb	50		 push	 eax
  000cc	0f b7 46 02	 movzx	 eax, WORD PTR [esi+2]
  000d0	8d 4d cc	 lea	 ecx, DWORD PTR _posVertices$[ebp]
  000d3	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000d6	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000d9	50		 push	 eax
  000da	0f b7 06	 movzx	 eax, WORD PTR [esi]
  000dd	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000e0	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000e3	50		 push	 eax
  000e4	0f b7 46 fe	 movzx	 eax, WORD PTR [esi-2]
  000e8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000eb	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000ee	8b cf		 mov	 ecx, edi
  000f0	50		 push	 eax
  000f1	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayDir
  000f6	68 00 00 00 00	 push	 OFFSET ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A ; CGraphicBase::ms_vtPickRayOrig
  000fb	e8 00 00 00 00	 call	 ?IntersectTriangle@CGraphicCollisionObject@@IAE_NABUD3DXVECTOR3@@0000PAM11@Z ; CGraphicCollisionObject::IntersectTriangle
  00100	84 c0		 test	 al, al
  00102	75 1e		 jne	 SHORT $LN23@GetCursorX

; 555  : 
; 556  : 	static const WORD sc_awFillRectIndices[6] = { 0, 2, 1, 2, 3, 1, };
; 557  : 
; 558  : 	float u, v, t;
; 559  : 	for (int i = 0; i < 2; ++i)

  00104	83 c6 06	 add	 esi, 6
  00107	81 fe 0e 00 00
	00		 cmp	 esi, OFFSET ?sc_awFillRectIndices@?1??GetCursorXYPosition@CScreen@@QAE_NPAM0@Z@4QBGB+14
  0010d	7c b1		 jl	 SHORT $LL4@GetCursorX

; 569  : 			return true;
; 570  : 		}
; 571  : 	}
; 572  : 	return false;
; 573  : }

  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi
  00111	5b		 pop	 ebx
  00112	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00115	33 cd		 xor	 ecx, ebp
  00117	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
$LN23@GetCursorX:

; 562  : 							  posVertices[sc_awFillRectIndices[i * 3 + 0]],
; 563  : 							  posVertices[sc_awFillRectIndices[i * 3 + 1]],
; 564  : 							  posVertices[sc_awFillRectIndices[i * 3 + 2]],
; 565  : 							  &u, &v, &t))
; 566  : 		{
; 567  : 			*px = ms_vtPickRayOrig.x + ms_vtPickRayDir.x * t;

  00122	f3 0f 10 4d bc	 movss	 xmm1, DWORD PTR _t$[ebp]

; 568  : 			*py = ms_vtPickRayOrig.y + ms_vtPickRayDir.y * t;

  00127	8b 45 b8	 mov	 eax, DWORD PTR _py$GSCopy$1$[ebp]
  0012a	0f 28 c1	 movaps	 xmm0, xmm1
  0012d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A

; 569  : 			return true;
; 570  : 		}
; 571  : 	}
; 572  : 	return false;
; 573  : }

  00135	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00138	5f		 pop	 edi
  00139	5e		 pop	 esi
  0013a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A
  00142	33 cd		 xor	 ecx, ebp
  00144	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00148	f3 0f 59 0d 04
	00 00 00	 mulss	 xmm1, DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+4
  00150	5b		 pop	 ebx
  00151	f3 0f 58 0d 04
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+4
  00159	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0015d	b0 01		 mov	 al, 1
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	8b e5		 mov	 esp, ebp
  00166	5d		 pop	 ebp
  00167	c2 08 00	 ret	 8
?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z ENDP		; CScreen::GetCursorXYPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?GetCursorPosition@CScreen@@QAE_NPAM00@Z
_TEXT	SEGMENT
_px$ = 8						; size = 4
_py$ = 12						; size = 4
_pz$ = 16						; size = 4
?GetCursorPosition@CScreen@@QAE_NPAM00@Z PROC		; CScreen::GetCursorPosition, COMDAT
; _this$ = ecx

; 539  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 540  : 	if (!GetCursorXYPosition(px, py)) { return false; }

  00004	ff 75 0c	 push	 DWORD PTR _py$[ebp]
  00007	8b f1		 mov	 esi, ecx
  00009	ff 75 08	 push	 DWORD PTR _px$[ebp]
  0000c	e8 00 00 00 00	 call	 ?GetCursorXYPosition@CScreen@@QAE_NPAM0@Z ; CScreen::GetCursorXYPosition
  00011	84 c0		 test	 al, al
  00013	74 14		 je	 SHORT $LN5@GetCursorP

; 541  : 	if (!GetCursorZPosition(pz)) { return false; }

  00015	ff 75 10	 push	 DWORD PTR _pz$[ebp]
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?GetCursorZPosition@CScreen@@QAE_NPAM@Z ; CScreen::GetCursorZPosition
  0001f	84 c0		 test	 al, al
  00021	5e		 pop	 esi
  00022	0f 95 c0	 setne	 al

; 542  : 
; 543  : 	return true;
; 544  : }

  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
$LN5@GetCursorP:

; 541  : 	if (!GetCursorZPosition(pz)) { return false; }

  00029	32 c0		 xor	 al, al
  0002b	5e		 pop	 esi

; 542  : 
; 543  : 	return true;
; 544  : }

  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?GetCursorPosition@CScreen@@QAE_NPAM00@Z ENDP		; CScreen::GetCursorPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetCursorPosition@CScreen@@QAEXHHHH@Z
_TEXT	SEGMENT
tv634 = 8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
tv632 = 16						; size = 4
_hres$ = 16						; size = 4
_vres$ = 20						; size = 4
?SetCursorPosition@CScreen@@QAEXHHHH@Z PROC		; CScreen::SetCursorPosition, COMDAT
; _this$ = ecx

; 509  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	66 0f 6e 7d 08	 movd	 xmm7, DWORD PTR _x$[ebp]
  00008	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _hres$[ebp]
  0000d	66 0f 6e 6d 0c	 movd	 xmm5, DWORD PTR _y$[ebp]

; 511  : 	v.x = -(((2.0f * x) / hres) - 1) / ms_matProj._11;

  00012	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00015	68 18 00 00 00	 push	 OFFSET ?ms_Ray@CGraphicBase@@1VCRay@@A+24
  0001a	68 18 00 00 00	 push	 OFFSET ?ms_Ray@CGraphicBase@@1VCRay@@A+24
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 511  : 	v.x = -(((2.0f * x) / hres) - 1) / ms_matProj._11;

  0001f	0f 5b ff	 cvtdq2ps xmm7, xmm7

; 512  : 	v.y = (((2.0f * y) / vres) - 1) / ms_matProj._22;

  00022	0f 5b ed	 cvtdq2ps xmm5, xmm5
  00025	f3 0f 58 ff	 addss	 xmm7, xmm7
  00029	f3 0f 58 ed	 addss	 xmm5, xmm5

; 513  : 	v.z = 1.0f;
; 514  : 
; 515  : 	D3DXMATRIX matViewInverse = ms_matInverseView;

  0002d	0f 10 1d 00 00
	00 00		 movups	 xmm3, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A
  00034	0f 10 15 10 00
	00 00		 movups	 xmm2, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+16
  0003b	f3 0f 5e f8	 divss	 xmm7, xmm0
  0003f	66 0f 6e 45 14	 movd	 xmm0, DWORD PTR _vres$[ebp]
  00044	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00047	f3 0f 5c 3d 00
	00 00 00	 subss	 xmm7, DWORD PTR __real@3f800000
  0004f	f3 0f 5e e8	 divss	 xmm5, xmm0
  00053	0f 57 3d 00 00
	00 00		 xorps	 xmm7, DWORD PTR __xmm@80000000800000008000000080000000
  0005a	f3 0f 5c 2d 00
	00 00 00	 subss	 xmm5, DWORD PTR __real@3f800000
  00062	f3 0f 5e 3d 00
	00 00 00	 divss	 xmm7, DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A
  0006a	f3 0f 5e 2d 14
	00 00 00	 divss	 xmm5, DWORD PTR ?ms_matProj@CGraphicBase@@1UD3DXMATRIX@@A+20
  00072	0f 10 25 20 00
	00 00		 movups	 xmm4, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+32
  00079	0f 28 cd	 movaps	 xmm1, xmm5
  0007c	f3 0f 11 6d 08	 movss	 DWORD PTR tv634[ebp], xmm5
  00081	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 518  : 	ms_vtPickRayDir.x = v.x * matViewInverse._11 +

  00085	0f 28 c7	 movaps	 xmm0, xmm7
  00088	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0008c	0f 10 35 30 00
	00 00		 movups	 xmm6, XMMWORD PTR ?ms_matInverseView@CGraphicBase@@1UD3DXMATRIX@@A+48
  00093	f3 0f 58 c8	 addss	 xmm1, xmm0
  00097	0f 28 c2	 movaps	 xmm0, xmm2
  0009a	0f c6 c2 55	 shufps	 xmm0, xmm2, 85		; 00000055H
  0009e	f3 0f 59 e8	 mulss	 xmm5, xmm0

; 522  : 	ms_vtPickRayDir.y = v.x * matViewInverse._12 +

  000a2	0f 28 c3	 movaps	 xmm0, xmm3
  000a5	0f c6 c3 55	 shufps	 xmm0, xmm3, 85		; 00000055H
  000a9	f3 0f 58 cc	 addss	 xmm1, xmm4
  000ad	0f c6 d2 aa	 shufps	 xmm2, xmm2, 170		; 000000aaH

; 526  : 	ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  000b1	0f c6 db aa	 shufps	 xmm3, xmm3, 170		; 000000aaH

; 527  : 						v.y * matViewInverse._23 +
; 528  : 						v.z * matViewInverse._33;
; 529  : 
; 530  : 	ms_vtPickRayOrig.x = matViewInverse._41;

  000b5	f3 0f 11 35 00
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 22   : 		m_v3Start = v3Start;

  000bd	f3 0f 11 35 00
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 518  : 	ms_vtPickRayDir.x = v.x * matViewInverse._11 +

  000c5	f3 0f 11 4d 10	 movss	 DWORD PTR tv632[ebp], xmm1
  000ca	f3 0f 11 0d 00
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A, xmm1

; 522  : 	ms_vtPickRayDir.y = v.x * matViewInverse._12 +

  000d2	0f 28 cf	 movaps	 xmm1, xmm7
  000d5	f3 0f 59 c8	 mulss	 xmm1, xmm0
  000d9	0f 28 c4	 movaps	 xmm0, xmm4
  000dc	0f c6 c4 55	 shufps	 xmm0, xmm4, 85		; 00000055H

; 526  : 	ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  000e0	f3 0f 59 fb	 mulss	 xmm7, xmm3
  000e4	f3 0f 58 e9	 addss	 xmm5, xmm1
  000e8	0f c6 e4 aa	 shufps	 xmm4, xmm4, 170		; 000000aaH

; 531  : 	ms_vtPickRayOrig.y = matViewInverse._42;

  000ec	0f 28 ce	 movaps	 xmm1, xmm6
  000ef	0f c6 ce 55	 shufps	 xmm1, xmm6, 85		; 00000055H
  000f3	f3 0f 11 0d 04
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+4, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 22   : 		m_v3Start = v3Start;

  000fb	f3 0f 11 0d 04
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+4, xmm1
  00103	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 522  : 	ms_vtPickRayDir.y = v.x * matViewInverse._12 +

  0010b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0010f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv634[ebp]
  00114	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00118	f3 0f 11 2d 04
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+4, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00120	0f 57 e9	 xorps	 xmm5, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 526  : 	ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  00123	0f 28 d0	 movaps	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00126	f3 0f 11 2d 1c
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+28, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 526  : 	ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  0012e	f3 0f 58 d7	 addss	 xmm2, xmm7

; 532  : 	ms_vtPickRayOrig.z = matViewInverse._43;

  00132	0f 28 c6	 movaps	 xmm0, xmm6
  00135	0f c6 c6 aa	 shufps	 xmm0, xmm6, 170		; 000000aaH
  00139	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayOrig@CGraphicBase@@1UD3DXVECTOR3@@A+8, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 22   : 		m_v3Start = v3Start;

  00141	f3 0f 11 05 08
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+8, xmm0
  00149	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR tv632[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 526  : 	ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  0014e	f3 0f 58 d4	 addss	 xmm2, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 22   : 		m_v3Start = v3Start;

  00152	0f 57 c1	 xorps	 xmm0, xmm1

; 28   : 		m_v3Direction = v3Dir;

  00155	f3 0f 11 05 18
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+24, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 526  : 	ms_vtPickRayDir.z = v.x * matViewInverse._13 +

  0015d	f3 0f 11 15 08
	00 00 00	 movss	 DWORD PTR ?ms_vtPickRayDir@CGraphicBase@@1UD3DXVECTOR3@@A+8, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00165	0f 57 d1	 xorps	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00168	f3 0f 11 15 20
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+32, xmm2

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00170	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  00175	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@47480000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0017d	f3 0f 10 05 18
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+24
  00185	f3 0f 59 c1	 mulss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  00189	c7 05 24 00 00
	00 00 00 48 47	 mov	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+36, 1195900928 ; 47480000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00193	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0019b	f3 0f 11 05 0c
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+12, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001a3	f3 0f 10 05 1c
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+28
  001ab	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001af	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  001b7	f3 0f 11 05 10
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+16, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001bf	f3 0f 10 05 20
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+32
  001c7	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  001cb	f3 0f 58 05 08
	00 00 00	 addss	 xmm0, DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  001d3	f3 0f 11 05 14
	00 00 00	 movss	 DWORD PTR ?ms_Ray@CGraphicBase@@1VCRay@@A+20, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 536  : }

  001db	5d		 pop	 ebp
  001dc	c2 10 00	 ret	 16			; 00000010H
?SetCursorPosition@CScreen@@QAEXHHHH@Z ENDP		; CScreen::SetCursorPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetClearStencil@CScreen@@QAEXK@Z
_TEXT	SEGMENT
_stencil$ = 8						; size = 4
?SetClearStencil@CScreen@@QAEXK@Z PROC			; CScreen::SetClearStencil, COMDAT
; _this$ = ecx

; 631  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 632  : 	ms_clearStencil = stencil;

  00003	8b 45 08	 mov	 eax, DWORD PTR _stencil$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ms_clearStencil@CScreen@@1KA, eax ; CScreen::ms_clearStencil

; 633  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetClearStencil@CScreen@@QAEXK@Z ENDP			; CScreen::SetClearStencil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetClearDepth@CScreen@@QAEXM@Z
_TEXT	SEGMENT
_depth$ = 8						; size = 4
?SetClearDepth@CScreen@@QAEXM@Z PROC			; CScreen::SetClearDepth, COMDAT
; _this$ = ecx

; 626  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 627  : 	ms_clearDepth = depth;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _depth$[ebp]
  00008	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?ms_clearDepth@CScreen@@1MA, xmm0

; 628  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetClearDepth@CScreen@@QAEXM@Z ENDP			; CScreen::SetClearDepth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetClearColor@CScreen@@QAEXMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetClearColor@CScreen@@QAEXMMMM@Z PROC			; CScreen::SetClearColor, COMDAT
; _this$ = ecx

; 621  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 622  : 	ms_clearColor = GetColor(r, g, b, a);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00011	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?ms_clearColor@CScreen@@1KA, eax ; CScreen::ms_clearColor

; 623  : }

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?SetClearColor@CScreen@@QAEXMMMM@Z ENDP			; CScreen::SetClearColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetDiffuseColor@CScreen@@QAEXMMMM@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
?SetDiffuseColor@CScreen@@QAEXMMMM@Z PROC		; CScreen::SetDiffuseColor, COMDAT
; _this$ = ecx

; 616  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 617  : 	ms_diffuseColor = GetColor(r, g, b, a);

  00003	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00008	83 ec 10	 sub	 esp, 16			; 00000010H
  0000b	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00011	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00016	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00021	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0002c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00031	e8 00 00 00 00	 call	 ?GetColor@CGraphicBase@@QAEKMMMM@Z ; CGraphicBase::GetColor
  00036	a3 00 00 00 00	 mov	 DWORD PTR ?ms_diffuseColor@CScreen@@1KA, eax ; CScreen::ms_diffuseColor

; 618  : }

  0003b	5d		 pop	 ebp
  0003c	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CScreen@@QAEXMMMM@Z ENDP		; CScreen::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetDiffuseColor@CScreen@@QAEXK@Z
_TEXT	SEGMENT
_diffuseColor$ = 8					; size = 4
?SetDiffuseColor@CScreen@@QAEXK@Z PROC			; CScreen::SetDiffuseColor, COMDAT
; _this$ = ecx

; 611  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 612  : 	ms_diffuseColor = diffuseColor;

  00003	8b 45 08	 mov	 eax, DWORD PTR _diffuseColor$[ebp]
  00006	a3 00 00 00 00	 mov	 DWORD PTR ?ms_diffuseColor@CScreen@@1KA, eax ; CScreen::ms_diffuseColor

; 613  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?SetDiffuseColor@CScreen@@QAEXK@Z ENDP			; CScreen::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_dwR$1$ = 8						; size = 4
_rColor$ = 8						; size = 4
?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z PROC ; CScreen::SetAddColorOperation, COMDAT
; _this$ = ecx

; 856  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00003	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0000b	0f 57 c9	 xorps	 xmm1, xmm1
  0000e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 856  : {

  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00019	8b 7d 08	 mov	 edi, DWORD PTR _rColor$[ebp]
  0001c	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00020	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00027	72 09		 jb	 SHORT $LN7@SetAddColo
  00029	c7 45 08 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00030	eb 31		 jmp	 SHORT $LN6@SetAddColo
$LN7@SetAddColo:
  00032	0f 2f c8	 comiss	 xmm1, xmm0
  00035	72 09		 jb	 SHORT $LN5@SetAddColo
  00037	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0003e	eb 23		 jmp	 SHORT $LN6@SetAddColo
$LN5@SetAddColo:
  00040	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00044	f3 0f 58 c4	 addss	 xmm0, xmm4
  00048	e8 00 00 00 00	 call	 __ftol3
  0004d	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00055	0f 57 c9	 xorps	 xmm1, xmm1
  00058	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00060	89 45 08	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN6@SetAddColo:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00063	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00068	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0006f	72 07		 jb	 SHORT $LN11@SetAddColo
  00071	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00076	eb 18		 jmp	 SHORT $LN10@SetAddColo
$LN11@SetAddColo:
  00078	0f 2f c8	 comiss	 xmm1, xmm0
  0007b	72 04		 jb	 SHORT $LN9@SetAddColo
  0007d	33 db		 xor	 ebx, ebx
  0007f	eb 0f		 jmp	 SHORT $LN10@SetAddColo
$LN9@SetAddColo:
  00081	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00085	f3 0f 58 c4	 addss	 xmm0, xmm4
  00089	e8 00 00 00 00	 call	 __ftol3
  0008e	8b d8		 mov	 ebx, eax
$LN10@SetAddColo:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00090	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00095	0f 57 c9	 xorps	 xmm1, xmm1
  00098	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0009f	72 07		 jb	 SHORT $LN15@SetAddColo
  000a1	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000a6	eb 23		 jmp	 SHORT $LN14@SetAddColo
$LN15@SetAddColo:
  000a8	0f 2f c8	 comiss	 xmm1, xmm0
  000ab	72 04		 jb	 SHORT $LN13@SetAddColo
  000ad	33 f6		 xor	 esi, esi
  000af	eb 1a		 jmp	 SHORT $LN14@SetAddColo
$LN13@SetAddColo:
  000b1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000b9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000c1	e8 00 00 00 00	 call	 __ftol3
  000c6	8b f0		 mov	 esi, eax
  000c8	0f 57 c9	 xorps	 xmm1, xmm1
$LN14@SetAddColo:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000cb	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
  000d0	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000d7	72 07		 jb	 SHORT $LN19@SetAddColo
  000d9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000de	eb 1e		 jmp	 SHORT $LN18@SetAddColo
$LN19@SetAddColo:
  000e0	0f 2f c8	 comiss	 xmm1, xmm0
  000e3	72 04		 jb	 SHORT $LN17@SetAddColo
  000e5	33 c0		 xor	 eax, eax
  000e7	eb 15		 jmp	 SHORT $LN18@SetAddColo
$LN17@SetAddColo:
  000e9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000f1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f9	e8 00 00 00 00	 call	 __ftol3
$LN18@SetAddColo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 857  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00104	c1 e0 08	 shl	 eax, 8
  00107	0b 45 08	 or	 eax, DWORD PTR _dwR$1$[ebp]
  0010a	c1 e0 08	 shl	 eax, 8
  0010d	0b c3		 or	 eax, ebx
  0010f	c1 e0 08	 shl	 eax, 8
  00112	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 857  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  00114	50		 push	 eax
  00115	6a 3c		 push	 60			; 0000003cH
  00117	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 858  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0011c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00122	6a 02		 push	 2
  00124	6a 02		 push	 2
  00126	6a 00		 push	 0
  00128	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 859  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00133	6a 03		 push	 3
  00135	6a 03		 push	 3
  00137	6a 00		 push	 0
  00139	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 860  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_ADD);

  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00144	6a 07		 push	 7
  00146	6a 01		 push	 1
  00148	6a 00		 push	 0
  0014a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0014f	5f		 pop	 edi
  00150	5e		 pop	 esi
  00151	5b		 pop	 ebx

; 861  : }

  00152	5d		 pop	 ebp
  00153	c2 04 00	 ret	 4
?SetAddColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ENDP ; CScreen::SetAddColorOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_rColor$ = 8						; size = 4
?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z PROC ; CScreen::SetOneColorOperation, COMDAT
; _this$ = ecx

; 846  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 847  : 	STATEMANAGER.SetTexture(0, NULL);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 848  : 	STATEMANAGER.SetTexture(1, NULL);

  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001b	6a 00		 push	 0
  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00024	8b 75 08	 mov	 esi, DWORD PTR _rColor$[ebp]
  00027	0f 57 c9	 xorps	 xmm1, xmm1
  0002a	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00032	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  0003a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0003e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00045	72 07		 jb	 SHORT $LN7@SetOneColo
  00047	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0004c	eb 2b		 jmp	 SHORT $LN6@SetOneColo
$LN7@SetOneColo:
  0004e	0f 2f c8	 comiss	 xmm1, xmm0
  00051	72 04		 jb	 SHORT $LN5@SetOneColo
  00053	33 db		 xor	 ebx, ebx
  00055	eb 22		 jmp	 SHORT $LN6@SetOneColo
$LN5@SetOneColo:
  00057	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0005b	f3 0f 58 c4	 addss	 xmm0, xmm4
  0005f	e8 00 00 00 00	 call	 __ftol3
  00064	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  0006c	8b d8		 mov	 ebx, eax
  0006e	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3f000000
  00076	0f 57 c9	 xorps	 xmm1, xmm1
$LN6@SetOneColo:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00079	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0007e	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00085	72 07		 jb	 SHORT $LN11@SetOneColo
  00087	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0008c	eb 18		 jmp	 SHORT $LN10@SetOneColo
$LN11@SetOneColo:
  0008e	0f 2f c8	 comiss	 xmm1, xmm0
  00091	72 04		 jb	 SHORT $LN9@SetOneColo
  00093	33 ff		 xor	 edi, edi
  00095	eb 0f		 jmp	 SHORT $LN10@SetOneColo
$LN9@SetOneColo:
  00097	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0009b	f3 0f 58 c4	 addss	 xmm0, xmm4
  0009f	e8 00 00 00 00	 call	 __ftol3
  000a4	8b f8		 mov	 edi, eax
$LN10@SetOneColo:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  000a6	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000ab	0f 57 c9	 xorps	 xmm1, xmm1
  000ae	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000b5	72 07		 jb	 SHORT $LN15@SetOneColo
  000b7	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  000bc	eb 23		 jmp	 SHORT $LN14@SetOneColo
$LN15@SetOneColo:
  000be	0f 2f c8	 comiss	 xmm1, xmm0
  000c1	72 04		 jb	 SHORT $LN13@SetOneColo
  000c3	33 f6		 xor	 esi, esi
  000c5	eb 1a		 jmp	 SHORT $LN14@SetOneColo
$LN13@SetOneColo:
  000c7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000d7	e8 00 00 00 00	 call	 __ftol3
  000dc	8b f0		 mov	 esi, eax
  000de	0f 57 c9	 xorps	 xmm1, xmm1
$LN14@SetOneColo:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  000e1	8b 45 08	 mov	 eax, DWORD PTR _rColor$[ebp]
  000e4	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  000e9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000f0	72 07		 jb	 SHORT $LN19@SetOneColo
  000f2	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  000f7	eb 1e		 jmp	 SHORT $LN18@SetOneColo
$LN19@SetOneColo:
  000f9	0f 2f c8	 comiss	 xmm1, xmm0
  000fc	72 04		 jb	 SHORT $LN17@SetOneColo
  000fe	33 c0		 xor	 eax, eax
  00100	eb 15		 jmp	 SHORT $LN18@SetOneColo
$LN17@SetOneColo:
  00102	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0010a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00112	e8 00 00 00 00	 call	 __ftol3
$LN18@SetOneColo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 850  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  00117	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0011d	c1 e0 08	 shl	 eax, 8
  00120	0b c3		 or	 eax, ebx
  00122	c1 e0 08	 shl	 eax, 8
  00125	0b c7		 or	 eax, edi
  00127	c1 e0 08	 shl	 eax, 8
  0012a	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 850  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, rColor);

  0012c	50		 push	 eax
  0012d	6a 3c		 push	 60			; 0000003cH
  0012f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 851  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013a	6a 03		 push	 3
  0013c	6a 02		 push	 2
  0013e	6a 00		 push	 0
  00140	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 852  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00145	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014b	6a 02		 push	 2
  0014d	6a 01		 push	 1
  0014f	6a 00		 push	 0
  00151	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx

; 853  : }

  00159	5d		 pop	 ebp
  0015a	c2 04 00	 ret	 4
?SetOneColorOperation@CScreen@@QAEXAAUD3DXCOLOR@@@Z ENDP ; CScreen::SetOneColorOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetBlendOperation@CScreen@@QAEXXZ
_TEXT	SEGMENT
?SetBlendOperation@CScreen@@QAEXXZ PROC			; CScreen::SetBlendOperation, COMDAT
; _this$ = ecx

; 834  : 	STATEMANAGER.SetTexture(0, NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 835  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 02		 push	 2
  00017	6a 02		 push	 2
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 836  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_CURRENT);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	6a 01		 push	 1
  00028	6a 03		 push	 3
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 837  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00037	6a 04		 push	 4
  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 838  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 02		 push	 2
  0004a	6a 05		 push	 5
  0004c	6a 00		 push	 0
  0004e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 839  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_CURRENT);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00059	6a 01		 push	 1
  0005b	6a 06		 push	 6
  0005d	6a 00		 push	 0
  0005f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 840  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006a	6a 04		 push	 4
  0006c	6a 04		 push	 4
  0006e	6a 00		 push	 0
  00070	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 841  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  00075	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007b	6a 01		 push	 1
  0007d	6a 01		 push	 1
  0007f	6a 01		 push	 1
  00081	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 842  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00086	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008c	6a 01		 push	 1
  0008e	6a 04		 push	 4
  00090	6a 01		 push	 1
  00092	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 843  : }

  00097	c3		 ret	 0
?SetBlendOperation@CScreen@@QAEXXZ ENDP			; CScreen::SetBlendOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetDiffuseOperation@CScreen@@QAEXXZ
_TEXT	SEGMENT
?SetDiffuseOperation@CScreen@@QAEXXZ PROC		; CScreen::SetDiffuseOperation, COMDAT
; _this$ = ecx

; 823  : 	STATEMANAGER.SetTexture(0, NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 824  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 02		 push	 2
  00017	6a 02		 push	 2
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 825  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	6a 00		 push	 0
  00028	6a 03		 push	 3
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 826  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00037	6a 04		 push	 4
  00039	6a 01		 push	 1
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 827  : 
; 828  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 01		 push	 1
  0004a	6a 01		 push	 1
  0004c	6a 01		 push	 1
  0004e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 829  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00059	6a 01		 push	 1
  0005b	6a 04		 push	 4
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 830  : }

  00064	c3		 ret	 0
?SetDiffuseOperation@CScreen@@QAEXXZ ENDP		; CScreen::SetDiffuseOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?SetColorOperation@CScreen@@QAEXXZ
_TEXT	SEGMENT
?SetColorOperation@CScreen@@QAEXXZ PROC			; CScreen::SetColorOperation, COMDAT
; _this$ = ecx

; 813  : 	STATEMANAGER.SetTexture(0, NULL);

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	6a 00		 push	 0
  00008	6a 00		 push	 0
  0000a	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 814  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_DIFFUSE);

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00015	6a 00		 push	 0
  00017	6a 02		 push	 2
  00019	6a 00		 push	 0
  0001b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 815  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_SELECTARG1);

  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00026	6a 02		 push	 2
  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 816  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00037	6a 01		 push	 1
  00039	6a 04		 push	 4
  0003b	6a 00		 push	 0
  0003d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 817  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP,	D3DTOP_DISABLE);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00048	6a 01		 push	 1
  0004a	6a 01		 push	 1
  0004c	6a 01		 push	 1
  0004e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 818  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP,	D3DTOP_DISABLE);

  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00059	6a 01		 push	 1
  0005b	6a 04		 push	 4
  0005d	6a 01		 push	 1
  0005f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 819  : }

  00064	c3		 ret	 0
?SetColorOperation@CScreen@@QAEXXZ ENDP			; CScreen::SetColorOperation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
_c_pmatWorld$ = 8					; size = 4
_fx$ = 12						; size = 4
_fy$ = 16						; size = 4
_fz$ = 20						; size = 4
_fRadius$ = 24						; size = 4
___formal$ = 28						; size = 4
_d3dFillMode$ = 32					; size = 4
?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z PROC ; CScreen::RenderCylinder, COMDAT
; _this$ = ecx

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 381  : 	RenderD3DXMesh(ms_lpCylinderMesh, c_pmatWorld, fx, fy, fz, fRadius, d3dFillMode);

  00003	ff 75 20	 push	 DWORD PTR _d3dFillMode$[ebp]
  00006	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  0000b	83 ec 10	 sub	 esp, 16			; 00000010H
  0000e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00014	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00019	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00024	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	ff 75 08	 push	 DWORD PTR _c_pmatWorld$[ebp]
  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpCylinderMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpCylinderMesh
  0003d	e8 00 00 00 00	 call	 ?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderD3DXMesh

; 382  : }

  00042	5d		 pop	 ebp
  00043	c2 1c 00	 ret	 28			; 0000001cH
?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z ENDP ; CScreen::RenderCylinder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
_c_pmatWorld$ = 8					; size = 4
_fx$ = 12						; size = 4
_fy$ = 16						; size = 4
_fz$ = 20						; size = 4
_fRadius$ = 24						; size = 4
_d3dFillMode$ = 28					; size = 4
?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z PROC ; CScreen::RenderSphere, COMDAT
; _this$ = ecx

; 375  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 376  : 	RenderD3DXMesh(ms_lpSphereMesh, c_pmatWorld, fx, fy, fz, fRadius, d3dFillMode);

  00003	ff 75 1c	 push	 DWORD PTR _d3dFillMode$[ebp]
  00006	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  0000b	83 ec 10	 sub	 esp, 16			; 00000010H
  0000e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00014	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00019	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0001f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00024	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0002f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00034	ff 75 08	 push	 DWORD PTR _c_pmatWorld$[ebp]
  00037	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_lpSphereMesh@CGraphicBase@@1PAUID3DXMesh@@A ; CGraphicBase::ms_lpSphereMesh
  0003d	e8 00 00 00 00	 call	 ?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderD3DXMesh

; 377  : }

  00042	5d		 pop	 ebp
  00043	c2 18 00	 ret	 24			; 00000018H
?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ENDP ; CScreen::RenderSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
_SetRenderingOption$ = -296				; size = 8
_lpVertexBuffer$ = -288					; size = 4
_lpIndexBuffer$ = -284					; size = 4
_d3dFillMode$GSCopy$1$ = -280				; size = 4
_lpMesh$GSCopy$1$ = -276				; size = 4
_matScaling$ = -272					; size = 64
_matTranslation$ = -208					; size = 64
$T2 = -144						; size = 64
_matWorld$ = -80					; size = 64
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_lpMesh$ = 8						; size = 4
_c_pmatWorld$ = 12					; size = 4
_fx$ = 16						; size = 4
_fy$ = 20						; size = 4
_fz$ = 24						; size = 4
_fRadius$ = 28						; size = 4
_d3dFillMode$ = 32					; size = 4
?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z PROC ; CScreen::RenderD3DXMesh, COMDAT
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 349  : 	D3DXMATRIX matTranslation;
; 350  : 	D3DXMATRIX matScaling;
; 351  : 
; 352  : 	D3DXMatrixTranslation(&matTranslation, fx, fy, fz);

  0002d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00032	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00035	8b 45 20	 mov	 eax, DWORD PTR _d3dFillMode$[ebp]
  00038	8b 7d 08	 mov	 edi, DWORD PTR _lpMesh$[ebp]
  0003b	8b 75 0c	 mov	 esi, DWORD PTR _c_pmatWorld$[ebp]
  0003e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00044	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00049	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0004f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00054	89 85 e8 fe ff
	ff		 mov	 DWORD PTR _d3dFillMode$GSCopy$1$[ebp], eax
  0005a	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  00060	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00065	50		 push	 eax
  00066	89 bd ec fe ff
	ff		 mov	 DWORD PTR _lpMesh$GSCopy$1$[ebp], edi
  0006c	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 353  : 	D3DXMatrixScaling(&matScaling, fRadius, fRadius, fRadius);

  00071	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _fRadius$[ebp]
  00076	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matScaling$[ebp]
  0007c	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0007f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00085	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00096	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matTranslation$[ebp]
  0009c	50		 push	 eax
  0009d	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matScaling$[ebp]
  000a3	50		 push	 eax
  000a4	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000aa	50		 push	 eax
  000ab	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 356  : 	matWorld = matScaling * matTranslation;

  000b0	0f 10 85 70 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T2[ebp]
  000b7	0f 11 45 b0	 movups	 XMMWORD PTR _matWorld$[ebp], xmm0
  000bb	0f 10 45 80	 movups	 xmm0, XMMWORD PTR $T2[ebp+16]
  000bf	0f 11 45 c0	 movups	 XMMWORD PTR _matWorld$[ebp+16], xmm0
  000c3	0f 10 45 90	 movups	 xmm0, XMMWORD PTR $T2[ebp+32]
  000c7	0f 11 45 d0	 movups	 XMMWORD PTR _matWorld$[ebp+32], xmm0
  000cb	0f 10 45 a0	 movups	 xmm0, XMMWORD PTR $T2[ebp+48]
  000cf	0f 11 45 e0	 movups	 XMMWORD PTR _matWorld$[ebp+48], xmm0

; 357  : 
; 358  : 	if (c_pmatWorld)

  000d3	85 f6		 test	 esi, esi
  000d5	74 0b		 je	 SHORT $LN2@RenderD3DX
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 817  :     D3DXMatrixMultiply(this, this, &mat);

  000d7	56		 push	 esi
  000d8	8d 45 b0	 lea	 eax, DWORD PTR _matWorld$[ebp]
  000db	50		 push	 eax
  000dc	50		 push	 eax
  000dd	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
$LN2@RenderD3DX:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 321  : 	CD3DXMeshRenderingOption(D3DFILLMODE d3dFillMode, const D3DXMATRIX & c_rmatWorld)

  000e2	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  000e8	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen

; 322  : 	{
; 323  : 		ms_lpd3dDevice->GetFVF(&m_dwVS);

  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000f3	8d 95 dc fe ff
	ff		 lea	 edx, DWORD PTR _SetRenderingOption$[ebp+4]
  000f9	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _SetRenderingOption$[ebp], OFFSET ??_7CD3DXMeshRenderingOption@@6B@
  00103	52		 push	 edx
  00104	51		 push	 ecx
  00105	8b 01		 mov	 eax, DWORD PTR [ecx]
  00107	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0010e	ff 90 68 01 00
	00		 call	 DWORD PTR [eax+360]

; 324  : 
; 325  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TFACTOR);

  00114	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011a	6a 03		 push	 3
  0011c	6a 02		 push	 2
  0011e	6a 00		 push	 0
  00120	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 326  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00125	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012b	6a 02		 push	 2
  0012d	6a 01		 push	 1
  0012f	6a 00		 push	 0
  00131	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 327  : 		STATEMANAGER.SaveTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00136	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013c	6a 01		 push	 1
  0013e	6a 04		 push	 4
  00140	6a 00		 push	 0
  00142	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 328  : 		STATEMANAGER.SetRenderState(D3DRS_FILLMODE, d3dFillMode);

  00147	ff b5 e8 fe ff
	ff		 push	 DWORD PTR _d3dFillMode$GSCopy$1$[ebp]
  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00153	6a 08		 push	 8
  00155	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 329  : 		STATEMANAGER.SaveTransform(D3DTS_WORLD, &c_rmatWorld);

  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00160	8d 45 b0	 lea	 eax, DWORD PTR _matWorld$[ebp]
  00163	50		 push	 eax
  00164	68 00 01 00 00	 push	 256			; 00000100H
  00169	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 330  : 
; 331  : 		STATEMANAGER.SetTexture(0, NULL);

  0016e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00174	6a 00		 push	 0
  00176	6a 00		 push	 0
  00178	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 332  : 		STATEMANAGER.SetTexture(1, NULL);

  0017d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00183	6a 00		 push	 0
  00185	6a 01		 push	 1
  00187	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 359  : 	{
; 360  : 		matWorld *= *c_pmatWorld;
; 361  : 	}
; 362  : 
; 363  : 	CD3DXMeshRenderingOption SetRenderingOption(d3dFillMode, matWorld);
; 364  : 	LPDIRECT3DINDEXBUFFER9 lpIndexBuffer;
; 365  : 	LPDIRECT3DVERTEXBUFFER9 lpVertexBuffer;
; 366  : 	lpMesh->GetIndexBuffer(&lpIndexBuffer);

  0018c	8b 07		 mov	 eax, DWORD PTR [edi]
  0018e	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR _lpIndexBuffer$[ebp]
  00194	51		 push	 ecx
  00195	57		 push	 edi
  00196	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  0019d	ff 50 38	 call	 DWORD PTR [eax+56]

; 367  : 	lpMesh->GetVertexBuffer(&lpVertexBuffer);

  001a0	8b 07		 mov	 eax, DWORD PTR [edi]
  001a2	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR _lpVertexBuffer$[ebp]
  001a8	51		 push	 ecx
  001a9	57		 push	 edi
  001aa	ff 50 34	 call	 DWORD PTR [eax+52]

; 368  : 	STATEMANAGER.SetFVF(lpMesh->GetFVF());

  001ad	8b 07		 mov	 eax, DWORD PTR [edi]
  001af	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b5	57		 push	 edi
  001b6	ff 50 18	 call	 DWORD PTR [eax+24]
  001b9	50		 push	 eax
  001ba	8b ce		 mov	 ecx, esi
  001bc	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 369  : 	STATEMANAGER.SetIndices(lpIndexBuffer, 0);

  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c7	6a 00		 push	 0
  001c9	ff b5 e4 fe ff
	ff		 push	 DWORD PTR _lpIndexBuffer$[ebp]
  001cf	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices

; 370  : 	STATEMANAGER.SetStreamSource(0, lpVertexBuffer, 24);

  001d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001da	6a 18		 push	 24			; 00000018H
  001dc	ff b5 e0 fe ff
	ff		 push	 DWORD PTR _lpVertexBuffer$[ebp]
  001e2	6a 00		 push	 0
  001e4	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource

; 371  : 	STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, lpMesh->GetNumVertices(), 0, lpMesh->GetNumFaces());

  001e9	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _lpMesh$GSCopy$1$[ebp]
  001ef	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f5	51		 push	 ecx
  001f6	8b 01		 mov	 eax, DWORD PTR [ecx]
  001f8	ff 50 10	 call	 DWORD PTR [eax+16]
  001fb	8b f0		 mov	 esi, eax
  001fd	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _lpMesh$GSCopy$1$[ebp]
  00203	50		 push	 eax
  00204	8b 10		 mov	 edx, DWORD PTR [eax]
  00206	ff 52 14	 call	 DWORD PTR [edx+20]
  00209	6a 00		 push	 0
  0020b	56		 push	 esi
  0020c	6a 00		 push	 0
  0020e	50		 push	 eax
  0020f	6a 00		 push	 0
  00211	6a 04		 push	 4
  00213	8b cf		 mov	 ecx, edi
  00215	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive

; 372  : }

  0021a	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  00220	e8 00 00 00 00	 call	 ??1CD3DXMeshRenderingOption@@UAE@XZ ; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
  00225	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00228	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022f	59		 pop	 ecx
  00230	5f		 pop	 edi
  00231	5e		 pop	 esi
  00232	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00235	33 cd		 xor	 ecx, ebp
  00237	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023c	8b e5		 mov	 esp, ebp
  0023e	5d		 pop	 ebp
  0023f	c2 1c 00	 ret	 28			; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$1:
  00000	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z$0:
  0000b	8d 8d d8 fe ff
	ff		 lea	 ecx, DWORD PTR _SetRenderingOption$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1CD3DXMeshRenderingOption@@UAE@XZ ; CD3DXMeshRenderingOption::~CD3DXMeshRenderingOption
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a d8 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-296]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderD3DXMesh@CScreen@@QAEXPAUID3DXMesh@@PBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ENDP ; CScreen::RenderD3DXMesh
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_xMin$ = 8						; size = 4
_yMin$ = 12						; size = 4
_xMax$ = 16						; size = 4
_yMax$ = 20						; size = 4
_xmajorStep$ = 24					; size = 4
_x$1$ = 28						; size = 4
_ymajorStep$ = 28					; size = 4
_x$2$ = 32						; size = 4
_xminorStep$ = 32					; size = 4
_y$2$ = 36						; size = 4
_y$1$ = 36						; size = 4
_yminorStep$ = 36					; size = 4
_zPos$ = 40						; size = 4
?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z PROC			; CScreen::DrawGrid, COMDAT
; _this$ = ecx

; 469  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 470  : 	xMin *= xminorStep;

  00003	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _xminorStep$[ebp]
  00008	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]

; 471  : 	xMax *= xminorStep;
; 472  : 	yMin *= yminorStep;

  0000d	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _yMin$[ebp]
  00012	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00016	56		 push	 esi

; 473  : 	yMax *= yminorStep;
; 474  : 	xmajorStep *= xminorStep;
; 475  : 	ymajorStep *= yminorStep;
; 476  : 
; 477  : 	float x, y;
; 478  : 
; 479  : 	SetDiffuseColor(0.5f, 0.5f, 0.5f);

  00017	83 ec 10	 sub	 esp, 16			; 00000010H
  0001a	8b f1		 mov	 esi, ecx
  0001c	f3 0f 11 45 08	 movss	 DWORD PTR _xMin$[ebp], xmm0
  00021	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  00026	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0002a	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  00032	c7 44 24 08 00
	00 00 3f	 mov	 DWORD PTR [esp+8], 1056964608 ; 3f000000H
  0003a	c7 44 24 04 00
	00 00 3f	 mov	 DWORD PTR [esp+4], 1056964608 ; 3f000000H
  00042	f3 0f 11 45 10	 movss	 DWORD PTR _xMax$[ebp], xmm0
  00047	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _yminorStep$[ebp]
  0004c	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00050	c7 04 24 00 00
	00 3f		 mov	 DWORD PTR [esp], 1056964608 ; 3f000000H
  00057	f3 0f 11 55 0c	 movss	 DWORD PTR _yMin$[ebp], xmm2
  0005c	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00061	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00065	f3 0f 11 55 14	 movss	 DWORD PTR _yMax$[ebp], xmm2
  0006a	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _xmajorStep$[ebp]
  0006f	f3 0f 59 d1	 mulss	 xmm2, xmm1
  00073	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _ymajorStep$[ebp]
  00078	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0007c	f3 0f 11 55 18	 movss	 DWORD PTR _xmajorStep$[ebp], xmm2
  00081	f3 0f 11 4d 1c	 movss	 DWORD PTR _ymajorStep$[ebp], xmm1
  00086	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 480  : 	DrawMinorGrid(xMin, yMin, xMax, yMax, xminorStep, yminorStep, zPos);

  0008b	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  00090	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00093	8b ce		 mov	 ecx, esi
  00095	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0009b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _yminorStep$[ebp]
  000a0	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000a6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _xminorStep$[ebp]
  000ab	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000b1	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _yMax$[ebp]
  000b6	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  000bc	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  000c1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000c7	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yMin$[ebp]
  000cc	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000d2	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  000d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000dc	e8 00 00 00 00	 call	 ?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z ; CScreen::DrawMinorGrid

; 481  : 
; 482  : 	SetDiffuseColor(0.7f, 0.7f, 0.7f);

  000e1	83 ec 10	 sub	 esp, 16			; 00000010H
  000e4	8b ce		 mov	 ecx, esi
  000e6	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  000ee	c7 44 24 08 33
	33 33 3f	 mov	 DWORD PTR [esp+8], 1060320051 ; 3f333333H
  000f6	c7 44 24 04 33
	33 33 3f	 mov	 DWORD PTR [esp+4], 1060320051 ; 3f333333H
  000fe	c7 04 24 33 33
	33 3f		 mov	 DWORD PTR [esp], 1060320051 ; 3f333333H
  00105	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	0f 57 c9	 xorps	 xmm1, xmm1

; 483  : 	for (y = 0.0f; y >= yMin; y -= ymajorStep)

  00110	0f 2f 45 0c	 comiss	 xmm0, DWORD PTR _yMin$[ebp]
  00114	f3 0f 11 45 20	 movss	 DWORD PTR _x$2$[ebp], xmm0
  00119	f3 0f 11 4d 24	 movss	 DWORD PTR _y$1$[ebp], xmm1
  0011e	72 4e		 jb	 SHORT $LN3@DrawGrid
$LL4@DrawGrid:

; 484  : 	{
; 485  : 		RenderLine2d(xMin, y, xMax, y, zPos);

  00120	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  00125	83 ec 14	 sub	 esp, 20			; 00000014H
  00128	8b ce		 mov	 ecx, esi
  0012a	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00130	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  00135	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0013b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00141	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  00146	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00156	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _y$1$[ebp]
  0015b	f3 0f 5c 4d 1c	 subss	 xmm1, DWORD PTR _ymajorStep$[ebp]
  00160	0f 2f 4d 0c	 comiss	 xmm1, DWORD PTR _yMin$[ebp]
  00164	f3 0f 11 4d 24	 movss	 DWORD PTR _y$1$[ebp], xmm1
  00169	73 b5		 jae	 SHORT $LL4@DrawGrid
  0016b	0f 57 c0	 xorps	 xmm0, xmm0
$LN3@DrawGrid:

; 486  : 	}
; 487  : 
; 488  : 	for (y = 0.0f; y <= yMax; y += ymajorStep)

  0016e	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00173	0f 57 c9	 xorps	 xmm1, xmm1
  00176	0f 2f d0	 comiss	 xmm2, xmm0
  00179	f3 0f 11 4d 24	 movss	 DWORD PTR _y$2$[ebp], xmm1
  0017e	72 52		 jb	 SHORT $LN6@DrawGrid
$LL7@DrawGrid:

; 489  : 	{
; 490  : 		RenderLine2d(xMin, y, xMax, y, zPos);

  00180	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  00185	83 ec 14	 sub	 esp, 20			; 00000014H
  00188	8b ce		 mov	 ecx, esi
  0018a	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00190	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  00195	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0019b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001a1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  001a6	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  001ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b1	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  001b6	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _y$2$[ebp]
  001bb	f3 0f 58 4d 1c	 addss	 xmm1, DWORD PTR _ymajorStep$[ebp]
  001c0	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  001c5	0f 2f d1	 comiss	 xmm2, xmm1
  001c8	f3 0f 11 4d 24	 movss	 DWORD PTR _y$2$[ebp], xmm1
  001cd	73 b1		 jae	 SHORT $LL7@DrawGrid
  001cf	0f 57 c0	 xorps	 xmm0, xmm0
$LN6@DrawGrid:

; 491  : 	}
; 492  : 
; 493  : 	for (x = 0.0f; x >= xMin; x -= xmajorStep)

  001d2	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _xMin$[ebp]
  001d6	0f 57 c9	 xorps	 xmm1, xmm1
  001d9	f3 0f 11 4d 1c	 movss	 DWORD PTR _x$1$[ebp], xmm1
  001de	72 4e		 jb	 SHORT $LN9@DrawGrid
$LL10@DrawGrid:

; 494  : 	{
; 495  : 		RenderLine2d(x, yMin, x, yMax, zPos);

  001e0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  001e5	83 ec 14	 sub	 esp, 20			; 00000014H
  001e8	8b ce		 mov	 ecx, esi
  001ea	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001f0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yMin$[ebp]
  001f5	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  001fb	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00201	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00207	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0020c	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00211	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _x$1$[ebp]
  00216	f3 0f 5c 4d 18	 subss	 xmm1, DWORD PTR _xmajorStep$[ebp]
  0021b	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00220	0f 2f 4d 08	 comiss	 xmm1, DWORD PTR _xMin$[ebp]
  00224	f3 0f 11 4d 1c	 movss	 DWORD PTR _x$1$[ebp], xmm1
  00229	73 b5		 jae	 SHORT $LL10@DrawGrid
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
$LN9@DrawGrid:

; 496  : 	}
; 497  : 
; 498  : 	for (x = 0.0f; x <= yMax; x += xmajorStep)

  0022e	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _yMax$[ebp]
  00233	0f 2f c8	 comiss	 xmm1, xmm0
  00236	72 52		 jb	 SHORT $LN12@DrawGrid
  00238	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@DrawGrid:

; 499  : 	{
; 500  : 		RenderLine2d(x, yMin, x, yMax, zPos);

  00240	f3 0f 10 55 28	 movss	 xmm2, DWORD PTR _zPos$[ebp]
  00245	83 ec 14	 sub	 esp, 20			; 00000014H
  00248	8b ce		 mov	 ecx, esi
  0024a	f3 0f 11 54 24
	10		 movss	 DWORD PTR [esp+16], xmm2
  00250	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  00256	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _yMin$[ebp]
  0025b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00261	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00267	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026c	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00271	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _x$2$[ebp]
  00276	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _xmajorStep$[ebp]
  0027b	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _yMax$[ebp]
  00280	0f 2f c8	 comiss	 xmm1, xmm0
  00283	f3 0f 11 45 20	 movss	 DWORD PTR _x$2$[ebp], xmm0
  00288	73 b6		 jae	 SHORT $LL13@DrawGrid
$LN12@DrawGrid:

; 501  : 	}
; 502  : 
; 503  : 	SetDiffuseColor(1.0f, 1.0f, 1.0f);

  0028a	83 ec 10	 sub	 esp, 16			; 00000010H
  0028d	8b ce		 mov	 ecx, esi
  0028f	c7 44 24 0c 00
	00 80 3f	 mov	 DWORD PTR [esp+12], 1065353216 ; 3f800000H
  00297	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  0029f	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  002a7	c7 04 24 00 00
	80 3f		 mov	 DWORD PTR [esp], 1065353216 ; 3f800000H
  002ae	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 504  : 	RenderLine2d(xMin, 0.0f, xMax, 0.0f, zPos);

  002b3	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  002b8	83 ec 14	 sub	 esp, 20			; 00000014H
  002bb	8b ce		 mov	 ecx, esi
  002bd	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002c3	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _xMax$[ebp]
  002c8	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  002d0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  002db	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d

; 505  : 	RenderLine2d(0.0f, yMin, 0.0f, yMax, zPos);

  002ed	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _zPos$[ebp]
  002f2	83 ec 14	 sub	 esp, 20			; 00000014H
  002f5	8b ce		 mov	 ecx, esi
  002f7	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002fd	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _yMax$[ebp]
  00302	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00308	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _yMin$[ebp]
  0030d	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  00315	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0031b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00322	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00327	5e		 pop	 esi

; 506  : }

  00328	5d		 pop	 ebp
  00329	c2 24 00	 ret	 36			; 00000024H
?DrawGrid@CScreen@@QAEXMMMMMMMMM@Z ENDP			; CScreen::DrawGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z
_TEXT	SEGMENT
_y$1$ = -4						; size = 4
_xMin$ = 8						; size = 4
_yMin$ = 12						; size = 4
_xMax$ = 16						; size = 4
_yMax$ = 20						; size = 4
_xminorStep$ = 24					; size = 4
_yminorStep$ = 28					; size = 4
_zPos$ = 32						; size = 4
?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z PROC		; CScreen::DrawMinorGrid, COMDAT
; _this$ = ecx

; 454  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 455  : 	float x, y;
; 456  : 
; 457  : 	for (y = yMin; y <= yMax; y += yminorStep)

  00004	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _yMin$[ebp]
  00009	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  0000e	0f 28 c3	 movaps	 xmm0, xmm3
  00011	0f 2f d3	 comiss	 xmm2, xmm3
  00014	56		 push	 esi
  00015	8b f1		 mov	 esi, ecx
  00017	f3 0f 11 5d fc	 movss	 DWORD PTR _y$1$[ebp], xmm3
  0001c	72 56		 jb	 SHORT $LN3@DrawMinorG
  0001e	66 90		 npad	 2
$LL4@DrawMinorG:

; 458  : 	{
; 459  : 		RenderLine2d(xMin, y, xMax, y, zPos);

  00020	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _zPos$[ebp]
  00025	83 ec 14	 sub	 esp, 20			; 00000014H
  00028	8b ce		 mov	 ecx, esi
  0002a	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  00030	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _xMax$[ebp]
  00035	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0003b	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00041	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00047	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  0004c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00051	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  00056	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _y$1$[ebp]
  0005b	f3 0f 58 45 1c	 addss	 xmm0, DWORD PTR _yminorStep$[ebp]
  00060	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  00065	0f 2f d0	 comiss	 xmm2, xmm0
  00068	f3 0f 11 45 fc	 movss	 DWORD PTR _y$1$[ebp], xmm0
  0006d	73 b1		 jae	 SHORT $LL4@DrawMinorG
  0006f	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _yMin$[ebp]
$LN3@DrawMinorG:

; 460  : 	}
; 461  : 
; 462  : 	for (x = xMin; x <= xMax; x += xminorStep)

  00074	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  00079	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _xMax$[ebp]
  0007e	0f 2f c8	 comiss	 xmm1, xmm0
  00081	72 4f		 jb	 SHORT $LN6@DrawMinorG
$LL7@DrawMinorG:

; 463  : 	{
; 464  : 		RenderLine2d(x, yMin, x, yMax, zPos);

  00083	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _zPos$[ebp]
  00088	83 ec 14	 sub	 esp, 20			; 00000014H
  0008b	8b ce		 mov	 ecx, esi
  0008d	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  00093	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00099	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0009f	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  000a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000aa	e8 00 00 00 00	 call	 ?RenderLine2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderLine2d
  000af	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _xMin$[ebp]
  000b4	f3 0f 58 45 18	 addss	 xmm0, DWORD PTR _xminorStep$[ebp]
  000b9	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _xMax$[ebp]
  000be	f3 0f 10 55 14	 movss	 xmm2, DWORD PTR _yMax$[ebp]
  000c3	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _yMin$[ebp]
  000c8	0f 2f c8	 comiss	 xmm1, xmm0
  000cb	f3 0f 11 45 08	 movss	 DWORD PTR _xMin$[ebp], xmm0
  000d0	73 b1		 jae	 SHORT $LL7@DrawMinorG
$LN6@DrawMinorG:
  000d2	5e		 pop	 esi

; 465  : 	}
; 466  : }

  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 1c 00	 ret	 28			; 0000001cH
?DrawMinorGrid@CScreen@@QAEXMMMMMMM@Z ENDP		; CScreen::DrawMinorGrid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z
_TEXT	SEGMENT
$T5 = -120						; size = 12
$T6 = -120						; size = 12
$T7 = -120						; size = 12
$T8 = -120						; size = 12
_Position$GSCopy$1$ = -108				; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_Position$ = 8						; size = 4
_Color$ = 12						; size = 4
?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z PROC ; CScreen::RenderBillboard, COMDAT
; _this$ = ecx

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 78	 sub	 esp, 120		; 00000078H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _Position$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00013	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 422  : {

  0001b	53		 push	 ebx
  0001c	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0001d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00022	8b 75 0c	 mov	 esi, DWORD PTR _Color$[ebp]

; 305  :     y = fy;

  00025	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0002a	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]

; 306  :     z = fz;

  0002e	f3 0f 11 45 90	 movss	 DWORD PTR $T8[ebp+8], xmm0

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00033	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00037	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 422  : {

  0003e	89 45 94	 mov	 DWORD PTR _Position$GSCopy$1$[ebp], eax

; 426  : 	vertices[0].position = TPosition(Position[0].x, Position[0].y, Position[0].z);

  00041	8b 45 90	 mov	 eax, DWORD PTR $T8[ebp+8]
  00044	57		 push	 edi
  00045	89 45 a4	 mov	 DWORD PTR _vertices$[ebp+8], eax
  00048	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0004b	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 426  : 	vertices[0].position = TPosition(Position[0].x, Position[0].y, Position[0].z);

  0004e	66 0f d6 55 9c	 movq	 QWORD PTR _vertices$[ebp], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00053	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  0005b	72 09		 jb	 SHORT $LN16@RenderBill
  0005d	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00064	eb 31		 jmp	 SHORT $LN15@RenderBill
$LN16@RenderBill:
  00066	0f 2f c8	 comiss	 xmm1, xmm0
  00069	72 09		 jb	 SHORT $LN14@RenderBill
  0006b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00072	eb 23		 jmp	 SHORT $LN15@RenderBill
$LN14@RenderBill:
  00074	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00078	f3 0f 58 c3	 addss	 xmm0, xmm3
  0007c	e8 00 00 00 00	 call	 __ftol3
  00081	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  00089	0f 57 c9	 xorps	 xmm1, xmm1
  0008c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  00094	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN15@RenderBill:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00097	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0009c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  000a3	72 07		 jb	 SHORT $LN20@RenderBill
  000a5	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  000aa	eb 18		 jmp	 SHORT $LN19@RenderBill
$LN20@RenderBill:
  000ac	0f 2f c8	 comiss	 xmm1, xmm0
  000af	72 04		 jb	 SHORT $LN18@RenderBill
  000b1	33 db		 xor	 ebx, ebx
  000b3	eb 0f		 jmp	 SHORT $LN19@RenderBill
$LN18@RenderBill:
  000b5	f3 0f 59 c2	 mulss	 xmm0, xmm2
  000b9	f3 0f 58 c3	 addss	 xmm0, xmm3
  000bd	e8 00 00 00 00	 call	 __ftol3
  000c2	8b d8		 mov	 ebx, eax
$LN19@RenderBill:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  000c4	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  000c9	0f 57 c0	 xorps	 xmm0, xmm0
  000cc	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  000d3	72 07		 jb	 SHORT $LN24@RenderBill
  000d5	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  000da	eb 26		 jmp	 SHORT $LN23@RenderBill
$LN24@RenderBill:
  000dc	0f 2f c1	 comiss	 xmm0, xmm1
  000df	72 04		 jb	 SHORT $LN22@RenderBill
  000e1	33 ff		 xor	 edi, edi
  000e3	eb 1d		 jmp	 SHORT $LN23@RenderBill
$LN22@RenderBill:
  000e5	0f 28 c1	 movaps	 xmm0, xmm1
  000e8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  000f0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  000f8	e8 00 00 00 00	 call	 __ftol3
  000fd	8b f8		 mov	 edi, eax
  000ff	0f 57 c0	 xorps	 xmm0, xmm0
$LN23@RenderBill:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00102	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  00107	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0010e	72 07		 jb	 SHORT $LN28@RenderBill
  00110	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00115	eb 21		 jmp	 SHORT $LN27@RenderBill
$LN28@RenderBill:
  00117	0f 2f c1	 comiss	 xmm0, xmm1
  0011a	72 04		 jb	 SHORT $LN26@RenderBill
  0011c	33 c0		 xor	 eax, eax
  0011e	eb 18		 jmp	 SHORT $LN27@RenderBill
$LN26@RenderBill:
  00120	0f 28 c1	 movaps	 xmm0, xmm1
  00123	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0012b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00133	e8 00 00 00 00	 call	 __ftol3
$LN27@RenderBill:

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00138	c1 e0 08	 shl	 eax, 8
  0013b	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  0013e	c1 e0 08	 shl	 eax, 8
  00141	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 428  : 	vertices[0].texCoord = TTextureCoordinate(0, 0);

  00143	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0014a	c1 e0 08	 shl	 eax, 8
  0014d	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 428  : 	vertices[0].texCoord = TTextureCoordinate(0, 0);

  0014f	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00156	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00159	8b 45 94	 mov	 eax, DWORD PTR _Position$GSCopy$1$[ebp]

; 306  :     z = fz;

  0015c	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00161	f3 0f 10 48 10	 movss	 xmm1, DWORD PTR [eax+16]
  00166	f3 0f 10 50 0c	 movss	 xmm2, DWORD PTR [eax+12]
  0016b	f3 0f 11 45 90	 movss	 DWORD PTR $T7[ebp+8], xmm0

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00170	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00174	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 430  : 	vertices[1].position = TPosition(Position[1].x, Position[1].y, Position[1].z);

  0017b	8b 45 90	 mov	 eax, DWORD PTR $T7[ebp+8]
  0017e	89 45 bc	 mov	 DWORD PTR _vertices$[ebp+32], eax
  00181	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00184	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 430  : 	vertices[1].position = TPosition(Position[1].x, Position[1].y, Position[1].z);

  00187	66 0f d6 55 b4	 movq	 QWORD PTR _vertices$[ebp+24], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0018c	72 09		 jb	 SHORT $LN38@RenderBill
  0018e	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00195	eb 29		 jmp	 SHORT $LN37@RenderBill
$LN38@RenderBill:
  00197	0f 2f c8	 comiss	 xmm1, xmm0
  0019a	72 09		 jb	 SHORT $LN36@RenderBill
  0019c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  001a3	eb 1b		 jmp	 SHORT $LN37@RenderBill
$LN36@RenderBill:
  001a5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001ad	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001b5	e8 00 00 00 00	 call	 __ftol3
  001ba	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
  001bd	0f 57 c9	 xorps	 xmm1, xmm1
$LN37@RenderBill:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  001c0	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001c5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001cc	72 07		 jb	 SHORT $LN42@RenderBill
  001ce	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  001d3	eb 20		 jmp	 SHORT $LN41@RenderBill
$LN42@RenderBill:
  001d5	0f 2f c8	 comiss	 xmm1, xmm0
  001d8	72 04		 jb	 SHORT $LN40@RenderBill
  001da	33 db		 xor	 ebx, ebx
  001dc	eb 17		 jmp	 SHORT $LN41@RenderBill
$LN40@RenderBill:
  001de	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001e6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001ee	e8 00 00 00 00	 call	 __ftol3
  001f3	8b d8		 mov	 ebx, eax
$LN41@RenderBill:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  001f5	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  001fa	0f 57 c0	 xorps	 xmm0, xmm0
  001fd	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00204	72 07		 jb	 SHORT $LN46@RenderBill
  00206	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0020b	eb 26		 jmp	 SHORT $LN45@RenderBill
$LN46@RenderBill:
  0020d	0f 2f c1	 comiss	 xmm0, xmm1
  00210	72 04		 jb	 SHORT $LN44@RenderBill
  00212	33 ff		 xor	 edi, edi
  00214	eb 1d		 jmp	 SHORT $LN45@RenderBill
$LN44@RenderBill:
  00216	0f 28 c1	 movaps	 xmm0, xmm1
  00219	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00221	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00229	e8 00 00 00 00	 call	 __ftol3
  0022e	8b f8		 mov	 edi, eax
  00230	0f 57 c0	 xorps	 xmm0, xmm0
$LN45@RenderBill:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00233	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  00238	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0023f	72 07		 jb	 SHORT $LN50@RenderBill
  00241	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00246	eb 21		 jmp	 SHORT $LN49@RenderBill
$LN50@RenderBill:
  00248	0f 2f c1	 comiss	 xmm0, xmm1
  0024b	72 04		 jb	 SHORT $LN48@RenderBill
  0024d	33 c0		 xor	 eax, eax
  0024f	eb 18		 jmp	 SHORT $LN49@RenderBill
$LN48@RenderBill:
  00251	0f 28 c1	 movaps	 xmm0, xmm1
  00254	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0025c	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00264	e8 00 00 00 00	 call	 __ftol3
$LN49@RenderBill:

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00269	c1 e0 08	 shl	 eax, 8
  0026c	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  0026f	c1 e0 08	 shl	 eax, 8
  00272	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 432  : 	vertices[1].texCoord = TTextureCoordinate(1, 0);

  00274	c7 45 c4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+40], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0027b	c1 e0 08	 shl	 eax, 8
  0027e	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 432  : 	vertices[1].texCoord = TTextureCoordinate(1, 0);

  00280	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  00287	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0028a	8b 45 94	 mov	 eax, DWORD PTR _Position$GSCopy$1$[ebp]

; 306  :     z = fz;

  0028d	f3 0f 10 40 20	 movss	 xmm0, DWORD PTR [eax+32]
  00292	f3 0f 10 48 1c	 movss	 xmm1, DWORD PTR [eax+28]
  00297	f3 0f 10 50 18	 movss	 xmm2, DWORD PTR [eax+24]
  0029c	f3 0f 11 45 90	 movss	 DWORD PTR $T6[ebp+8], xmm0

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  002a1	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  002a5	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 434  : 	vertices[2].position = TPosition(Position[2].x, Position[2].y, Position[2].z);

  002ac	8b 45 90	 mov	 eax, DWORD PTR $T6[ebp+8]
  002af	89 45 d4	 mov	 DWORD PTR _vertices$[ebp+56], eax
  002b2	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  002b5	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 434  : 	vertices[2].position = TPosition(Position[2].x, Position[2].y, Position[2].z);

  002b8	66 0f d6 55 cc	 movq	 QWORD PTR _vertices$[ebp+48], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  002bd	72 09		 jb	 SHORT $LN60@RenderBill
  002bf	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  002c6	eb 29		 jmp	 SHORT $LN59@RenderBill
$LN60@RenderBill:
  002c8	0f 2f c8	 comiss	 xmm1, xmm0
  002cb	72 09		 jb	 SHORT $LN58@RenderBill
  002cd	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  002d4	eb 1b		 jmp	 SHORT $LN59@RenderBill
$LN58@RenderBill:
  002d6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002de	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002e6	e8 00 00 00 00	 call	 __ftol3
  002eb	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
  002ee	0f 57 c9	 xorps	 xmm1, xmm1
$LN59@RenderBill:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002f1	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  002f6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  002fd	72 07		 jb	 SHORT $LN64@RenderBill
  002ff	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00304	eb 20		 jmp	 SHORT $LN63@RenderBill
$LN64@RenderBill:
  00306	0f 2f c8	 comiss	 xmm1, xmm0
  00309	72 04		 jb	 SHORT $LN62@RenderBill
  0030b	33 db		 xor	 ebx, ebx
  0030d	eb 17		 jmp	 SHORT $LN63@RenderBill
$LN62@RenderBill:
  0030f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00317	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0031f	e8 00 00 00 00	 call	 __ftol3
  00324	8b d8		 mov	 ebx, eax
$LN63@RenderBill:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00326	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  0032b	0f 57 c0	 xorps	 xmm0, xmm0
  0032e	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00335	72 07		 jb	 SHORT $LN68@RenderBill
  00337	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0033c	eb 26		 jmp	 SHORT $LN67@RenderBill
$LN68@RenderBill:
  0033e	0f 2f c1	 comiss	 xmm0, xmm1
  00341	72 04		 jb	 SHORT $LN66@RenderBill
  00343	33 ff		 xor	 edi, edi
  00345	eb 1d		 jmp	 SHORT $LN67@RenderBill
$LN66@RenderBill:
  00347	0f 28 c1	 movaps	 xmm0, xmm1
  0034a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00352	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0035a	e8 00 00 00 00	 call	 __ftol3
  0035f	8b f8		 mov	 edi, eax
  00361	0f 57 c0	 xorps	 xmm0, xmm0
$LN67@RenderBill:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00364	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  00369	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00370	72 07		 jb	 SHORT $LN72@RenderBill
  00372	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00377	eb 21		 jmp	 SHORT $LN71@RenderBill
$LN72@RenderBill:
  00379	0f 2f c1	 comiss	 xmm0, xmm1
  0037c	72 04		 jb	 SHORT $LN70@RenderBill
  0037e	33 c0		 xor	 eax, eax
  00380	eb 18		 jmp	 SHORT $LN71@RenderBill
$LN70@RenderBill:
  00382	0f 28 c1	 movaps	 xmm0, xmm1
  00385	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0038d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00395	e8 00 00 00 00	 call	 __ftol3
$LN71@RenderBill:

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0039a	c1 e0 08	 shl	 eax, 8
  0039d	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  003a0	c1 e0 08	 shl	 eax, 8
  003a3	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 436  : 	vertices[2].texCoord = TTextureCoordinate(0, 1);

  003a5	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003ac	c1 e0 08	 shl	 eax, 8
  003af	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 436  : 	vertices[2].texCoord = TTextureCoordinate(0, 1);

  003b1	c7 45 e0 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+68], 1065353216 ; 3f800000H
  003b8	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  003bb	8b 45 94	 mov	 eax, DWORD PTR _Position$GSCopy$1$[ebp]

; 306  :     z = fz;

  003be	f3 0f 10 40 2c	 movss	 xmm0, DWORD PTR [eax+44]
  003c3	f3 0f 10 48 28	 movss	 xmm1, DWORD PTR [eax+40]
  003c8	f3 0f 10 50 24	 movss	 xmm2, DWORD PTR [eax+36]
  003cd	f3 0f 11 45 90	 movss	 DWORD PTR $T5[ebp+8], xmm0

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003d2	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  003d6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 438  : 	vertices[3].position = TPosition(Position[3].x, Position[3].y, Position[3].z);

  003dd	8b 45 90	 mov	 eax, DWORD PTR $T5[ebp+8]
  003e0	89 45 ec	 mov	 DWORD PTR _vertices$[ebp+80], eax
  003e3	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003e6	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 438  : 	vertices[3].position = TPosition(Position[3].x, Position[3].y, Position[3].z);

  003e9	66 0f d6 55 e4	 movq	 QWORD PTR _vertices$[ebp+72], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003ee	72 07		 jb	 SHORT $LN82@RenderBill
  003f0	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  003f5	eb 23		 jmp	 SHORT $LN81@RenderBill
$LN82@RenderBill:
  003f7	0f 2f c8	 comiss	 xmm1, xmm0
  003fa	72 04		 jb	 SHORT $LN80@RenderBill
  003fc	33 db		 xor	 ebx, ebx
  003fe	eb 1a		 jmp	 SHORT $LN81@RenderBill
$LN80@RenderBill:
  00400	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00408	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00410	e8 00 00 00 00	 call	 __ftol3
  00415	8b d8		 mov	 ebx, eax
  00417	0f 57 c9	 xorps	 xmm1, xmm1
$LN81@RenderBill:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0041a	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0041f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00426	72 07		 jb	 SHORT $LN86@RenderBill
  00428	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0042d	eb 20		 jmp	 SHORT $LN85@RenderBill
$LN86@RenderBill:
  0042f	0f 2f c8	 comiss	 xmm1, xmm0
  00432	72 04		 jb	 SHORT $LN84@RenderBill
  00434	33 ff		 xor	 edi, edi
  00436	eb 17		 jmp	 SHORT $LN85@RenderBill
$LN84@RenderBill:
  00438	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00440	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00448	e8 00 00 00 00	 call	 __ftol3
  0044d	8b f8		 mov	 edi, eax
$LN85@RenderBill:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0044f	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00454	0f 57 c0	 xorps	 xmm0, xmm0
  00457	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0045e	72 07		 jb	 SHORT $LN90@RenderBill
  00460	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00465	eb 26		 jmp	 SHORT $LN89@RenderBill
$LN90@RenderBill:
  00467	0f 2f c1	 comiss	 xmm0, xmm1
  0046a	72 04		 jb	 SHORT $LN88@RenderBill
  0046c	33 f6		 xor	 esi, esi
  0046e	eb 1d		 jmp	 SHORT $LN89@RenderBill
$LN88@RenderBill:
  00470	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  00478	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00480	0f 28 c1	 movaps	 xmm0, xmm1
  00483	e8 00 00 00 00	 call	 __ftol3
  00488	8b f0		 mov	 esi, eax
  0048a	0f 57 c0	 xorps	 xmm0, xmm0
$LN89@RenderBill:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  0048d	8b 45 0c	 mov	 eax, DWORD PTR _Color$[ebp]
  00490	f3 0f 10 48 0c	 movss	 xmm1, DWORD PTR [eax+12]
  00495	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  0049c	72 07		 jb	 SHORT $LN94@RenderBill
  0049e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  004a3	eb 21		 jmp	 SHORT $LN93@RenderBill
$LN94@RenderBill:
  004a5	0f 2f c1	 comiss	 xmm0, xmm1
  004a8	72 04		 jb	 SHORT $LN92@RenderBill
  004aa	33 c0		 xor	 eax, eax
  004ac	eb 18		 jmp	 SHORT $LN93@RenderBill
$LN92@RenderBill:
  004ae	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  004b6	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  004be	0f 28 c1	 movaps	 xmm0, xmm1
  004c1	e8 00 00 00 00	 call	 __ftol3
$LN93@RenderBill:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 442  : 	STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  004c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004cc	c1 e0 08	 shl	 eax, 8
  004cf	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 440  : 	vertices[3].texCoord = TTextureCoordinate(1, 1);

  004d1	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+88], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004d8	c1 e0 08	 shl	 eax, 8
  004db	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 440  : 	vertices[3].texCoord = TTextureCoordinate(1, 1);

  004dd	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+92], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004e4	c1 e0 08	 shl	 eax, 8
  004e7	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 442  : 	STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  004e9	68 42 01 00 00	 push	 322			; 00000142H
  004ee	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax
  004f1	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 443  : 
; 444  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 445  : 	SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  004f6	6a 05		 push	 5
  004f8	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 446  : 	if (SetPDTStream(vertices, 4))

  004fd	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00500	6a 04		 push	 4
  00502	50		 push	 eax
  00503	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  00508	83 c4 0c	 add	 esp, 12			; 0000000cH
  0050b	5f		 pop	 edi
  0050c	5e		 pop	 esi
  0050d	5b		 pop	 ebx
  0050e	84 c0		 test	 al, al
  00510	74 17		 je	 SHORT $LN2@RenderBill

; 447  : 	{
; 448  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  00512	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00518	6a 00		 push	 0
  0051a	6a 02		 push	 2
  0051c	6a 00		 push	 0
  0051e	6a 04		 push	 4
  00520	6a 00		 push	 0
  00522	6a 04		 push	 4
  00524	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN2@RenderBill:

; 449  : 	}
; 450  : 	//OLD: STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, &ms_fillRectIdxVector[0], D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 451  : }

  00529	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0052c	33 cd		 xor	 ecx, ebp
  0052e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00533	8b e5		 mov	 esp, ebp
  00535	5d		 pop	 ebp
  00536	c2 08 00	 ret	 8
?RenderBillboard@CScreen@@QAEXPAUD3DXVECTOR3@@AAUD3DXCOLOR@@@Z ENDP ; CScreen::RenderBillboard
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
$T5 = -112						; size = 12
$T6 = -112						; size = 12
$T7 = -112						; size = 12
$T8 = -112						; size = 12
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
_su$ = 28						; size = 4
_sv$ = 32						; size = 4
_eu$ = 36						; size = 4
_ev$ = 40						; size = 4
?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z PROC		; CScreen::RenderTextureBox, COMDAT
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _sx$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00015	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _sy$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 390  : 	vertices[0].position = TPosition(sx, sy, z);

  0001a	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0001d	f3 0f 10 6d 18	 movss	 xmm5, DWORD PTR _z$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 385  : {

  00022	f3 0f 10 75 10	 movss	 xmm6, DWORD PTR _ex$[ebp]

; 391  : 	vertices[0].diffuse = ms_diffuseColor;
; 392  : 	vertices[0].texCoord = TTextureCoordinate(su, sv);

  00027	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _sv$[ebp]
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00032	f3 0f 10 5d 1c	 movss	 xmm3, DWORD PTR _su$[ebp]
  00037	0f 14 c2	 unpcklps xmm0, xmm2
  0003a	66 0f d6 45 9c	 movq	 QWORD PTR _vertices$[ebp], xmm0

; 394  : 	vertices[1].position = TPosition(ex, sy, z);

  0003f	0f 28 c6	 movaps	 xmm0, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00042	f3 0f 11 6d 98	 movss	 DWORD PTR $T8[ebp+8], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 390  : 	vertices[0].position = TPosition(sx, sy, z);

  00047	8b 45 98	 mov	 eax, DWORD PTR $T8[ebp+8]
  0004a	89 45 a4	 mov	 DWORD PTR _vertices$[ebp+8], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0004d	f3 0f 11 6d 98	 movss	 DWORD PTR $T7[ebp+8], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 394  : 	vertices[1].position = TPosition(ex, sy, z);

  00052	8b 45 98	 mov	 eax, DWORD PTR $T7[ebp+8]
  00055	0f 14 c2	 unpcklps xmm0, xmm2

; 395  : 	vertices[1].diffuse = ms_diffuseColor;
; 396  : 	vertices[1].texCoord = TTextureCoordinate(eu, sv);

  00058	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR _eu$[ebp]
  0005d	f3 0f 11 4d b0	 movss	 DWORD PTR _vertices$[ebp+20], xmm1
  00062	89 45 bc	 mov	 DWORD PTR _vertices$[ebp+32], eax
  00065	f3 0f 11 4d c8	 movss	 DWORD PTR _vertices$[ebp+44], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0006a	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _ey$[ebp]

; 306  :     z = fz;

  0006f	f3 0f 11 6d 98	 movss	 DWORD PTR $T6[ebp+8], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 398  : 	vertices[2].position = TPosition(sx, ey, z);

  00074	8b 45 98	 mov	 eax, DWORD PTR $T6[ebp+8]
  00077	66 0f d6 45 b4	 movq	 QWORD PTR _vertices$[ebp+24], xmm0

; 399  : 	vertices[2].diffuse = ms_diffuseColor;
; 400  : 	vertices[2].texCoord = TTextureCoordinate(su, ev);

  0007c	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _ev$[ebp]
  00081	89 4d a8	 mov	 DWORD PTR _vertices$[ebp+12], ecx
  00084	89 4d c0	 mov	 DWORD PTR _vertices$[ebp+36], ecx
  00087	0f 14 e1	 unpcklps xmm4, xmm1
  0008a	89 45 d4	 mov	 DWORD PTR _vertices$[ebp+56], eax
  0008d	89 4d d8	 mov	 DWORD PTR _vertices$[ebp+60], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00090	f3 0f 11 6d 98	 movss	 DWORD PTR $T5[ebp+8], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 402  : 	vertices[3].position = TPosition(ex, ey, z);

  00095	8b 45 98	 mov	 eax, DWORD PTR $T5[ebp+8]
  00098	0f 14 f1	 unpcklps xmm6, xmm1

; 403  : 	vertices[3].diffuse = ms_diffuseColor;

  0009b	89 4d f0	 mov	 DWORD PTR _vertices$[ebp+84], ecx

; 404  : 	vertices[3].texCoord = TTextureCoordinate(eu, ev);
; 405  : 
; 406  : #ifdef WORLD_EDITOR
; 407  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());
; 408  : #endif
; 409  : 	STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a4	68 42 01 00 00	 push	 322			; 00000142H
  000a9	f3 0f 11 5d ac	 movss	 DWORD PTR _vertices$[ebp+16], xmm3
  000ae	f3 0f 11 55 c4	 movss	 DWORD PTR _vertices$[ebp+40], xmm2
  000b3	66 0f d6 65 cc	 movq	 QWORD PTR _vertices$[ebp+48], xmm4
  000b8	f3 0f 11 5d dc	 movss	 DWORD PTR _vertices$[ebp+64], xmm3
  000bd	f3 0f 11 45 e0	 movss	 DWORD PTR _vertices$[ebp+68], xmm0
  000c2	66 0f d6 75 e4	 movq	 QWORD PTR _vertices$[ebp+72], xmm6
  000c7	89 45 ec	 mov	 DWORD PTR _vertices$[ebp+80], eax
  000ca	f3 0f 11 55 f4	 movss	 DWORD PTR _vertices$[ebp+88], xmm2
  000cf	f3 0f 11 45 f8	 movss	 DWORD PTR _vertices$[ebp+92], xmm0
  000d4	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 410  : 
; 411  : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 412  : 	SetDefaultIndexBuffer(DEFAULT_IB_FILL_RECT);

  000d9	6a 05		 push	 5
  000db	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 413  : 	if (SetPDTStream(vertices, 4))

  000e0	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  000e3	6a 04		 push	 4
  000e5	50		 push	 eax
  000e6	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ee	84 c0		 test	 al, al
  000f0	74 17		 je	 SHORT $LN2@RenderText

; 414  : 	{
; 415  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  000f2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f8	6a 00		 push	 0
  000fa	6a 02		 push	 2
  000fc	6a 00		 push	 0
  000fe	6a 04		 push	 4
  00100	6a 00		 push	 0
  00102	6a 04		 push	 4
  00104	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN2@RenderText:

; 416  : 	}
; 417  : 	//OLD: STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, &ms_fillRectIdxVector[0], D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 418  : }

  00109	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010c	33 cd		 xor	 ecx, ebp
  0010e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 24 00	 ret	 36			; 00000024H
?RenderTextureBox@CScreen@@QAEXMMMMMMMMM@Z ENDP		; CScreen::RenderTextureBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z
_TEXT	SEGMENT
$T1 = -328						; size = 12
$T2 = -316						; size = 12
_v3Center$$sroa$479$1$ = -304				; size = 4
_v3Center$$sroa$476$1$ = -300				; size = 4
_v3Center$$sroa$477$1$ = -296				; size = 4
_vertices$ = -292					; size = 192
_v3Vertex$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
_matRotation$ = 32					; size = 64
?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z PROC	; CScreen::RenderCube, COMDAT
; _this$ = ecx

; 196  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 48 01 00
	00		 sub	 esp, 328		; 00000148H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 197  : 	D3DXVECTOR3 v3Center = D3DXVECTOR3((sx + ex) * 0.5f, (sy + ey) * 0.5f, (sz + ez) * 0.5f);

  00013	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _sy$[ebp]
  00018	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0001d	0f 28 ca	 movaps	 xmm1, xmm2
  00020	f3 0f 10 65 18	 movss	 xmm4, DWORD PTR _ey$[ebp]
  00025	0f 28 fd	 movaps	 xmm7, xmm5
  00028	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _ex$[ebp]
  0002d	f3 0f 58 cc	 addss	 xmm1, xmm4
  00031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00039	f3 0f 58 fe	 addss	 xmm7, xmm6
  0003d	f3 0f 10 5d 1c	 movss	 xmm3, DWORD PTR _ez$[ebp]
  00042	53		 push	 ebx
  00043	56		 push	 esi
  00044	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00048	8d 75 9c	 lea	 esi, DWORD PTR _v3Vertex$[ebp]
  0004b	bb 08 00 00 00	 mov	 ebx, 8
  00050	f3 0f 59 f8	 mulss	 xmm7, xmm0
  00054	57		 push	 edi
  00055	f3 0f 11 8d d4
	fe ff ff	 movss	 DWORD PTR _v3Center$$sroa$476$1$[ebp], xmm1
  0005d	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR _vertices$[ebp+4]
  00063	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]
  00068	f3 0f 11 bd d8
	fe ff ff	 movss	 DWORD PTR _v3Center$$sroa$477$1$[ebp], xmm7
  00070	0f 28 f9	 movaps	 xmm7, xmm1
  00073	f3 0f 58 fb	 addss	 xmm7, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00077	f3 0f 11 6d 9c	 movss	 DWORD PTR _v3Vertex$[ebp], xmm5

; 305  :     y = fy;

  0007c	f3 0f 11 55 a0	 movss	 DWORD PTR _v3Vertex$[ebp+4], xmm2

; 306  :     z = fz;

  00081	f3 0f 11 4d a4	 movss	 DWORD PTR _v3Vertex$[ebp+8], xmm1

; 304  :     x = fx;

  00086	f3 0f 11 75 a8	 movss	 DWORD PTR _v3Vertex$[ebp+12], xmm6

; 305  :     y = fy;

  0008b	f3 0f 11 55 ac	 movss	 DWORD PTR _v3Vertex$[ebp+16], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 197  : 	D3DXVECTOR3 v3Center = D3DXVECTOR3((sx + ex) * 0.5f, (sy + ey) * 0.5f, (sz + ez) * 0.5f);

  00090	f3 0f 59 f8	 mulss	 xmm7, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00094	f3 0f 11 4d b0	 movss	 DWORD PTR _v3Vertex$[ebp+20], xmm1

; 304  :     x = fx;

  00099	f3 0f 11 6d b4	 movss	 DWORD PTR _v3Vertex$[ebp+24], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 197  : 	D3DXVECTOR3 v3Center = D3DXVECTOR3((sx + ex) * 0.5f, (sy + ey) * 0.5f, (sz + ez) * 0.5f);

  0009e	f3 0f 11 bd d0
	fe ff ff	 movss	 DWORD PTR _v3Center$$sroa$479$1$[ebp], xmm7
  000a6	f3 0f 10 bd d8
	fe ff ff	 movss	 xmm7, DWORD PTR _v3Center$$sroa$477$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  000ae	f3 0f 11 65 b8	 movss	 DWORD PTR _v3Vertex$[ebp+28], xmm4

; 306  :     z = fz;

  000b3	f3 0f 11 4d bc	 movss	 DWORD PTR _v3Vertex$[ebp+32], xmm1

; 304  :     x = fx;

  000b8	f3 0f 11 75 c0	 movss	 DWORD PTR _v3Vertex$[ebp+36], xmm6

; 305  :     y = fy;

  000bd	f3 0f 11 65 c4	 movss	 DWORD PTR _v3Vertex$[ebp+40], xmm4

; 306  :     z = fz;

  000c2	f3 0f 11 4d c8	 movss	 DWORD PTR _v3Vertex$[ebp+44], xmm1

; 304  :     x = fx;

  000c7	f3 0f 11 6d cc	 movss	 DWORD PTR _v3Vertex$[ebp+48], xmm5

; 305  :     y = fy;

  000cc	f3 0f 11 55 d0	 movss	 DWORD PTR _v3Vertex$[ebp+52], xmm2

; 306  :     z = fz;

  000d1	f3 0f 11 5d d4	 movss	 DWORD PTR _v3Vertex$[ebp+56], xmm3

; 304  :     x = fx;

  000d6	f3 0f 11 75 d8	 movss	 DWORD PTR _v3Vertex$[ebp+60], xmm6

; 305  :     y = fy;

  000db	f3 0f 11 55 dc	 movss	 DWORD PTR _v3Vertex$[ebp+64], xmm2

; 306  :     z = fz;

  000e0	f3 0f 11 5d e0	 movss	 DWORD PTR _v3Vertex$[ebp+68], xmm3

; 304  :     x = fx;

  000e5	f3 0f 11 6d e4	 movss	 DWORD PTR _v3Vertex$[ebp+72], xmm5

; 305  :     y = fy;

  000ea	f3 0f 11 65 e8	 movss	 DWORD PTR _v3Vertex$[ebp+76], xmm4

; 306  :     z = fz;

  000ef	f3 0f 11 5d ec	 movss	 DWORD PTR _v3Vertex$[ebp+80], xmm3

; 304  :     x = fx;

  000f4	f3 0f 11 75 f0	 movss	 DWORD PTR _v3Vertex$[ebp+84], xmm6

; 305  :     y = fy;

  000f9	f3 0f 11 65 f4	 movss	 DWORD PTR _v3Vertex$[ebp+88], xmm4

; 306  :     z = fz;

  000fe	f3 0f 11 5d f8	 movss	 DWORD PTR _v3Vertex$[ebp+92], xmm3
$LL4@RenderCube:

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00103	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]
  00107	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0010c	f3 0f 5c d7	 subss	 xmm2, xmm7
  00110	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00115	f3 0f 5c 8d d4
	fe ff ff	 subss	 xmm1, DWORD PTR _v3Center$$sroa$476$1$[ebp]
  0011d	f3 0f 5c 85 d0
	fe ff ff	 subss	 xmm0, DWORD PTR _v3Center$$sroa$479$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 213  : 		v3Vertex[i] = v3Vertex[i] - v3Center;

  00125	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00128	f3 0f 11 85 cc
	fe ff ff	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 213  : 		v3Vertex[i] = v3Vertex[i] - v3Center;

  00130	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp+8]
  00136	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  0013a	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 214  : 		D3DXVec3TransformCoord(&v3Vertex[i], &v3Vertex[i], &matRotation);

  0013d	8d 45 20	 lea	 eax, DWORD PTR _matRotation$[ebp]
  00140	50		 push	 eax
  00141	56		 push	 esi
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00148	f3 0f 10 bd d8
	fe ff ff	 movss	 xmm7, DWORD PTR _v3Center$$sroa$477$1$[ebp]
  00150	f3 0f 10 8d d4
	fe ff ff	 movss	 xmm1, DWORD PTR _v3Center$$sroa$476$1$[ebp]
  00158	0f 28 d7	 movaps	 xmm2, xmm7
  0015b	f3 0f 58 16	 addss	 xmm2, DWORD PTR [esi]
  0015f	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00164	f3 0f 10 85 d0
	fe ff ff	 movss	 xmm0, DWORD PTR _v3Center$$sroa$479$1$[ebp]
  0016c	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 220  : 		vertices[i].u = 0.0f;

  00171	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0

; 221  : 		vertices[i].v = 0.0f;

  00178	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  0017f	0f 14 d1	 unpcklps xmm2, xmm1
  00182	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00186	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 215  : 		v3Vertex[i] = v3Vertex[i] + v3Center;

  0018e	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR $T1[ebp+8]
  00194	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 216  : 		vertices[i].px = v3Vertex[i].x;

  00197	8b 06		 mov	 eax, DWORD PTR [esi]
  00199	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 217  : 		vertices[i].py = v3Vertex[i].y;

  0019c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019f	89 07		 mov	 DWORD PTR [edi], eax

; 218  : 		vertices[i].pz = v3Vertex[i].z;

  001a1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001a4	83 c6 0c	 add	 esi, 12			; 0000000cH
  001a7	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 219  : 		vertices[i].diffuse = ms_diffuseColor;

  001aa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  001af	89 47 08	 mov	 DWORD PTR [edi+8], eax
  001b2	83 c7 18	 add	 edi, 24			; 00000018H
  001b5	83 eb 01	 sub	 ebx, 1
  001b8	0f 85 45 ff ff
	ff		 jne	 $LL4@RenderCube

; 222  : 	}
; 223  : 
; 224  : 	if (SetPDTStream(vertices, 8))

  001be	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  001c4	6a 08		 push	 8
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  001cc	83 c4 08	 add	 esp, 8
  001cf	84 c0		 test	 al, al
  001d1	74 67		 je	 SHORT $LN5@RenderCube

; 225  : 	{
; 226  : 		STATEMANAGER.SetTexture(0, NULL);

  001d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d9	53		 push	 ebx
  001da	53		 push	 ebx
  001db	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 227  : 		STATEMANAGER.SetTexture(1, NULL);

  001e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001e6	53		 push	 ebx
  001e7	6a 01		 push	 1
  001e9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 228  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  001ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f4	68 42 01 00 00	 push	 322			; 00000142H
  001f9	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 229  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001fe	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  00203	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00209	50		 push	 eax
  0020a	8b 10		 mov	 edx, DWORD PTR [eax]
  0020c	ff 52 44	 call	 DWORD PTR [edx+68]
  0020f	50		 push	 eax
  00210	68 00 01 00 00	 push	 256			; 00000100H
  00215	8b ce		 mov	 ecx, esi
  00217	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 230  : 
; 231  : 		SetDefaultIndexBuffer(DEFAULT_IB_FILL_CUBE);

  0021c	6a 06		 push	 6
  0021e	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 232  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 8, 0, 4 * 3);

  00223	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00229	83 c4 04	 add	 esp, 4
  0022c	53		 push	 ebx
  0022d	6a 0c		 push	 12			; 0000000cH
  0022f	53		 push	 ebx
  00230	6a 08		 push	 8
  00232	53		 push	 ebx
  00233	6a 04		 push	 4
  00235	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN5@RenderCube:

; 233  : 	}
; 234  : }

  0023a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0023d	5f		 pop	 edi
  0023e	5e		 pop	 esi
  0023f	33 cd		 xor	 ecx, ebp
  00241	5b		 pop	 ebx
  00242	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00247	8b e5		 mov	 esp, ebp
  00249	5d		 pop	 ebp
  0024a	c2 58 00	 ret	 88			; 00000058H
?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z ENDP	; CScreen::RenderCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCube@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -196					; size = 192
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderCube@CScreen@@QAEXMMMMMM@Z PROC			; CScreen::RenderCube, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 170  : 	SPDTVertexRaw vertices[8] =
; 171  : 	{
; 172  : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f  },

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00018	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0001d	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00022	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]

; 173  : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f  },

  00027	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _ex$[ebp]

; 174  : 		{ sx, ey, sz, ms_diffuseColor, 0.0f, 0.0f  },

  0002c	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _ey$[ebp]

; 175  : 		{ ex, ey, sz, ms_diffuseColor, 0.0f, 0.0f  },
; 176  : 		{ sx, sy, ez, ms_diffuseColor, 0.0f, 0.0f  },

  00031	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00036	89 85 48 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+12], eax
  0003c	89 85 60 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+36], eax
  00042	89 85 78 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+60], eax
  00048	89 45 90	 mov	 DWORD PTR _vertices$[ebp+84], eax
  0004b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+108], eax

; 177  : 		{ ex, sy, ez, ms_diffuseColor, 0.0f, 0.0f  },

  0004e	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+132], eax

; 178  : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f  },

  00051	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+156], eax

; 179  : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f  },

  00054	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+180], eax

; 180  : 	};
; 181  : 
; 182  : 
; 183  : 	if (SetPDTStream(vertices, 8))

  00057	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  0005d	6a 08		 push	 8
  0005f	50		 push	 eax
  00060	f3 0f 11 ad 3c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp], xmm5
  00068	f3 0f 11 9d 40
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+4], xmm3
  00070	f3 0f 11 8d 44
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+8], xmm1
  00078	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+16], 0
  00082	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+20], 0
  0008c	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+24], xmm4
  00094	f3 0f 11 9d 58
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  0009c	f3 0f 11 8d 5c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+32], xmm1
  000a4	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+40], 0
  000ae	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+44], 0
  000b8	f3 0f 11 ad 6c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+48], xmm5
  000c0	f3 0f 11 95 70
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  000c8	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+56], xmm1
  000d0	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+64], 0
  000da	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000e1	f3 0f 11 65 84	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  000e6	f3 0f 11 55 88	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
  000eb	f3 0f 11 4d 8c	 movss	 DWORD PTR _vertices$[ebp+80], xmm1
  000f0	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000f7	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000fe	f3 0f 11 6d 9c	 movss	 DWORD PTR _vertices$[ebp+96], xmm5
  00103	f3 0f 11 5d a0	 movss	 DWORD PTR _vertices$[ebp+100], xmm3
  00108	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+104], xmm0
  0010d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+112], 0
  00114	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+116], 0
  0011b	f3 0f 11 65 b4	 movss	 DWORD PTR _vertices$[ebp+120], xmm4
  00120	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+124], xmm3
  00125	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+128], xmm0
  0012a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+136], 0
  00131	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+140], 0
  00138	f3 0f 11 6d cc	 movss	 DWORD PTR _vertices$[ebp+144], xmm5
  0013d	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+148], xmm2
  00142	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+152], xmm0
  00147	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+160], 0
  0014e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+164], 0
  00155	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+168], xmm4
  0015a	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+172], xmm2
  0015f	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+176], xmm0
  00164	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+184], 0
  0016b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+188], 0
  00172	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  00177	83 c4 08	 add	 esp, 8
  0017a	84 c0		 test	 al, al
  0017c	74 6f		 je	 SHORT $LN2@RenderCube

; 184  : 	{
; 185  : 		STATEMANAGER.SetTexture(0, NULL);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00184	56		 push	 esi
  00185	6a 00		 push	 0
  00187	6a 00		 push	 0
  00189	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 186  : 		STATEMANAGER.SetTexture(1, NULL);

  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00194	6a 00		 push	 0
  00196	6a 01		 push	 1
  00198	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 187  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  0019d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a3	68 42 01 00 00	 push	 322			; 00000142H
  001a8	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 188  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  001b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b8	50		 push	 eax
  001b9	8b 10		 mov	 edx, DWORD PTR [eax]
  001bb	ff 52 44	 call	 DWORD PTR [edx+68]
  001be	50		 push	 eax
  001bf	68 00 01 00 00	 push	 256			; 00000100H
  001c4	8b ce		 mov	 ecx, esi
  001c6	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 189  : 
; 190  : 		SetDefaultIndexBuffer(DEFAULT_IB_FILL_CUBE);

  001cb	6a 06		 push	 6
  001cd	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 191  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 8, 0, 4 * 3);

  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d8	83 c4 04	 add	 esp, 4
  001db	6a 00		 push	 0
  001dd	6a 0c		 push	 12			; 0000000cH
  001df	6a 00		 push	 0
  001e1	6a 08		 push	 8
  001e3	6a 00		 push	 0
  001e5	6a 04		 push	 4
  001e7	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
  001ec	5e		 pop	 esi
$LN2@RenderCube:

; 192  : 	}
; 193  : }

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	33 cd		 xor	 ecx, ebp
  001f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 18 00	 ret	 24			; 00000018H
?RenderCube@CScreen@@QAEXMMMMMM@Z ENDP			; CScreen::RenderCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderLineCube@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -196					; size = 192
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderLineCube@CScreen@@QAEXMMMMMM@Z PROC		; CScreen::RenderLineCube, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 143  : 	SPDTVertexRaw vertices[8] =
; 144  : 	{
; 145  : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00018	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0001d	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00022	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]

; 146  : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00027	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _ex$[ebp]

; 147  : 		{ sx, ey, sz, ms_diffuseColor, 0.0f, 0.0f },

  0002c	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _ey$[ebp]

; 148  : 		{ ex, ey, sz, ms_diffuseColor, 0.0f, 0.0f },
; 149  : 		{ sx, sy, ez, ms_diffuseColor, 0.0f, 0.0f },

  00031	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00036	89 85 48 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+12], eax
  0003c	89 85 60 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+36], eax
  00042	89 85 78 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+60], eax
  00048	89 45 90	 mov	 DWORD PTR _vertices$[ebp+84], eax
  0004b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+108], eax

; 150  : 		{ ex, sy, ez, ms_diffuseColor, 0.0f, 0.0f },

  0004e	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+132], eax

; 151  : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00051	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+156], eax

; 152  : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00054	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+180], eax

; 153  : 	};
; 154  : 
; 155  : 
; 156  : 	if (SetPDTStream(vertices, 8))

  00057	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  0005d	6a 08		 push	 8
  0005f	50		 push	 eax
  00060	f3 0f 11 ad 3c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp], xmm5
  00068	f3 0f 11 9d 40
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+4], xmm3
  00070	f3 0f 11 8d 44
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+8], xmm1
  00078	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+16], 0
  00082	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+20], 0
  0008c	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+24], xmm4
  00094	f3 0f 11 9d 58
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  0009c	f3 0f 11 8d 5c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+32], xmm1
  000a4	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+40], 0
  000ae	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+44], 0
  000b8	f3 0f 11 ad 6c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+48], xmm5
  000c0	f3 0f 11 95 70
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  000c8	f3 0f 11 8d 74
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+56], xmm1
  000d0	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+64], 0
  000da	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000e1	f3 0f 11 65 84	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  000e6	f3 0f 11 55 88	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
  000eb	f3 0f 11 4d 8c	 movss	 DWORD PTR _vertices$[ebp+80], xmm1
  000f0	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000f7	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000fe	f3 0f 11 6d 9c	 movss	 DWORD PTR _vertices$[ebp+96], xmm5
  00103	f3 0f 11 5d a0	 movss	 DWORD PTR _vertices$[ebp+100], xmm3
  00108	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+104], xmm0
  0010d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+112], 0
  00114	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+116], 0
  0011b	f3 0f 11 65 b4	 movss	 DWORD PTR _vertices$[ebp+120], xmm4
  00120	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+124], xmm3
  00125	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+128], xmm0
  0012a	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+136], 0
  00131	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+140], 0
  00138	f3 0f 11 6d cc	 movss	 DWORD PTR _vertices$[ebp+144], xmm5
  0013d	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+148], xmm2
  00142	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+152], xmm0
  00147	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+160], 0
  0014e	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+164], 0
  00155	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+168], xmm4
  0015a	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+172], xmm2
  0015f	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+176], xmm0
  00164	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+184], 0
  0016b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+188], 0
  00172	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  00177	83 c4 08	 add	 esp, 8
  0017a	84 c0		 test	 al, al
  0017c	74 6f		 je	 SHORT $LN2@RenderLine

; 157  : 	{
; 158  : 		STATEMANAGER.SetTexture(0, NULL);

  0017e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00184	56		 push	 esi
  00185	6a 00		 push	 0
  00187	6a 00		 push	 0
  00189	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 159  : 		STATEMANAGER.SetTexture(1, NULL);

  0018e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00194	6a 00		 push	 0
  00196	6a 01		 push	 1
  00198	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 160  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  0019d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a3	68 42 01 00 00	 push	 322			; 00000142H
  001a8	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 161  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, ms_lpd3dMatStack->GetTop());

  001ad	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dMatStack@CGraphicBase@@1PAUID3DXMatrixStack@@A ; CGraphicBase::ms_lpd3dMatStack
  001b2	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b8	50		 push	 eax
  001b9	8b 10		 mov	 edx, DWORD PTR [eax]
  001bb	ff 52 44	 call	 DWORD PTR [edx+68]
  001be	50		 push	 eax
  001bf	68 00 01 00 00	 push	 256			; 00000100H
  001c4	8b ce		 mov	 ecx, esi
  001c6	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 162  : 		SetDefaultIndexBuffer(DEFAULT_IB_LINE_CUBE);

  001cb	6a 03		 push	 3
  001cd	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 163  : 
; 164  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_LINELIST, 0, 8, 0, 4 * 3);

  001d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001d8	83 c4 04	 add	 esp, 4
  001db	6a 00		 push	 0
  001dd	6a 0c		 push	 12			; 0000000cH
  001df	6a 00		 push	 0
  001e1	6a 08		 push	 8
  001e3	6a 00		 push	 0
  001e5	6a 02		 push	 2
  001e7	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
  001ec	5e		 pop	 esi
$LN2@RenderLine:

; 165  : 	}
; 166  : }

  001ed	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f0	33 cd		 xor	 ecx, ebp
  001f2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c2 18 00	 ret	 24			; 00000018H
?RenderLineCube@CScreen@@QAEXMMMMMM@Z ENDP		; CScreen::RenderLineCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
_dwStartColor$ = 32					; size = 4
_dwEndColor$ = 36					; size = 4
?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z PROC	; CScreen::RenderGradationBar3d, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 120  : 	assert(ms_lpd3dDevice != NULL);
; 121  : 	if (sx == ex) { return; }

  00010	f3 0f 10 55 08	 movss	 xmm2, DWORD PTR _sx$[ebp]
  00015	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _ex$[ebp]
  0001a	0f 2e d3	 ucomiss xmm2, xmm3
  0001d	9f		 lahf
  0001e	f6 c4 44	 test	 ah, 68			; 00000044H
  00021	0f 8b f8 00 00
	00		 jnp	 $LN4@RenderGrad

; 122  : 	if (sy == ey) { return; }

  00027	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _sy$[ebp]
  0002c	f3 0f 10 6d 18	 movss	 xmm5, DWORD PTR _ey$[ebp]
  00031	0f 2e e5	 ucomiss xmm4, xmm5
  00034	9f		 lahf
  00035	f6 c4 44	 test	 ah, 68			; 00000044H
  00038	0f 8b e1 00 00
	00		 jnp	 $LN4@RenderGrad

; 123  : 
; 124  : 	SPDTVertexRaw vertices[4] =
; 125  : 	{
; 126  : 		{ sx, sy, sz, dwStartColor, 0.0f, 0.0f },
; 127  : 		{ sx, ey, ez, dwEndColor, 0.0f, 0.0f },

  0003e	8b 45 24	 mov	 eax, DWORD PTR _dwEndColor$[ebp]
  00041	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _sz$[ebp]
  00046	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  0004b	8b 4d 20	 mov	 ecx, DWORD PTR _dwStartColor$[ebp]
  0004e	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 128  : 		{ ex, sy, sz, dwStartColor, 0.0f, 0.0f },
; 129  : 		{ ex, ey, ez, dwEndColor, 0.0f, 0.0f },

  00051	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 130  : 	};
; 131  : 
; 132  : 	if (SetPDTStream(vertices, 4))

  00054	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00057	6a 04		 push	 4
  00059	50		 push	 eax
  0005a	f3 0f 11 55 9c	 movss	 DWORD PTR _vertices$[ebp], xmm2
  0005f	f3 0f 11 65 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm4
  00064	f3 0f 11 4d a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm1
  00069	89 4d a8	 mov	 DWORD PTR _vertices$[ebp+12], ecx
  0006c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  00073	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  0007a	f3 0f 11 55 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm2
  0007f	f3 0f 11 6d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm5
  00084	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm0
  00089	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  00090	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  00097	f3 0f 11 5d cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm3
  0009c	f3 0f 11 65 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm4
  000a1	f3 0f 11 4d d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm1
  000a6	89 4d d8	 mov	 DWORD PTR _vertices$[ebp+60], ecx
  000a9	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  000b0	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000b7	f3 0f 11 5d e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm3
  000bc	f3 0f 11 6d e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm5
  000c1	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
  000c6	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000cd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000d4	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000d9	83 c4 08	 add	 esp, 8
  000dc	84 c0		 test	 al, al
  000de	74 3f		 je	 SHORT $LN4@RenderGrad

; 133  : 	{
; 134  : 		STATEMANAGER.SetTexture(0, NULL);

  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 135  : 		STATEMANAGER.SetTexture(1, NULL);

  000ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f5	6a 00		 push	 0
  000f7	6a 01		 push	 1
  000f9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 136  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00104	68 42 01 00 00	 push	 322			; 00000142H
  00109	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 137  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  0010e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00114	6a 02		 push	 2
  00116	6a 00		 push	 0
  00118	6a 05		 push	 5
  0011a	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN4@RenderGrad:

; 138  : 	}
; 139  : }

  0011f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00122	33 cd		 xor	 ecx, ebp
  00124	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c2 20 00	 ret	 32			; 00000020H
?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z ENDP	; CScreen::RenderGradationBar3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_c_pv3Positions$ = 8					; size = 4
?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z PROC	; CScreen::RenderBar3d, COMDAT
; _this$ = ecx

; 97   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 4d 08	 mov	 ecx, DWORD PTR _c_pv3Positions$[ebp]

; 98   : 	assert(ms_lpd3dDevice != NULL);
; 99   : 
; 100  : 	SPDTVertexRaw vertices[4] =
; 101  : 	{
; 102  : 		{ c_pv3Positions[0].x, c_pv3Positions[0].y, c_pv3Positions[0].z, ms_diffuseColor, 0.0f, 0.0f },

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00018	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax

; 103  : 		{ c_pv3Positions[2].x, c_pv3Positions[2].y, c_pv3Positions[2].z, ms_diffuseColor, 0.0f, 0.0f },

  0001b	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
  0001e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  00022	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0
  00027	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  0002c	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  00031	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00036	f3 0f 11 45 a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm0
  0003b	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00040	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0
  00045	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  0004a	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  0004f	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [ecx+32]
  00054	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm0

; 104  : 		{ c_pv3Positions[1].x, c_pv3Positions[1].y, c_pv3Positions[1].z, ms_diffuseColor, 0.0f, 0.0f },

  00059	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  0005e	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  00063	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00068	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0
  0006d	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  00072	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm0

; 105  : 		{ c_pv3Positions[3].x, c_pv3Positions[3].y, c_pv3Positions[3].z, ms_diffuseColor, 0.0f, 0.0f },

  00077	f3 0f 10 41 24	 movss	 xmm0, DWORD PTR [ecx+36]
  0007c	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0
  00081	f3 0f 10 41 28	 movss	 xmm0, DWORD PTR [ecx+40]
  00086	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax
  00089	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 106  : 	};
; 107  : 
; 108  : 
; 109  : 	if (SetPDTStream(vertices, 4))

  0008c	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0008f	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0
  00094	f3 0f 10 41 2c	 movss	 xmm0, DWORD PTR [ecx+44]
  00099	6a 04		 push	 4
  0009b	50		 push	 eax
  0009c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  000a3	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  000aa	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  000b1	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  000b8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  000bf	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  000c6	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
  000cb	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000d2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000d9	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000de	83 c4 08	 add	 esp, 8
  000e1	84 c0		 test	 al, al
  000e3	74 3f		 je	 SHORT $LN2@RenderBar3

; 110  : 	{
; 111  : 		STATEMANAGER.SetTexture(0, NULL);

  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000eb	6a 00		 push	 0
  000ed	6a 00		 push	 0
  000ef	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 112  : 		STATEMANAGER.SetTexture(1, NULL);

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000fa	6a 00		 push	 0
  000fc	6a 01		 push	 1
  000fe	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 113  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00109	68 42 01 00 00	 push	 322			; 00000142H
  0010e	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 114  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  00113	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00119	6a 02		 push	 2
  0011b	6a 00		 push	 0
  0011d	6a 05		 push	 5
  0011f	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN2@RenderBar3:

; 115  : 	}
; 116  : }

  00124	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	33 cd		 xor	 ecx, ebp
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z ENDP	; CScreen::RenderBar3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBar3d@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderBar3d@CScreen@@QAEXMMMMMM@Z PROC			; CScreen::RenderBar3d, COMDAT
; _this$ = ecx

; 74   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 64	 sub	 esp, 100		; 00000064H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 75   : 	assert(ms_lpd3dDevice != NULL);
; 76   : 
; 77   : 	SPDTVertexRaw vertices[4] =
; 78   : 	{
; 79   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00015	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _sx$[ebp]
  0001a	f3 0f 10 65 0c	 movss	 xmm4, DWORD PTR _sy$[ebp]
  0001f	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _sz$[ebp]

; 80   : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00024	f3 0f 10 55 18	 movss	 xmm2, DWORD PTR _ey$[ebp]

; 81   : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  00029	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ex$[ebp]
  0002e	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax
  00031	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax
  00034	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 82   : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f },

  00037	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 83   : 	};
; 84   : 
; 85   : 
; 86   : 
; 87   : 	if (SetPDTStream(vertices, 4))

  0003a	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  0003d	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$[ebp], xmm1
  00042	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  00047	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _ez$[ebp]
  0004c	6a 04		 push	 4
  0004e	50		 push	 eax
  0004f	f3 0f 11 65 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm4
  00054	f3 0f 11 5d a4	 movss	 DWORD PTR _vertices$[ebp+8], xmm3
  00059	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  00060	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00067	f3 0f 11 55 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm2
  0006c	f3 0f 11 4d bc	 movss	 DWORD PTR _vertices$[ebp+32], xmm1
  00071	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  00078	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  0007f	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  00084	f3 0f 11 65 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm4
  00089	f3 0f 11 5d d4	 movss	 DWORD PTR _vertices$[ebp+56], xmm3
  0008e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+64], 0
  00095	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  0009c	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0
  000a1	f3 0f 11 55 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm2
  000a6	f3 0f 11 4d ec	 movss	 DWORD PTR _vertices$[ebp+80], xmm1
  000ab	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  000b2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  000b9	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  000be	83 c4 08	 add	 esp, 8
  000c1	84 c0		 test	 al, al
  000c3	74 3f		 je	 SHORT $LN2@RenderBar3

; 88   : 	{
; 89   : 		STATEMANAGER.SetTexture(0, NULL);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 90   : 		STATEMANAGER.SetTexture(1, NULL);

  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000da	6a 00		 push	 0
  000dc	6a 01		 push	 1
  000de	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 91   : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e9	68 42 01 00 00	 push	 322			; 00000142H
  000ee	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 92   : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  000f3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f9	6a 02		 push	 2
  000fb	6a 00		 push	 0
  000fd	6a 05		 push	 5
  000ff	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN2@RenderBar3:

; 93   : 	}
; 94   : }

  00104	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00107	33 cd		 xor	 ecx, ebp
  00109	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 18 00	 ret	 24			; 00000018H
?RenderBar3d@CScreen@@QAEXMMMMMM@Z ENDP			; CScreen::RenderBar3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBox3d@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -196					; size = 192
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderBox3d@CScreen@@QAEXMMMMMM@Z PROC			; CScreen::RenderBox3d, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 41   : 	if (GRAPHICS_CAPS_CAN_NOT_DRAW_LINE)

  00013	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA, 0 ; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
  0001a	0f 85 b2 01 00
	00		 jne	 $LN3@RenderBox3

; 42   : 	{
; 43   : 		return;
; 44   : 	}
; 45   : 
; 46   : 	assert(ms_lpd3dDevice != NULL);
; 47   : 
; 48   : 	SPDTVertexRaw vertices[8] =
; 49   : 	{
; 50   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 0

  00020	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor

; 51   : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 1

  00025	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _ex$[ebp]
  0002a	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _sx$[ebp]
  0002f	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _sy$[ebp]
  00034	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _sz$[ebp]

; 52   : 
; 53   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 0
; 54   : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },	// 2

  00039	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _ey$[ebp]
  0003e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00043	f3 0f 11 a5 54
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+24], xmm4

; 55   : 
; 56   : 		{ ex, sy, sz, ms_diffuseColor, 0.0f, 0.0f },	// 1

  0004b	f3 0f 11 65 9c	 movss	 DWORD PTR _vertices$[ebp+96], xmm4

; 57   : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f },	// 3

  00050	f3 0f 11 65 b4	 movss	 DWORD PTR _vertices$[ebp+120], xmm4

; 58   : 
; 59   : 		{ sx, ey, ez, ms_diffuseColor, 0.0f, 0.0f },	// 2
; 60   : 		{ ex + 1.0f, ey, ez, ms_diffuseColor, 0.0f, 0.0f }

  00055	f3 0f 58 25 00
	00 00 00	 addss	 xmm4, DWORD PTR __real@3f800000
  0005d	89 85 48 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+12], eax
  00063	89 85 60 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+36], eax
  00069	89 85 78 ff ff
	ff		 mov	 DWORD PTR _vertices$[ebp+60], eax
  0006f	89 45 90	 mov	 DWORD PTR _vertices$[ebp+84], eax
  00072	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+108], eax
  00075	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+132], eax
  00078	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+156], eax
  0007b	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+180], eax

; 61   : 	};
; 62   : 
; 63   : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 64   : 	if (SetPDTStream(vertices, 8))

  0007e	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _vertices$[ebp]
  00084	6a 08		 push	 8
  00086	50		 push	 eax
  00087	f3 0f 11 ad 3c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp], xmm5
  0008f	f3 0f 11 9d 40
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+4], xmm3
  00097	f3 0f 11 95 44
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+8], xmm2
  0009f	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+16], 0
  000a9	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+20], 0
  000b3	f3 0f 11 9d 58
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  000bb	f3 0f 11 95 5c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+32], xmm2
  000c3	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+40], 0
  000cd	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+44], 0
  000d7	f3 0f 11 ad 6c
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+48], xmm5
  000df	f3 0f 11 9d 70
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+52], xmm3
  000e7	f3 0f 11 95 74
	ff ff ff	 movss	 DWORD PTR _vertices$[ebp+56], xmm2
  000ef	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _vertices$[ebp+64], 0
  000f9	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  00100	f3 0f 11 6d 84	 movss	 DWORD PTR _vertices$[ebp+72], xmm5
  00105	f3 0f 11 4d 88	 movss	 DWORD PTR _vertices$[ebp+76], xmm1
  0010a	f3 0f 11 45 8c	 movss	 DWORD PTR _vertices$[ebp+80], xmm0
  0010f	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+88], 0
  00116	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+92], 0
  0011d	f3 0f 11 5d a0	 movss	 DWORD PTR _vertices$[ebp+100], xmm3
  00122	f3 0f 11 55 a4	 movss	 DWORD PTR _vertices$[ebp+104], xmm2
  00127	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+112], 0
  0012e	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+116], 0
  00135	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$[ebp+124], xmm1
  0013a	f3 0f 11 45 bc	 movss	 DWORD PTR _vertices$[ebp+128], xmm0
  0013f	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+136], 0
  00146	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+140], 0
  0014d	f3 0f 11 6d cc	 movss	 DWORD PTR _vertices$[ebp+144], xmm5
  00152	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$[ebp+148], xmm1
  00157	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+152], xmm0
  0015c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+160], 0
  00163	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+164], 0
  0016a	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+168], xmm4
  0016f	f3 0f 11 4d e8	 movss	 DWORD PTR _vertices$[ebp+172], xmm1
  00174	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+176], xmm0
  00179	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+184], 0
  00180	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+188], 0
  00187	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  0018c	83 c4 08	 add	 esp, 8
  0018f	84 c0		 test	 al, al
  00191	74 3f		 je	 SHORT $LN3@RenderBox3

; 65   : 	{
; 66   : 		STATEMANAGER.SetTexture(0, NULL);

  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00199	6a 00		 push	 0
  0019b	6a 00		 push	 0
  0019d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 67   : 		STATEMANAGER.SetTexture(1, NULL);

  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001a8	6a 00		 push	 0
  001aa	6a 01		 push	 1
  001ac	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 68   : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  001b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b7	68 42 01 00 00	 push	 322			; 00000142H
  001bc	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 69   : 		STATEMANAGER.DrawPrimitive(D3DPT_LINELIST, 0, 4);

  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c7	6a 04		 push	 4
  001c9	6a 00		 push	 0
  001cb	6a 02		 push	 2
  001cd	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN3@RenderBox3:

; 70   : 	}
; 71   : }

  001d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d5	33 cd		 xor	 ecx, ebp
  001d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 18 00	 ret	 24			; 00000018H
?RenderBox3d@CScreen@@QAEXMMMMMM@Z ENDP			; CScreen::RenderBox3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderLine3d@CScreen@@QAEXMMMMMM@Z
_TEXT	SEGMENT
_vertices$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_sz$ = 16						; size = 4
_ex$ = 20						; size = 4
_ey$ = 24						; size = 4
_ez$ = 28						; size = 4
?RenderLine3d@CScreen@@QAEXMMMMMM@Z PROC		; CScreen::RenderLine3d, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 16   : 	if (GRAPHICS_CAPS_CAN_NOT_DRAW_LINE)

  00010	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?GRAPHICS_CAPS_CAN_NOT_DRAW_LINE@@3_NA, 0 ; GRAPHICS_CAPS_CAN_NOT_DRAW_LINE
  00017	0f 85 b4 00 00
	00		 jne	 $LN3@RenderLine

; 17   : 	{
; 18   : 		return;
; 19   : 	}
; 20   : 
; 21   : 	assert(ms_lpd3dDevice != NULL);
; 22   : 
; 23   : 	SPDTVertexRaw vertices[2] =
; 24   : 	{
; 25   : 		{ sx, sy, sz, ms_diffuseColor, 0.0f, 0.0f },

  0001d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00022	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_diffuseColor@CScreen@@1KA ; CScreen::ms_diffuseColor
  00027	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp], xmm0
  0002c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00031	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
  00036	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _sz$[ebp]
  0003b	f3 0f 11 45 d4	 movss	 DWORD PTR _vertices$[ebp+8], xmm0

; 26   : 		{ ex, ey, ez, ms_diffuseColor, 0.0f, 0.0f }

  00040	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00045	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0
  0004a	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _ey$[ebp]
  0004f	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+12], eax
  00052	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 27   : 	};
; 28   : 
; 29   : 	// 2004.11.18.myevan.DrawIndexPrimitiveUP -> DynamicVertexBuffer
; 30   : 	if (SetPDTStream(vertices, 2))

  00055	8d 45 cc	 lea	 eax, DWORD PTR _vertices$[ebp]
  00058	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0
  0005d	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _ez$[ebp]
  00062	6a 02		 push	 2
  00064	50		 push	 eax
  00065	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  0006c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  00073	f3 0f 11 45 ec	 movss	 DWORD PTR _vertices$[ebp+32], xmm0
  00078	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  0007f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+44], 0
  00086	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertexRaw@@I@Z ; CGraphicBase::SetPDTStream
  0008b	83 c4 08	 add	 esp, 8
  0008e	84 c0		 test	 al, al
  00090	74 3f		 je	 SHORT $LN3@RenderLine

; 31   : 	{
; 32   : 		STATEMANAGER.SetTexture(0, NULL);

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00098	6a 00		 push	 0
  0009a	6a 00		 push	 0
  0009c	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 33   : 		STATEMANAGER.SetTexture(1, NULL);

  000a1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a7	6a 00		 push	 0
  000a9	6a 01		 push	 1
  000ab	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 34   : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b6	68 42 01 00 00	 push	 322			; 00000142H
  000bb	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 35   : 		STATEMANAGER.DrawPrimitive(D3DPT_LINELIST, 0, 1);

  000c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c6	6a 01		 push	 1
  000c8	6a 00		 push	 0
  000ca	6a 02		 push	 2
  000cc	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN3@RenderLine:

; 36   : 	}
; 37   : }

  000d1	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d4	33 cd		 xor	 ecx, ebp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 18 00	 ret	 24			; 00000018H
?RenderLine3d@CScreen@@QAEXMMMMMM@Z ENDP		; CScreen::RenderLine3d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCircle3d@CScreen@@QAEXMMMMH@Z
_TEXT	SEGMENT
_pts$ = -48						; size = 12
_delta$1$ = -36						; size = 4
_c_rmatInvView$1$ = -32					; size = 4
tv866 = -32						; size = 4
_this$1$ = -28						; size = 4
_pts$1$ = -24						; size = 4
tv894 = -20						; size = 4
_theta$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fRadius$ = 20						; size = 4
_iStep$ = 24						; size = 4
?RenderCircle3d@CScreen@@QAEXMMMMH@Z PROC		; CScreen::RenderCircle3d, COMDAT
; _this$ = ecx

; 287  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderCircle3d@CScreen@@QAEXMMMMH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d e4	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp], 0
  00031	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+4], 0
  00038	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 293  : 	pts.resize(iStep);

  0003f	8b 7d 18	 mov	 edi, DWORD PTR _iStep$[ebp]
  00042	8d 4d d0	 lea	 ecx, DWORD PTR _pts$[ebp]
  00045	57		 push	 edi
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	e8 00 00 00 00	 call	 ?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize

; 294  : 
; 295  : 	theta = 0.0;
; 296  : 	delta = 2 * D3DX_PI / float(iStep);

  00052	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0005a	0f 57 c0	 xorps	 xmm0, xmm0
  0005d	f3 0f 11 45 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm0
  00062	66 0f 6e c7	 movd	 xmm0, edi
  00066	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 297  : 
; 298  : 	const D3DXMATRIX & c_rmatInvView = CCameraManager::Instance().GetCurrentCamera()->GetBillboardMatrix();

  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0006f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00073	f3 0f 11 4d dc	 movss	 DWORD PTR _delta$1$[ebp], xmm1
  00078	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
  0007d	05 ec 00 00 00	 add	 eax, 236		; 000000ecH
  00082	89 45 e0	 mov	 DWORD PTR _c_rmatInvView$1$[ebp], eax

; 299  : 
; 300  : 	for (count = 0; count < iStep; count++)

  00085	8b 45 d0	 mov	 eax, DWORD PTR _pts$[ebp]
  00088	89 45 e8	 mov	 DWORD PTR _pts$1$[ebp], eax
  0008b	85 ff		 test	 edi, edi
  0008d	7e 78		 jle	 SHORT $LN3@RenderCirc
  0008f	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _theta$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00094	8b f0		 mov	 esi, eax
  00096	89 7d ec	 mov	 DWORD PTR tv894[ebp], edi
  00099	8b 7d e0	 mov	 edi, DWORD PTR _c_rmatInvView$1$[ebp]
  0009c	0f 1f 40 00	 npad	 4
$LL4@RenderCirc:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  000a0	0f 5a c0	 cvtps2pd xmm0, xmm0

; 758  :             return (float)sin(_X);

  000a3	e8 00 00 00 00	 call	 __libm_sse2_sin_precise

; 653  :             return (float)cos(_X);

  000a8	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _theta$1$[ebp]

; 758  :             return (float)sin(_X);

  000ad	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 302  : 		pts[count] = D3DXVECTOR3(fRadius * cosf(theta), fRadius * sinf(theta), 0.0f);

  000b1	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  000b6	f3 0f 11 45 e0	 movss	 DWORD PTR tv866[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  000bb	0f 5a c1	 cvtps2pd xmm0, xmm1
  000be	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
  000c3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 303  : 		D3DXVec3TransformCoord(&pts[count], &pts[count], &c_rmatInvView);

  000c7	57		 push	 edi
  000c8	56		 push	 esi
  000c9	56		 push	 esi
  000ca	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  000cf	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  000d3	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR tv866[ebp]
  000d8	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  000dd	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000e4	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 304  : 
; 305  : 		theta += delta;

  000e9	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _delta$1$[ebp]
  000ee	83 c6 0c	 add	 esi, 12			; 0000000cH
  000f1	83 6d ec 01	 sub	 DWORD PTR tv894[ebp], 1
  000f5	f3 0f 58 45 f0	 addss	 xmm0, DWORD PTR _theta$1$[ebp]
  000fa	f3 0f 11 45 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm0
  000ff	75 9f		 jne	 SHORT $LL4@RenderCirc
  00101	8b 7d 18	 mov	 edi, DWORD PTR _iStep$[ebp]
  00104	8b 45 e8	 mov	 eax, DWORD PTR _pts$1$[ebp]
$LN3@RenderCirc:

; 306  : 	}
; 307  : 	for (count = 0; count < iStep - 1; count++)

  00107	4f		 dec	 edi
  00108	85 ff		 test	 edi, edi
  0010a	7e 75		 jle	 SHORT $LN6@RenderCirc
  0010c	8d 70 10	 lea	 esi, DWORD PTR [eax+16]
  0010f	90		 npad	 1
$LL7@RenderCirc:

; 308  : 	{
; 309  : 		RenderLine3d(fx + pts[count].x, fy + pts[count].y, fz + pts[count].z,

  00110	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  00115	83 ec 18	 sub	 esp, 24			; 00000018H
  00118	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  0011d	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00120	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00126	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0012b	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  0012f	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00135	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0013a	f3 0f 58 46 fc	 addss	 xmm0, DWORD PTR [esi-4]
  0013f	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00145	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  0014a	f3 0f 58 46 f8	 addss	 xmm0, DWORD PTR [esi-8]
  0014f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00155	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  0015a	f3 0f 58 46 f4	 addss	 xmm0, DWORD PTR [esi-12]
  0015f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00165	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0016a	f3 0f 58 46 f0	 addss	 xmm0, DWORD PTR [esi-16]
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d
  00179	83 c6 0c	 add	 esi, 12			; 0000000cH
  0017c	83 ef 01	 sub	 edi, 1
  0017f	75 8f		 jne	 SHORT $LL7@RenderCirc
$LN6@RenderCirc:

; 312  : 	RenderLine3d(fx + pts[iStep - 1].x, fy + pts[iStep - 1].y, fz + pts[iStep - 1].z,

  00181	8b 4d e8	 mov	 ecx, DWORD PTR _pts$1$[ebp]
  00184	83 ec 18	 sub	 esp, 24			; 00000018H
  00187	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fz$[ebp]
  0018c	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  00191	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00194	8b 45 18	 mov	 eax, DWORD PTR _iStep$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 312  : 	RenderLine3d(fx + pts[iStep - 1].x, fy + pts[iStep - 1].y, fz + pts[iStep - 1].z,

  00197	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]
  0019c	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fx$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001a1	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 312  : 	RenderLine3d(fx + pts[iStep - 1].x, fy + pts[iStep - 1].y, fz + pts[iStep - 1].z,

  001a4	f3 0f 58 4c 81
	fc		 addss	 xmm1, DWORD PTR [ecx+eax*4-4]
  001aa	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  001b0	0f 28 c2	 movaps	 xmm0, xmm2
  001b3	f3 0f 58 41 04	 addss	 xmm0, DWORD PTR [ecx+4]
  001b8	f3 0f 58 54 81
	f8		 addss	 xmm2, DWORD PTR [ecx+eax*4-8]
  001be	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001c4	0f 28 c3	 movaps	 xmm0, xmm3
  001c7	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]
  001cb	f3 0f 58 5c 81
	f4		 addss	 xmm3, DWORD PTR [ecx+eax*4-12]
  001d1	8b 4d e4	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001d4	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001da	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  001e0	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  001e6	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  001eb	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d

; 313  : 				 fx + pts[0].x, fy + pts[0].y, fz + pts[0].z);
; 314  : }

  001f0	8d 4d d0	 lea	 ecx, DWORD PTR _pts$[ebp]
  001f3	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  001f8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001fb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00202	59		 pop	 ecx
  00203	5f		 pop	 edi
  00204	5e		 pop	 esi
  00205	8b e5		 mov	 esp, ebp
  00207	5d		 pop	 ebp
  00208	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCircle3d@CScreen@@QAEXMMMMH@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _pts$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderCircle3d@CScreen@@QAEXMMMMH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCircle3d@CScreen@@QAEXMMMMH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCircle3d@CScreen@@QAEXMMMMH@Z ENDP		; CScreen::RenderCircle3d
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderCircle2d@CScreen@@QAEXMMMMH@Z
_TEXT	SEGMENT
_pts$ = -48						; size = 12
_pts$1$ = -36						; size = 4
_delta$1$ = -32						; size = 4
tv744 = -28						; size = 4
_this$1$ = -24						; size = 4
tv770 = -20						; size = 4
_theta$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fRadius$ = 20						; size = 4
_iStep$ = 24						; size = 4
?RenderCircle2d@CScreen@@QAEXMMMMH@Z PROC		; CScreen::RenderCircle2d, COMDAT
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RenderCircle2d@CScreen@@QAEXMMMMH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp], 0
  00031	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+4], 0
  00038	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _pts$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 264  : 	pts.resize(iStep);

  0003f	8b 7d 18	 mov	 edi, DWORD PTR _iStep$[ebp]
  00042	8d 4d d0	 lea	 ecx, DWORD PTR _pts$[ebp]
  00045	57		 push	 edi
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	e8 00 00 00 00	 call	 ?resize@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAEXI@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::resize

; 265  : 
; 266  : 	theta = 0.0;
; 267  : 	delta = 2 * D3DX_PI / float(iStep);

  00052	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@40c90fdb
  0005a	0f 57 d2	 xorps	 xmm2, xmm2
  0005d	66 0f 6e c7	 movd	 xmm0, edi

; 268  : 
; 269  : 	for (count = 0; count < iStep; count++)

  00061	8b 75 d0	 mov	 esi, DWORD PTR _pts$[ebp]
  00064	f3 0f 11 55 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm2
  00069	89 75 dc	 mov	 DWORD PTR _pts$1$[ebp], esi
  0006c	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0006f	f3 0f 5e c8	 divss	 xmm1, xmm0
  00073	f3 0f 11 4d e0	 movss	 DWORD PTR _delta$1$[ebp], xmm1
  00078	85 ff		 test	 edi, edi
  0007a	7e 71		 jle	 SHORT $LN3@RenderCirc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  0007c	89 7d ec	 mov	 DWORD PTR tv770[ebp], edi
  0007f	33 ff		 xor	 edi, edi
$LL4@RenderCirc:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  00081	0f 5a c2	 cvtps2pd xmm0, xmm2

; 758  :             return (float)sin(_X);

  00084	e8 00 00 00 00	 call	 __libm_sse2_sin_precise

; 653  :             return (float)cos(_X);

  00089	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _theta$1$[ebp]

; 758  :             return (float)sin(_X);

  0008e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 272  : 		y = fy + fRadius * sinf(theta);

  00092	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  00097	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _fy$[ebp]
  0009c	f3 0f 11 45 e4	 movss	 DWORD PTR tv744[ebp], xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  000a1	0f 5a c1	 cvtps2pd xmm0, xmm1
  000a4	e8 00 00 00 00	 call	 __libm_sse2_cos_precise
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 277  : 		theta += delta;

  000a9	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _theta$1$[ebp]
  000ae	f3 0f 58 55 e0	 addss	 xmm2, DWORD PTR _delta$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 653  :             return (float)cos(_X);

  000b3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 277  : 		theta += delta;

  000b7	f3 0f 11 55 f0	 movss	 DWORD PTR _theta$1$[ebp], xmm2
  000bc	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _fRadius$[ebp]
  000c1	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _fx$[ebp]
  000c6	f3 0f 11 04 37	 movss	 DWORD PTR [edi+esi], xmm0
  000cb	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv744[ebp]
  000d0	f3 0f 11 44 37
	04		 movss	 DWORD PTR [edi+esi+4], xmm0
  000d6	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fz$[ebp]
  000db	f3 0f 11 44 37
	08		 movss	 DWORD PTR [edi+esi+8], xmm0
  000e1	83 c7 0c	 add	 edi, 12			; 0000000cH
  000e4	83 6d ec 01	 sub	 DWORD PTR tv770[ebp], 1
  000e8	75 97		 jne	 SHORT $LL4@RenderCirc
  000ea	8b 7d 18	 mov	 edi, DWORD PTR _iStep$[ebp]
$LN3@RenderCirc:

; 278  : 	}
; 279  : 	for (count = 0; count < iStep - 1; count++)

  000ed	4f		 dec	 edi
  000ee	85 ff		 test	 edi, edi
  000f0	7e 37		 jle	 SHORT $LN6@RenderCirc
  000f2	83 c6 10	 add	 esi, 16			; 00000010H
$LL7@RenderCirc:

; 280  : 	{
; 281  : 		RenderLine3d(pts[count].x, pts[count].y, pts[count].z, pts[count + 1].x, pts[count + 1].y, pts[count + 1].z);

  000f5	0f 10 46 f8	 movups	 xmm0, XMMWORD PTR [esi-8]
  000f9	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000fc	83 ec 18	 sub	 esp, 24			; 00000018H
  000ff	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00104	f3 0f 10 46 f4	 movss	 xmm0, DWORD PTR [esi-12]
  00109	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0010f	f3 0f 10 46 f0	 movss	 xmm0, DWORD PTR [esi-16]
  00114	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00119	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d
  0011e	8d 76 0c	 lea	 esi, DWORD PTR [esi+12]
  00121	83 ef 01	 sub	 edi, 1
  00124	75 cf		 jne	 SHORT $LL7@RenderCirc
  00126	8b 75 dc	 mov	 esi, DWORD PTR _pts$1$[ebp]
$LN6@RenderCirc:

; 283  : 	RenderLine3d(pts[iStep - 1].x, pts[iStep - 1].y, pts[iStep - 1].z, pts[0].x, pts[0].y, pts[0].z);

  00129	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0012e	83 ec 18	 sub	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00131	8b 45 18	 mov	 eax, DWORD PTR _iStep$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 283  : 	RenderLine3d(pts[iStep - 1].x, pts[iStep - 1].y, pts[iStep - 1].z, pts[0].x, pts[0].y, pts[0].z);

  00134	8b 4d e8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00137	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0013d	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00142	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp

; 283  : 	RenderLine3d(pts[iStep - 1].x, pts[iStep - 1].y, pts[iStep - 1].z, pts[0].x, pts[0].y, pts[0].z);

  00145	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0014b	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0014f	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00155	f3 0f 10 44 86
	fc		 movss	 xmm0, DWORD PTR [esi+eax*4-4]
  0015b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00161	f3 0f 10 44 86
	f8		 movss	 xmm0, DWORD PTR [esi+eax*4-8]
  00167	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0016d	f3 0f 10 44 86
	f4		 movss	 xmm0, DWORD PTR [esi+eax*4-12]
  00173	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00178	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d

; 284  : }

  0017d	8d 4d d0	 lea	 ecx, DWORD PTR _pts$[ebp]
  00180	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00185	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00188	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018f	59		 pop	 ecx
  00190	5f		 pop	 edi
  00191	5e		 pop	 esi
  00192	8b e5		 mov	 esp, ebp
  00194	5d		 pop	 ebp
  00195	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RenderCircle2d@CScreen@@QAEXMMMMH@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _pts$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?RenderCircle2d@CScreen@@QAEXMMMMH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RenderCircle2d@CScreen@@QAEXMMMMH@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RenderCircle2d@CScreen@@QAEXMMMMH@Z ENDP		; CScreen::RenderCircle2d
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_dwStartColor$ = 24					; size = 4
_dwEndColor$ = 28					; size = 4
_ez$ = 32						; size = 4
?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z PROC	; CScreen::RenderGradationBar2d, COMDAT
; _this$ = ecx

; 252  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 253  : 	RenderGradationBar3d(sx, sy, ez, ex, ey, ez, dwStartColor, dwEndColor);

  00003	ff 75 1c	 push	 DWORD PTR _dwEndColor$[ebp]
  00006	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _ez$[ebp]
  0000b	ff 75 18	 push	 DWORD PTR _dwStartColor$[ebp]
  0000e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00013	83 ec 18	 sub	 esp, 24			; 00000018H
  00016	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  0001c	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00022	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00027	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0002d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  00032	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00038	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003e	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  00043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00048	e8 00 00 00 00	 call	 ?RenderGradationBar3d@CScreen@@QAEXMMMMMMKK@Z ; CScreen::RenderGradationBar3d

; 254  : }

  0004d	5d		 pop	 ebp
  0004e	c2 1c 00	 ret	 28			; 0000001cH
?RenderGradationBar2d@CScreen@@QAEXMMMMKKM@Z ENDP	; CScreen::RenderGradationBar2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBar2d@CScreen@@QAEXMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
?RenderBar2d@CScreen@@QAEXMMMMM@Z PROC			; CScreen::RenderBar2d, COMDAT
; _this$ = ecx

; 247  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 248  : 	RenderBar3d(sx, sy, z, ex, ey, z);

  00003	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _z$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00010	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00016	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?RenderBar3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderBar3d

; 249  : }

  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?RenderBar2d@CScreen@@QAEXMMMMM@Z ENDP			; CScreen::RenderBar2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderBox2d@CScreen@@QAEXMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
?RenderBox2d@CScreen@@QAEXMMMMM@Z PROC			; CScreen::RenderBox2d, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 243  : 	RenderBox3d(sx, sy, z, ex, ey, z);

  00003	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _z$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00010	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00016	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?RenderBox3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderBox3d

; 244  : }

  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?RenderBox2d@CScreen@@QAEXMMMMM@Z ENDP			; CScreen::RenderBox2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?RenderLine2d@CScreen@@QAEXMMMMM@Z
_TEXT	SEGMENT
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_ex$ = 16						; size = 4
_ey$ = 20						; size = 4
_z$ = 24						; size = 4
?RenderLine2d@CScreen@@QAEXMMMMM@Z PROC			; CScreen::RenderLine2d, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  : 	RenderLine3d(sx, sy, z, ex, ey, z);

  00003	f3 0f 10 4d 18	 movss	 xmm1, DWORD PTR _z$[ebp]
  00008	83 ec 18	 sub	 esp, 24			; 00000018H
  0000b	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _ey$[ebp]
  00010	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  00016	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0001c	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _ex$[ebp]
  00021	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00027	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _sy$[ebp]
  0002c	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00032	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _sx$[ebp]
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 ?RenderLine3d@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderLine3d

; 239  : }

  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
?RenderLine2d@CScreen@@QAEXMMMMM@Z ENDP			; CScreen::RenderLine2d
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z
_TEXT	SEGMENT
_pSrcRect$ = 8						; size = 4
_hWnd$ = 12						; size = 4
?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z PROC	; CScreen::Show, COMDAT
; _this$ = ecx

; 774  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 775  : 	assert(ms_lpd3dDevice != NULL);
; 776  : 	ms_lpd3dDevice->Present(pSrcRect, NULL, hWnd, NULL);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00008	6a 00		 push	 0
  0000a	ff 75 0c	 push	 DWORD PTR _hWnd$[ebp]
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	6a 00		 push	 0
  00011	ff 75 08	 push	 DWORD PTR _pSrcRect$[ebp]
  00014	50		 push	 eax
  00015	ff 51 44	 call	 DWORD PTR [ecx+68]

; 777  : }

  00018	5d		 pop	 ebp
  00019	c2 08 00	 ret	 8
?Show@CScreen@@QAEXPAUtagRECT@@PAUHWND__@@@Z ENDP	; CScreen::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?Show@CScreen@@QAEXPAUtagRECT@@@Z
_TEXT	SEGMENT
_pSrcRect$ = 8						; size = 4
?Show@CScreen@@QAEXPAUtagRECT@@@Z PROC			; CScreen::Show, COMDAT
; _this$ = ecx

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 769  : 	assert(ms_lpd3dDevice != NULL);
; 770  : 	ms_lpd3dDevice->Present(pSrcRect, NULL, NULL, NULL);

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	ff 75 08	 push	 DWORD PTR _pSrcRect$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	50		 push	 eax
  00014	ff 51 44	 call	 DWORD PTR [ecx+68]

; 771  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?Show@CScreen@@QAEXPAUtagRECT@@@Z ENDP			; CScreen::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?Show@CScreen@@QAEXPAUHWND__@@@Z
_TEXT	SEGMENT
_rcRight$1 = -68					; size = 16
_rcLeft$2 = -52						; size = 16
_rcBottom$3 = -36					; size = 16
_rcTop$4 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?Show@CScreen@@QAEXPAUHWND__@@@Z PROC			; CScreen::Show, COMDAT
; _this$ = ecx

; 742  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 743  : 	assert(ms_lpd3dDevice != NULL);
; 744  : 
; 745  : 	if (g_isBrowserMode)

  00010	80 3d 00 00 00
	00 00		 cmp	 BYTE PTR ?g_isBrowserMode@@3_NA, 0 ; g_isBrowserMode
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _hWnd$[ebp]
  0001c	8b f1		 mov	 esi, ecx
  0001e	6a 00		 push	 0
  00020	57		 push	 edi
  00021	0f 84 bc 00 00
	00		 je	 $LN2@Show

; 746  : 	{
; 747  : 		RECT rcTop = {0, 0, ms_d3dPresentParameter.BackBufferWidth, g_rcBrowser.top};
; 748  : 		RECT rcBottom = {0, g_rcBrowser.bottom, ms_d3dPresentParameter.BackBufferWidth, ms_d3dPresentParameter.BackBufferHeight};

  00027	a1 04 00 00 00	 mov	 eax, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A+4
  0002c	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A+4
  00032	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A+12
  00038	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_d3dPresentParameter@CGraphicBase@@1U_D3DPRESENT_PARAMETERS_@@A
  0003e	89 45 e8	 mov	 DWORD PTR _rcBottom$3[ebp+12], eax

; 749  : 		RECT rcLeft = {0, g_rcBrowser.top, g_rcBrowser.left, g_rcBrowser.bottom};

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A
  00046	89 45 d4	 mov	 DWORD PTR _rcLeft$2[ebp+8], eax

; 750  : 		RECT rcRight = {g_rcBrowser.right, g_rcBrowser.top, ms_d3dPresentParameter.BackBufferWidth, g_rcBrowser.bottom};

  00049	a1 08 00 00 00	 mov	 eax, DWORD PTR ?g_rcBrowser@@3UtagRECT@@A+8
  0004e	89 45 bc	 mov	 DWORD PTR _rcRight$1[ebp], eax

; 751  : 
; 752  : 		ms_lpd3dDevice->Present(&rcTop, &rcTop, hWnd, NULL);

  00051	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00056	89 55 f8	 mov	 DWORD PTR _rcTop$4[ebp+12], edx
  00059	89 55 d0	 mov	 DWORD PTR _rcLeft$2[ebp+4], edx
  0005c	89 55 c0	 mov	 DWORD PTR _rcRight$1[ebp+4], edx
  0005f	8d 55 ec	 lea	 edx, DWORD PTR _rcTop$4[ebp]
  00062	52		 push	 edx
  00063	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _rcTop$4[ebp], 0
  0006a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _rcTop$4[ebp+4], 0
  00071	89 75 f4	 mov	 DWORD PTR _rcTop$4[ebp+8], esi
  00074	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _rcBottom$3[ebp], 0
  0007b	89 4d e0	 mov	 DWORD PTR _rcBottom$3[ebp+4], ecx
  0007e	89 75 e4	 mov	 DWORD PTR _rcBottom$3[ebp+8], esi
  00081	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _rcLeft$2[ebp], 0
  00088	89 4d d8	 mov	 DWORD PTR _rcLeft$2[ebp+12], ecx
  0008b	89 75 c4	 mov	 DWORD PTR _rcRight$1[ebp+8], esi
  0008e	89 4d c8	 mov	 DWORD PTR _rcRight$1[ebp+12], ecx
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	52		 push	 edx
  00094	50		 push	 eax
  00095	ff 51 44	 call	 DWORD PTR [ecx+68]

; 753  : 		ms_lpd3dDevice->Present(&rcBottom, &rcBottom, hWnd, NULL);

  00098	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0009d	8d 55 dc	 lea	 edx, DWORD PTR _rcBottom$3[ebp]
  000a0	6a 00		 push	 0
  000a2	57		 push	 edi
  000a3	52		 push	 edx
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	ff 51 44	 call	 DWORD PTR [ecx+68]

; 754  : 		ms_lpd3dDevice->Present(&rcLeft, &rcLeft, hWnd, NULL);

  000ab	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000b0	8d 55 cc	 lea	 edx, DWORD PTR _rcLeft$2[ebp]
  000b3	6a 00		 push	 0
  000b5	57		 push	 edi
  000b6	52		 push	 edx
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	52		 push	 edx
  000ba	50		 push	 eax
  000bb	ff 51 44	 call	 DWORD PTR [ecx+68]

; 755  : 		ms_lpd3dDevice->Present(&rcRight, &rcRight, hWnd, NULL);

  000be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000c3	8d 55 bc	 lea	 edx, DWORD PTR _rcRight$1[ebp]
  000c6	6a 00		 push	 0
  000c8	57		 push	 edi
  000c9	52		 push	 edx
  000ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  000cc	52		 push	 edx
  000cd	50		 push	 eax
  000ce	ff 51 44	 call	 DWORD PTR [ecx+68]
  000d1	5f		 pop	 edi

; 763  : 		}
; 764  : 	}
; 765  : }

  000d2	5e		 pop	 esi
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d6	33 cd		 xor	 ecx, ebp
  000d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c2 04 00	 ret	 4
$LN2@Show:

; 756  : 	}
; 757  : 	else
; 758  : 	{
; 759  : 		HRESULT hr = ms_lpd3dDevice->Present(NULL, NULL, hWnd, NULL);

  000e3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  000e9	6a 00		 push	 0
  000eb	6a 00		 push	 0
  000ed	51		 push	 ecx
  000ee	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f0	ff 50 44	 call	 DWORD PTR [eax+68]

; 760  : 		if (D3DERR_DEVICELOST == hr)

  000f3	3d 68 08 76 88	 cmp	 eax, -2005530520	; 88760868H
  000f8	75 07		 jne	 SHORT $LN4@Show

; 761  : 		{
; 762  : 			RestoreDevice();

  000fa	8b ce		 mov	 ecx, esi
  000fc	e8 00 00 00 00	 call	 ?RestoreDevice@CScreen@@QAEHXZ ; CScreen::RestoreDevice
$LN4@Show:

; 763  : 		}
; 764  : 	}
; 765  : }

  00101	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00104	5f		 pop	 edi
  00105	33 cd		 xor	 ecx, ebp
  00107	5e		 pop	 esi
  00108	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 04 00	 ret	 4
?Show@CScreen@@QAEXPAUHWND__@@@Z ENDP			; CScreen::Show
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?End@CScreen@@QAEXXZ
_TEXT	SEGMENT
?End@CScreen@@QAEXXZ PROC				; CScreen::End, COMDAT
; _this$ = ecx

; 735  : 	STATEMANAGER.EndScene();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00006	e9 00 00 00 00	 jmp	 ?EndScene@CStateManager@@QAEXXZ ; CStateManager::EndScene
?End@CScreen@@QAEXXZ ENDP				; CScreen::End
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?Begin@CScreen@@QAE_NXZ
_TEXT	SEGMENT
?Begin@CScreen@@QAE_NXZ PROC				; CScreen::Begin, COMDAT
; _this$ = ecx

; 721  : 	assert(ms_lpd3dDevice != NULL);
; 722  : 	ResetFaceCount();

  00000	e8 00 00 00 00	 call	 ?ResetFaceCount@CGraphicBase@@QAEXXZ ; CGraphicBase::ResetFaceCount

; 723  : 
; 724  : 	if (!STATEMANAGER.BeginScene())

  00005	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000b	e8 00 00 00 00	 call	 ?BeginScene@CStateManager@@QAE_NXZ ; CStateManager::BeginScene
  00010	84 c0		 test	 al, al
  00012	75 10		 jne	 SHORT $LN2@Begin

; 725  : 	{
; 726  : 		Tracenf("BeginScene FAILED\n");

  00014	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@HBCJANMB@BeginScene?5FAILED?6@
  00019	e8 00 00 00 00	 call	 ?Tracenf@@YAXPBDZZ	; Tracenf
  0001e	83 c4 04	 add	 esp, 4

; 727  : 		return false;

  00021	32 c0		 xor	 al, al

; 731  : }

  00023	c3		 ret	 0
$LN2@Begin:

; 728  : 	}
; 729  : 
; 730  : 	return true;

  00024	b0 01		 mov	 al, 1

; 731  : }

  00026	c3		 ret	 0
?Begin@CScreen@@QAE_NXZ ENDP				; CScreen::Begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?Clear@CScreen@@QAEXXZ
_TEXT	SEGMENT
?Clear@CScreen@@QAEXXZ PROC				; CScreen::Clear, COMDAT
; _this$ = ecx

; 643  : 	assert(ms_lpd3dDevice != NULL);
; 644  : 	ms_lpd3dDevice->Clear(0L, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, ms_clearColor, ms_clearDepth, ms_clearStencil);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearStencil@CScreen@@1KA ; CScreen::ms_clearStencil
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0000b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_clearDepth@CScreen@@1MA
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	51		 push	 ecx
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearColor@CScreen@@1KA ; CScreen::ms_clearColor
  00021	6a 03		 push	 3
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	50		 push	 eax
  00028	ff 91 ac 00 00
	00		 call	 DWORD PTR [ecx+172]

; 645  : }

  0002e	c3		 ret	 0
?Clear@CScreen@@QAEXXZ ENDP				; CScreen::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ?ClearDepthBuffer@CScreen@@QAEXXZ
_TEXT	SEGMENT
?ClearDepthBuffer@CScreen@@QAEXXZ PROC			; CScreen::ClearDepthBuffer, COMDAT
; _this$ = ecx

; 637  : 	assert(ms_lpd3dDevice != NULL);
; 638  : 	ms_lpd3dDevice->Clear(0L, NULL, D3DCLEAR_ZBUFFER, ms_clearColor, ms_clearDepth, ms_clearStencil);

  00000	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearStencil@CScreen@@1KA ; CScreen::ms_clearStencil
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  0000b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?ms_clearDepth@CScreen@@1MA
  00013	8b 08		 mov	 ecx, DWORD PTR [eax]
  00015	51		 push	 ecx
  00016	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001b	ff 35 00 00 00
	00		 push	 DWORD PTR ?ms_clearColor@CScreen@@1KA ; CScreen::ms_clearColor
  00021	6a 02		 push	 2
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	50		 push	 eax
  00028	ff 91 ac 00 00
	00		 call	 DWORD PTR [ecx+172]

; 639  : }

  0002e	c3		 ret	 0
?ClearDepthBuffer@CScreen@@QAEXXZ ENDP			; CScreen::ClearDepthBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ??1CScreen@@UAE@XZ
_TEXT	SEGMENT
??1CScreen@@UAE@XZ PROC					; CScreen::~CScreen, COMDAT
; _this$ = ecx

; 873  : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CScreen@@6B@

; 874  : }

  00006	e9 00 00 00 00	 jmp	 ??1CGraphicCollisionObject@@UAE@XZ ; CGraphicCollisionObject::~CGraphicCollisionObject
??1CScreen@@UAE@XZ ENDP					; CScreen::~CScreen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpScreen.cpp
;	COMDAT ??0CScreen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CScreen@@QAE@XZ PROC					; CScreen::CScreen, COMDAT
; _this$ = ecx

; 869  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicCollisionObject@@QAE@XZ ; CGraphicCollisionObject::CGraphicCollisionObject
  0000f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CScreen@@6B@

; 870  : }

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??0CScreen@@QAE@XZ ENDP					; CScreen::CScreen
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXPLANE@@QAE@XZ
_TEXT	SEGMENT
??0D3DXPLANE@@QAE@XZ PROC				; D3DXPLANE::D3DXPLANE, COMDAT
; _this$ = ecx

; 475  :     D3DXPLANE() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXPLANE@@QAE@XZ ENDP				; D3DXPLANE::D3DXPLANE
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
