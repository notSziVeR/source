; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\GrpMarkInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_7?$CDynamicPool@VCGraphicMarkInstance@@@@6B@	; CDynamicPool<CGraphicMarkInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCGraphicMarkInstance@@@@UAEPAXI@Z ; CDynamicPool<CGraphicMarkInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCGraphicMarkInstance@@@@6B@ ; CDynamicPool<CGraphicMarkInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCGraphicMarkInstance@@@@@8 ; CDynamicPool<CGraphicMarkInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCGraphicMarkInstance@@@@8	; CDynamicPool<CGraphicMarkInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCGraphicMarkInstance@@@@8	; CDynamicPool<CGraphicMarkInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCGraphicMarkInstance@@@@8 ; CDynamicPool<CGraphicMarkInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCGraphicMarkInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CGraphicMarkInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCGraphicMarkInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCGraphicMarkInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCGraphicMarkInstance@@@@@8 ; CDynamicPool<CGraphicMarkInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicMarkInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCGraphicMarkInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCGraphicMarkInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCGraphicMarkInstance@@@@8 ; CDynamicPool<CGraphicMarkInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCGraphicMarkInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCGraphicMarkInstance@@@@8 DD 00H	; CDynamicPool<CGraphicMarkInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCGraphicMarkInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCGraphicMarkInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCGraphicMarkInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CGraphicMarkInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCGraphicMarkInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCGraphicMarkInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCGraphicMarkInstance@@@@6B@ DD 00H	; CDynamicPool<CGraphicMarkInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCGraphicMarkInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCGraphicMarkInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCGraphicMarkInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCGraphicMarkInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCGraphicMarkInstance@@@@6B@ ; CDynamicPool<CGraphicMarkInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCGraphicMarkInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	?Type@CGraphicMarkInstance@@SAKXZ		; CGraphicMarkInstance::Type
PUBLIC	?IsType@CGraphicMarkInstance@@QAEHK@Z		; CGraphicMarkInstance::IsType
PUBLIC	?SetImageFileName@CGraphicMarkInstance@@QAEXPBD@Z ; CGraphicMarkInstance::SetImageFileName
PUBLIC	?GetImageFileName@CGraphicMarkInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicMarkInstance::GetImageFileName
PUBLIC	??0CGraphicMarkInstance@@QAE@XZ			; CGraphicMarkInstance::CGraphicMarkInstance
PUBLIC	??1CGraphicMarkInstance@@UAE@XZ			; CGraphicMarkInstance::~CGraphicMarkInstance
PUBLIC	?Destroy@CGraphicMarkInstance@@QAEXXZ		; CGraphicMarkInstance::Destroy
PUBLIC	?Render@CGraphicMarkInstance@@QAEXXZ		; CGraphicMarkInstance::Render
PUBLIC	?SetDiffuseColor@CGraphicMarkInstance@@QAEXMMMM@Z ; CGraphicMarkInstance::SetDiffuseColor
PUBLIC	?SetPosition@CGraphicMarkInstance@@QAEXMM@Z	; CGraphicMarkInstance::SetPosition
PUBLIC	?SetIndex@CGraphicMarkInstance@@QAEXI@Z		; CGraphicMarkInstance::SetIndex
PUBLIC	?SetScale@CGraphicMarkInstance@@QAEXM@Z		; CGraphicMarkInstance::SetScale
PUBLIC	?Load@CGraphicMarkInstance@@QAEXXZ		; CGraphicMarkInstance::Load
PUBLIC	?IsEmpty@CGraphicMarkInstance@@QBE_NXZ		; CGraphicMarkInstance::IsEmpty
PUBLIC	?GetWidth@CGraphicMarkInstance@@QAEHXZ		; CGraphicMarkInstance::GetWidth
PUBLIC	?GetHeight@CGraphicMarkInstance@@QAEHXZ		; CGraphicMarkInstance::GetHeight
PUBLIC	?GetTexturePointer@CGraphicMarkInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicMarkInstance::GetTexturePointer
PUBLIC	?GetTextureReference@CGraphicMarkInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicMarkInstance::GetTextureReference
PUBLIC	?GetGraphicImagePointer@CGraphicMarkInstance@@QAEPAVCGraphicImage@@XZ ; CGraphicMarkInstance::GetGraphicImagePointer
PUBLIC	??8CGraphicMarkInstance@@QBE_NABV0@@Z		; CGraphicMarkInstance::operator==
PUBLIC	?Initialize@CGraphicMarkInstance@@IAEXXZ	; CGraphicMarkInstance::Initialize
PUBLIC	?OnRender@CGraphicMarkInstance@@MAEXXZ		; CGraphicMarkInstance::OnRender
PUBLIC	?OnSetImagePointer@CGraphicMarkInstance@@MAEXXZ	; CGraphicMarkInstance::OnSetImagePointer
PUBLIC	?OnIsType@CGraphicMarkInstance@@MAEHK@Z		; CGraphicMarkInstance::OnIsType
PUBLIC	?SetImagePointer@CGraphicMarkInstance@@IAEXPAVCGraphicImage@@@Z ; CGraphicMarkInstance::SetImagePointer
PUBLIC	?CreateSystem@CGraphicMarkInstance@@SAXI@Z	; CGraphicMarkInstance::CreateSystem
PUBLIC	?DestroySystem@CGraphicMarkInstance@@SAXXZ	; CGraphicMarkInstance::DestroySystem
PUBLIC	?New@CGraphicMarkInstance@@SAPAV1@XZ		; CGraphicMarkInstance::New
PUBLIC	?Delete@CGraphicMarkInstance@@SAXPAV1@@Z	; CGraphicMarkInstance::Delete
PUBLIC	??_GCGraphicMarkInstance@@UAEPAXI@Z		; CGraphicMarkInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCGraphicMarkInstance@@@@UAE@XZ ; CDynamicPool<CGraphicMarkInstance>::~CDynamicPool<CGraphicMarkInstance>
PUBLIC	?Delete@?$CDynamicPool@VCGraphicMarkInstance@@@@KAXPAVCGraphicMarkInstance@@@Z ; CDynamicPool<CGraphicMarkInstance>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXQAPAVCGraphicMarkInstance@@II@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABQAVCGraphicMarkInstance@@@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEPAPAVCGraphicMarkInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Emplace_reallocate<CGraphicMarkInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicMarkInstance * *,CGraphicMarkInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A ; CGraphicMarkInstance::ms_kPool
PUBLIC	??_7CGraphicMarkInstance@@6B@			; CGraphicMarkInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0CM@NEBKKKDH@CGraphicMarkinstance?3?3Load?5?9?5?$FL?$CF@ ; `string'
PUBLIC	??_C@_0BF@BKIBHNLF@CGraphicMarkInstance@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CGraphicMarkInstance@@6B@			; CGraphicMarkInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCGraphicMarkInstance@@@8		; CGraphicMarkInstance `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicMarkInstance@@8			; CGraphicMarkInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicMarkInstance@@8			; CGraphicMarkInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicMarkInstance@@8		; CGraphicMarkInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@41400000
PUBLIC	__real@41800000
PUBLIC	__real@437f0000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?IsEmpty@CResource@@QBE_NXZ:PROC		; CResource::IsEmpty
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z:PROC ; CGraphicBase::SetDefaultIndexBuffer
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	?GetWidth@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetWidth
EXTRN	?GetHeight@CGraphicTexture@@QBEHXZ:PROC		; CGraphicTexture::GetHeight
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	?GetWidth@CGraphicImage@@QBEHXZ:PROC		; CGraphicImage::GetWidth
EXTRN	?GetTextureReference@CGraphicImage@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImage::GetTextureReference
EXTRN	?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImage::GetTexturePointer
EXTRN	??_ECGraphicMarkInstance@@UAEPAXI@Z:PROC	; CGraphicMarkInstance::`vector deleting destructor'
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetFVF@CStateManager@@QAEXK@Z:PROC		; CStateManager::SetFVF
EXTRN	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z:PROC ; CStateManager::DrawIndexedPrimitive
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetCRC32@@YAKPBDI@Z:PROC			; GetCRC32
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s_dwType@?1??Type@CGraphicMarkInstance@@SAKXZ@4KA
_BSS	SEGMENT
?s_dwType@?1??Type@CGraphicMarkInstance@@SAKXZ@4KA DD 01H DUP (?) ; `CGraphicMarkInstance::Type'::`2'::s_dwType
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA DD 01H DUP (?) ; `CGraphicMarkInstance::Type'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CGraphicMarkInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CGraphicMarkInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicMarkInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicMarkInstance@@8 DD FLAT:??_R0?AVCGraphicMarkInstance@@@8 ; CGraphicMarkInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicMarkInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicMarkInstance@@8
rdata$r	SEGMENT
??_R2CGraphicMarkInstance@@8 DD FLAT:??_R1A@?0A@EA@CGraphicMarkInstance@@8 ; CGraphicMarkInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicMarkInstance@@8
rdata$r	SEGMENT
??_R3CGraphicMarkInstance@@8 DD 00H			; CGraphicMarkInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicMarkInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicMarkInstance@@@8
data$rs	SEGMENT
??_R0?AVCGraphicMarkInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicMarkInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicMarkInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CGraphicMarkInstance@@6B@
rdata$r	SEGMENT
??_R4CGraphicMarkInstance@@6B@ DD 00H			; CGraphicMarkInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCGraphicMarkInstance@@@8
	DD	FLAT:??_R3CGraphicMarkInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKIBHNLF@CGraphicMarkInstance@
CONST	SEGMENT
??_C@_0BF@BKIBHNLF@CGraphicMarkInstance@ DB 'CGraphicMarkInstance', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NEBKKKDH@CGraphicMarkinstance?3?3Load?5?9?5?$FL?$CF@
CONST	SEGMENT
??_C@_0CM@NEBKKKDH@CGraphicMarkinstance?3?3Load?5?9?5?$FL?$CF@ DB 'CGraph'
	DB	'icMarkinstance::Load - [%s] NOT EXIST', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CGraphicMarkInstance@@6B@
CONST	SEGMENT
??_7CGraphicMarkInstance@@6B@ DD FLAT:??_R4CGraphicMarkInstance@@6B@ ; CGraphicMarkInstance::`vftable'
	DD	FLAT:??_ECGraphicMarkInstance@@UAEPAXI@Z
	DD	FLAT:?OnRender@CGraphicMarkInstance@@MAEXXZ
	DD	FLAT:?OnSetImagePointer@CGraphicMarkInstance@@MAEXXZ
	DD	FLAT:?OnIsType@CGraphicMarkInstance@@MAEHK@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCGraphicMarkInstance@@@@6B@ ; CGraphicMarkInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCGraphicImage@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CGraphicMarkInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CGraphicMarkInstance@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CGraphicMarkInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CGraphicMarkInstance@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CGraphicMarkInstance@@SAKXZ$0
__ehfuncinfo$?Type@CGraphicMarkInstance@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CGraphicMarkInstance@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CGraphicMarkInstance * *,CGraphicMarkInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CGraphicMarkInstance * *,CGraphicMarkInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCGraphicMarkInstance@@@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEPAPAVCGraphicMarkInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv495 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCGraphicMarkInstance@@@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEPAPAVCGraphicMarkInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Emplace_reallocate<CGraphicMarkInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN66@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN67@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv495[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicMarkInstance * *,CGraphicMarkInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicMarkInstance * *,CGraphicMarkInstance * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXQAPAVCGraphicMarkInstance@@II@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 921  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN66@Emplace_re:

; 888  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Xlength
$LN67@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN64@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAVCGraphicMarkInstance@@@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEPAPAVCGraphicMarkInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Emplace_reallocate<CGraphicMarkInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CGraphicMarkInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A ; CGraphicMarkInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCGraphicMarkInstance@@@@UAE@XZ ; CDynamicPool<CGraphicMarkInstance>::~CDynamicPool<CGraphicMarkInstance>
??__F?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CGraphicMarkInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ??__E?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CGraphicMarkInstance::ms_kPool'', COMDAT

; 8    : CDynamicPool<CGraphicMarkInstance> CGraphicMarkInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CGraphicMarkInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CGraphicMarkInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCGraphicMarkInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCGraphicMarkInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CGraphicMarkInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCGraphicMarkInstance@@@@UAE@XZ ; CDynamicPool<CGraphicMarkInstance>::~CDynamicPool<CGraphicMarkInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCGraphicMarkInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CGraphicMarkInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXQAPAVCGraphicMarkInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXQAPAVCGraphicMarkInstance@@II@Z PROC ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXQAPAVCGraphicMarkInstance@@II@Z ENDP ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1665 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1666 :         auto& _Al         = _Getal();
; 1667 :         auto& _My_data    = _Mypair._Myval2;
; 1668 :         pointer& _Myfirst = _My_data._Myfirst;
; 1669 :         pointer& _Mylast  = _My_data._Mylast;
; 1670 : 
; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN55@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 77   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCGraphicMarkInstance@@PAPAV1@@std@@YAPAPAVCGraphicMarkInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CGraphicMarkInstance * *,CGraphicMarkInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN39@Reallocate

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN49@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN46@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN49@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN39@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1687 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN46@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN53@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCGraphicMarkInstance@@@@KAXPAVCGraphicMarkInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCGraphicMarkInstance@@@@KAXPAVCGraphicMarkInstance@@@Z PROC ; CDynamicPool<CGraphicMarkInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCGraphicMarkInstance@@@@KAXPAVCGraphicMarkInstance@@@Z ENDP ; CDynamicPool<CGraphicMarkInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCGraphicMarkInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCGraphicMarkInstance@@@@UAE@XZ PROC	; CDynamicPool<CGraphicMarkInstance>::~CDynamicPool<CGraphicMarkInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCGraphicMarkInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCGraphicMarkInstance@@@@UAE@XZ ENDP	; CDynamicPool<CGraphicMarkInstance>::~CDynamicPool<CGraphicMarkInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCGraphicMarkInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGraphicMarkInstance@@UAEPAXI@Z PROC		; CGraphicMarkInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CGraphicMarkInstance@@UAE@XZ ; CGraphicMarkInstance::~CGraphicMarkInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCGraphicMarkInstance@@UAEPAXI@Z ENDP		; CGraphicMarkInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?Delete@CGraphicMarkInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkImgInst$ = 8						; size = 4
?Delete@CGraphicMarkInstance@@SAXPAV1@@Z PROC		; CGraphicMarkInstance::Delete, COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 37   : 	pkImgInst->Destroy();

  00004	8b 75 08	 mov	 esi, DWORD PTR _pkImgInst$[ebp]
  00007	8b ce		 mov	 ecx, esi
  00009	e8 00 00 00 00	 call	 ?Destroy@CGraphicMarkInstance@@QAEXXZ ; CGraphicMarkInstance::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000e	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 38   : 	ms_kPool.Free(pkImgInst);

  00013	89 75 08	 mov	 DWORD PTR _pkData$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00016	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+24
  0001c	74 0c		 je	 SHORT $LN8@Delete

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0001e	89 30		 mov	 DWORD PTR [eax], esi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00020	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+20, 4
  00027	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 39   : }

  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0002a	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  0002d	51		 push	 ecx
  0002e	50		 push	 eax
  0002f	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+16
  00034	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicMarkInstance@@@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEPAPAVCGraphicMarkInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Emplace_reallocate<CGraphicMarkInstance * const &>
  00039	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 39   : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?Delete@CGraphicMarkInstance@@SAXPAV1@@Z ENDP		; CGraphicMarkInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?New@CGraphicMarkInstance@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
_pkNewData$2 = -4					; size = 4
?New@CGraphicMarkInstance@@SAPAV1@XZ PROC		; CGraphicMarkInstance::New, COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+20
  0000a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00010	75 5c		 jne	 SHORT $LN4@New

; 65   : 			T* pkNewData = new T;

  00012	6a 44		 push	 68			; 00000044H
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001f	85 c0		 test	 eax, eax
  00021	74 09		 je	 SHORT $LN6@New
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ??0CGraphicMarkInstance@@QAE@XZ ; CGraphicMarkInstance::CGraphicMarkInstance
  0002a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0002c	33 c0		 xor	 eax, eax
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0002e	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00034	89 45 fc	 mov	 DWORD PTR _pkNewData$2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00037	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+12
  0003d	74 13		 je	 SHORT $LN14@New

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00041	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00048	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 33   : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00052	8d 45 fc	 lea	 eax, DWORD PTR _pkNewData$2[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+4
  0005c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCGraphicMarkInstance@@@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEPAPAVCGraphicMarkInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Emplace_reallocate<CGraphicMarkInstance * const &>
  00061	8b 45 fc	 mov	 eax, DWORD PTR _pkNewData$2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00064	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 33   : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN4@New:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  0006e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  00071	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00074	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+20, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 33   : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?New@CGraphicMarkInstance@@SAPAV1@XZ ENDP		; CGraphicMarkInstance::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?DestroySystem@CGraphicMarkInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CGraphicMarkInstance@@SAXXZ PROC		; CGraphicMarkInstance::DestroySystem, COMDAT

; 26   : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 26   : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 21		 je	 SHORT $LN38@DestroySys
$LL20@DestroySys:

; 266  :         _Func(*_UFirst);

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN26@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN26@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
$LN38@DestroySys:
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+20
  00039	0f 45 fe	 cmovne	 edi, esi
  0003c	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+16, ecx
  00042	89 3d 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+8, edi
  00048	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+16
  0004f	5f		 pop	 edi
  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+20, ecx
  00056	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 28   : }

  00057	c3		 ret	 0
?DestroySystem@CGraphicMarkInstance@@SAXXZ ENDP		; CGraphicMarkInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?CreateSystem@CGraphicMarkInstance@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CGraphicMarkInstance@@SAXI@Z PROC		; CGraphicMarkInstance::CreateSystem, COMDAT

; 21   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+12
  00008	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 21   : {

  0000e	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  0000f	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  00015	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+28, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0001b	3b f0		 cmp	 esi, eax
  0001d	76 13		 jbe	 SHORT $LN6@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  0001f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00025	77 33		 ja	 SHORT $LN19@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  00027	56		 push	 esi
  00028	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+4
  0002d	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Reallocate_exactly
$LN6@CreateSyst:

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00032	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+24
  00037	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+16
  0003d	c1 f8 02	 sar	 eax, 2

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00040	3b f0		 cmp	 esi, eax
  00042	76 13		 jbe	 SHORT $LN13@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  00044	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004a	77 0e		 ja	 SHORT $LN19@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  0004c	56		 push	 esi
  0004d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CGraphicMarkInstance@@2V?$CDynamicPool@VCGraphicMarkInstance@@@@A+16
  00052	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@AAEXI@Z ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Reallocate_exactly
$LN13@CreateSyst:
  00057	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 23   : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN19@CreateSyst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1745 :                 _Xlength();

  0005a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCGraphicMarkInstance@@V?$allocator@PAVCGraphicMarkInstance@@@std@@@std@@CAXXZ ; std::vector<CGraphicMarkInstance *,std::allocator<CGraphicMarkInstance *> >::_Xlength
$LN21@CreateSyst:
  0005f	cc		 int	 3
?CreateSystem@CGraphicMarkInstance@@SAXI@Z ENDP		; CGraphicMarkInstance::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?SetImagePointer@CGraphicMarkInstance@@IAEXPAVCGraphicImage@@@Z
_TEXT	SEGMENT
_pImage$ = 8						; size = 4
?SetImagePointer@CGraphicMarkInstance@@IAEXPAVCGraphicImage@@@Z PROC ; CGraphicMarkInstance::SetImagePointer, COMDAT
; _this$ = ecx

; 204  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 69   : 		m_pObject = pObject;

  00006	8b 4d 08	 mov	 ecx, DWORD PTR _pImage$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 204  : {

  00009	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 67   : 		CReferenceObject* pOldObject = m_pObject;

  0000a	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]

; 69   : 		m_pObject = pObject;

  0000d	89 4e 28	 mov	 DWORD PTR [esi+40], ecx

; 70   : 
; 71   : 		if (m_pObject)

  00010	85 c9		 test	 ecx, ecx
  00012	74 05		 je	 SHORT $LN4@SetImagePo

; 72   : 		{
; 73   : 			m_pObject->AddReference();

  00014	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN4@SetImagePo:

; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  00019	85 ff		 test	 edi, edi
  0001b	74 07		 je	 SHORT $LN5@SetImagePo

; 77   : 		{
; 78   : 			pOldObject->Release();

  0001d	8b cf		 mov	 ecx, edi
  0001f	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN5@SetImagePo:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 207  : 	OnSetImagePointer();

  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	8b ce		 mov	 ecx, esi
  00028	ff 50 08	 call	 DWORD PTR [eax+8]
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 208  : }

  0002d	5d		 pop	 ebp
  0002e	c2 04 00	 ret	 4
?SetImagePointer@CGraphicMarkInstance@@IAEXPAVCGraphicImage@@@Z ENDP ; CGraphicMarkInstance::SetImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?OnIsType@CGraphicMarkInstance@@MAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?OnIsType@CGraphicMarkInstance@@MAEHK@Z PROC		; CGraphicMarkInstance::OnIsType, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 238  : 	if (CGraphicMarkInstance::Type() == dwType)

  00003	e8 00 00 00 00	 call	 ?Type@CGraphicMarkInstance@@SAKXZ ; CGraphicMarkInstance::Type
  00008	33 c9		 xor	 ecx, ecx
  0000a	3b 45 08	 cmp	 eax, DWORD PTR _dwType$[ebp]
  0000d	0f 94 c1	 sete	 cl
  00010	8b c1		 mov	 eax, ecx

; 239  : 	{
; 240  : 		return TRUE;
; 241  : 	}
; 242  : 
; 243  : 	return FALSE;
; 244  : }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?OnIsType@CGraphicMarkInstance@@MAEHK@Z ENDP		; CGraphicMarkInstance::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?OnSetImagePointer@CGraphicMarkInstance@@MAEXXZ
_TEXT	SEGMENT
?OnSetImagePointer@CGraphicMarkInstance@@MAEXXZ PROC	; CGraphicMarkInstance::OnSetImagePointer, COMDAT
; _this$ = ecx

; 248  : }

  00000	c2 00 00	 ret	 0
?OnSetImagePointer@CGraphicMarkInstance@@MAEXXZ ENDP	; CGraphicMarkInstance::OnSetImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?OnRender@CGraphicMarkInstance@@MAEXXZ
_TEXT	SEGMENT
_su$1$ = -140						; size = 4
tv975 = -136						; size = 4
_sv$1$ = -132						; size = 4
tv959 = -128						; size = 4
_eu$1$ = -124						; size = 4
_fRenderHeight$1$ = -120				; size = 4
tv994 = -120						; size = 4
_fRenderWidth$1$ = -116					; size = 4
tv993 = -116						; size = 4
_pTexture$1$ = -112					; size = 4
_ev$1$ = -108						; size = 4
_texReverseWidth$1$ = -108				; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_dwR$1$ = -104						; size = 4
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?OnRender@CGraphicMarkInstance@@MAEXXZ PROC		; CGraphicMarkInstance::OnRender, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 8c 00 00
	00		 sub	 esp, 140		; 0000008cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	56		 push	 esi

; 55   : 	CGraphicImage * pImage = m_roImage.GetPointer();

  00017	8b 73 28	 mov	 esi, DWORD PTR [ebx+40]

; 56   : 	CGraphicTexture * pTexture = pImage->GetTexturePointer();

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ ; CGraphicImage::GetTexturePointer

; 57   : 
; 58   : 	UINT uColCount = pImage->GetWidth() / MARK_WIDTH;

  00021	8b ce		 mov	 ecx, esi
  00023	89 45 90	 mov	 DWORD PTR _pTexture$1$[ebp], eax
  00026	e8 00 00 00 00	 call	 ?GetWidth@CGraphicImage@@QBEHXZ ; CGraphicImage::GetWidth
  0002b	99		 cdq
  0002c	83 e2 0f	 and	 edx, 15			; 0000000fH
  0002f	8d 34 02	 lea	 esi, DWORD PTR [edx+eax]
  00032	c1 fe 04	 sar	 esi, 4

; 59   : 
; 60   : 	if (uColCount == 0)

  00035	85 f6		 test	 esi, esi
  00037	0f 84 30 06 00
	00		 je	 $LN3@OnRender

; 61   : 	{
; 62   : 		return;
; 63   : 	}
; 64   : 
; 65   : 	UINT uCol = m_uIndex % uColCount;

  0003d	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00040	33 d2		 xor	 edx, edx
  00042	f7 f6		 div	 esi

; 66   : 	UINT uRow = m_uIndex / uColCount;

  00044	8b 43 1c	 mov	 eax, DWORD PTR [ebx+28]
  00047	57		 push	 edi
  00048	8b fa		 mov	 edi, edx

; 71   : 	kRect.right = kRect.left + MARK_WIDTH;
; 72   : 	kRect.bottom = kRect.top + MARK_HEIGHT;
; 73   : 
; 74   : 	float texReverseWidth = 1.0f / float(pTexture->GetWidth());

  0004a	8b 4d 90	 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  0004d	33 d2		 xor	 edx, edx
  0004f	c1 e7 04	 shl	 edi, 4
  00052	f7 f6		 div	 esi
  00054	8d 34 40	 lea	 esi, DWORD PTR [eax+eax*2]
  00057	c1 e6 02	 shl	 esi, 2
  0005a	e8 00 00 00 00	 call	 ?GetWidth@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetWidth
  0005f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000

; 75   : 	float texReverseHeight = 1.0f / float(pTexture->GetHeight());

  00067	8b 4d 90	 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  0006a	66 0f 6e c0	 movd	 xmm0, eax
  0006e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00071	f3 0f 5e c8	 divss	 xmm1, xmm0
  00075	f3 0f 11 4d 94	 movss	 DWORD PTR _texReverseWidth$1$[ebp], xmm1
  0007a	e8 00 00 00 00	 call	 ?GetHeight@CGraphicTexture@@QBEHXZ ; CGraphicTexture::GetHeight
  0007f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00087	0f 57 d2	 xorps	 xmm2, xmm2
  0008a	66 0f 6e de	 movd	 xmm3, esi
  0008e	66 0f 6e e7	 movd	 xmm4, edi
  00092	66 0f 6e c0	 movd	 xmm0, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 70   : 	kRect.top = uRow * MARK_HEIGHT;

  00096	8d 47 10	 lea	 eax, DWORD PTR [edi+16]

; 75   : 	float texReverseHeight = 1.0f / float(pTexture->GetHeight());

  00099	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 87   : 	vertices[0].position.z	= 0.0f;

  0009c	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
  000a3	66 0f 6e e8	 movd	 xmm5, eax
  000a7	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000aa	f3 0f 5e c8	 divss	 xmm1, xmm0
  000ae	66 0f 6e c0	 movd	 xmm0, eax
  000b2	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000b5	0f 5b db	 cvtdq2ps xmm3, xmm3
  000b8	f3 0f 59 c1	 mulss	 xmm0, xmm1
  000bc	0f 5b e4	 cvtdq2ps xmm4, xmm4
  000bf	0f 5b ed	 cvtdq2ps xmm5, xmm5
  000c2	f3 0f 59 65 94	 mulss	 xmm4, DWORD PTR _texReverseWidth$1$[ebp]
  000c7	f3 0f 59 6d 94	 mulss	 xmm5, DWORD PTR _texReverseWidth$1$[ebp]
  000cc	f3 0f 59 d9	 mulss	 xmm3, xmm1
  000d0	f3 0f 10 4b 20	 movss	 xmm1, DWORD PTR [ebx+32]
  000d5	f3 0f 11 45 94	 movss	 DWORD PTR _ev$1$[ebp], xmm0
  000da	0f 28 c1	 movaps	 xmm0, xmm1
  000dd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  000e5	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@41400000
  000ed	f3 0f 11 45 8c	 movss	 DWORD PTR _fRenderWidth$1$[ebp], xmm0
  000f2	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR [ebx+20]
  000f7	f3 0f 11 4d 88	 movss	 DWORD PTR _fRenderHeight$1$[ebp], xmm1
  000fc	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00104	f3 0f 5c c1	 subss	 xmm0, xmm1
  00108	f3 0f 11 9d 7c
	ff ff ff	 movss	 DWORD PTR _sv$1$[ebp], xmm3

; 88   : 	vertices[0].texCoord	= TTextureCoordinate(su, sv);

  00110	f3 0f 11 5d b0	 movss	 DWORD PTR _vertices$[ebp+20], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00115	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 76   : 	float su = kRect.left * texReverseWidth;

  0011d	f3 0f 11 a5 74
	ff ff ff	 movss	 DWORD PTR _su$1$[ebp], xmm4

; 77   : 	float sv = kRect.top * texReverseHeight;
; 78   : 	float eu = kRect.right * texReverseWidth;

  00125	f3 0f 11 6d 84	 movss	 DWORD PTR _eu$1$[ebp], xmm5

; 79   : 	float ev = kRect.bottom * texReverseHeight;
; 80   : 
; 81   : 	float fRenderWidth = MARK_WIDTH * m_fScale;
; 82   : 	float fRenderHeight = MARK_HEIGHT * m_fScale;
; 83   : 
; 84   : 	TPDTVertex vertices[4];
; 85   : 	vertices[0].position.x	= m_v2Position.x - 0.5f;

  0012a	f3 0f 11 85 78
	ff ff ff	 movss	 DWORD PTR tv975[ebp], xmm0
  00132	f3 0f 11 45 9c	 movss	 DWORD PTR _vertices$[ebp], xmm0

; 86   : 	vertices[0].position.y	= m_v2Position.y - 0.5f;

  00137	f3 0f 10 43 18	 movss	 xmm0, DWORD PTR [ebx+24]
  0013c	f3 0f 5c c1	 subss	 xmm0, xmm1

; 88   : 	vertices[0].texCoord	= TTextureCoordinate(su, sv);

  00140	f3 0f 11 65 ac	 movss	 DWORD PTR _vertices$[ebp+16], xmm4
  00145	f3 0f 11 45 80	 movss	 DWORD PTR tv959[ebp], xmm0
  0014a	f3 0f 11 45 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0014f	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  00154	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0015b	72 09		 jb	 SHORT $LN17@OnRender
  0015d	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00164	eb 31		 jmp	 SHORT $LN16@OnRender
$LN17@OnRender:
  00166	0f 2f d0	 comiss	 xmm2, xmm0
  00169	72 09		 jb	 SHORT $LN15@OnRender
  0016b	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00172	eb 23		 jmp	 SHORT $LN16@OnRender
$LN15@OnRender:
  00174	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00178	f3 0f 58 c1	 addss	 xmm0, xmm1
  0017c	e8 00 00 00 00	 call	 __ftol3
  00181	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00189	0f 57 d2	 xorps	 xmm2, xmm2
  0018c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@437f0000
  00194	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN16@OnRender:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00197	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  0019c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001a3	72 07		 jb	 SHORT $LN21@OnRender
  001a5	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  001aa	eb 18		 jmp	 SHORT $LN20@OnRender
$LN21@OnRender:
  001ac	0f 2f d0	 comiss	 xmm2, xmm0
  001af	72 04		 jb	 SHORT $LN19@OnRender
  001b1	33 ff		 xor	 edi, edi
  001b3	eb 0f		 jmp	 SHORT $LN20@OnRender
$LN19@OnRender:
  001b5	f3 0f 59 c3	 mulss	 xmm0, xmm3
  001b9	f3 0f 58 c1	 addss	 xmm0, xmm1
  001bd	e8 00 00 00 00	 call	 __ftol3
  001c2	8b f8		 mov	 edi, eax
$LN20@OnRender:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  001c4	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  001c9	0f 57 c9	 xorps	 xmm1, xmm1
  001cc	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001d3	72 07		 jb	 SHORT $LN25@OnRender
  001d5	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  001da	eb 23		 jmp	 SHORT $LN24@OnRender
$LN25@OnRender:
  001dc	0f 2f c8	 comiss	 xmm1, xmm0
  001df	72 04		 jb	 SHORT $LN23@OnRender
  001e1	33 f6		 xor	 esi, esi
  001e3	eb 1a		 jmp	 SHORT $LN24@OnRender
$LN23@OnRender:
  001e5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  001ed	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  001f5	e8 00 00 00 00	 call	 __ftol3
  001fa	8b f0		 mov	 esi, eax
  001fc	0f 57 c9	 xorps	 xmm1, xmm1
$LN24@OnRender:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  001ff	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00204	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0020c	0f 2f c2	 comiss	 xmm0, xmm2
  0020f	72 07		 jb	 SHORT $LN29@OnRender
  00211	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00216	eb 26		 jmp	 SHORT $LN28@OnRender
$LN29@OnRender:
  00218	0f 2f c8	 comiss	 xmm1, xmm0
  0021b	72 04		 jb	 SHORT $LN27@OnRender
  0021d	33 c0		 xor	 eax, eax
  0021f	eb 1d		 jmp	 SHORT $LN28@OnRender
$LN27@OnRender:
  00221	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00229	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00231	e8 00 00 00 00	 call	 __ftol3
  00236	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
$LN28@OnRender:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 91   : 	vertices[1].position.x	= m_v2Position.x + fRenderWidth - 0.5f;

  0023e	f3 0f 10 43 14	 movss	 xmm0, DWORD PTR [ebx+20]
  00243	f3 0f 58 45 8c	 addss	 xmm0, DWORD PTR _fRenderWidth$1$[ebp]
  00248	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00250	c1 e0 08	 shl	 eax, 8
  00253	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  00256	c1 e0 08	 shl	 eax, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 91   : 	vertices[1].position.x	= m_v2Position.x + fRenderWidth - 0.5f;

  00259	f3 0f 5c c1	 subss	 xmm0, xmm1

; 93   : 	vertices[1].position.z	= 0.0f;

  0025d	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+32], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00264	0b c7		 or	 eax, edi
  00266	c1 e0 08	 shl	 eax, 8
  00269	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 89   : 	vertices[0].diffuse		= m_DiffuseColor;

  0026b	89 45 a8	 mov	 DWORD PTR _vertices$[ebp+12], eax

; 91   : 	vertices[1].position.x	= m_v2Position.x + fRenderWidth - 0.5f;

  0026e	f3 0f 11 45 8c	 movss	 DWORD PTR tv993[ebp], xmm0
  00273	f3 0f 11 45 b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm0

; 92   : 	vertices[1].position.y	= m_v2Position.y - 0.5f;

  00278	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR tv959[ebp]
  0027d	f3 0f 11 45 b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm0

; 94   : 	vertices[1].texCoord	= TTextureCoordinate(eu, sv);

  00282	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _eu$1$[ebp]
  00287	f3 0f 11 45 c4	 movss	 DWORD PTR _vertices$[ebp+40], xmm0
  0028c	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _sv$1$[ebp]
  00294	f3 0f 11 45 c8	 movss	 DWORD PTR _vertices$[ebp+44], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00299	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  0029e	0f 2f c2	 comiss	 xmm0, xmm2
  002a1	0f 57 d2	 xorps	 xmm2, xmm2
  002a4	72 09		 jb	 SHORT $LN37@OnRender
  002a6	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  002ad	eb 2d		 jmp	 SHORT $LN36@OnRender
$LN37@OnRender:
  002af	0f 2f d0	 comiss	 xmm2, xmm0
  002b2	72 09		 jb	 SHORT $LN35@OnRender
  002b4	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  002bb	eb 1f		 jmp	 SHORT $LN36@OnRender
$LN35@OnRender:
  002bd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002c5	f3 0f 58 c1	 addss	 xmm0, xmm1
  002c9	e8 00 00 00 00	 call	 __ftol3
  002ce	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  002d6	0f 57 d2	 xorps	 xmm2, xmm2
  002d9	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN36@OnRender:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  002dc	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  002e1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  002e8	72 07		 jb	 SHORT $LN41@OnRender
  002ea	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  002ef	eb 1c		 jmp	 SHORT $LN40@OnRender
$LN41@OnRender:
  002f1	0f 2f d0	 comiss	 xmm2, xmm0
  002f4	72 04		 jb	 SHORT $LN39@OnRender
  002f6	33 ff		 xor	 edi, edi
  002f8	eb 13		 jmp	 SHORT $LN40@OnRender
$LN39@OnRender:
  002fa	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00302	f3 0f 58 c1	 addss	 xmm0, xmm1
  00306	e8 00 00 00 00	 call	 __ftol3
  0030b	8b f8		 mov	 edi, eax
$LN40@OnRender:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  0030d	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  00312	0f 57 c9	 xorps	 xmm1, xmm1
  00315	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0031c	72 07		 jb	 SHORT $LN45@OnRender
  0031e	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00323	eb 23		 jmp	 SHORT $LN44@OnRender
$LN45@OnRender:
  00325	0f 2f c8	 comiss	 xmm1, xmm0
  00328	72 04		 jb	 SHORT $LN43@OnRender
  0032a	33 f6		 xor	 esi, esi
  0032c	eb 1a		 jmp	 SHORT $LN44@OnRender
$LN43@OnRender:
  0032e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00336	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0033e	e8 00 00 00 00	 call	 __ftol3
  00343	8b f0		 mov	 esi, eax
  00345	0f 57 c9	 xorps	 xmm1, xmm1
$LN44@OnRender:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00348	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  0034d	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  00355	0f 2f c2	 comiss	 xmm0, xmm2
  00358	72 07		 jb	 SHORT $LN49@OnRender
  0035a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0035f	eb 26		 jmp	 SHORT $LN48@OnRender
$LN49@OnRender:
  00361	0f 2f c8	 comiss	 xmm1, xmm0
  00364	72 04		 jb	 SHORT $LN47@OnRender
  00366	33 c0		 xor	 eax, eax
  00368	eb 1d		 jmp	 SHORT $LN48@OnRender
$LN47@OnRender:
  0036a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00372	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0037a	e8 00 00 00 00	 call	 __ftol3
  0037f	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
$LN48@OnRender:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 97   : 	vertices[2].position.x	= m_v2Position.x - 0.5f;

  00387	f3 0f 10 85 78
	ff ff ff	 movss	 xmm0, DWORD PTR tv975[ebp]

; 98   : 	vertices[2].position.y	= m_v2Position.y + fRenderHeight - 0.5f;

  0038f	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00397	f3 0f 11 45 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm0
  0039c	f3 0f 10 43 18	 movss	 xmm0, DWORD PTR [ebx+24]
  003a1	f3 0f 58 45 88	 addss	 xmm0, DWORD PTR _fRenderHeight$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003a6	c1 e0 08	 shl	 eax, 8
  003a9	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  003ac	c1 e0 08	 shl	 eax, 8
  003af	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 99   : 	vertices[2].position.z	= 0.0f;

  003b1	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+56], 0
  003b8	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  003bc	c1 e0 08	 shl	 eax, 8
  003bf	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 95   : 	vertices[1].diffuse		= m_DiffuseColor;

  003c1	89 45 c0	 mov	 DWORD PTR _vertices$[ebp+36], eax

; 98   : 	vertices[2].position.y	= m_v2Position.y + fRenderHeight - 0.5f;

  003c4	f3 0f 11 45 88	 movss	 DWORD PTR tv994[ebp], xmm0
  003c9	f3 0f 11 45 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm0

; 100  : 	vertices[2].texCoord	= TTextureCoordinate(su, ev);

  003ce	f3 0f 10 85 74
	ff ff ff	 movss	 xmm0, DWORD PTR _su$1$[ebp]
  003d6	f3 0f 11 45 dc	 movss	 DWORD PTR _vertices$[ebp+64], xmm0
  003db	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _ev$1$[ebp]
  003e0	f3 0f 11 45 e0	 movss	 DWORD PTR _vertices$[ebp+68], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  003e5	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  003ea	0f 2f c2	 comiss	 xmm0, xmm2
  003ed	0f 57 d2	 xorps	 xmm2, xmm2
  003f0	72 09		 jb	 SHORT $LN57@OnRender
  003f2	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  003f9	eb 2d		 jmp	 SHORT $LN56@OnRender
$LN57@OnRender:
  003fb	0f 2f d0	 comiss	 xmm2, xmm0
  003fe	72 09		 jb	 SHORT $LN55@OnRender
  00400	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  00407	eb 1f		 jmp	 SHORT $LN56@OnRender
$LN55@OnRender:
  00409	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00411	f3 0f 58 c1	 addss	 xmm0, xmm1
  00415	e8 00 00 00 00	 call	 __ftol3
  0041a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00422	0f 57 d2	 xorps	 xmm2, xmm2
  00425	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
$LN56@OnRender:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00428	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  0042d	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00434	72 07		 jb	 SHORT $LN61@OnRender
  00436	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0043b	eb 1c		 jmp	 SHORT $LN60@OnRender
$LN61@OnRender:
  0043d	0f 2f d0	 comiss	 xmm2, xmm0
  00440	72 04		 jb	 SHORT $LN59@OnRender
  00442	33 ff		 xor	 edi, edi
  00444	eb 13		 jmp	 SHORT $LN60@OnRender
$LN59@OnRender:
  00446	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0044e	f3 0f 58 c1	 addss	 xmm0, xmm1
  00452	e8 00 00 00 00	 call	 __ftol3
  00457	8b f8		 mov	 edi, eax
$LN60@OnRender:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00459	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  0045e	0f 57 c9	 xorps	 xmm1, xmm1
  00461	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00468	72 07		 jb	 SHORT $LN65@OnRender
  0046a	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0046f	eb 23		 jmp	 SHORT $LN64@OnRender
$LN65@OnRender:
  00471	0f 2f c8	 comiss	 xmm1, xmm0
  00474	72 04		 jb	 SHORT $LN63@OnRender
  00476	33 f6		 xor	 esi, esi
  00478	eb 1a		 jmp	 SHORT $LN64@OnRender
$LN63@OnRender:
  0047a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00482	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0048a	e8 00 00 00 00	 call	 __ftol3
  0048f	8b f0		 mov	 esi, eax
  00491	0f 57 c9	 xorps	 xmm1, xmm1
$LN64@OnRender:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00494	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  00499	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004a0	72 07		 jb	 SHORT $LN69@OnRender
  004a2	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  004a7	eb 1e		 jmp	 SHORT $LN68@OnRender
$LN69@OnRender:
  004a9	0f 2f c8	 comiss	 xmm1, xmm0
  004ac	72 04		 jb	 SHORT $LN67@OnRender
  004ae	33 c0		 xor	 eax, eax
  004b0	eb 15		 jmp	 SHORT $LN68@OnRender
$LN67@OnRender:
  004b2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004ba	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004c2	e8 00 00 00 00	 call	 __ftol3
$LN68@OnRender:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 103  : 	vertices[3].position.x	= m_v2Position.x + fRenderWidth - 0.5f;

  004c7	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR tv993[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  004cc	0f 57 c9	 xorps	 xmm1, xmm1

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004cf	c1 e0 08	 shl	 eax, 8
  004d2	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 103  : 	vertices[3].position.x	= m_v2Position.x + fRenderWidth - 0.5f;

  004d5	f3 0f 11 45 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm0

; 104  : 	vertices[3].position.y	= m_v2Position.y + fRenderHeight - 0.5f;

  004da	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR tv994[ebp]
  004df	f3 0f 11 45 e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm0

; 106  : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004e4	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _eu$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004e9	c1 e0 08	 shl	 eax, 8
  004ec	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 106  : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004ee	f3 0f 11 45 f4	 movss	 DWORD PTR _vertices$[ebp+88], xmm0
  004f3	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _ev$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  004f8	c1 e0 08	 shl	 eax, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 106  : 	vertices[3].texCoord	= TTextureCoordinate(eu, ev);

  004fb	f3 0f 11 45 f8	 movss	 DWORD PTR _vertices$[ebp+92], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00500	0b c6		 or	 eax, esi

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00502	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [ebx+4]
  00507	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 101  : 	vertices[2].diffuse		= m_DiffuseColor;

  0050e	89 45 d8	 mov	 DWORD PTR _vertices$[ebp+60], eax

; 105  : 	vertices[3].position.z	= 0.0f;

  00511	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+80], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00518	72 09		 jb	 SHORT $LN77@OnRender
  0051a	c7 45 98 ff 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 255 ; 000000ffH
  00521	eb 29		 jmp	 SHORT $LN76@OnRender
$LN77@OnRender:
  00523	0f 2f c8	 comiss	 xmm1, xmm0
  00526	72 09		 jb	 SHORT $LN75@OnRender
  00528	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _dwR$1$[ebp], 0
  0052f	eb 1b		 jmp	 SHORT $LN76@OnRender
$LN75@OnRender:
  00531	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00539	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00541	e8 00 00 00 00	 call	 __ftol3
  00546	89 45 98	 mov	 DWORD PTR _dwR$1$[ebp], eax
  00549	0f 57 c9	 xorps	 xmm1, xmm1
$LN76@OnRender:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  0054c	f3 0f 10 43 08	 movss	 xmm0, DWORD PTR [ebx+8]
  00551	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00558	72 07		 jb	 SHORT $LN81@OnRender
  0055a	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0055f	eb 20		 jmp	 SHORT $LN80@OnRender
$LN81@OnRender:
  00561	0f 2f c8	 comiss	 xmm1, xmm0
  00564	72 04		 jb	 SHORT $LN79@OnRender
  00566	33 ff		 xor	 edi, edi
  00568	eb 17		 jmp	 SHORT $LN80@OnRender
$LN79@OnRender:
  0056a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00572	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0057a	e8 00 00 00 00	 call	 __ftol3
  0057f	8b f8		 mov	 edi, eax
$LN80@OnRender:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00581	f3 0f 10 43 0c	 movss	 xmm0, DWORD PTR [ebx+12]
  00586	0f 57 c9	 xorps	 xmm1, xmm1
  00589	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00590	72 07		 jb	 SHORT $LN85@OnRender
  00592	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00597	eb 23		 jmp	 SHORT $LN84@OnRender
$LN85@OnRender:
  00599	0f 2f c8	 comiss	 xmm1, xmm0
  0059c	72 04		 jb	 SHORT $LN83@OnRender
  0059e	33 f6		 xor	 esi, esi
  005a0	eb 1a		 jmp	 SHORT $LN84@OnRender
$LN83@OnRender:
  005a2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  005aa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  005b2	e8 00 00 00 00	 call	 __ftol3
  005b7	8b f0		 mov	 esi, eax
  005b9	0f 57 c9	 xorps	 xmm1, xmm1
$LN84@OnRender:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  005bc	f3 0f 10 43 10	 movss	 xmm0, DWORD PTR [ebx+16]
  005c1	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005c8	72 07		 jb	 SHORT $LN89@OnRender
  005ca	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  005cf	eb 1e		 jmp	 SHORT $LN88@OnRender
$LN89@OnRender:
  005d1	0f 2f c8	 comiss	 xmm1, xmm0
  005d4	72 04		 jb	 SHORT $LN87@OnRender
  005d6	33 c0		 xor	 eax, eax
  005d8	eb 15		 jmp	 SHORT $LN88@OnRender
$LN87@OnRender:
  005da	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  005e2	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  005ea	e8 00 00 00 00	 call	 __ftol3
$LN88@OnRender:

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  005ef	c1 e0 08	 shl	 eax, 8
  005f2	0b 45 98	 or	 eax, DWORD PTR _dwR$1$[ebp]
  005f5	c1 e0 08	 shl	 eax, 8
  005f8	0b c7		 or	 eax, edi
  005fa	c1 e0 08	 shl	 eax, 8
  005fd	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 107  : 	vertices[3].diffuse		= m_DiffuseColor;

  005ff	89 45 f0	 mov	 DWORD PTR _vertices$[ebp+84], eax

; 108  : 
; 109  : 	if (CGraphicBase::SetPDTStream(vertices, 4))

  00602	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00605	6a 04		 push	 4
  00607	50		 push	 eax
  00608	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  0060d	83 c4 08	 add	 esp, 8
  00610	5f		 pop	 edi
  00611	84 c0		 test	 al, al
  00613	74 58		 je	 SHORT $LN3@OnRender

; 110  : 	{
; 111  : 		CGraphicBase::SetDefaultIndexBuffer(CGraphicBase::DEFAULT_IB_FILL_RECT);

  00615	6a 05		 push	 5
  00617	e8 00 00 00 00	 call	 ?SetDefaultIndexBuffer@CGraphicBase@@SAXI@Z ; CGraphicBase::SetDefaultIndexBuffer

; 112  : 
; 113  : 		STATEMANAGER.SetTexture(0, pTexture->GetD3DTexture());

  0061c	8b 4d 90	 mov	 ecx, DWORD PTR _pTexture$1$[ebp]
  0061f	83 c4 04	 add	 esp, 4
  00622	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00628	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  0062d	50		 push	 eax
  0062e	6a 00		 push	 0
  00630	8b ce		 mov	 ecx, esi
  00632	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 114  : 		STATEMANAGER.SetTexture(1, NULL);

  00637	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0063d	6a 00		 push	 0
  0063f	6a 01		 push	 1
  00641	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 115  : 		STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  00646	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0064c	68 42 01 00 00	 push	 322			; 00000142H
  00651	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 116  : 		STATEMANAGER.DrawIndexedPrimitive(D3DPT_TRIANGLELIST, 0, 4, 0, 2);

  00656	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0065c	6a 00		 push	 0
  0065e	6a 02		 push	 2
  00660	6a 00		 push	 0
  00662	6a 04		 push	 4
  00664	6a 00		 push	 0
  00666	6a 04		 push	 4
  00668	e8 00 00 00 00	 call	 ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
$LN3@OnRender:

; 117  : 		//OLD: STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLELIST, 0, 4, 2, c_FillRectIndices, D3DFMT_INDEX16, vertices, sizeof(TPDTVertex));
; 118  : 	}
; 119  : }

  0066d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00670	5e		 pop	 esi
  00671	33 cd		 xor	 ecx, ebp
  00673	5b		 pop	 ebx
  00674	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00679	8b e5		 mov	 esp, ebp
  0067b	5d		 pop	 ebp
  0067c	c3		 ret	 0
?OnRender@CGraphicMarkInstance@@MAEXXZ ENDP		; CGraphicMarkInstance::OnRender
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?Initialize@CGraphicMarkInstance@@IAEXXZ
_TEXT	SEGMENT
?Initialize@CGraphicMarkInstance@@IAEXXZ PROC		; CGraphicMarkInstance::Initialize, COMDAT
; _this$ = ecx

; 252  : 	m_DiffuseColor.r = m_DiffuseColor.g = m_DiffuseColor.b = m_DiffuseColor.a = 1.0f;

  00000	c7 41 10 00 00
	80 3f		 mov	 DWORD PTR [ecx+16], 1065353216 ; 3f800000H
  00007	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [ecx+12], 1065353216 ; 3f800000H
  0000e	c7 41 08 00 00
	80 3f		 mov	 DWORD PTR [ecx+8], 1065353216 ; 3f800000H
  00015	c7 41 04 00 00
	80 3f		 mov	 DWORD PTR [ecx+4], 1065353216 ; 3f800000H

; 253  : 	m_v2Position.x = m_v2Position.y = 0.0f;

  0001c	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0
  00023	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 254  : 	m_uIndex = 0;

  0002a	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0

; 255  : 	m_fScale = 1.0f;

  00031	c7 41 20 00 00
	80 3f		 mov	 DWORD PTR [ecx+32], 1065353216 ; 3f800000H

; 256  : }

  00038	c3		 ret	 0
?Initialize@CGraphicMarkInstance@@IAEXXZ ENDP		; CGraphicMarkInstance::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ??8CGraphicMarkInstance@@QBE_NABV0@@Z
_TEXT	SEGMENT
_rhs$ = 8						; size = 4
??8CGraphicMarkInstance@@QBE_NABV0@@Z PROC		; CGraphicMarkInstance::operator==, COMDAT
; _this$ = ecx

; 221  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 222  : 	return (m_roImage.GetPointer() == rhs.m_roImage.GetPointer());

  00003	8b 45 08	 mov	 eax, DWORD PTR _rhs$[ebp]
  00006	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00009	3b 48 28	 cmp	 ecx, DWORD PTR [eax+40]
  0000c	0f 94 c0	 sete	 al

; 223  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
??8CGraphicMarkInstance@@QBE_NABV0@@Z ENDP		; CGraphicMarkInstance::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?GetGraphicImagePointer@CGraphicMarkInstance@@QAEPAVCGraphicImage@@XZ
_TEXT	SEGMENT
?GetGraphicImagePointer@CGraphicMarkInstance@@QAEPAVCGraphicImage@@XZ PROC ; CGraphicMarkInstance::GetGraphicImagePointer, COMDAT
; _this$ = ecx

; 133  : 	return m_roImage.GetPointer();

  00000	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]

; 134  : }

  00003	c3		 ret	 0
?GetGraphicImagePointer@CGraphicMarkInstance@@QAEPAVCGraphicImage@@XZ ENDP ; CGraphicMarkInstance::GetGraphicImagePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?GetTextureReference@CGraphicMarkInstance@@QBEABVCGraphicTexture@@XZ
_TEXT	SEGMENT
?GetTextureReference@CGraphicMarkInstance@@QBEABVCGraphicTexture@@XZ PROC ; CGraphicMarkInstance::GetTextureReference, COMDAT
; _this$ = ecx

; 123  : 	return m_roImage->GetTextureReference();

  00000	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00003	e9 00 00 00 00	 jmp	 ?GetTextureReference@CGraphicImage@@QBEABVCGraphicTexture@@XZ ; CGraphicImage::GetTextureReference
?GetTextureReference@CGraphicMarkInstance@@QBEABVCGraphicTexture@@XZ ENDP ; CGraphicMarkInstance::GetTextureReference
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?GetTexturePointer@CGraphicMarkInstance@@QAEPAVCGraphicTexture@@XZ
_TEXT	SEGMENT
?GetTexturePointer@CGraphicMarkInstance@@QAEPAVCGraphicTexture@@XZ PROC ; CGraphicMarkInstance::GetTexturePointer, COMDAT
; _this$ = ecx

; 128  : 	return m_roImage->GetTexturePointer();

  00000	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00003	e9 00 00 00 00	 jmp	 ?GetTexturePointer@CGraphicImage@@QAEPAVCGraphicTexture@@XZ ; CGraphicImage::GetTexturePointer
?GetTexturePointer@CGraphicMarkInstance@@QAEPAVCGraphicTexture@@XZ ENDP ; CGraphicMarkInstance::GetTexturePointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?GetHeight@CGraphicMarkInstance@@QAEHXZ
_TEXT	SEGMENT
?GetHeight@CGraphicMarkInstance@@QAEHXZ PROC		; CGraphicMarkInstance::GetHeight, COMDAT
; _this$ = ecx

; 159  : 	if (IsEmpty())

  00000	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicMarkInstance@@QBE_NXZ ; CGraphicMarkInstance::IsEmpty
  00005	33 d2		 xor	 edx, edx
  00007	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0000c	84 c0		 test	 al, al
  0000e	0f 45 ca	 cmovne	 ecx, edx
  00011	8b c1		 mov	 eax, ecx

; 160  : 	{
; 161  : 		return 0;
; 162  : 	}
; 163  : 
; 164  : 	//return m_roImage->GetHeight();
; 165  : 	return 12;
; 166  : }

  00013	c3		 ret	 0
?GetHeight@CGraphicMarkInstance@@QAEHXZ ENDP		; CGraphicMarkInstance::GetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?GetWidth@CGraphicMarkInstance@@QAEHXZ
_TEXT	SEGMENT
?GetWidth@CGraphicMarkInstance@@QAEHXZ PROC		; CGraphicMarkInstance::GetWidth, COMDAT
; _this$ = ecx

; 148  : 	if (IsEmpty())

  00000	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicMarkInstance@@QBE_NXZ ; CGraphicMarkInstance::IsEmpty
  00005	33 d2		 xor	 edx, edx
  00007	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0000c	84 c0		 test	 al, al
  0000e	0f 45 ca	 cmovne	 ecx, edx
  00011	8b c1		 mov	 eax, ecx

; 149  : 	{
; 150  : 		return 0;
; 151  : 	}
; 152  : 
; 153  : 	//return m_roImage->GetWidth();
; 154  : 	return 16;
; 155  : }

  00013	c3		 ret	 0
?GetWidth@CGraphicMarkInstance@@QAEHXZ ENDP		; CGraphicMarkInstance::GetWidth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?IsEmpty@CGraphicMarkInstance@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@CGraphicMarkInstance@@QBE_NXZ PROC		; CGraphicMarkInstance::IsEmpty, COMDAT
; _this$ = ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 62   : 		return m_pObject == NULL ? true : false;

  00000	8b 49 28	 mov	 ecx, DWORD PTR [ecx+40]
  00003	85 c9		 test	 ecx, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 212  : 	if (!m_roImage.IsNull() && !m_roImage->IsEmpty())

  00005	74 0b		 je	 SHORT $LN2@IsEmpty
  00007	e8 00 00 00 00	 call	 ?IsEmpty@CResource@@QBE_NXZ ; CResource::IsEmpty
  0000c	84 c0		 test	 al, al
  0000e	0f 95 c0	 setne	 al

; 218  : }

  00011	c3		 ret	 0
$LN2@IsEmpty:

; 213  : 	{
; 214  : 		return false;
; 215  : 	}
; 216  : 
; 217  : 	return true;

  00012	b0 01		 mov	 al, 1

; 218  : }

  00014	c3		 ret	 0
?IsEmpty@CGraphicMarkInstance@@QBE_NXZ ENDP		; CGraphicMarkInstance::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?Load@CGraphicMarkInstance@@QAEXXZ
_TEXT	SEGMENT
?Load@CGraphicMarkInstance@@QAEXXZ PROC			; CGraphicMarkInstance::Load, COMDAT
; _this$ = ecx

; 183  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b d9		 mov	 ebx, ecx

; 184  : 	if (GetImageFileName().empty())

  00004	e8 00 00 00 00	 call	 ?GetImageFileName@CGraphicMarkInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CGraphicMarkInstance::GetImageFileName
  00009	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4376 :         return _Mypair._Myval2._Mysize == 0;

  0000b	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 184  : 	if (GetImageFileName().empty())

  0000f	74 4f		 je	 SHORT $LN4@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00011	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00015	72 02		 jb	 SHORT $LN23@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00017	8b 06		 mov	 eax, DWORD PTR [esi]
$LN23@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 189  : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer(GetImageFileName().c_str());

  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00026	8b f8		 mov	 edi, eax

; 190  : 
; 191  : 	if (!pResource)

  00028	85 ff		 test	 edi, edi
  0002a	75 1a		 jne	 SHORT $LN3@Load
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0002c	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  00030	72 02		 jb	 SHORT $LN18@Load

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00032	8b 36		 mov	 esi, DWORD PTR [esi]
$LN18@Load:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 193  : 		TraceError("CGraphicMarkinstance::Load - [%s] NOT EXIST", GetImageFileName().c_str());

  00034	56		 push	 esi
  00035	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@NEBKKKDH@CGraphicMarkinstance?3?3Load?5?9?5?$FL?$CF@
  0003a	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0003f	83 c4 08	 add	 esp, 8
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 200  : 	}
; 201  : }

  00044	5b		 pop	 ebx
  00045	c3		 ret	 0
$LN3@Load:

; 194  : 		return;
; 195  : 	}
; 196  : 
; 197  : 	if (pResource->IsType(CGraphicImage::Type()))

  00046	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  0004b	50		 push	 eax
  0004c	8b cf		 mov	 ecx, edi
  0004e	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType
  00053	84 c0		 test	 al, al
  00055	74 08		 je	 SHORT $LN24@Load

; 198  : 	{
; 199  : 		SetImagePointer(static_cast<CGraphicImage*>(pResource));

  00057	57		 push	 edi
  00058	8b cb		 mov	 ecx, ebx
  0005a	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicMarkInstance@@IAEXPAVCGraphicImage@@@Z ; CGraphicMarkInstance::SetImagePointer
$LN24@Load:
  0005f	5f		 pop	 edi
$LN4@Load:
  00060	5e		 pop	 esi

; 200  : 	}
; 201  : }

  00061	5b		 pop	 ebx
  00062	c3		 ret	 0
?Load@CGraphicMarkInstance@@QAEXXZ ENDP			; CGraphicMarkInstance::Load
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?SetScale@CGraphicMarkInstance@@QAEXM@Z
_TEXT	SEGMENT
_fScale$ = 8						; size = 4
?SetScale@CGraphicMarkInstance@@QAEXM@Z PROC		; CGraphicMarkInstance::SetScale, COMDAT
; _this$ = ecx

; 137  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 138  : 	m_fScale = fScale;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fScale$[ebp]
  00008	f3 0f 11 41 20	 movss	 DWORD PTR [ecx+32], xmm0

; 139  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetScale@CGraphicMarkInstance@@QAEXM@Z ENDP		; CGraphicMarkInstance::SetScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?SetIndex@CGraphicMarkInstance@@QAEXI@Z
_TEXT	SEGMENT
_uIndex$ = 8						; size = 4
?SetIndex@CGraphicMarkInstance@@QAEXI@Z PROC		; CGraphicMarkInstance::SetIndex, COMDAT
; _this$ = ecx

; 142  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 143  : 	m_uIndex = uIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _uIndex$[ebp]
  00006	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 144  : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetIndex@CGraphicMarkInstance@@QAEXI@Z ENDP		; CGraphicMarkInstance::SetIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?SetPosition@CGraphicMarkInstance@@QAEXMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?SetPosition@CGraphicMarkInstance@@QAEXMM@Z PROC	; CGraphicMarkInstance::SetPosition, COMDAT
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 178  : 	m_v2Position.x = fx;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  00008	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 179  : 	m_v2Position.y = fy;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]
  00012	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 180  : }

  00017	5d		 pop	 ebp
  00018	c2 08 00	 ret	 8
?SetPosition@CGraphicMarkInstance@@QAEXMM@Z ENDP	; CGraphicMarkInstance::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?SetDiffuseColor@CGraphicMarkInstance@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetDiffuseColor@CGraphicMarkInstance@@QAEXMMMM@Z PROC	; CGraphicMarkInstance::SetDiffuseColor, COMDAT
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 170  : 	m_DiffuseColor.r = fr;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fr$[ebp]
  00008	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0

; 171  : 	m_DiffuseColor.g = fg;

  0000d	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fg$[ebp]
  00012	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 172  : 	m_DiffuseColor.b = fb;

  00017	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fb$[ebp]
  0001c	f3 0f 11 41 0c	 movss	 DWORD PTR [ecx+12], xmm0

; 173  : 	m_DiffuseColor.a = fa;

  00021	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _fa$[ebp]
  00026	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0

; 174  : }

  0002b	5d		 pop	 ebp
  0002c	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CGraphicMarkInstance@@QAEXMMMM@Z ENDP	; CGraphicMarkInstance::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?Render@CGraphicMarkInstance@@QAEXXZ
_TEXT	SEGMENT
?Render@CGraphicMarkInstance@@QAEXXZ PROC		; CGraphicMarkInstance::Render, COMDAT
; _this$ = ecx

; 42   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 43   : 	if (IsEmpty())

  00003	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicMarkInstance@@QBE_NXZ ; CGraphicMarkInstance::IsEmpty
  00008	84 c0		 test	 al, al
  0000a	75 08		 jne	 SHORT $LN1@Render

; 44   : 	{
; 45   : 		return;
; 46   : 	}
; 47   : 
; 48   : 	assert(!IsEmpty());
; 49   : 
; 50   : 	OnRender();

  0000c	8b 06		 mov	 eax, DWORD PTR [esi]
  0000e	8b ce		 mov	 ecx, esi
  00010	5e		 pop	 esi
  00011	ff 60 04	 jmp	 DWORD PTR [eax+4]
$LN1@Render:
  00014	5e		 pop	 esi

; 51   : }

  00015	c3		 ret	 0
?Render@CGraphicMarkInstance@@QAEXXZ ENDP		; CGraphicMarkInstance::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?Destroy@CGraphicMarkInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CGraphicMarkInstance@@QAEXXZ PROC		; CGraphicMarkInstance::Destroy, COMDAT
; _this$ = ecx

; 259  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 67   : 		CReferenceObject* pOldObject = m_pObject;

  00003	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]

; 68   : 
; 69   : 		m_pObject = pObject;

  00006	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 70   : 
; 71   : 		if (m_pObject)
; 72   : 		{
; 73   : 			m_pObject->AddReference();
; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  0000d	85 c9		 test	 ecx, ecx
  0000f	74 05		 je	 SHORT $LN5@Destroy

; 77   : 		{
; 78   : 			pOldObject->Release();

  00011	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN5@Destroy:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 261  : 	Initialize();

  00016	8b ce		 mov	 ecx, esi
  00018	5e		 pop	 esi
  00019	e9 00 00 00 00	 jmp	 ?Initialize@CGraphicMarkInstance@@IAEXXZ ; CGraphicMarkInstance::Initialize
?Destroy@CGraphicMarkInstance@@QAEXXZ ENDP		; CGraphicMarkInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ??1CGraphicMarkInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CGraphicMarkInstance@@UAE@XZ PROC			; CGraphicMarkInstance::~CGraphicMarkInstance, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CGraphicMarkInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicMarkInstance@@6B@

; 271  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CGraphicMarkInstance@@QAEXXZ ; CGraphicMarkInstance::Destroy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00030	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]

; 5011 :         if (_My_data._Large_string_engaged()) {

  00033	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00036	72 28		 jb	 SHORT $LN15@CGraphicMa

; 5012 :             const pointer _Ptr = _My_data._Bx._Ptr;

  00038	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 5013 :             auto& _Al          = _Getal();
; 5014 :             _Destroy_in_place(_My_data._Bx._Ptr);
; 5015 :             _My_data._Activate_SSO_buffer();
; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0003b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0003c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00042	72 12		 jb	 SHORT $LN25@CGraphicMa

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00044	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00047	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004a	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0004f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00052	77 48		 ja	 SHORT $LN22@CGraphicMa

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00054	8b c2		 mov	 eax, edx
$LN25@CGraphicMa:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00056	51		 push	 ecx
  00057	50		 push	 eax
  00058	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005d	83 c4 08	 add	 esp, 8
$LN15@CGraphicMa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00060	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00067	c7 46 40 0f 00
	00 00		 mov	 DWORD PTR [esi+64], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006e	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 53   : 		if (m_pObject)

  00072	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]

; 37   : 	{

  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 		if (m_pObject)

  0007c	85 c9		 test	 ecx, ecx
  0007e	74 0c		 je	 SHORT $LN35@CGraphicMa

; 54   : 		{
; 55   : 			m_pObject->Release();

  00080	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 			m_pObject = NULL;

  00085	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
$LN35@CGraphicMa:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 272  : }

  0008c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00096	59		 pop	 ecx
  00097	5e		 pop	 esi
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN22@CGraphicMa:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN38@CGraphicMa:
  000a1	cc		 int	 3
  000a2	cc		 int	 3
  000a3	cc		 int	 3
  000a4	cc		 int	 3
  000a5	cc		 int	 3
  000a6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CGraphicMarkInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CGraphicMarkInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CGraphicMarkInstance@@UAE@XZ ENDP			; CGraphicMarkInstance::~CGraphicMarkInstance
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ??0CGraphicMarkInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CGraphicMarkInstance@@QAE@XZ PROC			; CGraphicMarkInstance::CGraphicMarkInstance, COMDAT
; _this$ = ecx

; 265  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CGraphicMarkInstance@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 20   : 	CRef() : m_pObject(NULL)

  00013	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0001a	0f 11 46 2c	 movups	 XMMWORD PTR [esi+44], xmm0

; 4998 :         _My_data._Mysize = 0;

  0001e	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00025	c7 46 40 0f 00
	00 00		 mov	 DWORD PTR [esi+64], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002c	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 266  : 	Initialize();

  00030	e8 00 00 00 00	 call	 ?Initialize@CGraphicMarkInstance@@IAEXXZ ; CGraphicMarkInstance::Initialize

; 267  : }

  00035	8b c6		 mov	 eax, esi
  00037	5e		 pop	 esi
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0CGraphicMarkInstance@@QAE@XZ ENDP			; CGraphicMarkInstance::CGraphicMarkInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?GetImageFileName@CGraphicMarkInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetImageFileName@CGraphicMarkInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CGraphicMarkInstance::GetImageFileName, COMDAT
; _this$ = ecx

; 17   : 	return m_stImageFileName;

  00000	8d 41 2c	 lea	 eax, DWORD PTR [ecx+44]

; 18   : }

  00003	c3		 ret	 0
?GetImageFileName@CGraphicMarkInstance@@QAEABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CGraphicMarkInstance::GetImageFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?SetImageFileName@CGraphicMarkInstance@@QAEXPBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
_c_szFileName$ = 8					; size = 4
?SetImageFileName@CGraphicMarkInstance@@QAEXPBD@Z PROC	; CGraphicMarkInstance::SetImageFileName, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_szFileName$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 11   : {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0000b	8b f2		 mov	 esi, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 12   : 	m_stImageFileName = c_szFileName;

  0000d	8d 59 2c	 lea	 ebx, DWORD PTR [ecx+44]
  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00011	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL67@SetImageFi:
  00014	8a 06		 mov	 al, BYTE PTR [esi]
  00016	46		 inc	 esi
  00017	84 c0		 test	 al, al
  00019	75 f9		 jne	 SHORT $LL67@SetImageFi
  0001b	2b f1		 sub	 esi, ecx

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001d	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  00020	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00023	3b f1		 cmp	 esi, ecx
  00025	77 24		 ja	 SHORT $LN10@SetImageFi

; 2283 :         value_type* _Result = _Bx._Buf;

  00027	8b fb		 mov	 edi, ebx

; 2301 :         return _BUF_SIZE <= _Myres;

  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002c	72 02		 jb	 SHORT $LN13@SetImageFi

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002e	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN13@SetImageFi:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00030	56		 push	 esi
  00031	52		 push	 edx
  00032	57		 push	 edi

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00033	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00036	e8 00 00 00 00	 call	 _memmove
  0003b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003e	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0
  00042	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 13   : }

  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN10@SetImageFi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4903 :         if (_New_size > max_size()) {

  0004b	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00051	0f 87 d1 00 00
	00		 ja	 $LN71@SetImageFi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00057	8b fe		 mov	 edi, esi
  00059	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005c	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00062	76 15		 jbe	 SHORT $LN27@SetImageFi

; 4885 :             return _Max;

  00064	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00069	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00074	83 c4 04	 add	 esp, 4
  00077	eb 52		 jmp	 SHORT $LN69@SetImageFi
$LN27@SetImageFi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00079	8b d1		 mov	 edx, ecx
  0007b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00080	d1 ea		 shr	 edx, 1
  00082	2b c2		 sub	 eax, edx
  00084	3b c8		 cmp	 ecx, eax
  00086	76 15		 jbe	 SHORT $LN28@SetImageFi

; 4889 :             return _Max;

  00088	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008d	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00098	83 c4 04	 add	 esp, 4
  0009b	eb 2e		 jmp	 SHORT $LN69@SetImageFi
$LN28@SetImageFi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009d	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000a0	3b f8		 cmp	 edi, eax
  000a2	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a5	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a8	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ad	72 0b		 jb	 SHORT $LN35@SetImageFi

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b5	83 c4 04	 add	 esp, 4
  000b8	eb 11		 jmp	 SHORT $LN69@SetImageFi
$LN35@SetImageFi:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ba	85 c0		 test	 eax, eax
  000bc	74 0b		 je	 SHORT $LN36@SetImageFi

; 77   :         return ::operator new(_Bytes);

  000be	50		 push	 eax
  000bf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c4	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c7	eb 02		 jmp	 SHORT $LN69@SetImageFi
$LN36@SetImageFi:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c9	33 c0		 xor	 eax, eax
$LN69@SetImageFi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cb	56		 push	 esi
  000cc	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000cf	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d2	8b f8		 mov	 edi, eax
  000d4	57		 push	 edi

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000d5	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000d8	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000db	e8 00 00 00 00	 call	 _memcpy

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000e0	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e6	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000ea	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ed	72 29		 jb	 SHORT $LN21@SetImageFi

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000ef	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f2	8b 03		 mov	 eax, DWORD PTR [ebx]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 12		 jb	 SHORT $LN58@SetImageFi

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00102	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 17		 ja	 SHORT $LN55@SetImageFi

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010c	8b c2		 mov	 eax, edx
$LN58@SetImageFi:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010e	51		 push	 ecx
  0010f	50		 push	 eax
  00110	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00115	83 c4 08	 add	 esp, 8
$LN21@SetImageFi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp

; 13   : }

  00118	89 3b		 mov	 DWORD PTR [ebx], edi
  0011a	5f		 pop	 edi
  0011b	5e		 pop	 esi
  0011c	5b		 pop	 ebx
  0011d	8b e5		 mov	 esp, ebp
  0011f	5d		 pop	 ebp
  00120	c2 04 00	 ret	 4
$LN55@SetImageFi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00123	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN71@SetImageFi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  00128	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN68@SetImageFi:
  0012d	cc		 int	 3
?SetImageFileName@CGraphicMarkInstance@@QAEXPBD@Z ENDP	; CGraphicMarkInstance::SetImageFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?IsType@CGraphicMarkInstance@@QAEHK@Z
_TEXT	SEGMENT
_dwType$ = 8						; size = 4
?IsType@CGraphicMarkInstance@@QAEHK@Z PROC		; CGraphicMarkInstance::IsType, COMDAT
; _this$ = ecx

; 232  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 233  : 	return OnIsType(dwType);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 234  : }

  00005	5d		 pop	 ebp

; 233  : 	return OnIsType(dwType);

  00006	ff 60 0c	 jmp	 DWORD PTR [eax+12]
?IsType@CGraphicMarkInstance@@QAEHK@Z ENDP		; CGraphicMarkInstance::IsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMarkInstance.cpp
;	COMDAT ?Type@CGraphicMarkInstance@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CGraphicMarkInstance@@SAKXZ PROC			; CGraphicMarkInstance::Type, COMDAT

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CGraphicMarkInstance@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 227  : 	static DWORD s_dwType = GetCRC32("CGraphicMarkInstance", strlen("CGraphicMarkInstance"));

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 228  : 	return (s_dwType);
; 229  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_dwType@?1??Type@CGraphicMarkInstance@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 227  : 	static DWORD s_dwType = GetCRC32("CGraphicMarkInstance", strlen("CGraphicMarkInstance"));

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	6a 14		 push	 20			; 00000014H
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BKIBHNLF@CGraphicMarkInstance@
  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00076	e8 00 00 00 00	 call	 ?GetCRC32@@YAKPBDI@Z	; GetCRC32
  0007b	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA
  00080	a3 00 00 00 00	 mov	 DWORD PTR ?s_dwType@?1??Type@CGraphicMarkInstance@@SAKXZ@4KA, eax
  00085	e8 00 00 00 00	 call	 __Init_thread_footer
  0008a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008d	eb af		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CGraphicMarkInstance@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CGraphicMarkInstance@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CGraphicMarkInstance@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CGraphicMarkInstance@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CGraphicMarkInstance@@SAKXZ ENDP			; CGraphicMarkInstance::Type
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
