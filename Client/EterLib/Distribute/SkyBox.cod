; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\SkyBox.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??0D3DXVECTOR2@@QAE@XZ				; D3DXVECTOR2::D3DXVECTOR2
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SPDTVertex@@QAE@XZ				; SPDTVertex::SPDTVertex
PUBLIC	??0CSkyObjectQuad@@QAE@XZ			; CSkyObjectQuad::CSkyObjectQuad
PUBLIC	??1CSkyObjectQuad@@UAE@XZ			; CSkyObjectQuad::~CSkyObjectQuad
PUBLIC	?Clear@CSkyObjectQuad@@QAEXABEABM111@Z		; CSkyObjectQuad::Clear
PUBLIC	?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z	; CSkyObjectQuad::SetSrcColor
PUBLIC	?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z	; CSkyObjectQuad::SetTransition
PUBLIC	?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex
PUBLIC	?StartTransition@CSkyObjectQuad@@QAEXXZ		; CSkyObjectQuad::StartTransition
PUBLIC	?Update@CSkyObjectQuad@@QAE_NXZ			; CSkyObjectQuad::Update
PUBLIC	?Render@CSkyObjectQuad@@QAEXXZ			; CSkyObjectQuad::Render
PUBLIC	??_GCSkyObjectQuad@@UAEPAXI@Z			; CSkyObjectQuad::`scalar deleting destructor'
PUBLIC	??0CSkyObject@@QAE@XZ				; CSkyObject::CSkyObject
PUBLIC	??1CSkyObject@@UAE@XZ				; CSkyObject::~CSkyObject
PUBLIC	?Destroy@CSkyObject@@UAEXXZ			; CSkyObject::Destroy
PUBLIC	?Render@CSkyObject@@UAEXXZ			; CSkyObject::Render
PUBLIC	?Update@CSkyObject@@UAEXXZ			; CSkyObject::Update
PUBLIC	?StartTransition@CSkyObject@@UAEXXZ		; CSkyObject::StartTransition
PUBLIC	?GenerateTexture@CSkyObject@@IAEPAVCGraphicImageInstance@@PBD@Z ; CSkyObject::GenerateTexture
PUBLIC	?DeleteTexture@CSkyObject@@IAEXPAVCGraphicImageInstance@@@Z ; CSkyObject::DeleteTexture
PUBLIC	?deallocate@?$allocator@VCSkyObjectQuad@@@std@@QAEXQAVCSkyObjectQuad@@I@Z ; std::allocator<CSkyObjectQuad>::deallocate
PUBLIC	??1?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::~vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >
PUBLIC	?resize@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAEXI@Z ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::resize
PUBLIC	?_Xlength@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xlength
PUBLIC	?_Xrange@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xrange
PUBLIC	?StartTransition@SSkyObjectFace@CSkyObject@@QAEXXZ ; CSkyObject::SSkyObjectFace::StartTransition
PUBLIC	?Update@SSkyObjectFace@CSkyObject@@QAE_NXZ	; CSkyObject::SSkyObjectFace::Update
PUBLIC	?Render@SSkyObjectFace@CSkyObject@@QAEXXZ	; CSkyObject::SSkyObjectFace::Render
PUBLIC	??0SSkyObjectFace@CSkyObject@@QAE@XZ		; CSkyObject::SSkyObjectFace::SSkyObjectFace
PUBLIC	??1SSkyObjectFace@CSkyObject@@QAE@XZ		; CSkyObject::SSkyObjectFace::~SSkyObjectFace
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Insert_node
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::operator[]
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >
PUBLIC	??_GCSkyObject@@UAEPAXI@Z			; CSkyObject::`scalar deleting destructor'
PUBLIC	??0CSkyBox@@QAE@XZ				; CSkyBox::CSkyBox
PUBLIC	??1CSkyBox@@UAE@XZ				; CSkyBox::~CSkyBox
PUBLIC	?Update@CSkyBox@@UAEXXZ				; CSkyBox::Update
PUBLIC	?Render@CSkyBox@@UAEXXZ				; CSkyBox::Render
PUBLIC	?RenderCloud@CSkyBox@@QAEXXZ			; CSkyBox::RenderCloud
PUBLIC	?Destroy@CSkyBox@@UAEXXZ			; CSkyBox::Destroy
PUBLIC	?Unload@CSkyBox@@QAEXXZ				; CSkyBox::Unload
PUBLIC	?SetSkyBoxScale@CSkyBox@@QAEXABUD3DXVECTOR3@@@Z	; CSkyBox::SetSkyBoxScale
PUBLIC	?SetGradientLevel@CSkyBox@@QAEXEE@Z		; CSkyBox::SetGradientLevel
PUBLIC	?SetFaceTexture@CSkyBox@@QAEXPBDH@Z		; CSkyBox::SetFaceTexture
PUBLIC	?SetCloudTexture@CSkyBox@@QAEXPBD@Z		; CSkyBox::SetCloudTexture
PUBLIC	?SetCloudScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z	; CSkyBox::SetCloudScale
PUBLIC	?SetCloudHeight@CSkyBox@@QAEXM@Z		; CSkyBox::SetCloudHeight
PUBLIC	?SetCloudTextureScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z ; CSkyBox::SetCloudTextureScale
PUBLIC	?SetCloudScrollSpeed@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z ; CSkyBox::SetCloudScrollSpeed
PUBLIC	?SetCloudColor@CSkyBox@@QAEXABUTGradientColor@@0ABK@Z ; CSkyBox::SetCloudColor
PUBLIC	?Refresh@CSkyBox@@QAEXXZ			; CSkyBox::Refresh
PUBLIC	?SetSkyColor@CSkyBox@@QAEXABV?$vector@UTGradientColor@@V?$allocator@UTGradientColor@@@std@@@std@@0J@Z ; CSkyBox::SetSkyColor
PUBLIC	?StartTransition@CSkyBox@@UAEXXZ		; CSkyBox::StartTransition
PUBLIC	?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z ; CSkyBox::SetSkyObjectQuadVertical
PUBLIC	?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon
PUBLIC	??_GCSkyBox@@UAEPAXI@Z				; CSkyBox::`scalar deleting destructor'
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>
PUBLIC	??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::insert<0,0>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
PUBLIC	??$_Destroy_range@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAXPAVCSkyObjectQuad@@QAV1@AAV?$allocator@VCSkyObjectQuad@@@0@@Z ; std::_Destroy_range<std::allocator<CSkyObjectQuad> >
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CSkyObjectQuad> >
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >::~_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CSkyObjectQuad@@6B@				; CSkyObjectQuad::`vftable'
PUBLIC	??_7CSkyObject@@6B@				; CSkyObject::`vftable'
PUBLIC	??_7CSkyBox@@6B@				; CSkyBox::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_C@_05HJNNLMDJ@front@				; `string'
PUBLIC	??_C@_04JFCNHLLM@back@				; `string'
PUBLIC	??_C@_04GOOOJOPP@left@				; `string'
PUBLIC	??_C@_05DHJDAOHK@right@				; `string'
PUBLIC	??_C@_03FGFCOCMD@top@				; `string'
PUBLIC	??_C@_06PMMPCIPB@bottom@			; `string'
PUBLIC	??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@	; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CSkyObjectQuad@@6B@			; CSkyObjectQuad::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkyObjectQuad@@@8			; CSkyObjectQuad `RTTI Type Descriptor'
PUBLIC	??_R3CSkyObjectQuad@@8				; CSkyObjectQuad::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkyObjectQuad@@8				; CSkyObjectQuad::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkyObjectQuad@@8			; CSkyObjectQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSkyObject@@6B@				; CSkyObject::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkyObject@@@8				; CSkyObject `RTTI Type Descriptor'
PUBLIC	??_R3CSkyObject@@8				; CSkyObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkyObject@@8				; CSkyObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkyObject@@8			; CSkyObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R4CSkyBox@@6B@				; CSkyBox::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSkyBox@@@8				; CSkyBox `RTTI Type Descriptor'
PUBLIC	??_R3CSkyBox@@8					; CSkyBox::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSkyBox@@8					; CSkyBox::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSkyBox@@8			; CSkyBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3a83126f
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@bf800000
PUBLIC	__xmm@3f8000003f8000003f800000bf800000
PUBLIC	__xmm@3f800000bf800000bf800000bf800000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@bf8000003f8000003f8000003f800000
PUBLIC	__xmm@bf800000bf800000bf8000003f800000
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	_D3DXMatrixScaling@16:PROC
EXTRN	_D3DXMatrixPerspectiveFovRH@20:PROC
EXTRN	?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z:PROC ; CGraphicBase::SetPDTStream
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTextureReference
EXTRN	?New@CGraphicImageInstance@@SAPAV1@XZ:PROC	; CGraphicImageInstance::New
EXTRN	?Delete@CGraphicImageInstance@@SAXPAV1@@Z:PROC	; CGraphicImageInstance::Delete
EXTRN	??0CColorTransitionHelper@@QAE@XZ:PROC		; CColorTransitionHelper::CColorTransitionHelper
EXTRN	??1CColorTransitionHelper@@QAE@XZ:PROC		; CColorTransitionHelper::~CColorTransitionHelper
EXTRN	?Clear@CColorTransitionHelper@@QAEXABM000@Z:PROC ; CColorTransitionHelper::Clear
EXTRN	?SetSrcColor@CColorTransitionHelper@@QAEXABM000@Z:PROC ; CColorTransitionHelper::SetSrcColor
EXTRN	?SetTransition@CColorTransitionHelper@@QAEXABM000ABK@Z:PROC ; CColorTransitionHelper::SetTransition
EXTRN	?GetCurColor@CColorTransitionHelper@@QAEABKXZ:PROC ; CColorTransitionHelper::GetCurColor
EXTRN	?StartTransition@CColorTransitionHelper@@QAEXXZ:PROC ; CColorTransitionHelper::StartTransition
EXTRN	?Update@CColorTransitionHelper@@QAE_NXZ:PROC	; CColorTransitionHelper::Update
EXTRN	??_ECSkyObjectQuad@@UAEPAXI@Z:PROC		; CSkyObjectQuad::`vector deleting destructor'
EXTRN	??_ECSkyObject@@UAEPAXI@Z:PROC			; CSkyObject::`vector deleting destructor'
EXTRN	??_ECSkyBox@@UAEPAXI@Z:PROC			; CSkyBox::`vector deleting destructor'
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SaveTextureStageState
EXTRN	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z:PROC ; CStateManager::RestoreTextureStageState
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z:PROC ; CStateManager::SaveSamplerState
EXTRN	?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z:PROC ; CStateManager::RestoreSamplerState
EXTRN	?SetFVF@CStateManager@@QAEXK@Z:PROC		; CStateManager::SetFVF
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z:PROC ; CStateManager::DrawPrimitive
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	?GetCurrentMillisecond@CTimer@@QAEKXZ:PROC	; CTimer::GetCurrentMillisecond
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@bf800000bf800000bf8000003f800000
CONST	SEGMENT
__xmm@bf800000bf800000bf8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	0bfH, 00H, 00H, 080H, 0bfH, 00H, 00H, 080H, 0bfH
CONST	ENDS
;	COMDAT __xmm@bf8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@bf8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, 0bfH
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@3f800000bf800000bf800000bf800000
CONST	SEGMENT
__xmm@3f800000bf800000bf800000bf800000 DB 00H, 00H, 080H, 0bfH, 00H, 00H, 080H
	DB	0bfH, 00H, 00H, 080H, 0bfH, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@3f8000003f8000003f800000bf800000
CONST	SEGMENT
__xmm@3f8000003f8000003f800000bf800000 DB 00H, 00H, 080H, 0bfH, 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkyBox@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkyBox@@8 DD FLAT:??_R0?AVCSkyBox@@@8	; CSkyBox::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkyBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkyBox@@8
rdata$r	SEGMENT
??_R2CSkyBox@@8 DD FLAT:??_R1A@?0A@EA@CSkyBox@@8	; CSkyBox::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CSkyObject@@8
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSkyBox@@8
rdata$r	SEGMENT
??_R3CSkyBox@@8 DD 00H					; CSkyBox::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2CSkyBox@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkyBox@@@8
data$rs	SEGMENT
??_R0?AVCSkyBox@@@8 DD FLAT:??_7type_info@@6B@		; CSkyBox `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkyBox@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSkyBox@@6B@
rdata$r	SEGMENT
??_R4CSkyBox@@6B@ DD 00H				; CSkyBox::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkyBox@@@8
	DD	FLAT:??_R3CSkyBox@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkyObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkyObject@@8 DD FLAT:??_R0?AVCSkyObject@@@8 ; CSkyObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkyObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkyObject@@8
rdata$r	SEGMENT
??_R2CSkyObject@@8 DD FLAT:??_R1A@?0A@EA@CSkyObject@@8	; CSkyObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CSkyObject@@8
rdata$r	SEGMENT
??_R3CSkyObject@@8 DD 00H				; CSkyObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CSkyObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkyObject@@@8
data$rs	SEGMENT
??_R0?AVCSkyObject@@@8 DD FLAT:??_7type_info@@6B@	; CSkyObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkyObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSkyObject@@6B@
rdata$r	SEGMENT
??_R4CSkyObject@@6B@ DD 00H				; CSkyObject::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkyObject@@@8
	DD	FLAT:??_R3CSkyObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSkyObjectQuad@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSkyObjectQuad@@8 DD FLAT:??_R0?AVCSkyObjectQuad@@@8 ; CSkyObjectQuad::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSkyObjectQuad@@8
rdata$r	ENDS
;	COMDAT ??_R2CSkyObjectQuad@@8
rdata$r	SEGMENT
??_R2CSkyObjectQuad@@8 DD FLAT:??_R1A@?0A@EA@CSkyObjectQuad@@8 ; CSkyObjectQuad::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CSkyObjectQuad@@8
rdata$r	SEGMENT
??_R3CSkyObjectQuad@@8 DD 00H				; CSkyObjectQuad::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CSkyObjectQuad@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSkyObjectQuad@@@8
data$rs	SEGMENT
??_R0?AVCSkyObjectQuad@@@8 DD FLAT:??_7type_info@@6B@	; CSkyObjectQuad `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSkyObjectQuad@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSkyObjectQuad@@6B@
rdata$r	SEGMENT
??_R4CSkyObjectQuad@@6B@ DD 00H				; CSkyObjectQuad::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSkyObjectQuad@@@8
	DD	FLAT:??_R3CSkyObjectQuad@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
CONST	SEGMENT
??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@ DB 'invalid vector subscri'
	DB	'pt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMMPCIPB@bottom@
CONST	SEGMENT
??_C@_06PMMPCIPB@bottom@ DB 'bottom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGFCOCMD@top@
CONST	SEGMENT
??_C@_03FGFCOCMD@top@ DB 'top', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHJDAOHK@right@
CONST	SEGMENT
??_C@_05DHJDAOHK@right@ DB 'right', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOOOJOPP@left@
CONST	SEGMENT
??_C@_04GOOOJOPP@left@ DB 'left', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFCNHLLM@back@
CONST	SEGMENT
??_C@_04JFCNHLLM@back@ DB 'back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HJNNLMDJ@front@
CONST	SEGMENT
??_C@_05HJNNLMDJ@front@ DB 'front', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CSkyBox@@6B@
CONST	SEGMENT
??_7CSkyBox@@6B@ DD FLAT:??_R4CSkyBox@@6B@		; CSkyBox::`vftable'
	DD	FLAT:??_ECSkyBox@@UAEPAXI@Z
	DD	FLAT:?Destroy@CSkyBox@@UAEXXZ
	DD	FLAT:?Render@CSkyBox@@UAEXXZ
	DD	FLAT:?Update@CSkyBox@@UAEXXZ
	DD	FLAT:?StartTransition@CSkyBox@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CSkyObject@@6B@
CONST	SEGMENT
??_7CSkyObject@@6B@ DD FLAT:??_R4CSkyObject@@6B@	; CSkyObject::`vftable'
	DD	FLAT:??_ECSkyObject@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?StartTransition@CSkyObject@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7CSkyObjectQuad@@6B@
CONST	SEGMENT
??_7CSkyObjectQuad@@6B@ DD FLAT:??_R4CSkyObjectQuad@@6B@ ; CSkyObjectQuad::`vftable'
	DD	FLAT:??_ECSkyObjectQuad@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$0
__ehfuncinfo$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$3
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$1
__ehfuncinfo$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$1
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetCloudTexture@CSkyBox@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetCloudTexture@CSkyBox@@QAEXPBD@Z$1
__ehfuncinfo$?SetCloudTexture@CSkyBox@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetCloudTexture@CSkyBox@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z$1
__ehfuncinfo$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CSkyBox@@UAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CSkyBox@@UAEXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CSkyBox@@UAEXXZ$1
__ehfuncinfo$?Render@CSkyBox@@UAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Render@CSkyBox@@UAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSkyBox@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSkyBox@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSkyBox@@QAE@XZ$0
__ehfuncinfo$??0CSkyBox@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSkyBox@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CSkyObject@@QAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CSkyObject@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CSkyObject@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSkyObject@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CSkyObject@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CSkyObject@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CSkyObject@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CSkyObject@@QAE@XZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CSkyObjectQuad@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >::~_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >, COMDAT
; _this$ = ecx

; 1657 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

  00000	56		 push	 esi

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	57		 push	 edi
  00004	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]

; 947  :         for (; _First != _Last; ++_First) {

  00007	3b f7		 cmp	 esi, edi
  00009	74 17		 je	 SHORT $LN5@Uninitiali
  0000b	0f 1f 44 00 00	 npad	 5
$LL6@Uninitiali:

; 689  :         _Ptr->~_Uty();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	6a 00		 push	 0
  00016	ff 10		 call	 DWORD PTR [eax]

; 947  :         for (; _First != _Last; ++_First) {

  00018	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  0001e	3b f7		 cmp	 esi, edi
  00020	75 ee		 jne	 SHORT $LL6@Uninitiali
$LN5@Uninitiali:
  00022	5f		 pop	 edi

; 1659 :     }

  00023	5e		 pop	 esi
  00024	c3		 ret	 0
??1?$_Uninitialized_backout_al@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >::~_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5234 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]

; 5234 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

  00006	53		 push	 ebx
  00007	57		 push	 edi

; 2301 :         return _BUF_SIZE <= _Myres;

  00008	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0000c	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  0000f	72 02		 jb	 SHORT $LN6@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN6@operator:

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  00013	8b 55 08	 mov	 edx, DWORD PTR __Left$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  00016	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 4795 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

  0001a	8b 5a 10	 mov	 ebx, DWORD PTR [edx+16]

; 2293 :         if (_Large_string_engaged()) {

  0001d	72 02		 jb	 SHORT $LN11@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0001f	8b 12		 mov	 edx, DWORD PTR [edx]
$LN11@operator:
  00021	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 66   :     return _Right < _Left ? _Right : _Left;

  00022	3b fb		 cmp	 edi, ebx
  00024	8b f3		 mov	 esi, ebx
  00026	0f 42 f7	 cmovb	 esi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  00029	83 ee 04	 sub	 esi, 4
  0002c	72 13		 jb	 SHORT $LN26@operator
  0002e	66 90		 npad	 2
$LL27@operator:
  00030	8b 02		 mov	 eax, DWORD PTR [edx]
  00032	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00034	75 10		 jne	 SHORT $LN25@operator
  00036	83 c2 04	 add	 edx, 4
  00039	83 c1 04	 add	 ecx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL27@operator
$LN26@operator:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN24@operator
$LN25@operator:
  00046	8a 02		 mov	 al, BYTE PTR [edx]
  00048	3a 01		 cmp	 al, BYTE PTR [ecx]
  0004a	75 27		 jne	 SHORT $LN28@operator
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN24@operator
  00051	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00054	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00057	75 1a		 jne	 SHORT $LN28@operator
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN24@operator
  0005e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  00061	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  00064	75 0d		 jne	 SHORT $LN28@operator
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN24@operator
  0006b	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  0006e	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  00071	74 07		 je	 SHORT $LN24@operator
$LN28@operator:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN29@operator
$LN24@operator:
  0007a	33 c0		 xor	 eax, eax
$LN29@operator:
  0007c	5e		 pop	 esi

; 604  :     if (_Ans != 0) {

  0007d	85 c0		 test	 eax, eax
  0007f	75 12		 jne	 SHORT $LN18@operator

; 605  :         return _Ans;
; 606  :     }
; 607  : 
; 608  :     if (_Left_size < _Right_size) {

  00081	3b fb		 cmp	 edi, ebx
  00083	76 0a		 jbe	 SHORT $LN30@operator

; 609  :         return -1;

  00085	83 c8 ff	 or	 eax, -1

; 5235 :     return _Left.compare(_Right) < 0;

  00088	5f		 pop	 edi
  00089	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0008c	5b		 pop	 ebx

; 5236 : }

  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
$LN30@operator:

; 612  :     if (_Left_size > _Right_size) {

  0008f	1b c0		 sbb	 eax, eax
  00091	f7 d8		 neg	 eax
$LN18@operator:

; 5235 :     return _Left.compare(_Right) < 0;

  00093	5f		 pop	 edi
  00094	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00097	5b		 pop	 ebx

; 5236 : }

  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z
_TEXT	SEGMENT
__Backout$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<CSkyObjectQuad> >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00027	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0002a	8b 45 10	 mov	 eax, DWORD PTR __Al$[ebp]
  0002d	89 75 e8	 mov	 DWORD PTR __Backout$[ebp], esi
  00030	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi
  00033	89 45 f0	 mov	 DWORD PTR __Backout$[ebp+8], eax

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00036	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00040	85 ff		 test	 edi, edi
  00042	74 15		 je	 SHORT $LN32@Uninitiali
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ??0CSkyObjectQuad@@QAE@XZ ; CSkyObjectQuad::CSkyObjectQuad

; 1664 :         ++_Last;

  0004b	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  00051	89 75 ec	 mov	 DWORD PTR __Backout$[ebp+4], esi

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00054	83 ef 01	 sub	 edi, 1
  00057	75 eb		 jne	 SHORT $LL4@Uninitiali
$LN32@Uninitiali:

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();
; 1907 : }

  00059	8b c6		 mov	 eax, esi
  0005b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00065	59		 pop	 ecx
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >::~_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<CSkyObjectQuad> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Backout$3 = -60					; size = 12
__ULast$1$ = -48					; size = 4
__Newvec$ = -48						; size = 4
__Appended_first$ = -44					; size = 4
__Al$ = -40						; size = 4
__Oldsize$1$ = -36					; size = 4
__Appended_last$ = -36					; size = 4
tv724 = -32						; size = 4
__Myfirst$1$ = -28					; size = 4
__Newvec$1$ = -24					; size = 4
__First$1$ = -20					; size = 4
tv716 = -20						; size = 4
__Newcapacity$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d e4	 mov	 DWORD PTR __Myfirst$1$[ebp], edi

; 1575 :         if (_Newsize > max_size()) {

  00030	81 7d 08 0d 74
	da 00		 cmp	 DWORD PTR __Newsize$[ebp], 14316557 ; 00da740dH
  00037	0f 87 2e 02 00
	00		 ja	 $LN128@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0003d	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00040	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00045	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00047	f7 e9		 imul	 ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00049	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004c	2b 0f		 sub	 ecx, DWORD PTR [edi]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0004e	c1 fa 05	 sar	 edx, 5
  00051	8b c2		 mov	 eax, edx
  00053	89 7d d8	 mov	 DWORD PTR __Al$[ebp], edi
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	03 c2		 add	 eax, edx
  0005b	89 45 dc	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0005e	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00063	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00065	b8 0d 74 da 00	 mov	 eax, 14316557		; 00da740dH

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0006a	c1 fa 05	 sar	 edx, 5
  0006d	8b ca		 mov	 ecx, edx
  0006f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00072	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00074	8b d1		 mov	 edx, ecx
  00076	d1 ea		 shr	 edx, 1
  00078	2b c2		 sub	 eax, edx
  0007a	3b c8		 cmp	 ecx, eax
  0007c	76 1f		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0007e	b8 3c ff ff ff	 mov	 eax, -196		; ffffff3cH
  00083	c7 45 ec 0d 74
	da 00		 mov	 DWORD PTR __Newcapacity$[ebp], 14316557 ; 00da740dH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0008b	89 45 e0	 mov	 DWORD PTR tv724[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00093	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00096	83 c4 04	 add	 esp, 4
  00099	8b c8		 mov	 ecx, eax
  0009b	eb 5c		 jmp	 SHORT $LN126@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0009d	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  000a0	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  000a3	3b f2		 cmp	 esi, edx
  000a5	73 25		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  000a7	8b f2		 mov	 esi, edx
$LN122@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  000a9	69 c6 2c 01 00
	00		 imul	 eax, esi, 300
  000af	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000b2	89 45 e0	 mov	 DWORD PTR tv724[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000b5	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ba	72 1e		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000c2	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  000c5	83 c4 04	 add	 esp, 4
  000c8	8b c8		 mov	 ecx, eax
  000ca	eb 2d		 jmp	 SHORT $LN126@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  000cc	81 fe 0d 74 da
	00		 cmp	 esi, 14316557		; 00da740dH
  000d2	0f 87 98 01 00
	00		 ja	 $LN129@Resize_rea
  000d8	eb cf		 jmp	 SHORT $LN122@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000da	85 c0		 test	 eax, eax
  000dc	74 16		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000de	50		 push	 eax
  000df	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000e4	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]

; 77   :         return ::operator new(_Bytes);

  000e7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ea	8b c8		 mov	 ecx, eax
  000ec	89 45 e8	 mov	 DWORD PTR __Newvec$1$[ebp], eax
  000ef	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
  000f2	eb 08		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000f4	33 c9		 xor	 ecx, ecx
  000f6	89 75 ec	 mov	 DWORD PTR __Newcapacity$[ebp], esi
$LN126@Resize_rea:

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000f9	89 4d e8	 mov	 DWORD PTR __Newvec$1$[ebp], ecx
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000fc	8b 45 dc	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]

; 1592 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1593 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1594 :         } else {
; 1595 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ff	8b fa		 mov	 edi, edx
  00101	69 f0 2c 01 00
	00		 imul	 esi, eax, 300
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00107	89 4d d0	 mov	 DWORD PTR __Newvec$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1591 :         _TRY_BEGIN

  0010a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00111	03 f1		 add	 esi, ecx

; 1592 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1593 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1594 :         } else {
; 1595 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  00113	2b f8		 sub	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00115	8b 45 e4	 mov	 eax, DWORD PTR __Myfirst$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  00118	89 75 d4	 mov	 DWORD PTR __Appended_first$[ebp], esi

; 1589 :         pointer _Appended_last        = _Appended_first;

  0011b	89 75 dc	 mov	 DWORD PTR __Appended_last$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  0011e	89 75 c4	 mov	 DWORD PTR __Backout$3[ebp], esi
  00121	89 75 c8	 mov	 DWORD PTR __Backout$3[ebp+4], esi
  00124	89 45 cc	 mov	 DWORD PTR __Backout$3[ebp+8], eax

; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

  00127	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0012b	0f 1f 44 00 00	 npad	 5
$LL31@Resize_rea:

; 1902 :     for (; 0 < _Count; --_Count) {

  00130	85 ff		 test	 edi, edi
  00132	74 13		 je	 SHORT $LN30@Resize_rea

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00134	8b ce		 mov	 ecx, esi
  00136	e8 00 00 00 00	 call	 ??0CSkyObjectQuad@@QAE@XZ ; CSkyObjectQuad::CSkyObjectQuad

; 1664 :         ++_Last;

  0013b	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH

; 1902 :     for (; 0 < _Count; --_Count) {

  00141	4f		 dec	 edi

; 1664 :         ++_Last;

  00142	89 75 c8	 mov	 DWORD PTR __Backout$3[ebp+4], esi

; 1902 :     for (; 0 < _Count; --_Count) {

  00145	eb e9		 jmp	 SHORT $LL31@Resize_rea
$LN30@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00147	8b 75 e4	 mov	 esi, DWORD PTR __Myfirst$1$[ebp]
  0014a	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  0014c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  0014f	89 45 ec	 mov	 DWORD PTR __First$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  00152	89 4d d0	 mov	 DWORD PTR __ULast$1$[ebp], ecx

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  00155	3b c1		 cmp	 eax, ecx
  00157	74 76		 je	 SHORT $LN53@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  00159	8b 7d e8	 mov	 edi, DWORD PTR __Newvec$1$[ebp]
  0015c	83 c7 64	 add	 edi, 100		; 00000064H
  0015f	89 7d ec	 mov	 DWORD PTR tv716[ebp], edi
$LL54@Resize_rea:
  00162	c7 47 9c 00 00
	00 00		 mov	 DWORD PTR [edi-100], OFFSET ??_7CSkyObjectQuad@@6B@
  00169	8d 70 6c	 lea	 esi, DWORD PTR [eax+108]
  0016c	0f 10 40 04	 movups	 xmm0, XMMWORD PTR [eax+4]
  00170	0f 11 47 a0	 movups	 XMMWORD PTR [edi-96], xmm0
  00174	0f 10 40 14	 movups	 xmm0, XMMWORD PTR [eax+20]
  00178	0f 11 47 b0	 movups	 XMMWORD PTR [edi-80], xmm0
  0017c	0f 10 40 24	 movups	 xmm0, XMMWORD PTR [eax+36]
  00180	0f 11 47 c0	 movups	 XMMWORD PTR [edi-64], xmm0
  00184	0f 10 40 34	 movups	 xmm0, XMMWORD PTR [eax+52]
  00188	0f 11 47 d0	 movups	 XMMWORD PTR [edi-48], xmm0
  0018c	0f 10 40 44	 movups	 xmm0, XMMWORD PTR [eax+68]
  00190	0f 11 47 e0	 movups	 XMMWORD PTR [edi-32], xmm0
  00194	0f 10 40 54	 movups	 xmm0, XMMWORD PTR [eax+84]
  00198	0f 11 47 f0	 movups	 XMMWORD PTR [edi-16], xmm0
  0019c	8b 48 64	 mov	 ecx, DWORD PTR [eax+100]
  0019f	8b 50 68	 mov	 edx, DWORD PTR [eax+104]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  001a2	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  001a7	89 0f		 mov	 DWORD PTR [edi], ecx
  001a9	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  001ae	89 57 04	 mov	 DWORD PTR [edi+4], edx
  001b1	83 c7 08	 add	 edi, 8
  001b4	f3 a5		 rep movsd

; 1664 :         ++_Last;

  001b6	8b 7d ec	 mov	 edi, DWORD PTR tv716[ebp]
  001b9	81 c7 2c 01 00
	00		 add	 edi, 300		; 0000012cH
  001bf	89 7d ec	 mov	 DWORD PTR tv716[ebp], edi

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  001c2	3b 45 d0	 cmp	 eax, DWORD PTR __ULast$1$[ebp]
  001c5	75 9b		 jne	 SHORT $LL54@Resize_rea
  001c7	8b 75 e4	 mov	 esi, DWORD PTR __Myfirst$1$[ebp]
  001ca	8b 06		 mov	 eax, DWORD PTR [esi]
  001cc	89 45 ec	 mov	 DWORD PTR __First$1$[ebp], eax
$LN53@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  001cf	85 c0		 test	 eax, eax
  001d1	74 66		 je	 SHORT $LN89@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  001d3	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  001d6	3b c7		 cmp	 eax, edi
  001d8	74 1d		 je	 SHORT $LN80@Resize_rea
  001da	66 0f 1f 44 00
	00		 npad	 6
$LL81@Resize_rea:

; 689  :         _Ptr->~_Uty();

  001e0	8b 10		 mov	 edx, DWORD PTR [eax]
  001e2	8b c8		 mov	 ecx, eax
  001e4	6a 00		 push	 0
  001e6	ff 12		 call	 DWORD PTR [edx]

; 947  :         for (; _First != _Last; ++_First) {

  001e8	8b 45 ec	 mov	 eax, DWORD PTR __First$1$[ebp]
  001eb	05 2c 01 00 00	 add	 eax, 300		; 0000012cH
  001f0	89 45 ec	 mov	 DWORD PTR __First$1$[ebp], eax
  001f3	3b c7		 cmp	 eax, edi
  001f5	75 e9		 jne	 SHORT $LL81@Resize_rea
$LN80@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  001f7	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001fa	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  001ff	8b 3e		 mov	 edi, DWORD PTR [esi]
  00201	2b cf		 sub	 ecx, edi
  00203	f7 e9		 imul	 ecx
  00205	c1 fa 05	 sar	 edx, 5
  00208	8b c2		 mov	 eax, edx
  0020a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0020d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0020f	69 c8 2c 01 00
	00		 imul	 ecx, eax, 300

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00215	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0021b	72 12		 jb	 SHORT $LN99@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0021d	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  00220	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00223	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00225	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00228	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0022b	77 39		 ja	 SHORT $LN96@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0022d	8b fa		 mov	 edi, edx
$LN99@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0022f	51		 push	 ecx
  00230	57		 push	 edi
  00231	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00236	83 c4 08	 add	 esp, 8
$LN89@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00239	69 45 08 2c 01
	00 00		 imul	 eax, DWORD PTR __Newsize$[ebp], 300
  00240	8b 4d e8	 mov	 ecx, DWORD PTR __Newvec$1$[ebp]
  00243	89 0e		 mov	 DWORD PTR [esi], ecx
  00245	03 c1		 add	 eax, ecx
  00247	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  0024a	8b 45 e0	 mov	 eax, DWORD PTR tv724[ebp]
  0024d	03 c1		 add	 eax, ecx
  0024f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1608 :         _CATCH_END
; 1609 : 
; 1610 :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 1611 :     }

  00252	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00255	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025c	59		 pop	 ecx
  0025d	5f		 pop	 edi
  0025e	5e		 pop	 esi
  0025f	5b		 pop	 ebx
  00260	8b e5		 mov	 esp, ebp
  00262	5d		 pop	 ebp
  00263	c2 08 00	 ret	 8
$LN96@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00266	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN128@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  0026b	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xlength
$LN129@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00270	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1605 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

  00275	8b 75 d8	 mov	 esi, DWORD PTR __Al$[ebp]
  00278	56		 push	 esi
  00279	ff 75 dc	 push	 DWORD PTR __Appended_last$[ebp]
  0027c	ff 75 d4	 push	 DWORD PTR __Appended_first$[ebp]
  0027f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAXPAVCSkyObjectQuad@@QAV1@AAV?$allocator@VCSkyObjectQuad@@@0@@Z ; std::_Destroy_range<std::allocator<CSkyObjectQuad> >
  00284	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1606 :         _Al.deallocate(_Newvec, _Newcapacity);

  00287	8b ce		 mov	 ecx, esi
  00289	ff 75 ec	 push	 DWORD PTR __Newcapacity$[ebp]
  0028c	ff 75 d0	 push	 DWORD PTR __Newvec$[ebp]
  0028f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@VCSkyObjectQuad@@@std@@QAEXQAVCSkyObjectQuad@@I@Z ; std::allocator<CSkyObjectQuad>::deallocate

; 1607 :         _RERAISE;

  00294	6a 00		 push	 0
  00296	6a 00		 push	 0
  00298	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN125@Resize_rea:
  0029d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2:
  00000	8d 4d c4	 lea	 ecx, DWORD PTR __Backout$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >::~_Uninitialized_backout_al<std::allocator<CSkyObjectQuad> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN10@Tree_temp_

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN10@Tree_temp_:
  00012	c3		 ret	 0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 2c		 push	 44			; 0000002cH
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	89 37		 mov	 DWORD PTR [edi], esi

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0000f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00013	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  0001a	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0001d	75 32		 jne	 SHORT $LN12@Find_lower
  0001f	53		 push	 ebx
  00020	8b 5d 0c	 mov	 ebx, DWORD PTR __Keyval$[ebp]
$LL2@Find_lower:

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00023	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
  00026	89 37		 mov	 DWORD PTR [edi], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00028	53		 push	 ebx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0002f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00032	84 c0		 test	 al, al
  00034	74 07		 je	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  00036	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00039	33 c0		 xor	 eax, eax

; 1618 :             } else {

  0003b	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  0003d	89 77 08	 mov	 DWORD PTR [edi+8], esi

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	8b 36		 mov	 esi, DWORD PTR [esi]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00047	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 d3		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00050	5b		 pop	 ebx
$LN12@Find_lower:

; 1626 :     }

  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 08 00	 ret	 8
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAXPAVCSkyObjectQuad@@QAV1@AAV?$allocator@VCSkyObjectQuad@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAXPAVCSkyObjectQuad@@QAV1@AAV?$allocator@VCSkyObjectQuad@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CSkyObjectQuad> >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 13		 je	 SHORT $LN3@Destroy_ra
  0000f	90		 npad	 1
$LL4@Destroy_ra:

; 689  :         _Ptr->~_Uty();

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	8b ce		 mov	 ecx, esi
  00014	6a 00		 push	 0
  00016	ff 10		 call	 DWORD PTR [eax]

; 944  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 945  :     using _Ty = typename _Alloc::value_type;
; 946  :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 947  :         for (; _First != _Last; ++_First) {

  00018	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  0001e	3b f7		 cmp	 esi, edi
  00020	75 ee		 jne	 SHORT $LL4@Destroy_ra
$LN3@Destroy_ra:
  00022	5f		 pop	 edi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00023	5e		 pop	 esi
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??$_Destroy_range@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAXPAVCSkyObjectQuad@@QAV1@AAV?$allocator@VCSkyObjectQuad@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CSkyObjectQuad> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	57		 push	 edi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 7d 0c	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00008	8b c1		 mov	 eax, ecx
  0000a	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 6e		 jne	 SHORT $LN73@Erase_tree
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR __Al$[ebp]
  00017	56		 push	 esi
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00018	ff 77 08	 push	 DWORD PTR [edi+8]
  0001b	8b c8		 mov	 ecx, eax
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00023	8b f7		 mov	 esi, edi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00025	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00027	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  0002a	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0002d	72 28		 jb	 SHORT $LN29@Erase_tree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00032	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00033	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00039	72 12		 jb	 SHORT $LN39@Erase_tree

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00041	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00043	83 c0 fc	 add	 eax, -4			; fffffffcH
  00046	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00049	77 3d		 ja	 SHORT $LN36@Erase_tree

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004b	8b c2		 mov	 eax, edx
$LN39@Erase_tree:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004d	51		 push	 ecx
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
$LN29@Erase_tree:
  00057	6a 2c		 push	 44			; 0000002cH
  00059	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0005a	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00061	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00068	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00074	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00078	75 05		 jne	 SHORT $LN75@Erase_tree
  0007a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0007d	eb 99		 jmp	 SHORT $LL2@Erase_tree
$LN75@Erase_tree:
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
$LN73@Erase_tree:
  00081	5f		 pop	 edi

; 749  :     }

  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c2 08 00	 ret	 8
$LN36@Erase_tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00088	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN76@Erase_tree:
  0008d	cc		 int	 3
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z
_TEXT	SEGMENT
__Loc$2 = -40						; size = 12
$T3 = -28						; size = 12
$T4 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Val$ = 12						; size = 4
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::insert<0,0>, COMDAT
; _this$ = ecx

; 1229 :     pair<iterator, bool> insert(value_type&& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0002d	8b 5d 0c	 mov	 ebx, DWORD PTR __Val$[ebp]
  00030	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp]
  00033	53		 push	 ebx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  0003a	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0003d	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00041	66 0f d6 45 d8	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00046	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004a	75 15		 jne	 SHORT $LN4@insert
  0004c	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0004f	50		 push	 eax
  00050	53		 push	 ebx
  00051	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00056	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00059	84 c0		 test	 al, al
  0005b	75 04		 jne	 SHORT $LN4@insert
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0005d	32 c9		 xor	 cl, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1003 :                 return {_Loc._Bound, false};

  0005f	eb 67		 jmp	 SHORT $LN84@insert
$LN4@insert:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00061	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  00068	74 7a		 je	 SHORT $LN99@insert

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  0006a	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0006c	89 7d e8	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  0006f	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00078	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00084	8b f8		 mov	 edi, eax

; 77   :         return ::operator new(_Bytes);

  00086	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  00089	89 7d ec	 mov	 DWORD PTR $T4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  0008c	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
  0008f	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00092	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  00099	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0009e	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a1	57		 push	 edi
  000a2	ff 75 dc	 push	 DWORD PTR __Loc$2[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  000a5	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000a8	ff 75 d8	 push	 DWORD PTR __Loc$2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 176  :     pair(pair&&)      = default;

  000ab	89 4f 28	 mov	 DWORD PTR [edi+40], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ae	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000b1	89 1f		 mov	 DWORD PTR [edi], ebx

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000b3	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000b6	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 811  :         this->_Ptr->_Color = _Red;

  000b9	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000bf	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Insert_node
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c4	8b f0		 mov	 esi, eax
  000c6	b1 01		 mov	 cl, 1
$LN84@insert:
  000c8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000cb	89 30		 mov	 DWORD PTR [eax], esi
  000cd	88 48 04	 mov	 BYTE PTR [eax+4], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1232 :     }

  000d0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000da	59		 pop	 ecx
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5b		 pop	 ebx
  000de	8b e5		 mov	 esp, ebp
  000e0	5d		 pop	 ebp
  000e1	c2 08 00	 ret	 8
$LN99@insert:

; 1630 :             _Throw_tree_length_error();

  000e4	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN97@insert:
  000e9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::insert<0,0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN15@pair
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN25@pair

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN22@pair

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN25@pair:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN15@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
  00044	c3		 ret	 0
$LN22@pair:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN31@pair:
  0004a	cc		 int	 3
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCSkyBox@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkyBox@@UAEPAXI@Z PROC				; CSkyBox::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSkyBox@@UAE@XZ	; CSkyBox::~CSkyBox
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 88 03 00 00	 push	 904			; 00000388H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSkyBox@@UAEPAXI@Z ENDP				; CSkyBox::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_aPDTVertex$ = -24					; size = 24
_pSkyObjectQuadVector$ = 8				; size = 4
$T1 = 11						; size = 1
$T2 = 11						; size = 1
$T3 = 11						; size = 1
$T4 = 11						; size = 1
_c_pv3QuadPoints$ = 12					; size = 4
?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z PROC ; CSkyBox::SetSkyObjectQuadHorizon, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1827 :         pointer& _Mylast  = _My_data._Mylast;

  00009	8b 7d 08	 mov	 edi, DWORD PTR _pSkyObjectQuadVector$[ebp]

; 1828 : 
; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0000c	8b 37		 mov	 esi, DWORD PTR [edi]
  0000e	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
  00011	3b f3		 cmp	 esi, ebx
  00013	74 17		 je	 SHORT $LN3@SetSkyObje
$LL9@SetSkyObje:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 689  :         _Ptr->~_Uty();

  00015	8b 06		 mov	 eax, DWORD PTR [esi]
  00017	8b ce		 mov	 ecx, esi
  00019	6a 00		 push	 0
  0001b	ff 10		 call	 DWORD PTR [eax]

; 947  :         for (; _First != _Last; ++_First) {

  0001d	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  00023	3b f3		 cmp	 esi, ebx
  00025	75 ee		 jne	 SHORT $LL9@SetSkyObje
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1839 :         _Mylast = _Myfirst;

  00027	8b 07		 mov	 eax, DWORD PTR [edi]
  00029	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN3@SetSkyObje:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 431  : 	pSkyObjectQuadVector->resize(1);

  0002c	6a 01		 push	 1
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?resize@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAEXI@Z ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::resize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  0003d	8b 1f		 mov	 ebx, DWORD PTR [edi]
  0003f	2b cb		 sub	 ecx, ebx
  00041	f7 e9		 imul	 ecx
  00043	c1 fa 05	 sar	 edx, 5
  00046	8b c2		 mov	 eax, edx
  00048	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0004b	03 c2		 add	 eax, edx
  0004d	0f 84 c1 00 00
	00		 je	 $LN23@SetSkyObje
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 438  : 	rSkyObjectQuad.SetVertex(0, aPDTVertex);

  00053	8b 75 0c	 mov	 esi, DWORD PTR _c_pv3QuadPoints$[ebp]
  00056	8b cb		 mov	 ecx, ebx
  00058	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _aPDTVertex$[ebp+16], 0
  0005f	c7 45 fc 00 00
	80 3f		 mov	 DWORD PTR _aPDTVertex$[ebp+20], 1065353216 ; 3f800000H
  00066	c6 45 0b 00	 mov	 BYTE PTR $T4[ebp], 0
  0006a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006d	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  00071	89 45 f0	 mov	 DWORD PTR _aPDTVertex$[ebp+8], eax
  00074	8d 45 e8	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  00077	50		 push	 eax
  00078	8d 45 0b	 lea	 eax, DWORD PTR $T4[ebp]
  0007b	66 0f d6 45 e8	 movq	 QWORD PTR _aPDTVertex$[ebp], xmm0
  00080	50		 push	 eax
  00081	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 439  : 
; 440  : 	aPDTVertex.position		= c_pv3QuadPoints[1];

  00086	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 441  : 	aPDTVertex.texCoord.x	= 0.0f;
; 442  : 	aPDTVertex.texCoord.y	= 0.0f;
; 443  : 	rSkyObjectQuad.SetVertex(1, aPDTVertex);

  00089	8b cb		 mov	 ecx, ebx
  0008b	f3 0f 7e 46 0c	 movq	 xmm0, QWORD PTR [esi+12]
  00090	89 45 f0	 mov	 DWORD PTR _aPDTVertex$[ebp+8], eax
  00093	8d 45 e8	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  00096	50		 push	 eax
  00097	8d 45 0b	 lea	 eax, DWORD PTR $T3[ebp]
  0009a	66 0f d6 45 e8	 movq	 QWORD PTR _aPDTVertex$[ebp], xmm0
  0009f	50		 push	 eax
  000a0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _aPDTVertex$[ebp+20], 0
  000a7	c6 45 0b 01	 mov	 BYTE PTR $T3[ebp], 1
  000ab	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 444  : 
; 445  : 	aPDTVertex.position		= c_pv3QuadPoints[2];

  000b0	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 446  : 	aPDTVertex.texCoord.x	= 1.0f;
; 447  : 	aPDTVertex.texCoord.y	= 1.0f;
; 448  : 	rSkyObjectQuad.SetVertex(2, aPDTVertex);

  000b3	8b cb		 mov	 ecx, ebx
  000b5	f3 0f 7e 46 18	 movq	 xmm0, QWORD PTR [esi+24]
  000ba	89 45 f0	 mov	 DWORD PTR _aPDTVertex$[ebp+8], eax
  000bd	8d 45 e8	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  000c0	50		 push	 eax
  000c1	8d 45 0b	 lea	 eax, DWORD PTR $T2[ebp]
  000c4	66 0f d6 45 e8	 movq	 QWORD PTR _aPDTVertex$[ebp], xmm0
  000c9	50		 push	 eax
  000ca	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _aPDTVertex$[ebp+16], 1065353216 ; 3f800000H
  000d1	c7 45 fc 00 00
	80 3f		 mov	 DWORD PTR _aPDTVertex$[ebp+20], 1065353216 ; 3f800000H
  000d8	c6 45 0b 02	 mov	 BYTE PTR $T2[ebp], 2
  000dc	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 449  : 
; 450  : 	aPDTVertex.position		= c_pv3QuadPoints[3];

  000e1	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 451  : 	aPDTVertex.texCoord.x	= 1.0f;
; 452  : 	aPDTVertex.texCoord.y	= 0.0f;
; 453  : 	rSkyObjectQuad.SetVertex(3, aPDTVertex);

  000e4	8b cb		 mov	 ecx, ebx
  000e6	f3 0f 7e 46 24	 movq	 xmm0, QWORD PTR [esi+36]
  000eb	89 45 f0	 mov	 DWORD PTR _aPDTVertex$[ebp+8], eax
  000ee	8d 45 e8	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  000f1	50		 push	 eax
  000f2	8d 45 0b	 lea	 eax, DWORD PTR $T1[ebp]
  000f5	66 0f d6 45 e8	 movq	 QWORD PTR _aPDTVertex$[ebp], xmm0
  000fa	50		 push	 eax
  000fb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _aPDTVertex$[ebp+20], 0
  00102	c6 45 0b 03	 mov	 BYTE PTR $T1[ebp], 3
  00106	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi
  0010d	5b		 pop	 ebx

; 454  : }

  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c2 08 00	 ret	 8
$LN23@SetSkyObje:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1968 :             _Xrange();

  00114	e8 00 00 00 00	 call	 ?_Xrange@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xrange
$LN21@SetSkyObje:
  00119	cc		 int	 3
?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ENDP ; CSkyBox::SetSkyObjectQuadHorizon
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_aPDTVertex$ = -48					; size = 24
tv797 = -24						; size = 4
tv787 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -16						; size = 4
_rSkyObjectQuad$1$ = -16				; size = 4
_rSkyObjectQuad$1$ = -16				; size = 4
_dwIndex$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
$T3 = -2						; size = 1
$T4 = -2						; size = 1
$T5 = -2						; size = 1
$T6 = -2						; size = 1
$T7 = -2						; size = 1
$T8 = -2						; size = 1
$T9 = -2						; size = 1
$T10 = -2						; size = 1
$T11 = -2						; size = 1
$T12 = -2						; size = 1
_ucY$2$ = -1						; size = 1
_ucY$1$ = -1						; size = 1
_pSkyObjectQuadVector$ = 8				; size = 4
_c_pv2QuadPoints$ = 12					; size = 4
?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z PROC ; CSkyBox::SetSkyObjectQuadVertical, COMDAT
; _this$ = ecx

; 347  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00006	8b 45 08	 mov	 eax, DWORD PTR _pSkyObjectQuadVector$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 347  : {

  00009	8b d1		 mov	 edx, ecx
  0000b	56		 push	 esi
  0000c	57		 push	 edi

; 348  : 	TPDTVertex aPDTVertex;
; 349  : 
; 350  : 	DWORD dwIndex = 0;

  0000d	33 ff		 xor	 edi, edi
  0000f	89 55 f8	 mov	 DWORD PTR _this$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00012	8b 30		 mov	 esi, DWORD PTR [eax]
  00014	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00017	3b f0		 cmp	 esi, eax
  00019	74 26		 je	 SHORT $LN41@SetSkyObje
  0001b	8b f8		 mov	 edi, eax
  0001d	0f 1f 00	 npad	 3
$LL22@SetSkyObje:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 689  :         _Ptr->~_Uty();

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	8b ce		 mov	 ecx, esi
  00024	6a 00		 push	 0
  00026	ff 10		 call	 DWORD PTR [eax]

; 947  :         for (; _First != _Last; ++_First) {

  00028	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  0002e	3b f7		 cmp	 esi, edi
  00030	75 ee		 jne	 SHORT $LL22@SetSkyObje
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1839 :         _Mylast = _Myfirst;

  00032	8b 75 08	 mov	 esi, DWORD PTR _pSkyObjectQuadVector$[ebp]
  00035	33 ff		 xor	 edi, edi
  00037	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  0003a	8b 06		 mov	 eax, DWORD PTR [esi]
  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003f	eb 03		 jmp	 SHORT $LN16@SetSkyObje
$LN41@SetSkyObje:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00041	8b 75 08	 mov	 esi, DWORD PTR _pSkyObjectQuadVector$[ebp]
$LN16@SetSkyObje:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 353  : 	pSkyObjectQuadVector->resize(m_ucVirticalGradientLevelUpper + m_ucVirticalGradientLevelLower);

  00044	0f b6 8a 1d 02
	00 00		 movzx	 ecx, BYTE PTR [edx+541]
  0004b	0f b6 82 1c 02
	00 00		 movzx	 eax, BYTE PTR [edx+540]
  00052	03 c8		 add	 ecx, eax
  00054	51		 push	 ecx
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?resize@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAEXI@Z ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::resize

; 354  : 
; 355  : 	unsigned char ucY;
; 356  : 	for (ucY = 0; ucY < m_ucVirticalGradientLevelUpper; ++ucY)

  0005c	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0005f	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  00067	c6 45 ff 00	 mov	 BYTE PTR _ucY$1$[ebp], 0
  0006b	8a 88 1c 02 00
	00		 mov	 cl, BYTE PTR [eax+540]
  00071	88 4d fe	 mov	 BYTE PTR $T3[ebp], cl
  00074	84 c9		 test	 cl, cl
  00076	0f 84 fd 01 00
	00		 je	 $LN40@SetSkyObje
  0007c	0f 1f 40 00	 npad	 4
$LL4@SetSkyObje:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00080	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00083	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 358  : 		CSkyObjectQuad & rSkyObjectQuad = pSkyObjectQuadVector->at(dwIndex++);

  00088	89 7d f0	 mov	 DWORD PTR $T2[ebp], edi
  0008b	47		 inc	 edi
  0008c	89 7d f4	 mov	 DWORD PTR _dwIndex$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0008f	8b 3e		 mov	 edi, DWORD PTR [esi]
  00091	2b cf		 sub	 ecx, edi
  00093	f7 e9		 imul	 ecx
  00095	8b 4d f0	 mov	 ecx, DWORD PTR $T2[ebp]
  00098	c1 fa 05	 sar	 edx, 5
  0009b	8b c2		 mov	 eax, edx
  0009d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a0	03 c2		 add	 eax, edx
  000a2	3b c1		 cmp	 eax, ecx
  000a4	0f 86 4c 04 00
	00		 jbe	 $LN30@SetSkyObje
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 360  : 		aPDTVertex.position.x = c_pv2QuadPoints[0].x;

  000aa	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  000ad	69 c9 2c 01 00
	00		 imul	 ecx, ecx, 300
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 363  : 		aPDTVertex.texCoord.x = 0.0f;

  000b3	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _aPDTVertex$[ebp+16], 0
  000ba	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  000be	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  000c3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  000c8	03 cf		 add	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 362  : 		aPDTVertex.position.z = 1.0f - (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper);

  000ca	0f b6 7d ff	 movzx	 edi, BYTE PTR _ucY$1$[ebp]
  000ce	0f b6 45 fe	 movzx	 eax, BYTE PTR $T3[ebp]
  000d2	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  000d7	89 4d f0	 mov	 DWORD PTR _rSkyObjectQuad$1$[ebp], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 362  : 		aPDTVertex.position.z = 1.0f - (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper);

  000da	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 364  : 		aPDTVertex.texCoord.y = (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 365  : 		rSkyObjectQuad.SetVertex(0, aPDTVertex);

  000dd	c6 45 fe 00	 mov	 BYTE PTR $T12[ebp], 0
  000e1	66 0f 6e c0	 movd	 xmm0, eax
  000e5	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  000e8	66 0f 6e ce	 movd	 xmm1, esi
  000ec	0f 5b c0	 cvtdq2ps xmm0, xmm0
  000ef	50		 push	 eax
  000f0	8d 45 fe	 lea	 eax, DWORD PTR $T12[ebp]
  000f3	50		 push	 eax
  000f4	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000f7	f3 0f 5e c8	 divss	 xmm1, xmm0
  000fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00103	f3 0f 5c c1	 subss	 xmm0, xmm1
  00107	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0010b	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  00110	f3 0f 11 45 d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm0
  00115	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 366  : 		aPDTVertex.position.x = c_pv2QuadPoints[0].x;

  0011a	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]
  0011d	66 0f 6e cf	 movd	 xmm1, edi

; 367  : 		aPDTVertex.position.y = c_pv2QuadPoints[0].y;
; 368  : 		aPDTVertex.position.z = 1.0f - (float)(ucY) / (float)(m_ucVirticalGradientLevelUpper);

  00121	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 369  : 		aPDTVertex.texCoord.x = 0.0f;
; 370  : 		aPDTVertex.texCoord.y = (float)(ucY) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 371  : 		rSkyObjectQuad.SetVertex(1, aPDTVertex);

  00124	8b 4d f0	 mov	 ecx, DWORD PTR _rSkyObjectQuad$1$[ebp]
  00127	c6 45 fe 01	 mov	 BYTE PTR $T11[ebp], 1
  0012b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0012f	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  00134	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00139	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  0013c	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
  00141	0f b6 80 1c 02
	00 00		 movzx	 eax, BYTE PTR [eax+540]
  00148	66 0f 6e c0	 movd	 xmm0, eax
  0014c	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  0014f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00152	50		 push	 eax
  00153	8d 45 fe	 lea	 eax, DWORD PTR $T11[ebp]
  00156	50		 push	 eax
  00157	f3 0f 5e c8	 divss	 xmm1, xmm0
  0015b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00163	f3 0f 5c c1	 subss	 xmm0, xmm1
  00167	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  0016f	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  00174	f3 0f 11 45 d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm0
  00179	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 372  : 		aPDTVertex.position.x = c_pv2QuadPoints[1].x;

  0017e	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]
  00181	66 0f 6e ce	 movd	 xmm1, esi

; 373  : 		aPDTVertex.position.y = c_pv2QuadPoints[1].y;
; 374  : 		aPDTVertex.position.z = 1.0f - (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper);

  00185	0f 5b c9	 cvtdq2ps xmm1, xmm1

; 375  : 		aPDTVertex.texCoord.x = 1.0f;
; 376  : 		aPDTVertex.texCoord.y = (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 377  : 		rSkyObjectQuad.SetVertex(2, aPDTVertex);

  00188	8b 4d f0	 mov	 ecx, DWORD PTR _rSkyObjectQuad$1$[ebp]
  0018b	c7 45 e0 00 00
	80 3f		 mov	 DWORD PTR _aPDTVertex$[ebp+16], 1065353216 ; 3f800000H
  00192	c6 45 fe 02	 mov	 BYTE PTR $T10[ebp], 2
  00196	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0019b	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  001a0	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  001a5	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a8	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
  001ad	0f b6 80 1c 02
	00 00		 movzx	 eax, BYTE PTR [eax+540]
  001b4	66 0f 6e c0	 movd	 xmm0, eax
  001b8	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  001bb	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001be	50		 push	 eax
  001bf	8d 45 fe	 lea	 eax, DWORD PTR $T10[ebp]
  001c2	50		 push	 eax
  001c3	f3 0f 5e c8	 divss	 xmm1, xmm0
  001c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001cf	f3 0f 5c c1	 subss	 xmm0, xmm1
  001d3	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  001db	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  001e0	f3 0f 11 45 d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm0
  001e5	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 378  : 		aPDTVertex.position.x = c_pv2QuadPoints[1].x;

  001ea	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]
  001ed	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001f2	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0

; 379  : 		aPDTVertex.position.y = c_pv2QuadPoints[1].y;

  001f7	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]

; 380  : 		aPDTVertex.position.z = 1.0f - (float)(ucY) / (float)(m_ucVirticalGradientLevelUpper);

  001fc	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  001ff	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
  00204	66 0f 6e cf	 movd	 xmm1, edi
  00208	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0020b	0f b6 80 1c 02
	00 00		 movzx	 eax, BYTE PTR [eax+540]

; 381  : 		aPDTVertex.texCoord.x = 1.0f;
; 382  : 		aPDTVertex.texCoord.y = (float)(ucY) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 383  : 		rSkyObjectQuad.SetVertex(3, aPDTVertex);

  00212	8b 4d f0	 mov	 ecx, DWORD PTR _rSkyObjectQuad$1$[ebp]
  00215	c6 45 fe 03	 mov	 BYTE PTR $T9[ebp], 3
  00219	66 0f 6e c0	 movd	 xmm0, eax
  0021d	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  00220	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00223	50		 push	 eax
  00224	8d 45 fe	 lea	 eax, DWORD PTR $T9[ebp]
  00227	50		 push	 eax
  00228	f3 0f 5e c8	 divss	 xmm1, xmm0
  0022c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00234	f3 0f 5c c1	 subss	 xmm0, xmm1
  00238	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00240	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  00245	f3 0f 11 45 d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm0
  0024a	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex
  0024f	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  00252	8a 4d ff	 mov	 cl, BYTE PTR _ucY$1$[ebp]
  00255	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  0025d	fe c1		 inc	 cl
  0025f	8b 7d f4	 mov	 edi, DWORD PTR _dwIndex$1$[ebp]
  00262	8a 90 1c 02 00
	00		 mov	 dl, BYTE PTR [eax+540]
  00268	8b 75 08	 mov	 esi, DWORD PTR _pSkyObjectQuadVector$[ebp]
  0026b	88 4d ff	 mov	 BYTE PTR _ucY$1$[ebp], cl
  0026e	88 55 fe	 mov	 BYTE PTR $T3[ebp], dl
  00271	3a ca		 cmp	 cl, dl
  00273	0f 82 07 fe ff
	ff		 jb	 $LL4@SetSkyObje
$LN40@SetSkyObje:

; 384  : 	}
; 385  : 	for (ucY = 0; ucY < m_ucVirticalGradientLevelLower; ++ucY)

  00279	8a 80 1d 02 00
	00		 mov	 al, BYTE PTR [eax+541]
  0027f	c6 45 ff 00	 mov	 BYTE PTR _ucY$2$[ebp], 0
  00283	88 45 fe	 mov	 BYTE PTR $T4[ebp], al
  00286	84 c0		 test	 al, al
  00288	0f 84 60 02 00
	00		 je	 $LN6@SetSkyObje
  0028e	66 90		 npad	 2
$LL7@SetSkyObje:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  00290	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00293	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 387  : 		CSkyObjectQuad & rSkyObjectQuad = pSkyObjectQuadVector->at(dwIndex++);

  00298	89 7d f0	 mov	 DWORD PTR $T1[ebp], edi
  0029b	47		 inc	 edi
  0029c	89 7d f4	 mov	 DWORD PTR _dwIndex$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1967 :         if (static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst) <= _Pos) {

  0029f	8b 3e		 mov	 edi, DWORD PTR [esi]
  002a1	2b cf		 sub	 ecx, edi
  002a3	f7 e9		 imul	 ecx
  002a5	8b 4d f0	 mov	 ecx, DWORD PTR $T1[ebp]
  002a8	c1 fa 05	 sar	 edx, 5
  002ab	8b c2		 mov	 eax, edx
  002ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002b0	03 c2		 add	 eax, edx
  002b2	3b c1		 cmp	 eax, ecx
  002b4	0f 86 3c 02 00
	00		 jbe	 $LN30@SetSkyObje
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 389  : 		aPDTVertex.position.x = c_pv2QuadPoints[0].x;

  002ba	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  002bd	69 c9 2c 01 00
	00		 imul	 ecx, ecx, 300
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 392  : 		aPDTVertex.texCoord.x = 0.0f;

  002c3	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _aPDTVertex$[ebp+16], 0
  002ca	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  002ce	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  002d3	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  002d8	03 cf		 add	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 391  : 		aPDTVertex.position.z = -(float)(ucY + 1) / (float)(m_ucVirticalGradientLevelLower);

  002da	0f b6 7d ff	 movzx	 edi, BYTE PTR _ucY$2$[ebp]
  002de	0f b6 45 fe	 movzx	 eax, BYTE PTR $T4[ebp]
  002e2	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1971 :         return _My_data._Myfirst[_Pos];

  002e7	89 4d f0	 mov	 DWORD PTR _rSkyObjectQuad$1$[ebp], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 391  : 		aPDTVertex.position.z = -(float)(ucY + 1) / (float)(m_ucVirticalGradientLevelLower);

  002ea	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 393  : 		aPDTVertex.texCoord.y = 0.5f + (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 394  : 		rSkyObjectQuad.SetVertex(0, aPDTVertex);

  002ed	c6 45 fe 00	 mov	 BYTE PTR $T8[ebp], 0
  002f1	66 0f 6e d6	 movd	 xmm2, esi
  002f5	0f 5b d2	 cvtdq2ps xmm2, xmm2
  002f8	66 0f 6e c0	 movd	 xmm0, eax
  002fc	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  002ff	0f 28 ca	 movaps	 xmm1, xmm2
  00302	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00309	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0030c	0f b6 80 1c 02
	00 00		 movzx	 eax, BYTE PTR [eax+540]
  00313	f3 0f 11 4d ec	 movss	 DWORD PTR tv787[ebp], xmm1
  00318	f3 0f 5e c8	 divss	 xmm1, xmm0
  0031c	66 0f 6e c0	 movd	 xmm0, eax
  00320	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  00323	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00326	50		 push	 eax
  00327	8d 45 fe	 lea	 eax, DWORD PTR $T8[ebp]
  0032a	50		 push	 eax
  0032b	f3 0f 11 4d d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm1
  00330	0f 28 ca	 movaps	 xmm1, xmm2
  00333	f3 0f 5e c8	 divss	 xmm1, xmm0
  00337	f3 0f 59 cb	 mulss	 xmm1, xmm3
  0033b	f3 0f 58 cb	 addss	 xmm1, xmm3
  0033f	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  00344	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 395  : 		aPDTVertex.position.x = c_pv2QuadPoints[0].x;

  00349	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]

; 396  : 		aPDTVertex.position.y = c_pv2QuadPoints[0].y;
; 397  : 		aPDTVertex.position.z = -(float)(ucY) / (float)(m_ucVirticalGradientLevelLower);

  0034c	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0034f	66 0f 6e d7	 movd	 xmm2, edi
  00353	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 398  : 		aPDTVertex.texCoord.x = 0.0f;
; 399  : 		aPDTVertex.texCoord.y = 0.5f + (float)(ucY) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 400  : 		rSkyObjectQuad.SetVertex(1, aPDTVertex);

  00356	c6 45 fe 01	 mov	 BYTE PTR $T7[ebp], 1
  0035a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0035e	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  00363	0f 28 ca	 movaps	 xmm1, xmm2
  00366	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0036b	0f b6 81 1d 02
	00 00		 movzx	 eax, BYTE PTR [ecx+541]
  00372	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00379	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
  0037e	f3 0f 11 4d e8	 movss	 DWORD PTR tv797[ebp], xmm1
  00383	66 0f 6e c0	 movd	 xmm0, eax
  00387	0f b6 81 1c 02
	00 00		 movzx	 eax, BYTE PTR [ecx+540]
  0038e	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00391	8b 4d f0	 mov	 ecx, DWORD PTR _rSkyObjectQuad$1$[ebp]
  00394	f3 0f 5e c8	 divss	 xmm1, xmm0
  00398	66 0f 6e c0	 movd	 xmm0, eax
  0039c	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  0039f	0f 5b c0	 cvtdq2ps xmm0, xmm0
  003a2	50		 push	 eax
  003a3	8d 45 fe	 lea	 eax, DWORD PTR $T7[ebp]
  003a6	50		 push	 eax
  003a7	f3 0f 11 4d d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm1
  003ac	0f 28 ca	 movaps	 xmm1, xmm2
  003af	f3 0f 5e c8	 divss	 xmm1, xmm0
  003b3	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  003bb	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  003c3	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  003c8	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 401  : 		aPDTVertex.position.x = c_pv2QuadPoints[1].x;

  003cd	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]

; 402  : 		aPDTVertex.position.y = c_pv2QuadPoints[1].y;
; 403  : 		aPDTVertex.position.z = -(float)(ucY + 1) / (float)(m_ucVirticalGradientLevelLower);

  003d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  003d3	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR tv787[ebp]

; 404  : 		aPDTVertex.texCoord.x = 1.0f;

  003d8	c7 45 e0 00 00
	80 3f		 mov	 DWORD PTR _aPDTVertex$[ebp+16], 1065353216 ; 3f800000H
  003df	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  003e4	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  003e9	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  003ee	0f b6 81 1d 02
	00 00		 movzx	 eax, BYTE PTR [ecx+541]
  003f5	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
  003fa	66 0f 6e c0	 movd	 xmm0, eax
  003fe	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 405  : 		aPDTVertex.texCoord.y = 0.5f + (float)(ucY + 1) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;

  00401	0f b6 81 1c 02
	00 00		 movzx	 eax, BYTE PTR [ecx+540]
  00408	f3 0f 5e c8	 divss	 xmm1, xmm0
  0040c	f3 0f 11 4d d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm1

; 406  : 		rSkyObjectQuad.SetVertex(2, aPDTVertex);

  00411	66 0f 6e c0	 movd	 xmm0, eax
  00415	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  00418	66 0f 6e ce	 movd	 xmm1, esi
  0041c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0041f	8b 4d f0	 mov	 ecx, DWORD PTR _rSkyObjectQuad$1$[ebp]
  00422	50		 push	 eax
  00423	8d 45 fe	 lea	 eax, DWORD PTR $T6[ebp]
  00426	c6 45 fe 02	 mov	 BYTE PTR $T6[ebp], 2
  0042a	50		 push	 eax
  0042b	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0042e	f3 0f 5e c8	 divss	 xmm1, xmm0
  00432	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  0043a	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  00442	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  00447	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex

; 407  : 		aPDTVertex.position.x = c_pv2QuadPoints[1].x;

  0044c	8b 45 0c	 mov	 eax, DWORD PTR _c_pv2QuadPoints$[ebp]

; 408  : 		aPDTVertex.position.y = c_pv2QuadPoints[1].y;
; 409  : 		aPDTVertex.position.z = -(float)(ucY) / (float)(m_ucVirticalGradientLevelLower);

  0044f	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00452	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR tv797[ebp]

; 410  : 		aPDTVertex.texCoord.x = 1.0f;
; 411  : 		aPDTVertex.texCoord.y = 0.5f + (float)(ucY) / (float)(m_ucVirticalGradientLevelUpper) * 0.5f;
; 412  : 		rSkyObjectQuad.SetVertex(3, aPDTVertex);

  00457	c6 45 fe 03	 mov	 BYTE PTR $T5[ebp], 3
  0045b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00460	f3 0f 11 45 d0	 movss	 DWORD PTR _aPDTVertex$[ebp], xmm0
  00465	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0046a	0f b6 81 1d 02
	00 00		 movzx	 eax, BYTE PTR [ecx+541]
  00471	f3 0f 11 45 d4	 movss	 DWORD PTR _aPDTVertex$[ebp+4], xmm0
  00476	66 0f 6e c0	 movd	 xmm0, eax
  0047a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0047d	0f b6 81 1c 02
	00 00		 movzx	 eax, BYTE PTR [ecx+540]
  00484	8b 4d f0	 mov	 ecx, DWORD PTR _rSkyObjectQuad$1$[ebp]
  00487	f3 0f 5e c8	 divss	 xmm1, xmm0
  0048b	66 0f 6e c0	 movd	 xmm0, eax
  0048f	8d 45 d0	 lea	 eax, DWORD PTR _aPDTVertex$[ebp]
  00492	f3 0f 11 4d d8	 movss	 DWORD PTR _aPDTVertex$[ebp+8], xmm1
  00497	66 0f 6e cf	 movd	 xmm1, edi
  0049b	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0049e	50		 push	 eax
  0049f	8d 45 fe	 lea	 eax, DWORD PTR $T5[ebp]
  004a2	50		 push	 eax
  004a3	0f 5b c0	 cvtdq2ps xmm0, xmm0
  004a6	f3 0f 5e c8	 divss	 xmm1, xmm0
  004aa	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  004b2	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  004ba	f3 0f 11 4d e4	 movss	 DWORD PTR _aPDTVertex$[ebp+20], xmm1
  004bf	e8 00 00 00 00	 call	 ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ; CSkyObjectQuad::SetVertex
  004c4	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  004c7	8a 4d ff	 mov	 cl, BYTE PTR _ucY$2$[ebp]
  004ca	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f000000
  004d2	fe c1		 inc	 cl
  004d4	8b 7d f4	 mov	 edi, DWORD PTR _dwIndex$1$[ebp]
  004d7	8a 80 1d 02 00
	00		 mov	 al, BYTE PTR [eax+541]
  004dd	8b 75 08	 mov	 esi, DWORD PTR _pSkyObjectQuadVector$[ebp]
  004e0	88 4d ff	 mov	 BYTE PTR _ucY$2$[ebp], cl
  004e3	88 45 fe	 mov	 BYTE PTR $T4[ebp], al
  004e6	3a c8		 cmp	 cl, al
  004e8	0f 82 a2 fd ff
	ff		 jb	 $LL7@SetSkyObje
$LN6@SetSkyObje:
  004ee	5f		 pop	 edi

; 414  : }

  004ef	5e		 pop	 esi
  004f0	8b e5		 mov	 esp, ebp
  004f2	5d		 pop	 ebp
  004f3	c2 08 00	 ret	 8
$LN30@SetSkyObje:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1968 :             _Xrange();

  004f6	e8 00 00 00 00	 call	 ?_Xrange@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xrange
$LN42@SetSkyObje:
  004fb	cc		 int	 3
?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z ENDP ; CSkyBox::SetSkyObjectQuadVertical
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?StartTransition@CSkyBox@@UAEXXZ
_TEXT	SEGMENT
?StartTransition@CSkyBox@@UAEXXZ PROC			; CSkyBox::StartTransition, COMDAT
; _this$ = ecx

; 814  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 815  : 	m_bTransitionStarted = true;

  00005	bf 06 00 00 00	 mov	 edi, 6
  0000a	c6 83 f0 01 00
	00 01		 mov	 BYTE PTR [ebx+496], 1
  00011	8d b3 20 02 00
	00		 lea	 esi, DWORD PTR [ebx+544]
$LL4@StartTrans:

; 816  : 	for (unsigned char ucj = 0; ucj < 6; ++ucj)
; 817  : 	{
; 818  : 		m_Faces[ucj].StartTransition();

  00017	8b ce		 mov	 ecx, esi
  00019	e8 00 00 00 00	 call	 ?StartTransition@SSkyObjectFace@CSkyObject@@QAEXXZ ; CSkyObject::SSkyObjectFace::StartTransition
  0001e	83 c6 3c	 add	 esi, 60			; 0000003cH
  00021	83 ef 01	 sub	 edi, 1
  00024	75 f1		 jne	 SHORT $LL4@StartTrans

; 819  : 	}
; 820  : 	m_FaceCloud.StartTransition();

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	8d 4b 04	 lea	 ecx, DWORD PTR [ebx+4]
  0002b	5b		 pop	 ebx
  0002c	e9 00 00 00 00	 jmp	 ?StartTransition@SSkyObjectFace@CSkyObject@@QAEXXZ ; CSkyObject::SSkyObjectFace::StartTransition
?StartTransition@CSkyBox@@UAEXXZ ENDP			; CSkyBox::StartTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetSkyColor@CSkyBox@@QAEXABV?$vector@UTGradientColor@@V?$allocator@UTGradientColor@@@std@@@std@@0J@Z
_TEXT	SEGMENT
$T1 = -28						; size = 4
tv2650 = -24						; size = 4
tv2588 = -24						; size = 4
tv2617 = -20						; size = 4
_uck$2$ = -20						; size = 4
_uck$1$ = -20						; size = 4
_this$1$ = -16						; size = 4
tv2589 = -12						; size = 4
_ulVectorGradientColornum$2$ = -12			; size = 4
_ulVectorGradientColornum$1$ = -12			; size = 4
$T2 = -8						; size = 1
$T3 = -8						; size = 1
$T4 = -8						; size = 1
$T5 = -7						; size = 1
$T6 = -7						; size = 1
$T7 = -7						; size = 1
$T8 = -6						; size = 1
$T9 = -6						; size = 1
$T10 = -6						; size = 1
$T11 = -5						; size = 1
$T12 = -5						; size = 1
$T13 = -5						; size = 1
$T14 = -4						; size = 1
$T15 = -4						; size = 1
$T16 = -4						; size = 1
$T17 = -3						; size = 1
$T18 = -3						; size = 1
$T19 = -3						; size = 1
$T20 = -2						; size = 1
$T21 = -2						; size = 1
$T22 = -1						; size = 1
$T23 = -1						; size = 1
_c_rColorVector$ = 8					; size = 4
$T24 = 11						; size = 1
_c_rNextColorVector$ = 12				; size = 4
_lTransitionTime$ = 16					; size = 4
$T25 = 19						; size = 1
?SetSkyColor@CSkyBox@@QAEXABV?$vector@UTGradientColor@@V?$allocator@UTGradientColor@@@std@@@std@@0J@Z PROC ; CSkyBox::SetSkyColor, COMDAT
; _this$ = ecx

; 647  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	53		 push	 ebx
  00007	8b c1		 mov	 eax, ecx

; 648  : 	unsigned long ulVectorGradientColornum = 0;
; 649  : 	unsigned long uck;
; 650  : 	for (unsigned char ucj = 0; ucj < 4; ++ucj)

  00009	bb 04 00 00 00	 mov	 ebx, 4
  0000e	56		 push	 esi
  0000f	57		 push	 edi
  00010	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax
  00013	8d b0 50 02 00
	00		 lea	 esi, DWORD PTR [eax+592]
  00019	89 5d e8	 mov	 DWORD PTR tv2650[ebp], ebx
  0001c	0f 1f 40 00	 npad	 4
$LL4@SetSkyColo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 653  : 		ulVectorGradientColornum = 0;

  00022	33 c9		 xor	 ecx, ecx
  00024	89 4d f4	 mov	 DWORD PTR _ulVectorGradientColornum$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00027	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  0002c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002f	2b cf		 sub	 ecx, edi
  00031	f7 e9		 imul	 ecx
  00033	c1 fa 05	 sar	 edx, 5
  00036	8b c2		 mov	 eax, edx
  00038	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003b	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 654  : 		for (uck = 0; uck < aFace.m_SkyObjectQuadVector.size(); ++uck)

  0003d	0f 84 73 01 00
	00		 je	 $LN2@SetSkyColo

; 658  : 			aSkyObjectQuad.SetSrcColor(0,

  00043	33 db		 xor	 ebx, ebx
  00045	c6 45 ff 00	 mov	 BYTE PTR $T23[ebp], 0
  00049	33 c0		 xor	 eax, eax

; 659  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 660  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 661  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 662  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 663  : 			aSkyObjectQuad.SetTransition(0,

  0004b	c6 45 fe 00	 mov	 BYTE PTR $T21[ebp], 0

; 664  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 665  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 666  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 667  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 668  : 										 lTransitionTime);
; 669  : 			aSkyObjectQuad.SetSrcColor(1,

  0004f	c6 45 fd 01	 mov	 BYTE PTR $T19[ebp], 1

; 670  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 671  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 672  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 673  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 674  : 			aSkyObjectQuad.SetTransition(1,

  00053	c6 45 fc 01	 mov	 BYTE PTR $T16[ebp], 1

; 675  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 676  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 677  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 678  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 679  : 										 lTransitionTime);
; 680  : 			aSkyObjectQuad.SetSrcColor(2,

  00057	c6 45 fb 02	 mov	 BYTE PTR $T13[ebp], 2

; 681  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 682  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 683  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 684  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 685  : 			aSkyObjectQuad.SetTransition(2,

  0005b	c6 45 fa 02	 mov	 BYTE PTR $T10[ebp], 2

; 686  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 687  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 688  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 689  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 690  : 										 lTransitionTime);
; 691  : 			aSkyObjectQuad.SetSrcColor(3,

  0005f	c6 45 f9 03	 mov	 BYTE PTR $T7[ebp], 3

; 692  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 693  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 694  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 695  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 696  : 			aSkyObjectQuad.SetTransition(3,

  00063	c6 45 f8 03	 mov	 BYTE PTR $T4[ebp], 3
  00067	89 45 ec	 mov	 DWORD PTR tv2617[ebp], eax
  0006a	66 0f 1f 44 00
	00		 npad	 6
$LL7@SetSkyColo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00070	03 f8		 add	 edi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 658  : 			aSkyObjectQuad.SetSrcColor(0,

  00072	8b 45 08	 mov	 eax, DWORD PTR _c_rColorVector$[ebp]
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	03 cb		 add	 ecx, ebx
  00079	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0007c	50		 push	 eax
  0007d	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00080	50		 push	 eax
  00081	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00084	50		 push	 eax
  00085	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00088	8b cf		 mov	 ecx, edi
  0008a	50		 push	 eax
  0008b	8d 45 ff	 lea	 eax, DWORD PTR $T23[ebp]
  0008e	50		 push	 eax
  0008f	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 659  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 660  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 661  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 662  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 663  : 			aSkyObjectQuad.SetTransition(0,

  00094	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  00097	ff 75 10	 push	 DWORD PTR _lTransitionTime$[ebp]
  0009a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0009c	03 cb		 add	 ecx, ebx
  0009e	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  000a1	50		 push	 eax
  000a2	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  000a5	50		 push	 eax
  000a6	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  000a9	50		 push	 eax
  000aa	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  000ad	8b cf		 mov	 ecx, edi
  000af	50		 push	 eax
  000b0	8d 45 fe	 lea	 eax, DWORD PTR $T21[ebp]
  000b3	50		 push	 eax
  000b4	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 664  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 665  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 666  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 667  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 668  : 										 lTransitionTime);
; 669  : 			aSkyObjectQuad.SetSrcColor(1,

  000b9	8b 4d 08	 mov	 ecx, DWORD PTR _c_rColorVector$[ebp]
  000bc	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000be	03 cb		 add	 ecx, ebx
  000c0	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  000c3	50		 push	 eax
  000c4	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  000c7	50		 push	 eax
  000c8	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000cb	50		 push	 eax
  000cc	51		 push	 ecx
  000cd	8d 45 fd	 lea	 eax, DWORD PTR $T19[ebp]
  000d0	8b cf		 mov	 ecx, edi
  000d2	50		 push	 eax
  000d3	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 670  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 671  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 672  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 673  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 674  : 			aSkyObjectQuad.SetTransition(1,

  000d8	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  000db	ff 75 10	 push	 DWORD PTR _lTransitionTime$[ebp]
  000de	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000e0	03 cb		 add	 ecx, ebx
  000e2	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  000e5	50		 push	 eax
  000e6	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  000e9	50		 push	 eax
  000ea	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000ed	50		 push	 eax
  000ee	51		 push	 ecx
  000ef	8d 45 fc	 lea	 eax, DWORD PTR $T16[ebp]
  000f2	8b cf		 mov	 ecx, edi
  000f4	50		 push	 eax
  000f5	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 675  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 676  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 677  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 678  : 										 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 679  : 										 lTransitionTime);
; 680  : 			aSkyObjectQuad.SetSrcColor(2,

  000fa	8b 4d 08	 mov	 ecx, DWORD PTR _c_rColorVector$[ebp]
  000fd	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000ff	03 cb		 add	 ecx, ebx
  00101	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00104	50		 push	 eax
  00105	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00108	50		 push	 eax
  00109	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0010c	50		 push	 eax
  0010d	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00110	8b cf		 mov	 ecx, edi
  00112	50		 push	 eax
  00113	8d 45 fb	 lea	 eax, DWORD PTR $T13[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 681  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 682  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 683  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 684  : 									   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 685  : 			aSkyObjectQuad.SetTransition(2,

  0011c	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  0011f	ff 75 10	 push	 DWORD PTR _lTransitionTime$[ebp]
  00122	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00124	03 cb		 add	 ecx, ebx
  00126	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00129	50		 push	 eax
  0012a	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  0012d	50		 push	 eax
  0012e	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00131	50		 push	 eax
  00132	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00135	8b cf		 mov	 ecx, edi
  00137	50		 push	 eax
  00138	8d 45 fa	 lea	 eax, DWORD PTR $T10[ebp]
  0013b	50		 push	 eax
  0013c	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 686  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 687  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 688  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 689  : 										 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 690  : 										 lTransitionTime);
; 691  : 			aSkyObjectQuad.SetSrcColor(3,

  00141	8b 4d 08	 mov	 ecx, DWORD PTR _c_rColorVector$[ebp]
  00144	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00146	03 cb		 add	 ecx, ebx
  00148	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0014b	50		 push	 eax
  0014c	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0014f	50		 push	 eax
  00150	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00153	50		 push	 eax
  00154	51		 push	 ecx
  00155	8d 45 f9	 lea	 eax, DWORD PTR $T7[ebp]
  00158	8b cf		 mov	 ecx, edi
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 692  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 693  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 694  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 695  : 									   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 696  : 			aSkyObjectQuad.SetTransition(3,

  00160	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  00163	ff 75 10	 push	 DWORD PTR _lTransitionTime$[ebp]
  00166	8b 11		 mov	 edx, DWORD PTR [ecx]
  00168	8b cf		 mov	 ecx, edi
  0016a	03 d3		 add	 edx, ebx
  0016c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0016f	50		 push	 eax
  00170	8d 42 08	 lea	 eax, DWORD PTR [edx+8]
  00173	50		 push	 eax
  00174	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00177	50		 push	 eax
  00178	52		 push	 edx
  00179	8d 45 f8	 lea	 eax, DWORD PTR $T4[ebp]
  0017c	50		 push	 eax
  0017d	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00182	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00185	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  0018a	8b 3e		 mov	 edi, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 703  : 			ulVectorGradientColornum++;

  0018c	83 c3 20	 add	 ebx, 32			; 00000020H
  0018f	ff 45 f4	 inc	 DWORD PTR _ulVectorGradientColornum$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00192	2b cf		 sub	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 703  : 			ulVectorGradientColornum++;

  00194	81 45 ec 2c 01
	00 00		 add	 DWORD PTR tv2617[ebp], 300 ; 0000012cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0019b	f7 e9		 imul	 ecx
  0019d	c1 fa 05	 sar	 edx, 5
  001a0	8b c2		 mov	 eax, edx
  001a2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001a5	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 654  : 		for (uck = 0; uck < aFace.m_SkyObjectQuadVector.size(); ++uck)

  001a7	39 45 f4	 cmp	 DWORD PTR _ulVectorGradientColornum$1$[ebp], eax
  001aa	8b 45 ec	 mov	 eax, DWORD PTR tv2617[ebp]
  001ad	0f 82 bd fe ff
	ff		 jb	 $LL7@SetSkyColo
  001b3	8b 5d e8	 mov	 ebx, DWORD PTR tv2650[ebp]
$LN2@SetSkyColo:

; 648  : 	unsigned long ulVectorGradientColornum = 0;
; 649  : 	unsigned long uck;
; 650  : 	for (unsigned char ucj = 0; ucj < 4; ++ucj)

  001b6	83 c6 3c	 add	 esi, 60			; 0000003cH
  001b9	83 eb 01	 sub	 ebx, 1
  001bc	89 5d e8	 mov	 DWORD PTR tv2650[ebp], ebx
  001bf	0f 85 5b fe ff
	ff		 jne	 $LL4@SetSkyColo

; 711  : 	for (uck = 0; uck < aFaceTop.m_SkyObjectQuadVector.size(); ++uck)

  001c5	8b 5d 08	 mov	 ebx, DWORD PTR _c_rColorVector$[ebp]
  001c8	33 c9		 xor	 ecx, ecx
  001ca	8b 7d 10	 mov	 edi, DWORD PTR _lTransitionTime$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001cd	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 711  : 	for (uck = 0; uck < aFaceTop.m_SkyObjectQuadVector.size(); ++uck)

  001d2	89 4d ec	 mov	 DWORD PTR _uck$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  001d5	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001d8	8b b1 40 03 00
	00		 mov	 esi, DWORD PTR [ecx+832]
  001de	8b 89 44 03 00
	00		 mov	 ecx, DWORD PTR [ecx+836]
  001e4	2b ce		 sub	 ecx, esi
  001e6	f7 e9		 imul	 ecx
  001e8	c1 fa 05	 sar	 edx, 5
  001eb	8b c2		 mov	 eax, edx
  001ed	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001f0	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 711  : 	for (uck = 0; uck < aFaceTop.m_SkyObjectQuadVector.size(); ++uck)

  001f2	0f 84 42 01 00
	00		 je	 $LN9@SetSkyColo

; 715  : 		aSkyObjectQuad.SetSrcColor(0,

  001f8	33 c0		 xor	 eax, eax
  001fa	c6 45 f8 00	 mov	 BYTE PTR $T3[ebp], 0

; 716  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 717  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 718  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 719  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 720  : 		aSkyObjectQuad.SetTransition(0,

  001fe	c6 45 f9 00	 mov	 BYTE PTR $T6[ebp], 0

; 721  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 722  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 723  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 724  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 725  : 									 lTransitionTime);
; 726  : 		aSkyObjectQuad.SetSrcColor(1,

  00202	c6 45 fa 01	 mov	 BYTE PTR $T9[ebp], 1

; 727  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 728  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 729  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 730  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 731  : 		aSkyObjectQuad.SetTransition(1,

  00206	c6 45 fb 01	 mov	 BYTE PTR $T12[ebp], 1

; 732  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 733  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 734  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 735  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 736  : 									 lTransitionTime);
; 737  : 		aSkyObjectQuad.SetSrcColor(2,

  0020a	c6 45 fc 02	 mov	 BYTE PTR $T15[ebp], 2

; 738  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 739  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 740  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 741  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 742  : 		aSkyObjectQuad.SetTransition(2,

  0020e	c6 45 fd 02	 mov	 BYTE PTR $T18[ebp], 2

; 743  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 744  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 745  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 746  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 747  : 									 lTransitionTime);
; 748  : 		aSkyObjectQuad.SetSrcColor(3,

  00212	c6 45 fe 03	 mov	 BYTE PTR $T20[ebp], 3

; 749  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 750  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 751  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 752  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 753  : 		aSkyObjectQuad.SetTransition(3,

  00216	c6 45 ff 03	 mov	 BYTE PTR $T22[ebp], 3
  0021a	89 45 f4	 mov	 DWORD PTR tv2589[ebp], eax
  0021d	0f 1f 00	 npad	 3
$LL10@SetSkyColo:

; 715  : 		aSkyObjectQuad.SetSrcColor(0,

  00220	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00222	03 f0		 add	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 715  : 		aSkyObjectQuad.SetSrcColor(0,

  00224	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00227	50		 push	 eax
  00228	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0022b	50		 push	 eax
  0022c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0022f	50		 push	 eax
  00230	51		 push	 ecx
  00231	8d 45 f8	 lea	 eax, DWORD PTR $T3[ebp]
  00234	8b ce		 mov	 ecx, esi
  00236	50		 push	 eax
  00237	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 716  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 717  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 718  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 719  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 720  : 		aSkyObjectQuad.SetTransition(0,

  0023c	8b 45 0c	 mov	 eax, DWORD PTR _c_rNextColorVector$[ebp]
  0023f	57		 push	 edi
  00240	8b 08		 mov	 ecx, DWORD PTR [eax]
  00242	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00245	50		 push	 eax
  00246	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00249	50		 push	 eax
  0024a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0024d	50		 push	 eax
  0024e	51		 push	 ecx
  0024f	8d 45 f9	 lea	 eax, DWORD PTR $T6[ebp]
  00252	8b ce		 mov	 ecx, esi
  00254	50		 push	 eax
  00255	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 721  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 722  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 723  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 724  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 725  : 									 lTransitionTime);
; 726  : 		aSkyObjectQuad.SetSrcColor(1,

  0025a	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0025c	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0025f	50		 push	 eax
  00260	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00263	50		 push	 eax
  00264	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00267	50		 push	 eax
  00268	51		 push	 ecx
  00269	8d 45 fa	 lea	 eax, DWORD PTR $T9[ebp]
  0026c	8b ce		 mov	 ecx, esi
  0026e	50		 push	 eax
  0026f	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 727  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 728  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 729  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 730  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 731  : 		aSkyObjectQuad.SetTransition(1,

  00274	8b 45 0c	 mov	 eax, DWORD PTR _c_rNextColorVector$[ebp]
  00277	57		 push	 edi
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  0027d	50		 push	 eax
  0027e	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00281	50		 push	 eax
  00282	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00285	50		 push	 eax
  00286	51		 push	 ecx
  00287	8d 45 fb	 lea	 eax, DWORD PTR $T12[ebp]
  0028a	8b ce		 mov	 ecx, esi
  0028c	50		 push	 eax
  0028d	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 732  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 733  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 734  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 735  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 736  : 									 lTransitionTime);
; 737  : 		aSkyObjectQuad.SetSrcColor(2,

  00292	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00294	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00297	50		 push	 eax
  00298	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  0029b	50		 push	 eax
  0029c	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0029f	50		 push	 eax
  002a0	51		 push	 ecx
  002a1	8d 45 fc	 lea	 eax, DWORD PTR $T15[ebp]
  002a4	8b ce		 mov	 ecx, esi
  002a6	50		 push	 eax
  002a7	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 738  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 739  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 740  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 741  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 742  : 		aSkyObjectQuad.SetTransition(2,

  002ac	8b 45 0c	 mov	 eax, DWORD PTR _c_rNextColorVector$[ebp]
  002af	57		 push	 edi
  002b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b2	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  002b5	50		 push	 eax
  002b6	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  002b9	50		 push	 eax
  002ba	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  002bd	50		 push	 eax
  002be	51		 push	 ecx
  002bf	8d 45 fd	 lea	 eax, DWORD PTR $T18[ebp]
  002c2	8b ce		 mov	 ecx, esi
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 743  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 744  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 745  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 746  : 									 c_rNextColorVector[ulVectorGradientColornum].m_FirstColor.a,
; 747  : 									 lTransitionTime);
; 748  : 		aSkyObjectQuad.SetSrcColor(3,

  002ca	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  002cc	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  002cf	50		 push	 eax
  002d0	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  002d3	50		 push	 eax
  002d4	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  002d7	50		 push	 eax
  002d8	51		 push	 ecx
  002d9	8d 45 fe	 lea	 eax, DWORD PTR $T20[ebp]
  002dc	8b ce		 mov	 ecx, esi
  002de	50		 push	 eax
  002df	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 749  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.r,
; 750  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.g,
; 751  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.b,
; 752  : 								   c_rColorVector[ulVectorGradientColornum].m_FirstColor.a);
; 753  : 		aSkyObjectQuad.SetTransition(3,

  002e4	8b 45 0c	 mov	 eax, DWORD PTR _c_rNextColorVector$[ebp]
  002e7	8b ce		 mov	 ecx, esi
  002e9	57		 push	 edi
  002ea	8b 10		 mov	 edx, DWORD PTR [eax]
  002ec	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  002ef	50		 push	 eax
  002f0	8d 42 08	 lea	 eax, DWORD PTR [edx+8]
  002f3	50		 push	 eax
  002f4	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  002f7	50		 push	 eax
  002f8	52		 push	 edx
  002f9	8d 45 ff	 lea	 eax, DWORD PTR $T22[ebp]
  002fc	50		 push	 eax
  002fd	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00302	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 711  : 	for (uck = 0; uck < aFaceTop.m_SkyObjectQuadVector.size(); ++uck)

  00305	ff 45 ec	 inc	 DWORD PTR _uck$1$[ebp]
  00308	81 45 f4 2c 01
	00 00		 add	 DWORD PTR tv2589[ebp], 300 ; 0000012cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0030f	8b 88 44 03 00
	00		 mov	 ecx, DWORD PTR [eax+836]
  00315	8b b0 40 03 00
	00		 mov	 esi, DWORD PTR [eax+832]
  0031b	2b ce		 sub	 ecx, esi
  0031d	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00322	f7 e9		 imul	 ecx
  00324	c1 fa 05	 sar	 edx, 5
  00327	8b c2		 mov	 eax, edx
  00329	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0032c	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 711  : 	for (uck = 0; uck < aFaceTop.m_SkyObjectQuadVector.size(); ++uck)

  0032e	39 45 ec	 cmp	 DWORD PTR _uck$1$[ebp], eax
  00331	8b 45 f4	 mov	 eax, DWORD PTR tv2589[ebp]
  00334	0f 82 e6 fe ff
	ff		 jb	 $LL10@SetSkyColo
$LN9@SetSkyColo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0033a	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 762  : 	for (uck = 0; uck < aFaceBottom.m_SkyObjectQuadVector.size(); ++uck)

  0033d	33 c9		 xor	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0033f	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00342	2b 33		 sub	 esi, DWORD PTR [ebx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 762  : 	for (uck = 0; uck < aFaceBottom.m_SkyObjectQuadVector.size(); ++uck)

  00344	89 4d ec	 mov	 DWORD PTR _uck$2$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00347	8b 90 7c 03 00
	00		 mov	 edx, DWORD PTR [eax+892]
  0034d	8b 88 80 03 00
	00		 mov	 ecx, DWORD PTR [eax+896]
  00353	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00358	2b ca		 sub	 ecx, edx
  0035a	89 55 e4	 mov	 DWORD PTR $T1[ebp], edx
  0035d	f7 e9		 imul	 ecx
  0035f	c1 fe 05	 sar	 esi, 5
  00362	c1 fa 05	 sar	 edx, 5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 761  : 	ulVectorGradientColornum = c_rColorVector.size() - 1;

  00365	4e		 dec	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00366	8b c2		 mov	 eax, edx
  00368	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0036b	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 762  : 	for (uck = 0; uck < aFaceBottom.m_SkyObjectQuadVector.size(); ++uck)

  0036d	0f 84 83 01 00
	00		 je	 $LN12@SetSkyColo

; 766  : 		aSkyObjectQuad.SetSrcColor(0,

  00373	c1 e6 05	 shl	 esi, 5
  00376	89 75 f4	 mov	 DWORD PTR _ulVectorGradientColornum$2$[ebp], esi
  00379	33 f6		 xor	 esi, esi
  0037b	c6 45 0b 00	 mov	 BYTE PTR $T24[ebp], 0

; 767  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 768  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 769  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 770  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 771  : 		aSkyObjectQuad.SetTransition(0,

  0037f	c6 45 13 00	 mov	 BYTE PTR $T25[ebp], 0

; 772  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 773  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 774  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 775  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 776  : 									 lTransitionTime);
; 777  : 		aSkyObjectQuad.SetSrcColor(1,

  00383	c6 45 f8 01	 mov	 BYTE PTR $T2[ebp], 1

; 778  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 779  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 780  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 781  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 782  : 		aSkyObjectQuad.SetTransition(1,

  00387	c6 45 f9 01	 mov	 BYTE PTR $T5[ebp], 1

; 783  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 784  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 785  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 786  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 787  : 									 lTransitionTime);
; 788  : 		aSkyObjectQuad.SetSrcColor(2,

  0038b	c6 45 fa 02	 mov	 BYTE PTR $T8[ebp], 2

; 789  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 790  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 791  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 792  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 793  : 		aSkyObjectQuad.SetTransition(2,

  0038f	c6 45 fb 02	 mov	 BYTE PTR $T11[ebp], 2

; 794  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 795  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 796  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 797  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 798  : 									 lTransitionTime);
; 799  : 		aSkyObjectQuad.SetSrcColor(3,

  00393	c6 45 fc 03	 mov	 BYTE PTR $T14[ebp], 3

; 800  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 801  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 802  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 803  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 804  : 		aSkyObjectQuad.SetTransition(3,

  00397	c6 45 fd 03	 mov	 BYTE PTR $T17[ebp], 3
  0039b	89 75 e8	 mov	 DWORD PTR tv2588[ebp], esi
  0039e	66 90		 npad	 2
$LL13@SetSkyColo:

; 766  : 		aSkyObjectQuad.SetSrcColor(0,

  003a0	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  003a3	03 0b		 add	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  003a5	03 75 e4	 add	 esi, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 766  : 		aSkyObjectQuad.SetSrcColor(0,

  003a8	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  003ab	50		 push	 eax
  003ac	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  003af	50		 push	 eax
  003b0	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  003b3	50		 push	 eax
  003b4	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  003b7	8b ce		 mov	 ecx, esi
  003b9	50		 push	 eax
  003ba	8d 45 0b	 lea	 eax, DWORD PTR $T24[ebp]
  003bd	50		 push	 eax
  003be	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 767  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 768  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 769  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 770  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 771  : 		aSkyObjectQuad.SetTransition(0,

  003c3	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  003c6	57		 push	 edi
  003c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  003c9	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  003cc	03 c8		 add	 ecx, eax
  003ce	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  003d1	50		 push	 eax
  003d2	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  003d5	50		 push	 eax
  003d6	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  003d9	50		 push	 eax
  003da	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  003dd	8b ce		 mov	 ecx, esi
  003df	50		 push	 eax
  003e0	8d 45 13	 lea	 eax, DWORD PTR $T25[ebp]
  003e3	50		 push	 eax
  003e4	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 772  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 773  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 774  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 775  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 776  : 									 lTransitionTime);
; 777  : 		aSkyObjectQuad.SetSrcColor(1,

  003e9	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  003ec	03 0b		 add	 ecx, DWORD PTR [ebx]
  003ee	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  003f1	50		 push	 eax
  003f2	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  003f5	50		 push	 eax
  003f6	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  003f9	50		 push	 eax
  003fa	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  003fd	8b ce		 mov	 ecx, esi
  003ff	50		 push	 eax
  00400	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  00403	50		 push	 eax
  00404	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 778  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 779  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 780  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 781  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 782  : 		aSkyObjectQuad.SetTransition(1,

  00409	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  0040c	57		 push	 edi
  0040d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0040f	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  00412	03 c8		 add	 ecx, eax
  00414	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00417	50		 push	 eax
  00418	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  0041b	50		 push	 eax
  0041c	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0041f	50		 push	 eax
  00420	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00423	8b ce		 mov	 ecx, esi
  00425	50		 push	 eax
  00426	8d 45 f9	 lea	 eax, DWORD PTR $T5[ebp]
  00429	50		 push	 eax
  0042a	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 783  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 784  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 785  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 786  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 787  : 									 lTransitionTime);
; 788  : 		aSkyObjectQuad.SetSrcColor(2,

  0042f	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  00432	03 0b		 add	 ecx, DWORD PTR [ebx]
  00434	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  00437	50		 push	 eax
  00438	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  0043b	50		 push	 eax
  0043c	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  0043f	50		 push	 eax
  00440	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00443	8b ce		 mov	 ecx, esi
  00445	50		 push	 eax
  00446	8d 45 fa	 lea	 eax, DWORD PTR $T8[ebp]
  00449	50		 push	 eax
  0044a	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 789  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 790  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 791  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 792  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 793  : 		aSkyObjectQuad.SetTransition(2,

  0044f	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  00452	8b 01		 mov	 eax, DWORD PTR [ecx]
  00454	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  00457	03 c8		 add	 ecx, eax
  00459	57		 push	 edi
  0045a	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0045d	50		 push	 eax
  0045e	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00461	50		 push	 eax
  00462	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00465	50		 push	 eax
  00466	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00469	8b ce		 mov	 ecx, esi
  0046b	50		 push	 eax
  0046c	8d 45 fb	 lea	 eax, DWORD PTR $T11[ebp]
  0046f	50		 push	 eax
  00470	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 794  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 795  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 796  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 797  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 798  : 									 lTransitionTime);
; 799  : 		aSkyObjectQuad.SetSrcColor(3,

  00475	8b 4d f4	 mov	 ecx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  00478	03 0b		 add	 ecx, DWORD PTR [ebx]
  0047a	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
  0047d	50		 push	 eax
  0047e	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00481	50		 push	 eax
  00482	8d 41 14	 lea	 eax, DWORD PTR [ecx+20]
  00485	50		 push	 eax
  00486	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]
  00489	8b ce		 mov	 ecx, esi
  0048b	50		 push	 eax
  0048c	8d 45 fc	 lea	 eax, DWORD PTR $T14[ebp]
  0048f	50		 push	 eax
  00490	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 800  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 801  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 802  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 803  : 								   c_rColorVector[ulVectorGradientColornum].m_SecondColor.a);
; 804  : 		aSkyObjectQuad.SetTransition(3,

  00495	8b 4d 0c	 mov	 ecx, DWORD PTR _c_rNextColorVector$[ebp]
  00498	8b 55 f4	 mov	 edx, DWORD PTR _ulVectorGradientColornum$2$[ebp]
  0049b	57		 push	 edi
  0049c	03 11		 add	 edx, DWORD PTR [ecx]
  0049e	8b ce		 mov	 ecx, esi
  004a0	8d 42 1c	 lea	 eax, DWORD PTR [edx+28]
  004a3	50		 push	 eax
  004a4	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  004a7	50		 push	 eax
  004a8	8d 42 14	 lea	 eax, DWORD PTR [edx+20]
  004ab	50		 push	 eax
  004ac	8d 42 10	 lea	 eax, DWORD PTR [edx+16]
  004af	50		 push	 eax
  004b0	8d 45 fd	 lea	 eax, DWORD PTR $T17[ebp]
  004b3	50		 push	 eax
  004b4	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004b9	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 762  : 	for (uck = 0; uck < aFaceBottom.m_SkyObjectQuadVector.size(); ++uck)

  004bc	8b 75 e8	 mov	 esi, DWORD PTR tv2588[ebp]
  004bf	ff 45 ec	 inc	 DWORD PTR _uck$2$[ebp]
  004c2	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  004c8	89 75 e8	 mov	 DWORD PTR tv2588[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  004cb	8b 90 7c 03 00
	00		 mov	 edx, DWORD PTR [eax+892]
  004d1	8b 88 80 03 00
	00		 mov	 ecx, DWORD PTR [eax+896]
  004d7	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  004dc	2b ca		 sub	 ecx, edx
  004de	89 55 e4	 mov	 DWORD PTR $T1[ebp], edx
  004e1	f7 e9		 imul	 ecx
  004e3	c1 fa 05	 sar	 edx, 5
  004e6	8b c2		 mov	 eax, edx
  004e8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  004eb	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 762  : 	for (uck = 0; uck < aFaceBottom.m_SkyObjectQuadVector.size(); ++uck)

  004ed	39 45 ec	 cmp	 DWORD PTR _uck$2$[ebp], eax
  004f0	0f 82 aa fe ff
	ff		 jb	 $LL13@SetSkyColo
$LN12@SetSkyColo:
  004f6	5f		 pop	 edi

; 805  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.r,
; 806  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.g,
; 807  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.b,
; 808  : 									 c_rNextColorVector[ulVectorGradientColornum].m_SecondColor.a,
; 809  : 									 lTransitionTime);
; 810  : 	}
; 811  : }

  004f7	5e		 pop	 esi
  004f8	5b		 pop	 ebx
  004f9	8b e5		 mov	 esp, ebp
  004fb	5d		 pop	 ebp
  004fc	c2 0c 00	 ret	 12			; 0000000cH
?SetSkyColor@CSkyBox@@QAEXABV?$vector@UTGradientColor@@V?$allocator@UTGradientColor@@@std@@@std@@0J@Z ENDP ; CSkyBox::SetSkyColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Refresh@CSkyBox@@QAEXXZ
_TEXT	SEGMENT
_v2QuadPoints$9 = -112					; size = 16
tv1279 = -96						; size = 16
tv1376 = -80						; size = 16
$T10 = -64						; size = 12
$T11 = -64						; size = 12
$T12 = -64						; size = 12
$T13 = -64						; size = 12
$T14 = -64						; size = 12
$T15 = -64						; size = 12
$T16 = -64						; size = 12
$T17 = -64						; size = 12
$T18 = -64						; size = 12
$T19 = -64						; size = 12
$T20 = -64						; size = 12
$T21 = -64						; size = 12
$T22 = -64						; size = 12
$T23 = -64						; size = 12
$T24 = -64						; size = 12
$T25 = -64						; size = 12
$T26 = -64						; size = 12
$T27 = -64						; size = 12
$T28 = -64						; size = 12
$T29 = -64						; size = 12
$T30 = -64						; size = 12
$T31 = -64						; size = 12
$T32 = -64						; size = 12
$T33 = -64						; size = 12
$T34 = -64						; size = 12
$T35 = -64						; size = 12
$T36 = -64						; size = 12
$T37 = -64						; size = 12
$T38 = -64						; size = 12
$T39 = -64						; size = 12
$T40 = -64						; size = 12
$T41 = -64						; size = 12
_v3QuadPoints$ = -52					; size = 48
__$ArrayPad$ = -4					; size = 4
?Refresh@CSkyBox@@QAEXXZ PROC				; CSkyBox::Refresh, COMDAT
; _this$ = ecx

; 457  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 458  : 	D3DXVECTOR3 v3QuadPoints[4];
; 459  : 
; 460  : 	if ( m_ucRenderMode == CSkyObject::SKY_RENDER_MODE_DEFAULT ||  m_ucRenderMode == CSkyObject::SKY_RENDER_MODE_DIFFUSE )

  00023	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0002b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  00033	56		 push	 esi
  00034	8b f1		 mov	 esi, ecx
  00036	0f 29 4d b0	 movaps	 XMMWORD PTR tv1376[ebp], xmm1
  0003a	0f 11 55 a0	 movups	 XMMWORD PTR tv1279[ebp], xmm2
  0003e	8a 86 d4 01 00
	00		 mov	 al, BYTE PTR [esi+468]
  00044	84 c0		 test	 al, al
  00046	0f 84 e9 02 00
	00		 je	 $LN4@Refresh
  0004c	3c 01		 cmp	 al, 1
  0004e	0f 84 e1 02 00
	00		 je	 $LN4@Refresh

; 506  : 		SetSkyObjectQuadHorizon(&m_Faces[5].m_SkyObjectQuadVector, v3QuadPoints);
; 507  : 		m_Faces[5].m_strfacename = "bottom";
; 508  : 
; 509  : 	}
; 510  : 	else if ( m_ucRenderMode == CSkyObject::SKY_RENDER_MODE_TEXTURE )

  00054	3c 02		 cmp	 al, 2
  00056	0f 85 bf 04 00
	00		 jne	 $LN6@Refresh

; 513  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, -1.0f, -1.0f);

  0005c	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0005f	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T33[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 513  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, -1.0f, -1.0f);

  00066	8b 45 c8	 mov	 eax, DWORD PTR $T33[ebp+8]
  00069	0f 14 c2	 unpcklps xmm0, xmm2
  0006c	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0

; 514  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  00071	0f 28 c1	 movaps	 xmm0, xmm1
  00074	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
  00077	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0007a	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T32[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 514  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  00081	8b 45 c8	 mov	 eax, DWORD PTR $T32[ebp+8]
  00084	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
  00087	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 515  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);

  0008c	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0008f	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T31[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 515  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);

  00096	8b 45 c8	 mov	 eax, DWORD PTR $T31[ebp+8]
  00099	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  0009c	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0009f	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T30[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 516  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

  000a6	8b 45 c8	 mov	 eax, DWORD PTR $T30[ebp+8]
  000a9	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 517  : 
; 518  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 519  : 
; 520  : 		SetSkyObjectQuadHorizon(&m_Faces[0].m_SkyObjectQuadVector, v3QuadPoints);

  000ac	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  000af	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0
  000b4	0f 28 c2	 movaps	 xmm0, xmm2
  000b7	50		 push	 eax
  000b8	8d 86 50 02 00
	00		 lea	 eax, DWORD PTR [esi+592]
  000be	0f 14 c2	 unpcklps xmm0, xmm2
  000c1	50		 push	 eax
  000c2	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  000c7	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon

; 521  : 		m_Faces[0].m_strfacename = "front";

  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_05HJNNLMDJ@front@
  000d1	8d 8e 20 02 00
	00		 lea	 ecx, DWORD PTR [esi+544]
  000d7	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 524  : 		v3QuadPoints[0] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  000dc	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]

; 528  : 
; 529  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 530  : 
; 531  : 		SetSkyObjectQuadHorizon(&m_Faces[1].m_SkyObjectQuadVector, v3QuadPoints);

  000e0	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  000e2	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T29[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 524  : 		v3QuadPoints[0] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  000e9	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]
  000ed	8b 45 c8	 mov	 eax, DWORD PTR $T29[ebp+8]
  000f0	0f 28 c2	 movaps	 xmm0, xmm2
  000f3	0f 14 c1	 unpcklps xmm0, xmm1
  000f6	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0

; 525  : 		v3QuadPoints[1] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  000fb	0f 28 c2	 movaps	 xmm0, xmm2
  000fe	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
  00101	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00104	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T28[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 525  : 		v3QuadPoints[1] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  0010b	8b 45 c8	 mov	 eax, DWORD PTR $T28[ebp+8]
  0010e	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
  00111	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 526  : 		v3QuadPoints[2] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  00116	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00119	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T27[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 526  : 		v3QuadPoints[2] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  00120	8b 45 c8	 mov	 eax, DWORD PTR $T27[ebp+8]
  00123	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  00126	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00129	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T26[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 527  : 		v3QuadPoints[3] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  00130	8b 45 c8	 mov	 eax, DWORD PTR $T26[ebp+8]
  00133	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 528  : 
; 529  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 530  : 
; 531  : 		SetSkyObjectQuadHorizon(&m_Faces[1].m_SkyObjectQuadVector, v3QuadPoints);

  00136	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  00139	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0
  0013e	0f 28 c1	 movaps	 xmm0, xmm1
  00141	50		 push	 eax
  00142	8d 86 8c 02 00
	00		 lea	 eax, DWORD PTR [esi+652]
  00148	0f 14 c1	 unpcklps xmm0, xmm1
  0014b	50		 push	 eax
  0014c	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  00151	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon

; 532  : 		m_Faces[1].m_strfacename = "back";

  00156	68 00 00 00 00	 push	 OFFSET ??_C@_04JFCNHLLM@back@
  0015b	8d 8e 5c 02 00
	00		 lea	 ecx, DWORD PTR [esi+604]
  00161	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 535  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  00166	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]
  0016a	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0016d	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T25[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 535  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  00174	8b 45 c8	 mov	 eax, DWORD PTR $T25[ebp+8]
  00177	0f 14 c1	 unpcklps xmm0, xmm1
  0017a	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0

; 536  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  0017f	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00182	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T24[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 535  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  00189	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax

; 536  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  0018c	8b 45 c8	 mov	 eax, DWORD PTR $T24[ebp+8]
  0018f	0f 14 c1	 unpcklps xmm0, xmm1
  00192	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0
  00197	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0019a	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T23[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 537  : 		v3QuadPoints[2] = D3DXVECTOR3(1.0f, -1.0f, -1.0f);

  001a1	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]
  001a5	8b 45 c8	 mov	 eax, DWORD PTR $T23[ebp+8]

; 539  : 
; 540  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 541  : 
; 542  : 		SetSkyObjectQuadHorizon(&m_Faces[2].m_SkyObjectQuadVector, v3QuadPoints);

  001a8	8b ce		 mov	 ecx, esi
  001aa	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  001ad	0f 28 c1	 movaps	 xmm0, xmm1
  001b0	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  001b3	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T22[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 538  : 		v3QuadPoints[3] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  001ba	8b 45 c8	 mov	 eax, DWORD PTR $T22[ebp+8]
  001bd	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 539  : 
; 540  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 541  : 
; 542  : 		SetSkyObjectQuadHorizon(&m_Faces[2].m_SkyObjectQuadVector, v3QuadPoints);

  001c0	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  001c3	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0
  001c8	0f 28 c1	 movaps	 xmm0, xmm1
  001cb	50		 push	 eax
  001cc	8d 86 c8 02 00
	00		 lea	 eax, DWORD PTR [esi+712]
  001d2	0f 14 c2	 unpcklps xmm0, xmm2
  001d5	50		 push	 eax
  001d6	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  001db	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon

; 543  : 		m_Faces[2].m_strfacename = "left";

  001e0	68 00 00 00 00	 push	 OFFSET ??_C@_04GOOOJOPP@left@
  001e5	8d 8e 98 02 00
	00		 lea	 ecx, DWORD PTR [esi+664]
  001eb	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 544  : 
; 545  : 		// Face 3: RIGHT
; 546  : 		v3QuadPoints[0] = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);

  001f0	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]

; 550  : 
; 551  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 552  : 
; 553  : 		SetSkyObjectQuadHorizon(&m_Faces[3].m_SkyObjectQuadVector, v3QuadPoints);

  001f4	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  001f6	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T21[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 548  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  001fd	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]
  00201	8b 45 c8	 mov	 eax, DWORD PTR $T21[ebp+8]
  00204	0f 28 c2	 movaps	 xmm0, xmm2
  00207	0f 14 c2	 unpcklps xmm0, xmm2
  0020a	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0
  0020f	0f 28 c2	 movaps	 xmm0, xmm2
  00212	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
  00215	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00218	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T20[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 547  : 		v3QuadPoints[1] = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

  0021f	8b 45 c8	 mov	 eax, DWORD PTR $T20[ebp+8]
  00222	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
  00225	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 548  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  0022a	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0022d	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T19[ebp+8], -1082130432 ; bf800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 548  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  00234	8b 45 c8	 mov	 eax, DWORD PTR $T19[ebp+8]
  00237	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  0023a	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0023d	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T18[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 549  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  00244	8b 45 c8	 mov	 eax, DWORD PTR $T18[ebp+8]
  00247	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 550  : 
; 551  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 552  : 
; 553  : 		SetSkyObjectQuadHorizon(&m_Faces[3].m_SkyObjectQuadVector, v3QuadPoints);

  0024a	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  0024d	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0
  00252	0f 28 c2	 movaps	 xmm0, xmm2
  00255	50		 push	 eax
  00256	8d 86 04 03 00
	00		 lea	 eax, DWORD PTR [esi+772]
  0025c	0f 14 c1	 unpcklps xmm0, xmm1
  0025f	50		 push	 eax
  00260	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  00265	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon

; 554  : 		m_Faces[3].m_strfacename = "right";

  0026a	68 00 00 00 00	 push	 OFFSET ??_C@_05DHJDAOHK@right@
  0026f	8d 8e d4 02 00
	00		 lea	 ecx, DWORD PTR [esi+724]
  00275	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 557  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  0027a	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]
  0027e	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00282	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T17[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 557  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  00289	8b 45 c8	 mov	 eax, DWORD PTR $T17[ebp+8]
  0028c	0f 28 c1	 movaps	 xmm0, xmm1
  0028f	0f 14 c2	 unpcklps xmm0, xmm2
  00292	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0

; 558  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  00297	0f 28 c1	 movaps	 xmm0, xmm1
  0029a	0f 14 c1	 unpcklps xmm0, xmm1
  0029d	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 559  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

  002a2	0f 28 c2	 movaps	 xmm0, xmm2
  002a5	0f 14 c2	 unpcklps xmm0, xmm2
  002a8	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  002ab	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T16[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 558  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  002b2	8b 45 c8	 mov	 eax, DWORD PTR $T16[ebp+8]

; 559  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

  002b5	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0

; 560  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  002ba	0f 28 c2	 movaps	 xmm0, xmm2
  002bd	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  002c0	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T15[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 559  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

  002c7	8b 45 c8	 mov	 eax, DWORD PTR $T15[ebp+8]

; 560  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  002ca	0f 14 c1	 unpcklps xmm0, xmm1
  002cd	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  002d0	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T14[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 560  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  002d7	8b 45 c8	 mov	 eax, DWORD PTR $T14[ebp+8]
  002da	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  002df	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 561  : 
; 562  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 563  : 
; 564  : 		SetSkyObjectQuadHorizon(&m_Faces[4].m_SkyObjectQuadVector, v3QuadPoints);

  002e2	8b ce		 mov	 ecx, esi
  002e4	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  002e7	50		 push	 eax
  002e8	8d 86 40 03 00
	00		 lea	 eax, DWORD PTR [esi+832]
  002ee	50		 push	 eax
  002ef	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon

; 565  : 		m_Faces[4].m_strfacename = "top";

  002f4	68 00 00 00 00	 push	 OFFSET ??_C@_03FGFCOCMD@top@
  002f9	8d 8e 10 03 00
	00		 lea	 ecx, DWORD PTR [esi+784]
  002ff	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 566  : 
; 567  : 		////// Face 5: BOTTOM
; 568  : 		// @fixme005
; 569  : 		// v3QuadPoints[0] = D3DXVECTOR3(1.0f, -1.0f, -1.0f);
; 570  : 		// v3QuadPoints[1] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);
; 571  : 		// v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);
; 572  : 		// v3QuadPoints[3] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);
; 573  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  00304	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]

; 574  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, -1.0f, -1.0f);

  00308	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]
  0030c	0f 28 c1	 movaps	 xmm0, xmm1
  0030f	0f 14 c1	 unpcklps xmm0, xmm1
  00312	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0
  00317	0f 28 c1	 movaps	 xmm0, xmm1
  0031a	0f 14 c2	 unpcklps xmm0, xmm2
  0031d	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 575  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  00322	0f 28 c2	 movaps	 xmm0, xmm2
  00325	0f 14 c1	 unpcklps xmm0, xmm1
  00328	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0

; 576  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);

  0032d	0f 28 c2	 movaps	 xmm0, xmm2

; 577  : 
; 578  : 		//UpdateSkyFaceQuadTransform(v3QuadPoints);
; 579  : 
; 580  : 		SetSkyObjectQuadHorizon(&m_Faces[5].m_SkyObjectQuadVector, v3QuadPoints);
; 581  : 		m_Faces[5].m_strfacename = "bottom";

  00330	e9 80 01 00 00	 jmp	 $LN121@Refresh
$LN4@Refresh:

; 461  : 	{
; 462  : 		if (m_ucVirticalGradientLevelUpper + m_ucVirticalGradientLevelLower <= 0)

  00335	0f b6 8e 1d 02
	00 00		 movzx	 ecx, BYTE PTR [esi+541]
  0033c	0f b6 86 1c 02
	00 00		 movzx	 eax, BYTE PTR [esi+540]
  00343	03 c8		 add	 ecx, eax
  00345	0f 84 39 02 00
	00		 je	 $LN1@Refresh

; 463  : 		{
; 464  : 			return;
; 465  : 		}
; 466  : 
; 467  : 		D3DXVECTOR2 v2QuadPoints[2];
; 468  : 
; 469  : 		//// Face 0: FRONT
; 470  : 		v2QuadPoints[0] = D3DXVECTOR2(1.0f, -1.0f);

  0034b	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@bf800000bf800000bf8000003f800000

; 471  : 		v2QuadPoints[1] = D3DXVECTOR2(-1.0f, -1.0f);
; 472  : 		SetSkyObjectQuadVertical(&m_Faces[0].m_SkyObjectQuadVector, v2QuadPoints);

  00352	8d 45 90	 lea	 eax, DWORD PTR _v2QuadPoints$9[ebp]
  00355	50		 push	 eax
  00356	8d 86 50 02 00
	00		 lea	 eax, DWORD PTR [esi+592]
  0035c	8b ce		 mov	 ecx, esi
  0035e	50		 push	 eax
  0035f	0f 11 45 90	 movups	 XMMWORD PTR _v2QuadPoints$9[ebp], xmm0
  00363	e8 00 00 00 00	 call	 ?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z ; CSkyBox::SetSkyObjectQuadVertical

; 473  : 		m_Faces[0].m_strfacename = "front";

  00368	68 00 00 00 00	 push	 OFFSET ??_C@_05HJNNLMDJ@front@
  0036d	8d 8e 20 02 00
	00		 lea	 ecx, DWORD PTR [esi+544]
  00373	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 474  : 
; 475  : 		//// Face 1: BACK
; 476  : 		v2QuadPoints[0] = D3DXVECTOR2(-1.0f, 1.0f);

  00378	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f800000bf800000

; 477  : 		v2QuadPoints[1] = D3DXVECTOR2(1.0f, 1.0f);
; 478  : 		SetSkyObjectQuadVertical(&m_Faces[1].m_SkyObjectQuadVector, v2QuadPoints);

  0037f	8d 45 90	 lea	 eax, DWORD PTR _v2QuadPoints$9[ebp]
  00382	50		 push	 eax
  00383	8d 86 8c 02 00
	00		 lea	 eax, DWORD PTR [esi+652]
  00389	8b ce		 mov	 ecx, esi
  0038b	50		 push	 eax
  0038c	0f 11 45 90	 movups	 XMMWORD PTR _v2QuadPoints$9[ebp], xmm0
  00390	e8 00 00 00 00	 call	 ?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z ; CSkyBox::SetSkyObjectQuadVertical

; 479  : 		m_Faces[1].m_strfacename = "back";

  00395	68 00 00 00 00	 push	 OFFSET ??_C@_04JFCNHLLM@back@
  0039a	8d 8e 5c 02 00
	00		 lea	 ecx, DWORD PTR [esi+604]
  003a0	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 480  : 
; 481  : 		//// Face 2: LEFT
; 482  : 		v2QuadPoints[0] = D3DXVECTOR2(-1.0f, -1.0f);

  003a5	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f800000bf800000bf800000bf800000

; 483  : 		v2QuadPoints[1] = D3DXVECTOR2(-1.0f, 1.0f);
; 484  : 		SetSkyObjectQuadVertical(&m_Faces[2].m_SkyObjectQuadVector, v2QuadPoints);

  003ac	8d 45 90	 lea	 eax, DWORD PTR _v2QuadPoints$9[ebp]
  003af	50		 push	 eax
  003b0	8d 86 c8 02 00
	00		 lea	 eax, DWORD PTR [esi+712]
  003b6	8b ce		 mov	 ecx, esi
  003b8	50		 push	 eax
  003b9	0f 11 45 90	 movups	 XMMWORD PTR _v2QuadPoints$9[ebp], xmm0
  003bd	e8 00 00 00 00	 call	 ?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z ; CSkyBox::SetSkyObjectQuadVertical

; 485  : 		m_Faces[2].m_strfacename = "left";

  003c2	68 00 00 00 00	 push	 OFFSET ??_C@_04GOOOJOPP@left@
  003c7	8d 8e 98 02 00
	00		 lea	 ecx, DWORD PTR [esi+664]
  003cd	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 486  : 
; 487  : 		//// Face 3: RIGHT
; 488  : 		v2QuadPoints[0] = D3DXVECTOR2(1.0f, 1.0f);

  003d2	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@bf8000003f8000003f8000003f800000

; 489  : 		v2QuadPoints[1] = D3DXVECTOR2(1.0f, -1.0f);
; 490  : 		SetSkyObjectQuadVertical(&m_Faces[3].m_SkyObjectQuadVector, v2QuadPoints);

  003d9	8d 45 90	 lea	 eax, DWORD PTR _v2QuadPoints$9[ebp]
  003dc	50		 push	 eax
  003dd	8d 86 04 03 00
	00		 lea	 eax, DWORD PTR [esi+772]
  003e3	8b ce		 mov	 ecx, esi
  003e5	50		 push	 eax
  003e6	0f 11 45 90	 movups	 XMMWORD PTR _v2QuadPoints$9[ebp], xmm0
  003ea	e8 00 00 00 00	 call	 ?SetSkyObjectQuadVertical@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR2@@@Z ; CSkyBox::SetSkyObjectQuadVertical

; 491  : 		m_Faces[3].m_strfacename = "right";

  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_05DHJDAOHK@right@
  003f4	8d 8e d4 02 00
	00		 lea	 ecx, DWORD PTR [esi+724]
  003fa	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 494  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  003ff	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]

; 498  : 		SetSkyObjectQuadHorizon(&m_Faces[4].m_SkyObjectQuadVector, v3QuadPoints);

  00403	8b ce		 mov	 ecx, esi
  00405	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00409	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T41[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 494  : 		v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, 1.0f);

  00410	8b 45 c8	 mov	 eax, DWORD PTR $T41[ebp+8]
  00413	0f 28 c1	 movaps	 xmm0, xmm1
  00416	0f 14 c1	 unpcklps xmm0, xmm1
  00419	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0

; 495  : 		v3QuadPoints[1] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  0041e	0f 28 c2	 movaps	 xmm0, xmm2
  00421	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
  00424	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00427	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T40[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 495  : 		v3QuadPoints[1] = D3DXVECTOR3(-1.0f, 1.0f, 1.0f);

  0042e	8b 45 c8	 mov	 eax, DWORD PTR $T40[ebp+8]
  00431	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
  00434	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 496  : 		v3QuadPoints[2] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  00439	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0043c	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T39[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 496  : 		v3QuadPoints[2] = D3DXVECTOR3(1.0f, -1.0f, 1.0f);

  00443	8b 45 c8	 mov	 eax, DWORD PTR $T39[ebp+8]
  00446	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  00449	0f 14 c2	 unpcklps xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0044c	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR $T38[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 497  : 		v3QuadPoints[3] = D3DXVECTOR3(-1.0f, -1.0f, 1.0f);

  00453	8b 45 c8	 mov	 eax, DWORD PTR $T38[ebp+8]
  00456	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 498  : 		SetSkyObjectQuadHorizon(&m_Faces[4].m_SkyObjectQuadVector, v3QuadPoints);

  00459	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  0045c	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0
  00461	0f 28 c2	 movaps	 xmm0, xmm2
  00464	50		 push	 eax
  00465	8d 86 40 03 00
	00		 lea	 eax, DWORD PTR [esi+832]
  0046b	0f 14 c2	 unpcklps xmm0, xmm2
  0046e	50		 push	 eax
  0046f	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  00474	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon

; 499  : 		m_Faces[4].m_strfacename = "top";

  00479	68 00 00 00 00	 push	 OFFSET ??_C@_03FGFCOCMD@top@
  0047e	8d 8e 10 03 00
	00		 lea	 ecx, DWORD PTR [esi+784]
  00484	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 500  : 
; 501  : 		//// Face 5: BOTTOM
; 502  : 		v3QuadPoints[0] = D3DXVECTOR3(-1.0f, 1.0f, -1.0f);

  00489	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]
  0048d	0f 28 c2	 movaps	 xmm0, xmm2
  00490	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]
  00494	0f 14 c1	 unpcklps xmm0, xmm1
  00497	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0

; 503  : 		v3QuadPoints[1] = D3DXVECTOR3(1.0f, 1.0f, -1.0f);

  0049c	0f 28 c1	 movaps	 xmm0, xmm1
  0049f	0f 14 c1	 unpcklps xmm0, xmm1
  004a2	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0

; 504  : 		v3QuadPoints[2] = D3DXVECTOR3(-1.0f, -1.0f, -1.0f);

  004a7	0f 28 c2	 movaps	 xmm0, xmm2
  004aa	0f 14 c2	 unpcklps xmm0, xmm2
  004ad	66 0f d6 45 e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm0

; 505  : 		v3QuadPoints[3] = D3DXVECTOR3(1.0f, -1.0f, -1.0f);

  004b2	0f 28 c1	 movaps	 xmm0, xmm1
$LN121@Refresh:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  004b5	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T37[ebp+8], -1082130432 ; bf800000H
  004bc	8b ce		 mov	 ecx, esi
  004be	8b 45 c8	 mov	 eax, DWORD PTR $T37[ebp+8]
  004c1	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
  004c4	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T36[ebp+8], -1082130432 ; bf800000H
  004cb	8b 45 c8	 mov	 eax, DWORD PTR $T36[ebp+8]
  004ce	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
  004d1	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T35[ebp+8], -1082130432 ; bf800000H
  004d8	8b 45 c8	 mov	 eax, DWORD PTR $T35[ebp+8]
  004db	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  004de	c7 45 c8 00 00
	80 bf		 mov	 DWORD PTR $T34[ebp+8], -1082130432 ; bf800000H
  004e5	8b 45 c8	 mov	 eax, DWORD PTR $T34[ebp+8]
  004e8	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax
  004eb	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  004ee	50		 push	 eax
  004ef	8d 86 7c 03 00
	00		 lea	 eax, DWORD PTR [esi+892]
  004f5	0f 14 c2	 unpcklps xmm0, xmm2
  004f8	50		 push	 eax
  004f9	66 0f d6 45 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm0
  004fe	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon
  00503	68 00 00 00 00	 push	 OFFSET ??_C@_06PMMPCIPB@bottom@
  00508	8d 8e 4c 03 00
	00		 lea	 ecx, DWORD PTR [esi+844]
  0050e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00513	0f 10 55 a0	 movups	 xmm2, XMMWORD PTR tv1279[ebp]
  00517	0f 28 4d b0	 movaps	 xmm1, XMMWORD PTR tv1376[ebp]
$LN6@Refresh:
  0051b	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T13[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 585  : 	v3QuadPoints[0] = D3DXVECTOR3(1.0f, 1.0f, 0.0f);

  00522	0f 28 c1	 movaps	 xmm0, xmm1
  00525	8b 45 c8	 mov	 eax, DWORD PTR $T13[ebp+8]

; 589  : 	SetSkyObjectQuadHorizon(&m_FaceCloud.m_SkyObjectQuadVector, v3QuadPoints);

  00528	8b ce		 mov	 ecx, esi
  0052a	89 45 d4	 mov	 DWORD PTR _v3QuadPoints$[ebp+8], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0052d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T12[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 586  : 	v3QuadPoints[1] = D3DXVECTOR3(-1.0f, 1.0f, 0.0f);

  00534	8b 45 c8	 mov	 eax, DWORD PTR $T12[ebp+8]
  00537	89 45 e0	 mov	 DWORD PTR _v3QuadPoints$[ebp+20], eax
  0053a	0f 14 c1	 unpcklps xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0053d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T11[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 587  : 	v3QuadPoints[2] = D3DXVECTOR3(1.0f, -1.0f, 0.0f);

  00544	8b 45 c8	 mov	 eax, DWORD PTR $T11[ebp+8]
  00547	89 45 ec	 mov	 DWORD PTR _v3QuadPoints$[ebp+32], eax
  0054a	66 0f d6 45 cc	 movq	 QWORD PTR _v3QuadPoints$[ebp], xmm0
  0054f	0f 28 c2	 movaps	 xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00552	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T10[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 588  : 	v3QuadPoints[3] = D3DXVECTOR3(-1.0f, -1.0f, 0.0f);

  00559	8b 45 c8	 mov	 eax, DWORD PTR $T10[ebp+8]
  0055c	89 45 f8	 mov	 DWORD PTR _v3QuadPoints$[ebp+44], eax

; 589  : 	SetSkyObjectQuadHorizon(&m_FaceCloud.m_SkyObjectQuadVector, v3QuadPoints);

  0055f	8d 45 cc	 lea	 eax, DWORD PTR _v3QuadPoints$[ebp]
  00562	0f 14 c1	 unpcklps xmm0, xmm1
  00565	50		 push	 eax
  00566	0f 14 ca	 unpcklps xmm1, xmm2
  00569	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  0056c	0f 14 d2	 unpcklps xmm2, xmm2
  0056f	50		 push	 eax
  00570	66 0f d6 45 d8	 movq	 QWORD PTR _v3QuadPoints$[ebp+12], xmm0
  00575	66 0f d6 4d e4	 movq	 QWORD PTR _v3QuadPoints$[ebp+24], xmm1
  0057a	66 0f d6 55 f0	 movq	 QWORD PTR _v3QuadPoints$[ebp+36], xmm2
  0057f	e8 00 00 00 00	 call	 ?SetSkyObjectQuadHorizon@CSkyBox@@IAEXPAV?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@PBUD3DXVECTOR3@@@Z ; CSkyBox::SetSkyObjectQuadHorizon
$LN1@Refresh:

; 590  : }

  00584	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00587	33 cd		 xor	 ecx, ebp
  00589	5e		 pop	 esi
  0058a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0058f	8b e5		 mov	 esp, ebp
  00591	5d		 pop	 ebp
  00592	8b e3		 mov	 esp, ebx
  00594	5b		 pop	 ebx
  00595	c3		 ret	 0
?Refresh@CSkyBox@@QAEXXZ ENDP				; CSkyBox::Refresh
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetCloudColor@CSkyBox@@QAEXABUTGradientColor@@0ABK@Z
_TEXT	SEGMENT
_this$1$ = -24						; size = 4
$T1 = -20						; size = 4
_dwk$1$ = -16						; size = 4
tv350 = -12						; size = 4
$T2 = -7						; size = 1
$T3 = -6						; size = 1
$T4 = -5						; size = 1
$T5 = -4						; size = 1
$T6 = -3						; size = 1
$T7 = -2						; size = 1
$T8 = -1						; size = 1
_c_rColor$ = 8						; size = 4
$T9 = 11						; size = 1
_c_rNextColor$ = 12					; size = 4
_dwTransitionTime$ = 16					; size = 4
?SetCloudColor@CSkyBox@@QAEXABUTGradientColor@@0ABK@Z PROC ; CSkyBox::SetCloudColor, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00006	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00009	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0000c	2b d0		 sub	 edx, eax
  0000e	89 45 ec	 mov	 DWORD PTR $T1[ebp], eax
  00011	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 593  : {

  00016	89 4d e8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00019	f7 ea		 imul	 edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 595  : 	for (DWORD dwk = 0; dwk < aFaceCloud.m_SkyObjectQuadVector.size(); ++dwk)

  0001b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dwk$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00022	c1 fa 05	 sar	 edx, 5
  00025	8b c2		 mov	 eax, edx
  00027	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002a	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 595  : 	for (DWORD dwk = 0; dwk < aFaceCloud.m_SkyObjectQuadVector.size(); ++dwk)

  0002c	0f 84 4b 01 00
	00		 je	 $LN3@SetCloudCo

; 599  : 		aSkyObjectQuad.SetSrcColor(0,

  00032	53		 push	 ebx
  00033	56		 push	 esi
  00034	57		 push	 edi
  00035	8b 7d 08	 mov	 edi, DWORD PTR _c_rColor$[ebp]
  00038	c6 45 ff 00	 mov	 BYTE PTR $T8[ebp], 0

; 600  : 								   c_rColor.m_FirstColor.r,
; 601  : 								   c_rColor.m_FirstColor.g,
; 602  : 								   c_rColor.m_FirstColor.b,
; 603  : 								   c_rColor.m_FirstColor.a);
; 604  : 		aSkyObjectQuad.SetTransition(0,

  0003c	c6 45 0b 00	 mov	 BYTE PTR $T9[ebp], 0

; 605  : 									 c_rNextColor.m_FirstColor.r,
; 606  : 									 c_rNextColor.m_FirstColor.g,
; 607  : 									 c_rNextColor.m_FirstColor.b,
; 608  : 									 c_rNextColor.m_FirstColor.a,
; 609  : 									 dwTransitionTime);
; 610  : 		aSkyObjectQuad.SetSrcColor(1,

  00040	c6 45 fe 01	 mov	 BYTE PTR $T7[ebp], 1
  00044	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]

; 611  : 								   c_rColor.m_FirstColor.r,
; 612  : 								   c_rColor.m_FirstColor.g,
; 613  : 								   c_rColor.m_FirstColor.b,
; 614  : 								   c_rColor.m_FirstColor.a);
; 615  : 		aSkyObjectQuad.SetTransition(1,

  00047	c6 45 fd 01	 mov	 BYTE PTR $T6[ebp], 1
  0004b	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]

; 616  : 									 c_rNextColor.m_FirstColor.r,
; 617  : 									 c_rNextColor.m_FirstColor.g,
; 618  : 									 c_rNextColor.m_FirstColor.b,
; 619  : 									 c_rNextColor.m_FirstColor.a,
; 620  : 									 dwTransitionTime);
; 621  : 		aSkyObjectQuad.SetSrcColor(2,

  0004e	c6 45 fc 02	 mov	 BYTE PTR $T5[ebp], 2
  00052	8d 57 04	 lea	 edx, DWORD PTR [edi+4]

; 622  : 								   c_rColor.m_FirstColor.r,
; 623  : 								   c_rColor.m_FirstColor.g,
; 624  : 								   c_rColor.m_FirstColor.b,
; 625  : 								   c_rColor.m_FirstColor.a);
; 626  : 		aSkyObjectQuad.SetTransition(2,

  00055	c6 45 fb 02	 mov	 BYTE PTR $T4[ebp], 2

; 627  : 									 c_rNextColor.m_FirstColor.r,
; 628  : 									 c_rNextColor.m_FirstColor.g,
; 629  : 									 c_rNextColor.m_FirstColor.b,
; 630  : 									 c_rNextColor.m_FirstColor.a,
; 631  : 									 dwTransitionTime);
; 632  : 		aSkyObjectQuad.SetSrcColor(3,

  00059	c6 45 fa 03	 mov	 BYTE PTR $T3[ebp], 3

; 633  : 								   c_rColor.m_FirstColor.r,
; 634  : 								   c_rColor.m_FirstColor.g,
; 635  : 								   c_rColor.m_FirstColor.b,
; 636  : 								   c_rColor.m_FirstColor.a);
; 637  : 		aSkyObjectQuad.SetTransition(3,

  0005d	c6 45 f9 03	 mov	 BYTE PTR $T2[ebp], 3
  00061	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv350[ebp], 0
$LL4@SetCloudCo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00068	8b 75 ec	 mov	 esi, DWORD PTR $T1[ebp]
  0006b	03 75 f4	 add	 esi, DWORD PTR tv350[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 599  : 		aSkyObjectQuad.SetSrcColor(0,

  0006e	50		 push	 eax
  0006f	51		 push	 ecx
  00070	52		 push	 edx
  00071	57		 push	 edi
  00072	8d 45 ff	 lea	 eax, DWORD PTR $T8[ebp]
  00075	8b ce		 mov	 ecx, esi
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 600  : 								   c_rColor.m_FirstColor.r,
; 601  : 								   c_rColor.m_FirstColor.g,
; 602  : 								   c_rColor.m_FirstColor.b,
; 603  : 								   c_rColor.m_FirstColor.a);
; 604  : 		aSkyObjectQuad.SetTransition(0,

  0007d	8b 5d 0c	 mov	 ebx, DWORD PTR _c_rNextColor$[ebp]
  00080	8b ce		 mov	 ecx, esi
  00082	8b 45 10	 mov	 eax, DWORD PTR _dwTransitionTime$[ebp]
  00085	ff 30		 push	 DWORD PTR [eax]
  00087	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  0008a	50		 push	 eax
  0008b	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0008e	50		 push	 eax
  0008f	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00092	50		 push	 eax
  00093	53		 push	 ebx
  00094	8d 45 0b	 lea	 eax, DWORD PTR $T9[ebp]
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 605  : 									 c_rNextColor.m_FirstColor.r,
; 606  : 									 c_rNextColor.m_FirstColor.g,
; 607  : 									 c_rNextColor.m_FirstColor.b,
; 608  : 									 c_rNextColor.m_FirstColor.a,
; 609  : 									 dwTransitionTime);
; 610  : 		aSkyObjectQuad.SetSrcColor(1,

  0009d	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  000a0	8b ce		 mov	 ecx, esi
  000a2	50		 push	 eax
  000a3	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000a6	50		 push	 eax
  000a7	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000aa	50		 push	 eax
  000ab	57		 push	 edi
  000ac	8d 45 fe	 lea	 eax, DWORD PTR $T7[ebp]
  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 611  : 								   c_rColor.m_FirstColor.r,
; 612  : 								   c_rColor.m_FirstColor.g,
; 613  : 								   c_rColor.m_FirstColor.b,
; 614  : 								   c_rColor.m_FirstColor.a);
; 615  : 		aSkyObjectQuad.SetTransition(1,

  000b5	8b 45 10	 mov	 eax, DWORD PTR _dwTransitionTime$[ebp]
  000b8	8b ce		 mov	 ecx, esi
  000ba	ff 30		 push	 DWORD PTR [eax]
  000bc	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  000bf	50		 push	 eax
  000c0	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  000c3	50		 push	 eax
  000c4	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000c7	50		 push	 eax
  000c8	53		 push	 ebx
  000c9	8d 45 fd	 lea	 eax, DWORD PTR $T6[ebp]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 616  : 									 c_rNextColor.m_FirstColor.r,
; 617  : 									 c_rNextColor.m_FirstColor.g,
; 618  : 									 c_rNextColor.m_FirstColor.b,
; 619  : 									 c_rNextColor.m_FirstColor.a,
; 620  : 									 dwTransitionTime);
; 621  : 		aSkyObjectQuad.SetSrcColor(2,

  000d2	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  000d5	8b ce		 mov	 ecx, esi
  000d7	50		 push	 eax
  000d8	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  000db	50		 push	 eax
  000dc	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  000df	50		 push	 eax
  000e0	57		 push	 edi
  000e1	8d 45 fc	 lea	 eax, DWORD PTR $T5[ebp]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 622  : 								   c_rColor.m_FirstColor.r,
; 623  : 								   c_rColor.m_FirstColor.g,
; 624  : 								   c_rColor.m_FirstColor.b,
; 625  : 								   c_rColor.m_FirstColor.a);
; 626  : 		aSkyObjectQuad.SetTransition(2,

  000ea	8b 45 10	 mov	 eax, DWORD PTR _dwTransitionTime$[ebp]
  000ed	8b ce		 mov	 ecx, esi
  000ef	ff 30		 push	 DWORD PTR [eax]
  000f1	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  000f4	50		 push	 eax
  000f5	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  000f8	50		 push	 eax
  000f9	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000fc	50		 push	 eax
  000fd	53		 push	 ebx
  000fe	8d 45 fb	 lea	 eax, DWORD PTR $T4[ebp]
  00101	50		 push	 eax
  00102	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition

; 627  : 									 c_rNextColor.m_FirstColor.r,
; 628  : 									 c_rNextColor.m_FirstColor.g,
; 629  : 									 c_rNextColor.m_FirstColor.b,
; 630  : 									 c_rNextColor.m_FirstColor.a,
; 631  : 									 dwTransitionTime);
; 632  : 		aSkyObjectQuad.SetSrcColor(3,

  00107	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  0010a	50		 push	 eax
  0010b	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  0010e	50		 push	 eax
  0010f	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00112	50		 push	 eax
  00113	57		 push	 edi
  00114	8d 45 fa	 lea	 eax, DWORD PTR $T3[ebp]
  00117	50		 push	 eax
  00118	8b ce		 mov	 ecx, esi
  0011a	e8 00 00 00 00	 call	 ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ; CSkyObjectQuad::SetSrcColor

; 633  : 								   c_rColor.m_FirstColor.r,
; 634  : 								   c_rColor.m_FirstColor.g,
; 635  : 								   c_rColor.m_FirstColor.b,
; 636  : 								   c_rColor.m_FirstColor.a);
; 637  : 		aSkyObjectQuad.SetTransition(3,

  0011f	8b 45 10	 mov	 eax, DWORD PTR _dwTransitionTime$[ebp]
  00122	8b ce		 mov	 ecx, esi
  00124	ff 30		 push	 DWORD PTR [eax]
  00126	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00129	50		 push	 eax
  0012a	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0012d	50		 push	 eax
  0012e	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00131	50		 push	 eax
  00132	53		 push	 ebx
  00133	8d 45 f9	 lea	 eax, DWORD PTR $T2[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ; CSkyObjectQuad::SetTransition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0013c	8b 45 e8	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 595  : 	for (DWORD dwk = 0; dwk < aFaceCloud.m_SkyObjectQuadVector.size(); ++dwk)

  0013f	8b 75 f0	 mov	 esi, DWORD PTR _dwk$1$[ebp]
  00142	81 45 f4 2c 01
	00 00		 add	 DWORD PTR tv350[ebp], 300 ; 0000012cH
  00149	46		 inc	 esi
  0014a	89 75 f0	 mov	 DWORD PTR _dwk$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0014d	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  00150	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00153	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00158	2b ca		 sub	 ecx, edx
  0015a	89 55 ec	 mov	 DWORD PTR $T1[ebp], edx
  0015d	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 595  : 	for (DWORD dwk = 0; dwk < aFaceCloud.m_SkyObjectQuadVector.size(); ++dwk)

  0015f	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00162	c1 fa 05	 sar	 edx, 5
  00165	8b c2		 mov	 eax, edx
  00167	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0016a	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 595  : 	for (DWORD dwk = 0; dwk < aFaceCloud.m_SkyObjectQuadVector.size(); ++dwk)

  0016c	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
  0016f	3b f0		 cmp	 esi, eax
  00171	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  00174	0f 82 ee fe ff
	ff		 jb	 $LL4@SetCloudCo
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
$LN3@SetCloudCo:

; 638  : 									 c_rNextColor.m_FirstColor.r,
; 639  : 									 c_rNextColor.m_FirstColor.g,
; 640  : 									 c_rNextColor.m_FirstColor.b,
; 641  : 									 c_rNextColor.m_FirstColor.a,
; 642  : 									 dwTransitionTime);
; 643  : 	}
; 644  : }

  0017d	8b e5		 mov	 esp, ebp
  0017f	5d		 pop	 ebp
  00180	c2 0c 00	 ret	 12			; 0000000cH
?SetCloudColor@CSkyBox@@QAEXABUTGradientColor@@0ABK@Z ENDP ; CSkyBox::SetCloudColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetCloudScrollSpeed@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_c_rv2CloudScrollSpeed$ = 8				; size = 4
?SetCloudScrollSpeed@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z PROC ; CSkyBox::SetCloudScrollSpeed, COMDAT
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 329  : 	m_fCloudScrollSpeedU = c_rv2CloudScrollSpeed.x;

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_rv2CloudScrollSpeed$[ebp]
  00006	8b 02		 mov	 eax, DWORD PTR [edx]
  00008	89 81 20 01 00
	00		 mov	 DWORD PTR [ecx+288], eax

; 330  : 	m_fCloudScrollSpeedV = c_rv2CloudScrollSpeed.y;

  0000e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00011	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax

; 331  : }

  00017	5d		 pop	 ebp
  00018	c2 04 00	 ret	 4
?SetCloudScrollSpeed@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z ENDP ; CSkyBox::SetCloudScrollSpeed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetCloudTextureScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_c_rv2CloudTextureScale$ = 8				; size = 4
?SetCloudTextureScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z PROC ; CSkyBox::SetCloudTextureScale, COMDAT
; _this$ = ecx

; 319  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 320  : 	m_fCloudTextureScaleX = c_rv2CloudTextureScale.x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv2CloudTextureScale$[ebp]
  00006	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0000a	f3 0f 11 89 18
	01 00 00	 movss	 DWORD PTR [ecx+280], xmm1

; 321  : 	m_fCloudTextureScaleY = c_rv2CloudTextureScale.y;

  00012	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00017	f3 0f 11 81 1c
	01 00 00	 movss	 DWORD PTR [ecx+284], xmm0

; 322  : 
; 323  : 	m_matTextureCloud._11 = m_fCloudTextureScaleX;

  0001f	f3 0f 11 89 c0
	00 00 00	 movss	 DWORD PTR [ecx+192], xmm1

; 324  : 	m_matTextureCloud._22 = m_fCloudTextureScaleY;

  00027	f3 0f 11 81 d4
	00 00 00	 movss	 DWORD PTR [ecx+212], xmm0

; 325  : }

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?SetCloudTextureScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z ENDP ; CSkyBox::SetCloudTextureScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetCloudHeight@CSkyBox@@QAEXM@Z
_TEXT	SEGMENT
_fHeight$ = 8						; size = 4
?SetCloudHeight@CSkyBox@@QAEXM@Z PROC			; CSkyBox::SetCloudHeight, COMDAT
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 315  : 	m_fCloudHeight = fHeight;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fHeight$[ebp]
  00008	f3 0f 11 81 14
	01 00 00	 movss	 DWORD PTR [ecx+276], xmm0

; 316  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetCloudHeight@CSkyBox@@QAEXM@Z ENDP			; CSkyBox::SetCloudHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetCloudScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z
_TEXT	SEGMENT
_c_rv2CloudScale$ = 8					; size = 4
?SetCloudScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z PROC	; CSkyBox::SetCloudScale, COMDAT
; _this$ = ecx

; 306  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 307  : 	m_fCloudScaleX = c_rv2CloudScale.x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv2CloudScale$[ebp]

; 308  : 	m_fCloudScaleY = c_rv2CloudScale.y;
; 309  : 
; 310  : 	D3DXMatrixScaling(&m_matWorldCloud, m_fCloudScaleX, m_fCloudScaleY, 1.0f);

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0000d	f3 0f 11 89 0c
	01 00 00	 movss	 DWORD PTR [ecx+268], xmm1
  00015	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0001a	8d 41 40	 lea	 eax, DWORD PTR [ecx+64]
  0001d	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  00025	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0002b	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00030	50		 push	 eax
  00031	f3 0f 11 81 10
	01 00 00	 movss	 DWORD PTR [ecx+272], xmm0
  00039	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16

; 311  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
?SetCloudScale@CSkyBox@@QAEXABUD3DXVECTOR2@@@Z ENDP	; CSkyBox::SetCloudScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetCloudTexture@CSkyBox@@QAEXPBD@Z
_TEXT	SEGMENT
__Loc$2 = -68						; size = 12
$T3 = -56						; size = 8
_this$GSCopy$1$ = -52					; size = 4
_c_szFileName$GSCopy$1$ = -48				; size = 4
$T4 = -44						; size = 28
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
?SetCloudTexture@CSkyBox@@QAEXPBD@Z PROC		; CSkyBox::SetCloudTexture, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetCloudTexture@CSkyBox@@QAEXPBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f9		 mov	 edi, ecx
  0002d	89 7d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00030	8b 45 08	 mov	 eax, DWORD PTR _c_szFileName$[ebp]

; 291  : 	TGraphicImageInstanceMap::iterator itor = m_GraphicImageInstanceMap.find(c_szFileName);

  00033	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00036	50		 push	 eax
  00037	89 45 d0	 mov	 DWORD PTR _c_szFileName$GSCopy$1$[ebp], eax
  0003a	8d 9f 34 01 00
	00		 lea	 ebx, DWORD PTR [edi+308]
  00040	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00045	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00048	8b cb		 mov	 ecx, ebx
  0004a	50		 push	 eax
  0004b	8d 45 bc	 lea	 eax, DWORD PTR __Loc$2[ebp]
  0004e	50		 push	 eax
  0004f	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00054	8b 75 c4	 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  00057	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0005b	75 14		 jne	 SHORT $LN9@SetCloudTe
  0005d	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00060	50		 push	 eax
  00061	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00064	50		 push	 eax
  00065	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0006a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0006d	84 c0		 test	 al, al
  0006f	74 02		 je	 SHORT $LN8@SetCloudTe
$LN9@SetCloudTe:

; 1372 :         return _Get_scary()->_Myhead;

  00071	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN8@SetCloudTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00073	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp+20]
  00076	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00079	72 2c		 jb	 SHORT $LN35@SetCloudTe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007b	8b 55 d8	 mov	 edx, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0007e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007f	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00081	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00087	72 14		 jb	 SHORT $LN45@SetCloudTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00089	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0008c	83 c1 23	 add	 ecx, 35			; 00000023H
  0008f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00091	83 c0 fc	 add	 eax, -4			; fffffffcH
  00094	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00097	0f 87 97 00 00
	00		 ja	 $LN88@SetCloudTe
$LN45@SetCloudTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0009d	51		 push	 ecx
  0009e	52		 push	 edx
  0009f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a4	83 c4 08	 add	 esp, 8
$LN35@SetCloudTe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 292  : 	if (m_GraphicImageInstanceMap.end() != itor)

  000a7	39 33		 cmp	 DWORD PTR [ebx], esi
  000a9	75 6b		 jne	 SHORT $LN81@SetCloudTe

; 293  : 	{
; 294  : 		return;
; 295  : 	}
; 296  : 
; 297  : 	m_FaceCloud.m_strfacename = c_szFileName;

  000ab	8b 75 d0	 mov	 esi, DWORD PTR _c_szFileName$GSCopy$1$[ebp]
  000ae	83 c7 04	 add	 edi, 4
  000b1	56		 push	 esi
  000b2	8b cf		 mov	 ecx, edi
  000b4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 298  : 	CGraphicImageInstance * pGraphicImageInstance = GenerateTexture(c_szFileName);

  000b9	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  000bc	56		 push	 esi
  000bd	e8 00 00 00 00	 call	 ?GenerateTexture@CSkyObject@@IAEPAVCGraphicImageInstance@@PBD@Z ; CSkyObject::GenerateTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c2	57		 push	 edi
  000c3	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 298  : 	CGraphicImageInstance * pGraphicImageInstance = GenerateTexture(c_szFileName);

  000c6	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000c8	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cd	89 75 ec	 mov	 DWORD PTR $T4[ebp+24], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 299  : 	m_GraphicImageInstanceMap.insert(TGraphicImageInstanceMap::value_type(m_FaceCloud.m_strfacename, pGraphicImageInstance));

  000d0	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
  000d3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000da	50		 push	 eax
  000db	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  000de	8b cb		 mov	 ecx, ebx
  000e0	50		 push	 eax
  000e1	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::insert<0,0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  000e6	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp+20]
  000e9	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  000ec	72 28		 jb	 SHORT $LN81@SetCloudTe
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ee	8b 55 d4	 mov	 edx, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  000f1	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f2	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fa	72 10		 jb	 SHORT $LN91@SetCloudTe

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fc	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ff	83 c1 23	 add	 ecx, 35			; 00000023H
  00102	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00104	83 c0 fc	 add	 eax, -4			; fffffffcH
  00107	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010a	77 28		 ja	 SHORT $LN88@SetCloudTe
$LN91@SetCloudTe:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010c	51		 push	 ecx
  0010d	52		 push	 edx
  0010e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00113	83 c4 08	 add	 esp, 8
$LN81@SetCloudTe:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 303  : }

  00116	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00119	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00120	59		 pop	 ecx
  00121	5f		 pop	 edi
  00122	5e		 pop	 esi
  00123	5b		 pop	 ebx
  00124	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00127	33 cd		 xor	 ecx, ebp
  00129	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0012e	8b e5		 mov	 esp, ebp
  00130	5d		 pop	 ebp
  00131	c2 04 00	 ret	 4
$LN88@SetCloudTe:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00134	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN99@SetCloudTe:
  00139	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetCloudTexture@CSkyBox@@QAEXPBD@Z$1:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetCloudTexture@CSkyBox@@QAEXPBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetCloudTexture@CSkyBox@@QAEXPBD@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetCloudTexture@CSkyBox@@QAEXPBD@Z ENDP		; CSkyBox::SetCloudTexture
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetFaceTexture@CSkyBox@@QAEXPBDH@Z
_TEXT	SEGMENT
__Loc$2 = -68						; size = 12
$T3 = -56						; size = 8
_this$GSCopy$1$ = -52					; size = 4
_iFaceIndex$GSCopy$1$ = -48				; size = 4
$T4 = -44						; size = 28
$T5 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_szFileName$ = 8					; size = 4
_iFaceIndex$ = 12					; size = 4
?SetFaceTexture@CSkyBox@@QAEXPBDH@Z PROC		; CSkyBox::SetFaceTexture, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002e	8b 45 0c	 mov	 eax, DWORD PTR _iFaceIndex$[ebp]
  00031	8b 5d 08	 mov	 ebx, DWORD PTR _c_szFileName$[ebp]
  00034	89 45 d0	 mov	 DWORD PTR _iFaceIndex$GSCopy$1$[ebp], eax

; 271  : 	if ( iFaceIndex < 0 || iFaceIndex > 5 )

  00037	83 f8 05	 cmp	 eax, 5
  0003a	0f 87 97 00 00
	00		 ja	 $LN3@SetFaceTex

; 276  : 	TGraphicImageInstanceMap::iterator itor = m_GraphicImageInstanceMap.find(c_szFileName);

  00040	8d b9 34 01 00
	00		 lea	 edi, DWORD PTR [ecx+308]
  00046	53		 push	 ebx
  00047	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  0004a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0004f	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  00052	8b cf		 mov	 ecx, edi
  00054	50		 push	 eax
  00055	8d 45 bc	 lea	 eax, DWORD PTR __Loc$2[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0005e	8b 75 c4	 mov	 esi, DWORD PTR __Loc$2[ebp+8]
  00061	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00065	75 14		 jne	 SHORT $LN11@SetFaceTex
  00067	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0006a	50		 push	 eax
  0006b	8d 45 d8	 lea	 eax, DWORD PTR $T5[ebp]
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  00074	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00077	84 c0		 test	 al, al
  00079	74 02		 je	 SHORT $LN10@SetFaceTex
$LN11@SetFaceTex:

; 1372 :         return _Get_scary()->_Myhead;

  0007b	8b 37		 mov	 esi, DWORD PTR [edi]
$LN10@SetFaceTex:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 276  : 	TGraphicImageInstanceMap::iterator itor = m_GraphicImageInstanceMap.find(c_szFileName);

  0007d	8d 4d d8	 lea	 ecx, DWORD PTR $T5[ebp]
  00080	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 277  : 	if (m_GraphicImageInstanceMap.end() != itor)

  00085	39 37		 cmp	 DWORD PTR [edi], esi
  00087	75 4e		 jne	 SHORT $LN3@SetFaceTex

; 278  : 	{
; 279  : 		return;
; 280  : 	}
; 281  : 
; 282  : 	m_Faces[iFaceIndex].m_strFaceTextureFileName = c_szFileName;

  00089	8b 45 d0	 mov	 eax, DWORD PTR _iFaceIndex$GSCopy$1$[ebp]
  0008c	8b 75 cc	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0008f	c1 e0 04	 shl	 eax, 4
  00092	2b 45 d0	 sub	 eax, DWORD PTR _iFaceIndex$GSCopy$1$[ebp]
  00095	05 8e 00 00 00	 add	 eax, 142		; 0000008eH
  0009a	53		 push	 ebx
  0009b	8d 0c 86	 lea	 ecx, DWORD PTR [esi+eax*4]
  0009e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 284  : 	CGraphicImageInstance * pGraphicImageInstance = GenerateTexture(c_szFileName);

  000a3	53		 push	 ebx
  000a4	8b ce		 mov	 ecx, esi
  000a6	e8 00 00 00 00	 call	 ?GenerateTexture@CSkyObject@@IAEPAVCGraphicImageInstance@@PBD@Z ; CSkyObject::GenerateTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000ab	53		 push	 ebx
  000ac	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 284  : 	CGraphicImageInstance * pGraphicImageInstance = GenerateTexture(c_szFileName);

  000af	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  000b1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000b6	89 75 ec	 mov	 DWORD PTR $T4[ebp+24], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 285  : 	m_GraphicImageInstanceMap.insert(TGraphicImageInstanceMap::value_type(c_szFileName, pGraphicImageInstance));

  000b9	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
  000bc	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000c3	50		 push	 eax
  000c4	8d 45 c8	 lea	 eax, DWORD PTR $T3[ebp]
  000c7	8b cf		 mov	 ecx, edi
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::insert<0,0>
  000cf	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  000d2	e8 00 00 00 00	 call	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ
$LN3@SetFaceTex:

; 286  : }

  000d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e1	59		 pop	 ecx
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi
  000e4	5b		 pop	 ebx
  000e5	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e8	33 cd		 xor	 ecx, ebp
  000ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z$1:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@QAE@XZ
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetFaceTexture@CSkyBox@@QAEXPBDH@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetFaceTexture@CSkyBox@@QAEXPBDH@Z ENDP		; CSkyBox::SetFaceTexture
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetGradientLevel@CSkyBox@@QAEXEE@Z
_TEXT	SEGMENT
_byUpper$ = 8						; size = 1
_byLower$ = 12						; size = 1
?SetGradientLevel@CSkyBox@@QAEXEE@Z PROC		; CSkyBox::SetGradientLevel, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 265  : 	m_ucVirticalGradientLevelUpper = byUpper;

  00003	8a 45 08	 mov	 al, BYTE PTR _byUpper$[ebp]
  00006	88 81 1c 02 00
	00		 mov	 BYTE PTR [ecx+540], al

; 266  : 	m_ucVirticalGradientLevelLower = byLower;

  0000c	8a 45 0c	 mov	 al, BYTE PTR _byLower$[ebp]
  0000f	88 81 1d 02 00
	00		 mov	 BYTE PTR [ecx+541], al

; 267  : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
?SetGradientLevel@CSkyBox@@QAEXEE@Z ENDP		; CSkyBox::SetGradientLevel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetSkyBoxScale@CSkyBox@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Scale$ = 8					; size = 4
?SetSkyBoxScale@CSkyBox@@QAEXABUD3DXVECTOR3@@@Z PROC	; CSkyBox::SetSkyBoxScale, COMDAT
; _this$ = ecx

; 254  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 255  : 	m_fScaleX = c_rv3Scale.x;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv3Scale$[ebp]

; 256  : 	m_fScaleY = c_rv3Scale.y;
; 257  : 	m_fScaleZ = c_rv3Scale.z;
; 258  : 
; 259  : 	m_bSkyMatrixUpdated = true;
; 260  : 	D3DXMatrixScaling(&m_matWorld, m_fScaleX, m_fScaleY, m_fScaleZ);

  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0000d	f3 0f 11 91 c8
	01 00 00	 movss	 DWORD PTR [ecx+456], xmm2
  00015	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0001a	f3 0f 11 89 cc
	01 00 00	 movss	 DWORD PTR [ecx+460], xmm1
  00022	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00027	8d 81 3c 01 00
	00		 lea	 eax, DWORD PTR [ecx+316]
  0002d	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00033	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00039	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  0003e	50		 push	 eax
  0003f	f3 0f 11 81 d0
	01 00 00	 movss	 DWORD PTR [ecx+464], xmm0
  00047	c6 81 f1 01 00
	00 01		 mov	 BYTE PTR [ecx+497], 1
  0004e	e8 00 00 00 00	 call	 _D3DXMatrixScaling@16

; 261  : }

  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
?SetSkyBoxScale@CSkyBox@@QAEXABUD3DXVECTOR3@@@Z ENDP	; CSkyBox::SetSkyBoxScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Unload@CSkyBox@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Unload@CSkyBox@@QAEXXZ PROC				; CSkyBox::Unload, COMDAT
; _this$ = ecx

; 334  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b c1		 mov	 eax, ecx
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00008	8d 98 34 01 00
	00		 lea	 ebx, DWORD PTR [eax+308]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 334  : {

  0000e	89 45 fc	 mov	 DWORD PTR _this$1$[ebp], eax
  00011	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00012	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00014	8b 37		 mov	 esi, DWORD PTR [edi]
  00016	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 337  : 	while (itor != m_GraphicImageInstanceMap.end())

  00018	74 5b		 je	 SHORT $LN3@Unload
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Unload:

; 338  : 	{
; 339  : 		DeleteTexture(itor->second);

  00020	ff 76 28	 push	 DWORD PTR [esi+40]
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ?DeleteTexture@CSkyObject@@IAEXPAVCGraphicImageInstance@@@Z ; CSkyObject::DeleteTexture
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  0002a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00031	74 21		 je	 SHORT $LN30@Unload

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  00033	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00036	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0003a	75 14		 jne	 SHORT $LN58@Unload
  0003c	0f 1f 40 00	 npad	 4
$LL28@Unload:
  00040	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00043	75 0b		 jne	 SHORT $LN58@Unload

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  00045	8b f0		 mov	 esi, eax
  00047	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f0		 je	 SHORT $LL28@Unload
$LN58@Unload:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())

  00050	8b f0		 mov	 esi, eax

; 58   :         } else {

  00052	eb 18		 jmp	 SHORT $LN35@Unload
$LN30@Unload:

; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

  00054	8b f0		 mov	 esi, eax

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00056	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00058	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0005c	75 0e		 jne	 SHORT $LN35@Unload
  0005e	66 90		 npad	 2
$LL34@Unload:
  00060	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00062	8b f1		 mov	 esi, ecx
  00064	8b c8		 mov	 ecx, eax
  00066	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0006a	74 f4		 je	 SHORT $LL34@Unload
$LN35@Unload:

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0006c	8b 3b		 mov	 edi, DWORD PTR [ebx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 337  : 	while (itor != m_GraphicImageInstanceMap.end())

  0006e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 233  :         return this->_Ptr == _Right._Ptr;

  00071	3b f7		 cmp	 esi, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 337  : 	while (itor != m_GraphicImageInstanceMap.end())

  00073	75 ab		 jne	 SHORT $LL2@Unload
$LN3@Unload:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00075	ff 77 04	 push	 DWORD PTR [edi+4]
  00078	8b cb		 mov	 ecx, ebx
  0007a	53		 push	 ebx
  0007b	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >

; 1358 :         _Head->_Parent  = _Head;

  00080	89 7f 04	 mov	 DWORD PTR [edi+4], edi

; 1359 :         _Head->_Left    = _Head;

  00083	89 3f		 mov	 DWORD PTR [edi], edi

; 1360 :         _Head->_Right   = _Head;

  00085	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 1361 :         _Scary->_Mysize = 0;

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00091	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 344  : }

  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?Unload@CSkyBox@@QAEXXZ ENDP				; CSkyBox::Unload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Destroy@CSkyBox@@UAEXXZ
_TEXT	SEGMENT
?Destroy@CSkyBox@@UAEXXZ PROC				; CSkyBox::Destroy, COMDAT
; _this$ = ecx

; 250  : 	Unload();

  00000	e9 00 00 00 00	 jmp	 ?Unload@CSkyBox@@QAEXXZ	; CSkyBox::Unload
?Destroy@CSkyBox@@UAEXXZ ENDP				; CSkyBox::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?RenderCloud@CSkyBox@@QAEXXZ
_TEXT	SEGMENT
_matProjCloud$ = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?RenderCloud@CSkyBox@@QAEXXZ PROC			; CSkyBox::RenderCloud, COMDAT
; _this$ = ecx

; 909  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b f1		 mov	 esi, ecx
  00014	57		 push	 edi

; 910  : 	CGraphicImageInstance * pCloudGraphicImageInstance = m_GraphicImageInstanceMap[m_FaceCloud.m_strfacename];

  00015	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  00018	57		 push	 edi
  00019	8d 8e 34 01 00
	00		 lea	 ecx, DWORD PTR [esi+308]
  0001f	e8 00 00 00 00	 call	 ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::operator[]
  00024	8b 18		 mov	 ebx, DWORD PTR [eax]

; 911  : 	if (!pCloudGraphicImageInstance)

  00026	85 db		 test	 ebx, ebx
  00028	0f 84 94 02 00
	00		 je	 $LN1@RenderClou

; 912  : 	{
; 913  : 		return;
; 914  : 	}
; 915  : 
; 916  : 	STATEMANAGER.SaveRenderState(D3DRS_ZENABLE,	TRUE);

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00034	6a 01		 push	 1
  00036	6a 07		 push	 7
  00038	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 917  : 	STATEMANAGER.SaveRenderState(D3DRS_ZWRITEENABLE, FALSE);

  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00043	6a 00		 push	 0
  00045	6a 0e		 push	 14			; 0000000eH
  00047	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 918  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  0004c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00052	6a 00		 push	 0
  00054	68 89 00 00 00	 push	 137			; 00000089H
  00059	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 919  : 	STATEMANAGER.SaveRenderState(D3DRS_FOGENABLE, FALSE);

  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00064	6a 00		 push	 0
  00066	6a 1c		 push	 28			; 0000001cH
  00068	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 920  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00073	6a 01		 push	 1
  00075	6a 1b		 push	 27			; 0000001bH
  00077	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 921  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_ONE);

  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00082	6a 02		 push	 2
  00084	6a 13		 push	 19			; 00000013H
  00086	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 922  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCCOLOR);

  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00091	6a 04		 push	 4
  00093	6a 14		 push	 20			; 00000014H
  00095	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 923  : 
; 924  : 	STATEMANAGER.SaveTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_COUNT2);

  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a0	6a 02		 push	 2
  000a2	6a 18		 push	 24			; 00000018H
  000a4	6a 00		 push	 0
  000a6	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 925  : 
; 926  : 	m_matTextureCloud._31 = m_fCloudPositionU;

  000ab	8b 86 28 01 00
	00		 mov	 eax, DWORD PTR [esi+296]
  000b1	89 86 e0 00 00
	00		 mov	 DWORD PTR [esi+224], eax

; 927  : 	m_matTextureCloud._32 = m_fCloudPositionV;

  000b7	8b 86 2c 01 00
	00		 mov	 eax, DWORD PTR [esi+300]
  000bd	89 86 e4 00 00
	00		 mov	 DWORD PTR [esi+228], eax

; 928  : 
; 929  : 	DWORD dwCurTime = CTimer::Instance().GetCurrentMillisecond();

  000c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  000c9	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond

; 930  : 
; 931  : 	m_fCloudPositionU += m_fCloudScrollSpeedU * (float)( dwCurTime - m_dwlastTime ) * 0.001f;

  000ce	8b c8		 mov	 ecx, eax
  000d0	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3a83126f
  000d8	2b 8e 30 01 00
	00		 sub	 ecx, DWORD PTR [esi+304]

; 932  : 	if (m_fCloudPositionU >= 1.0f)

  000de	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  000e6	66 0f 6e c1	 movd	 xmm0, ecx
  000ea	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000ee	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  000f1	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  000fa	66 0f 5a c8	 cvtpd2ps xmm1, xmm0
  000fe	0f 28 c1	 movaps	 xmm0, xmm1
  00101	f3 0f 59 86 20
	01 00 00	 mulss	 xmm0, DWORD PTR [esi+288]
  00109	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0010d	f3 0f 58 86 28
	01 00 00	 addss	 xmm0, DWORD PTR [esi+296]
  00115	0f 2f c3	 comiss	 xmm0, xmm3
  00118	f3 0f 11 86 28
	01 00 00	 movss	 DWORD PTR [esi+296], xmm0
  00120	72 0a		 jb	 SHORT $LN3@RenderClou

; 933  : 	{
; 934  : 		m_fCloudPositionU = 0.0f;

  00122	c7 86 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+296], 0
$LN3@RenderClou:

; 935  : 	}
; 936  : 
; 937  : 	m_fCloudPositionV += m_fCloudScrollSpeedV * (float)( dwCurTime - m_dwlastTime ) * 0.001f;

  0012c	f3 0f 59 8e 24
	01 00 00	 mulss	 xmm1, DWORD PTR [esi+292]
  00134	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00138	f3 0f 58 8e 2c
	01 00 00	 addss	 xmm1, DWORD PTR [esi+300]

; 938  : 	if (m_fCloudPositionV >= 1.0f)

  00140	0f 2f cb	 comiss	 xmm1, xmm3
  00143	f3 0f 11 8e 2c
	01 00 00	 movss	 DWORD PTR [esi+300], xmm1
  0014b	72 0a		 jb	 SHORT $LN4@RenderClou

; 939  : 	{
; 940  : 		m_fCloudPositionV = 0.0f;

  0014d	c7 86 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+300], 0
$LN4@RenderClou:

; 941  : 	}
; 942  : 
; 943  : 	m_dwlastTime = dwCurTime;

  00157	89 86 30 01 00
	00		 mov	 DWORD PTR [esi+304], eax

; 944  : 
; 945  : 	STATEMANAGER.SaveTransform(D3DTS_TEXTURE0, &m_matTextureCloud);

  0015d	8d 86 c0 00 00
	00		 lea	 eax, DWORD PTR [esi+192]
  00163	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00169	50		 push	 eax
  0016a	6a 10		 push	 16			; 00000010H
  0016c	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 946  : 
; 947  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATEINVALPHA_ADDCOLOR);

  00171	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00177	6a 14		 push	 20			; 00000014H
  00179	6a 01		 push	 1
  0017b	6a 00		 push	 0
  0017d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 948  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00182	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00188	6a 02		 push	 2
  0018a	6a 02		 push	 2
  0018c	6a 00		 push	 0
  0018e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 949  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00199	6a 00		 push	 0
  0019b	6a 03		 push	 3
  0019d	6a 00		 push	 0
  0019f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 950  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001aa	6a 02		 push	 2
  001ac	6a 04		 push	 4
  001ae	6a 00		 push	 0
  001b0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 951  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  001b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001bb	6a 02		 push	 2
  001bd	6a 05		 push	 5
  001bf	6a 00		 push	 0
  001c1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 952  : 
; 953  : 	D3DXMATRIX matProjCloud;
; 954  : 	D3DXMatrixPerspectiveFovRH(&matProjCloud, D3DX_PI * 0.25f, 1.33333f, 50.0f, 999999.0f);

  001c6	83 ec 10	 sub	 esp, 16			; 00000010H
  001c9	8d 45 bc	 lea	 eax, DWORD PTR _matProjCloud$[ebp]
  001cc	c7 44 24 0c f0
	23 74 49	 mov	 DWORD PTR [esp+12], 1232348144 ; 497423f0H
  001d4	c7 44 24 08 00
	00 48 42	 mov	 DWORD PTR [esp+8], 1112014848 ; 42480000H
  001dc	c7 44 24 04 8f
	aa aa 3f	 mov	 DWORD PTR [esp+4], 1068149391 ; 3faaaa8fH
  001e4	c7 04 24 db 0f
	49 3f		 mov	 DWORD PTR [esp], 1061752795 ; 3f490fdbH
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _D3DXMatrixPerspectiveFovRH@20

; 955  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &m_matWorldCloud);

  001f1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001f7	8d 46 40	 lea	 eax, DWORD PTR [esi+64]
  001fa	50		 push	 eax
  001fb	68 00 01 00 00	 push	 256			; 00000100H
  00200	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 956  : 	STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProjCloud);

  00205	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0020b	8d 45 bc	 lea	 eax, DWORD PTR _matProjCloud$[ebp]
  0020e	50		 push	 eax
  0020f	6a 03		 push	 3
  00211	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 957  : 	STATEMANAGER.SetTexture(0, pCloudGraphicImageInstance->GetTexturePointer()->GetD3DTexture());

  00216	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0021c	8b cb		 mov	 ecx, ebx
  0021e	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00223	8b c8		 mov	 ecx, eax
  00225	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  0022a	50		 push	 eax
  0022b	6a 00		 push	 0
  0022d	8b ce		 mov	 ecx, esi
  0022f	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 958  : 	m_FaceCloud.Render();

  00234	8b cf		 mov	 ecx, edi
  00236	e8 00 00 00 00	 call	 ?Render@SSkyObjectFace@CSkyObject@@QAEXXZ ; CSkyObject::SSkyObjectFace::Render

; 959  : 	STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  0023b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00241	6a 03		 push	 3
  00243	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 960  : 
; 961  : 	STATEMANAGER.RestoreTransform(D3DTS_TEXTURE0);

  00248	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0024e	6a 10		 push	 16			; 00000010H
  00250	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 962  : 	STATEMANAGER.RestoreTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS);

  00255	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0025b	6a 18		 push	 24			; 00000018H
  0025d	6a 00		 push	 0
  0025f	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 963  : 
; 964  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00264	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0026a	68 89 00 00 00	 push	 137			; 00000089H
  0026f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 965  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE);

  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0027a	6a 07		 push	 7
  0027c	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 966  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);

  00281	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00287	6a 0e		 push	 14			; 0000000eH
  00289	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 967  : 	STATEMANAGER.RestoreRenderState(D3DRS_FOGENABLE);

  0028e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00294	6a 1c		 push	 28			; 0000001cH
  00296	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 968  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  0029b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002a1	6a 1b		 push	 27			; 0000001bH
  002a3	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 969  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  002a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ae	6a 13		 push	 19			; 00000013H
  002b0	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 970  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  002b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002bb	6a 14		 push	 20			; 00000014H
  002bd	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
$LN1@RenderClou:

; 971  : }

  002c2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c5	5f		 pop	 edi
  002c6	5e		 pop	 esi
  002c7	33 cd		 xor	 ecx, ebp
  002c9	5b		 pop	 ebx
  002ca	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cf	8b e5		 mov	 esp, ebp
  002d1	5d		 pop	 ebp
  002d2	c3		 ret	 0
?RenderCloud@CSkyBox@@QAEXXZ ENDP			; CSkyBox::RenderCloud
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Render@CSkyBox@@UAEXXZ
_TEXT	SEGMENT
__Loc$3 = -44						; size = 12
$T4 = -32						; size = 8
_this$1$ = -24						; size = 4
_i$1$ = -20						; size = 4
tv1027 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Render@CSkyBox@@UAEXXZ PROC				; CSkyBox::Render, COMDAT
; _this$ = ecx

; 843  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CSkyBox@@UAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b d9		 mov	 ebx, ecx
  0002a	89 5d e8	 mov	 DWORD PTR _this$1$[ebp], ebx

; 844  : 	STATEMANAGER.SaveRenderState(D3DRS_ZENABLE,	TRUE);

  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00033	6a 01		 push	 1
  00035	6a 07		 push	 7
  00037	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 845  : 	STATEMANAGER.SaveRenderState(D3DRS_ZWRITEENABLE, FALSE);

  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00042	6a 00		 push	 0
  00044	6a 0e		 push	 14			; 0000000eH
  00046	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 846  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  0004b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00051	6a 00		 push	 0
  00053	68 89 00 00 00	 push	 137			; 00000089H
  00058	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 847  : 	STATEMANAGER.SaveRenderState(D3DRS_FOGENABLE, FALSE);

  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00063	6a 00		 push	 0
  00065	6a 1c		 push	 28			; 0000001cH
  00067	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 848  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00072	6a 00		 push	 0
  00074	6a 1b		 push	 27			; 0000001bH
  00076	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 849  : 
; 850  : 	STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG2);

  0007b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00081	6a 03		 push	 3
  00083	6a 01		 push	 1
  00085	6a 00		 push	 0
  00087	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 851  : 	STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00092	6a 02		 push	 2
  00094	6a 02		 push	 2
  00096	6a 00		 push	 0
  00098	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 852  : 	STATEMANAGER.SaveTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a3	6a 00		 push	 0
  000a5	6a 03		 push	 3
  000a7	6a 00		 push	 0
  000a9	e8 00 00 00 00	 call	 ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState

; 853  : 
; 854  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000b4	6a 01		 push	 1
  000b6	6a 04		 push	 4
  000b8	6a 00		 push	 0
  000ba	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 855  : 
; 856  : 	STATEMANAGER.SetTexture(1, NULL);

  000bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000c5	6a 00		 push	 0
  000c7	6a 01		 push	 1
  000c9	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 857  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000d4	6a 01		 push	 1
  000d6	6a 01		 push	 1
  000d8	6a 01		 push	 1
  000da	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 858  : 	STATEMANAGER.SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000e5	6a 01		 push	 1
  000e7	6a 04		 push	 4
  000e9	6a 01		 push	 1
  000eb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 859  : 
; 860  : 	STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  000f0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f6	68 42 01 00 00	 push	 322			; 00000142H
  000fb	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 861  : 
; 862  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &m_matWorld);

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00106	8d 83 3c 01 00
	00		 lea	 eax, DWORD PTR [ebx+316]
  0010c	50		 push	 eax
  0010d	68 00 01 00 00	 push	 256			; 00000100H
  00112	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 863  : 
; 864  : 	//Render Face
; 865  : 	if ( m_ucRenderMode == CSkyObject::SKY_RENDER_MODE_TEXTURE )

  00117	80 bb d4 01 00
	00 02		 cmp	 BYTE PTR [ebx+468], 2
  0011e	0f 85 57 01 00
	00		 jne	 $LN8@Render

; 866  : 	{
; 867  : 		STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_SELECTARG1);

  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012a	6a 02		 push	 2
  0012c	6a 01		 push	 1
  0012e	6a 00		 push	 0
  00130	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 868  : 		STATEMANAGER.SaveSamplerState(0, D3DSAMP_ADDRESSU, D3DTADDRESS_CLAMP);

  00135	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0013b	6a 03		 push	 3
  0013d	6a 01		 push	 1
  0013f	6a 00		 push	 0
  00141	e8 00 00 00 00	 call	 ?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SaveSamplerState

; 869  : 		STATEMANAGER.SaveSamplerState(0, D3DSAMP_ADDRESSV, D3DTADDRESS_CLAMP);

  00146	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0014c	6a 03		 push	 3
  0014e	6a 02		 push	 2
  00150	6a 00		 push	 0
  00152	e8 00 00 00 00	 call	 ?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SaveSamplerState
  00157	8d bb 34 01 00
	00		 lea	 edi, DWORD PTR [ebx+308]

; 870  : 
; 871  : 		for (unsigned int i = 0; i < 6; ++i)

  0015d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00164	81 c3 38 02 00
	00		 add	 ebx, 568		; 00000238H
  0016a	89 5d f0	 mov	 DWORD PTR tv1027[ebp], ebx
  0016d	0f 1f 00	 npad	 3
$LL4@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  00170	53		 push	 ebx
  00171	8d 45 d4	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00174	8b cf		 mov	 ecx, edi
  00176	50		 push	 eax
  00177	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0017c	8b 75 dc	 mov	 esi, DWORD PTR __Loc$3[ebp+8]
  0017f	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00183	75 15		 jne	 SHORT $LN15@Render
  00185	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00188	50		 push	 eax
  00189	53		 push	 ebx
  0018a	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0018f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00192	84 c0		 test	 al, al
  00194	0f 84 80 00 00
	00		 je	 $LN14@Render
$LN15@Render:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  0019a	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  001a1	0f 84 71 01 00
	00		 je	 $LN113@Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  001a7	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  001a9	89 7d e0	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  001ac	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  001ae	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  001b5	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  001bc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  001c1	8b f8		 mov	 edi, eax

; 77   :         return ::operator new(_Bytes);

  001c3	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  001c6	89 7d e4	 mov	 DWORD PTR $T4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  001c9	ff 75 f0	 push	 DWORD PTR tv1027[ebp]
  001cc	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  001cf	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  001d6	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001db	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  001e2	89 1f		 mov	 DWORD PTR [edi], ebx

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  001e4	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001e7	57		 push	 edi
  001e8	ff 75 d8	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  001eb	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001ee	ff 75 d4	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 811  :         this->_Ptr->_Color = _Red;

  001f1	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  001f7	8b 7d e8	 mov	 edi, DWORD PTR _this$1$[ebp]
  001fa	81 c7 34 01 00
	00		 add	 edi, 308		; 00000134H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 813  :     }

  00200	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00207	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00209	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00210	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Insert_node
  00215	8b 5d f0	 mov	 ebx, DWORD PTR tv1027[ebp]
  00218	8b f0		 mov	 esi, eax
$LN14@Render:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 873  : 			CGraphicImageInstance * pFaceImageInstance = m_GraphicImageInstanceMap[m_Faces[i].m_strFaceTextureFileName];

  0021a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]

; 874  : 			if (!pFaceImageInstance)

  0021d	85 c9		 test	 ecx, ecx
  0021f	74 3a		 je	 SHORT $LN114@Render

; 875  : 			{
; 876  : 				break;
; 877  : 			}
; 878  : 
; 879  : 			STATEMANAGER.SetTexture( 0, pFaceImageInstance->GetTextureReference().GetD3DTexture() );

  00221	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00227	e8 00 00 00 00	 call	 ?GetTextureReference@CGraphicImageInstance@@QBEABVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTextureReference
  0022c	8b c8		 mov	 ecx, eax
  0022e	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  00233	50		 push	 eax
  00234	6a 00		 push	 0
  00236	8b ce		 mov	 ecx, esi
  00238	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 880  : 
; 881  : 			m_Faces[i].Render();

  0023d	8d 4b e8	 lea	 ecx, DWORD PTR [ebx-24]
  00240	e8 00 00 00 00	 call	 ?Render@SSkyObjectFace@CSkyObject@@QAEXXZ ; CSkyObject::SSkyObjectFace::Render
  00245	8b 45 ec	 mov	 eax, DWORD PTR _i$1$[ebp]
  00248	83 c3 3c	 add	 ebx, 60			; 0000003cH
  0024b	40		 inc	 eax
  0024c	89 5d f0	 mov	 DWORD PTR tv1027[ebp], ebx
  0024f	89 45 ec	 mov	 DWORD PTR _i$1$[ebp], eax
  00252	83 f8 06	 cmp	 eax, 6
  00255	0f 82 15 ff ff
	ff		 jb	 $LL4@Render
$LN114@Render:

; 882  : 		}
; 883  : 
; 884  : 		//STATEMANAGER.SetTexture( 0, NULL );
; 885  : 
; 886  : 		STATEMANAGER.RestoreSamplerState(0, D3DSAMP_ADDRESSU);

  0025b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00261	6a 01		 push	 1
  00263	6a 00		 push	 0
  00265	e8 00 00 00 00	 call	 ?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z ; CStateManager::RestoreSamplerState

; 887  : 		STATEMANAGER.RestoreSamplerState(0, D3DSAMP_ADDRESSV);

  0026a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00270	6a 02		 push	 2
  00272	6a 00		 push	 0
  00274	e8 00 00 00 00	 call	 ?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z ; CStateManager::RestoreSamplerState

; 888  : 	}

  00279	eb 1a		 jmp	 SHORT $LN6@Render
$LN8@Render:

; 889  : 	else
; 890  : 	{
; 891  : 		for (unsigned int i = 0; i < 6; ++i)

  0027b	8d b3 20 02 00
	00		 lea	 esi, DWORD PTR [ebx+544]
  00281	bf 06 00 00 00	 mov	 edi, 6
$LL7@Render:

; 892  : 		{
; 893  : 			m_Faces[i].Render();

  00286	8b ce		 mov	 ecx, esi
  00288	e8 00 00 00 00	 call	 ?Render@SSkyObjectFace@CSkyObject@@QAEXXZ ; CSkyObject::SSkyObjectFace::Render
  0028d	83 c6 3c	 add	 esi, 60			; 0000003cH
  00290	83 ef 01	 sub	 edi, 1
  00293	75 f1		 jne	 SHORT $LL7@Render
$LN6@Render:

; 894  : 		}
; 895  : 	}
; 896  : 
; 897  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00295	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029b	68 89 00 00 00	 push	 137			; 00000089H
  002a0	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 898  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE);

  002a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ab	6a 07		 push	 7
  002ad	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 899  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);

  002b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002b8	6a 0e		 push	 14			; 0000000eH
  002ba	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 900  : 	STATEMANAGER.RestoreRenderState(D3DRS_FOGENABLE);

  002bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c5	6a 1c		 push	 28			; 0000001cH
  002c7	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 901  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE);

  002cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d2	6a 1b		 push	 27			; 0000001bH
  002d4	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 902  : 
; 903  : 	STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLOROP);

  002d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002df	6a 01		 push	 1
  002e1	6a 00		 push	 0
  002e3	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 904  : 	STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG1);

  002e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002ee	6a 02		 push	 2
  002f0	6a 00		 push	 0
  002f2	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 905  : 	STATEMANAGER.RestoreTextureStageState(0, D3DTSS_COLORARG2);

  002f7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002fd	6a 03		 push	 3
  002ff	6a 00		 push	 0
  00301	e8 00 00 00 00	 call	 ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState

; 906  : }

  00306	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00309	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00310	59		 pop	 ecx
  00311	5f		 pop	 edi
  00312	5e		 pop	 esi
  00313	5b		 pop	 ebx
  00314	8b e5		 mov	 esp, ebp
  00316	5d		 pop	 ebp
  00317	c3		 ret	 0
$LN113@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00318	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN124@Render:
  0031d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CSkyBox@@UAEXXZ$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
__unwindfunclet$?Render@CSkyBox@@UAEXXZ$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?Render@CSkyBox@@UAEXXZ:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CSkyBox@@UAEXXZ
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CSkyBox@@UAEXXZ ENDP				; CSkyBox::Render
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Update@CSkyBox@@UAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Update@CSkyBox@@UAEXXZ PROC				; CSkyBox::Update, COMDAT
; _this$ = ecx

; 824  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$1$[ebp], esi

; 825  : 	CSkyObject::Update();

  0000a	e8 00 00 00 00	 call	 ?Update@CSkyObject@@UAEXXZ ; CSkyObject::Update

; 826  : 
; 827  : 	if (!m_bTransitionStarted)

  0000f	80 be f0 01 00
	00 00		 cmp	 BYTE PTR [esi+496], 0
  00016	74 52		 je	 SHORT $LN1@Update

; 828  : 	{
; 829  : 		return;
; 830  : 	}
; 831  : 
; 832  : 	bool bResult = false;

  00018	53		 push	 ebx
  00019	57		 push	 edi
  0001a	32 db		 xor	 bl, bl

; 833  : 	for (unsigned char uci = 0; uci < 6; ++uci)

  0001c	bf 06 00 00 00	 mov	 edi, 6
  00021	81 c6 20 02 00
	00		 add	 esi, 544		; 00000220H
$LL4@Update:

; 834  : 	{
; 835  : 		bResult = m_Faces[uci].Update() || bResult;

  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?Update@SSkyObjectFace@CSkyObject@@QAE_NXZ ; CSkyObject::SSkyObjectFace::Update
  0002e	84 c0		 test	 al, al
  00030	75 04		 jne	 SHORT $LN7@Update
  00032	84 db		 test	 bl, bl
  00034	74 02		 je	 SHORT $LN8@Update
$LN7@Update:
  00036	b3 01		 mov	 bl, 1
$LN8@Update:

; 833  : 	for (unsigned char uci = 0; uci < 6; ++uci)

  00038	83 c6 3c	 add	 esi, 60			; 0000003cH
  0003b	83 ef 01	 sub	 edi, 1
  0003e	75 e7		 jne	 SHORT $LL4@Update

; 836  : 	}
; 837  : 	bResult = m_FaceCloud.Update() || bResult;

  00040	8b 75 fc	 mov	 esi, DWORD PTR _this$1$[ebp]
  00043	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00046	e8 00 00 00 00	 call	 ?Update@SSkyObjectFace@CSkyObject@@QAE_NXZ ; CSkyObject::SSkyObjectFace::Update
  0004b	84 c0		 test	 al, al
  0004d	75 11		 jne	 SHORT $LN9@Update
  0004f	84 db		 test	 bl, bl
  00051	75 0d		 jne	 SHORT $LN9@Update

; 838  : 
; 839  : 	m_bTransitionStarted = bResult;

  00053	5f		 pop	 edi
  00054	5b		 pop	 ebx
  00055	88 86 f0 01 00
	00		 mov	 BYTE PTR [esi+496], al
  0005b	5e		 pop	 esi

; 840  : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN9@Update:

; 836  : 	}
; 837  : 	bResult = m_FaceCloud.Update() || bResult;

  00060	b0 01		 mov	 al, 1

; 838  : 
; 839  : 	m_bTransitionStarted = bResult;

  00062	5f		 pop	 edi
  00063	88 86 f0 01 00
	00		 mov	 BYTE PTR [esi+496], al
  00069	5b		 pop	 ebx
$LN1@Update:
  0006a	5e		 pop	 esi

; 840  : }

  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?Update@CSkyBox@@UAEXXZ ENDP				; CSkyBox::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ??1CSkyBox@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSkyBox@@UAE@XZ PROC					; CSkyBox::~CSkyBox, COMDAT
; _this$ = ecx

; 244  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSkyBox@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSkyBox@@6B@

; 245  : 	Destroy();

  0002b	e8 00 00 00 00	 call	 ?Destroy@CSkyBox@@UAEXXZ ; CSkyBox::Destroy

; 246  : }

  00030	68 00 00 00 00	 push	 OFFSET ??1SSkyObjectFace@CSkyObject@@QAE@XZ
  00035	6a 06		 push	 6
  00037	6a 3c		 push	 60			; 0000003cH
  00039	8d 86 20 02 00
	00		 lea	 eax, DWORD PTR [esi+544]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 ??1CSkyObject@@UAE@XZ	; CSkyObject::~CSkyObject
  0004c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00056	59		 pop	 ecx
  00057	5e		 pop	 esi
  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
  0005c	cc		 int	 3
  0005d	cc		 int	 3
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSkyBox@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSkyBox@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSkyBox@@UAE@XZ ENDP					; CSkyBox::~CSkyBox
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ??0CSkyBox@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSkyBox@@QAE@XZ PROC					; CSkyBox::CSkyBox, COMDAT
; _this$ = ecx

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSkyBox@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CSkyObject@@QAE@XZ	; CSkyObject::CSkyObject
  0002e	68 00 00 00 00	 push	 OFFSET ??1SSkyObjectFace@CSkyObject@@QAE@XZ
  00033	68 00 00 00 00	 push	 OFFSET ??0SSkyObjectFace@CSkyObject@@QAE@XZ
  00038	6a 06		 push	 6
  0003a	6a 3c		 push	 60			; 0000003cH
  0003c	8d 86 20 02 00
	00		 lea	 eax, DWORD PTR [esi+544]
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	50		 push	 eax
  0004a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSkyBox@@6B@
  00050	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 239  : 	m_ucVirticalGradientLevelUpper = 0;

  00055	66 c7 86 1c 02
	00 00 00 00	 mov	 WORD PTR [esi+540], 0

; 240  : 	m_ucVirticalGradientLevelLower = 0;
; 241  : }

  0005e	8b c6		 mov	 eax, esi
  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSkyBox@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CSkyObject@@UAE@XZ	; CSkyObject::~CSkyObject
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CSkyBox@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSkyBox@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSkyBox@@QAE@XZ ENDP					; CSkyBox::CSkyBox
; Function compile flags: /Ogtp
;	COMDAT ??_GCSkyObject@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkyObject@@UAEPAXI@Z PROC				; CSkyObject::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSkyObject@@UAE@XZ	; CSkyObject::~CSkyObject
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 1c 02 00 00	 push	 540			; 0000021cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSkyObject@@UAEPAXI@Z ENDP				; CSkyObject::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	ff 70 04	 push	 DWORD PTR [eax+4]
  00008	56		 push	 esi
  00009	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000e	6a 2c		 push	 44			; 0000002cH
  00010	ff 36		 push	 DWORD PTR [esi]
  00012	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00017	83 c4 08	 add	 esp, 8
  0001a	5e		 pop	 esi
  0001b	c3		 ret	 0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 8
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::operator[], COMDAT
; _this$ = ecx

; 344  :     mapped_type& operator[](const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$1$[ebp], edi

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002d	8b 5d 08	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  00030	8d 45 dc	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00033	53		 push	 ebx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003a	8b 75 e4	 mov	 esi, DWORD PTR __Loc$3[ebp+8]
  0003d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00041	75 11		 jne	 SHORT $LN4@operator
  00043	8d 46 10	 lea	 eax, DWORD PTR [esi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00046	50		 push	 eax
  00047	53		 push	 ebx
  00048	e8 00 00 00 00	 call	 ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
  0004d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00050	84 c0		 test	 al, al
  00052	74 63		 je	 SHORT $LN3@operator
$LN4@operator:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00054	81 7f 04 5d 74
	d1 05		 cmp	 DWORD PTR [edi+4], 97612893 ; 05d1745dH
  0005b	74 71		 je	 SHORT $LN104@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  0005d	8b 1f		 mov	 ebx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0005f	89 7d e8	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  00062	6a 2c		 push	 44			; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00064	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0006b	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00072	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00077	8b f8		 mov	 edi, eax

; 77   :         return ::operator new(_Bytes);

  00079	83 c4 04	 add	 esp, 4

; 1013 :         _Ptr = _Al.allocate(1);

  0007c	89 7d ec	 mov	 DWORD PTR $T4[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  0007f	ff 75 08	 push	 DWORD PTR __Keyval$[ebp]
  00082	8d 4f 10	 lea	 ecx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 806  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

  00085	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  0008c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00091	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00094	57		 push	 edi
  00095	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  00098	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0009f	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000a2	89 1f		 mov	 DWORD PTR [edi], ebx

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000a4	89 5f 04	 mov	 DWORD PTR [edi+4], ebx

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000a7	89 5f 08	 mov	 DWORD PTR [edi+8], ebx

; 811  :         this->_Ptr->_Color = _Red;

  000aa	66 c7 47 0c 00
	00		 mov	 WORD PTR [edi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000b0	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Insert_node
  000b5	8b f0		 mov	 esi, eax
$LN3@operator:

; 345  :         return _Try_emplace(_Keyval).first->_Myval.second;

  000b7	8d 46 28	 lea	 eax, DWORD PTR [esi+40]

; 346  :     }

  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c4	59		 pop	 ecx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 04 00	 ret	 4
$LN104@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  000ce	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN102@operator:
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
__unwindfunclet$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@std@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAEAAPAVCGraphicImageInstance@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CGraphicImageInstance *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1SSkyObjectFace@CSkyObject@@QAE@XZ
_TEXT	SEGMENT
??1SSkyObjectFace@CSkyObject@@QAE@XZ PROC		; CSkyObject::SSkyObjectFace::~SSkyObjectFace, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00006	e8 00 00 00 00	 call	 ??1?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::~vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >
  0000b	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  0000e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00011	72 28		 jb	 SHORT $LN15@SSkyObject
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00016	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00017	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001d	72 12		 jb	 SHORT $LN25@SSkyObject

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00022	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00025	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002d	77 60		 ja	 SHORT $LN50@SSkyObject

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002f	8b c2		 mov	 eax, edx
$LN25@SSkyObject:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00031	51		 push	 ecx
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00038	83 c4 08	 add	 esp, 8
$LN15@SSkyObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003b	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00042	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00049	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  0004d	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00050	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00053	72 27		 jb	 SHORT $LN43@SSkyObject
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00057	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00058	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005e	72 12		 jb	 SHORT $LN53@SSkyObject

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00060	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00063	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00066	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00068	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006e	77 1f		 ja	 SHORT $LN50@SSkyObject

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00070	8b c2		 mov	 eax, edx
$LN53@SSkyObject:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00072	51		 push	 ecx
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00079	83 c4 08	 add	 esp, 8
$LN43@SSkyObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0007c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00083	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0008a	c6 06 00	 mov	 BYTE PTR [esi], 0
  0008d	5e		 pop	 esi
  0008e	c3		 ret	 0
$LN50@SSkyObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@SSkyObject:
  00094	cc		 int	 3
??1SSkyObjectFace@CSkyObject@@QAE@XZ ENDP		; CSkyObject::SSkyObjectFace::~SSkyObjectFace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??0SSkyObjectFace@CSkyObject@@QAE@XZ
_TEXT	SEGMENT
??0SSkyObjectFace@CSkyObject@@QAE@XZ PROC		; CSkyObject::SSkyObjectFace::SSkyObjectFace, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00005	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 4998 :         _My_data._Mysize = 0;

  00008	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0000f	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00016	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00019	0f 11 41 18	 movups	 XMMWORD PTR [ecx+24], xmm0

; 4998 :         _My_data._Mysize = 0;

  0001d	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00024	c7 41 2c 0f 00
	00 00		 mov	 DWORD PTR [ecx+44], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0002b	c6 41 18 00	 mov	 BYTE PTR [ecx+24], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002f	c7 41 30 00 00
	00 00		 mov	 DWORD PTR [ecx+48], 0
  00036	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0
  0003d	c7 41 38 00 00
	00 00		 mov	 DWORD PTR [ecx+56], 0
  00044	c3		 ret	 0
??0SSkyObjectFace@CSkyObject@@QAE@XZ ENDP		; CSkyObject::SSkyObjectFace::SSkyObjectFace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Render@SSkyObjectFace@CSkyObject@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Render@SSkyObjectFace@CSkyObject@@QAEXXZ PROC		; CSkyObject::SSkyObjectFace::Render, COMDAT
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00007	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 226  : {

  0000c	53		 push	 ebx
  0000d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 227  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  00011	32 db		 xor	 bl, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00013	2b d7		 sub	 edx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 226  : {

  00015	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00018	f7 ea		 imul	 edx
  0001a	c1 fa 05	 sar	 edx, 5
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 227  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  00024	74 3d		 je	 SHORT $LN3@Render
  00026	56		 push	 esi
  00027	33 f6		 xor	 esi, esi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Render:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00030	69 ce 2c 01 00
	00		 imul	 ecx, esi, 300
  00036	03 cf		 add	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 229  : 		m_SkyObjectQuadVector[uci].Render();

  00038	e8 00 00 00 00	 call	 ?Render@CSkyObjectQuad@@QAEXXZ ; CSkyObjectQuad::Render
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 227  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  00040	fe c3		 inc	 bl
  00042	0f b6 f3	 movzx	 esi, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00045	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00048	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
  0004b	2b cf		 sub	 ecx, edi
  0004d	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00052	f7 e9		 imul	 ecx
  00054	c1 fa 05	 sar	 edx, 5
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 227  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  0005e	3b f0		 cmp	 esi, eax
  00060	72 ce		 jb	 SHORT $LL4@Render
  00062	5e		 pop	 esi
$LN3@Render:
  00063	5f		 pop	 edi

; 230  : 	}
; 231  : }

  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?Render@SSkyObjectFace@CSkyObject@@QAEXXZ ENDP		; CSkyObject::SSkyObjectFace::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Update@SSkyObjectFace@CSkyObject@@QAE_NXZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_dwi$1$ = -4						; size = 4
?Update@SSkyObjectFace@CSkyObject@@QAE_NXZ PROC		; CSkyObject::SSkyObjectFace::Update, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00008	8b 71 30	 mov	 esi, DWORD PTR [ecx+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 218  : 	for (DWORD dwi = 0; dwi < m_SkyObjectQuadVector.size(); ++dwi)

  0000b	33 d2		 xor	 edx, edx
  0000d	89 4d f8	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00010	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00015	8b 49 34	 mov	 ecx, DWORD PTR [ecx+52]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 217  : 	bool bResult = false;

  00018	32 db		 xor	 bl, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001a	2b ce		 sub	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 218  : 	for (DWORD dwi = 0; dwi < m_SkyObjectQuadVector.size(); ++dwi)

  0001c	89 55 fc	 mov	 DWORD PTR _dwi$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0001f	f7 e9		 imul	 ecx
  00021	c1 fa 05	 sar	 edx, 5
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 218  : 	for (DWORD dwi = 0; dwi < m_SkyObjectQuadVector.size(); ++dwi)

  0002b	74 40		 je	 SHORT $LN16@Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  0002d	57		 push	 edi
  0002e	33 ff		 xor	 edi, edi
$LL4@Update:

; 1952 :         return _My_data._Myfirst[_Pos];

  00030	8d 0c 37	 lea	 ecx, DWORD PTR [edi+esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 220  : 		bResult = m_SkyObjectQuadVector[dwi].Update() || bResult;

  00033	e8 00 00 00 00	 call	 ?Update@CSkyObjectQuad@@QAE_NXZ ; CSkyObjectQuad::Update
  00038	84 c0		 test	 al, al
  0003a	75 04		 jne	 SHORT $LN6@Update
  0003c	84 db		 test	 bl, bl
  0003e	74 02		 je	 SHORT $LN7@Update
$LN6@Update:
  00040	b3 01		 mov	 bl, 1
$LN7@Update:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 218  : 	for (DWORD dwi = 0; dwi < m_SkyObjectQuadVector.size(); ++dwi)

  00045	81 c7 2c 01 00
	00		 add	 edi, 300		; 0000012cH
  0004b	ff 45 fc	 inc	 DWORD PTR _dwi$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004e	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00051	8b 70 30	 mov	 esi, DWORD PTR [eax+48]
  00054	2b ce		 sub	 ecx, esi
  00056	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  0005b	f7 e9		 imul	 ecx
  0005d	c1 fa 05	 sar	 edx, 5
  00060	8b c2		 mov	 eax, edx
  00062	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00065	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 218  : 	for (DWORD dwi = 0; dwi < m_SkyObjectQuadVector.size(); ++dwi)

  00067	39 45 fc	 cmp	 DWORD PTR _dwi$1$[ebp], eax
  0006a	72 c4		 jb	 SHORT $LL4@Update

; 221  : 	}
; 222  : 	return bResult;

  0006c	5f		 pop	 edi
$LN16@Update:
  0006d	5e		 pop	 esi

; 223  : }

  0006e	8a c3		 mov	 al, bl
  00070	5b		 pop	 ebx
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?Update@SSkyObjectFace@CSkyObject@@QAE_NXZ ENDP		; CSkyObject::SSkyObjectFace::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?StartTransition@SSkyObjectFace@CSkyObject@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?StartTransition@SSkyObjectFace@CSkyObject@@QAEXXZ PROC	; CSkyObject::SSkyObjectFace::StartTransition, COMDAT
; _this$ = ecx

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00004	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00007	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 208  : {

  0000c	53		 push	 ebx
  0000d	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0000e	8b 79 30	 mov	 edi, DWORD PTR [ecx+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 209  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  00011	32 db		 xor	 bl, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00013	2b d7		 sub	 edx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 208  : {

  00015	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00018	f7 ea		 imul	 edx
  0001a	c1 fa 05	 sar	 edx, 5
  0001d	8b c2		 mov	 eax, edx
  0001f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00022	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 209  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  00024	74 3d		 je	 SHORT $LN3@StartTrans
  00026	56		 push	 esi
  00027	33 f6		 xor	 esi, esi
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@StartTrans:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  00030	69 ce 2c 01 00
	00		 imul	 ecx, esi, 300
  00036	03 cf		 add	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 211  : 		m_SkyObjectQuadVector[uci].StartTransition();

  00038	e8 00 00 00 00	 call	 ?StartTransition@CSkyObjectQuad@@QAEXXZ ; CSkyObjectQuad::StartTransition
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 209  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  00040	fe c3		 inc	 bl
  00042	0f b6 f3	 movzx	 esi, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00045	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  00048	8b 78 30	 mov	 edi, DWORD PTR [eax+48]
  0004b	2b cf		 sub	 ecx, edi
  0004d	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  00052	f7 e9		 imul	 ecx
  00054	c1 fa 05	 sar	 edx, 5
  00057	8b c2		 mov	 eax, edx
  00059	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005c	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 209  : 	for (unsigned char uci = 0; uci < m_SkyObjectQuadVector.size(); ++uci)

  0005e	3b f0		 cmp	 esi, eax
  00060	72 ce		 jb	 SHORT $LL4@StartTrans
  00062	5e		 pop	 esi
$LN3@StartTrans:
  00063	5f		 pop	 edi

; 212  : 	}
; 213  : }

  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?StartTransition@SSkyObjectFace@CSkyObject@@QAEXXZ ENDP	; CSkyObject::SSkyObjectFace::StartTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xrange@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ PROC ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xrange, COMDAT

; 2205 :         _Xout_of_range("invalid vector subscript");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DHFDPMIM@invalid?5vector?5subscript@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xrange:
  0000a	cc		 int	 3
?_Xrange@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ENDP ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ PROC ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@CAXXZ ENDP ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?resize@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldsize$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Newsize$ = 8						; size = 4
$T1 = 11						; size = 1
?resize@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAEXI@Z PROC ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::resize, COMDAT
; _this$ = ecx

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00009	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  0000e	56		 push	 esi

; 1621 :         if (_Newsize < _Oldsize) { // trim

  0000f	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  00012	57		 push	 edi

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00013	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00016	8b d7		 mov	 edx, edi
  00018	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0001a	2b d1		 sub	 edx, ecx
  0001c	f7 ea		 imul	 edx

; 1653 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

  0001e	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00021	c1 fa 05	 sar	 edx, 5
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
  0002b	89 45 f8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  0002e	3b f0		 cmp	 esi, eax
  00030	73 2f		 jae	 SHORT $LN4@resize

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00032	69 de 2c 01 00
	00		 imul	 ebx, esi, 300
  00038	03 d9		 add	 ebx, ecx

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  0003a	8b f3		 mov	 esi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0003c	3b df		 cmp	 ebx, edi
  0003e	74 12		 je	 SHORT $LN10@resize
$LL11@resize:

; 689  :         _Ptr->~_Uty();

  00040	8b 06		 mov	 eax, DWORD PTR [esi]
  00042	8b ce		 mov	 ecx, esi
  00044	6a 00		 push	 0
  00046	ff 10		 call	 DWORD PTR [eax]

; 947  :         for (; _First != _Last; ++_First) {

  00048	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  0004e	3b f7		 cmp	 esi, edi
  00050	75 ee		 jne	 SHORT $LL11@resize
$LN10@resize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1626 :             _Mylast = _Newlast;

  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00055	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  00056	5e		 pop	 esi

; 1626 :             _Mylast = _Newlast;

  00057	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  0005a	5b		 pop	 ebx
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN4@resize:

; 1630 :         if (_Newsize > _Oldsize) { // append

  00061	76 40		 jbe	 SHORT $LN5@resize

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00063	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00066	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  0006b	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  0006d	f7 e9		 imul	 ecx
  0006f	c1 fa 05	 sar	 edx, 5
  00072	8b c2		 mov	 eax, edx
  00074	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00077	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00079	3b f0		 cmp	 esi, eax
  0007b	76 15		 jbe	 SHORT $LN6@resize

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  0007d	8d 45 0b	 lea	 eax, DWORD PTR $T1[ebp]
  00080	8b cb		 mov	 ecx, ebx
  00082	50		 push	 eax
  00083	56		 push	 esi
  00084	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::_Resize_reallocate<std::_Value_init_tag>
  00089	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
$LN6@resize:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00092	2b 75 f8	 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
  00095	53		 push	 ebx
  00096	56		 push	 esi
  00097	57		 push	 edi
  00098	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@VCSkyObjectQuad@@@std@@@std@@YAPAVCSkyObjectQuad@@PAV1@IAAV?$allocator@VCSkyObjectQuad@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CSkyObjectQuad> >
  0009d	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a0	89 43 04	 mov	 DWORD PTR [ebx+4], eax
$LN5@resize:
  000a3	5f		 pop	 edi

; 1654 :         // trim or append value-initialized elements, provide strong guarantee
; 1655 :         _Resize(_Newsize, _Value_init_tag{});
; 1656 :     }

  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 04 00	 ret	 4
?resize@?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ PROC ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::~vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 71		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 12		 je	 SHORT $LN8@vector
$LL9@vector:

; 689  :         _Ptr->~_Uty();

  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	8b ce		 mov	 ecx, esi
  00016	6a 00		 push	 0
  00018	ff 10		 call	 DWORD PTR [eax]

; 947  :         for (; _First != _Last; ++_First) {

  0001a	81 c6 2c 01 00
	00		 add	 esi, 300		; 0000012cH
  00020	3b f3		 cmp	 esi, ebx
  00022	75 ee		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00024	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00027	b8 b5 81 4e 1b	 mov	 eax, 458129845		; 1b4e81b5H
  0002c	8b 37		 mov	 esi, DWORD PTR [edi]
  0002e	2b ce		 sub	 ecx, esi
  00030	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00032	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00033	c1 fa 05	 sar	 edx, 5
  00036	8b c2		 mov	 eax, edx
  00038	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003b	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003d	69 c8 2c 01 00
	00		 imul	 ecx, eax, 300

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00043	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00049	72 12		 jb	 SHORT $LN27@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0004e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00051	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00056	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00059	77 23		 ja	 SHORT $LN24@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0005b	8b f2		 mov	 esi, edx
$LN27@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0005d	51		 push	 ecx
  0005e	56		 push	 esi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00064	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0006d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00074	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0007b	5f		 pop	 edi

; 835  :     }

  0007c	5e		 pop	 esi
  0007d	c3		 ret	 0
$LN24@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007e	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN36@vector:
  00083	cc		 int	 3
??1?$vector@VCSkyObjectQuad@@V?$allocator@VCSkyObjectQuad@@@std@@@std@@QAE@XZ ENDP ; std::vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >::~vector<CSkyObjectQuad,std::allocator<CSkyObjectQuad> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ?deallocate@?$allocator@VCSkyObjectQuad@@@std@@QAEXQAVCSkyObjectQuad@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@VCSkyObjectQuad@@@std@@QAEXQAVCSkyObjectQuad@@I@Z PROC ; std::allocator<CSkyObjectQuad>::deallocate, COMDAT
; _this$ = ecx

; 827  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 828  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");
; 829  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	69 4d 0c 2c 01
	00 00		 imul	 ecx, DWORD PTR __Count$[ebp], 300
  0000a	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00013	72 12		 jb	 SHORT $LN15@deallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00015	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00018	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00020	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00023	77 10		 ja	 SHORT $LN12@deallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00025	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00027	51		 push	 ecx
  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002e	83 c4 08	 add	 esp, 8

; 831  :     }

  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
$LN12@deallocate:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003a	cc		 int	 3
?deallocate@?$allocator@VCSkyObjectQuad@@@std@@QAEXQAVCSkyObjectQuad@@I@Z ENDP ; std::allocator<CSkyObjectQuad>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?DeleteTexture@CSkyObject@@IAEXPAVCGraphicImageInstance@@@Z
_TEXT	SEGMENT
_pImageInstance$ = 8					; size = 4
?DeleteTexture@CSkyObject@@IAEXPAVCGraphicImageInstance@@@Z PROC ; CSkyObject::DeleteTexture, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 193  : 	if (pImageInstance)

  00003	8b 45 08	 mov	 eax, DWORD PTR _pImageInstance$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $LN2@DeleteText

; 194  : 	{
; 195  : 		CGraphicImageInstance::Delete(pImageInstance);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?Delete@CGraphicImageInstance@@SAXPAV1@@Z ; CGraphicImageInstance::Delete
  00010	83 c4 04	 add	 esp, 4
$LN2@DeleteText:

; 196  : 	}
; 197  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?DeleteTexture@CSkyObject@@IAEXPAVCGraphicImageInstance@@@Z ENDP ; CSkyObject::DeleteTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?GenerateTexture@CSkyObject@@IAEPAVCGraphicImageInstance@@PBD@Z
_TEXT	SEGMENT
_szfilename$ = 8					; size = 4
?GenerateTexture@CSkyObject@@IAEPAVCGraphicImageInstance@@PBD@Z PROC ; CSkyObject::GenerateTexture, COMDAT
; _this$ = ecx

; 170  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 171  : 	assert(szfilename != NULL);
; 172  : 
; 173  : 	if (strlen(szfilename) <= 0)
; 174  : 	{
; 175  : 		assert(false);
; 176  : 	}
; 177  : 
; 178  : 	CResource * pResource = CResourceManager::Instance().GetResourcePointer(szfilename);

  00003	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00009	57		 push	 edi
  0000a	ff 75 08	 push	 DWORD PTR _szfilename$[ebp]
  0000d	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  00012	8b f8		 mov	 edi, eax

; 179  : 
; 180  : 	if (!pResource->IsType(CGraphicImage::Type()))

  00014	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  00019	50		 push	 eax
  0001a	8b cf		 mov	 ecx, edi
  0001c	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType
  00021	84 c0		 test	 al, al
  00023	75 07		 jne	 SHORT $LN3@GenerateTe

; 181  : 	{
; 182  : 		assert(false);
; 183  : 		return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	5f		 pop	 edi

; 189  : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
$LN3@GenerateTe:
  0002c	56		 push	 esi

; 184  : 	}
; 185  : 
; 186  : 	CGraphicImageInstance * pImageInstance = CGraphicImageInstance::New();

  0002d	e8 00 00 00 00	 call	 ?New@CGraphicImageInstance@@SAPAV1@XZ ; CGraphicImageInstance::New
  00032	8b f0		 mov	 esi, eax

; 187  : 	pImageInstance->SetImagePointer(static_cast<CGraphicImage *>(pResource));

  00034	57		 push	 edi
  00035	8b ce		 mov	 ecx, esi
  00037	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 188  : 	return (pImageInstance);

  0003c	8b c6		 mov	 eax, esi
  0003e	5e		 pop	 esi
  0003f	5f		 pop	 edi

; 189  : }

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
?GenerateTexture@CSkyObject@@IAEPAVCGraphicImageInstance@@PBD@Z ENDP ; CSkyObject::GenerateTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?StartTransition@CSkyObject@@UAEXXZ
_TEXT	SEGMENT
?StartTransition@CSkyObject@@UAEXXZ PROC		; CSkyObject::StartTransition, COMDAT
; _this$ = ecx

; 201  : }

  00000	c2 00 00	 ret	 0
?StartTransition@CSkyObject@@UAEXXZ ENDP		; CSkyObject::StartTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Update@CSkyObject@@UAEXXZ
_TEXT	SEGMENT
_v3Eye$ = -12						; size = 12
?Update@CSkyObject@@UAEXXZ PROC				; CSkyObject::Update, COMDAT
; _this$ = ecx

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 141  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  00009	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  0000f	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 414  :     return x == v.x && y == v.y && z == v.z;

  00014	f3 0f 10 86 bc
	01 00 00	 movss	 xmm0, DWORD PTR [esi+444]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 141  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  0001c	f3 0f 7e 48 30	 movq	 xmm1, QWORD PTR [eax+48]
  00021	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00024	66 0f d6 4d f4	 movq	 QWORD PTR _v3Eye$[ebp], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 414  :     return x == v.x && y == v.y && z == v.z;

  00029	0f 2e 45 f4	 ucomiss xmm0, DWORD PTR _v3Eye$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 141  : 	D3DXVECTOR3 v3Eye = CCameraManager::Instance().GetCurrentCamera()->GetEye();

  0002d	89 4d fc	 mov	 DWORD PTR _v3Eye$[ebp+8], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 414  :     return x == v.x && y == v.y && z == v.z;

  00030	9f		 lahf
  00031	f6 c4 44	 test	 ah, 68			; 00000044H
  00034	7a 2d		 jp	 SHORT $LN11@Update
  00036	f3 0f 10 86 c0
	01 00 00	 movss	 xmm0, DWORD PTR [esi+448]
  0003e	0f 2e 45 f8	 ucomiss xmm0, DWORD PTR _v3Eye$[ebp+4]
  00042	9f		 lahf
  00043	f6 c4 44	 test	 ah, 68			; 00000044H
  00046	7a 1b		 jp	 SHORT $LN11@Update
  00048	f3 0f 10 86 c4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+452]
  00050	0f 2e 45 fc	 ucomiss xmm0, DWORD PTR _v3Eye$[ebp+8]
  00054	9f		 lahf
  00055	f6 c4 44	 test	 ah, 68			; 00000044H
  00058	7a 09		 jp	 SHORT $LN11@Update
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 144  : 		if (m_bSkyMatrixUpdated == false)

  0005a	80 be f1 01 00
	00 00		 cmp	 BYTE PTR [esi+497], 0
  00061	74 65		 je	 SHORT $LN4@Update
$LN11@Update:

; 145  : 		{
; 146  : 			return;
; 147  : 		}
; 148  : 
; 149  : 	m_v3Position = v3Eye;
; 150  : 
; 151  : 	m_matWorld._41 = m_v3Position.x;
; 152  : 	m_matWorld._42 = m_v3Position.y;
; 153  : 	m_matWorld._43 = m_v3Position.z;
; 154  : 
; 155  : 	m_matWorldCloud._41 = m_v3Position.x;
; 156  : 	m_matWorldCloud._42 = m_v3Position.y;
; 157  : 	m_matWorldCloud._43 = m_v3Position.z + m_fCloudHeight;
; 158  : 
; 159  : 	if (m_bSkyMatrixUpdated)

  00063	80 be f1 01 00
	00 00		 cmp	 BYTE PTR [esi+497], 0
  0006a	66 0f d6 8e bc
	01 00 00	 movq	 QWORD PTR [esi+444], xmm1
  00072	89 8e c4 01 00
	00		 mov	 DWORD PTR [esi+452], ecx
  00078	f3 0f 10 86 c4
	01 00 00	 movss	 xmm0, DWORD PTR [esi+452]
  00080	f3 0f 10 96 bc
	01 00 00	 movss	 xmm2, DWORD PTR [esi+444]
  00088	f3 0f 10 8e c0
	01 00 00	 movss	 xmm1, DWORD PTR [esi+448]
  00090	f3 0f 11 86 74
	01 00 00	 movss	 DWORD PTR [esi+372], xmm0
  00098	f3 0f 58 86 14
	01 00 00	 addss	 xmm0, DWORD PTR [esi+276]
  000a0	f3 0f 11 96 6c
	01 00 00	 movss	 DWORD PTR [esi+364], xmm2
  000a8	f3 0f 11 8e 70
	01 00 00	 movss	 DWORD PTR [esi+368], xmm1
  000b0	f3 0f 11 56 70	 movss	 DWORD PTR [esi+112], xmm2
  000b5	f3 0f 11 4e 74	 movss	 DWORD PTR [esi+116], xmm1
  000ba	f3 0f 11 46 78	 movss	 DWORD PTR [esi+120], xmm0
  000bf	74 07		 je	 SHORT $LN4@Update

; 160  : 	{
; 161  : 		m_bSkyMatrixUpdated = false;

  000c1	c6 86 f1 01 00
	00 00		 mov	 BYTE PTR [esi+497], 0
$LN4@Update:
  000c8	5e		 pop	 esi

; 162  : 	}
; 163  : }

  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
?Update@CSkyObject@@UAEXXZ ENDP				; CSkyObject::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Render@CSkyObject@@UAEXXZ
_TEXT	SEGMENT
?Render@CSkyObject@@UAEXXZ PROC				; CSkyObject::Render, COMDAT
; _this$ = ecx

; 167  : }

  00000	c2 00 00	 ret	 0
?Render@CSkyObject@@UAEXXZ ENDP				; CSkyObject::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Destroy@CSkyObject@@UAEXXZ
_TEXT	SEGMENT
?Destroy@CSkyObject@@UAEXXZ PROC			; CSkyObject::Destroy, COMDAT
; _this$ = ecx

; 137  : }

  00000	c2 00 00	 ret	 0
?Destroy@CSkyObject@@UAEXXZ ENDP			; CSkyObject::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ??1CSkyObject@@UAE@XZ
_TEXT	SEGMENT
??1CSkyObject@@UAE@XZ PROC				; CSkyObject::~CSkyObject, COMDAT
; _this$ = ecx

; 131  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 133  : }

  00004	8d 8f f4 01 00
	00		 lea	 ecx, DWORD PTR [edi+500]
  0000a	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSkyObject@@6B@
  00010	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00015	8b 8f ec 01 00
	00		 mov	 ecx, DWORD PTR [edi+492]
  0001b	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0001e	72 2b		 jb	 SHORT $LN15@CSkyObject
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8b 87 d8 01 00
	00		 mov	 eax, DWORD PTR [edi+472]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00026	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN25@CSkyObject

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 57		 ja	 SHORT $LN22@CSkyObject

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN25@CSkyObject:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN15@CSkyObject:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 133  : }

  0004b	8d b7 34 01 00
	00		 lea	 esi, DWORD PTR [edi+308]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00051	c7 87 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+488], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005b	c7 87 ec 01 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+492], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00065	8b ce		 mov	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00067	c6 87 d8 01 00
	00 00		 mov	 BYTE PTR [edi+472], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  0006e	8b 06		 mov	 eax, DWORD PTR [esi]
  00070	ff 70 04	 push	 DWORD PTR [eax+4]
  00073	56		 push	 esi
  00074	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CGraphicImageInstance *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00079	6a 2c		 push	 44			; 0000002cH
  0007b	ff 36		 push	 DWORD PTR [esi]
  0007d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00082	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 133  : }

  00085	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00088	e8 00 00 00 00	 call	 ??1SSkyObjectFace@CSkyObject@@QAE@XZ
  0008d	8b cf		 mov	 ecx, edi
  0008f	5f		 pop	 edi
  00090	5e		 pop	 esi
  00091	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
$LN22@CSkyObject:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00096	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN61@CSkyObject:
  0009b	cc		 int	 3
??1CSkyObject@@UAE@XZ ENDP				; CSkyObject::~CSkyObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ??0CSkyObject@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSkyObject@@QAE@XZ PROC				; CSkyObject::CSkyObject, COMDAT
; _this$ = ecx

; 116  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CSkyObject@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  00031	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CSkyObject@@6B@
  00037	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003a	0f 11 47 04	 movups	 XMMWORD PTR [edi+4], xmm0

; 4998 :         _My_data._Mysize = 0;

  0003e	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 47 18 0f 00
	00 00		 mov	 DWORD PTR [edi+24], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 47 04 00	 mov	 BYTE PTR [edi+4], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00050	0f 11 47 1c	 movups	 XMMWORD PTR [edi+28], xmm0

; 4998 :         _My_data._Mysize = 0;

  00054	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005b	c7 47 30 0f 00
	00 00		 mov	 DWORD PTR [edi+48], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00062	c6 47 1c 00	 mov	 BYTE PTR [edi+28], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 116  : {

  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0006d	c7 47 34 00 00
	00 00		 mov	 DWORD PTR [edi+52], 0
  00074	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0
  0007b	c7 47 3c 00 00
	00 00		 mov	 DWORD PTR [edi+60], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 116  : {

  00082	8d b7 34 01 00
	00		 lea	 esi, DWORD PTR [edi+308]
  00088	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0008c	6a 2c		 push	 44			; 0000002cH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 116  : {

  0008e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00091	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00097	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0009e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a3	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000a6	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000a8	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000ab	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  000ae	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000b4	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000b6	c7 87 bc 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+444], 0
  000c0	0f 57 c0	 xorps	 xmm0, xmm0

; 305  :     y = fy;

  000c3	c7 87 c0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+448], 0

; 306  :     z = fz;

  000cd	c7 87 c4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+452], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 113  : 	m_fScaleX(1.0f),

  000d7	c7 87 c8 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+456], 1065353216 ; 3f800000H

; 114  : 	m_fScaleY(1.0f),

  000e1	c7 87 cc 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+460], 1065353216 ; 3f800000H

; 115  : 	m_fScaleZ(1.0f)

  000eb	c7 87 d0 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+464], 1065353216 ; 3f800000H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000f5	0f 11 87 d8 01
	00 00		 movups	 XMMWORD PTR [edi+472], xmm0

; 4998 :         _My_data._Mysize = 0;

  000fc	c7 87 e8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+488], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00106	c7 87 ec 01 00
	00 0f 00 00 00	 mov	 DWORD PTR [edi+492], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00110	c6 87 d8 01 00
	00 00		 mov	 BYTE PTR [edi+472], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 116  : {

  00117	8d 8f f4 01 00
	00		 lea	 ecx, DWORD PTR [edi+500]
  0011d	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00121	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00126	c7 87 74 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+372], 0
  00130	c7 87 70 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+368], 0
  0013a	c7 87 6c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+364], 0
  00144	c7 87 68 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+360], 0
  0014e	c7 87 60 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+352], 0
  00158	c7 87 5c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+348], 0
  00162	c7 87 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+344], 0
  0016c	c7 87 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+340], 0
  00176	c7 87 4c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+332], 0
  00180	c7 87 48 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+328], 0
  0018a	c7 87 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+324], 0
  00194	c7 87 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+320], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0019e	c7 87 78 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+376], 1065353216 ; 3f800000H
  001a8	c7 87 64 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+356], 1065353216 ; 3f800000H
  001b2	c7 87 50 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+336], 1065353216 ; 3f800000H
  001bc	c7 87 3c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+316], 1065353216 ; 3f800000H

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  001c6	c7 87 b4 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+436], 0
  001d0	c7 87 b0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+432], 0
  001da	c7 87 ac 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+428], 0
  001e4	c7 87 a8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+424], 0
  001ee	c7 87 a0 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+416], 0
  001f8	c7 87 9c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+412], 0
  00202	c7 87 98 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+408], 0
  0020c	c7 87 94 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+404], 0
  00216	c7 87 8c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+396], 0
  00220	c7 87 88 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+392], 0
  0022a	c7 87 84 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+388], 0
  00234	c7 87 80 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+384], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0023e	c7 87 b8 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+440], 1065353216 ; 3f800000H
  00248	c7 87 a4 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+420], 1065353216 ; 3f800000H
  00252	c7 87 90 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+400], 1065353216 ; 3f800000H
  0025c	c7 87 7c 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+380], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 116  : {

  00266	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0026a	c7 87 f8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+248], 0
  00274	c7 87 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+244], 0
  0027e	c7 87 f0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+240], 0
  00288	c7 87 ec 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+236], 0
  00292	c7 87 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+228], 0
  0029c	c7 87 e0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+224], 0
  002a6	c7 87 dc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+220], 0
  002b0	c7 87 d8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+216], 0
  002ba	c7 87 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+208], 0
  002c4	c7 87 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+204], 0
  002ce	c7 87 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+200], 0
  002d8	c7 87 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+196], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  002e2	c7 87 fc 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+252], 1065353216 ; 3f800000H
  002ec	c7 87 e8 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+232], 1065353216 ; 3f800000H
  002f6	c7 87 d4 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+212], 1065353216 ; 3f800000H
  00300	c7 87 c0 00 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+192], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp

; 121  : 	m_dwlastTime = CTimer::Instance().GetCurrentMillisecond();

  0030a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00310	e8 00 00 00 00	 call	 ?GetCurrentMillisecond@CTimer@@QAEKXZ ; CTimer::GetCurrentMillisecond
  00315	89 87 30 01 00
	00		 mov	 DWORD PTR [edi+304], eax

; 122  : 
; 123  : 	m_fCloudPositionU = 0.0f;
; 124  : 	m_fCloudPositionV = 0.0f;
; 125  : 
; 126  : 	m_bTransitionStarted = false;
; 127  : 	m_bSkyMatrixUpdated = false;
; 128  : }

  0031b	8b c7		 mov	 eax, edi
  0031d	c7 87 28 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+296], 0
  00327	c7 87 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+300], 0
  00331	66 c7 87 f0 01
	00 00 00 00	 mov	 WORD PTR [edi+496], 0
  0033a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0033d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00344	59		 pop	 ecx
  00345	5f		 pop	 edi
  00346	5e		 pop	 esi
  00347	8b e5		 mov	 esp, ebp
  00349	5d		 pop	 ebp
  0034a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSkyObject@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CSkyObject@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1SSkyObjectFace@CSkyObject@@QAE@XZ
__unwindfunclet$??0CSkyObject@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 34 01 00
	00		 add	 ecx, 308		; 00000134H
  0001c	e9 00 00 00 00	 jmp	 ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCGraphicImageInstance@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0CSkyObject@@QAE@XZ$3:
  00021	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	81 c1 d8 01 00
	00		 add	 ecx, 472		; 000001d8H
  0002a	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CSkyObject@@QAE@XZ$4:
  0002f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	81 c1 f4 01 00
	00		 add	 ecx, 500		; 000001f4H
  00038	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
__ehhandler$??0CSkyObject@@QAE@XZ:
  00042	90		 npad	 1
  00043	90		 npad	 1
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0004e	33 c8		 xor	 ecx, eax
  00050	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00055	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CSkyObject@@QAE@XZ
  0005a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CSkyObject@@QAE@XZ ENDP				; CSkyObject::CSkyObject
; Function compile flags: /Ogtp
;	COMDAT ??_GCSkyObjectQuad@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSkyObjectQuad@@UAEPAXI@Z PROC			; CSkyObjectQuad::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CSkyObjectQuad@@UAE@XZ ; CSkyObjectQuad::~CSkyObjectQuad
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 2c 01 00 00	 push	 300			; 0000012cH
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCSkyObjectQuad@@UAEPAXI@Z ENDP			; CSkyObjectQuad::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Render@CSkyObjectQuad@@QAEXXZ
_TEXT	SEGMENT
?Render@CSkyObjectQuad@@QAEXXZ PROC			; CSkyObjectQuad::Render, COMDAT
; _this$ = ecx

; 101  : 	if (CGraphicBase::SetPDTStream(m_Vertex, 4))

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	6a 04		 push	 4
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ?SetPDTStream@CGraphicBase@@SA_NPAUSPDTVertex@@I@Z ; CGraphicBase::SetPDTStream
  0000b	83 c4 08	 add	 esp, 8
  0000e	84 c0		 test	 al, al
  00010	74 11		 je	 SHORT $LN2@Render

; 102  : 	{
; 103  : 		STATEMANAGER.DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

  00012	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00018	6a 02		 push	 2
  0001a	6a 00		 push	 0
  0001c	6a 05		 push	 5
  0001e	e8 00 00 00 00	 call	 ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
$LN2@Render:

; 104  : 	}
; 105  : 	//STATEMANAGER.DrawIndexedPrimitiveUP(D3DPT_TRIANGLESTRIP, 0, 4, 2, m_Indices, D3DFMT_INDEX16, &m_Vertex, sizeof(TPDTVertex));
; 106  : }

  00023	c3		 ret	 0
?Render@CSkyObjectQuad@@QAEXXZ ENDP			; CSkyObjectQuad::Render
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Update@CSkyObjectQuad@@QAE_NXZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
tv339 = -4						; size = 4
?Update@CSkyObjectQuad@@QAE_NXZ PROC			; CSkyObjectQuad::Update, COMDAT
; _this$ = ecx

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b c1		 mov	 eax, ecx

; 90   : 	bool bResult = false;
; 91   : 	for (unsigned char uci = 0; uci < 4; ++uci)

  00009	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR tv339[ebp], 4
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  00015	32 db		 xor	 bl, bl
  00017	8d 78 64	 lea	 edi, DWORD PTR [eax+100]
  0001a	8d 70 6c	 lea	 esi, DWORD PTR [eax+108]
  0001d	0f 1f 00	 npad	 3
$LL4@Update:

; 92   : 	{
; 93   : 		bResult = m_Helper[uci].Update() || bResult;

  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?Update@CColorTransitionHelper@@QAE_NXZ ; CColorTransitionHelper::Update
  00027	84 c0		 test	 al, al
  00029	75 04		 jne	 SHORT $LN6@Update
  0002b	84 db		 test	 bl, bl
  0002d	74 02		 je	 SHORT $LN7@Update
$LN6@Update:
  0002f	b3 01		 mov	 bl, 1
$LN7@Update:

; 94   : 		m_Vertex[m_Indices[uci]].diffuse = m_Helper[uci].GetCurColor();

  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?GetCurColor@CColorTransitionHelper@@QAEABKXZ ; CColorTransitionHelper::GetCurColor
  00038	8b 55 f8	 mov	 edx, DWORD PTR _this$1$[ebp]
  0003b	83 c6 30	 add	 esi, 48			; 00000030H
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00043	83 c7 02	 add	 edi, 2
  00046	83 6d fc 01	 sub	 DWORD PTR tv339[ebp], 1
  0004a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0004d	89 4c c2 10	 mov	 DWORD PTR [edx+eax*8+16], ecx
  00051	75 cd		 jne	 SHORT $LL4@Update

; 95   : 	}
; 96   : 	return bResult;

  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	8a c3		 mov	 al, bl
  00057	5b		 pop	 ebx

; 97   : }

  00058	8b e5		 mov	 esp, ebp
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
?Update@CSkyObjectQuad@@QAE_NXZ ENDP			; CSkyObjectQuad::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?StartTransition@CSkyObjectQuad@@QAEXXZ
_TEXT	SEGMENT
?StartTransition@CSkyObjectQuad@@QAEXXZ PROC		; CSkyObjectQuad::StartTransition, COMDAT
; _this$ = ecx

; 81   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 82   : 	for (unsigned char uci = 0; uci < 4; ++uci)

  00002	8d 71 6c	 lea	 esi, DWORD PTR [ecx+108]
  00005	bf 04 00 00 00	 mov	 edi, 4
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL4@StartTrans:

; 83   : 	{
; 84   : 		m_Helper[uci].StartTransition();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?StartTransition@CColorTransitionHelper@@QAEXXZ ; CColorTransitionHelper::StartTransition
  00017	83 c6 30	 add	 esi, 48			; 00000030H
  0001a	83 ef 01	 sub	 edi, 1
  0001d	75 f1		 jne	 SHORT $LL4@StartTrans

; 85   : 	}
; 86   : }

  0001f	5f		 pop	 edi
  00020	5e		 pop	 esi
  00021	c3		 ret	 0
?StartTransition@CSkyObjectQuad@@QAEXXZ ENDP		; CSkyObjectQuad::StartTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z
_TEXT	SEGMENT
_c_rucNumVertex$ = 8					; size = 4
_c_rPDTVertex$ = 12					; size = 4
?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z PROC ; CSkyObjectQuad::SetVertex, COMDAT
; _this$ = ecx

; 72   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   : 	if (c_rucNumVertex > 3)

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumVertex$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	3c 03		 cmp	 al, 3
  0000a	77 22		 ja	 SHORT $LN1@SetVertex

; 74   : 	{
; 75   : 		return;
; 76   : 	}
; 77   : 	memcpy (&m_Vertex[m_Indices[c_rucNumVertex]], &c_rPDTVertex, sizeof(TPDTVertex));

  0000c	0f b6 c0	 movzx	 eax, al
  0000f	0f b7 44 41 64	 movzx	 eax, WORD PTR [ecx+eax*2+100]
  00014	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00017	8d 0c c1	 lea	 ecx, DWORD PTR [ecx+eax*8]
  0001a	8b 45 0c	 mov	 eax, DWORD PTR _c_rPDTVertex$[ebp]
  0001d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00020	0f 11 41 04	 movups	 XMMWORD PTR [ecx+4], xmm0
  00024	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00029	66 0f d6 41 14	 movq	 QWORD PTR [ecx+20], xmm0
$LN1@SetVertex:

; 78   : }

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
?SetVertex@CSkyObjectQuad@@QAEXABEABUSPDTVertex@@@Z ENDP ; CSkyObjectQuad::SetVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z
_TEXT	SEGMENT
_c_rucNumVertex$ = 8					; size = 4
_c_rfRed$ = 12						; size = 4
_c_rfGreen$ = 16					; size = 4
_c_rfBlue$ = 20						; size = 4
_c_rfAlpha$ = 24					; size = 4
_dwDuration$ = 28					; size = 4
?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z PROC	; CSkyObjectQuad::SetTransition, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 64   : 	if (c_rucNumVertex > 3)

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumVertex$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	3c 03		 cmp	 al, 3
  0000a	77 23		 ja	 SHORT $LN1@SetTransit

; 65   : 	{
; 66   : 		return;
; 67   : 	}
; 68   : 	m_Helper[c_rucNumVertex].SetTransition(c_rfRed, c_rfGreen, c_rfBlue, c_rfAlpha, dwDuration);

  0000c	8d 55 1c	 lea	 edx, DWORD PTR _dwDuration$[ebp]
  0000f	0f b6 c0	 movzx	 eax, al
  00012	52		 push	 edx
  00013	ff 75 18	 push	 DWORD PTR _c_rfAlpha$[ebp]
  00016	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00019	ff 75 14	 push	 DWORD PTR _c_rfBlue$[ebp]
  0001c	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001f	ff 75 10	 push	 DWORD PTR _c_rfGreen$[ebp]
  00022	c1 e0 04	 shl	 eax, 4
  00025	ff 75 0c	 push	 DWORD PTR _c_rfRed$[ebp]
  00028	03 c8		 add	 ecx, eax
  0002a	e8 00 00 00 00	 call	 ?SetTransition@CColorTransitionHelper@@QAEXABM000ABK@Z ; CColorTransitionHelper::SetTransition
$LN1@SetTransit:

; 69   : }

  0002f	5d		 pop	 ebp
  00030	c2 18 00	 ret	 24			; 00000018H
?SetTransition@CSkyObjectQuad@@QAEXABEABM111K@Z ENDP	; CSkyObjectQuad::SetTransition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z
_TEXT	SEGMENT
_c_rucNumVertex$ = 8					; size = 4
_c_rfRed$ = 12						; size = 4
_c_rfGreen$ = 16					; size = 4
_c_rfBlue$ = 20						; size = 4
_c_rfAlpha$ = 24					; size = 4
?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z PROC	; CSkyObjectQuad::SetSrcColor, COMDAT
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 50   : 	if (c_rucNumVertex > 3)

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumVertex$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	3c 03		 cmp	 al, 3
  0000a	77 1f		 ja	 SHORT $LN1@SetSrcColo

; 51   : 	{
; 52   : 		return;
; 53   : 	}
; 54   : 	m_Helper[c_rucNumVertex].SetSrcColor(c_rfRed, c_rfGreen, c_rfBlue, c_rfAlpha);

  0000c	ff 75 18	 push	 DWORD PTR _c_rfAlpha$[ebp]
  0000f	0f b6 c0	 movzx	 eax, al
  00012	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00015	ff 75 14	 push	 DWORD PTR _c_rfBlue$[ebp]
  00018	ff 75 10	 push	 DWORD PTR _c_rfGreen$[ebp]
  0001b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001e	ff 75 0c	 push	 DWORD PTR _c_rfRed$[ebp]
  00021	c1 e0 04	 shl	 eax, 4
  00024	03 c8		 add	 ecx, eax
  00026	e8 00 00 00 00	 call	 ?SetSrcColor@CColorTransitionHelper@@QAEXABM000@Z ; CColorTransitionHelper::SetSrcColor
$LN1@SetSrcColo:

; 55   : }

  0002b	5d		 pop	 ebp
  0002c	c2 14 00	 ret	 20			; 00000014H
?SetSrcColor@CSkyObjectQuad@@QAEXABEABM111@Z ENDP	; CSkyObjectQuad::SetSrcColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ?Clear@CSkyObjectQuad@@QAEXABEABM111@Z
_TEXT	SEGMENT
_c_rucNumVertex$ = 8					; size = 4
_c_rfRed$ = 12						; size = 4
_c_rfGreen$ = 16					; size = 4
_c_rfBlue$ = 20						; size = 4
_c_rfAlpha$ = 24					; size = 4
?Clear@CSkyObjectQuad@@QAEXABEABM111@Z PROC		; CSkyObjectQuad::Clear, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 37   : 	if (c_rucNumVertex > 3)

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rucNumVertex$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	3c 03		 cmp	 al, 3
  0000a	77 1f		 ja	 SHORT $LN1@Clear

; 38   : 	{
; 39   : 		return;
; 40   : 	}
; 41   : 	m_Helper[c_rucNumVertex].Clear(c_rfRed, c_rfGreen, c_rfBlue, c_rfAlpha);

  0000c	ff 75 18	 push	 DWORD PTR _c_rfAlpha$[ebp]
  0000f	0f b6 c0	 movzx	 eax, al
  00012	83 c1 6c	 add	 ecx, 108		; 0000006cH
  00015	ff 75 14	 push	 DWORD PTR _c_rfBlue$[ebp]
  00018	ff 75 10	 push	 DWORD PTR _c_rfGreen$[ebp]
  0001b	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0001e	ff 75 0c	 push	 DWORD PTR _c_rfRed$[ebp]
  00021	c1 e0 04	 shl	 eax, 4
  00024	03 c8		 add	 ecx, eax
  00026	e8 00 00 00 00	 call	 ?Clear@CColorTransitionHelper@@QAEXABM000@Z ; CColorTransitionHelper::Clear
$LN1@Clear:

; 42   : }

  0002b	5d		 pop	 ebp
  0002c	c2 14 00	 ret	 20			; 00000014H
?Clear@CSkyObjectQuad@@QAEXABEABM111@Z ENDP		; CSkyObjectQuad::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ??1CSkyObjectQuad@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CSkyObjectQuad@@UAE@XZ PROC				; CSkyObjectQuad::~CSkyObjectQuad, COMDAT
; _this$ = ecx

; 28   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CSkyObjectQuad@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 29   : }

  00022	68 00 00 00 00	 push	 OFFSET ??1CColorTransitionHelper@@QAE@XZ ; CColorTransitionHelper::~CColorTransitionHelper
  00027	6a 04		 push	 4
  00029	6a 30		 push	 48			; 00000030H
  0002b	8d 41 6c	 lea	 eax, DWORD PTR [ecx+108]
  0002e	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CSkyObjectQuad@@6B@
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CSkyObjectQuad@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CSkyObjectQuad@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CSkyObjectQuad@@UAE@XZ ENDP				; CSkyObjectQuad::~CSkyObjectQuad
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\SkyBox.cpp
;	COMDAT ??0CSkyObjectQuad@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSkyObjectQuad@@QAE@XZ PROC				; CSkyObjectQuad::CSkyObjectQuad, COMDAT
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	68 00 00 00 00	 push	 OFFSET ??1CColorTransitionHelper@@QAE@XZ ; CColorTransitionHelper::~CColorTransitionHelper
  0000a	8b f1		 mov	 esi, ecx
  0000c	68 00 00 00 00	 push	 OFFSET ??0CColorTransitionHelper@@QAE@XZ ; CColorTransitionHelper::CColorTransitionHelper
  00011	6a 04		 push	 4
  00013	6a 30		 push	 48			; 00000030H
  00015	8d 46 6c	 lea	 eax, DWORD PTR [esi+108]
  00018	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0001b	50		 push	 eax
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CSkyObjectQuad@@6B@
  00022	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00027	6a 60		 push	 96			; 00000060H
  00029	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 15   : 	// Index buffer
; 16   : 	m_Indices[0] = 0;

  0002c	c7 46 64 00 00
	02 00		 mov	 DWORD PTR [esi+100], 131072 ; 00020000H
  00033	6a 00		 push	 0
  00035	50		 push	 eax

; 17   : 	m_Indices[1] = 2;
; 18   : 	m_Indices[2] = 1;

  00036	c7 46 68 01 00
	03 00		 mov	 DWORD PTR [esi+104], 196609 ; 00030001H
  0003d	e8 00 00 00 00	 call	 _memset
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH

; 19   : 	m_Indices[3] = 3;
; 20   : 
; 21   : 	for (unsigned char uci = 0; uci < 4; ++uci)
; 22   : 	{
; 23   : 		memset(&m_Vertex[uci], 0, sizeof(TPDTVertex));
; 24   : 	}
; 25   : }

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??0CSkyObjectQuad@@QAE@XZ ENDP				; CSkyObjectQuad::CSkyObjectQuad
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SPDTVertex@@QAE@XZ
_TEXT	SEGMENT
??0SPDTVertex@@QAE@XZ PROC				; SPDTVertex::SPDTVertex, COMDAT
; _this$ = ecx
  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0SPDTVertex@@QAE@XZ ENDP				; SPDTVertex::SPDTVertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXVECTOR2@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR2@@QAE@XZ PROC				; D3DXVECTOR2::D3DXVECTOR2, COMDAT
; _this$ = ecx

; 91   :     D3DXVECTOR2() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR2@@QAE@XZ ENDP				; D3DXVECTOR2::D3DXVECTOR2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3357 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]

; 3357 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 415  :             return __builtin_strlen(_First);

  0000b	8b f2		 mov	 esi, edx

; 3357 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

  0000d	8b d9		 mov	 ebx, ecx
  0000f	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  00010	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL64@operator:
  00013	8a 06		 mov	 al, BYTE PTR [esi]
  00015	46		 inc	 esi
  00016	84 c0		 test	 al, al
  00018	75 f9		 jne	 SHORT $LL64@operator
  0001a	2b f1		 sub	 esi, ecx

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0001c	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]
  0001f	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00022	3b f1		 cmp	 esi, ecx
  00024	77 26		 ja	 SHORT $LN8@operator

; 2283 :         value_type* _Result = _Bx._Buf;

  00026	8b fb		 mov	 edi, ebx

; 2301 :         return _BUF_SIZE <= _Myres;

  00028	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002b	72 02		 jb	 SHORT $LN11@operator

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002d	8b 3b		 mov	 edi, DWORD PTR [ebx]
$LN11@operator:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0002f	56		 push	 esi
  00030	52		 push	 edx
  00031	57		 push	 edi

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00032	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0003d	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 3358 :         return assign(_Ptr);

  00041	8b c3		 mov	 eax, ebx
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx

; 3359 :     }

  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN8@operator:

; 4903 :         if (_New_size > max_size()) {

  0004c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00052	0f 87 d4 00 00
	00		 ja	 $LN68@operator

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00058	8b fe		 mov	 edi, esi
  0005a	83 cf 0f	 or	 edi, 15			; 0000000fH
  0005d	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00063	76 15		 jbe	 SHORT $LN25@operator

; 4885 :             return _Max;

  00065	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0006a	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00075	83 c4 04	 add	 esp, 4
  00078	eb 52		 jmp	 SHORT $LN66@operator
$LN25@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007a	8b d1		 mov	 edx, ecx
  0007c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00081	d1 ea		 shr	 edx, 1
  00083	2b c2		 sub	 eax, edx
  00085	3b c8		 cmp	 ecx, eax
  00087	76 15		 jbe	 SHORT $LN26@operator

; 4889 :             return _Max;

  00089	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0008e	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00099	83 c4 04	 add	 esp, 4
  0009c	eb 2e		 jmp	 SHORT $LN66@operator
$LN26@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0009e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000a1	3b f8		 cmp	 edi, eax
  000a3	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a6	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a9	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ae	72 0b		 jb	 SHORT $LN33@operator

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b6	83 c4 04	 add	 esp, 4
  000b9	eb 11		 jmp	 SHORT $LN66@operator
$LN33@operator:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000bb	85 c0		 test	 eax, eax
  000bd	74 0b		 je	 SHORT $LN34@operator

; 77   :         return ::operator new(_Bytes);

  000bf	50		 push	 eax
  000c0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c5	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c8	eb 02		 jmp	 SHORT $LN66@operator
$LN34@operator:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000ca	33 c0		 xor	 eax, eax
$LN66@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	56		 push	 esi
  000cd	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000d0	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d3	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000d4	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000d7	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000da	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000df	8b 7d fc	 mov	 edi, DWORD PTR $T2[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000e5	8b 45 f8	 mov	 eax, DWORD PTR $T1[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000e8	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000ec	83 f8 10	 cmp	 eax, 16			; 00000010H
  000ef	72 29		 jb	 SHORT $LN19@operator

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000f1	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000f4	8b 03		 mov	 eax, DWORD PTR [ebx]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fc	72 12		 jb	 SHORT $LN56@operator

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000fe	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00101	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00104	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00106	83 c0 fc	 add	 eax, -4			; fffffffcH
  00109	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010c	77 19		 ja	 SHORT $LN53@operator

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0010e	8b c2		 mov	 eax, edx
$LN56@operator:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00110	51		 push	 ecx
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00117	83 c4 08	 add	 esp, 8
$LN19@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3539 :         return _Reallocate_for(

  0011a	89 3b		 mov	 DWORD PTR [ebx], edi

; 3358 :         return assign(_Ptr);

  0011c	8b c3		 mov	 eax, ebx
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx

; 3359 :     }

  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 04 00	 ret	 4
$LN53@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00127	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN68@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  0012c	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN65@operator:
  00131	cc		 int	 3
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2674 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 415  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2740 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memmove

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00054	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4885 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN42@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN42@basic_stri
$LN30@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN42@basic_stri
$LN31@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN42@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN40@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2626 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00010	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00013	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00021	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00025	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  00028	72 05		 jb	 SHORT $LN12@basic_stri

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN12@basic_stri:

; 2740 :         if (_Count > max_size()) {

  0002f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00035	0f 87 9d 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00042	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00045	73 17		 jae	 SHORT $LN18@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00047	6a 10		 push	 16			; 00000010H
  00049	50		 push	 eax
  0004a	57		 push	 edi

; 2749 :             _My_data._Mysize = _Count;

  0004b	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004e	e8 00 00 00 00	 call	 _memmove
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 :     }

  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi
  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN18@basic_stri:
  0005e	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005f	8b f3		 mov	 esi, ebx
  00061	83 ce 0f	 or	 esi, 15			; 0000000fH
  00064	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 17		 jbe	 SHORT $LN25@basic_stri

; 4885 :             return _Max;

  0006c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00071	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007c	83 c4 04	 add	 esp, 4
  0007f	8b c8		 mov	 ecx, eax
  00081	eb 34		 jmp	 SHORT $LN32@basic_stri
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00083	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00088	3b f0		 cmp	 esi, eax
  0008a	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00095	72 0d		 jb	 SHORT $LN33@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b c8		 mov	 ecx, eax
  000a2	eb 13		 jmp	 SHORT $LN32@basic_stri
$LN33@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0d		 je	 SHORT $LN34@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	8b c8		 mov	 ecx, eax
  000b3	eb 02		 jmp	 SHORT $LN32@basic_stri
$LN34@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b5	33 c9		 xor	 ecx, ecx
$LN32@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b7	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000ba	89 0f		 mov	 DWORD PTR [edi], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax
  000bd	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]

; 2781 :         _My_data._Mysize = _Count;

  000c0	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	51		 push	 ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  000c4	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	e8 00 00 00 00	 call	 _memcpy
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 :     }

  000cf	8b c7		 mov	 eax, edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d1	5e		 pop	 esi

; 2628 :     }

  000d2	5f		 pop	 edi
  000d3	5b		 pop	 ebx
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000d8	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN42@basic_stri:
  000dd	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
