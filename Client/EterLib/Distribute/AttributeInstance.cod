; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\AttributeInstance.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_7?$CDynamicPool@VCAttributeInstance@@@@6B@	; CDynamicPool<CAttributeInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z ; CDynamicPool<CAttributeInstance>::`scalar deleting destructor'
PUBLIC	??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@	; CDynamicPool<CAttributeInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8 ; CDynamicPool<CAttributeInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCAttributeInstance@@@@8	; CDynamicPool<CAttributeInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCAttributeInstance@@@@8	; CDynamicPool<CAttributeInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8 ; CDynamicPool<CAttributeInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_E?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CAttributeInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8 ; CDynamicPool<CAttributeInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCAttributeInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCAttributeInstance@@@@8 ; CDynamicPool<CAttributeInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCAttributeInstance@@@@8 DD 00H	; CDynamicPool<CAttributeInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CAttributeInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCAttributeInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@ DD 00H	; CDynamicPool<CAttributeInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCAttributeInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCAttributeInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_7?$CDynamicPool@VCAttributeInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCAttributeInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCAttributeInstance@@@@6B@ ; CDynamicPool<CAttributeInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
PUBLIC	??0CAttributeInstance@@QAE@XZ			; CAttributeInstance::CAttributeInstance
PUBLIC	??1CAttributeInstance@@UAE@XZ			; CAttributeInstance::~CAttributeInstance
PUBLIC	?Clear@CAttributeInstance@@QAEXXZ		; CAttributeInstance::Clear
PUBLIC	?IsEmpty@CAttributeInstance@@QBEHXZ		; CAttributeInstance::IsEmpty
PUBLIC	?GetDataFileName@CAttributeInstance@@QBEPBDXZ	; CAttributeInstance::GetDataFileName
PUBLIC	?SetObjectPointer@CAttributeInstance@@QAEXPAVCAttributeData@@@Z ; CAttributeInstance::SetObjectPointer
PUBLIC	?RefreshObject@CAttributeInstance@@QAEXABUD3DXMATRIX@@@Z ; CAttributeInstance::RefreshObject
PUBLIC	?GetObjectPointer@CAttributeInstance@@QBEPAVCAttributeData@@XZ ; CAttributeInstance::GetObjectPointer
PUBLIC	?Picking@CAttributeInstance@@QAE_NABUD3DXVECTOR3@@0AAM1@Z ; CAttributeInstance::Picking
PUBLIC	?IsInHeight@CAttributeInstance@@QAEHMM@Z	; CAttributeInstance::IsInHeight
PUBLIC	?GetHeight@CAttributeInstance@@QAEHMMPAM@Z	; CAttributeInstance::GetHeight
PUBLIC	??1?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::~vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
PUBLIC	?_Xlength@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Xlength
PUBLIC	?CreateSystem@CAttributeInstance@@SAXI@Z	; CAttributeInstance::CreateSystem
PUBLIC	?DestroySystem@CAttributeInstance@@SAXXZ	; CAttributeInstance::DestroySystem
PUBLIC	?New@CAttributeInstance@@SAPAV1@XZ		; CAttributeInstance::New
PUBLIC	?Delete@CAttributeInstance@@SAXPAV1@@Z		; CAttributeInstance::Delete
PUBLIC	??_GCAttributeInstance@@UAEPAXI@Z		; CAttributeInstance::`scalar deleting destructor'
PUBLIC	??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ	; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
PUBLIC	?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z ; CDynamicPool<CAttributeInstance>::Delete
PUBLIC	?_Reallocate_exactly@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXI@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Reallocate_exactly
PUBLIC	?_Change_array@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXQAPAVCAttributeInstance@@II@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Change_array
PUBLIC	?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
PUBLIC	??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@PAV10@IAAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
PUBLIC	??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A ; CAttributeInstance::ms_kPool
PUBLIC	??_7CAttributeInstance@@6B@			; CAttributeInstance::`vftable'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CAttributeInstance@@6B@			; CAttributeInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAttributeInstance@@@8			; CAttributeInstance `RTTI Type Descriptor'
PUBLIC	??_R3CAttributeInstance@@8			; CAttributeInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAttributeInstance@@8			; CAttributeInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAttributeInstance@@8		; CAttributeInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?AddReference@CReferenceObject@@QAEXXZ:PROC	; CReferenceObject::AddReference
EXTRN	?Release@CReferenceObject@@QAEXXZ:PROC		; CReferenceObject::Release
EXTRN	?GetHeightDataCount@CAttributeData@@QBEKXZ:PROC	; CAttributeData::GetHeightDataCount
EXTRN	?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z:PROC ; CAttributeData::GetHeightDataPointer
EXTRN	?GetMaximizeRadius@CAttributeData@@QAEMXZ:PROC	; CAttributeData::GetMaximizeRadius
EXTRN	??_ECAttributeInstance@@UAEPAXI@Z:PROC		; CAttributeInstance::`vector deleting destructor'
EXTRN	?IsInTriangle2D@@YA_NMMMMMMMM@Z:PROC		; IsInTriangle2D
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
CRT$XCU	SEGMENT
??ms_kPool$initializer$@CAttributeInstance@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ; ??ms_kPool$initializer$@CAttributeInstance@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CAttributeInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAttributeInstance@@8 DD FLAT:??_R0?AVCAttributeInstance@@@8 ; CAttributeInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAttributeInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CAttributeInstance@@8
rdata$r	SEGMENT
??_R2CAttributeInstance@@8 DD FLAT:??_R1A@?0A@EA@CAttributeInstance@@8 ; CAttributeInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CAttributeInstance@@8
rdata$r	SEGMENT
??_R3CAttributeInstance@@8 DD 00H			; CAttributeInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CAttributeInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAttributeInstance@@@8
data$rs	SEGMENT
??_R0?AVCAttributeInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CAttributeInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAttributeInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CAttributeInstance@@6B@
rdata$r	SEGMENT
??_R4CAttributeInstance@@6B@ DD 00H			; CAttributeInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAttributeInstance@@@8
	DD	FLAT:??_R3CAttributeInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CAttributeInstance@@6B@
CONST	SEGMENT
??_7CAttributeInstance@@6B@ DD FLAT:??_R4CAttributeInstance@@6B@ ; CAttributeInstance::`vftable'
	DD	FLAT:??_ECAttributeInstance@@UAEPAXI@Z
CONST	ENDS
_DATA	SEGMENT
?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCAttributeInstance@@@@6B@ ; CAttributeInstance::ms_kPool
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CRef@VCAttributeData@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CAttributeInstance@@UAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1CAttributeInstance@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CAttributeInstance@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z PROC ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ENDP ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
tv495 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	8b 13		 mov	 edx, DWORD PTR [ebx]
  00010	2b c2		 sub	 eax, edx
  00012	c1 f8 02	 sar	 eax, 2
  00015	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00020	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00025	0f 84 d2 00 00
	00		 je	 $LN66@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002b	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00031	2b ca		 sub	 ecx, edx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00033	89 7d f8	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00036	c1 f9 02	 sar	 ecx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00039	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003e	8b d1		 mov	 edx, ecx
  00040	d1 ea		 shr	 edx, 1
  00042	2b c2		 sub	 eax, edx
  00044	3b c8		 cmp	 ecx, eax
  00046	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00048	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0004d	be ff ff ff 3f	 mov	 esi, 1073741823		; 3fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00052	50		 push	 eax
  00053	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00058	83 c4 04	 add	 esp, 4
  0005b	8b f8		 mov	 edi, eax
  0005d	eb 44		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00062	8b f7		 mov	 esi, edi
  00064	3b c7		 cmp	 eax, edi
  00066	0f 43 f0	 cmovae	 esi, eax
  00069	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0006f	0f 87 8d 00 00
	00		 ja	 $LN67@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00075	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00081	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00089	83 c4 04	 add	 esp, 4
  0008c	8b f8		 mov	 edi, eax
  0008e	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00090	85 c0		 test	 eax, eax
  00092	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009d	8b f8		 mov	 edi, eax
  0009f	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000a1	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a3	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000a6	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]
  000a9	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000ac	89 4d fc	 mov	 DWORD PTR tv495[ebp], ecx
  000af	8b 00		 mov	 eax, DWORD PTR [eax]
  000b1	89 01		 mov	 DWORD PTR [ecx], eax

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000b3	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  000b6	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  000b9	8b 13		 mov	 edx, DWORD PTR [ebx]
  000bb	3b c1		 cmp	 eax, ecx
  000bd	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bf	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000c1	eb 17		 jmp	 SHORT $LN52@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c3	57		 push	 edi
  000c4	50		 push	 eax
  000c5	52		 push	 edx
  000c6	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000cb	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d1	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	83 c0 04	 add	 eax, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d7	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
$LN52@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000da	50		 push	 eax
  000db	51		 push	 ecx
  000dc	52		 push	 edx
  000dd	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e5	8b cb		 mov	 ecx, ebx
  000e7	56		 push	 esi
  000e8	ff 75 f8	 push	 DWORD PTR __Newsize$1$[ebp]
  000eb	57		 push	 edi
  000ec	e8 00 00 00 00	 call	 ?_Change_array@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXQAPAVCAttributeInstance@@II@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  000f1	8b 45 fc	 mov	 eax, DWORD PTR tv495[ebp]
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5b		 pop	 ebx

; 921  :     }

  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 08 00	 ret	 8
$LN66@Emplace_re:

; 888  :             _Xlength();

  000fd	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
$LN67@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00102	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN64@Emplace_re:
  00107	cc		 int	 3
??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv427 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00012	0f 87 f6 00 00
	00		 ja	 $LN81@Resize_rea

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00018	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00020	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00022	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00024	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00029	d1 fa		 sar	 edx, 1
  0002b	8b ca		 mov	 ecx, edx
  0002d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00030	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00032	8b d1		 mov	 edx, ecx
  00034	d1 ea		 shr	 edx, 1
  00036	2b c2		 sub	 eax, edx
  00038	3b c8		 cmp	 ecx, eax
  0003a	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0003c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00042	89 45 fc	 mov	 DWORD PTR tv427[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00045	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b d8		 mov	 ebx, eax
  0004f	eb 46		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00051	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00054	3b c3		 cmp	 eax, ebx
  00056	73 1f		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00058	8b c3		 mov	 eax, ebx
$LN77@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0005a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005d	c1 e0 02	 shl	 eax, 2
  00060	89 45 fc	 mov	 DWORD PTR tv427[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00063	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00068	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00070	83 c4 04	 add	 esp, 4
  00073	8b d8		 mov	 ebx, eax
  00075	eb 20		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00077	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0007c	0f 87 91 00 00
	00		 ja	 $LN82@Resize_rea
  00082	eb d6		 jmp	 SHORT $LN77@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  00084	85 c0		 test	 eax, eax
  00086	74 0d		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00091	8b d8		 mov	 ebx, eax
  00093	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00095	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00097	53		 push	 ebx
  00098	ff 77 04	 push	 DWORD PTR [edi+4]
  0009b	ff 37		 push	 DWORD PTR [edi]
  0009d	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000a2	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000a7	85 f6		 test	 esi, esi
  000a9	74 3f		 je	 SHORT $LN59@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ab	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ae	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000b3	2b ce		 sub	 ecx, esi
  000b5	f7 e9		 imul	 ecx
  000b7	d1 fa		 sar	 edx, 1
  000b9	8b c2		 mov	 eax, edx
  000bb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000be	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c3	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000cc	72 12		 jb	 SHORT $LN69@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ce	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000d1	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d4	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d6	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000d9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000dc	77 2b		 ja	 SHORT $LN66@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000de	8b f2		 mov	 esi, edx
$LN69@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000e0	51		 push	 ecx
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e7	83 c4 08	 add	 esp, 8
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  000ea	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ed	89 1f		 mov	 DWORD PTR [edi], ebx
  000ef	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000f2	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000f5	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR tv427[ebp]
  000fb	03 c3		 add	 eax, ebx
  000fd	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx

; 1611 :     }

  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
$LN66@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00109	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  0010e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN82@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00113	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN79@Resize_rea:
  00118	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@PAV10@IAAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@PAV10@IAAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	56		 push	 esi

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00007	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  0000a	85 c0		 test	 eax, eax
  0000c	74 1e		 je	 SHORT $LN3@Uninitiali
  0000e	66 90		 npad	 2
$LL4@Uninitiali:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00016	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00024	83 c6 0c	 add	 esi, 12			; 0000000cH

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00027	83 e8 01	 sub	 eax, 1
  0002a	75 e4		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0002c	ff 75 10	 push	 DWORD PTR __Al$[ebp]
  0002f	56		 push	 esi
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
  00036	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  00039	8b c6		 mov	 eax, esi
  0003b	5e		 pop	 esi

; 1907 : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@PAV10@IAAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -16						; size = 4
__Oldsize$1$ = -12					; size = 4
tv638 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 1575 :         if (_Newsize > max_size()) {

  00009	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
  00011	81 ff 55 55 55
	15		 cmp	 edi, 357913941		; 15555555H
  00017	0f 87 7a 01 00
	00		 ja	 $LN85@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00020	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00025	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00027	f7 e9		 imul	 ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00029	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002c	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002e	d1 fa		 sar	 edx, 1
  00030	8b c2		 mov	 eax, edx
  00032	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00035	03 c2		 add	 eax, edx
  00037	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003f	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00041	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00046	d1 fa		 sar	 edx, 1
  00048	8b ca		 mov	 ecx, edx
  0004a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004d	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004f	8b d1		 mov	 edx, ecx
  00051	d1 ea		 shr	 edx, 1
  00053	2b c2		 sub	 eax, edx
  00055	3b c8		 cmp	 ecx, eax
  00057	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  00059	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005e	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0005f	89 45 f8	 mov	 DWORD PTR tv638[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	8b f0		 mov	 esi, eax
  0006c	eb 49		 jmp	 SHORT $LN83@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0006e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00071	3b c7		 cmp	 eax, edi
  00073	73 1f		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00075	8b c7		 mov	 eax, edi
$LN80@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00077	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0007a	c1 e0 02	 shl	 eax, 2
  0007d	89 45 f8	 mov	 DWORD PTR tv638[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00080	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00085	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008d	83 c4 04	 add	 esp, 4
  00090	8b f0		 mov	 esi, eax
  00092	eb 23		 jmp	 SHORT $LN83@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00094	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00099	0f 87 fd 00 00
	00		 ja	 $LN86@Resize_rea
  0009f	eb d6		 jmp	 SHORT $LN80@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000a1	85 c0		 test	 eax, eax
  000a3	74 10		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ab	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ae	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000b1	8b f0		 mov	 esi, eax
  000b3	eb 05		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b5	33 f6		 xor	 esi, esi
$LN83@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000b7	89 75 fc	 mov	 DWORD PTR $T2[ebp], esi
$LN21@Resize_rea:
  000ba	8b 4d f4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  000bd	8b c7		 mov	 eax, edi
  000bf	2b c1		 sub	 eax, ecx
  000c1	53		 push	 ebx
  000c2	50		 push	 eax
  000c3	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000c6	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  000c9	50		 push	 eax
  000ca	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@PAV10@IAAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000cf	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 835  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000d5	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  000d7	8b fe		 mov	 edi, esi

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000d9	3b c1		 cmp	 eax, ecx
  000db	74 34		 je	 SHORT $LN30@Resize_rea
  000dd	8b d9		 mov	 ebx, ecx
  000df	90		 npad	 1
$LL31@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  000e0	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000e3	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  000e8	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  000ef	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  000f6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000fc	83 c0 0c	 add	 eax, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  000ff	89 0f		 mov	 DWORD PTR [edi], ecx
  00101	89 57 04	 mov	 DWORD PTR [edi+4], edx
  00104	89 77 08	 mov	 DWORD PTR [edi+8], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00107	83 c7 0c	 add	 edi, 12			; 0000000cH

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0010a	3b c3		 cmp	 eax, ebx
  0010c	75 d2		 jne	 SHORT $LL31@Resize_rea
  0010e	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
$LN30@Resize_rea:

; 1658 :         _Destroy_range(_First, _Last, _Al);

  00111	53		 push	 ebx
  00112	57		 push	 edi
  00113	57		 push	 edi
  00114	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00119	8b 0b		 mov	 ecx, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1658 :         _Destroy_range(_First, _Last, _Al);

  0011b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0011e	85 c9		 test	 ecx, ecx
  00120	74 4e		 je	 SHORT $LN62@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00122	53		 push	 ebx
  00123	ff 73 04	 push	 DWORD PTR [ebx+4]
  00126	51		 push	 ecx
  00127	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >

; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0012c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0012f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00134	8b 33		 mov	 esi, DWORD PTR [ebx]
  00136	83 c4 0c	 add	 esp, 12			; 0000000cH
  00139	2b ce		 sub	 ecx, esi
  0013b	f7 e9		 imul	 ecx
  0013d	d1 fa		 sar	 edx, 1
  0013f	8b c2		 mov	 eax, edx
  00141	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00144	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00146	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00149	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0014c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00152	72 12		 jb	 SHORT $LN72@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00154	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00157	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0015a	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0015c	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0015f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00162	77 2e		 ja	 SHORT $LN69@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00164	8b f2		 mov	 esi, edx
$LN72@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00166	51		 push	 ecx
  00167	56		 push	 esi
  00168	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0016d	83 c4 08	 add	 esp, 8
$LN62@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00170	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00173	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00176	89 0b		 mov	 DWORD PTR [ebx], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00178	5f		 pop	 edi
  00179	5e		 pop	 esi
  0017a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0017d	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00180	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00183	8b 45 f8	 mov	 eax, DWORD PTR tv638[ebp]
  00186	03 c1		 add	 eax, ecx
  00188	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0018b	5b		 pop	 ebx

; 1611 :     }

  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 08 00	 ret	 8
$LN69@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00192	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  00197	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@CAXXZ ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Xlength
$LN86@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0019c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN82@Resize_rea:
  001a1	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >, COMDAT

; 943  : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 947  :         for (; _First != _Last; ++_First) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 62		 je	 SHORT $LN42@Destroy_ra
  0000f	57		 push	 edi
$LL4@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00010	8b 3e		 mov	 edi, DWORD PTR [esi]
  00012	85 ff		 test	 edi, edi
  00014	74 53		 je	 SHORT $LN14@Destroy_ra

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00016	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	2b cf		 sub	 ecx, edi
  00020	f7 e9		 imul	 ecx
  00022	d1 fa		 sar	 edx, 1
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002b	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0002e	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN30@Destroy_ra

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00039	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 2c		 ja	 SHORT $LN27@Destroy_ra

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00049	8b fa		 mov	 edi, edx
$LN30@Destroy_ra:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	57		 push	 edi
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00052	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00058	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0005b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00062	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN14@Destroy_ra:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00069	83 c6 0c	 add	 esi, 12			; 0000000cH
  0006c	3b f3		 cmp	 esi, ebx
  0006e	75 a0		 jne	 SHORT $LL4@Destroy_ra
  00070	5f		 pop	 edi
$LN42@Destroy_ra:
  00071	5e		 pop	 esi

; 948  :             allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 949  :         }
; 950  :     }
; 951  : }

  00072	5b		 pop	 ebx
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN27@Destroy_ra:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00075	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN44@Destroy_ra:
  0007a	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ
text$yd	SEGMENT
??__F?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ PROC ; `dynamic atexit destructor for 'CAttributeInstance::ms_kPool'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A ; CAttributeInstance::ms_kPool
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ ; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
??__F?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'CAttributeInstance::ms_kPool''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ??__E?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ
text$di	SEGMENT
??__E?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ PROC ; `dynamic initializer for 'CAttributeInstance::ms_kPool'', COMDAT

; 6    : CDynamicPool<CAttributeInstance> CAttributeInstance::ms_kPool;

  00000	68 00 00 00 00	 push	 OFFSET ??__F?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ; `dynamic atexit destructor for 'CAttributeInstance::ms_kPool''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__E?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A@@YAXXZ ENDP ; `dynamic initializer for 'CAttributeInstance::ms_kPool''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CAttributeInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ ; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCAttributeInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CAttributeInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXQAPAVCAttributeInstance@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXQAPAVCAttributeInstance@@II@Z PROC ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000f	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2092 :         _Myfirst = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 2096 :     }

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00059	cc		 int	 3
?_Change_array@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXQAPAVCAttributeInstance@@II@Z ENDP ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXI@Z PROC ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1664 :     _CONSTEXPR20 void _Reallocate_exactly(const size_type _Newcapacity) {

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 1665 :         // set capacity to _Newcapacity (without geometric growth), provide strong guarantee
; 1666 :         auto& _Al         = _Getal();
; 1667 :         auto& _My_data    = _Mypair._Myval2;
; 1668 :         pointer& _Myfirst = _My_data._Myfirst;
; 1669 :         pointer& _Mylast  = _My_data._Mylast;
; 1670 : 
; 1671 :         const auto _Size = static_cast<size_type>(_Mylast - _Myfirst);

  0000c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000f	2b 06		 sub	 eax, DWORD PTR [esi]
  00011	c1 f8 02	 sar	 eax, 2
  00014	89 45 fc	 mov	 DWORD PTR __Size$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00017	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  0001d	0f 87 8a 00 00
	00		 ja	 $LN55@Reallocate

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00023	c1 e3 02	 shl	 ebx, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0002c	72 0d		 jb	 SHORT $LN15@Reallocate

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002e	53		 push	 ebx
  0002f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00034	83 c4 04	 add	 esp, 4
  00037	8b f8		 mov	 edi, eax
  00039	eb 13		 jmp	 SHORT $LN14@Reallocate
$LN15@Reallocate:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0003b	85 db		 test	 ebx, ebx
  0003d	74 0d		 je	 SHORT $LN16@Reallocate

; 77   :         return ::operator new(_Bytes);

  0003f	53		 push	 ebx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00048	8b f8		 mov	 edi, eax
  0004a	eb 02		 jmp	 SHORT $LN14@Reallocate
$LN16@Reallocate:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0004c	33 ff		 xor	 edi, edi
$LN14@Reallocate:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0004e	57		 push	 edi
  0004f	ff 76 04	 push	 DWORD PTR [esi+4]
  00052	ff 36		 push	 DWORD PTR [esi]
  00054	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAttributeInstance@@PAPAV1@@std@@YAPAPAVCAttributeInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAttributeInstance * *,CAttributeInstance * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00059	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  0005e	85 c0		 test	 eax, eax
  00060	74 2c		 je	 SHORT $LN39@Reallocate

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00062	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00065	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00067	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 12		 jb	 SHORT $LN49@Reallocate

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00072	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00075	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00078	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00080	77 26		 ja	 SHORT $LN46@Reallocate

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00082	8b c2		 mov	 eax, edx
$LN49@Reallocate:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00084	51		 push	 ecx
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008b	83 c4 08	 add	 esp, 8
$LN39@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0008e	8b 45 fc	 mov	 eax, DWORD PTR __Size$1$[ebp]
  00091	89 3e		 mov	 DWORD PTR [esi], edi
  00093	8d 04 87	 lea	 eax, DWORD PTR [edi+eax*4]
  00096	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00099	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
  0009c	5f		 pop	 edi
  0009d	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a0	5e		 pop	 esi
  000a1	5b		 pop	 ebx

; 1687 :     }

  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
$LN46@Reallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN55@Reallocate:

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000ad	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN53@Reallocate:
  000b2	cc		 int	 3
?_Reallocate_exactly@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z PROC ; CDynamicPool<CAttributeInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCAttributeInstance@@@@KAXPAVCAttributeInstance@@@Z ENDP ; CDynamicPool<CAttributeInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ PROC	; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCAttributeInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCAttributeInstance@@@@UAE@XZ ENDP	; CDynamicPool<CAttributeInstance>::~CDynamicPool<CAttributeInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCAttributeInstance@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCAttributeInstance@@UAEPAXI@Z PROC			; CAttributeInstance::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CAttributeInstance@@UAE@XZ ; CAttributeInstance::~CAttributeInstance
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 5c		 push	 92			; 0000005cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCAttributeInstance@@UAEPAXI@Z ENDP			; CAttributeInstance::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?Delete@CAttributeInstance@@SAXPAV1@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
_pkInst$ = 8						; size = 4
?Delete@CAttributeInstance@@SAXPAV1@@Z PROC		; CAttributeInstance::Delete, COMDAT

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00003	a1 14 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 200  : 	ms_kPool.Free(pkInst);

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _pkInst$[ebp]
  0000b	89 4d 08	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000e	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+24
  00014	74 0b		 je	 SHORT $LN8@Delete

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00016	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00018	83 05 14 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+20, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 201  : }

  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@Delete:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 201  : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?Delete@CAttributeInstance@@SAXPAV1@@Z ENDP		; CAttributeInstance::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?New@CAttributeInstance@@SAPAV1@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 4
_pkNewData$2 = -4					; size = 4
?New@CAttributeInstance@@SAPAV1@XZ PROC			; CAttributeInstance::New, COMDAT

; 194  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00004	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+20
  0000a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00010	75 5c		 jne	 SHORT $LN4@New

; 65   : 			T* pkNewData = new T;

  00012	6a 5c		 push	 92			; 0000005cH
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00019	83 c4 04	 add	 esp, 4
  0001c	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
  0001f	85 c0		 test	 eax, eax
  00021	74 09		 je	 SHORT $LN6@New
  00023	8b c8		 mov	 ecx, eax
  00025	e8 00 00 00 00	 call	 ??0CAttributeInstance@@QAE@XZ ; CAttributeInstance::CAttributeInstance
  0002a	eb 02		 jmp	 SHORT $LN7@New
$LN6@New:
  0002c	33 c0		 xor	 eax, eax
$LN7@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0002e	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00034	89 45 fc	 mov	 DWORD PTR _pkNewData$2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00037	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+12
  0003d	74 13		 je	 SHORT $LN14@New

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0003f	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00041	83 05 08 00 00
	00 04		 add	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00048	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 196  : }

  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN14@New:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00052	8d 45 fc	 lea	 eax, DWORD PTR _pkNewData$2[ebp]
  00055	50		 push	 eax
  00056	51		 push	 ecx
  00057	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+4
  0005c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAttributeInstance@@@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEPAPAVCAttributeInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Emplace_reallocate<CAttributeInstance * const &>
  00061	8b 45 fc	 mov	 eax, DWORD PTR _pkNewData$2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00064	ff 05 20 00 00
	00		 inc	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+32
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 196  : }

  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN4@New:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  0006e	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  00071	83 c1 fc	 add	 ecx, -4			; fffffffcH
  00074	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+20, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 196  : }

  0007a	8b e5		 mov	 esp, ebp
  0007c	5d		 pop	 ebp
  0007d	c3		 ret	 0
?New@CAttributeInstance@@SAPAV1@XZ ENDP			; CAttributeInstance::New
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?DestroySystem@CAttributeInstance@@SAXXZ
_TEXT	SEGMENT
?DestroySystem@CAttributeInstance@@SAXXZ PROC		; CAttributeInstance::DestroySystem, COMDAT

; 189  : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 189  : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 21		 je	 SHORT $LN38@DestroySys
$LL20@DestroySys:

; 266  :         _Func(*_UFirst);

  00012	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00014	85 c9		 test	 ecx, ecx
  00016	74 06		 je	 SHORT $LN26@DestroySys
  00018	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001a	6a 01		 push	 1
  0001c	ff 10		 call	 DWORD PTR [eax]
$LN26@DestroySys:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001e	83 c6 04	 add	 esi, 4
  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroySys
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
$LN38@DestroySys:
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+20
  00039	0f 45 fe	 cmovne	 edi, esi
  0003c	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+16, ecx
  00042	89 3d 08 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+8, edi
  00048	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+16
  0004f	5f		 pop	 edi
  00050	89 0d 14 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+20, ecx
  00056	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 191  : }

  00057	c3		 ret	 0
?DestroySystem@CAttributeInstance@@SAXXZ ENDP		; CAttributeInstance::DestroySystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?CreateSystem@CAttributeInstance@@SAXI@Z
_TEXT	SEGMENT
_uCapacity$ = 8						; size = 4
?CreateSystem@CAttributeInstance@@SAXI@Z PROC		; CAttributeInstance::CreateSystem, COMDAT

; 184  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00003	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+12
  00008	2b 05 04 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 184  : {

  0000e	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  0000f	8b 75 08	 mov	 esi, DWORD PTR _uCapacity$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00012	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 57   : 		m_uInitCapacity = uCapacity;

  00015	89 35 1c 00 00
	00		 mov	 DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+28, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  0001b	3b f0		 cmp	 esi, eax
  0001d	76 13		 jbe	 SHORT $LN6@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  0001f	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00025	77 33		 ja	 SHORT $LN19@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  00027	56		 push	 esi
  00028	b9 04 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+4
  0002d	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXI@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Reallocate_exactly
$LN6@CreateSyst:

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00032	a1 18 00 00 00	 mov	 eax, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+24
  00037	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+16
  0003d	c1 f8 02	 sar	 eax, 2

; 1743 :         if (_Newcapacity > capacity()) { // something to do (reserve() never shrinks)

  00040	3b f0		 cmp	 esi, eax
  00042	76 13		 jbe	 SHORT $LN13@CreateSyst

; 1744 :             if (_Newcapacity > max_size()) {

  00044	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  0004a	77 0e		 ja	 SHORT $LN19@CreateSyst

; 1746 :             }
; 1747 : 
; 1748 :             _Reallocate_exactly(_Newcapacity);

  0004c	56		 push	 esi
  0004d	b9 10 00 00 00	 mov	 ecx, OFFSET ?ms_kPool@CAttributeInstance@@2V?$CDynamicPool@VCAttributeInstance@@@@A+16
  00052	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@AAEXI@Z ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Reallocate_exactly
$LN13@CreateSyst:
  00057	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 186  : }

  00058	5d		 pop	 ebp
  00059	c3		 ret	 0
$LN19@CreateSyst:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1745 :                 _Xlength();

  0005a	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCAttributeInstance@@V?$allocator@PAVCAttributeInstance@@@std@@@std@@CAXXZ ; std::vector<CAttributeInstance *,std::allocator<CAttributeInstance *> >::_Xlength
$LN21@CreateSyst:
  0005f	cc		 int	 3
?CreateSystem@CAttributeInstance@@SAXI@Z ENDP		; CAttributeInstance::CreateSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@CAXXZ PROC ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::~vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 64		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  00009	57		 push	 edi
  0000a	56		 push	 esi
  0000b	ff 76 04	 push	 DWORD PTR [esi+4]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >

; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00014	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00017	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001c	8b 3e		 mov	 edi, DWORD PTR [esi]
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	2b cf		 sub	 ecx, edi
  00023	f7 e9		 imul	 ecx
  00025	d1 fa		 sar	 edx, 1
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00031	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00034	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003a	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0003c	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0003f	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00042	2b fa		 sub	 edi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00044	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00047	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004a	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0004c	8b fa		 mov	 edi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004e	51		 push	 ecx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 2113 :             _Mylast  = nullptr;

  0005e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2114 :             _Myend   = nullptr;

  00065	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006c	5f		 pop	 edi
$LN4@vector:
  0006d	5e		 pop	 esi

; 835  :     }

  0006e	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00074	cc		 int	 3
??1?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::~vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?GetHeight@CAttributeInstance@@QAEHMMPAM@Z
_TEXT	SEGMENT
_pfHeight$GSCopy$1$ = -40				; size = 4
_bFlag$1$ = -36						; size = 4
_this$GSCopy$1$ = -32					; size = 4
_i$1$ = -28						; size = 4
_j$1$ = -24						; size = 4
tv906 = -20						; size = 4
_v3Cross$1 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_pfHeight$ = 16						; size = 4
?GetHeight@CAttributeInstance@@QAEHMMPAM@Z PROC		; CAttributeInstance::GetHeight, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 10	 mov	 eax, DWORD PTR _pfHeight$[ebp]
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx
  00016	89 45 d8	 mov	 DWORD PTR _pfHeight$GSCopy$1$[ebp], eax
  00019	89 75 e0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi

; 70   : 	if (IsEmpty())

  0001c	e8 00 00 00 00	 call	 ?IsEmpty@CAttributeInstance@@QBEHXZ ; CAttributeInstance::IsEmpty
  00021	85 c0		 test	 eax, eax
  00023	0f 85 f6 02 00
	00		 jne	 $LN54@GetHeight

; 71   : 	{
; 72   : 		return FALSE;
; 73   : 	}
; 74   : 
; 75   : 	fy *= -1.0f;

  00029	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fy$[ebp]

; 76   : 
; 77   : 	if (!IsInHeight(fx, fy))

  0002e	83 ec 08	 sub	 esp, 8
  00031	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  00039	8b ce		 mov	 ecx, esi
  0003b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00041	f3 0f 11 45 0c	 movss	 DWORD PTR _fy$[ebp], xmm0
  00046	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fx$[ebp]
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	e8 00 00 00 00	 call	 ?IsInHeight@CAttributeInstance@@QAEHMM@Z ; CAttributeInstance::IsInHeight
  00055	85 c0		 test	 eax, eax
  00057	0f 84 c2 02 00
	00		 je	 $LN54@GetHeight
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0005d	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 84   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  00060	33 c0		 xor	 eax, eax
  00062	89 45 e4	 mov	 DWORD PTR _i$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00065	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 82   : 	BOOL bFlag = FALSE;

  0006a	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0006b	8b 5e 4c	 mov	 ebx, DWORD PTR [esi+76]
  0006e	2b cb		 sub	 ecx, ebx
  00070	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 82   : 	BOOL bFlag = FALSE;

  00072	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00073	d1 fa		 sar	 edx, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 82   : 	BOOL bFlag = FALSE;

  00075	33 ff		 xor	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00077	8b c2		 mov	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 82   : 	BOOL bFlag = FALSE;

  00079	89 7d dc	 mov	 DWORD PTR _bFlag$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0007c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007f	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 84   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  00081	0f 84 83 02 00
	00		 je	 $LN3@GetHeight
  00087	33 f6		 xor	 esi, esi
  00089	89 75 ec	 mov	 DWORD PTR tv906[ebp], esi
  0008c	0f 1f 40 00	 npad	 4
$LL4@GetHeight:

; 85   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  00090	33 c9		 xor	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00092	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 85   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  00097	89 4d e8	 mov	 DWORD PTR _j$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0009a	8b fb		 mov	 edi, ebx
  0009c	8b 4c 33 04	 mov	 ecx, DWORD PTR [ebx+esi+4]
  000a0	2b 0c 33	 sub	 ecx, DWORD PTR [ebx+esi]
  000a3	f7 e9		 imul	 ecx
  000a5	d1 fa		 sar	 edx, 1
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 85   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  000ae	0f 84 27 02 00
	00		 je	 $LN2@GetHeight
  000b4	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fx$[ebp]
  000b9	33 f6		 xor	 esi, esi
  000bb	0f 1f 44 00 00	 npad	 5
$LL7@GetHeight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  000c0	8b 7d ec	 mov	 edi, DWORD PTR tv906[ebp]
  000c3	8b 3c 3b	 mov	 edi, DWORD PTR [ebx+edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 94   : 				fy < c_rv3Vertex0.y && fy < c_rv3Vertex1.y && fy < c_rv3Vertex2.y ||

  000c6	f3 0f 10 24 37	 movss	 xmm4, DWORD PTR [edi+esi]
  000cb	0f 2f e1	 comiss	 xmm4, xmm1
  000ce	76 1a		 jbe	 SHORT $LN12@GetHeight
  000d0	f3 0f 10 44 37
	0c		 movss	 xmm0, DWORD PTR [edi+esi+12]
  000d6	0f 2f c1	 comiss	 xmm0, xmm1
  000d9	76 0f		 jbe	 SHORT $LN12@GetHeight
  000db	f3 0f 10 44 37
	18		 movss	 xmm0, DWORD PTR [edi+esi+24]
  000e1	0f 2f c1	 comiss	 xmm0, xmm1
  000e4	0f 87 bc 01 00
	00		 ja	 $LN5@GetHeight
$LN12@GetHeight:
  000ea	0f 2f cc	 comiss	 xmm1, xmm4
  000ed	76 12		 jbe	 SHORT $LN13@GetHeight
  000ef	0f 2f 4c 37 0c	 comiss	 xmm1, DWORD PTR [edi+esi+12]
  000f4	76 0b		 jbe	 SHORT $LN13@GetHeight
  000f6	0f 2f 4c 37 18	 comiss	 xmm1, DWORD PTR [edi+esi+24]
  000fb	0f 87 a5 01 00
	00		 ja	 $LN5@GetHeight
$LN13@GetHeight:
  00101	f3 0f 10 5c 37
	04		 movss	 xmm3, DWORD PTR [edi+esi+4]
  00107	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  0010c	0f 2f da	 comiss	 xmm3, xmm2
  0010f	76 1a		 jbe	 SHORT $LN14@GetHeight
  00111	f3 0f 10 44 37
	10		 movss	 xmm0, DWORD PTR [edi+esi+16]
  00117	0f 2f c2	 comiss	 xmm0, xmm2
  0011a	76 0f		 jbe	 SHORT $LN14@GetHeight
  0011c	f3 0f 10 44 37
	1c		 movss	 xmm0, DWORD PTR [edi+esi+28]
  00122	0f 2f c2	 comiss	 xmm0, xmm2
  00125	0f 87 7b 01 00
	00		 ja	 $LN5@GetHeight
$LN14@GetHeight:
  0012b	0f 2f d3	 comiss	 xmm2, xmm3
  0012e	76 12		 jbe	 SHORT $LN10@GetHeight
  00130	0f 2f 54 37 10	 comiss	 xmm2, DWORD PTR [edi+esi+16]
  00135	76 0b		 jbe	 SHORT $LN10@GetHeight
  00137	0f 2f 54 37 1c	 comiss	 xmm2, DWORD PTR [edi+esi+28]
  0013c	0f 87 64 01 00
	00		 ja	 $LN5@GetHeight
$LN10@GetHeight:

; 95   : 				fy > c_rv3Vertex0.y && fy > c_rv3Vertex1.y && fy > c_rv3Vertex2.y
; 96   : 			)
; 97   : 			{
; 98   : 				continue;
; 99   : 			}
; 100  : 
; 101  : 			if (IsInTriangle2D(c_rv3Vertex0.x, c_rv3Vertex0.y,

  00142	f3 0f 10 44 37
	1c		 movss	 xmm0, DWORD PTR [edi+esi+28]
  00148	83 ec 20	 sub	 esp, 32			; 00000020H
  0014b	f3 0f 11 54 24
	1c		 movss	 DWORD PTR [esp+28], xmm2
  00151	f3 0f 11 4c 24
	18		 movss	 DWORD PTR [esp+24], xmm1
  00157	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0015d	f3 0f 10 44 37
	18		 movss	 xmm0, DWORD PTR [edi+esi+24]
  00163	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00169	f3 0f 10 44 37
	10		 movss	 xmm0, DWORD PTR [edi+esi+16]
  0016f	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00175	f3 0f 10 44 37
	0c		 movss	 xmm0, DWORD PTR [edi+esi+12]
  0017b	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00181	f3 0f 11 5c 24
	04		 movss	 DWORD PTR [esp+4], xmm3
  00187	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  0018c	e8 00 00 00 00	 call	 ?IsInTriangle2D@@YA_NMMMMMMMM@Z ; IsInTriangle2D
  00191	83 c4 20	 add	 esp, 32			; 00000020H
  00194	84 c0		 test	 al, al
  00196	0f 84 05 01 00
	00		 je	 $LN57@GetHeight
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0019c	f3 0f 10 64 37
	1c		 movss	 xmm4, DWORD PTR [edi+esi+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 110  : 				D3DXVec3Normalize(&v3Cross, &v3Cross);

  001a2	8d 45 f0	 lea	 eax, DWORD PTR _v3Cross$1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001a5	f3 0f 10 54 37
	20		 movss	 xmm2, DWORD PTR [edi+esi+32]
  001ab	f3 0f 5c 64 37
	04		 subss	 xmm4, DWORD PTR [edi+esi+4]
  001b1	f3 0f 5c 54 37
	08		 subss	 xmm2, DWORD PTR [edi+esi+8]
  001b7	f3 0f 10 74 37
	10		 movss	 xmm6, DWORD PTR [edi+esi+16]
  001bd	f3 0f 10 5c 37
	14		 movss	 xmm3, DWORD PTR [edi+esi+20]
  001c3	f3 0f 5c 74 37
	04		 subss	 xmm6, DWORD PTR [edi+esi+4]
  001c9	f3 0f 5c 5c 37
	08		 subss	 xmm3, DWORD PTR [edi+esi+8]
  001cf	f3 0f 10 6c 37
	18		 movss	 xmm5, DWORD PTR [edi+esi+24]

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  001d5	0f 28 c4	 movaps	 xmm0, xmm4

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001d8	f3 0f 5c 2c 37	 subss	 xmm5, DWORD PTR [edi+esi]
  001dd	f3 0f 10 7c 37
	0c		 movss	 xmm7, DWORD PTR [edi+esi+12]

; 306  :     z = fz;

  001e3	0f 28 ca	 movaps	 xmm1, xmm2

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001e6	f3 0f 5c 3c 37	 subss	 xmm7, DWORD PTR [edi+esi]

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  001eb	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 110  : 				D3DXVec3Normalize(&v3Cross, &v3Cross);

  001ef	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  001f0	f3 0f 59 ce	 mulss	 xmm1, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 110  : 				D3DXVec3Normalize(&v3Cross, &v3Cross);

  001f4	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  001f5	f3 0f 59 d7	 mulss	 xmm2, xmm7
  001f9	f3 0f 5c c8	 subss	 xmm1, xmm0
  001fd	f3 0f 59 e7	 mulss	 xmm4, xmm7
  00201	0f 28 c5	 movaps	 xmm0, xmm5

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00204	f3 0f 59 ee	 mulss	 xmm5, xmm6
  00208	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0020c	f3 0f 5c e5	 subss	 xmm4, xmm5

; 1940 : 
; 1941 :     *pOut = v;

  00210	f3 0f 11 4d f0	 movss	 DWORD PTR _v3Cross$1[ebp], xmm1
  00215	f3 0f 5c c2	 subss	 xmm0, xmm2
  00219	f3 0f 11 65 f8	 movss	 DWORD PTR _v3Cross$1[ebp+8], xmm4
  0021e	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Cross$1[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 110  : 				D3DXVec3Normalize(&v3Cross, &v3Cross);

  00223	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 111  : 
; 112  : 				if (0.0f != v3Cross.z)

  00228	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _v3Cross$1[ebp+8]
  0022d	0f 57 c0	 xorps	 xmm0, xmm0
  00230	0f 2e c4	 ucomiss xmm0, xmm4
  00233	9f		 lahf
  00234	f6 c4 44	 test	 ah, 68			; 00000044H
  00237	7b 68		 jnp	 SHORT $LN57@GetHeight

; 113  : 				{
; 114  : 					float fd = (v3Cross.x * c_rv3Vertex0.x + v3Cross.y * c_rv3Vertex0.y + v3Cross.z * c_rv3Vertex0.z);

  00239	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _v3Cross$1[ebp+4]

; 115  : 					float fm = (v3Cross.x * fx + v3Cross.y * fy);
; 116  : 					*pfHeight = fMAX((fd - fm) / v3Cross.z, *pfHeight);

  0023e	83 ec 08	 sub	 esp, 8
  00241	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _v3Cross$1[ebp]
  00246	0f 28 d9	 movaps	 xmm3, xmm1
  00249	f3 0f 59 5c 37
	04		 mulss	 xmm3, DWORD PTR [edi+esi+4]
  0024f	0f 28 c2	 movaps	 xmm0, xmm2
  00252	8b 5d d8	 mov	 ebx, DWORD PTR _pfHeight$GSCopy$1$[ebp]
  00255	f3 0f 59 04 37	 mulss	 xmm0, DWORD PTR [edi+esi]
  0025a	f3 0f 59 55 08	 mulss	 xmm2, DWORD PTR _fx$[ebp]
  0025f	f3 0f 59 4d 0c	 mulss	 xmm1, DWORD PTR _fy$[ebp]
  00264	f3 0f 58 d8	 addss	 xmm3, xmm0
  00268	0f 28 c4	 movaps	 xmm0, xmm4
  0026b	f3 0f 59 44 37
	08		 mulss	 xmm0, DWORD PTR [edi+esi+8]
  00271	f3 0f 58 d1	 addss	 xmm2, xmm1
  00275	f3 0f 58 d8	 addss	 xmm3, xmm0
  00279	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  0027d	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00283	f3 0f 5c da	 subss	 xmm3, xmm2
  00287	f3 0f 5e dc	 divss	 xmm3, xmm4
  0028b	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  00290	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00295	d9 1b		 fstp	 DWORD PTR [ebx]
  00297	83 c4 08	 add	 esp, 8

; 117  : 
; 118  : 					bFlag = TRUE;

  0029a	c7 45 dc 01 00
	00 00		 mov	 DWORD PTR _bFlag$1$[ebp], 1
$LN57@GetHeight:

; 85   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  002a1	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fx$[ebp]
$LN5@GetHeight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  002a6	8b 45 e0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 85   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  002a9	83 c6 24	 add	 esi, 36			; 00000024H
  002ac	83 45 e8 03	 add	 DWORD PTR _j$1$[ebp], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  002b0	8b 78 4c	 mov	 edi, DWORD PTR [eax+76]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002b3	8b df		 mov	 ebx, edi
  002b5	8b 45 ec	 mov	 eax, DWORD PTR tv906[ebp]
  002b8	8b 4c 07 04	 mov	 ecx, DWORD PTR [edi+eax+4]
  002bc	2b 0c 07	 sub	 ecx, DWORD PTR [edi+eax]
  002bf	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002c4	f7 e9		 imul	 ecx
  002c6	d1 fa		 sar	 edx, 1
  002c8	8b c2		 mov	 eax, edx
  002ca	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002cd	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 85   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  002cf	39 45 e8	 cmp	 DWORD PTR _j$1$[ebp], eax
  002d2	0f 82 e8 fd ff
	ff		 jb	 $LL7@GetHeight
  002d8	8b 75 ec	 mov	 esi, DWORD PTR tv906[ebp]
$LN2@GetHeight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002db	8b 45 e0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 84   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  002de	83 c6 0c	 add	 esi, 12			; 0000000cH
  002e1	ff 45 e4	 inc	 DWORD PTR _i$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002e4	8b df		 mov	 ebx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 84   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  002e6	89 75 ec	 mov	 DWORD PTR tv906[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  002e9	8b 48 50	 mov	 ecx, DWORD PTR [eax+80]
  002ec	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002f1	2b cf		 sub	 ecx, edi
  002f3	f7 e9		 imul	 ecx
  002f5	d1 fa		 sar	 edx, 1
  002f7	8b ca		 mov	 ecx, edx
  002f9	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  002fc	03 ca		 add	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 84   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  002fe	39 4d e4	 cmp	 DWORD PTR _i$1$[ebp], ecx
  00301	0f 82 89 fd ff
	ff		 jb	 $LL4@GetHeight
  00307	8b 7d dc	 mov	 edi, DWORD PTR _bFlag$1$[ebp]
$LN3@GetHeight:

; 119  : 				}
; 120  : 			}
; 121  : 		}
; 122  : 
; 123  : 	return bFlag;

  0030a	8b c7		 mov	 eax, edi
  0030c	5f		 pop	 edi
  0030d	5b		 pop	 ebx
  0030e	5e		 pop	 esi

; 124  : }

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00312	33 cd		 xor	 ecx, ebp
  00314	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00319	8b e5		 mov	 esp, ebp
  0031b	5d		 pop	 ebp
  0031c	c2 0c 00	 ret	 12			; 0000000cH
$LN54@GetHeight:
  0031f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00322	33 c0		 xor	 eax, eax
  00324	33 cd		 xor	 ecx, ebp
  00326	5e		 pop	 esi
  00327	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0032c	8b e5		 mov	 esp, ebp
  0032e	5d		 pop	 ebp
  0032f	c2 0c 00	 ret	 12			; 0000000cH
?GetHeight@CAttributeInstance@@QAEHMMPAM@Z ENDP		; CAttributeInstance::GetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?IsInHeight@CAttributeInstance@@QAEHMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
?IsInHeight@CAttributeInstance@@QAEHMM@Z PROC		; CAttributeInstance::IsInHeight, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 132  : 	float fdx = m_matGlobal._41 - fx;

  0000a	f3 0f 10 4e 3c	 movss	 xmm1, DWORD PTR [esi+60]

; 133  : 	float fdy = m_matGlobal._42 - fy;

  0000f	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  00014	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _fy$[ebp]
  00019	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _fx$[ebp]

; 134  : 	if (sqrtf(fdx * fdx + fdy * fdy) > m_fHeightRadius)

  0001e	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00022	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00026	f3 0f 58 c1	 addss	 xmm0, xmm1
  0002a	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0002d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00030	66 0f 2e c8	 ucomisd xmm1, xmm0
  00034	77 18		 ja	 SHORT $LN6@IsInHeight
  00036	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 134  : 	if (sqrtf(fdx * fdx + fdy * fdy) > m_fHeightRadius)

  0003a	33 c0		 xor	 eax, eax
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0003c	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 134  : 	if (sqrtf(fdx * fdx + fdy * fdy) > m_fHeightRadius)

  00040	0f 2f 46 08	 comiss	 xmm0, DWORD PTR [esi+8]
  00044	0f 96 c0	 setbe	 al

; 135  : 	{
; 136  : 		return FALSE;
; 137  : 	}
; 138  : 
; 139  : 	return TRUE;
; 140  : }

  00047	5e		 pop	 esi
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 08 00	 ret	 8
$LN6@IsInHeight:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0004e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
  00053	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 134  : 	if (sqrtf(fdx * fdx + fdy * fdy) > m_fHeightRadius)

  00057	33 c0		 xor	 eax, eax
  00059	0f 2f 46 08	 comiss	 xmm0, DWORD PTR [esi+8]

; 135  : 	{
; 136  : 		return FALSE;
; 137  : 	}
; 138  : 
; 139  : 	return TRUE;
; 140  : }

  0005d	5e		 pop	 esi
  0005e	0f 96 c0	 setbe	 al
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
?IsInHeight@CAttributeInstance@@QAEHMM@Z ENDP		; CAttributeInstance::IsInHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?Picking@CAttributeInstance@@QAE_NABUD3DXVECTOR3@@0AAM1@Z
_TEXT	SEGMENT
_out_y$GSCopy$1$ = -72					; size = 4
_out_x$GSCopy$1$ = -68					; size = 4
tv3031 = -64						; size = 4
tv3003 = -60						; size = 4
_v$GSCopy$1$ = -56					; size = 4
tv3083 = -52						; size = 4
_dir$GSCopy$1$ = -48					; size = 4
tv3000 = -44						; size = 4
tv3052 = -40						; size = 4
tv3067 = -36						; size = 4
tv3050 = -32						; size = 4
tv3033 = -32						; size = 4
_ny$1$ = -28						; size = 4
_nx$1$ = -24						; size = 4
tv3068 = -20						; size = 4
tv3049 = -16						; size = 4
tv3048 = -12						; size = 4
tv3047 = -8						; size = 4
_bPicked$1$ = -1					; size = 1
_v$ = 8							; size = 4
_dir$ = 12						; size = 4
_out_x$ = 16						; size = 4
_out_y$ = 20						; size = 4
?Picking@CAttributeInstance@@QAE_NABUD3DXVECTOR3@@0AAM1@Z PROC ; CAttributeInstance::Picking, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00009	89 45 c8	 mov	 DWORD PTR _v$GSCopy$1$[ebp], eax
  0000c	8b 45 0c	 mov	 eax, DWORD PTR _dir$[ebp]
  0000f	89 45 d0	 mov	 DWORD PTR _dir$GSCopy$1$[ebp], eax
  00012	8b 45 10	 mov	 eax, DWORD PTR _out_x$[ebp]
  00015	89 45 bc	 mov	 DWORD PTR _out_x$GSCopy$1$[ebp], eax
  00018	8b 45 14	 mov	 eax, DWORD PTR _out_y$[ebp]
  0001b	56		 push	 esi
  0001c	8b f1		 mov	 esi, ecx
  0001e	89 45 b8	 mov	 DWORD PTR _out_y$GSCopy$1$[ebp], eax

; 12   : 	if (IsEmpty())

  00021	e8 00 00 00 00	 call	 ?IsEmpty@CAttributeInstance@@QBEHXZ ; CAttributeInstance::IsEmpty
  00026	85 c0		 test	 eax, eax
  00028	74 09		 je	 SHORT $LN8@Picking

; 13   : 	{
; 14   : 		return FALSE;

  0002a	32 c0		 xor	 al, al
  0002c	5e		 pop	 esi

; 66   : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 10 00	 ret	 16			; 00000010H
$LN8@Picking:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00033	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]
  00036	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003b	57		 push	 edi
  0003c	8b 7e 4c	 mov	 edi, DWORD PTR [esi+76]
  0003f	0f 57 c0	 xorps	 xmm0, xmm0
  00042	2b cf		 sub	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 18   : 	bool bPicked = false;

  00044	c6 45 ff 00	 mov	 BYTE PTR _bPicked$1$[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00048	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 19   : 	float nx = 0;

  0004a	f3 0f 11 45 e8	 movss	 DWORD PTR _nx$1$[ebp], xmm0

; 20   : 	float ny = 0;

  0004f	f3 0f 11 45 e4	 movss	 DWORD PTR _ny$1$[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00054	d1 fa		 sar	 edx, 1
  00056	8b c2		 mov	 eax, edx
  00058	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005b	03 c2		 add	 eax, edx
  0005d	89 45 cc	 mov	 DWORD PTR tv3083[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 22   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  00060	0f 84 bc 03 00
	00		 je	 $LN105@Picking
$LL4@Picking:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00066	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00069	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0006e	8b 37		 mov	 esi, DWORD PTR [edi]
  00070	2b ce		 sub	 ecx, esi
  00072	f7 e9		 imul	 ecx
  00074	d1 fa		 sar	 edx, 1
  00076	8b ca		 mov	 ecx, edx
  00078	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0007b	03 ca		 add	 ecx, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 23   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  0007d	0f 84 6b 03 00
	00		 je	 $LN2@Picking
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00083	49		 dec	 ecx
  00084	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00089	f7 e1		 mul	 ecx
  0008b	8b 4d c8	 mov	 ecx, DWORD PTR _v$GSCopy$1$[ebp]
  0008e	83 c6 14	 add	 esi, 20			; 00000014H
  00091	8b 45 d0	 mov	 eax, DWORD PTR _dir$GSCopy$1$[ebp]
  00094	d1 ea		 shr	 edx, 1
  00096	42		 inc	 edx
  00097	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL7@Picking:
  000a0	f3 0f 10 46 f8	 movss	 xmm0, DWORD PTR [esi-8]
  000a5	f3 0f 10 76 08	 movss	 xmm6, DWORD PTR [esi+8]
  000aa	0f 28 d8	 movaps	 xmm3, xmm0
  000ad	f3 0f 10 6e f4	 movss	 xmm5, DWORD PTR [esi-12]
  000b2	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  000b6	f3 0f 10 56 fc	 movss	 xmm2, DWORD PTR [esi-4]
  000bb	f3 0f 5c cd	 subss	 xmm1, xmm5
  000bf	f3 0f 11 45 c0	 movss	 DWORD PTR tv3031[ebp], xmm0
  000c4	f3 0f 10 46 f0	 movss	 xmm0, DWORD PTR [esi-16]
  000c9	f3 0f 5c d0	 subss	 xmm2, xmm0
  000cd	f3 0f 10 66 ec	 movss	 xmm4, DWORD PTR [esi-20]
  000d2	f3 0f 5c f0	 subss	 xmm6, xmm0
  000d6	f3 0f 11 45 dc	 movss	 DWORD PTR tv3067[ebp], xmm0
  000db	f3 0f 10 7e 04	 movss	 xmm7, DWORD PTR [esi+4]
  000e0	f3 0f 5c dc	 subss	 xmm3, xmm4
  000e4	f3 0f 11 6d ec	 movss	 DWORD PTR tv3068[ebp], xmm5
  000e9	f3 0f 5c fc	 subss	 xmm7, xmm4
  000ed	f3 0f 10 6e 0c	 movss	 xmm5, DWORD PTR [esi+12]
  000f2	f3 0f 5c 6e f4	 subss	 xmm5, DWORD PTR [esi-12]

; 306  :     z = fz;

  000f7	0f 28 c6	 movaps	 xmm0, xmm6

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000fa	f3 0f 11 65 c4	 movss	 DWORD PTR tv3003[ebp], xmm4

; 306  :     z = fz;

  000ff	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00103	f3 0f 11 5d e0	 movss	 DWORD PTR tv3033[ebp], xmm3

; 306  :     z = fz;

  00108	f3 0f 11 45 f8	 movss	 DWORD PTR tv3047[ebp], xmm0

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0010d	0f 28 c5	 movaps	 xmm0, xmm5
  00110	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR tv3047[ebp]
  00115	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00119	f3 0f 5c d8	 subss	 xmm3, xmm0

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0011d	0f 28 c5	 movaps	 xmm0, xmm5
  00120	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR tv3033[ebp]
  00125	f3 0f 11 45 f4	 movss	 DWORD PTR tv3048[ebp], xmm0
  0012a	0f 28 c7	 movaps	 xmm0, xmm7
  0012d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00131	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR tv3048[ebp]
  00136	f3 0f 11 5d f8	 movss	 DWORD PTR tv3047[ebp], xmm3
  0013b	f3 0f 5c c8	 subss	 xmm1, xmm0

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0013f	0f 28 c7	 movaps	 xmm0, xmm7
  00142	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00146	f3 0f 11 45 f0	 movss	 DWORD PTR tv3049[ebp], xmm0
  0014b	0f 28 c6	 movaps	 xmm0, xmm6
  0014e	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR tv3033[ebp]
  00153	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR tv3049[ebp]
  00158	f3 0f 11 4d f4	 movss	 DWORD PTR tv3048[ebp], xmm1
  0015d	f3 0f 5c d0	 subss	 xmm2, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00161	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  00166	f3 0f 5c 46 f0	 subss	 xmm0, DWORD PTR [esi-16]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0016b	f3 0f 11 55 f0	 movss	 DWORD PTR tv3049[ebp], xmm2

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00170	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]

; 306  :     z = fz;

  00174	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00178	f3 0f 5c d4	 subss	 xmm2, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 33   : 			t = - D3DXVec3Dot(&(v - cv0), &n) / D3DXVec3Dot(&dir, &n);

  0017c	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  00181	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR tv3048[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00186	f3 0f 59 d3	 mulss	 xmm2, xmm3
  0018a	f3 0f 58 d0	 addss	 xmm2, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0018e	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [ecx+8]
  00193	f3 0f 5c 46 f4	 subss	 xmm0, DWORD PTR [esi-12]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00198	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR tv3049[ebp]
  0019d	f3 0f 58 d0	 addss	 xmm2, xmm0
  001a1	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  001a5	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001a9	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 33   : 			t = - D3DXVec3Dot(&(v - cv0), &n) / D3DXVec3Dot(&dir, &n);

  001ad	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001b4	f3 0f 58 c8	 addss	 xmm1, xmm0
  001b8	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  001bd	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR tv3049[ebp]
  001c2	f3 0f 58 c8	 addss	 xmm1, xmm0

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001c6	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 33   : 			t = - D3DXVec3Dot(&(v - cv0), &n) / D3DXVec3Dot(&dir, &n);

  001cb	f3 0f 5e d1	 divss	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001cf	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  001d4	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001d8	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 304  :     x = fx;

  001dc	f3 0f 58 49 04	 addss	 xmm1, DWORD PTR [ecx+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  001e1	f3 0f 59 da	 mulss	 xmm3, xmm2

; 305  :     y = fy;

  001e5	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [ecx+8]

; 306  :     z = fz;

  001ea	f3 0f 58 19	 addss	 xmm3, DWORD PTR [ecx]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001ee	0f 28 e1	 movaps	 xmm4, xmm1

; 304  :     x = fx;

  001f1	f3 0f 11 4d d8	 movss	 DWORD PTR tv3052[ebp], xmm1

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001f6	f3 0f 5c 66 f0	 subss	 xmm4, DWORD PTR [esi-16]

; 305  :     y = fy;

  001fb	f3 0f 11 45 d4	 movss	 DWORD PTR tv3000[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00200	0f 28 c8	 movaps	 xmm1, xmm0

; 306  :     z = fz;

  00203	f3 0f 11 5d e0	 movss	 DWORD PTR tv3050[ebp], xmm3

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00208	f3 0f 5c 4e f4	 subss	 xmm1, DWORD PTR [esi-12]
  0020d	0f 28 d3	 movaps	 xmm2, xmm3
  00210	f3 0f 5c 56 ec	 subss	 xmm2, DWORD PTR [esi-20]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00215	0f 28 c1	 movaps	 xmm0, xmm1

; 306  :     z = fz;

  00218	f3 0f 59 ce	 mulss	 xmm1, xmm6

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0021c	0f 28 da	 movaps	 xmm3, xmm2
  0021f	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00223	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00227	f3 0f 59 d6	 mulss	 xmm2, xmm6
  0022b	f3 0f 5c d8	 subss	 xmm3, xmm0
  0022f	0f 28 c4	 movaps	 xmm0, xmm4
  00232	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00236	f3 0f 59 e7	 mulss	 xmm4, xmm7

; 1940 : 
; 1941 :     *pOut = v;

  0023a	f3 0f 59 5d f4	 mulss	 xmm3, DWORD PTR tv3048[ebp]
  0023f	f3 0f 5c c8	 subss	 xmm1, xmm0
  00243	f3 0f 5c e2	 subss	 xmm4, xmm2
  00247	0f 57 c0	 xorps	 xmm0, xmm0

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0024a	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR tv3047[ebp]
  0024f	f3 0f 59 65 f0	 mulss	 xmm4, DWORD PTR tv3049[ebp]
  00254	f3 0f 58 d9	 addss	 xmm3, xmm1
  00258	f3 0f 58 dc	 addss	 xmm3, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 39   : 			if (D3DXVec3Dot(&temp, &n) < 0) { continue; }

  0025c	0f 2f c3	 comiss	 xmm0, xmm3
  0025f	0f 87 7d 01 00
	00		 ja	 $LN5@Picking
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00265	f3 0f 10 76 f8	 movss	 xmm6, DWORD PTR [esi-8]
  0026a	f3 0f 5c 76 04	 subss	 xmm6, DWORD PTR [esi+4]
  0026f	f3 0f 10 55 e0	 movss	 xmm2, DWORD PTR tv3050[ebp]
  00274	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]
  00279	f3 0f 10 65 d4	 movss	 xmm4, DWORD PTR tv3000[ebp]
  0027e	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  00282	f3 0f 5c 66 0c	 subss	 xmm4, DWORD PTR [esi+12]
  00287	f3 0f 5c 4e 0c	 subss	 xmm1, DWORD PTR [esi+12]
  0028c	f3 0f 10 6e fc	 movss	 xmm5, DWORD PTR [esi-4]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00291	0f 28 c6	 movaps	 xmm0, xmm6

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00294	f3 0f 5c 6e 08	 subss	 xmm5, DWORD PTR [esi+8]
  00299	f3 0f 10 7d d8	 movss	 xmm7, DWORD PTR tv3052[ebp]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0029e	0f 28 da	 movaps	 xmm3, xmm2

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  002a1	f3 0f 5c 7e 08	 subss	 xmm7, DWORD PTR [esi+8]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002a6	f3 0f 59 c4	 mulss	 xmm0, xmm4
  002aa	f3 0f 59 d9	 mulss	 xmm3, xmm1
  002ae	f3 0f 59 cf	 mulss	 xmm1, xmm7
  002b2	f3 0f 5c d8	 subss	 xmm3, xmm0

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002b6	f3 0f 59 f7	 mulss	 xmm6, xmm7

; 306  :     z = fz;

  002ba	0f 28 c5	 movaps	 xmm0, xmm5

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002bd	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 306  :     z = fz;

  002c1	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 1941 :     *pOut = v;

  002c5	f3 0f 59 5d f4	 mulss	 xmm3, DWORD PTR tv3048[ebp]
  002ca	f3 0f 5c f2	 subss	 xmm6, xmm2
  002ce	f3 0f 5c c1	 subss	 xmm0, xmm1

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002d2	f3 0f 59 75 f0	 mulss	 xmm6, DWORD PTR tv3049[ebp]
  002d7	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR tv3047[ebp]
  002dc	f3 0f 58 d8	 addss	 xmm3, xmm0
  002e0	0f 57 c0	 xorps	 xmm0, xmm0
  002e3	f3 0f 58 de	 addss	 xmm3, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 41   : 			if (D3DXVec3Dot(&temp, &n) < 0) { continue; }

  002e7	0f 2f c3	 comiss	 xmm0, xmm3
  002ea	0f 87 f2 00 00
	00		 ja	 $LN5@Picking
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  002f0	f3 0f 10 6d d4	 movss	 xmm5, DWORD PTR tv3000[ebp]
  002f5	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR tv3068[ebp]
  002fa	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR tv3067[ebp]
  002ff	f3 0f 5c 46 fc	 subss	 xmm0, DWORD PTR [esi-4]
  00304	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]
  00308	f3 0f 5c 2e	 subss	 xmm5, DWORD PTR [esi]
  0030c	f3 0f 10 7d d8	 movss	 xmm7, DWORD PTR tv3052[ebp]
  00311	f3 0f 10 75 e0	 movss	 xmm6, DWORD PTR tv3050[ebp]
  00316	0f 28 df	 movaps	 xmm3, xmm7
  00319	f3 0f 5c 5e fc	 subss	 xmm3, DWORD PTR [esi-4]
  0031e	f3 0f 10 65 c4	 movss	 xmm4, DWORD PTR tv3003[ebp]
  00323	f3 0f 5c 65 c0	 subss	 xmm4, DWORD PTR tv3031[ebp]
  00328	f3 0f 11 45 dc	 movss	 DWORD PTR tv3067[ebp], xmm0

; 306  :     z = fz;

  0032d	0f 28 d5	 movaps	 xmm2, xmm5
  00330	f3 0f 59 d0	 mulss	 xmm2, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00334	f3 0f 11 4d ec	 movss	 DWORD PTR tv3068[ebp], xmm1
  00339	0f 28 ce	 movaps	 xmm1, xmm6

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0033c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR tv3068[ebp]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00341	f3 0f 5c 4d c0	 subss	 xmm1, DWORD PTR tv3031[ebp]

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00346	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0034a	f3 0f 59 ec	 mulss	 xmm5, xmm4
  0034e	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00352	f3 0f 59 e3	 mulss	 xmm4, xmm3
  00356	0f 28 c1	 movaps	 xmm0, xmm1
  00359	f3 0f 59 4d dc	 mulss	 xmm1, DWORD PTR tv3067[ebp]
  0035e	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR tv3068[ebp]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00363	f3 0f 59 55 f8	 mulss	 xmm2, DWORD PTR tv3047[ebp]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00368	f3 0f 5c e1	 subss	 xmm4, xmm1
  0036c	f3 0f 5c c5	 subss	 xmm0, xmm5

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00370	f3 0f 59 65 f0	 mulss	 xmm4, DWORD PTR tv3049[ebp]

; 1941 :     *pOut = v;

  00375	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR tv3048[ebp]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0037a	f3 0f 58 d0	 addss	 xmm2, xmm0
  0037e	0f 57 c0	 xorps	 xmm0, xmm0
  00381	f3 0f 58 d4	 addss	 xmm2, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 43   : 			if (D3DXVec3Dot(&temp, &n) < 0) { continue; }

  00385	0f 2f c2	 comiss	 xmm0, xmm2
  00388	77 58		 ja	 SHORT $LN5@Picking

; 44   : 
; 45   : 			if (bPicked)

  0038a	80 7d ff 00	 cmp	 BYTE PTR _bPicked$1$[ebp], 0
  0038e	74 41		 je	 SHORT $LN12@Picking

; 46   : 			{
; 47   : 				if ((v.x - x.x) * (v.x - x.x) + (v.y - x.y) * (v.y - x.y) < (v.x - nx) * (v.x - nx) + (v.y - ny) * (v.y - ny))

  00390	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00394	f3 0f 10 59 04	 movss	 xmm3, DWORD PTR [ecx+4]
  00399	f3 0f 5c d6	 subss	 xmm2, xmm6
  0039d	f3 0f 10 09	 movss	 xmm1, DWORD PTR [ecx]
  003a1	f3 0f 5c df	 subss	 xmm3, xmm7
  003a5	f3 0f 10 41 04	 movss	 xmm0, DWORD PTR [ecx+4]
  003aa	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR _ny$1$[ebp]
  003af	f3 0f 5c 4d e8	 subss	 xmm1, DWORD PTR _nx$1$[ebp]
  003b4	f3 0f 59 d2	 mulss	 xmm2, xmm2
  003b8	f3 0f 59 db	 mulss	 xmm3, xmm3
  003bc	f3 0f 59 c0	 mulss	 xmm0, xmm0
  003c0	f3 0f 59 c9	 mulss	 xmm1, xmm1
  003c4	f3 0f 58 da	 addss	 xmm3, xmm2
  003c8	f3 0f 58 c1	 addss	 xmm0, xmm1
  003cc	0f 2f c3	 comiss	 xmm0, xmm3
  003cf	76 0a		 jbe	 SHORT $LN13@Picking
$LN12@Picking:

; 48   : 				{
; 49   : 					nx = x.x;
; 50   : 					ny = x.y;
; 51   : 				}
; 52   : 			}
; 53   : 			else
; 54   : 			{
; 55   : 				nx = x.x;
; 56   : 				ny = x.y;
; 57   : 			}
; 58   : 			bPicked = true;

  003d1	f3 0f 11 7d e4	 movss	 DWORD PTR _ny$1$[ebp], xmm7
  003d6	f3 0f 11 75 e8	 movss	 DWORD PTR _nx$1$[ebp], xmm6
$LN13@Picking:
  003db	8b 45 d0	 mov	 eax, DWORD PTR _dir$GSCopy$1$[ebp]
  003de	c6 45 ff 01	 mov	 BYTE PTR _bPicked$1$[ebp], 1
$LN5@Picking:

; 23   : 		for (DWORD j = 0; j < m_v3HeightDataVector[i].size(); j += 3)

  003e2	83 c6 24	 add	 esi, 36			; 00000024H
  003e5	83 ea 01	 sub	 edx, 1
  003e8	0f 85 b2 fc ff
	ff		 jne	 $LL7@Picking
$LN2@Picking:

; 22   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  003ee	83 c7 0c	 add	 edi, 12			; 0000000cH
  003f1	83 6d cc 01	 sub	 DWORD PTR tv3083[ebp], 1
  003f5	0f 85 6b fc ff
	ff		 jne	 $LL4@Picking

; 59   : 		}
; 60   : 	if (bPicked)

  003fb	8a 45 ff	 mov	 al, BYTE PTR _bPicked$1$[ebp]
  003fe	84 c0		 test	 al, al
  00400	74 23		 je	 SHORT $LN15@Picking

; 61   : 	{
; 62   : 		out_x = nx;

  00402	8b 4d bc	 mov	 ecx, DWORD PTR _out_x$GSCopy$1$[ebp]
  00405	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _nx$1$[ebp]

; 63   : 		out_y = ny;
; 64   : 	}
; 65   : 	return bPicked;

  0040a	5f		 pop	 edi
  0040b	5e		 pop	 esi
  0040c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00410	8b 4d b8	 mov	 ecx, DWORD PTR _out_y$GSCopy$1$[ebp]
  00413	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR _ny$1$[ebp]
  00418	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 66   : }

  0041c	8b e5		 mov	 esp, ebp
  0041e	5d		 pop	 ebp
  0041f	c2 10 00	 ret	 16			; 00000010H
$LN105@Picking:

; 22   : 	for (DWORD i = 0; i < m_v3HeightDataVector.size(); ++i)

  00422	8a 45 ff	 mov	 al, BYTE PTR _bPicked$1$[ebp]
$LN15@Picking:

; 63   : 		out_y = ny;
; 64   : 	}
; 65   : 	return bPicked;

  00425	5f		 pop	 edi
  00426	5e		 pop	 esi

; 66   : }

  00427	8b e5		 mov	 esp, ebp
  00429	5d		 pop	 ebp
  0042a	c2 10 00	 ret	 16			; 00000010H
?Picking@CAttributeInstance@@QAE_NABUD3DXVECTOR3@@0AAM1@Z ENDP ; CAttributeInstance::Picking
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?GetObjectPointer@CAttributeInstance@@QBEPAVCAttributeData@@XZ
_TEXT	SEGMENT
?GetObjectPointer@CAttributeInstance@@QBEPAVCAttributeData@@XZ PROC ; CAttributeInstance::GetObjectPointer, COMDAT
; _this$ = ecx

; 128  : 	return m_roAttributeData.GetPointer();

  00000	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 129  : }

  00003	c3		 ret	 0
?GetObjectPointer@CAttributeInstance@@QBEPAVCAttributeData@@XZ ENDP ; CAttributeInstance::GetObjectPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?RefreshObject@CAttributeInstance@@QAEXABUD3DXMATRIX@@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -24					; size = 4
_dwHeightDataCount$1$ = -20				; size = 4
__Oldsize$1$ = -16					; size = 4
_i$1$ = -16						; size = 4
_c_pHeightData$2 = -12					; size = 4
_this$1$ = -8						; size = 4
__My_data$1$ = -4					; size = 4
tv534 = 8						; size = 4
__Backout$1$sroa$145$1$ = 8				; size = 4
_c_rmatGlobal$ = 8					; size = 4
$T3 = 11						; size = 1
$T4 = 11						; size = 1
?RefreshObject@CAttributeInstance@@QAEXABUD3DXMATRIX@@@Z PROC ; CAttributeInstance::RefreshObject, COMDAT
; _this$ = ecx

; 149  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 150  : 	assert(!m_roAttributeData.IsNull());
; 151  : 
; 152  : 	m_matGlobal = c_rmatGlobal;

  00006	8b 45 08	 mov	 eax, DWORD PTR _c_rmatGlobal$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00010	57		 push	 edi
  00011	89 75 f8	 mov	 DWORD PTR _this$1$[ebp], esi

; 153  : 
; 154  : 	// Height
; 155  : 	m_fHeightRadius = m_roAttributeData->GetMaximizeRadius();

  00014	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00017	0f 11 46 0c	 movups	 XMMWORD PTR [esi+12], xmm0
  0001b	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0001f	0f 11 46 1c	 movups	 XMMWORD PTR [esi+28], xmm0
  00023	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00027	0f 11 46 2c	 movups	 XMMWORD PTR [esi+44], xmm0
  0002b	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  0002f	0f 11 46 3c	 movups	 XMMWORD PTR [esi+60], xmm0
  00033	e8 00 00 00 00	 call	 ?GetMaximizeRadius@CAttributeData@@QAEMXZ ; CAttributeData::GetMaximizeRadius

; 156  : 
; 157  : 	DWORD dwHeightDataCount = m_roAttributeData->GetHeightDataCount();

  00038	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0003b	d9 5e 08	 fstp	 DWORD PTR [esi+8]
  0003e	e8 00 00 00 00	 call	 ?GetHeightDataCount@CAttributeData@@QBEKXZ ; CAttributeData::GetHeightDataCount
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00043	8b 7e 50	 mov	 edi, DWORD PTR [esi+80]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 158  : 	m_v3HeightDataVector.clear();

  00046	83 c6 4c	 add	 esi, 76			; 0000004cH
  00049	8b d8		 mov	 ebx, eax
  0004b	89 75 fc	 mov	 DWORD PTR __My_data$1$[ebp], esi
  0004e	89 5d ec	 mov	 DWORD PTR _dwHeightDataCount$1$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00051	8b 06		 mov	 eax, DWORD PTR [esi]
  00053	3b c7		 cmp	 eax, edi
  00055	74 10		 je	 SHORT $LN43@RefreshObj

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  00057	56		 push	 esi
  00058	57		 push	 edi
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0005f	8b 3e		 mov	 edi, DWORD PTR [esi]
  00061	83 c4 0c	 add	 esp, 12			; 0000000cH
  00064	89 7e 04	 mov	 DWORD PTR [esi+4], edi
$LN43@RefreshObj:

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00067	8b cf		 mov	 ecx, edi
  00069	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0006e	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00070	f7 e9		 imul	 ecx
  00072	d1 fa		 sar	 edx, 1
  00074	8b c2		 mov	 eax, edx
  00076	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00079	03 c2		 add	 eax, edx
  0007b	89 45 f0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  0007e	3b d8		 cmp	 ebx, eax
  00080	73 1d		 jae	 SHORT $LN49@RefreshObj

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00082	8b 16		 mov	 edx, DWORD PTR [esi]
  00084	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  00087	8b 5d fc	 mov	 ebx, DWORD PTR __My_data$1$[ebp]
  0008a	53		 push	 ebx
  0008b	57		 push	 edi
  0008c	8d 34 82	 lea	 esi, DWORD PTR [edx+eax*4]
  0008f	56		 push	 esi
  00090	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  00095	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 1627 :             return;

  00098	8b f3		 mov	 esi, ebx
  0009a	8b 5d ec	 mov	 ebx, DWORD PTR _dwHeightDataCount$1$[ebp]
  0009d	eb 39		 jmp	 SHORT $LN69@RefreshObj
$LN49@RefreshObj:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  0009f	76 3a		 jbe	 SHORT $LN50@RefreshObj

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  000a1	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a4	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000a9	2b 0e		 sub	 ecx, DWORD PTR [esi]
  000ab	f7 e9		 imul	 ecx
  000ad	d1 fa		 sar	 edx, 1
  000af	8b c2		 mov	 eax, edx
  000b1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b4	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  000b6	3b d8		 cmp	 ebx, eax
  000b8	76 0e		 jbe	 SHORT $LN51@RefreshObj

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  000ba	8d 45 0b	 lea	 eax, DWORD PTR $T3[ebp]
  000bd	8b ce		 mov	 ecx, esi
  000bf	50		 push	 eax
  000c0	53		 push	 ebx
  000c1	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  000c6	eb 13		 jmp	 SHORT $LN50@RefreshObj
$LN51@RefreshObj:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000c8	8b c3		 mov	 eax, ebx
  000ca	2b 45 f0	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
  000cd	56		 push	 esi
  000ce	50		 push	 eax
  000cf	57		 push	 edi
  000d0	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@PAV10@IAAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
  000d5	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN69@RefreshObj:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 160  : 	for (DWORD i = 0; i < dwHeightDataCount; ++i)

  000d8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN50@RefreshObj:
  000db	33 c0		 xor	 eax, eax
  000dd	89 45 f0	 mov	 DWORD PTR _i$1$[ebp], eax
  000e0	85 db		 test	 ebx, ebx
  000e2	0f 84 f8 00 00
	00		 je	 $LN3@RefreshObj
  000e8	33 db		 xor	 ebx, ebx
  000ea	66 0f 1f 44 00
	00		 npad	 6
$LL4@RefreshObj:

; 161  : 	{
; 162  : 		const THeightData * c_pHeightData;
; 163  : 		if (!m_roAttributeData->GetHeightDataPointer(i, &c_pHeightData))

  000f0	8d 4d f4	 lea	 ecx, DWORD PTR _c_pHeightData$2[ebp]
  000f3	51		 push	 ecx
  000f4	50		 push	 eax
  000f5	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]
  000f8	8b 48 58	 mov	 ecx, DWORD PTR [eax+88]
  000fb	e8 00 00 00 00	 call	 ?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ; CAttributeData::GetHeightDataPointer
  00100	85 c0		 test	 eax, eax
  00102	0f 84 c2 00 00
	00		 je	 $LN2@RefreshObj
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00108	8b 45 f4	 mov	 eax, DWORD PTR _c_pHeightData$2[ebp]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0010b	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0010e	2b 48 24	 sub	 ecx, DWORD PTR [eax+36]
  00111	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00116	f7 e9		 imul	 ecx

; 1952 :         return _My_data._Myfirst[_Pos];

  00118	8b 06		 mov	 eax, DWORD PTR [esi]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0011a	d1 fa		 sar	 edx, 1
  0011c	8b fa		 mov	 edi, edx
  0011e	c1 ef 1f	 shr	 edi, 31			; 0000001fH

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00121	8b 0c 18	 mov	 ecx, DWORD PTR [eax+ebx]

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00124	03 fa		 add	 edi, edx

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00126	3b 4c 18 04	 cmp	 ecx, DWORD PTR [eax+ebx+4]
  0012a	74 04		 je	 SHORT $LN20@RefreshObj

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0012c	89 4c 18 04	 mov	 DWORD PTR [eax+ebx+4], ecx
$LN20@RefreshObj:

; 1952 :         return _My_data._Myfirst[_Pos];

  00130	8b 36		 mov	 esi, DWORD PTR [esi]
  00132	03 f3		 add	 esi, ebx

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00134	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00137	8b c8		 mov	 ecx, eax
  00139	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0013b	89 45 08	 mov	 DWORD PTR __Backout$1$sroa$145$1$[ebp], eax
  0013e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00143	f7 e9		 imul	 ecx
  00145	d1 fa		 sar	 edx, 1
  00147	8b c2		 mov	 eax, edx
  00149	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0014c	03 c2		 add	 eax, edx
  0014e	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00151	3b f8		 cmp	 edi, eax
  00153	73 0d		 jae	 SHORT $LN28@RefreshObj

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00155	8b 16		 mov	 edx, DWORD PTR [esi]
  00157	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0015a	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]

; 1625 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1626 :             _Mylast = _Newlast;

  0015d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1627 :             return;

  00160	eb 3c		 jmp	 SHORT $LN29@RefreshObj
$LN28@RefreshObj:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00162	76 3a		 jbe	 SHORT $LN29@RefreshObj

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  00164	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00167	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0016c	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0016e	f7 e9		 imul	 ecx
  00170	d1 fa		 sar	 edx, 1
  00172	8b c2		 mov	 eax, edx
  00174	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00177	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00179	3b f8		 cmp	 edi, eax
  0017b	76 0e		 jbe	 SHORT $LN30@RefreshObj

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  0017d	8d 45 0b	 lea	 eax, DWORD PTR $T4[ebp]
  00180	8b ce		 mov	 ecx, esi
  00182	50		 push	 eax
  00183	57		 push	 edi
  00184	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00189	eb 13		 jmp	 SHORT $LN29@RefreshObj
$LN30@RefreshObj:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  0018b	8b 4d 08	 mov	 ecx, DWORD PTR __Backout$1$sroa$145$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0018e	8b c7		 mov	 eax, edi
  00190	2b 45 e8	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  00193	74 06		 je	 SHORT $LN35@RefreshObj
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00195	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00198	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
$LN35@RefreshObj:
  0019b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
$LN29@RefreshObj:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 171  : 		for (DWORD j = 0; j < dwVertexCount; ++j)

  0019e	85 ff		 test	 edi, edi
  001a0	74 28		 je	 SHORT $LN2@RefreshObj
  001a2	33 f6		 xor	 esi, esi
$LL7@RefreshObj:

; 173  : 			D3DXVec3TransformCoord(&m_v3HeightDataVector[i][j], &c_pHeightData->v3VertexVector[j], &m_matGlobal);

  001a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001a7	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  001aa	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  001ab	8b 45 f4	 mov	 eax, DWORD PTR _c_pHeightData$2[ebp]
  001ae	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  001b1	03 c6		 add	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 173  : 			D3DXVec3TransformCoord(&m_v3HeightDataVector[i][j], &c_pHeightData->v3VertexVector[j], &m_matGlobal);

  001b3	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001b4	8b 41 4c	 mov	 eax, DWORD PTR [ecx+76]
  001b7	8b 04 03	 mov	 eax, DWORD PTR [ebx+eax]
  001ba	03 c6		 add	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 173  : 			D3DXVec3TransformCoord(&m_v3HeightDataVector[i][j], &c_pHeightData->v3VertexVector[j], &m_matGlobal);

  001bc	50		 push	 eax
  001bd	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
  001c2	83 c6 0c	 add	 esi, 12			; 0000000cH
  001c5	83 ef 01	 sub	 edi, 1
  001c8	75 da		 jne	 SHORT $LL7@RefreshObj
$LN2@RefreshObj:

; 160  : 	for (DWORD i = 0; i < dwHeightDataCount; ++i)

  001ca	8b 45 f0	 mov	 eax, DWORD PTR _i$1$[ebp]
  001cd	83 c3 0c	 add	 ebx, 12			; 0000000cH
  001d0	8b 75 fc	 mov	 esi, DWORD PTR __My_data$1$[ebp]
  001d3	40		 inc	 eax
  001d4	89 45 f0	 mov	 DWORD PTR _i$1$[ebp], eax
  001d7	3b 45 ec	 cmp	 eax, DWORD PTR _dwHeightDataCount$1$[ebp]
  001da	0f 82 10 ff ff
	ff		 jb	 $LL4@RefreshObj
$LN3@RefreshObj:
  001e0	5f		 pop	 edi

; 174  : 		}
; 175  : 	}
; 176  : }

  001e1	5e		 pop	 esi
  001e2	5b		 pop	 ebx
  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c2 04 00	 ret	 4
?RefreshObject@CAttributeInstance@@QAEXABUD3DXMATRIX@@@Z ENDP ; CAttributeInstance::RefreshObject
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?SetObjectPointer@CAttributeInstance@@QAEXPAVCAttributeData@@@Z
_TEXT	SEGMENT
_pAttributeData$ = 8					; size = 4
?SetObjectPointer@CAttributeInstance@@QAEXPAVCAttributeData@@@Z PROC ; CAttributeInstance::SetObjectPointer, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f1		 mov	 esi, ecx

; 144  : 	Clear();

  00007	e8 00 00 00 00	 call	 ?Clear@CAttributeInstance@@QAEXXZ ; CAttributeInstance::Clear
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 69   : 		m_pObject = pObject;

  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _pAttributeData$[ebp]
  0000f	8b 7e 58	 mov	 edi, DWORD PTR [esi+88]
  00012	89 4e 58	 mov	 DWORD PTR [esi+88], ecx

; 70   : 
; 71   : 		if (m_pObject)

  00015	85 c9		 test	 ecx, ecx
  00017	74 05		 je	 SHORT $LN4@SetObjectP

; 72   : 		{
; 73   : 			m_pObject->AddReference();

  00019	e8 00 00 00 00	 call	 ?AddReference@CReferenceObject@@QAEXXZ ; CReferenceObject::AddReference
$LN4@SetObjectP:

; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  0001e	85 ff		 test	 edi, edi
  00020	74 07		 je	 SHORT $LN5@SetObjectP

; 77   : 		{
; 78   : 			pOldObject->Release();

  00022	8b cf		 mov	 ecx, edi
  00024	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
$LN5@SetObjectP:
  00029	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 146  : }

  0002a	5e		 pop	 esi
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
?SetObjectPointer@CAttributeInstance@@QAEXPAVCAttributeData@@@Z ENDP ; CAttributeInstance::SetObjectPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?GetDataFileName@CAttributeInstance@@QBEPBDXZ
_TEXT	SEGMENT
?GetDataFileName@CAttributeInstance@@QBEPBDXZ PROC	; CAttributeInstance::GetDataFileName, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4259 :         return _Mypair._Myval2._Myptr();

  00000	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]
  00003	83 c0 0c	 add	 eax, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  00006	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2293 :         if (_Large_string_engaged()) {

  0000a	72 02		 jb	 SHORT $LN8@GetDataFil
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 180  : 	return m_roAttributeData->GetFileName();

  0000c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN8@GetDataFil:

; 181  : }

  0000e	c3		 ret	 0
?GetDataFileName@CAttributeInstance@@QBEPBDXZ ENDP	; CAttributeInstance::GetDataFileName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?IsEmpty@CAttributeInstance@@QBEHXZ
_TEXT	SEGMENT
?IsEmpty@CAttributeInstance@@QBEHXZ PROC		; CAttributeInstance::IsEmpty, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00000	8b 51 4c	 mov	 edx, DWORD PTR [ecx+76]
  00003	33 c0		 xor	 eax, eax
  00005	3b 51 50	 cmp	 edx, DWORD PTR [ecx+80]
  00008	0f 94 c0	 sete	 al
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 211  : }

  0000b	c3		 ret	 0
?IsEmpty@CAttributeInstance@@QBEHXZ ENDP		; CAttributeInstance::IsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ?Clear@CAttributeInstance@@QAEXXZ
_TEXT	SEGMENT
?Clear@CAttributeInstance@@QAEXXZ PROC			; CAttributeInstance::Clear, COMDAT
; _this$ = ecx

; 214  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 215  : 	m_fHeightRadius = 0.0f;
; 216  : 	m_fCollisionRadius = 0.0f;
; 217  : 	D3DXMatrixIdentity(&m_matGlobal);
; 218  : 
; 219  : 	m_v3HeightDataVector.clear();

  00004	8d 7e 4c	 lea	 edi, DWORD PTR [esi+76]
  00007	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0000e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00015	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  0001c	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  00023	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  0002a	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00031	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00038	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0003f	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  00046	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
  0004d	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  00054	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005b	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00062	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  00069	c7 46 48 00 00
	80 3f		 mov	 DWORD PTR [esi+72], 1065353216 ; 3f800000H
  00070	c7 46 34 00 00
	80 3f		 mov	 DWORD PTR [esi+52], 1065353216 ; 3f800000H
  00077	c7 46 20 00 00
	80 3f		 mov	 DWORD PTR [esi+32], 1065353216 ; 3f800000H
  0007e	c7 46 0c 00 00
	80 3f		 mov	 DWORD PTR [esi+12], 1065353216 ; 3f800000H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00085	8b 07		 mov	 eax, DWORD PTR [edi]
  00087	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0008a	3b c1		 cmp	 eax, ecx
  0008c	74 10		 je	 SHORT $LN5@Clear

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

  0008e	57		 push	 edi
  0008f	51		 push	 ecx
  00090	50		 push	 eax
  00091	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@std@@@std@@YAXPAV?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@0@QAV10@AAV?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >

; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00096	8b 07		 mov	 eax, DWORD PTR [edi]
  00098	83 c4 0c	 add	 esp, 12			; 0000000cH
  0009b	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN5@Clear:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 67   : 		CReferenceObject* pOldObject = m_pObject;

  0009e	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 68   : 
; 69   : 		m_pObject = pObject;

  000a1	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi

; 70   : 
; 71   : 		if (m_pObject)
; 72   : 		{
; 73   : 			m_pObject->AddReference();
; 74   : 		}
; 75   : 
; 76   : 		if (pOldObject)

  000aa	85 c9		 test	 ecx, ecx
  000ac	0f 85 00 00 00
	00		 jne	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 222  : }

  000b2	c3		 ret	 0
?Clear@CAttributeInstance@@QAEXXZ ENDP			; CAttributeInstance::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ??1CAttributeInstance@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CAttributeInstance@@UAE@XZ PROC			; CAttributeInstance::~CAttributeInstance, COMDAT
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CAttributeInstance@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CAttributeInstance@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 53   : 		if (m_pObject)

  0002b	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 37   : 	{

  0002e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 53   : 		if (m_pObject)

  00035	85 c9		 test	 ecx, ecx
  00037	74 0c		 je	 SHORT $LN7@CAttribute

; 54   : 		{
; 55   : 			m_pObject->Release();

  00039	e8 00 00 00 00	 call	 ?Release@CReferenceObject@@QAEXXZ ; CReferenceObject::Release

; 56   : 			m_pObject = NULL;

  0003e	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
$LN7@CAttribute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 229  : }

  00045	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00048	e8 00 00 00 00	 call	 ??1?$vector@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@V?$allocator@V?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@@2@@std@@QAE@XZ ; std::vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >::~vector<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >,std::allocator<std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> > > >
  0004d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00057	59		 pop	 ecx
  00058	5e		 pop	 esi
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
  0005d	cc		 int	 3
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
  00061	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CAttributeInstance@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CAttributeInstance@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CAttributeInstance@@UAE@XZ ENDP			; CAttributeInstance::~CAttributeInstance
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp
;	COMDAT ??0CAttributeInstance@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAttributeInstance@@QAE@XZ PROC			; CAttributeInstance::CAttributeInstance, COMDAT
; _this$ = ecx

; 225  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CAttributeInstance@@6B@

; 226  : }

  0000a	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000c	c7 41 4c 00 00
	00 00		 mov	 DWORD PTR [ecx+76], 0
  00013	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], 0
  0001a	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 225  : {

  00021	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ref.h

; 20   : 	CRef() : m_pObject(NULL)

  00024	c7 41 58 00 00
	00 00		 mov	 DWORD PTR [ecx+88], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeInstance.cpp

; 226  : }

  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
??0CAttributeInstance@@QAE@XZ ENDP			; CAttributeInstance::CAttributeInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
