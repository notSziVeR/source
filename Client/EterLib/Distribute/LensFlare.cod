; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\LensFlare.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_C@_0L@FDOKIIIA@flare2?4dds@			; `string'
PUBLIC	??_C@_0L@NFHOPKCO@flare1?4dds@			; `string'
PUBLIC	??_C@_0L@MIHLMKJG@flare6?4dds@			; `string'
PUBLIC	??_C@_0L@IFLDGLJN@flare4?4dds@			; `string'
PUBLIC	??_C@_0L@JILGFLCF@flare3?4dds@			; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JILGFLCF@flare3?4dds@
CONST	SEGMENT
??_C@_0L@JILGFLCF@flare3?4dds@ DB 'flare3.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IFLDGLJN@flare4?4dds@
CONST	SEGMENT
??_C@_0L@IFLDGLJN@flare4?4dds@ DB 'flare4.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIHLMKJG@flare6?4dds@
CONST	SEGMENT
??_C@_0L@MIHLMKJG@flare6?4dds@ DB 'flare6.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NFHOPKCO@flare1?4dds@
CONST	SEGMENT
??_C@_0L@NFHOPKCO@flare1?4dds@ DB 'flare1.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FDOKIIIA@flare2?4dds@
CONST	SEGMENT
??_C@_0L@FDOKIIIA@flare2?4dds@ DB 'flare2.dds', 00H	; `string'
CONST	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?Draw@CFlare@@QAEXMHHHH@Z			; CFlare::Draw
PUBLIC	?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFlare::Init
PUBLIC	??0CFlare@@QAE@XZ				; CFlare::CFlare
PUBLIC	??1CFlare@@UAE@XZ				; CFlare::~CFlare
PUBLIC	?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
PUBLIC	??_GCFlare@@UAEPAXI@Z				; CFlare::`scalar deleting destructor'
PUBLIC	??0CLensFlare@@QAE@XZ				; CLensFlare::CLensFlare
PUBLIC	??1CLensFlare@@UAE@XZ				; CLensFlare::~CLensFlare
PUBLIC	?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z	; CLensFlare::Compute
PUBLIC	?DrawBeforeFlare@CLensFlare@@QAEXXZ		; CLensFlare::DrawBeforeFlare
PUBLIC	?DrawAfterFlare@CLensFlare@@QAEXXZ		; CLensFlare::DrawAfterFlare
PUBLIC	?DrawFlare@CLensFlare@@QAEXXZ			; CLensFlare::DrawFlare
PUBLIC	?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ; CLensFlare::SetMainFlare
PUBLIC	?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CLensFlare::Initialize
PUBLIC	?SetFlareLocation@CLensFlare@@QAEXNN@Z		; CLensFlare::SetFlareLocation
PUBLIC	?SetBrightnesses@CLensFlare@@QAEXMM@Z		; CLensFlare::SetBrightnesses
PUBLIC	?ReadControlPixels@CLensFlare@@QAEXXZ		; CLensFlare::ReadControlPixels
PUBLIC	?AdjustBrightness@CLensFlare@@QAEXXZ		; CLensFlare::AdjustBrightness
PUBLIC	?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z ; CLensFlare::CharacterizeFlare
PUBLIC	?Interpolate@CLensFlare@@IAEMMMM@Z		; CLensFlare::Interpolate
PUBLIC	?ReadDepthPixels@CLensFlare@@AAEXPAM@Z		; CLensFlare::ReadDepthPixels
PUBLIC	?ClampBrightness@CLensFlare@@AAEXXZ		; CLensFlare::ClampBrightness
PUBLIC	??_GCLensFlare@@UAEPAXI@Z			; CLensFlare::`scalar deleting destructor'
PUBLIC	??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
PUBLIC	??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CFlare@@6B@					; CFlare::`vftable'
PUBLIC	??_7CLensFlare@@6B@				; CLensFlare::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CFlare@@6B@				; CFlare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCFlare@@@8				; CFlare `RTTI Type Descriptor'
PUBLIC	??_R3CFlare@@8					; CFlare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CFlare@@8					; CFlare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CFlare@@8				; CFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLensFlare@@6B@				; CLensFlare::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLensFlare@@@8				; CLensFlare `RTTI Type Descriptor'
PUBLIC	??_R3CLensFlare@@8				; CLensFlare::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLensFlare@@8				; CLensFlare::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLensFlare@@8			; CLensFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicCollisionObject@@8	; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicCollisionObject@@@8		; CGraphicCollisionObject `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicCollisionObject@@8			; CGraphicCollisionObject::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	__real@3f000000
PUBLIC	__real@3f59999a
PUBLIC	__real@3f800000
PUBLIC	__real@3fc90fdb
PUBLIC	__real@43610000
PUBLIC	__real@437f0000
PUBLIC	__real@4cbebc20
PUBLIC	__xmm@00000001000000010000000100000001
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixOrthoOffCenterRH@28:PROC
EXTRN	?IsType@CResource@@QAE_NK@Z:PROC		; CResource::IsType
EXTRN	?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ:PROC ; CGraphicTexture::GetD3DTexture
EXTRN	?Type@CGraphicImage@@SAKXZ:PROC			; CGraphicImage::Type
EXTRN	??0CGraphicImageInstance@@QAE@XZ:PROC		; CGraphicImageInstance::CGraphicImageInstance
EXTRN	??1CGraphicImageInstance@@UAE@XZ:PROC		; CGraphicImageInstance::~CGraphicImageInstance
EXTRN	?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z:PROC ; CGraphicImageInstance::SetImagePointer
EXTRN	?IsEmpty@CGraphicImageInstance@@QBE_NXZ:PROC	; CGraphicImageInstance::IsEmpty
EXTRN	?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ:PROC ; CGraphicImageInstance::GetTexturePointer
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderBar2d@CScreen@@QAEXMMMMM@Z:PROC		; CScreen::RenderBar2d
EXTRN	?SetDiffuseColor@CScreen@@QAEXMMMM@Z:PROC	; CScreen::SetDiffuseColor
EXTRN	?ProjectPosition@CScreen@@QAEXMMMPAM0@Z:PROC	; CScreen::ProjectPosition
EXTRN	??_ECFlare@@UAEPAXI@Z:PROC			; CFlare::`vector deleting destructor'
EXTRN	??_ECLensFlare@@UAEPAXI@Z:PROC			; CLensFlare::`vector deleting destructor'
EXTRN	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ:PROC ; CCameraManager::GetCurrentCamera
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z:PROC ; CStateManager::SetTexture
EXTRN	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z:PROC ; CStateManager::SetTextureStageState
EXTRN	?SetFVF@CStateManager@@QAEXK@Z:PROC		; CStateManager::SetFVF
EXTRN	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SaveTransform
EXTRN	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z:PROC ; CStateManager::RestoreTransform
EXTRN	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z:PROC ; CStateManager::SetTransform
EXTRN	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z:PROC ; CStateManager::DrawPrimitiveUP
EXTRN	?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z:PROC ; CResourceManager::GetResourcePointer
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftol3:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD ; CGraphicBase::ms_matIdentity
EXTRN	?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A:ZWORD	; CGraphicBase::ms_matView
EXTRN	?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A:BYTE ; CGraphicBase::ms_Viewport
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A DD 01H DUP (?) ; CSingleton<CResourceManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A DB 0d8H DUP (?) ; g_strFiles
_BSS	ENDS
CRT$XCU	SEGMENT
?g_strFiles$initializer$@@3P6AXXZA DD FLAT:??__Eg_strFiles@@YAXXZ ; g_strFiles$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000100000001
CONST	SEGMENT
__xmm@00000001000000010000000100000001 DB 01H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@4cbebc20
CONST	SEGMENT
__real@4cbebc20 DD 04cbebc20r			; 1e+08
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43610000
CONST	SEGMENT
__real@43610000 DD 043610000r			; 225
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R2CGraphicCollisionObject@@8 DD FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8 ; CGraphicCollisionObject::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R3CGraphicCollisionObject@@8 DD 00H			; CGraphicCollisionObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicCollisionObject@@@8
data$rs	SEGMENT
??_R0?AVCGraphicCollisionObject@@@8 DD FLAT:??_7type_info@@6B@ ; CGraphicCollisionObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicCollisionObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicCollisionObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicCollisionObject@@8 DD FLAT:??_R0?AVCGraphicCollisionObject@@@8 ; CGraphicCollisionObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicCollisionObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CScreen@@8
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
data$rs	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLensFlare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLensFlare@@8 DD FLAT:??_R0?AVCLensFlare@@@8 ; CLensFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R2CLensFlare@@8
rdata$r	SEGMENT
??_R2CLensFlare@@8 DD FLAT:??_R1A@?0A@EA@CLensFlare@@8	; CLensFlare::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicCollisionObject@@8
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLensFlare@@8
rdata$r	SEGMENT
??_R3CLensFlare@@8 DD 00H				; CLensFlare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLensFlare@@@8
data$rs	SEGMENT
??_R0?AVCLensFlare@@@8 DD FLAT:??_7type_info@@6B@	; CLensFlare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLensFlare@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLensFlare@@6B@
rdata$r	SEGMENT
??_R4CLensFlare@@6B@ DD 00H				; CLensFlare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLensFlare@@@8
	DD	FLAT:??_R3CLensFlare@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CFlare@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CFlare@@8 DD FLAT:??_R0?AVCFlare@@@8	; CFlare::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CFlare@@8
rdata$r	ENDS
;	COMDAT ??_R2CFlare@@8
rdata$r	SEGMENT
??_R2CFlare@@8 DD FLAT:??_R1A@?0A@EA@CFlare@@8		; CFlare::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CFlare@@8
rdata$r	SEGMENT
??_R3CFlare@@8 DD 00H					; CFlare::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CFlare@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCFlare@@@8
data$rs	SEGMENT
??_R0?AVCFlare@@@8 DD FLAT:??_7type_info@@6B@		; CFlare `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFlare@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CFlare@@6B@
rdata$r	SEGMENT
??_R4CFlare@@6B@ DD 00H					; CFlare::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCFlare@@@8
	DD	FLAT:??_R3CFlare@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?g_fPosition@@3PAMA DD 0bf0ccccdr		; -0.55	; g_fPosition
	DD	0bf000000r			; -0.5
	DD	0bee66666r			; -0.45
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03f733333r			; 0.95
	DD	03f666666r			; 0.9
	DD	03f800000r			; 1
?g_fWidth@@3PAMA DD 041a00000r			; 20	; g_fWidth
	DD	042000000r			; 32
	DD	041a00000r			; 20
	DD	042000000r			; 32
	DD	042c80000r			; 100
	DD	042000000r			; 32
	DD	041a00000r			; 20
	DD	0437a0000r			; 250
?g_afColors@@3PAY03MA DD 03f800000r		; 1	; g_afColors
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f4ccccdr			; 0.8
	DD	03e99999ar			; 0.3
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f666666r			; 0.9
	DD	03e99999ar			; 0.3
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03f666666r			; 0.9
	DD	03ecccccdr			; 0.4
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
	DD	03f19999ar			; 0.6
	DD	03e99999ar			; 0.3
	DD	03ecccccdr			; 0.4
_DATA	ENDS
;	COMDAT ??_7CLensFlare@@6B@
CONST	SEGMENT
??_7CLensFlare@@6B@ DD FLAT:??_R4CLensFlare@@6B@	; CLensFlare::`vftable'
	DD	FLAT:??_ECLensFlare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CFlare@@6B@
CONST	SEGMENT
??_7CFlare@@6B@ DD FLAT:??_R4CFlare@@6B@		; CFlare::`vftable'
	DD	FLAT:??_ECFlare@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??__Eg_strFiles@@YAXXZ DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$??__Eg_strFiles@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??__Eg_strFiles@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??__Eg_strFiles@@YAXXZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z$0
__ehfuncinfo$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLensFlare@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLensFlare@@QAE@XZ$2
__ehfuncinfo$??0CLensFlare@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CLensFlare@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z PROC ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ENDP ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z PROC ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAUSFlarePiece@CFlare@@PAPAU12@@std@@YAPAPAUSFlarePiece@CFlare@@PAPAU12@00@Z ; std::_Copy_memmove<CFlare::SFlarePiece * *,CFlare::SFlarePiece * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ENDP ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5228 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 415  :             return __builtin_strlen(_First);

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Right$[ebp]

; 5228 : _NODISCARD bool operator!=(const basic_string<_Elem, _Traits, _Alloc>& _Left, _In_z_ const _Elem* const _Right) {

  00006	56		 push	 esi
  00007	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  00008	8b fa		 mov	 edi, edx
  0000a	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]
  0000d	0f 1f 00	 npad	 3
$LL20@operator:
  00010	8a 07		 mov	 al, BYTE PTR [edi]
  00012	47		 inc	 edi
  00013	84 c0		 test	 al, al
  00015	75 f9		 jne	 SHORT $LL20@operator
  00017	2b f9		 sub	 edi, ecx

; 4759 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00019	8b 4d 08	 mov	 ecx, DWORD PTR __Left$[ebp]

; 2301 :         return _BUF_SIZE <= _Myres;

  0001c	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 4759 :         return _Traits_equal<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize, _Ptr, _Traits::length(_Ptr));

  00020	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]

; 2293 :         if (_Large_string_engaged()) {

  00023	72 02		 jb	 SHORT $LN10@operator

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00025	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN10@operator:

; 595  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00027	3b f7		 cmp	 esi, edi
  00029	75 5b		 jne	 SHORT $LN16@operator

; 395  :         return __builtin_memcmp(_First1, _First2, _Count);

  0002b	83 ee 04	 sub	 esi, 4
  0002e	72 11		 jb	 SHORT $LN23@operator
$LL24@operator:
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	3b 02		 cmp	 eax, DWORD PTR [edx]
  00034	75 10		 jne	 SHORT $LN22@operator
  00036	83 c1 04	 add	 ecx, 4
  00039	83 c2 04	 add	 edx, 4
  0003c	83 ee 04	 sub	 esi, 4
  0003f	73 ef		 jae	 SHORT $LL24@operator
$LN23@operator:
  00041	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00044	74 34		 je	 SHORT $LN21@operator
$LN22@operator:
  00046	8a 01		 mov	 al, BYTE PTR [ecx]
  00048	3a 02		 cmp	 al, BYTE PTR [edx]
  0004a	75 27		 jne	 SHORT $LN25@operator
  0004c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0004f	74 29		 je	 SHORT $LN21@operator
  00051	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00054	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00057	75 1a		 jne	 SHORT $LN25@operator
  00059	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0005c	74 1c		 je	 SHORT $LN21@operator
  0005e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00061	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00064	75 0d		 jne	 SHORT $LN25@operator
  00066	83 fe ff	 cmp	 esi, -1
  00069	74 0f		 je	 SHORT $LN21@operator
  0006b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0006e	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00071	74 07		 je	 SHORT $LN21@operator
$LN25@operator:
  00073	1b c0		 sbb	 eax, eax
  00075	83 c8 01	 or	 eax, 1
  00078	eb 02		 jmp	 SHORT $LN26@operator
$LN21@operator:
  0007a	33 c0		 xor	 eax, eax
$LN26@operator:

; 595  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  0007c	85 c0		 test	 eax, eax
  0007e	75 06		 jne	 SHORT $LN16@operator
  00080	5f		 pop	 edi
  00081	32 c0		 xor	 al, al

; 5229 :     return !(_Left == _Right);
; 5230 : }

  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN16@operator:
  00086	5f		 pop	 edi

; 595  :     return _Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0;

  00087	b0 01		 mov	 al, 1

; 5229 :     return !(_Left == _Right);
; 5230 : }

  00089	5e		 pop	 esi
  0008a	5d		 pop	 ebp
  0008b	c3		 ret	 0
??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fg_strFiles@@YAXXZ
text$yd	SEGMENT
??__Fg_strFiles@@YAXXZ PROC				; `dynamic atexit destructor for 'g_strFiles'', COMDAT
  00000	68 00 00 00 00	 push	 OFFSET ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00005	6a 09		 push	 9
  00007	6a 18		 push	 24			; 00000018H
  00009	68 00 00 00 00	 push	 OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0000e	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00013	c3		 ret	 0
??__Fg_strFiles@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_strFiles''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ??__Eg_strFiles@@YAXXZ
text$di	SEGMENT
__$EHRec$ = -12						; size = 12
??__Eg_strFiles@@YAXXZ PROC				; `dynamic initializer for 'g_strFiles'', COMDAT

; 49   : };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??__Eg_strFiles@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 39   : {
; 40   : 	"flare2.dds",

  00022	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 41   : 	"flare1.dds",

  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NFHOPKCO@flare1?4dds@
  00036	b9 18 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
  0003b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00042	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 42   : 	"flare2.dds",

  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  0004c	b9 30 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+48
  00051	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00055	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 43   : 	"flare1.dds",

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NFHOPKCO@flare1?4dds@
  0005f	b9 48 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+72
  00064	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00068	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 44   : 	"flare6.dds",

  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MIHLMKJG@flare6?4dds@
  00072	b9 60 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+96
  00077	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0007b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 45   : 	"flare4.dds",

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IFLDGLJN@flare4?4dds@
  00085	b9 78 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+120
  0008a	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0008e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 46   : 	"flare2.dds",

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FDOKIIIA@flare2?4dds@
  00098	b9 90 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+144
  0009d	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  000a1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 47   : 	"flare3.dds",

  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JILGFLCF@flare3?4dds@
  000ab	b9 a8 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+168
  000b0	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  000b4	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 48   : 	""

  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000be	b9 c0 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+192
  000c3	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  000c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000cc	68 00 00 00 00	 push	 OFFSET ??__Fg_strFiles@@YAXXZ ; `dynamic atexit destructor for 'g_strFiles''
  000d1	e8 00 00 00 00	 call	 _atexit
  000d6	83 c4 04	 add	 esp, 4

; 38   : static std::string g_strFiles[] =

  000d9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000dc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e3	59		 pop	 ecx
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c3		 ret	 0
text$di	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??__Eg_strFiles@@YAXXZ$0:
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00005	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$1:
  0000a	b9 18 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+24
  0000f	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$2:
  00014	b9 30 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+48
  00019	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$3:
  0001e	b9 48 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+72
  00023	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$4:
  00028	b9 60 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+96
  0002d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$5:
  00032	b9 78 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+120
  00037	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$6:
  0003c	b9 90 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+144
  00041	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??__Eg_strFiles@@YAXXZ$7:
  00046	b9 a8 00 00 00	 mov	 ecx, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A+168
  0004b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
__ehhandler$??__Eg_strFiles@@YAXXZ:
  00055	90		 npad	 1
  00056	90		 npad	 1
  00057	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00061	33 c8		 xor	 ecx, eax
  00063	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00068	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??__Eg_strFiles@@YAXXZ
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??__Eg_strFiles@@YAXXZ ENDP				; `dynamic initializer for 'g_strFiles''
; Function compile flags: /Ogtp
;	COMDAT ??_GCLensFlare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLensFlare@@UAEPAXI@Z PROC				; CLensFlare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLensFlare@@UAE@XZ	; CLensFlare::~CLensFlare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 7c		 push	 124			; 0000007cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLensFlare@@UAEPAXI@Z ENDP				; CLensFlare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?ClampBrightness@CLensFlare@@AAEXXZ
_TEXT	SEGMENT
?ClampBrightness@CLensFlare@@AAEXXZ PROC		; CLensFlare::ClampBrightness, COMDAT
; _this$ = ecx

; 473  : 	// before
; 474  : 	if (m_fBeforeBright < 0.0f)

  00000	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  00005	0f 57 c9	 xorps	 xmm1, xmm1
  00008	0f 2f ca	 comiss	 xmm1, xmm2
  0000b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
  00013	76 05		 jbe	 SHORT $LN2@ClampBrigh

; 475  : 	{
; 476  : 		m_fBeforeBright = 0.0f;
; 477  : 	}

  00015	0f 57 d2	 xorps	 xmm2, xmm2
  00018	eb 08		 jmp	 SHORT $LN4@ClampBrigh
$LN2@ClampBrigh:

; 478  : 	else if (m_fBeforeBright > 1.0f)

  0001a	0f 2f d3	 comiss	 xmm2, xmm3
  0001d	76 03		 jbe	 SHORT $LN4@ClampBrigh

; 479  : 	{
; 480  : 		m_fBeforeBright = 1.0f;

  0001f	0f 28 d3	 movaps	 xmm2, xmm3
$LN4@ClampBrigh:

; 481  : 	}
; 482  : 
; 483  : 	m_fBeforeBright *= m_fMaxBrightness;

  00022	f3 0f 10 61 40	 movss	 xmm4, DWORD PTR [ecx+64]
  00027	0f 28 c4	 movaps	 xmm0, xmm4
  0002a	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0002e	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 484  : 
; 485  : 	if (m_fAfterBright < 0.0f)

  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2f c8	 comiss	 xmm1, xmm0
  0003b	77 0b		 ja	 SHORT $LN7@ClampBrigh

; 486  : 	{
; 487  : 		m_fAfterBright = 0.0f;
; 488  : 	}
; 489  : 	else if (m_fAfterBright > 1.0f)

  0003d	0f 2f c3	 comiss	 xmm0, xmm3
  00040	0f 28 c8	 movaps	 xmm1, xmm0
  00043	76 03		 jbe	 SHORT $LN7@ClampBrigh

; 490  : 	{
; 491  : 		m_fAfterBright = 1.0f;

  00045	0f 28 cb	 movaps	 xmm1, xmm3
$LN7@ClampBrigh:

; 492  : 	}
; 493  : 
; 494  : 	m_fAfterBright *= m_fMaxBrightness;

  00048	f3 0f 59 e1	 mulss	 xmm4, xmm1
  0004c	f3 0f 11 61 18	 movss	 DWORD PTR [ecx+24], xmm4

; 495  : }

  00051	c3		 ret	 0
?ClampBrightness@CLensFlare@@AAEXXZ ENDP		; CLensFlare::ClampBrightness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?ReadDepthPixels@CLensFlare@@AAEXPAM@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?ReadDepthPixels@CLensFlare@@AAEXPAM@Z PROC		; CLensFlare::ReadDepthPixels, COMDAT
; _this$ = ecx

; 450  : 	/*
; 451  : 	LPDIRECT3DSURFACE9 lpSurface;
; 452  : 	if (FAILED(ms_lpd3dDevice->GetDepthStencilSurface(&lpSurface)))
; 453  : 		assert(false);
; 454  : 
; 455  : 	D3DLOCKED_RECT rect;
; 456  : 	lpSurface->LockRect(&rect, NULL, D3DLOCK_READONLY | D3DLOCK_NO_DIRTY_UPDATE);
; 457  : 
; 458  : 	lpSurface->UnlockRect();
; 459  : 	*/
; 460  : 	/*
; 461  : 	glReadPixels(GLint(m_afFlareWinPos[0] - c_nDepthTestDimension / 2),
; 462  : 				 GLint(m_afFlareWinPos[1] - c_nDepthTestDimension / 2),
; 463  : 				 c_nDepthTestDimension, c_nDepthTestDimension,
; 464  : 				 GL_DEPTH_COMPONENT, GL_FLOAT, pPixels);
; 465  : 	*/
; 466  : }

  00000	c2 04 00	 ret	 4
?ReadDepthPixels@CLensFlare@@AAEXPAM@Z ENDP		; CLensFlare::ReadDepthPixels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?Interpolate@CLensFlare@@IAEMMMM@Z
_TEXT	SEGMENT
_fStart$ = 8						; size = 4
tv128 = 12						; size = 4
_fEnd$ = 12						; size = 4
_fPercent$ = 16						; size = 4
?Interpolate@CLensFlare@@IAEMMMM@Z PROC			; CLensFlare::Interpolate, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 	return fStart + (fEnd - fStart) * fPercent;

  00003	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fEnd$[ebp]
  00008	f3 0f 5c 4d 08	 subss	 xmm1, DWORD PTR _fStart$[ebp]
  0000d	f3 0f 59 4d 10	 mulss	 xmm1, DWORD PTR _fPercent$[ebp]
  00012	f3 0f 58 4d 08	 addss	 xmm1, DWORD PTR _fStart$[ebp]
  00017	f3 0f 11 4d 0c	 movss	 DWORD PTR tv128[ebp], xmm1
  0001c	d9 45 0c	 fld	 DWORD PTR tv128[ebp]

; 121  : }

  0001f	5d		 pop	 ebp
  00020	c2 0c 00	 ret	 12			; 0000000cH
?Interpolate@CLensFlare@@IAEMMMM@Z ENDP			; CLensFlare::Interpolate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z
_TEXT	SEGMENT
_bEnabled$ = 8						; size = 1
_bShowMainFlare$ = 12					; size = 1
_fMaxBrightness$ = 16					; size = 4
_c_rColor$ = 20						; size = 4
?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z PROC ; CLensFlare::CharacterizeFlare, COMDAT
; _this$ = ecx

; 357  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 358  : 	m_bEnabled = bEnabled;

  00003	8a 45 08	 mov	 al, BYTE PTR _bEnabled$[ebp]

; 359  : 	m_bShowMainFlare = bShowMainFlare;
; 360  : 	m_fMaxBrightness = fMaxBrightness;
; 361  : 
; 362  : 	m_afColor[0] = c_rColor.r;

  00006	8b 55 14	 mov	 edx, DWORD PTR _c_rColor$[ebp]
  00009	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fMaxBrightness$[ebp]
  0000e	88 41 3c	 mov	 BYTE PTR [ecx+60], al
  00011	8a 45 0c	 mov	 al, BYTE PTR _bShowMainFlare$[ebp]
  00014	88 41 3d	 mov	 BYTE PTR [ecx+61], al
  00017	f3 0f 11 41 40	 movss	 DWORD PTR [ecx+64], xmm0
  0001c	8b 02		 mov	 eax, DWORD PTR [edx]
  0001e	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 363  : 	m_afColor[1] = c_rColor.g;

  00021	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00024	89 41 48	 mov	 DWORD PTR [ecx+72], eax

; 364  : 	m_afColor[2] = c_rColor.b;

  00027	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0002a	89 41 4c	 mov	 DWORD PTR [ecx+76], eax

; 365  : }

  0002d	5d		 pop	 ebp
  0002e	c2 10 00	 ret	 16			; 00000010H
?CharacterizeFlare@CLensFlare@@QAEX_N0MABUD3DXCOLOR@@@Z ENDP ; CLensFlare::CharacterizeFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?AdjustBrightness@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?AdjustBrightness@CLensFlare@@QAEXXZ PROC		; CLensFlare::AdjustBrightness, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	56		 push	 esi
  0000b	57		 push	 edi

; 426  : 	if (m_bEnabled)

  0000c	80 7b 3c 00	 cmp	 BYTE PTR [ebx+60], 0
  00010	0f 84 6d 01 00
	00		 je	 $LN5@AdjustBrig

; 433  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00016	8b 73 38	 mov	 esi, DWORD PTR [ebx+56]
  00019	33 d2		 xor	 edx, edx
  0001b	8b 7b 34	 mov	 edi, DWORD PTR [ebx+52]
  0001e	0f 57 db	 xorps	 xmm3, xmm3
  00021	0f 28 25 00 00
	00 00		 movaps	 xmm4, XMMWORD PTR __xmm@00000001000000010000000100000001
  00028	0f 57 d2	 xorps	 xmm2, xmm2
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@AdjustBrig:
  00030	0f 10 04 97	 movups	 xmm0, XMMWORD PTR [edi+edx*4]
  00034	0f 10 0c 96	 movups	 xmm1, XMMWORD PTR [esi+edx*4]
  00038	0f c2 c8 04	 cmpneqps xmm1, xmm0

; 434  : 			{
; 435  : 				++nDifferent;

  0003c	0f 28 c4	 movaps	 xmm0, xmm4
  0003f	66 0f fe c3	 paddd	 xmm0, xmm3
  00043	66 0f db c1	 pand	 xmm0, xmm1
  00047	66 0f df cb	 pandn	 xmm1, xmm3
  0004b	66 0f eb c1	 por	 xmm0, xmm1
  0004f	0f 10 4c 97 10	 movups	 xmm1, XMMWORD PTR [edi+edx*4+16]
  00054	0f 28 d8	 movaps	 xmm3, xmm0
  00057	0f 10 44 96 10	 movups	 xmm0, XMMWORD PTR [esi+edx*4+16]
  0005c	83 c2 08	 add	 edx, 8
  0005f	0f c2 c8 04	 cmpneqps xmm1, xmm0
  00063	0f 28 c4	 movaps	 xmm0, xmm4
  00066	66 0f fe c2	 paddd	 xmm0, xmm2
  0006a	66 0f db c1	 pand	 xmm0, xmm1
  0006e	66 0f df ca	 pandn	 xmm1, xmm2
  00072	66 0f eb c1	 por	 xmm0, xmm1
  00076	0f 28 d0	 movaps	 xmm2, xmm0
  00079	81 fa e0 00 00
	00		 cmp	 edx, 224		; 000000e0H
  0007f	7c af		 jl	 SHORT $LL4@AdjustBrig

; 427  : 	{
; 428  : 		ReadDepthPixels(m_pTestPixels);
; 429  : 
; 430  : 		int nDifferent = 0;

  00081	66 0f fe d3	 paddd	 xmm2, xmm3
  00085	0f 28 c2	 movaps	 xmm0, xmm2
  00088	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0008d	66 0f fe d0	 paddd	 xmm2, xmm0
  00091	0f 10 c2	 movups	 xmm0, xmm2
  00094	66 0f 73 d8 04	 psrldq	 xmm0, 4
  00099	66 0f fe d0	 paddd	 xmm2, xmm0
  0009d	66 0f 7e d1	 movd	 ecx, xmm2

; 431  : 
; 432  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  000a1	81 fa e1 00 00
	00		 cmp	 edx, 225		; 000000e1H
  000a7	0f 8d 8e 00 00
	00		 jge	 $LN19@AdjustBrig
  000ad	b8 e1 00 00 00	 mov	 eax, 225		; 000000e1H
  000b2	2b c2		 sub	 eax, edx
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	7c 60		 jl	 SHORT $LC20@AdjustBrig
  000b9	0f 1f 80 00 00
	00 00		 npad	 7

; 433  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

$LL25@AdjustBrig:
  000c0	f3 0f 10 04 96	 movss	 xmm0, DWORD PTR [esi+edx*4]
  000c5	0f 2e 04 97	 ucomiss xmm0, DWORD PTR [edi+edx*4]
  000c9	9f		 lahf
  000ca	f6 c4 44	 test	 ah, 68			; 00000044H
  000cd	7b 01		 jnp	 SHORT $LN21@AdjustBrig

; 434  : 			{
; 435  : 				++nDifferent;

  000cf	41		 inc	 ecx
$LN21@AdjustBrig:

; 433  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000d0	f3 0f 10 44 96
	04		 movss	 xmm0, DWORD PTR [esi+edx*4+4]
  000d6	0f 2e 44 97 04	 ucomiss xmm0, DWORD PTR [edi+edx*4+4]
  000db	9f		 lahf
  000dc	f6 c4 44	 test	 ah, 68			; 00000044H
  000df	7b 01		 jnp	 SHORT $LN22@AdjustBrig

; 434  : 			{
; 435  : 				++nDifferent;

  000e1	41		 inc	 ecx
$LN22@AdjustBrig:

; 433  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000e2	f3 0f 10 44 96
	08		 movss	 xmm0, DWORD PTR [esi+edx*4+8]
  000e8	0f 2e 44 97 08	 ucomiss xmm0, DWORD PTR [edi+edx*4+8]
  000ed	9f		 lahf
  000ee	f6 c4 44	 test	 ah, 68			; 00000044H
  000f1	7b 01		 jnp	 SHORT $LN23@AdjustBrig

; 434  : 			{
; 435  : 				++nDifferent;

  000f3	41		 inc	 ecx
$LN23@AdjustBrig:

; 433  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  000f4	f3 0f 10 44 96
	0c		 movss	 xmm0, DWORD PTR [esi+edx*4+12]
  000fa	0f 2e 44 97 0c	 ucomiss xmm0, DWORD PTR [edi+edx*4+12]
  000ff	9f		 lahf
  00100	f6 c4 44	 test	 ah, 68			; 00000044H
  00103	7b 01		 jnp	 SHORT $LN24@AdjustBrig

; 434  : 			{
; 435  : 				++nDifferent;

  00105	41		 inc	 ecx
$LN24@AdjustBrig:
  00106	83 c2 04	 add	 edx, 4
  00109	81 fa de 00 00
	00		 cmp	 edx, 222		; 000000deH
  0010f	7c af		 jl	 SHORT $LL25@AdjustBrig

; 431  : 
; 432  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00111	81 fa e1 00 00
	00		 cmp	 edx, 225		; 000000e1H
  00117	7d 22		 jge	 SHORT $LN19@AdjustBrig
$LC20@AdjustBrig:
  00119	c1 e2 02	 shl	 edx, 2
  0011c	0f 1f 40 00	 npad	 4
$LC30@AdjustBrig:

; 433  : 			if (m_pTestPixels[i] != m_pControlPixels[i])

  00120	f3 0f 10 04 32	 movss	 xmm0, DWORD PTR [edx+esi]
  00125	0f 2e 04 3a	 ucomiss xmm0, DWORD PTR [edx+edi]
  00129	9f		 lahf
  0012a	f6 c4 44	 test	 ah, 68			; 00000044H
  0012d	7b 01		 jnp	 SHORT $LN13@AdjustBrig

; 434  : 			{
; 435  : 				++nDifferent;

  0012f	41		 inc	 ecx
$LN13@AdjustBrig:

; 431  : 
; 432  : 		for (int i = 0; i < c_nDepthTestDimension * c_nDepthTestDimension; ++i)

  00130	83 c2 04	 add	 edx, 4
  00133	81 fa 84 03 00
	00		 cmp	 edx, 900		; 00000384H
  00139	7c e5		 jl	 SHORT $LC30@AdjustBrig
$LN19@AdjustBrig:
  0013b	66 0f 6e c1	 movd	 xmm0, ecx
  0013f	0f 57 c9	 xorps	 xmm1, xmm1

; 436  : 			}
; 437  : 
; 438  : 		float fAdjust = (static_cast<float>(nDifferent) / (c_nDepthTestDimension * c_nDepthTestDimension));

  00142	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00145	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@43610000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  0014d	0f 5a c0	 cvtps2pd xmm0, xmm0
  00150	66 0f 2e c8	 ucomisd xmm1, xmm0
  00154	77 06		 ja	 SHORT $LN32@AdjustBrig
  00156	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0015a	eb 05		 jmp	 SHORT $LN33@AdjustBrig
$LN32@AdjustBrig:
  0015c	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN33@AdjustBrig:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 440  : 		m_fAfterBright *= 1.0f - fAdjust;

  00161	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00169	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 439  : 		fAdjust = sqrtf(fAdjust) * 0.85f;

  0016d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f59999a

; 440  : 		m_fAfterBright *= 1.0f - fAdjust;

  00175	f3 0f 5c c8	 subss	 xmm1, xmm0
  00179	f3 0f 59 4b 18	 mulss	 xmm1, DWORD PTR [ebx+24]
  0017e	f3 0f 11 4b 18	 movss	 DWORD PTR [ebx+24], xmm1
$LN5@AdjustBrig:

; 441  : 	}
; 442  : }

  00183	5f		 pop	 edi
  00184	5e		 pop	 esi
  00185	5b		 pop	 ebx
  00186	8b e5		 mov	 esp, ebp
  00188	5d		 pop	 ebp
  00189	c3		 ret	 0
?AdjustBrightness@CLensFlare@@QAEXXZ ENDP		; CLensFlare::AdjustBrightness
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?ReadControlPixels@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?ReadControlPixels@CLensFlare@@QAEXXZ PROC		; CLensFlare::ReadControlPixels, COMDAT
; _this$ = ecx

; 414  : 	if (m_bEnabled)
; 415  : 	{
; 416  : 		ReadDepthPixels(m_pControlPixels);
; 417  : 	}
; 418  : }

  00000	c2 00 00	 ret	 0
?ReadControlPixels@CLensFlare@@QAEXXZ ENDP		; CLensFlare::ReadControlPixels
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?SetBrightnesses@CLensFlare@@QAEXMM@Z
_TEXT	SEGMENT
_fBeforeBright$ = 8					; size = 4
_fAfterBright$ = 12					; size = 4
?SetBrightnesses@CLensFlare@@QAEXMM@Z PROC		; CLensFlare::SetBrightnesses, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 399  : 	if (m_bEnabled)

  00003	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00007	74 19		 je	 SHORT $LN2@SetBrightn

; 400  : 	{
; 401  : 		m_fBeforeBright = fBeforeBright;

  00009	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fBeforeBright$[ebp]
  0000e	f3 0f 11 41 14	 movss	 DWORD PTR [ecx+20], xmm0

; 402  : 		m_fAfterBright = fAfterBright;

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fAfterBright$[ebp]
  00018	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0

; 403  : 
; 404  : 		ClampBrightness();

  0001d	e8 00 00 00 00	 call	 ?ClampBrightness@CLensFlare@@AAEXXZ ; CLensFlare::ClampBrightness
$LN2@SetBrightn:

; 405  : 	}
; 406  : }

  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
?SetBrightnesses@CLensFlare@@QAEXMM@Z ENDP		; CLensFlare::SetBrightnesses
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?SetFlareLocation@CLensFlare@@QAEXNN@Z
_TEXT	SEGMENT
_dX$ = 8						; size = 8
_dY$ = 16						; size = 8
?SetFlareLocation@CLensFlare@@QAEXNN@Z PROC		; CLensFlare::SetFlareLocation, COMDAT
; _this$ = ecx

; 382  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 383  : 	if (m_bEnabled)

  00003	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00007	74 66		 je	 SHORT $LN2@SetFlareLo

; 384  : 	{
; 385  : 		m_afFlareWinPos[0] = float(dX);

  00009	f2 0f 10 4d 08	 movsd	 xmm1, QWORD PTR _dX$[ebp]
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	f2 0f 10 55 10	 movsd	 xmm2, QWORD PTR _dY$[ebp]
  00016	66 0f 5a c9	 cvtpd2ps xmm1, xmm1

; 386  : 		m_afFlareWinPos[1] = float(dY);

  0001a	66 0f 5a d2	 cvtpd2ps xmm2, xmm2
  0001e	f3 0f 11 49 0c	 movss	 DWORD PTR [ecx+12], xmm1
  00023	f3 0f 11 51 10	 movss	 DWORD PTR [ecx+16], xmm2

; 387  : 
; 388  : 		m_afFlarePos[0] = float(dX) / ms_Viewport.Width;

  00028	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+8
  0002d	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  0003d	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00041	f3 0f 5e c8	 divss	 xmm1, xmm0
  00045	0f 57 c0	 xorps	 xmm0, xmm0
  00048	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1

; 389  : 		m_afFlarePos[1] = float(dY) / ms_Viewport.Height;

  0004d	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+12
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00059	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00062	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00066	f3 0f 5e d0	 divss	 xmm2, xmm0
  0006a	f3 0f 11 51 08	 movss	 DWORD PTR [ecx+8], xmm2
$LN2@SetFlareLo:

; 390  : 	}
; 391  : }

  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
?SetFlareLocation@CLensFlare@@QAEXNN@Z ENDP		; CLensFlare::SetFlareLocation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_strPath$ = 8						; size = 24
?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CLensFlare::Initialize, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 372  : 	if (m_bEnabled)

  00024	80 79 3c 00	 cmp	 BYTE PTR [ecx+60], 0
  00028	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0002f	74 18		 je	 SHORT $LN2@Initialize

; 373  : 	{
; 374  : 		m_cFlare.Init(strPath);

  00031	83 ec 18	 sub	 esp, 24			; 00000018H
  00034	8d 71 24	 lea	 esi, DWORD PTR [ecx+36]
  00037	8d 45 08	 lea	 eax, DWORD PTR _strPath$[ebp]
  0003a	8b cc		 mov	 ecx, esp
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CFlare::Init
$LN2@Initialize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00049	8b 4d 1c	 mov	 ecx, DWORD PTR _strPath$[ebp+20]
  0004c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0004f	72 28		 jb	 SHORT $LN18@Initialize
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00051	8b 55 08	 mov	 edx, DWORD PTR _strPath$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00054	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00055	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00057	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005d	72 10		 jb	 SHORT $LN28@Initialize

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00062	83 c1 23	 add	 ecx, 35			; 00000023H
  00065	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00067	83 c0 fc	 add	 eax, -4			; fffffffcH
  0006a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0006d	77 1c		 ja	 SHORT $LN37@Initialize
$LN28@Initialize:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006f	51		 push	 ecx
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00076	83 c4 08	 add	 esp, 8
$LN18@Initialize:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 376  : }

  00079	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00083	59		 pop	 ecx
  00084	5e		 pop	 esi
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c2 18 00	 ret	 24			; 00000018H
$LN37@Initialize:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN35@Initialize:
  00090	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Initialize@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CLensFlare::Initialize
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_strSunFile$ = 8					; size = 24
_fSunSize$ = 32						; size = 4
?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z PROC ; CLensFlare::SetMainFlare, COMDAT
; _this$ = ecx

; 292  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 293  : 	if (m_bEnabled && m_bShowMainFlare)

  00026	80 7f 3c 00	 cmp	 BYTE PTR [edi+60], 0
  0002a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00031	74 3f		 je	 SHORT $LN2@SetMainFla
  00033	80 7f 3d 00	 cmp	 BYTE PTR [edi+61], 0
  00037	74 39		 je	 SHORT $LN2@SetMainFla
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00039	83 7d 1c 10	 cmp	 DWORD PTR _strSunFile$[ebp+20], 16 ; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  0003d	8d 45 08	 lea	 eax, DWORD PTR _strSunFile$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 295  : 		m_fSunSize = fSunSize;

  00040	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _fSunSize$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00045	0f 43 45 08	 cmovae	 eax, DWORD PTR _strSunFile$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 295  : 		m_fSunSize = fSunSize;

  00049	f3 0f 11 47 20	 movss	 DWORD PTR [edi+32], xmm0

; 296  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer(strSunFile.c_str());

  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  00054	50		 push	 eax
  00055	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
  0005a	8b f0		 mov	 esi, eax

; 297  : 
; 298  : 		if (!pResource->IsType(CGraphicImage::Type()))

  0005c	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  00061	50		 push	 eax
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType

; 299  : 		{
; 300  : 			assert(false);
; 301  : 		}
; 302  : 
; 303  : 		m_SunFlareImageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  00069	56		 push	 esi
  0006a	8d 4f 54	 lea	 ecx, DWORD PTR [edi+84]
  0006d	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer
$LN2@SetMainFla:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00072	8b 4d 1c	 mov	 ecx, DWORD PTR _strSunFile$[ebp+20]
  00075	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00078	72 28		 jb	 SHORT $LN18@SetMainFla
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007a	8b 55 08	 mov	 edx, DWORD PTR _strSunFile$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0007d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0007e	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00080	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00086	72 10		 jb	 SHORT $LN28@SetMainFla

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00088	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0008b	83 c1 23	 add	 ecx, 35			; 00000023H
  0008e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00090	83 c0 fc	 add	 eax, -4			; fffffffcH
  00093	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00096	77 1d		 ja	 SHORT $LN44@SetMainFla
$LN28@SetMainFla:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00098	51		 push	 ecx
  00099	52		 push	 edx
  0009a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009f	83 c4 08	 add	 esp, 8
$LN18@SetMainFla:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 305  : }

  000a2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ac	59		 pop	 ecx
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c2 1c 00	 ret	 28			; 0000001cH
$LN44@SetMainFla:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN42@SetMainFla:
  000ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strSunFile$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?SetMainFlare@CLensFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@M@Z ENDP ; CLensFlare::SetMainFlare
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?DrawFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
_matProj$1 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
?DrawFlare@CLensFlare@@QAEXXZ PROC			; CLensFlare::DrawFlare, COMDAT
; _this$ = ecx

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx

; 313  : 	if (m_bEnabled && m_bFlareVisible && m_bDrawFlare && m_fAfterBright != 0.0f)

  00013	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00017	0f 84 b0 01 00
	00		 je	 $LN2@DrawFlare
  0001d	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  00021	0f 84 a6 01 00
	00		 je	 $LN2@DrawFlare
  00027	80 7e 1d 00	 cmp	 BYTE PTR [esi+29], 0
  0002b	0f 84 9c 01 00
	00		 je	 $LN2@DrawFlare
  00031	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  00036	0f 57 c0	 xorps	 xmm0, xmm0
  00039	0f 2e c8	 ucomiss xmm1, xmm0
  0003c	9f		 lahf
  0003d	f6 c4 44	 test	 ah, 68			; 00000044H
  00040	0f 8b 87 01 00
	00		 jnp	 $LN2@DrawFlare

; 314  : 	{
; 315  : 		//glPushAttrib(GL_ENABLE_BIT);
; 316  : 		STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE); // glDisable(GL_LIGHTING);

  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0004c	6a 00		 push	 0
  0004e	68 89 00 00 00	 push	 137			; 00000089H
  00053	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 317  : 		STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, FALSE); // glDisable(GL_DEPTH_TEST);

  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0005e	6a 00		 push	 0
  00060	6a 07		 push	 7
  00062	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 318  : 		STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE); // glDisable(GL_CULL_FACE);

  00067	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0006d	6a 01		 push	 1
  0006f	6a 16		 push	 22			; 00000016H
  00071	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 319  : 		STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE); // glDisable(GL_ALPHA_TEST);

  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0007c	6a 00		 push	 0
  0007e	6a 0f		 push	 15			; 0000000fH
  00080	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 320  : 		STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE); // glEnable(GL_BLEND);

  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008b	6a 01		 push	 1
  0008d	6a 1b		 push	 27			; 0000001bH
  0008f	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 321  : 
; 322  : 		D3DXMATRIX matProj;
; 323  : 		D3DXMatrixOrthoOffCenterRH(&matProj, 0.0f, ms_Viewport.Width, ms_Viewport.Height, 0.0f, -1.0f, 1.0f);

  00094	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+12
  00099	83 ec 18	 sub	 esp, 24			; 00000018H
  0009c	66 0f 6e c0	 movd	 xmm0, eax
  000a0	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000a4	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR [esp+20], 1065353216 ; 3f800000H
  000ac	c7 44 24 10 00
	00 80 bf	 mov	 DWORD PTR [esp+16], -1082130432 ; bf800000H
  000b4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000b7	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  000bf	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000c8	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+8
  000cd	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000d1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000d7	66 0f 6e c0	 movd	 xmm0, eax
  000db	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000df	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e2	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  000eb	8d 45 bc	 lea	 eax, DWORD PTR _matProj$1[ebp]
  000ee	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  000f2	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f8	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 324  : 		STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProj);

  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0010b	8d 45 bc	 lea	 eax, DWORD PTR _matProj$1[ebp]
  0010e	50		 push	 eax
  0010f	6a 03		 push	 3
  00111	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 325  : 		STATEMANAGER.SaveTransform(D3DTS_VIEW, &ms_matIdentity);

  00116	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0011c	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00121	6a 02		 push	 2
  00123	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 326  : 
; 327  : 		STATEMANAGER.SetTransform(D3DTS_WORLD, &ms_matIdentity);

  00128	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0012e	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  00133	68 00 01 00 00	 push	 256			; 00000100H
  00138	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 328  : 		//glMatrixMode(GL_MODELVIEW);
; 329  : 		//glLoadIdentity();
; 330  : 
; 331  : 		//glDisable(GL_TEXTURE_2D);
; 332  : 		DrawAfterFlare();

  0013d	8b ce		 mov	 ecx, esi
  0013f	e8 00 00 00 00	 call	 ?DrawAfterFlare@CLensFlare@@QAEXXZ ; CLensFlare::DrawAfterFlare

; 333  : 
; 334  : 		//glEnable(GL_TEXTURE_2D);
; 335  : 		m_cFlare.Draw(m_fAfterBright,

  00144	f3 0f 2c 46 10	 cvttss2si eax, DWORD PTR [esi+16]
  00149	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  0014e	50		 push	 eax
  0014f	f3 0f 2c 46 0c	 cvttss2si eax, DWORD PTR [esi+12]
  00154	50		 push	 eax
  00155	ff 35 0c 00 00
	00		 push	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+12
  0015b	ff 35 08 00 00
	00		 push	 DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+8
  00161	51		 push	 ecx
  00162	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	e8 00 00 00 00	 call	 ?Draw@CFlare@@QAEXMHHHH@Z ; CFlare::Draw

; 336  : 					  ms_Viewport.Width,
; 337  : 					  ms_Viewport.Height,
; 338  : 					  static_cast<int>(m_afFlareWinPos[0]),
; 339  : 					  static_cast<int>(m_afFlareWinPos[1]));
; 340  : 
; 341  : 		STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING); // glDisable(GL_LIGHTING);

  0016f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00175	68 89 00 00 00	 push	 137			; 00000089H
  0017a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 342  : 		STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE); // glDisable(GL_DEPTH_TEST);

  0017f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00185	6a 07		 push	 7
  00187	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 343  : 		STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE); // glDisable(GL_CULL_FACE);

  0018c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00192	6a 16		 push	 22			; 00000016H
  00194	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 344  : 		STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE); // glEnable(GL_BLEND);

  00199	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0019f	6a 1b		 push	 27			; 0000001bH
  001a1	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 345  : 		STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE); // glDisable(GL_ALPHA_TEST);

  001a6	6a 0f		 push	 15			; 0000000fH
  001a8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001ae	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 346  : 
; 347  : 		STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  001b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001b9	6a 03		 push	 3
  001bb	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 348  : 		STATEMANAGER.RestoreTransform(D3DTS_VIEW);

  001c0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001c6	6a 02		 push	 2
  001c8	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
$LN2@DrawFlare:

; 349  : 		//glDisable(GL_TEXTURE_2D);
; 350  : 		//glPopAttrib();
; 351  : 	}
; 352  : }

  001cd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d0	33 cd		 xor	 ecx, ebp
  001d2	5e		 pop	 esi
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
?DrawFlare@CLensFlare@@QAEXXZ ENDP			; CLensFlare::DrawFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?DrawAfterFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
?DrawAfterFlare@CLensFlare@@QAEXXZ PROC			; CLensFlare::DrawAfterFlare, COMDAT
; _this$ = ecx

; 279  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 280  : 	if (m_bEnabled && m_fAfterBright != 0.0f && m_bDrawBrightScreen)

  00003	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00007	74 76		 je	 SHORT $LN2@DrawAfterF
  00009	f3 0f 10 4e 18	 movss	 xmm1, DWORD PTR [esi+24]
  0000e	0f 57 c0	 xorps	 xmm0, xmm0
  00011	0f 2e c8	 ucomiss xmm1, xmm0
  00014	9f		 lahf
  00015	f6 c4 44	 test	 ah, 68			; 00000044H
  00018	7b 65		 jnp	 SHORT $LN2@DrawAfterF
  0001a	80 7e 1e 00	 cmp	 BYTE PTR [esi+30], 0
  0001e	74 5f		 je	 SHORT $LN2@DrawAfterF

; 281  : 	{
; 282  : 		SetDiffuseColor(m_afColor[0], m_afColor[1], m_afColor[2], m_fAfterBright);

  00020	f3 0f 10 46 4c	 movss	 xmm0, DWORD PTR [esi+76]
  00025	83 ec 10	 sub	 esp, 16			; 00000010H
  00028	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  0002e	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00034	f3 0f 10 46 48	 movss	 xmm0, DWORD PTR [esi+72]
  00039	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0003f	f3 0f 10 46 44	 movss	 xmm0, DWORD PTR [esi+68]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	e8 00 00 00 00	 call	 ?SetDiffuseColor@CScreen@@QAEXMMMM@Z ; CScreen::SetDiffuseColor

; 283  : 		RenderBar2d(0.0f, 0.0f, 1024.0f, 1024.0f);

  0004e	83 ec 14	 sub	 esp, 20			; 00000014H
  00051	8b ce		 mov	 ecx, esi
  00053	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR [esp+16], 0
  0005b	c7 44 24 0c 00
	00 80 44	 mov	 DWORD PTR [esp+12], 1149239296 ; 44800000H
  00063	c7 44 24 08 00
	00 80 44	 mov	 DWORD PTR [esp+8], 1149239296 ; 44800000H
  0006b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00073	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007a	e8 00 00 00 00	 call	 ?RenderBar2d@CScreen@@QAEXMMMMM@Z ; CScreen::RenderBar2d
$LN2@DrawAfterF:

; 284  : 	}
; 285  : }

  0007f	5e		 pop	 esi
  00080	c3		 ret	 0
?DrawAfterFlare@CLensFlare@@QAEXXZ ENDP			; CLensFlare::DrawAfterFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?DrawBeforeFlare@CLensFlare@@QAEXXZ
_TEXT	SEGMENT
_matWorld$ = -228					; size = 64
_matProj$ = -164					; size = 64
_vertices$ = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
?DrawBeforeFlare@CLensFlare@@QAEXXZ PROC		; CLensFlare::DrawBeforeFlare, COMDAT
; _this$ = ecx

; 186  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 187  : 	if (!m_bFlareVisible || !m_bEnabled || !m_bShowMainFlare)

  00016	80 7e 1c 00	 cmp	 BYTE PTR [esi+28], 0
  0001a	0f 84 85 03 00
	00		 je	 $LN3@DrawBefore
  00020	80 7e 3c 00	 cmp	 BYTE PTR [esi+60], 0
  00024	0f 84 7b 03 00
	00		 je	 $LN3@DrawBefore
  0002a	80 7e 3d 00	 cmp	 BYTE PTR [esi+61], 0
  0002e	0f 84 71 03 00
	00		 je	 $LN3@DrawBefore

; 188  : 	{
; 189  : 		return;
; 190  : 	}
; 191  : 
; 192  : 	if (m_SunFlareImageInstance.IsEmpty())

  00034	57		 push	 edi
  00035	8d 7e 54	 lea	 edi, DWORD PTR [esi+84]
  00038	8b cf		 mov	 ecx, edi
  0003a	e8 00 00 00 00	 call	 ?IsEmpty@CGraphicImageInstance@@QBE_NXZ ; CGraphicImageInstance::IsEmpty
  0003f	84 c0		 test	 al, al
  00041	0f 85 5d 03 00
	00		 jne	 $LN91@DrawBefore

; 193  : 	{
; 194  : 		return;
; 195  : 	}
; 196  : 
; 197  : 	D3DXMATRIX matProj;
; 198  : 	D3DXMatrixOrthoOffCenterRH(&matProj, 0.0f, 1.0f, 1.0f, 0.0f, -1.0f, 1.0f);

  00047	83 ec 18	 sub	 esp, 24			; 00000018H
  0004a	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _matProj$[ebp]
  00050	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR [esp+20], 1065353216 ; 3f800000H
  00058	c7 44 24 10 00
	00 80 bf	 mov	 DWORD PTR [esp+16], -1082130432 ; bf800000H
  00060	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR [esp+12], 0
  00068	c7 44 24 08 00
	00 80 3f	 mov	 DWORD PTR [esp+8], 1065353216 ; 3f800000H
  00070	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00078	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 _D3DXMatrixOrthoOffCenterRH@28

; 199  : 	STATEMANAGER.SaveTransform(D3DTS_PROJECTION, &matProj);

  00085	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0008b	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _matProj$[ebp]
  00091	50		 push	 eax
  00092	6a 03		 push	 3
  00094	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 200  : 	STATEMANAGER.SaveTransform(D3DTS_VIEW, &ms_matIdentity);

  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0009f	68 00 00 00 00	 push	 OFFSET ?ms_matIdentity@CGraphicBase@@1UD3DXMATRIX@@A ; CGraphicBase::ms_matIdentity
  000a4	6a 02		 push	 2
  000a6	e8 00 00 00 00	 call	 ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform

; 201  : 
; 202  : 	D3DXMATRIX matWorld;
; 203  : 	D3DXMatrixTranslation(&matWorld, m_afFlarePos[0], m_afFlarePos[1], 0.0f);

  000ab	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000b0	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  000b6	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000b9	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR [esp+8], 0
  000c1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000c7	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 204  : 	STATEMANAGER.SetTransform(D3DTS_WORLD, &matWorld);

  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000dd	8d 85 1c ff ff
	ff		 lea	 eax, DWORD PTR _matWorld$[ebp]
  000e3	50		 push	 eax
  000e4	68 00 01 00 00	 push	 256			; 00000100H
  000e9	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 205  : 
; 206  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, FALSE);

  000ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000f4	6a 00		 push	 0
  000f6	68 89 00 00 00	 push	 137			; 00000089H
  000fb	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 207  : 	STATEMANAGER.SaveRenderState(D3DRS_ZENABLE, FALSE);					// glDisable(GL_DEPTH_TEST);

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00106	6a 00		 push	 0
  00108	6a 07		 push	 7
  0010a	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 208  : 	STATEMANAGER.SaveRenderState(D3DRS_ZWRITEENABLE, FALSE);

  0010f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00115	6a 00		 push	 0
  00117	6a 0e		 push	 14			; 0000000eH
  00119	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 209  : 	STATEMANAGER.SaveRenderState(D3DRS_CULLMODE, D3DCULL_NONE);			// glDisable(GL_CULL_FACE);

  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00124	6a 01		 push	 1
  00126	6a 16		 push	 22			; 00000016H
  00128	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 210  : 	STATEMANAGER.SaveRenderState(D3DRS_SHADEMODE, D3DSHADE_FLAT);		// glShadeModel(GL_FLAT);

  0012d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00133	6a 01		 push	 1
  00135	6a 09		 push	 9
  00137	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 211  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHATESTENABLE, FALSE);			// glDisable(GL_ALPHA_TEST);

  0013c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00142	6a 00		 push	 0
  00144	6a 0f		 push	 15			; 0000000fH
  00146	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 212  : 	STATEMANAGER.SaveRenderState(D3DRS_ALPHABLENDENABLE, TRUE);			// glEnable(GL_BLEND);

  0014b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00151	6a 01		 push	 1
  00153	6a 1b		 push	 27			; 0000001bH
  00155	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 213  : 	STATEMANAGER.SaveRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  0015a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00160	6a 05		 push	 5
  00162	6a 13		 push	 19			; 00000013H
  00164	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 214  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  00169	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0016f	6a 06		 push	 6
  00171	6a 14		 push	 20			; 00000014H
  00173	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 215  : 
; 216  : 	float fAspectRatio = ms_Viewport.Width / float(ms_Viewport.Height);

  00178	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+8

; 217  : 	float fHeight = m_fSunSize * fAspectRatio;

  0017d	f3 0f 10 66 20	 movss	 xmm4, DWORD PTR [esi+32]
  00182	66 0f 6e c0	 movd	 xmm0, eax
  00186	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0018a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0018d	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  00196	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+12
  0019b	66 0f 5a d8	 cvtpd2ps xmm3, xmm0
  0019f	66 0f 6e c0	 movd	 xmm0, eax
  001a3	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  001a7	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001aa	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]

; 218  : 	D3DXCOLOR color(1.0f, 1.0f, 1.0f, 1.0f);
; 219  : 
; 220  : 	SVertex vertices[4];
; 221  : 	vertices[0].x = -m_fSunSize;
; 222  : 	vertices[0].y = -fHeight;
; 223  : 	vertices[0].z = 0.0f;
; 224  : 	vertices[0].color = color;
; 225  : 	vertices[0].u = 0.0f;
; 226  : 	vertices[0].v = 0.0f;
; 227  : 
; 228  : 	vertices[1].x = -m_fSunSize;
; 229  : 	vertices[1].y = fHeight;
; 230  : 	vertices[1].z = 0.0f;
; 231  : 	vertices[1].color = color;
; 232  : 	vertices[1].u = 0.0f;
; 233  : 	vertices[1].v = 1.0f;
; 234  : 
; 235  : 	vertices[2].x = m_fSunSize;
; 236  : 	vertices[2].y = -fHeight;
; 237  : 	vertices[2].z = 0.0f;
; 238  : 	vertices[2].color = color;
; 239  : 	vertices[2].u = 1.0f;
; 240  : 	vertices[2].v = 0.0f;
; 241  : 
; 242  : 	vertices[3].x = m_fSunSize;
; 243  : 	vertices[3].y = fHeight;
; 244  : 	vertices[3].z = 0.0f;
; 245  : 	vertices[3].color = color;
; 246  : 	vertices[3].u = 1.0f;
; 247  : 	vertices[3].v = 1.0f;
; 248  : 
; 249  : 	STATEMANAGER.SetTexture(0, m_SunFlareImageInstance.GetTexturePointer()->GetD3DTexture());

  001b3	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001b7	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  001bd	8b cf		 mov	 ecx, edi
  001bf	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+8], 0
  001c6	c7 45 a8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+12], -1
  001cd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+16], 0
  001d4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+20], 0
  001db	0f 28 cc	 movaps	 xmm1, xmm4
  001de	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+32], 0
  001e5	f3 0f 5e d8	 divss	 xmm3, xmm0
  001e9	c7 45 c0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+36], -1
  001f0	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+40], 0
  001f7	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+44], 1065353216 ; 3f800000H
  001fe	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+56], 0
  00205	c7 45 d8 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+60], -1
  0020c	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+64], 1065353216 ; 3f800000H
  00213	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+68], 0
  0021a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$[ebp+80], 0
  00221	c7 45 f0 ff ff
	ff ff		 mov	 DWORD PTR _vertices$[ebp+84], -1
  00228	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+88], 1065353216 ; 3f800000H
  0022f	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$[ebp+92], 1065353216 ; 3f800000H
  00236	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0023d	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00241	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$[ebp], xmm1
  00246	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$[ebp+24], xmm1
  0024b	0f 28 d3	 movaps	 xmm2, xmm3
  0024e	f3 0f 11 5d b8	 movss	 DWORD PTR _vertices$[ebp+28], xmm3
  00253	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  0025a	f3 0f 11 55 a0	 movss	 DWORD PTR _vertices$[ebp+4], xmm2
  0025f	f3 0f 11 65 cc	 movss	 DWORD PTR _vertices$[ebp+48], xmm4
  00264	f3 0f 11 55 d0	 movss	 DWORD PTR _vertices$[ebp+52], xmm2
  00269	f3 0f 11 65 e4	 movss	 DWORD PTR _vertices$[ebp+72], xmm4
  0026e	f3 0f 11 5d e8	 movss	 DWORD PTR _vertices$[ebp+76], xmm3
  00273	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  00278	8b c8		 mov	 ecx, eax
  0027a	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  0027f	50		 push	 eax
  00280	6a 00		 push	 0
  00282	8b ce		 mov	 ecx, esi
  00284	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 250  : 	STATEMANAGER.SetTexture(1, NULL);

  00289	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0028f	6a 00		 push	 0
  00291	6a 01		 push	 1
  00293	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 251  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  00298	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0029e	6a 04		 push	 4
  002a0	6a 01		 push	 1
  002a2	6a 00		 push	 0
  002a4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 252  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  002a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002af	6a 02		 push	 2
  002b1	6a 02		 push	 2
  002b3	6a 00		 push	 0
  002b5	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 253  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  002ba	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002c0	6a 00		 push	 0
  002c2	6a 03		 push	 3
  002c4	6a 00		 push	 0
  002c6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 254  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  002cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002d1	6a 02		 push	 2
  002d3	6a 04		 push	 4
  002d5	6a 00		 push	 0
  002d7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 255  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  002dc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002e2	6a 02		 push	 2
  002e4	6a 02		 push	 2
  002e6	6a 00		 push	 0
  002e8	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 256  : 
; 257  : 	STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  002ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  002f3	68 42 01 00 00	 push	 322			; 00000142H
  002f8	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 258  : 	STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(SVertex));

  002fd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00303	8d 45 9c	 lea	 eax, DWORD PTR _vertices$[ebp]
  00306	6a 18		 push	 24			; 00000018H
  00308	50		 push	 eax
  00309	6a 02		 push	 2
  0030b	6a 05		 push	 5
  0030d	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP

; 259  : 
; 260  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00312	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00318	68 89 00 00 00	 push	 137			; 00000089H
  0031d	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 261  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZENABLE); // glDisable(GL_DEPTH_TEST);

  00322	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00328	6a 07		 push	 7
  0032a	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 262  : 	STATEMANAGER.RestoreRenderState(D3DRS_ZWRITEENABLE);

  0032f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00335	6a 0e		 push	 14			; 0000000eH
  00337	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 263  : 	STATEMANAGER.RestoreRenderState(D3DRS_CULLMODE); // glDisable(GL_CULL_FACE);

  0033c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00342	6a 16		 push	 22			; 00000016H
  00344	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 264  : 	STATEMANAGER.RestoreRenderState(D3DRS_SHADEMODE); // glShadeModel(GL_FLAT);

  00349	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0034f	6a 09		 push	 9
  00351	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 265  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHATESTENABLE); // glDisable(GL_ALPHA_TEST);

  00356	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0035c	6a 0f		 push	 15			; 0000000fH
  0035e	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 266  : 	STATEMANAGER.RestoreRenderState(D3DRS_ALPHABLENDENABLE); // glEnable(GL_BLEND);

  00363	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00369	6a 1b		 push	 27			; 0000001bH
  0036b	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 267  : 	STATEMANAGER.RestoreRenderState(D3DRS_SRCBLEND);

  00370	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00376	6a 13		 push	 19			; 00000013H
  00378	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 268  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  0037d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00383	6a 14		 push	 20			; 00000014H
  00385	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 269  : 
; 270  : 	STATEMANAGER.RestoreTransform(D3DTS_VIEW);

  0038a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00390	6a 02		 push	 2
  00392	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform

; 271  : 	STATEMANAGER.RestoreTransform(D3DTS_PROJECTION);

  00397	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0039d	6a 03		 push	 3
  0039f	e8 00 00 00 00	 call	 ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
$LN91@DrawBefore:
  003a4	5f		 pop	 edi
$LN3@DrawBefore:

; 272  : }

  003a5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003a8	33 cd		 xor	 ecx, ebp
  003aa	5e		 pop	 esi
  003ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003b0	8b e5		 mov	 esp, ebp
  003b2	5d		 pop	 ebp
  003b3	c3		 ret	 0
?DrawBeforeFlare@CLensFlare@@QAEXXZ ENDP		; CLensFlare::DrawBeforeFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv198 = -36						; size = 4
tv193 = -32						; size = 4
tv196 = -28						; size = 4
_fX$ = -24						; size = 4
_fX$1$ = -20						; size = 4
_fY$ = -20						; size = 4
_fY$1$ = -16						; size = 4
__real@3f800000$1$ = -16				; size = 4
_v3Target$ = -12					; size = 12
_c_rv3LightDirection$ = 8				; size = 4
?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z PROC	; CLensFlare::Compute, COMDAT
; _this$ = ecx

; 127  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 24	 sub	 esp, 36			; 00000024H
  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx

; 128  : 	float afSunPos[3];
; 129  : 
; 130  : 	D3DXVECTOR3 v3Target = CCameraManager::Instance().GetCurrentCamera()->GetTarget();

  0000c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
  00012	e8 00 00 00 00	 call	 ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera

; 131  : 
; 132  : 	afSunPos[0]	= v3Target.x - c_rv3LightDirection.x * 99999999.0f;

  00017	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4cbebc20

; 133  : 	afSunPos[1]	= v3Target.y - c_rv3LightDirection.y * 99999999.0f;
; 134  : 	afSunPos[2]	= v3Target.z - c_rv3LightDirection.z * 99999999.0f;
; 135  : 
; 136  : 	float fX, fY;
; 137  : 	ProjectPosition(afSunPos[0], afSunPos[1], afSunPos[2], &fX, &fY);

  0001f	8b ce		 mov	 ecx, esi
  00021	f3 0f 7e 40 3c	 movq	 xmm0, QWORD PTR [eax+60]
  00026	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00029	89 44 24 24	 mov	 DWORD PTR _v3Target$[esp+48], eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_rv3LightDirection$[ebp]
  00030	66 0f d6 44 24
	1c		 movq	 QWORD PTR _v3Target$[esp+40], xmm0
  00036	f3 0f 10 5c 24
	1c		 movss	 xmm3, DWORD PTR _v3Target$[esp+40]
  0003c	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR _v3Target$[esp+44]
  00042	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00046	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0004a	f3 0f 5c d8	 subss	 xmm3, xmm0
  0004e	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00053	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00057	f3 0f 5c d0	 subss	 xmm2, xmm0
  0005b	f3 0f 11 5c 24
	08		 movss	 DWORD PTR tv193[esp+40], xmm3
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	8d 44 24 14	 lea	 eax, DWORD PTR _fY$[esp+40]
  0006a	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0006e	50		 push	 eax
  0006f	f3 0f 10 4c 24
	28		 movss	 xmm1, DWORD PTR _v3Target$[esp+52]
  00075	8d 44 24 14	 lea	 eax, DWORD PTR _fX$[esp+44]
  00079	50		 push	 eax
  0007a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0007e	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv198[esp+48], xmm2
  00084	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00087	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  0008d	f3 0f 11 54 24
	04		 movss	 DWORD PTR [esp+4], xmm2
  00093	f3 0f 11 4c 24
	20		 movss	 DWORD PTR tv196[esp+60], xmm1
  00099	f3 0f 11 1c 24	 movss	 DWORD PTR [esp], xmm3
  0009e	e8 00 00 00 00	 call	 ?ProjectPosition@CScreen@@QAEXMMMPAM0@Z ; CScreen::ProjectPosition

; 138  : 
; 139  : 	// set flare location
; 140  : 	SetFlareLocation(fX, fY);

  000a3	f3 0f 10 44 24
	14		 movss	 xmm0, DWORD PTR _fY$[esp+40]
  000a9	83 ec 10	 sub	 esp, 16			; 00000010H
  000ac	f3 0f 11 44 24
	28		 movss	 DWORD PTR _fY$1$[esp+56], xmm0
  000b2	8b ce		 mov	 ecx, esi
  000b4	0f 5a c0	 cvtps2pd xmm0, xmm0
  000b7	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [esp+8], xmm0
  000bd	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR _fX$[esp+56]
  000c3	f3 0f 11 44 24
	24		 movss	 DWORD PTR _fX$1$[esp+56], xmm0
  000c9	0f 5a c0	 cvtps2pd xmm0, xmm0
  000cc	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  000d1	e8 00 00 00 00	 call	 ?SetFlareLocation@CLensFlare@@QAEXNN@Z ; CLensFlare::SetFlareLocation

; 141  : 
; 142  : 	// determine visibility
; 143  : 	float fSunVectorMagnitude = sqrtf(afSunPos[0] * afSunPos[0] +

  000d6	f3 0f 10 4c 24
	04		 movss	 xmm1, DWORD PTR tv198[esp+40]
  000dc	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv193[esp+40]
  000e2	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000e6	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000ea	f3 0f 58 c8	 addss	 xmm1, xmm0
  000ee	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv196[esp+40]
  000f4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000f8	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000fc	0f 5a c1	 cvtps2pd xmm0, xmm1
  000ff	0f 57 c9	 xorps	 xmm1, xmm1
  00102	66 0f 2e c8	 ucomisd xmm1, xmm0
  00106	77 06		 ja	 SHORT $LN11@Compute
  00108	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0010c	eb 05		 jmp	 SHORT $LN12@Compute
$LN11@Compute:
  0010e	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN12@Compute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 147  : 	afSunVector[0] = -afSunPos[0] / fSunVectorMagnitude;

  00113	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR tv193[esp+40]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00119	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 148  : 	afSunVector[1] = -afSunPos[1] / fSunVectorMagnitude;

  0011c	f3 0f 10 5c 24
	04		 movss	 xmm3, DWORD PTR tv198[esp+40]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00122	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 148  : 	afSunVector[1] = -afSunPos[1] / fSunVectorMagnitude;

  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  0012e	0f 57 d0	 xorps	 xmm2, xmm0
  00131	0f 57 d8	 xorps	 xmm3, xmm0
  00134	f3 0f 5e d1	 divss	 xmm2, xmm1
  00138	f3 0f 5e d9	 divss	 xmm3, xmm1

; 150  : 
; 151  : 	float afCameraDirection[3];
; 152  : 	afCameraDirection[0] = ms_matView._13;
; 153  : 	afCameraDirection[1] = ms_matView._23;
; 154  : 	afCameraDirection[2] = ms_matView._33;
; 155  : 
; 156  : 
; 157  : 	float fDotProduct =

  0013c	f3 0f 59 15 08
	00 00 00	 mulss	 xmm2, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+8
  00144	f3 0f 59 1d 18
	00 00 00	 mulss	 xmm3, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+24
  0014c	f3 0f 58 da	 addss	 xmm3, xmm2
  00150	f3 0f 10 54 24
	0c		 movss	 xmm2, DWORD PTR tv196[esp+40]
  00156	0f 57 d0	 xorps	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 628  :             return (float)acos(_X);

  00159	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 149  : 	afSunVector[2] = -afSunPos[2] / fSunVectorMagnitude;

  0015c	f3 0f 5e d1	 divss	 xmm2, xmm1

; 150  : 
; 151  : 	float afCameraDirection[3];
; 152  : 	afCameraDirection[0] = ms_matView._13;
; 153  : 	afCameraDirection[1] = ms_matView._23;
; 154  : 	afCameraDirection[2] = ms_matView._33;
; 155  : 
; 156  : 
; 157  : 	float fDotProduct =

  00160	f3 0f 59 15 28
	00 00 00	 mulss	 xmm2, DWORD PTR ?ms_matView@CGraphicBase@@1UD3DXMATRIX@@A+40
  00168	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 628  :             return (float)acos(_X);

  0016c	f3 0f 5a c3	 cvtss2sd xmm0, xmm3
  00170	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  00175	0f 57 c9	 xorps	 xmm1, xmm1
  00178	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 172  : 	fX /= ms_Viewport.Width;

  0017c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3fc90fdb
  00184	0f 2f c1	 comiss	 xmm0, xmm1
  00187	0f 57 c0	 xorps	 xmm0, xmm0
  0018a	0f 97 c0	 seta	 al
  0018d	88 46 1c	 mov	 BYTE PTR [esi+28], al
  00190	a1 08 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+8
  00195	f3 0f 10 64 24
	14		 movss	 xmm4, DWORD PTR _fX$1$[esp+40]

; 173  : 	fY /= ms_Viewport.Height;

  0019b	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _fY$1$[esp+40]

; 174  : 
; 175  : 	float fDistance = sqrtf(((0.5f - fX) * (0.5f - fX)) + ((0.5f - fY) * (0.5f - fY)));

  001a1	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  001a9	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001ad	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b0	0f 28 d1	 movaps	 xmm2, xmm1
  001b3	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001bc	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?ms_Viewport@CGraphicBase@@1U_D3DVIEWPORT9@@A+12
  001c1	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001c5	f3 0f 5e e0	 divss	 xmm4, xmm0
  001c9	0f 57 c0	 xorps	 xmm0, xmm0
  001cc	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001d0	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001d3	f2 0f 58 04 c5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
  001dc	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  001e0	f3 0f 5e d8	 divss	 xmm3, xmm0
  001e4	0f 28 c1	 movaps	 xmm0, xmm1
  001e7	f3 0f 5c c3	 subss	 xmm0, xmm3
  001eb	f3 0f 5c d3	 subss	 xmm2, xmm3
  001ef	f3 0f 59 d0	 mulss	 xmm2, xmm0
  001f3	0f 28 c1	 movaps	 xmm0, xmm1
  001f6	f3 0f 5c c4	 subss	 xmm0, xmm4
  001fa	f3 0f 5c cc	 subss	 xmm1, xmm4
  001fe	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00202	0f 57 c9	 xorps	 xmm1, xmm1
  00205	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00209	0f 5a c2	 cvtps2pd xmm0, xmm2
  0020c	66 0f 2e c8	 ucomisd xmm1, xmm0
  00210	77 06		 ja	 SHORT $LN13@Compute
  00212	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00216	eb 05		 jmp	 SHORT $LN14@Compute
$LN13@Compute:
  00218	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN14@Compute:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 177  : 	float fAfterBright = Interpolate(0.0f, 1.0f, 1.0f - (fDistance * c_fDistanceScale));

  0021d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  00225	83 ec 0c	 sub	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00228	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 177  : 	float fAfterBright = Interpolate(0.0f, 1.0f, 1.0f - (fDistance * c_fDistanceScale));

  0022c	8b ce		 mov	 ecx, esi
  0022e	f3 0f 5c c8	 subss	 xmm1, xmm0
  00232	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00238	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR [esp+4], 1065353216 ; 3f800000H
  00240	f3 0f 11 4c 24
	24		 movss	 DWORD PTR __real@3f800000$1$[esp+52], xmm1
  00246	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  0024d	e8 00 00 00 00	 call	 ?Interpolate@CLensFlare@@IAEMMMM@Z ; CLensFlare::Interpolate
  00252	f3 0f 10 44 24
	18		 movss	 xmm0, DWORD PTR __real@3f800000$1$[esp+40]

; 178  : 
; 179  : 	SetBrightnesses(fBeforeBright, fAfterBright);

  00258	83 ec 10	 sub	 esp, 16			; 00000010H
  0025b	8b ce		 mov	 ecx, esi
  0025d	d9 5c 24 0c	 fstp	 DWORD PTR [esp+12]
  00261	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00267	c7 44 24 04 66
	66 e6 3e	 mov	 DWORD PTR [esp+4], 1055286886 ; 3ee66666H
  0026f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00276	e8 00 00 00 00	 call	 ?Interpolate@CLensFlare@@IAEMMMM@Z ; CLensFlare::Interpolate
  0027b	51		 push	 ecx
  0027c	8b ce		 mov	 ecx, esi
  0027e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00281	e8 00 00 00 00	 call	 ?SetBrightnesses@CLensFlare@@QAEXMM@Z ; CLensFlare::SetBrightnesses

; 180  : }

  00286	5e		 pop	 esi
  00287	8b e5		 mov	 esp, ebp
  00289	5d		 pop	 ebp
  0028a	c2 04 00	 ret	 4
?Compute@CLensFlare@@QAEXABUD3DXVECTOR3@@@Z ENDP	; CLensFlare::Compute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ??1CLensFlare@@UAE@XZ
_TEXT	SEGMENT
??1CLensFlare@@UAE@XZ PROC				; CLensFlare::~CLensFlare, COMDAT
; _this$ = ecx

; 110  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 111  : 	delete[] m_pControlPixels;

  00003	ff 76 34	 push	 DWORD PTR [esi+52]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLensFlare@@6B@
  0000c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]

; 112  : 	delete[] m_pTestPixels;

  00011	ff 76 38	 push	 DWORD PTR [esi+56]
  00014	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00019	83 c4 08	 add	 esp, 8

; 113  : }

  0001c	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  0001f	e8 00 00 00 00	 call	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  00024	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00027	e8 00 00 00 00	 call	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
  0002c	8b ce		 mov	 ecx, esi
  0002e	5e		 pop	 esi
  0002f	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??1CLensFlare@@UAE@XZ ENDP				; CLensFlare::~CLensFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ??0CLensFlare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLensFlare@@QAE@XZ PROC				; CLensFlare::CLensFlare, COMDAT
; _this$ = ecx

; 99   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLensFlare@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  0002e	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00038	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLensFlare@@6B@
  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00045	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0004c	66 c7 46 1c 00
	01		 mov	 WORD PTR [esi+28], 256	; 00000100H
  00052	c6 46 1e 01	 mov	 BYTE PTR [esi+30], 1
  00056	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  0005d	e8 00 00 00 00	 call	 ??0CFlare@@QAE@XZ	; CFlare::CFlare
  00062	8d 4e 54	 lea	 ecx, DWORD PTR [esi+84]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00069	66 c7 46 3c 01
	01		 mov	 WORD PTR [esi+60], 257	; 00000101H
  0006f	c7 46 40 00 00
	80 3f		 mov	 DWORD PTR [esi+64], 1065353216 ; 3f800000H
  00076	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance

; 100  : 	m_pControlPixels = new float[c_nDepthTestDimension * c_nDepthTestDimension];

  0007b	68 84 03 00 00	 push	 900			; 00000384H
  00080	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00084	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 101  : 	m_pTestPixels = new float[c_nDepthTestDimension * c_nDepthTestDimension];

  00089	68 84 03 00 00	 push	 900			; 00000384H
  0008e	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00091	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00096	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00099	83 c4 08	 add	 esp, 8

; 102  : 	m_afColor[0] = m_afColor[1] = m_afColor[2] = 1.0f;

  0009c	c7 46 4c 00 00
	80 3f		 mov	 DWORD PTR [esi+76], 1065353216 ; 3f800000H

; 103  : }

  000a3	8b c6		 mov	 eax, esi
  000a5	c7 46 48 00 00
	80 3f		 mov	 DWORD PTR [esi+72], 1065353216 ; 3f800000H
  000ac	c7 46 44 00 00
	80 3f		 mov	 DWORD PTR [esi+68], 1065353216 ; 3f800000H
  000b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bd	59		 pop	 ecx
  000be	5e		 pop	 esi
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLensFlare@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
__unwindfunclet$??0CLensFlare@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 24	 add	 ecx, 36			; 00000024H
  0000e	e9 00 00 00 00	 jmp	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
__unwindfunclet$??0CLensFlare@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 54	 add	 ecx, 84			; 00000054H
  00019	e9 00 00 00 00	 jmp	 ??1CGraphicImageInstance@@UAE@XZ ; CGraphicImageInstance::~CGraphicImageInstance
  0001e	cc		 int	 3
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
__ehhandler$??0CLensFlare@@QAE@XZ:
  00023	90		 npad	 1
  00024	90		 npad	 1
  00025	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00029	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002c	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0002f	33 c8		 xor	 ecx, eax
  00031	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00036	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLensFlare@@QAE@XZ
  0003b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLensFlare@@QAE@XZ ENDP				; CLensFlare::CLensFlare
; Function compile flags: /Ogtp
;	COMDAT ??_GCFlare@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCFlare@@UAEPAXI@Z PROC				; CFlare::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CFlare@@UAE@XZ	; CFlare::~CFlare
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 10		 push	 16			; 00000010H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCFlare@@UAEPAXI@Z ENDP				; CFlare::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ PROC ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@CAXXZ ENDP ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ??1CFlare@@UAE@XZ
_TEXT	SEGMENT
??1CFlare@@UAE@XZ PROC					; CFlare::~CFlare, COMDAT
; _this$ = ecx

; 513  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CFlare@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CFlare

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CFlare

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 23		 ja	 SHORT $LN19@CFlare

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CFlare:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN6@CFlare:
  00051	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 514  : }

  00052	c3		 ret	 0
$LN19@CFlare:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00053	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN28@CFlare:
  00058	cc		 int	 3
??1CFlare@@UAE@XZ ENDP					; CFlare::~CFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ??0CFlare@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFlare@@QAE@XZ PROC					; CFlare::CFlare, COMDAT
; _this$ = ecx

; 505  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CFlare@@6B@

; 506  : }

  0000a	8b c1		 mov	 eax, ecx
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0000f	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  00016	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0001d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 506  : }

  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c3		 ret	 0
??0CFlare@@QAE@XZ ENDP					; CFlare::CFlare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T2 = -120						; size = 4
__Result$2$ = -116					; size = 4
_this$GSCopy$1$ = -112					; size = 4
$T3 = -112						; size = 1
_i$1$ = -108						; size = 4
__New_size$1$ = -104					; size = 4
tv1258 = -100						; size = 4
tv1276 = -96						; size = 4
_pPiece$4 = -96						; size = 4
$T5 = -92						; size = 4
__Left_size$1$ = -92					; size = 4
$T6 = -88						; size = 24
$T7 = -64						; size = 24
$T8 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_strPath$ = 8						; size = 24
?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CFlare::Init, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d 90	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx

; 522  : 	int i = 0;
; 523  : 
; 524  : 	while (g_strFiles[i] != "")

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00032	68 00 00 00 00	 push	 OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	c7 45 94 00 00
	00 00		 mov	 DWORD PTR _i$1$[ebp], 0
  00045	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  0004a	83 c4 08	 add	 esp, 8
  0004d	84 c0		 test	 al, al
  0004f	0f 84 2e 03 00
	00		 je	 $LN3@Init

; 521  : {

  00055	bf 00 00 00 00	 mov	 edi, OFFSET ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A
  0005a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR tv1258[ebp], OFFSET ?g_afColors@@3PAY03MA
$LN237@Init:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00061	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H
  00065	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  00068	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ms_singleton@?$CSingleton@VCResourceManager@@@@0PAVCResourceManager@@A ; CSingleton<CResourceManager>::ms_singleton
  0006d	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  00072	89 45 a0	 mov	 DWORD PTR tv1276[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00075	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00078	0f 11 45 d8	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0007c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00083	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 0

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0008a	89 45 a4	 mov	 DWORD PTR $T5[ebp], eax

; 2293 :         if (_Large_string_engaged()) {

  0008d	72 02		 jb	 SHORT $LN24@Init

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0008f	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN24@Init:

; 2740 :         if (_Count > max_size()) {

  00091	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00096	0f 87 39 03 00
	00		 ja	 $LN228@Init

; 2741 :             _Xlen_string(); // result too long
; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0009c	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009f	73 13		 jae	 SHORT $LN30@Init

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a1	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]

; 2749 :             _My_data._Mysize = _Count;

  000a4	89 45 e8	 mov	 DWORD PTR $T8[ebp+16], eax

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  000a7	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR $T8[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ae	0f 11 45 d8	 movups	 XMMWORD PTR $T8[ebp], xmm0

; 2767 :             return;

  000b2	eb 73		 jmp	 SHORT $LN51@Init
$LN30@Init:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  000b4	8b f0		 mov	 esi, eax
  000b6	83 ce 0f	 or	 esi, 15			; 0000000fH
  000b9	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  000bf	76 1a		 jbe	 SHORT $LN37@Init

; 4885 :             return _Max;

  000c1	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  000c6	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000d1	8b c8		 mov	 ecx, eax
  000d3	83 c4 04	 add	 esp, 4
  000d6	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
  000d9	eb 37		 jmp	 SHORT $LN44@Init
$LN37@Init:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000db	83 fe 16	 cmp	 esi, 22			; 00000016H
  000de	0f 42 f1	 cmovb	 esi, ecx

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000e1	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ea	72 10		 jb	 SHORT $LN45@Init

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000f2	8b c8		 mov	 ecx, eax
  000f4	83 c4 04	 add	 esp, 4
  000f7	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
  000fa	eb 16		 jmp	 SHORT $LN44@Init
$LN45@Init:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000fc	85 c9		 test	 ecx, ecx
  000fe	74 10		 je	 SHORT $LN46@Init

; 77   :         return ::operator new(_Bytes);

  00100	51		 push	 ecx
  00101	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00106	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00108	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0010b	8b 45 a4	 mov	 eax, DWORD PTR $T5[ebp]
  0010e	eb 02		 jmp	 SHORT $LN44@Init
$LN46@Init:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00110	33 c9		 xor	 ecx, ecx
$LN44@Init:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2781 :         _My_data._Mysize = _Count;

  00112	89 45 e8	 mov	 DWORD PTR $T8[ebp+16], eax

; 2783 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2784 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2785 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2786 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2787 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2789 :         } else { // _Strat == _Construct_strategy::_From_string
; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  00115	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00116	50		 push	 eax
  00117	57		 push	 edi
  00118	51		 push	 ecx

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00119	89 4d d8	 mov	 DWORD PTR $T8[ebp], ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  0011c	89 75 ec	 mov	 DWORD PTR $T8[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011f	e8 00 00 00 00	 call	 _memcpy
  00124	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN51@Init:

; 5116 :     const auto _Left_size  = _Left.size();

  00127	8b 4d 18	 mov	 ecx, DWORD PTR _strPath$[ebp+16]
  0012a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0012f	2b c1		 sub	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  00131	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5116 :     const auto _Left_size  = _Left.size();

  00135	89 4d a4	 mov	 DWORD PTR __Left_size$1$[ebp], ecx

; 5117 :     const auto _Right_size = _Convert_size<_Size_type>(_Traits::length(_Right));
; 5118 :     if (_Left.max_size() - _Left_size < _Right_size) {

  00138	83 f8 01	 cmp	 eax, 1
  0013b	0f 82 94 02 00
	00		 jb	 $LN228@Init

; 2293 :         if (_Large_string_engaged()) {

  00141	83 7d 1c 10	 cmp	 DWORD PTR _strPath$[ebp+20], 16 ; 00000010H
  00145	8d 45 08	 lea	 eax, DWORD PTR _strPath$[ebp]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00148	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]

; 2920 :         size_type _New_capacity = _BUF_SIZE - 1;

  0014b	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH

; 2293 :         if (_Large_string_engaged()) {

  00150	0f 43 45 08	 cmovae	 eax, DWORD PTR _strPath$[ebp]

; 2922 :         _Elem* _Ptr             = _My_data._Bx._Buf;

  00154	8d 7d a8	 lea	 edi, DWORD PTR $T6[ebp]

; 2293 :         if (_Large_string_engaged()) {

  00157	89 45 8c	 mov	 DWORD PTR __Result$2$[ebp], eax
  0015a	0f 57 c0	 xorps	 xmm0, xmm0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0015d	89 55 98	 mov	 DWORD PTR __New_size$1$[ebp], edx
  00160	0f 11 45 a8	 movups	 XMMWORD PTR $T6[ebp], xmm0

; 2926 :         if (_New_capacity < _New_size) {

  00164	3b d6		 cmp	 edx, esi
  00166	76 5e		 jbe	 SHORT $LN69@Init

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00168	8b f2		 mov	 esi, edx
  0016a	83 ce 0f	 or	 esi, 15			; 0000000fH
  0016d	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00173	76 0a		 jbe	 SHORT $LN84@Init

; 4885 :             return _Max;

  00175	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0017a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0017d	eb 15		 jmp	 SHORT $LN232@Init
$LN84@Init:

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0017f	83 fe 16	 cmp	 esi, 22			; 00000016H
  00182	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00187	0f 42 f0	 cmovb	 esi, eax

; 2928 :             const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  0018a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0018d	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00192	72 13		 jb	 SHORT $LN92@Init
$LN232@Init:

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00194	50		 push	 eax
  00195	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0019a	8b 4d a4	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  0019d	83 c4 04	 add	 esp, 4
  001a0	8b 55 98	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  001a3	8b f8		 mov	 edi, eax
  001a5	eb 19		 jmp	 SHORT $LN91@Init
$LN92@Init:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  001a7	85 c0		 test	 eax, eax
  001a9	74 13		 je	 SHORT $LN93@Init

; 77   :         return ::operator new(_Bytes);

  001ab	50		 push	 eax
  001ac	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  001b1	8b 4d a4	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  001b4	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  001b7	8b 55 98	 mov	 edx, DWORD PTR __New_size$1$[ebp]
  001ba	8b f8		 mov	 edi, eax
  001bc	eb 02		 jmp	 SHORT $LN91@Init
$LN93@Init:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  001be	33 ff		 xor	 edi, edi
$LN91@Init:
  001c0	8b 45 8c	 mov	 eax, DWORD PTR __Result$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2930 :             _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  001c3	89 7d a8	 mov	 DWORD PTR $T6[ebp], edi
$LN69@Init:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001c6	51		 push	 ecx
  001c7	50		 push	 eax
  001c8	57		 push	 edi

; 2939 :         _My_data._Mysize = _New_size;

  001c9	89 55 b8	 mov	 DWORD PTR $T6[ebp+16], edx

; 2940 :         _My_data._Myres  = _New_capacity;

  001cc	89 75 bc	 mov	 DWORD PTR $T6[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001cf	e8 00 00 00 00	 call	 _memcpy
  001d4	8b 45 a4	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001d7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001da	66 c7 04 07 2f
	00		 mov	 WORD PTR [edi+eax], 47	; 0000002fH

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  001e0	8d 45 d8	 lea	 eax, DWORD PTR $T8[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  001e3	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5158 :     return {_String_constructor_concat_tag{}, _Left, _Right};

  001e7	50		 push	 eax
  001e8	8d 45 a8	 lea	 eax, DWORD PTR $T6[ebp]
  001eb	50		 push	 eax
  001ec	ff 75 90	 push	 DWORD PTR $T3[ebp]
  001ef	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  001f2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 2293 :         if (_Large_string_engaged()) {

  001f7	83 7d d4 10	 cmp	 DWORD PTR $T7[ebp+20], 16 ; 00000010H
  001fb	8d 45 c0	 lea	 eax, DWORD PTR $T7[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  001fe	8b 4d a0	 mov	 ecx, DWORD PTR tv1276[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00201	0f 43 45 c0	 cmovae	 eax, DWORD PTR $T7[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  00205	50		 push	 eax
  00206	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0020a	e8 00 00 00 00	 call	 ?GetResourcePointer@CResourceManager@@QAEPAVCResource@@PBD@Z ; CResourceManager::GetResourcePointer
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0020f	8b 4d d4	 mov	 ecx, DWORD PTR $T7[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  00212	8b f8		 mov	 edi, eax
  00214	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00218	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0021b	72 2c		 jb	 SHORT $LN120@Init
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0021d	8b 55 c0	 mov	 edx, DWORD PTR $T7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00220	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00221	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00223	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00229	72 14		 jb	 SHORT $LN130@Init

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0022b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0022e	83 c1 23	 add	 ecx, 35			; 00000023H
  00231	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00233	83 c0 fc	 add	 eax, -4			; fffffffcH
  00236	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00239	0f 87 91 01 00
	00		 ja	 $LN181@Init
$LN130@Init:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0023f	51		 push	 ecx
  00240	52		 push	 edx
  00241	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00246	83 c4 08	 add	 esp, 8
$LN120@Init:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00249	8b 4d bc	 mov	 ecx, DWORD PTR $T6[ebp+20]

; 5019 :         _My_data._Mysize = 0;

  0024c	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00253	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0025a	c6 45 c0 00	 mov	 BYTE PTR $T7[ebp], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  0025e	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00262	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00265	72 2c		 jb	 SHORT $LN147@Init
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00267	8b 55 a8	 mov	 edx, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0026a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0026b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0026d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00273	72 14		 jb	 SHORT $LN157@Init

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00275	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00278	83 c1 23	 add	 ecx, 35			; 00000023H
  0027b	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0027d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00280	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00283	0f 87 47 01 00
	00		 ja	 $LN181@Init
$LN157@Init:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00289	51		 push	 ecx
  0028a	52		 push	 edx
  0028b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00290	83 c4 08	 add	 esp, 8
$LN147@Init:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00293	8b 4d ec	 mov	 ecx, DWORD PTR $T8[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 526  : 		CResource * pResource = CResourceManager::Instance().GetResourcePointer((strPath + "/" + std::string(g_strFiles[i])).c_str());

  00296	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0029a	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0029d	72 2c		 jb	 SHORT $LN174@Init
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0029f	8b 55 d8	 mov	 edx, DWORD PTR $T8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  002a2	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002a3	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  002a5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002ab	72 14		 jb	 SHORT $LN184@Init

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002ad	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002b0	83 c1 23	 add	 ecx, 35			; 00000023H
  002b3	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002b5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002b8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002bb	0f 87 0f 01 00
	00		 ja	 $LN181@Init
$LN184@Init:

; 255  :         ::operator delete(_Ptr, _Bytes);

  002c1	51		 push	 ecx
  002c2	52		 push	 edx
  002c3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002c8	83 c4 08	 add	 esp, 8
$LN174@Init:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 528  : 		if (!pResource->IsType(CGraphicImage::Type()))

  002cb	e8 00 00 00 00	 call	 ?Type@CGraphicImage@@SAKXZ ; CGraphicImage::Type
  002d0	50		 push	 eax
  002d1	8b cf		 mov	 ecx, edi
  002d3	e8 00 00 00 00	 call	 ?IsType@CResource@@QAE_NK@Z ; CResource::IsType

; 533  : 		SFlarePiece * pPiece = new SFlarePiece;

  002d8	6a 34		 push	 52			; 00000034H
  002da	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002df	8b f0		 mov	 esi, eax
  002e1	83 c4 04	 add	 esp, 4
  002e4	89 75 88	 mov	 DWORD PTR $T2[ebp], esi
  002e7	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002eb	85 f6		 test	 esi, esi
  002ed	74 1e		 je	 SHORT $LN6@Init
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.h

; 65   : 		{

  002ef	8b ce		 mov	 ecx, esi
  002f1	e8 00 00 00 00	 call	 ??0CGraphicImageInstance@@QAE@XZ ; CGraphicImageInstance::CGraphicImageInstance
  002f6	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  002fd	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  00304	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 533  : 		SFlarePiece * pPiece = new SFlarePiece;

  0030b	eb 02		 jmp	 SHORT $LN7@Init
$LN6@Init:
  0030d	33 f6		 xor	 esi, esi
$LN7@Init:

; 534  : 
; 535  : 		pPiece->m_imageInstance.SetImagePointer(static_cast<CGraphicImage *> (pResource));

  0030f	57		 push	 edi
  00310	8b ce		 mov	 ecx, esi
  00312	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00316	89 75 a0	 mov	 DWORD PTR _pPiece$4[ebp], esi
  00319	e8 00 00 00 00	 call	 ?SetImagePointer@CGraphicImageInstance@@QAEXPAVCGraphicImage@@@Z ; CGraphicImageInstance::SetImagePointer

; 536  : 		pPiece->m_fPosition = g_fPosition[i];

  0031e	8b 7d 94	 mov	 edi, DWORD PTR _i$1$[ebp]

; 537  : 		pPiece->m_fWidth = g_fWidth[i];
; 538  : 		pPiece->m_pColor = g_afColors[i];
; 539  : 
; 540  : 		m_vFlares.push_back(pPiece);

  00321	8b 55 90	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  00324	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fPosition@@3PAMA[edi*4]
  0032b	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0032e	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  00331	8b 04 bd 00 00
	00 00		 mov	 eax, DWORD PTR ?g_fWidth@@3PAMA[edi*4]
  00338	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0033b	8b 45 9c	 mov	 eax, DWORD PTR tv1258[ebp]
  0033e	89 46 30	 mov	 DWORD PTR [esi+48], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00341	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00344	3b 42 0c	 cmp	 eax, DWORD PTR [edx+12]
  00347	74 08		 je	 SHORT $LN192@Init

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00349	89 30		 mov	 DWORD PTR [eax], esi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  0034b	83 42 08 04	 add	 DWORD PTR [edx+8], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0034f	eb 0a		 jmp	 SHORT $LN191@Init
$LN192@Init:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00351	8d 55 a0	 lea	 edx, DWORD PTR _pPiece$4[ebp]
  00354	52		 push	 edx
  00355	50		 push	 eax
  00356	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAUSFlarePiece@CFlare@@@?$vector@PAUSFlarePiece@CFlare@@V?$allocator@PAUSFlarePiece@CFlare@@@std@@@std@@AAEPAPAUSFlarePiece@CFlare@@QAPAU23@ABQAU23@@Z ; std::vector<CFlare::SFlarePiece *,std::allocator<CFlare::SFlarePiece *> >::_Emplace_reallocate<CFlare::SFlarePiece * const &>
$LN191@Init:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 541  : 		i++;

  0035b	83 45 9c 10	 add	 DWORD PTR tv1258[ebp], 16 ; 00000010H
  0035f	47		 inc	 edi
  00360	89 7d 94	 mov	 DWORD PTR _i$1$[ebp], edi
  00363	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00368	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  0036b	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR ?g_strFiles@@3PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@A[eax*8]
  00372	57		 push	 edi
  00373	e8 00 00 00 00	 call	 ??$?9DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator!=<char,std::char_traits<char>,std::allocator<char> >
  00378	83 c4 08	 add	 esp, 8
  0037b	84 c0		 test	 al, al
  0037d	0f 85 de fc ff
	ff		 jne	 $LN237@Init
$LN3@Init:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00383	8b 4d 1c	 mov	 ecx, DWORD PTR _strPath$[ebp+20]
  00386	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00389	72 28		 jb	 SHORT $LN211@Init
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0038b	8b 55 08	 mov	 edx, DWORD PTR _strPath$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0038e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0038f	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00391	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00397	72 10		 jb	 SHORT $LN221@Init

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00399	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0039c	83 c1 23	 add	 ecx, 35			; 00000023H
  0039f	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003a1	83 c0 fc	 add	 eax, -4			; fffffffcH
  003a4	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003a7	77 27		 ja	 SHORT $LN181@Init
$LN221@Init:

; 255  :         ::operator delete(_Ptr, _Bytes);

  003a9	51		 push	 ecx
  003aa	52		 push	 edx
  003ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003b0	83 c4 08	 add	 esp, 8
$LN211@Init:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 543  : }

  003b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003bd	59		 pop	 ecx
  003be	5f		 pop	 edi
  003bf	5e		 pop	 esi
  003c0	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003c3	33 cd		 xor	 ecx, ebp
  003c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ca	8b e5		 mov	 esp, ebp
  003cc	5d		 pop	 ebp
  003cd	c2 18 00	 ret	 24			; 00000018H
$LN181@Init:
  003d0	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN228@Init:
  003d5	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN236@Init:
  003da	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strPath$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T8[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00010	8d 4d a8	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR $T7[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00020	6a 34		 push	 52			; 00000034H
  00022	8b 45 88	 mov	 eax, DWORD PTR $T2[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
  0002e	c3		 ret	 0
  0002f	cc		 int	 3
  00030	cc		 int	 3
  00031	cc		 int	 3
  00032	cc		 int	 3
  00033	cc		 int	 3
__ehhandler$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00034	90		 npad	 1
  00035	90		 npad	 1
  00036	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0003a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0003d	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00040	33 c8		 xor	 ecx, eax
  00042	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00047	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00056	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Init@CFlare@@QAEXV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CFlare::Init
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp
;	COMDAT ?Draw@CFlare@@QAEXMHHHH@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -152					; size = 4
tv996 = -148						; size = 4
_fDY$1$ = -144						; size = 4
_fDX$1$ = -140						; size = 4
_i$1$ = -136						; size = 4
_fCenterX$1$ = -132					; size = 4
_fCenterY$1$ = -128					; size = 4
tv1011 = -124						; size = 4
tv978 = -124						; size = 4
_d3dColor$1$sroa$512$1$ = -120				; size = 4
_d3dColor$1$sroa$516$1$ = -116				; size = 4
_d3dColor$1$sroa$518$1$ = -112				; size = 4
_d3dColor$1$sroa$520$1$ = -108				; size = 4
_fW$1$ = -104						; size = 4
_vertices$2 = -100					; size = 96
__$ArrayPad$ = -4					; size = 4
_fBrightScale$ = 8					; size = 4
_nWidth$ = 12						; size = 4
_nHeight$ = 16						; size = 4
_nX$ = 20						; size = 4
_nY$ = 24						; size = 4
?Draw@CFlare@@QAEXMHHHH@Z PROC				; CFlare::Draw, COMDAT
; _this$ = ecx

; 549  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 550  : 	STATEMANAGER.SaveRenderState(D3DRS_DESTBLEND, D3DBLEND_ONE);

  00016	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0001c	6a 02		 push	 2
  0001e	6a 14		 push	 20			; 00000014H
  00020	89 b5 68 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00026	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
  0002b	66 0f 6e 45 0c	 movd	 xmm0, DWORD PTR _nWidth$[ebp]
  00030	66 0f 6e 55 14	 movd	 xmm2, DWORD PTR _nX$[ebp]

; 551  : 
; 552  : 	float fDX = float(nX) - float(nWidth) / 2.0f;

  00035	0f 5b c0	 cvtdq2ps xmm0, xmm0

; 553  : 	float fDY = float(nY) - float(nHeight) / 2.0f;
; 554  : 
; 555  : 	STATEMANAGER.SetTexture(1, NULL);

  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0003e	6a 00		 push	 0
  00040	6a 01		 push	 1
  00042	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00045	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0004d	f3 0f 5c d0	 subss	 xmm2, xmm0
  00051	66 0f 6e 45 10	 movd	 xmm0, DWORD PTR _nHeight$[ebp]
  00056	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00059	f3 0f 11 95 74
	ff ff ff	 movss	 DWORD PTR _fDX$1$[ebp], xmm2
  00061	66 0f 6e 55 18	 movd	 xmm2, DWORD PTR _nY$[ebp]
  00066	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0006e	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00071	f3 0f 5c d0	 subss	 xmm2, xmm0
  00075	f3 0f 11 95 70
	ff ff ff	 movss	 DWORD PTR _fDY$1$[ebp], xmm2
  0007d	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 556  : 	STATEMANAGER.SetFVF(D3DFVF_XYZ | D3DFVF_DIFFUSE | D3DFVF_TEX1);

  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00088	68 42 01 00 00	 push	 322			; 00000142H
  0008d	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 557  : 
; 558  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG1,	D3DTA_TEXTURE);

  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00098	6a 02		 push	 2
  0009a	6a 02		 push	 2
  0009c	6a 00		 push	 0
  0009e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 559  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLORARG2,	D3DTA_DIFFUSE);

  000a3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000a9	6a 00		 push	 0
  000ab	6a 03		 push	 3
  000ad	6a 00		 push	 0
  000af	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 560  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_COLOROP,	D3DTOP_MODULATE);

  000b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ba	6a 04		 push	 4
  000bc	6a 01		 push	 1
  000be	6a 00		 push	 0
  000c0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 561  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG1,	D3DTA_TEXTURE);

  000c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000cb	6a 02		 push	 2
  000cd	6a 05		 push	 5
  000cf	6a 00		 push	 0
  000d1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 562  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAARG2,	D3DTA_DIFFUSE);

  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000dc	6a 00		 push	 0
  000de	6a 06		 push	 6
  000e0	6a 00		 push	 0
  000e2	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 563  : 	STATEMANAGER.SetTextureStageState(0, D3DTSS_ALPHAOP,	D3DTOP_MODULATE);

  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  000ed	6a 04		 push	 4
  000ef	6a 04		 push	 4
  000f1	6a 00		 push	 0
  000f3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000f8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 565  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  000fb	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  000fd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00100	2b c1		 sub	 eax, ecx
  00102	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 565  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  00105	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edx
  0010b	85 c0		 test	 eax, eax
  0010d	0f 84 9d 05 00
	00		 je	 $LN3@Draw
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00113	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fBrightScale$[ebp]
  00118	53		 push	 ebx
  00119	57		 push	 edi
  0011a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Draw:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 567  : 		float fCenterX = float(nX) - (m_vFlares[i]->m_fPosition + 1.0f) * fDX;

  00120	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  00123	66 0f 6e 55 14	 movd	 xmm2, DWORD PTR _nX$[ebp]
  00128	0f 5b d2	 cvtdq2ps xmm2, xmm2

; 568  : 		float fCenterY = float(nY) - (m_vFlares[i]->m_fPosition + 1.0f) * fDY;
; 569  : 		float fW = m_vFlares[i]->m_fWidth;
; 570  : 
; 571  : 		D3DXCOLOR d3dColor(m_vFlares[i]->m_pColor[0] * fBrightScale,
; 572  : 						   m_vFlares[i]->m_pColor[1] * fBrightScale,
; 573  : 						   m_vFlares[i]->m_pColor[2] * fBrightScale,
; 574  : 						   m_vFlares[i]->m_pColor[3] * fBrightScale);
; 575  : 
; 576  : 		STATEMANAGER.SetTexture(0, m_vFlares[i]->m_imageInstance.GetTexturePointer()->GetD3DTexture());

  0012b	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00131	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00134	f3 0f 10 49 28	 movss	 xmm1, DWORD PTR [ecx+40]
  00139	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00141	0f 28 c1	 movaps	 xmm0, xmm1
  00144	f3 0f 59 8d 70
	ff ff ff	 mulss	 xmm1, DWORD PTR _fDY$1$[ebp]
  0014c	f3 0f 59 85 74
	ff ff ff	 mulss	 xmm0, DWORD PTR _fDX$1$[ebp]
  00154	f3 0f 5c d0	 subss	 xmm2, xmm0
  00158	66 0f 6e 45 18	 movd	 xmm0, DWORD PTR _nY$[ebp]
  0015d	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00160	f3 0f 11 95 7c
	ff ff ff	 movss	 DWORD PTR _fCenterX$1$[ebp], xmm2
  00168	f3 0f 5c c1	 subss	 xmm0, xmm1
  0016c	f3 0f 10 49 2c	 movss	 xmm1, DWORD PTR [ecx+44]
  00171	f3 0f 11 4d 98	 movss	 DWORD PTR _fW$1$[ebp], xmm1
  00176	f3 0f 11 45 80	 movss	 DWORD PTR _fCenterY$1$[ebp], xmm0
  0017b	0f 28 c3	 movaps	 xmm0, xmm3
  0017e	f3 0f 59 00	 mulss	 xmm0, DWORD PTR [eax]
  00182	f3 0f 11 45 94	 movss	 DWORD PTR _d3dColor$1$sroa$520$1$[ebp], xmm0
  00187	0f 28 c3	 movaps	 xmm0, xmm3
  0018a	f3 0f 59 40 04	 mulss	 xmm0, DWORD PTR [eax+4]
  0018f	f3 0f 11 45 90	 movss	 DWORD PTR _d3dColor$1$sroa$518$1$[ebp], xmm0
  00194	0f 28 c3	 movaps	 xmm0, xmm3
  00197	f3 0f 59 40 08	 mulss	 xmm0, DWORD PTR [eax+8]
  0019c	f3 0f 11 45 8c	 movss	 DWORD PTR _d3dColor$1$sroa$516$1$[ebp], xmm0
  001a1	0f 28 c3	 movaps	 xmm0, xmm3
  001a4	f3 0f 59 40 0c	 mulss	 xmm0, DWORD PTR [eax+12]
  001a9	f3 0f 11 45 88	 movss	 DWORD PTR _d3dColor$1$sroa$512$1$[ebp], xmm0
  001ae	e8 00 00 00 00	 call	 ?GetTexturePointer@CGraphicImageInstance@@QAEPAVCGraphicTexture@@XZ ; CGraphicImageInstance::GetTexturePointer
  001b3	8b c8		 mov	 ecx, eax
  001b5	e8 00 00 00 00	 call	 ?GetD3DTexture@CGraphicTexture@@QBEPAUIDirect3DTexture9@@XZ ; CGraphicTexture::GetD3DTexture
  001ba	50		 push	 eax
  001bb	6a 00		 push	 0
  001bd	8b ce		 mov	 ecx, esi
  001bf	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 577  : 
; 578  : 		TVertex vertices[4];
; 579  : 
; 580  : 		vertices[0].u = 0.0f;
; 581  : 		vertices[0].v = 0.0f;
; 582  : 		vertices[0].x = fCenterX - fW;

  001c4	f3 0f 10 8d 7c
	ff ff ff	 movss	 xmm1, DWORD PTR _fCenterX$1$[ebp]
  001cc	f3 0f 5c 4d 98	 subss	 xmm1, DWORD PTR _fW$1$[ebp]

; 583  : 		vertices[0].y = fCenterY - fW;
; 584  : 		vertices[0].z = 0.0f;

  001d1	f3 0f 10 45 94	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$520$1$[ebp]
  001d6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  001dd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+16], 0
  001e4	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+20], 0
  001eb	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+8], 0
  001f2	f3 0f 11 4d 84	 movss	 DWORD PTR tv978[ebp], xmm1
  001f7	f3 0f 11 4d 9c	 movss	 DWORD PTR _vertices$2[ebp], xmm1
  001fc	f3 0f 10 4d 80	 movss	 xmm1, DWORD PTR _fCenterY$1$[ebp]
  00201	f3 0f 5c 4d 98	 subss	 xmm1, DWORD PTR _fW$1$[ebp]
  00206	f3 0f 11 8d 6c
	ff ff ff	 movss	 DWORD PTR tv996[ebp], xmm1
  0020e	f3 0f 11 4d a0	 movss	 DWORD PTR _vertices$2[ebp+4], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00213	0f 57 c9	 xorps	 xmm1, xmm1
  00216	72 07		 jb	 SHORT $LN30@Draw
  00218	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  0021d	eb 23		 jmp	 SHORT $LN29@Draw
$LN30@Draw:
  0021f	0f 2f c8	 comiss	 xmm1, xmm0
  00222	72 04		 jb	 SHORT $LN28@Draw
  00224	33 db		 xor	 ebx, ebx
  00226	eb 1a		 jmp	 SHORT $LN29@Draw
$LN28@Draw:
  00228	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00230	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00238	e8 00 00 00 00	 call	 __ftol3
  0023d	8b d8		 mov	 ebx, eax
  0023f	0f 57 c9	 xorps	 xmm1, xmm1
$LN29@Draw:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00242	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$518$1$[ebp]
  00247	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  0024e	72 07		 jb	 SHORT $LN34@Draw
  00250	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  00255	eb 20		 jmp	 SHORT $LN33@Draw
$LN34@Draw:
  00257	0f 2f c8	 comiss	 xmm1, xmm0
  0025a	72 04		 jb	 SHORT $LN32@Draw
  0025c	33 ff		 xor	 edi, edi
  0025e	eb 17		 jmp	 SHORT $LN33@Draw
$LN32@Draw:
  00260	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00268	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00270	e8 00 00 00 00	 call	 __ftol3
  00275	8b f8		 mov	 edi, eax
$LN33@Draw:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  00277	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$516$1$[ebp]
  0027c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00283	72 07		 jb	 SHORT $LN38@Draw
  00285	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  0028a	eb 23		 jmp	 SHORT $LN37@Draw
$LN38@Draw:
  0028c	0f 57 c9	 xorps	 xmm1, xmm1
  0028f	0f 2f c8	 comiss	 xmm1, xmm0
  00292	72 04		 jb	 SHORT $LN36@Draw
  00294	33 f6		 xor	 esi, esi
  00296	eb 17		 jmp	 SHORT $LN37@Draw
$LN36@Draw:
  00298	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002a0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002a8	e8 00 00 00 00	 call	 __ftol3
  002ad	8b f0		 mov	 esi, eax
$LN37@Draw:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  002af	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$512$1$[ebp]
  002b4	0f 57 c0	 xorps	 xmm0, xmm0
  002b7	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  002be	72 07		 jb	 SHORT $LN42@Draw
  002c0	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  002c5	eb 24		 jmp	 SHORT $LN41@Draw
$LN42@Draw:
  002c7	0f 2f c1	 comiss	 xmm0, xmm1
  002ca	72 04		 jb	 SHORT $LN40@Draw
  002cc	33 c0		 xor	 eax, eax
  002ce	eb 1b		 jmp	 SHORT $LN41@Draw
$LN40@Draw:
  002d0	0f 28 c1	 movaps	 xmm0, xmm1
  002d3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  002db	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  002e3	e8 00 00 00 00	 call	 __ftol3
  002e8	0f 57 c0	 xorps	 xmm0, xmm0
$LN41@Draw:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 589  : 		vertices[1].x = fCenterX - fW;

  002eb	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR tv978[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  002f0	c1 e0 08	 shl	 eax, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 589  : 		vertices[1].x = fCenterX - fW;

  002f3	f3 0f 11 4d b4	 movss	 DWORD PTR _vertices$2[ebp+24], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  002f8	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 590  : 		vertices[1].y = fCenterY + fW;

  002fa	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
  002ff	f3 0f 58 4d 80	 addss	 xmm1, DWORD PTR _fCenterY$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00304	c1 e0 08	 shl	 eax, 8
  00307	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 587  : 		vertices[1].u = 0.0f;

  00309	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+40], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00310	c1 e0 08	 shl	 eax, 8
  00313	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 588  : 		vertices[1].v = 1.0f;

  00315	c7 45 c8 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+44], 1065353216 ; 3f800000H

; 590  : 		vertices[1].y = fCenterY + fW;

  0031c	f3 0f 11 4d 84	 movss	 DWORD PTR tv1011[ebp], xmm1
  00321	f3 0f 11 4d b8	 movss	 DWORD PTR _vertices$2[ebp+28], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00326	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$520$1$[ebp]
  0032b	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 585  : 		vertices[0].color = d3dColor;

  00332	89 45 a8	 mov	 DWORD PTR _vertices$2[ebp+12], eax

; 591  : 		vertices[1].z = 0.0f;

  00335	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+32], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0033c	72 07		 jb	 SHORT $LN48@Draw
  0033e	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00343	eb 23		 jmp	 SHORT $LN47@Draw
$LN48@Draw:
  00345	0f 2f c1	 comiss	 xmm0, xmm1
  00348	72 04		 jb	 SHORT $LN46@Draw
  0034a	33 db		 xor	 ebx, ebx
  0034c	eb 1a		 jmp	 SHORT $LN47@Draw
$LN46@Draw:
  0034e	0f 28 c1	 movaps	 xmm0, xmm1
  00351	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00359	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00361	e8 00 00 00 00	 call	 __ftol3
  00366	8b d8		 mov	 ebx, eax
$LN47@Draw:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00368	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$518$1$[ebp]
  0036d	0f 57 c9	 xorps	 xmm1, xmm1
  00370	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00377	72 07		 jb	 SHORT $LN52@Draw
  00379	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  0037e	eb 23		 jmp	 SHORT $LN51@Draw
$LN52@Draw:
  00380	0f 2f c8	 comiss	 xmm1, xmm0
  00383	72 04		 jb	 SHORT $LN50@Draw
  00385	33 ff		 xor	 edi, edi
  00387	eb 1a		 jmp	 SHORT $LN51@Draw
$LN50@Draw:
  00389	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00391	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00399	e8 00 00 00 00	 call	 __ftol3
  0039e	8b f8		 mov	 edi, eax
  003a0	0f 57 c9	 xorps	 xmm1, xmm1
$LN51@Draw:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  003a3	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$516$1$[ebp]
  003a8	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  003af	72 07		 jb	 SHORT $LN56@Draw
  003b1	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  003b6	eb 20		 jmp	 SHORT $LN55@Draw
$LN56@Draw:
  003b8	0f 2f c8	 comiss	 xmm1, xmm0
  003bb	72 04		 jb	 SHORT $LN54@Draw
  003bd	33 f6		 xor	 esi, esi
  003bf	eb 17		 jmp	 SHORT $LN55@Draw
$LN54@Draw:
  003c1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  003c9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  003d1	e8 00 00 00 00	 call	 __ftol3
  003d6	8b f0		 mov	 esi, eax
$LN55@Draw:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  003d8	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$512$1$[ebp]
  003dd	0f 57 c0	 xorps	 xmm0, xmm0
  003e0	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  003e7	72 07		 jb	 SHORT $LN60@Draw
  003e9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  003ee	eb 24		 jmp	 SHORT $LN59@Draw
$LN60@Draw:
  003f0	0f 2f c1	 comiss	 xmm0, xmm1
  003f3	72 04		 jb	 SHORT $LN58@Draw
  003f5	33 c0		 xor	 eax, eax
  003f7	eb 1b		 jmp	 SHORT $LN59@Draw
$LN58@Draw:
  003f9	0f 28 c1	 movaps	 xmm0, xmm1
  003fc	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00404	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0040c	e8 00 00 00 00	 call	 __ftol3
  00411	0f 57 c0	 xorps	 xmm0, xmm0
$LN59@Draw:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 596  : 		vertices[2].x = fCenterX + fW;

  00414	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
  00419	f3 0f 58 8d 7c
	ff ff ff	 addss	 xmm1, DWORD PTR _fCenterX$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00421	c1 e0 08	 shl	 eax, 8
  00424	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 594  : 		vertices[2].u = 1.0f;

  00426	c7 45 dc 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+64], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0042d	c1 e0 08	 shl	 eax, 8
  00430	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 595  : 		vertices[2].v = 0.0f;

  00432	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+68], 0

; 596  : 		vertices[2].x = fCenterX + fW;

  00439	f3 0f 11 4d 98	 movss	 DWORD PTR _fW$1$[ebp], xmm1
  0043e	f3 0f 11 4d cc	 movss	 DWORD PTR _vertices$2[ebp+48], xmm1

; 597  : 		vertices[2].y = fCenterY - fW;

  00443	f3 0f 10 8d 6c
	ff ff ff	 movss	 xmm1, DWORD PTR tv996[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  0044b	c1 e0 08	 shl	 eax, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 597  : 		vertices[2].y = fCenterY - fW;

  0044e	f3 0f 11 4d d0	 movss	 DWORD PTR _vertices$2[ebp+52], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00453	0b c6		 or	 eax, esi

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00455	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$520$1$[ebp]
  0045a	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 592  : 		vertices[1].color = d3dColor;

  00461	89 45 c0	 mov	 DWORD PTR _vertices$2[ebp+36], eax

; 598  : 		vertices[2].z = 0.0f;

  00464	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+56], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0046b	72 07		 jb	 SHORT $LN66@Draw
  0046d	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00472	eb 23		 jmp	 SHORT $LN65@Draw
$LN66@Draw:
  00474	0f 2f c1	 comiss	 xmm0, xmm1
  00477	72 04		 jb	 SHORT $LN64@Draw
  00479	33 db		 xor	 ebx, ebx
  0047b	eb 1a		 jmp	 SHORT $LN65@Draw
$LN64@Draw:
  0047d	0f 28 c1	 movaps	 xmm0, xmm1
  00480	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00488	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00490	e8 00 00 00 00	 call	 __ftol3
  00495	8b d8		 mov	 ebx, eax
$LN65@Draw:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  00497	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$518$1$[ebp]
  0049c	0f 57 c9	 xorps	 xmm1, xmm1
  0049f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004a6	72 07		 jb	 SHORT $LN70@Draw
  004a8	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  004ad	eb 23		 jmp	 SHORT $LN69@Draw
$LN70@Draw:
  004af	0f 2f c8	 comiss	 xmm1, xmm0
  004b2	72 04		 jb	 SHORT $LN68@Draw
  004b4	33 ff		 xor	 edi, edi
  004b6	eb 1a		 jmp	 SHORT $LN69@Draw
$LN68@Draw:
  004b8	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004c0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  004c8	e8 00 00 00 00	 call	 __ftol3
  004cd	8b f8		 mov	 edi, eax
  004cf	0f 57 c9	 xorps	 xmm1, xmm1
$LN69@Draw:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  004d2	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$516$1$[ebp]
  004d7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  004de	72 07		 jb	 SHORT $LN74@Draw
  004e0	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  004e5	eb 20		 jmp	 SHORT $LN73@Draw
$LN74@Draw:
  004e7	0f 2f c8	 comiss	 xmm1, xmm0
  004ea	72 04		 jb	 SHORT $LN72@Draw
  004ec	33 f6		 xor	 esi, esi
  004ee	eb 17		 jmp	 SHORT $LN73@Draw
$LN72@Draw:
  004f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  004f8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00500	e8 00 00 00 00	 call	 __ftol3
  00505	8b f0		 mov	 esi, eax
$LN73@Draw:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00507	f3 0f 10 4d 88	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$512$1$[ebp]
  0050c	0f 57 c0	 xorps	 xmm0, xmm0
  0050f	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00516	72 07		 jb	 SHORT $LN78@Draw
  00518	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0051d	eb 24		 jmp	 SHORT $LN77@Draw
$LN78@Draw:
  0051f	0f 2f c1	 comiss	 xmm0, xmm1
  00522	72 04		 jb	 SHORT $LN76@Draw
  00524	33 c0		 xor	 eax, eax
  00526	eb 1b		 jmp	 SHORT $LN77@Draw
$LN76@Draw:
  00528	0f 28 c1	 movaps	 xmm0, xmm1
  0052b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00533	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0053b	e8 00 00 00 00	 call	 __ftol3
  00540	0f 57 c0	 xorps	 xmm0, xmm0
$LN77@Draw:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 603  : 		vertices[3].x = fCenterX + fW;

  00543	f3 0f 10 4d 98	 movss	 xmm1, DWORD PTR _fW$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00548	c1 e0 08	 shl	 eax, 8
  0054b	0b c3		 or	 eax, ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 603  : 		vertices[3].x = fCenterX + fW;

  0054d	f3 0f 11 4d e4	 movss	 DWORD PTR _vertices$2[ebp+72], xmm1

; 604  : 		vertices[3].y = fCenterY + fW;

  00552	f3 0f 10 4d 84	 movss	 xmm1, DWORD PTR tv1011[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00557	c1 e0 08	 shl	 eax, 8
  0055a	0b c7		 or	 eax, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 604  : 		vertices[3].y = fCenterY + fW;

  0055c	f3 0f 11 4d e8	 movss	 DWORD PTR _vertices$2[ebp+76], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00561	f3 0f 10 4d 94	 movss	 xmm1, DWORD PTR _d3dColor$1$sroa$520$1$[ebp]

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00566	c1 e0 08	 shl	 eax, 8
  00569	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 601  : 		vertices[3].u = 1.0f;

  0056b	c7 45 f4 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+88], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  00572	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 599  : 		vertices[2].color = d3dColor;

  00579	89 45 d8	 mov	 DWORD PTR _vertices$2[ebp+60], eax

; 602  : 		vertices[3].v = 1.0f;

  0057c	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR _vertices$2[ebp+92], 1065353216 ; 3f800000H

; 605  : 		vertices[3].z = 0.0f;

  00583	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _vertices$2[ebp+80], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1409 :     DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);

  0058a	72 07		 jb	 SHORT $LN84@Draw
  0058c	bb ff 00 00 00	 mov	 ebx, 255		; 000000ffH
  00591	eb 23		 jmp	 SHORT $LN83@Draw
$LN84@Draw:
  00593	0f 2f c1	 comiss	 xmm0, xmm1
  00596	72 04		 jb	 SHORT $LN82@Draw
  00598	33 db		 xor	 ebx, ebx
  0059a	eb 1a		 jmp	 SHORT $LN83@Draw
$LN82@Draw:
  0059c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@437f0000
  005a4	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f000000
  005ac	0f 28 c1	 movaps	 xmm0, xmm1
  005af	e8 00 00 00 00	 call	 __ftol3
  005b4	8b d8		 mov	 ebx, eax
$LN83@Draw:

; 1410 :     DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);

  005b6	f3 0f 10 45 90	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$518$1$[ebp]
  005bb	0f 57 c9	 xorps	 xmm1, xmm1
  005be	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005c5	72 07		 jb	 SHORT $LN88@Draw
  005c7	bf ff 00 00 00	 mov	 edi, 255		; 000000ffH
  005cc	eb 23		 jmp	 SHORT $LN87@Draw
$LN88@Draw:
  005ce	0f 2f c8	 comiss	 xmm1, xmm0
  005d1	72 04		 jb	 SHORT $LN86@Draw
  005d3	33 ff		 xor	 edi, edi
  005d5	eb 1a		 jmp	 SHORT $LN87@Draw
$LN86@Draw:
  005d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  005df	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  005e7	e8 00 00 00 00	 call	 __ftol3
  005ec	8b f8		 mov	 edi, eax
  005ee	0f 57 c9	 xorps	 xmm1, xmm1
$LN87@Draw:

; 1411 :     DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);

  005f1	f3 0f 10 45 8c	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$516$1$[ebp]
  005f6	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  005fd	72 07		 jb	 SHORT $LN92@Draw
  005ff	be ff 00 00 00	 mov	 esi, 255		; 000000ffH
  00604	eb 20		 jmp	 SHORT $LN91@Draw
$LN92@Draw:
  00606	0f 2f c8	 comiss	 xmm1, xmm0
  00609	72 04		 jb	 SHORT $LN90@Draw
  0060b	33 f6		 xor	 esi, esi
  0060d	eb 17		 jmp	 SHORT $LN91@Draw
$LN90@Draw:
  0060f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  00617	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  0061f	e8 00 00 00 00	 call	 __ftol3
  00624	8b f0		 mov	 esi, eax
$LN91@Draw:

; 1412 :     DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

  00626	f3 0f 10 45 88	 movss	 xmm0, DWORD PTR _d3dColor$1$sroa$512$1$[ebp]
  0062b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  00632	72 07		 jb	 SHORT $LN96@Draw
  00634	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00639	eb 21		 jmp	 SHORT $LN95@Draw
$LN96@Draw:
  0063b	0f 57 c9	 xorps	 xmm1, xmm1
  0063e	0f 2f c8	 comiss	 xmm1, xmm0
  00641	72 04		 jb	 SHORT $LN94@Draw
  00643	33 c0		 xor	 eax, eax
  00645	eb 15		 jmp	 SHORT $LN95@Draw
$LN94@Draw:
  00647	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@437f0000
  0064f	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00657	e8 00 00 00 00	 call	 __ftol3
$LN95@Draw:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 608  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(TVertex));

  0065c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1414 :     return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;

  00662	c1 e0 08	 shl	 eax, 8
  00665	0b c3		 or	 eax, ebx
  00667	c1 e0 08	 shl	 eax, 8
  0066a	0b c7		 or	 eax, edi
  0066c	c1 e0 08	 shl	 eax, 8
  0066f	0b c6		 or	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 608  : 		STATEMANAGER.DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, vertices, sizeof(TVertex));

  00671	6a 18		 push	 24			; 00000018H
  00673	89 45 f0	 mov	 DWORD PTR _vertices$2[ebp+84], eax
  00676	8d 45 9c	 lea	 eax, DWORD PTR _vertices$2[ebp]
  00679	50		 push	 eax
  0067a	6a 02		 push	 2
  0067c	6a 05		 push	 5
  0067e	e8 00 00 00 00	 call	 ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00683	8b 9d 68 ff ff
	ff		 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 565  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  00689	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$1$[ebp]
  0068f	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fBrightScale$[ebp]
  00694	42		 inc	 edx
  00695	89 95 78 ff ff
	ff		 mov	 DWORD PTR _i$1$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0069b	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0069e	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  006a1	2b c1		 sub	 eax, ecx
  006a3	c1 f8 02	 sar	 eax, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\LensFlare.cpp

; 565  : 	for (unsigned int i = 0; i < m_vFlares.size(); i++)

  006a6	3b d0		 cmp	 edx, eax
  006a8	0f 82 72 fa ff
	ff		 jb	 $LL4@Draw
  006ae	5f		 pop	 edi
  006af	5b		 pop	 ebx
$LN3@Draw:

; 609  : 	}
; 610  : 
; 611  : 	STATEMANAGER.RestoreRenderState(D3DRS_DESTBLEND);

  006b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  006b6	6a 14		 push	 20			; 00000014H
  006b8	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 612  : }

  006bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006c0	33 cd		 xor	 ecx, ebp
  006c2	5e		 pop	 esi
  006c3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006c8	8b e5		 mov	 esp, ebp
  006ca	5d		 pop	 ebp
  006cb	c2 14 00	 ret	 20			; 00000014H
?Draw@CFlare@@QAEXMHHHH@Z ENDP				; CFlare::Draw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z
_TEXT	SEGMENT
__Right_size$1$ = -16					; size = 4
$T1 = -12						; size = 4
__New_capacity$2$ = -8					; size = 4
__Left_size$1$ = -4					; size = 4
___formal$ = 8						; size = 1
__New_size$1$ = 12					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2949 :         : _Mypair(_One_then_variadic_args_t{}, _Left._Getal()) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 2956 :         const auto _Right_size = _Right_data._Mysize;

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	57		 push	 edi
  00011	8b 7d 0c	 mov	 edi, DWORD PTR __Left$[ebp]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00014	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00017	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2950 :         auto& _My_data    = _Mypair._Myval2;
; 2951 :         auto& _Left_data  = _Left._Mypair._Myval2;
; 2952 :         auto& _Right_data = _Right._Mypair._Myval2;
; 2953 :         _Left_data._Orphan_all();
; 2954 :         _Right_data._Orphan_all();
; 2955 :         const auto _Left_size  = _Left_data._Mysize;

  00025	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]

; 2956 :         const auto _Right_size = _Right_data._Mysize;

  00028	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  0002b	89 4d fc	 mov	 DWORD PTR __Left_size$1$[ebp], ecx
  0002e	89 55 f0	 mov	 DWORD PTR __Right_size$1$[ebp], edx

; 2957 : 
; 2958 :         const auto _Left_capacity  = _Left_data._Myres;
; 2959 :         const auto _Right_capacity = _Right_data._Myres;
; 2960 :         // overflow is OK due to max_size() checks:
; 2961 :         const auto _New_size     = static_cast<size_type>(_Left_size + _Right_size);

  00031	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00034	89 45 0c	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2962 :         const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;

  00037	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0003a	2b c1		 sub	 eax, ecx
  0003c	3b d0		 cmp	 edx, eax

; 2963 :         if (_Fits_in_left && _Right_capacity <= _Left_capacity) {

  0003e	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00041	77 5a		 ja	 SHORT $LN93@basic_stri
  00043	3b 47 14	 cmp	 eax, DWORD PTR [edi+20]
  00046	77 55		 ja	 SHORT $LN93@basic_stri

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00048	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  0004b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  0004e	f3 0f 7e 47 10	 movq	 xmm0, QWORD PTR [edi+16]
  00053	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  00058	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  0005f	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00066	c6 07 00	 mov	 BYTE PTR [edi], 0

; 2283 :         value_type* _Result = _Bx._Buf;

  00069	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  0006b	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0006f	72 02		 jb	 SHORT $LN57@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00071	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN57@basic_stri:

; 2301 :         return _BUF_SIZE <= _Myres;

  00073	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00077	72 02		 jb	 SHORT $LN62@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00079	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN62@basic_stri:

; 2964 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2965 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2966 :             _Take_contents(_Left);
; 2967 :             const auto _Ptr = _My_data._Myptr();
; 2968 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Right_size));
; 2969 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007b	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007e	50		 push	 eax

; 2964 :             // take _Left's buffer, max_size() is OK because _Fits_in_left
; 2965 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2966 :             _Take_contents(_Left);
; 2967 :             const auto _Ptr = _My_data._Myptr();
; 2968 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Right_size));
; 2969 :             _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0007f	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00082	53		 push	 ebx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _memcpy

; 2970 :             _My_data._Mysize = _New_size;

  00089	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00092	8b c6		 mov	 eax, esi
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
$LN93@basic_stri:

; 2971 :             return;
; 2972 :         }
; 2973 : 
; 2974 :         const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;

  0009d	2b c2		 sub	 eax, edx
  0009f	3b c8		 cmp	 ecx, eax

; 2975 :         if (_Allocators_equal(_Getal(), _Right._Getal()) && _Fits_in_right) {

  000a1	77 5b		 ja	 SHORT $LN92@basic_stri

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000a3	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]

; 2989 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Left_size));
; 2990 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000a6	8d 42 01	 lea	 eax, DWORD PTR [edx+1]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000a9	50		 push	 eax

; 3140 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  000aa	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  000ad	f3 0f 7e 43 10	 movq	 xmm0, QWORD PTR [ebx+16]
  000b2	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0

; 4998 :         _My_data._Mysize = 0;

  000b7	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000be	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000c5	c6 03 00	 mov	 BYTE PTR [ebx], 0

; 2976 :             // take _Right's buffer, max_size() is OK because _Fits_in_right
; 2977 :             // At this point, we have tested:
; 2978 :             // !(_Fits_in_left && _Right_capacity <= _Left_capacity) && _Fits_in_right
; 2979 :             // therefore: (by De Morgan's Laws)
; 2980 :             // (!_Fits_in_left || _Right_capacity > _Left_capacity) && _Fits_in_right
; 2981 :             // therefore: (by the distributive property)
; 2982 :             // (!_Fits_in_left && _Fits_in_right)  // implying _Right has more capacity
; 2983 :             //     || (_Right_capacity > _Left_capacity && _Fits_in_right)  // tests that _Right has more capacity
; 2984 :             // therefore: _Right must have more than the minimum capacity, so it must be _Large_string_engaged()
; 2985 :             _STL_INTERNAL_CHECK(_Right_data._Large_string_engaged());
; 2986 :             _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal())); // throws, hereafter nothrow in this block
; 2987 :             _Take_contents(_Right);
; 2988 :             const auto _Ptr = _Unfancy(_My_data._Bx._Ptr);

  000c8	8b 1e		 mov	 ebx, DWORD PTR [esi]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ca	53		 push	 ebx

; 2989 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Left_size));
; 2990 :             _Traits::move(_Ptr + _Left_size, _Ptr, _Right_size + 1);

  000cb	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _memmove
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  000d7	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  000db	72 02		 jb	 SHORT $LN85@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  000dd	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN85@basic_stri:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  000e2	50		 push	 eax
  000e3	57		 push	 edi
  000e4	53		 push	 ebx
  000e5	e8 00 00 00 00	 call	 _memcpy

; 2991 :             _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 2992 :             _My_data._Mysize = _New_size;

  000ea	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f0	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000f3	8b c6		 mov	 eax, esi
  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	5b		 pop	 ebx
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 0c 00	 ret	 12			; 0000000cH
$LN92@basic_stri:

; 2993 :             return;
; 2994 :         }
; 2995 : 
; 2996 :         // can't use either buffer, reallocate
; 2997 :         const auto _Max = max_size();
; 2998 :         if (_Max - _Left_size < _Right_size) { // check if max_size() is OK

  000fe	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00103	2b c1		 sub	 eax, ecx
  00105	3b c2		 cmp	 eax, edx
  00107	0f 82 ae 00 00
	00		 jb	 $LN100@basic_stri

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0010d	8b 45 0c	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  00110	83 c8 0f	 or	 eax, 15			; 0000000fH
  00113	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00118	76 0e		 jbe	 SHORT $LN15@basic_stri

; 4885 :             return _Max;

  0011a	c7 45 f8 ff ff
	ff 7f		 mov	 DWORD PTR __New_capacity$2$[ebp], 2147483647 ; 7fffffffH
  00121	ba 00 00 00 80	 mov	 edx, -2147483648	; 80000000H
  00126	eb 18		 jmp	 SHORT $LN94@basic_stri
$LN15@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00128	ba 16 00 00 00	 mov	 edx, 22			; 00000016H
  0012d	3b c2		 cmp	 eax, edx
  0012f	0f 42 c2	 cmovb	 eax, edx
  00132	89 45 f8	 mov	 DWORD PTR __New_capacity$2$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3005 :         const pointer _Fancyptr = _Getal().allocate(_New_capacity + 1); // throws

  00135	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00138	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0013e	72 13		 jb	 SHORT $LN23@basic_stri
$LN94@basic_stri:

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00140	52		 push	 edx
  00141	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00146	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00149	8b d0		 mov	 edx, eax
  0014b	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$2$[ebp]
  0014e	83 c4 04	 add	 esp, 4
  00151	eb 1c		 jmp	 SHORT $LN98@basic_stri
$LN23@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00153	85 d2		 test	 edx, edx
  00155	74 16		 je	 SHORT $LN24@basic_stri

; 77   :         return ::operator new(_Bytes);

  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0015d	8b 4d fc	 mov	 ecx, DWORD PTR __Left_size$1$[ebp]
  00160	8b d0		 mov	 edx, eax
  00162	89 45 f4	 mov	 DWORD PTR $T1[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00165	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00168	8b 45 f8	 mov	 eax, DWORD PTR __New_capacity$2$[ebp]
  0016b	eb 05		 jmp	 SHORT $LN22@basic_stri
$LN24@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0016d	33 d2		 xor	 edx, edx
$LN98@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3012 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0016f	89 55 f4	 mov	 DWORD PTR $T1[ebp], edx
$LN22@basic_stri:

; 3013 :         _My_data._Mysize = _New_size;

  00172	8b 5d 0c	 mov	 ebx, DWORD PTR __New_size$1$[ebp]
  00175	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 2284 :         if (_Large_string_engaged()) {

  00178	8b 5d 10	 mov	 ebx, DWORD PTR __Right$[ebp]

; 3012 :         _Construct_in_place(_My_data._Bx._Ptr, _Fancyptr);

  0017b	89 16		 mov	 DWORD PTR [esi], edx

; 3014 :         _My_data._Myres  = _New_capacity;

  0017d	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 2301 :         return _BUF_SIZE <= _Myres;

  00180	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00184	72 02		 jb	 SHORT $LN29@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00186	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN29@basic_stri:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00188	51		 push	 ecx
  00189	57		 push	 edi
  0018a	52		 push	 edx
  0018b	e8 00 00 00 00	 call	 _memcpy
  00190	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2301 :         return _BUF_SIZE <= _Myres;

  00193	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  00197	72 02		 jb	 SHORT $LN36@basic_stri

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  00199	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN36@basic_stri:

; 3015 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 3016 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 3017 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  0019b	8b 45 f0	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  0019e	40		 inc	 eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0019f	50		 push	 eax

; 3015 :         const auto _Ptr  = _Unfancy(_Fancyptr);
; 3016 :         _Traits::copy(_Ptr, _Left_data._Myptr(), _Left_size);
; 3017 :         _Traits::copy(_Ptr + _Left_size, _Right_data._Myptr(), _Right_size + 1);

  001a0	8b 45 fc	 mov	 eax, DWORD PTR __Left_size$1$[ebp]
  001a3	03 45 f4	 add	 eax, DWORD PTR $T1[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  001a6	53		 push	 ebx
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 _memcpy

; 3018 :         _ASAN_STRING_CREATE(*this);
; 3019 :         _Proxy._Release();
; 3020 :     }

  001ad	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b0	8b c6		 mov	 eax, esi
  001b2	5f		 pop	 edi
  001b3	5e		 pop	 esi
  001b4	5b		 pop	 ebx
  001b5	8b e5		 mov	 esp, ebp
  001b7	5d		 pop	 ebp
  001b8	c2 0c 00	 ret	 12			; 0000000cH
$LN100@basic_stri:

; 2999 :             _Xlen_string();

  001bb	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN96@basic_stri:
  001c0	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@U_String_constructor_concat_tag@1@AAV01@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2674 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 415  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2740 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memmove

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00054	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4885 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN42@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN42@basic_stri
$LN30@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN42@basic_stri
$LN31@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN42@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN40@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Result$1$ = 8						; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2626 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00010	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00013	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001a	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00021	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2627 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00025	8b 58 10	 mov	 ebx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  00028	72 05		 jb	 SHORT $LN12@basic_stri

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 45 08	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN12@basic_stri:

; 2740 :         if (_Count > max_size()) {

  0002f	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00035	0f 87 9d 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003b	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00042	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00045	73 17		 jae	 SHORT $LN18@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00047	6a 10		 push	 16			; 00000010H
  00049	50		 push	 eax
  0004a	57		 push	 edi

; 2749 :             _My_data._Mysize = _Count;

  0004b	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004e	e8 00 00 00 00	 call	 _memmove
  00053	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 :     }

  00056	8b c7		 mov	 eax, edi
  00058	5f		 pop	 edi
  00059	5b		 pop	 ebx
  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN18@basic_stri:
  0005e	56		 push	 esi

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0005f	8b f3		 mov	 esi, ebx
  00061	83 ce 0f	 or	 esi, 15			; 0000000fH
  00064	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 17		 jbe	 SHORT $LN25@basic_stri

; 4885 :             return _Max;

  0006c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00071	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007c	83 c4 04	 add	 esp, 4
  0007f	8b c8		 mov	 ecx, eax
  00081	eb 34		 jmp	 SHORT $LN32@basic_stri
$LN25@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00083	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00088	3b f0		 cmp	 esi, eax
  0008a	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00090	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00095	72 0d		 jb	 SHORT $LN33@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009d	83 c4 04	 add	 esp, 4
  000a0	8b c8		 mov	 ecx, eax
  000a2	eb 13		 jmp	 SHORT $LN32@basic_stri
$LN33@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0d		 je	 SHORT $LN34@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	8b c8		 mov	 ecx, eax
  000b3	eb 02		 jmp	 SHORT $LN32@basic_stri
$LN34@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b5	33 c9		 xor	 ecx, ecx
$LN32@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2790 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000b7	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  000ba	89 0f		 mov	 DWORD PTR [edi], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax
  000bd	ff 75 08	 push	 DWORD PTR __Result$1$[ebp]

; 2781 :         _My_data._Mysize = _Count;

  000c0	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c3	51		 push	 ecx

; 2782 :         _My_data._Myres  = _New_capacity;

  000c4	89 77 14	 mov	 DWORD PTR [edi+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c7	e8 00 00 00 00	 call	 _memcpy
  000cc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2628 :     }

  000cf	8b c7		 mov	 eax, edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d1	5e		 pop	 esi

; 2628 :     }

  000d2	5f		 pop	 edi
  000d3	5b		 pop	 ebx
  000d4	5d		 pop	 ebp
  000d5	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000d8	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN42@basic_stri:
  000dd	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
