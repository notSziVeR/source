; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\CollisionData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?_Fake_alloc@std@@3U_Fake_allocator@1@B		; std::_Fake_alloc
PUBLIC	??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; CDynamicPool<CSphereCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8 ; CDynamicPool<CSphereCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8 ; CDynamicPool<CCylinderCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8 ; CDynamicPool<CPlaneCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; CDynamicPool<CAABBCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8 ; CDynamicPool<CAABBCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; CDynamicPool<COBBCollisionInstance>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8 ; CDynamicPool<COBBCollisionInstance> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8	; CDynamicPool<COBBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8	; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8 ; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; CDynamicPool<CSphereCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CSphereCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; CDynamicPool<CCylinderCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CCylinderCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; CDynamicPool<CPlaneCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CPlaneCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; CDynamicPool<CAABBCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<CAABBCollisionInstance>::`scalar deleting destructor'
PUBLIC	??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; CDynamicPool<COBBCollisionInstance>::`vftable'
PUBLIC	??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z ; CDynamicPool<COBBCollisionInstance>::`scalar deleting destructor'
EXTRN	??_E?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CSphereCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CCylinderCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CPlaneCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<CAABBCollisionInstance>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z:PROC ; CDynamicPool<COBBCollisionInstance>::`vector deleting destructor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; CDynamicPool<COBBCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; CDynamicPool<CAABBCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; CDynamicPool<CPlaneCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; CDynamicPool<CCylinderCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; CDynamicPool<CSphereCollisionInstance>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8 ; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCOBBCollisionInstance@@@@8 ; CDynamicPool<COBBCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8 DD 00H	; CDynamicPool<COBBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<COBBCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCOBBCollisionInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<COBBCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCOBBCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCOBBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCAABBCollisionInstance@@@@8 ; CDynamicPool<CAABBCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8 DD 00H	; CDynamicPool<CAABBCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CAABBCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCAABBCollisionInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CAABBCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCAABBCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCAABBCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCPlaneCollisionInstance@@@@8 ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8 DD 00H ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CPlaneCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CPlaneCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCPlaneCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCPlaneCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCCylinderCollisionInstance@@@@8 ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8 DD 00H ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CCylinderCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CCylinderCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCCylinderCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCCylinderCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCSphereCollisionInstance@@@@8 ; CDynamicPool<CSphereCollisionInstance>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8 DD 00H ; CDynamicPool<CSphereCollisionInstance>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CSphereCollisionInstance> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCSphereCollisionInstance@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ DD 00H ; CDynamicPool<CSphereCollisionInstance>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCSphereCollisionInstance@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCSphereCollisionInstance@@@@8
rdata$r	ENDS
;	COMDAT ?_Fake_alloc@std@@3U_Fake_allocator@1@B
CONST	SEGMENT
?_Fake_alloc@std@@3U_Fake_allocator@1@B	ORG $+1		; std::_Fake_alloc
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?DestroyCollisionInstanceSystem@@YAXXZ		; DestroyCollisionInstanceSystem
PUBLIC	?Destroy@CBaseCollisionInstance@@QAEXXZ		; CBaseCollisionInstance::Destroy
PUBLIC	?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ; CBaseCollisionInstance::BuildCollisionInstance
PUBLIC	?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute
PUBLIC	?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CSphereCollisionInstance::Render
PUBLIC	?OnDestroy@CSphereCollisionInstance@@MAEXXZ	; CSphereCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CSphereCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CSphereCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CSphereCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ ; CPlaneCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ ; CPlaneCollisionInstance::GetAttribute
PUBLIC	?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CPlaneCollisionInstance::Render
PUBLIC	?OnDestroy@CPlaneCollisionInstance@@MAEXXZ	; CPlaneCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CPlaneCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CPlaneCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CPlaneCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ ; CAABBCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ ; CAABBCollisionInstance::GetAttribute
PUBLIC	?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CAABBCollisionInstance::Render
PUBLIC	?OnDestroy@CAABBCollisionInstance@@MAEXXZ	; CAABBCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CAABBCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CAABBCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CAABBCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ ; COBBCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ ; COBBCollisionInstance::GetAttribute
PUBLIC	?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; COBBCollisionInstance::Render
PUBLIC	?OnDestroy@COBBCollisionInstance@@MAEXXZ	; COBBCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; COBBCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; COBBCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; COBBCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ ; CCylinderCollisionInstance::GetAttribute
PUBLIC	?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ ; CCylinderCollisionInstance::GetAttribute
PUBLIC	?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ; CCylinderCollisionInstance::Render
PUBLIC	?OnDestroy@CCylinderCollisionInstance@@MAEXXZ	; CCylinderCollisionInstance::OnDestroy
PUBLIC	?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::OnMovementCollisionDynamicSphere
PUBLIC	?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::OnCollisionDynamicSphere
PUBLIC	?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::OnGetCollisionMovementAdjust
PUBLIC	?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
PUBLIC	?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
PUBLIC	??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z ; CDynamicPool<CSphereCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z ; CDynamicPool<CCylinderCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z ; CDynamicPool<CPlaneCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z ; CDynamicPool<CAABBCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength
PUBLIC	??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
PUBLIC	?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z ; CDynamicPool<COBBCollisionInstance>::Delete
PUBLIC	?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength
PUBLIC	??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@AAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@AAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@AAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@AAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@AAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
PUBLIC	??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>
PUBLIC	??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CBaseCollisionInstance@@6B@			; CBaseCollisionInstance::`vftable'
PUBLIC	??_7CSphereCollisionInstance@@6B@		; CSphereCollisionInstance::`vftable'
PUBLIC	??_7CPlaneCollisionInstance@@6B@		; CPlaneCollisionInstance::`vftable'
PUBLIC	??_7CAABBCollisionInstance@@6B@			; CAABBCollisionInstance::`vftable'
PUBLIC	??_7COBBCollisionInstance@@6B@			; COBBCollisionInstance::`vftable'
PUBLIC	??_7CCylinderCollisionInstance@@6B@		; CCylinderCollisionInstance::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A ; gs_sci
PUBLIC	?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A ; gs_cci
PUBLIC	?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A ; gs_pci
PUBLIC	?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A ; gs_aci
PUBLIC	?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A ; gs_oci
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CBaseCollisionInstance@@6B@		; CBaseCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBaseCollisionInstance@@@8		; CBaseCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CBaseCollisionInstance@@8			; CBaseCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBaseCollisionInstance@@8			; CBaseCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBaseCollisionInstance@@8		; CBaseCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CSphereCollisionInstance@@6B@		; CSphereCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCSphereCollisionInstance@@@8		; CSphereCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CSphereCollisionInstance@@8		; CSphereCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CSphereCollisionInstance@@8		; CSphereCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CSphereCollisionInstance@@8	; CSphereCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CPlaneCollisionInstance@@6B@		; CPlaneCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCPlaneCollisionInstance@@@8		; CPlaneCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CPlaneCollisionInstance@@8			; CPlaneCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CPlaneCollisionInstance@@8			; CPlaneCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CPlaneCollisionInstance@@8	; CPlaneCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CAABBCollisionInstance@@6B@		; CAABBCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAABBCollisionInstance@@@8		; CAABBCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CAABBCollisionInstance@@8			; CAABBCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAABBCollisionInstance@@8			; CAABBCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAABBCollisionInstance@@8		; CAABBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4COBBCollisionInstance@@6B@			; COBBCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCOBBCollisionInstance@@@8		; COBBCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3COBBCollisionInstance@@8			; COBBCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2COBBCollisionInstance@@8			; COBBCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@COBBCollisionInstance@@8		; COBBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCylinderCollisionInstance@@6B@		; CCylinderCollisionInstance::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCylinderCollisionInstance@@@8		; CCylinderCollisionInstance `RTTI Type Descriptor'
PUBLIC	??_R3CCylinderCollisionInstance@@8		; CCylinderCollisionInstance::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCylinderCollisionInstance@@8		; CCylinderCollisionInstance::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCylinderCollisionInstance@@8	; CCylinderCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3f000000
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3f800000
PUBLIC	__real@40800000
PUBLIC	__real@bf1a36e2eb1c432d
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	??0CScreen@@QAE@XZ:PROC				; CScreen::CScreen
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z:PROC ; CScreen::RenderBar3d
EXTRN	?RenderCube@CScreen@@QAEXMMMMMM@Z:PROC		; CScreen::RenderCube
EXTRN	?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z:PROC ; CScreen::RenderCube
EXTRN	?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z:PROC ; CScreen::RenderSphere
EXTRN	?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z:PROC ; CScreen::RenderCylinder
EXTRN	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z:PROC ; IntersectLineSegments
EXTRN	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SetRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CSphereCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CSphereCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CPlaneCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CPlaneCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CCylinderCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CCylinderCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `CAABBCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `CAABBCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
_BSS	SEGMENT
?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A DD 01H DUP (?) ; `COBBCollisionInstance::Render'::`2'::s
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA DD 01H DUP (?) ; `COBBCollisionInstance::Render'::`2'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?gs_sci$initializer$@@3P6AXXZA DD FLAT:??__Egs_sci@@YAXXZ ; gs_sci$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@bf1a36e2eb1c432d
CONST	SEGMENT
__real@bf1a36e2eb1c432d DQ 0bf1a36e2eb1c432dr	; -0.0001
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@CCylinderCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCylinderCollisionInstance@@8 DD FLAT:??_R0?AVCCylinderCollisionInstance@@@8 ; CCylinderCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCylinderCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CCylinderCollisionInstance@@8
rdata$r	SEGMENT
??_R2CCylinderCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CCylinderCollisionInstance@@8 ; CCylinderCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CCylinderCollisionInstance@@8
rdata$r	SEGMENT
??_R3CCylinderCollisionInstance@@8 DD 00H		; CCylinderCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCylinderCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCylinderCollisionInstance@@@8
data$rs	SEGMENT
??_R0?AVCCylinderCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CCylinderCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCylinderCollisionInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CCylinderCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CCylinderCollisionInstance@@6B@ DD 00H		; CCylinderCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCylinderCollisionInstance@@@8
	DD	FLAT:??_R3CCylinderCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@COBBCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@COBBCollisionInstance@@8 DD FLAT:??_R0?AVCOBBCollisionInstance@@@8 ; COBBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3COBBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2COBBCollisionInstance@@8
rdata$r	SEGMENT
??_R2COBBCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@COBBCollisionInstance@@8 ; COBBCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3COBBCollisionInstance@@8
rdata$r	SEGMENT
??_R3COBBCollisionInstance@@8 DD 00H			; COBBCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2COBBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCOBBCollisionInstance@@@8
data$rs	SEGMENT
??_R0?AVCOBBCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; COBBCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCOBBCollisionInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4COBBCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4COBBCollisionInstance@@6B@ DD 00H			; COBBCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCOBBCollisionInstance@@@8
	DD	FLAT:??_R3COBBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAABBCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAABBCollisionInstance@@8 DD FLAT:??_R0?AVCAABBCollisionInstance@@@8 ; CAABBCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAABBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CAABBCollisionInstance@@8
rdata$r	SEGMENT
??_R2CAABBCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CAABBCollisionInstance@@8 ; CAABBCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CAABBCollisionInstance@@8
rdata$r	SEGMENT
??_R3CAABBCollisionInstance@@8 DD 00H			; CAABBCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CAABBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAABBCollisionInstance@@@8
data$rs	SEGMENT
??_R0?AVCAABBCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CAABBCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAABBCollisionInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CAABBCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CAABBCollisionInstance@@6B@ DD 00H			; CAABBCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAABBCollisionInstance@@@8
	DD	FLAT:??_R3CAABBCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CPlaneCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CPlaneCollisionInstance@@8 DD FLAT:??_R0?AVCPlaneCollisionInstance@@@8 ; CPlaneCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CPlaneCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CPlaneCollisionInstance@@8
rdata$r	SEGMENT
??_R2CPlaneCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CPlaneCollisionInstance@@8 ; CPlaneCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CPlaneCollisionInstance@@8
rdata$r	SEGMENT
??_R3CPlaneCollisionInstance@@8 DD 00H			; CPlaneCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CPlaneCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCPlaneCollisionInstance@@@8
data$rs	SEGMENT
??_R0?AVCPlaneCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CPlaneCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCPlaneCollisionInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CPlaneCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CPlaneCollisionInstance@@6B@ DD 00H		; CPlaneCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCPlaneCollisionInstance@@@8
	DD	FLAT:??_R3CPlaneCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CSphereCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CSphereCollisionInstance@@8 DD FLAT:??_R0?AVCSphereCollisionInstance@@@8 ; CSphereCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CSphereCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CSphereCollisionInstance@@8
rdata$r	SEGMENT
??_R2CSphereCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CSphereCollisionInstance@@8 ; CSphereCollisionInstance::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R3CSphereCollisionInstance@@8
rdata$r	SEGMENT
??_R3CSphereCollisionInstance@@8 DD 00H			; CSphereCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CSphereCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCSphereCollisionInstance@@@8
data$rs	SEGMENT
??_R0?AVCSphereCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CSphereCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCSphereCollisionInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CSphereCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CSphereCollisionInstance@@6B@ DD 00H		; CSphereCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCSphereCollisionInstance@@@8
	DD	FLAT:??_R3CSphereCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBaseCollisionInstance@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBaseCollisionInstance@@8 DD FLAT:??_R0?AVCBaseCollisionInstance@@@8 ; CBaseCollisionInstance::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R2CBaseCollisionInstance@@8
rdata$r	SEGMENT
??_R2CBaseCollisionInstance@@8 DD FLAT:??_R1A@?0A@EA@CBaseCollisionInstance@@8 ; CBaseCollisionInstance::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CBaseCollisionInstance@@8
rdata$r	SEGMENT
??_R3CBaseCollisionInstance@@8 DD 00H			; CBaseCollisionInstance::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBaseCollisionInstance@@@8
data$rs	SEGMENT
??_R0?AVCBaseCollisionInstance@@@8 DD FLAT:??_7type_info@@6B@ ; CBaseCollisionInstance `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBaseCollisionInstance@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CBaseCollisionInstance@@6B@
rdata$r	SEGMENT
??_R4CBaseCollisionInstance@@6B@ DD 00H			; CBaseCollisionInstance::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBaseCollisionInstance@@@8
	DD	FLAT:??_R3CBaseCollisionInstance@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@ ; gs_sci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@ ; gs_cci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@ ; gs_pci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@ ; gs_aci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A DD FLAT:??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@ ; gs_oci
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_7CCylinderCollisionInstance@@6B@
CONST	SEGMENT
??_7CCylinderCollisionInstance@@6B@ DD FLAT:??_R4CCylinderCollisionInstance@@6B@ ; CCylinderCollisionInstance::`vftable'
	DD	FLAT:?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CCylinderCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7COBBCollisionInstance@@6B@
CONST	SEGMENT
??_7COBBCollisionInstance@@6B@ DD FLAT:??_R4COBBCollisionInstance@@6B@ ; COBBCollisionInstance::`vftable'
	DD	FLAT:?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@COBBCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CAABBCollisionInstance@@6B@
CONST	SEGMENT
??_7CAABBCollisionInstance@@6B@ DD FLAT:??_R4CAABBCollisionInstance@@6B@ ; CAABBCollisionInstance::`vftable'
	DD	FLAT:?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CAABBCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CPlaneCollisionInstance@@6B@
CONST	SEGMENT
??_7CPlaneCollisionInstance@@6B@ DD FLAT:??_R4CPlaneCollisionInstance@@6B@ ; CPlaneCollisionInstance::`vftable'
	DD	FLAT:?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CPlaneCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CSphereCollisionInstance@@6B@
CONST	SEGMENT
??_7CSphereCollisionInstance@@6B@ DD FLAT:??_R4CSphereCollisionInstance@@6B@ ; CSphereCollisionInstance::`vftable'
	DD	FLAT:?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	FLAT:?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
	DD	FLAT:?OnDestroy@CSphereCollisionInstance@@MAEXXZ
CONST	ENDS
;	COMDAT ??_7CBaseCollisionInstance@@6B@
CONST	SEGMENT
??_7CBaseCollisionInstance@@6B@ DD FLAT:??_R4CBaseCollisionInstance@@6B@ ; CBaseCollisionInstance::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0
__ehfuncinfo$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?gs_cci$initializer$@@3P6AXXZA DD FLAT:??__Egs_cci@@YAXXZ ; gs_cci$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_pci$initializer$@@3P6AXXZA DD FLAT:??__Egs_pci@@YAXXZ ; gs_pci$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_aci$initializer$@@3P6AXXZA DD FLAT:??__Egs_aci@@YAXXZ ; gs_aci$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?gs_oci$initializer$@@3P6AXXZA DD FLAT:??__Egs_oci@@YAXXZ ; gs_oci$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z PROC ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@AAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@AAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCSphereCollisionInstance@@PAPAV1@@std@@YAPAPAVCSphereCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CSphereCollisionInstance * *,CSphereCollisionInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@AAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@AAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@AAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCCylinderCollisionInstance@@PAPAV1@@std@@YAPAPAVCCylinderCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CCylinderCollisionInstance * *,CCylinderCollisionInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@AAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@AAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@AAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCPlaneCollisionInstance@@PAPAV1@@std@@YAPAPAVCPlaneCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CPlaneCollisionInstance * *,CPlaneCollisionInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@AAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@AAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@AAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCAABBCollisionInstance@@PAPAV1@@std@@YAPAPAVCAABBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<CAABBCollisionInstance * *,CAABBCollisionInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@AAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@AAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@AAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z PROC ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCOBBCollisionInstance@@PAPAV1@@std@@YAPAPAVCOBBCollisionInstance@@PAPAV1@00@Z ; std::_Copy_memmove<COBBCollisionInstance * *,COBBCollisionInstance * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@AAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `COBBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `COBBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CAABBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CAABBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CCylinderCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CCylinderCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CPlaneCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CPlaneCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ
text$yd	SEGMENT
??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ PROC ; `CSphereCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00005	e9 00 00 00 00	 jmp	 ??1CScreen@@UAE@XZ	; CScreen::~CScreen
??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ENDP ; `CSphereCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
text$yd	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_oci@@YAXXZ
text$yd	SEGMENT
??__Fgs_oci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_oci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A ; gs_oci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
??__Fgs_oci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_oci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_oci@@YAXXZ
text$di	SEGMENT
??__Egs_oci@@YAXXZ PROC					; `dynamic initializer for 'gs_oci'', COMDAT

; 22   : CDynamicPool<COBBCollisionInstance> gs_oci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_oci@@YAXXZ ; `dynamic atexit destructor for 'gs_oci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_oci@@YAXXZ ENDP					; `dynamic initializer for 'gs_oci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<COBBCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCOBBCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<COBBCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z PROC ; CDynamicPool<COBBCollisionInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	6a 5c		 push	 92			; 0000005cH
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCOBBCollisionInstance@@@@KAXPAVCOBBCollisionInstance@@@Z ENDP ; CDynamicPool<COBBCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ PROC	; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCOBBCollisionInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCOBBCollisionInstance@@@@UAE@XZ ENDP	; CDynamicPool<COBBCollisionInstance>::~CDynamicPool<COBBCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_aci@@YAXXZ
text$yd	SEGMENT
??__Fgs_aci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_aci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A ; gs_aci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
??__Fgs_aci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_aci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_aci@@YAXXZ
text$di	SEGMENT
??__Egs_aci@@YAXXZ PROC					; `dynamic initializer for 'gs_aci'', COMDAT

; 21   : CDynamicPool<CAABBCollisionInstance> gs_aci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_aci@@YAXXZ ; `dynamic atexit destructor for 'gs_aci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_aci@@YAXXZ ENDP					; `dynamic initializer for 'gs_aci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CAABBCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCAABBCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CAABBCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z PROC ; CDynamicPool<CAABBCollisionInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	6a 1c		 push	 28			; 0000001cH
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCAABBCollisionInstance@@@@KAXPAVCAABBCollisionInstance@@@Z ENDP ; CDynamicPool<CAABBCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCAABBCollisionInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCAABBCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CAABBCollisionInstance>::~CDynamicPool<CAABBCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_pci@@YAXXZ
text$yd	SEGMENT
??__Fgs_pci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_pci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A ; gs_pci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
??__Fgs_pci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_pci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_pci@@YAXXZ
text$di	SEGMENT
??__Egs_pci@@YAXXZ PROC					; `dynamic initializer for 'gs_pci'', COMDAT

; 20   : CDynamicPool<CPlaneCollisionInstance> gs_pci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_pci@@YAXXZ ; `dynamic atexit destructor for 'gs_pci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_pci@@YAXXZ ENDP					; `dynamic initializer for 'gs_pci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CPlaneCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCPlaneCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CPlaneCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z PROC ; CDynamicPool<CPlaneCollisionInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	6a 7c		 push	 124			; 0000007cH
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCPlaneCollisionInstance@@@@KAXPAVCPlaneCollisionInstance@@@Z ENDP ; CDynamicPool<CPlaneCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCPlaneCollisionInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCPlaneCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CPlaneCollisionInstance>::~CDynamicPool<CPlaneCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_cci@@YAXXZ
text$yd	SEGMENT
??__Fgs_cci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_cci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A ; gs_cci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
??__Fgs_cci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_cci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_cci@@YAXXZ
text$di	SEGMENT
??__Egs_cci@@YAXXZ PROC					; `dynamic initializer for 'gs_cci'', COMDAT

; 19   : CDynamicPool<CCylinderCollisionInstance> gs_cci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_cci@@YAXXZ ; `dynamic atexit destructor for 'gs_cci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_cci@@YAXXZ ENDP					; `dynamic initializer for 'gs_cci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CCylinderCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCCylinderCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CCylinderCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z PROC ; CDynamicPool<CCylinderCollisionInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	6a 18		 push	 24			; 00000018H
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCCylinderCollisionInstance@@@@KAXPAVCCylinderCollisionInstance@@@Z ENDP ; CDynamicPool<CCylinderCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCCylinderCollisionInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCCylinderCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CCylinderCollisionInstance>::~CDynamicPool<CCylinderCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fgs_sci@@YAXXZ
text$yd	SEGMENT
??__Fgs_sci@@YAXXZ PROC					; `dynamic atexit destructor for 'gs_sci'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A ; gs_sci
  00005	e9 00 00 00 00	 jmp	 ??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
??__Fgs_sci@@YAXXZ ENDP					; `dynamic atexit destructor for 'gs_sci''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ??__Egs_sci@@YAXXZ
text$di	SEGMENT
??__Egs_sci@@YAXXZ PROC					; `dynamic initializer for 'gs_sci'', COMDAT

; 18   : CDynamicPool<CSphereCollisionInstance> gs_sci;

  00000	68 00 00 00 00	 push	 OFFSET ??__Fgs_sci@@YAXXZ ; `dynamic atexit destructor for 'gs_sci''
  00005	e8 00 00 00 00	 call	 _atexit
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
??__Egs_sci@@YAXXZ ENDP					; `dynamic initializer for 'gs_sci''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z PROC ; CDynamicPool<CSphereCollisionInstance>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCSphereCollisionInstance@@@@UAEPAXI@Z ENDP ; CDynamicPool<CSphereCollisionInstance>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ PROC ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@CAXXZ ENDP ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z PROC ; CDynamicPool<CSphereCollisionInstance>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	6a 14		 push	 20			; 00000014H
  00005	ff 75 08	 push	 DWORD PTR _pkData$[ebp]
  00008	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCSphereCollisionInstance@@@@KAXPAVCSphereCollisionInstance@@@Z ENDP ; CDynamicPool<CSphereCollisionInstance>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ PROC ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCSphereCollisionInstance@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCSphereCollisionInstance@@@@UAE@XZ ENDP ; CDynamicPool<CSphereCollisionInstance>::~CDynamicPool<CSphereCollisionInstance>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
;	COMDAT ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
tv1083 = -16						; size = 4
tv1073 = -12						; size = 4
tv1149 = -8						; size = 4
_l$1$ = -8						; size = 4
tv1133 = -4						; size = 4
tv1109 = -4						; size = 4
tv1088 = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_x$ = 16						; size = 4
?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z PROC ; square_distance_between_linesegment_and_point, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _p1$[ebp]
  00009	8b 45 0c	 mov	 eax, DWORD PTR _p2$[ebp]
  0000c	8b 55 10	 mov	 edx, DWORD PTR _x$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000f	f3 0f 10 38	 movss	 xmm7, DWORD PTR [eax]
  00013	f3 0f 5c 39	 subss	 xmm7, DWORD PTR [ecx]
  00017	f3 0f 10 68 04	 movss	 xmm5, DWORD PTR [eax+4]
  0001c	f3 0f 5c 69 04	 subss	 xmm5, DWORD PTR [ecx+4]
  00021	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00026	0f 28 e0	 movaps	 xmm4, xmm0
  00029	f3 0f 11 45 fc	 movss	 DWORD PTR tv1088[ebp], xmm0
  0002e	f3 0f 5c 61 08	 subss	 xmm4, DWORD PTR [ecx+8]
  00033	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [edx+8]

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00038	0f 28 c7	 movaps	 xmm0, xmm7
  0003b	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 306  :     z = fz;

  0003f	0f 28 f5	 movaps	 xmm6, xmm5
  00042	f3 0f 59 f5	 mulss	 xmm6, xmm5

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00046	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  0004b	f3 0f 11 7d f0	 movss	 DWORD PTR tv1083[ebp], xmm7
  00050	f3 0f 10 3a	 movss	 xmm7, DWORD PTR [edx]

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00054	f3 0f 58 f0	 addss	 xmm6, xmm0
  00058	0f 28 c4	 movaps	 xmm0, xmm4

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0005b	f3 0f 11 65 f4	 movss	 DWORD PTR tv1073[ebp], xmm4

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00060	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00064	f3 0f 10 62 04	 movss	 xmm4, DWORD PTR [edx+4]
  00069	0f 28 dc	 movaps	 xmm3, xmm4
  0006c	f3 0f 5c 59 04	 subss	 xmm3, DWORD PTR [ecx+4]

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00071	f3 0f 58 f0	 addss	 xmm6, xmm0

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00075	0f 28 cb	 movaps	 xmm1, xmm3

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00078	f3 0f 11 75 f8	 movss	 DWORD PTR _l$1$[ebp], xmm6

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007d	0f 28 f7	 movaps	 xmm6, xmm7
  00080	f3 0f 5c 31	 subss	 xmm6, DWORD PTR [ecx]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00084	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00088	0f 28 c6	 movaps	 xmm0, xmm6
  0008b	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR tv1083[ebp]
  00090	f3 0f 58 c8	 addss	 xmm1, xmm0
  00094	0f 28 c2	 movaps	 xmm0, xmm2
  00097	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR tv1073[ebp]
  0009c	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a0	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 92   : 	if (d <= 0.0f)

  000a3	0f 2f c1	 comiss	 xmm0, xmm1
  000a6	72 20		 jb	 SHORT $LN2@square_dis
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  000a8	f3 0f 59 db	 mulss	 xmm3, xmm3

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000ac	f3 0f 59 f6	 mulss	 xmm6, xmm6
  000b0	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000b4	f3 0f 58 de	 addss	 xmm3, xmm6
  000b8	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 94   : 		return D3DXVec3LengthSq(&(x - p1));

  000bc	f3 0f 11 5d f8	 movss	 DWORD PTR tv1149[ebp], xmm3
  000c1	d9 45 f8	 fld	 DWORD PTR tv1149[ebp]

; 104  : 	}
; 105  : }

  000c4	8b e5		 mov	 esp, ebp
  000c6	5d		 pop	 ebp
  000c7	c3		 ret	 0
$LN2@square_dis:

; 95   : 	}
; 96   : 	else if (d >= l)

  000c8	0f 2f 4d f8	 comiss	 xmm1, DWORD PTR _l$1$[ebp]
  000cc	72 33		 jb	 SHORT $LN4@square_dis
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000ce	f3 0f 5c 60 04	 subss	 xmm4, DWORD PTR [eax+4]
  000d3	f3 0f 5c 38	 subss	 xmm7, DWORD PTR [eax]
  000d7	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  000dc	f3 0f 5c 45 fc	 subss	 xmm0, DWORD PTR tv1088[ebp]

; 306  :     z = fz;

  000e1	f3 0f 59 e4	 mulss	 xmm4, xmm4

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000e5	f3 0f 59 ff	 mulss	 xmm7, xmm7
  000e9	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ed	f3 0f 58 e7	 addss	 xmm4, xmm7
  000f1	f3 0f 58 e0	 addss	 xmm4, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 98   : 		return D3DXVec3LengthSq(&(x - p2));

  000f5	f3 0f 11 65 fc	 movss	 DWORD PTR tv1133[ebp], xmm4
  000fa	d9 45 fc	 fld	 DWORD PTR tv1133[ebp]

; 104  : 	}
; 105  : }

  000fd	8b e5		 mov	 esp, ebp
  000ff	5d		 pop	 ebp
  00100	c3		 ret	 0
$LN4@square_dis:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00101	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR tv1073[ebp]
  00106	0f 28 c2	 movaps	 xmm0, xmm2

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00109	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR tv1083[ebp]
  0010e	0f 28 cb	 movaps	 xmm1, xmm3

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00111	f3 0f 59 5d f0	 mulss	 xmm3, DWORD PTR tv1083[ebp]
  00116	f3 0f 59 cc	 mulss	 xmm1, xmm4
  0011a	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0011e	f3 0f 59 e6	 mulss	 xmm4, xmm6
  00122	f3 0f 5c c8	 subss	 xmm1, xmm0
  00126	f3 0f 59 ee	 mulss	 xmm5, xmm6
  0012a	f3 0f 5c d4	 subss	 xmm2, xmm4
  0012e	f3 0f 5c eb	 subss	 xmm5, xmm3

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00132	f3 0f 59 c9	 mulss	 xmm1, xmm1

; 1941 :     *pOut = v;

  00136	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0013a	f3 0f 59 ed	 mulss	 xmm5, xmm5
  0013e	f3 0f 58 d1	 addss	 xmm2, xmm1
  00142	f3 0f 58 d5	 addss	 xmm2, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 103  : 		return D3DXVec3LengthSq(D3DXVec3Cross(&c, &(x - p1), &(p2 - p1))) / l;

  00146	f3 0f 5e 55 f8	 divss	 xmm2, DWORD PTR _l$1$[ebp]
  0014b	f3 0f 11 55 fc	 movss	 DWORD PTR tv1109[ebp], xmm2
  00150	d9 45 fc	 fld	 DWORD PTR tv1109[ebp]

; 104  : 	}
; 105  : }

  00153	8b e5		 mov	 esp, ebp
  00155	5d		 pop	 ebp
  00156	c3		 ret	 0
?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ENDP ; square_distance_between_linesegment_and_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_ob$ = -40						; size = 12
_oa$ = -28						; size = 12
$T1 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_c_rattribute$ = 8					; size = 4
_s$ = 12						; size = 4
?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere, COMDAT
; _this$ = ecx

; 474  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b 75 08	 mov	 esi, DWORD PTR _c_rattribute$[ebp]
  00014	57		 push	 edi
  00015	8b 7d 0c	 mov	 edi, DWORD PTR _s$[ebp]

; 475  : 	if (s.v3Position.z + s.fRadius < c_rattribute.v3Position.z)

  00018	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  0001d	f3 0f 10 57 08	 movss	 xmm2, DWORD PTR [edi+8]
  00022	f3 0f 10 5f 18	 movss	 xmm3, DWORD PTR [edi+24]
  00027	0f 28 c2	 movaps	 xmm0, xmm2
  0002a	f3 0f 58 c3	 addss	 xmm0, xmm3
  0002e	0f 2f c8	 comiss	 xmm1, xmm0
  00031	0f 87 9c 00 00
	00		 ja	 $LN13@CollideCyl

; 476  : 	{
; 477  : 		return false;
; 478  : 	}
; 479  : 
; 480  : 	if (s.v3Position.z - s.fRadius > c_rattribute.v3Position.z + c_rattribute.fHeight)

  00037	f3 0f 58 4e 10	 addss	 xmm1, DWORD PTR [esi+16]
  0003c	f3 0f 5c d3	 subss	 xmm2, xmm3
  00040	0f 2f d1	 comiss	 xmm2, xmm1
  00043	0f 87 8a 00 00
	00		 ja	 $LN13@CollideCyl
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00049	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 492  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x, c_rattribute.v3Position.y, c_rattribute.v3Position.z + c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  0004d	8d 45 d8	 lea	 eax, DWORD PTR _ob$[ebp]
  00050	50		 push	 eax
  00051	8d 45 e4	 lea	 eax, DWORD PTR _oa$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00054	f3 0f 11 45 f0	 movss	 DWORD PTR $T1[ebp], xmm0

; 305  :     y = fy;

  00059	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 492  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x, c_rattribute.v3Position.y, c_rattribute.v3Position.z + c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  0005e	50		 push	 eax
  0005f	57		 push	 edi
  00060	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00063	f3 0f 11 45 f4	 movss	 DWORD PTR $T1[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 492  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x, c_rattribute.v3Position.y, c_rattribute.v3Position.z + c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  00068	50		 push	 eax
  00069	8d 45 f0	 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0006c	f3 0f 11 4d f8	 movss	 DWORD PTR $T1[ebp+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 492  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x, c_rattribute.v3Position.y, c_rattribute.v3Position.z + c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  00071	50		 push	 eax
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00078	f3 0f 10 55 e4	 movss	 xmm2, DWORD PTR _oa$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 492  : 	IntersectLineSegments(c_rattribute.v3Position, D3DXVECTOR3(c_rattribute.v3Position.x, c_rattribute.v3Position.y, c_rattribute.v3Position.z + c_rattribute.fHeight), s.v3LastPosition, s.v3Position, oa, ob);

  0007d	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00080	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _oa$[ebp+4]
  00085	f3 0f 5c 5d dc	 subss	 xmm3, DWORD PTR _ob$[ebp+4]
  0008a	f3 0f 5c 55 d8	 subss	 xmm2, DWORD PTR _ob$[ebp]
  0008f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _oa$[ebp+8]
  00094	f3 0f 5c 45 e0	 subss	 xmm0, DWORD PTR _ob$[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 493  : 	return (D3DXVec3LengthSq(&(oa - ob)) <= (c_rattribute.fRadius + s.fRadius) * (c_rattribute.fRadius + s.fRadius));

  00099	f3 0f 10 4e 0c	 movss	 xmm1, DWORD PTR [esi+12]
  0009e	f3 0f 58 4f 18	 addss	 xmm1, DWORD PTR [edi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  000a3	f3 0f 59 db	 mulss	 xmm3, xmm3
  000a7	5f		 pop	 edi

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000a8	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 494  : }

  000ac	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000ad	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000b1	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 493  : 	return (D3DXVec3LengthSq(&(oa - ob)) <= (c_rattribute.fRadius + s.fRadius) * (c_rattribute.fRadius + s.fRadius));

  000b5	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000b9	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 493  : 	return (D3DXVec3LengthSq(&(oa - ob)) <= (c_rattribute.fRadius + s.fRadius) * (c_rattribute.fRadius + s.fRadius));

  000bd	0f 2f cb	 comiss	 xmm1, xmm3
  000c0	0f 93 c0	 setae	 al

; 494  : }

  000c3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c6	33 cd		 xor	 ecx, ebp
  000c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 08 00	 ret	 8
$LN13@CollideCyl:
  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d6	32 c0		 xor	 al, al
  000d8	5f		 pop	 edi
  000d9	33 cd		 xor	 ecx, ebp
  000db	5e		 pop	 esi
  000dc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e1	8b e5		 mov	 esp, ebp
  000e3	5d		 pop	 ebp
  000e4	c2 08 00	 ret	 8
?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv986 = -28						; size = 4
tv1004 = -24						; size = 4
tv1005 = -20						; size = 4
tv959 = -20						; size = 4
_sum$1$ = -16						; size = 4
tv991 = -16						; size = 4
_v3Position$ = -12					; size = 12
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 545  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 547  : 	v3Position.z = s.v3Position.z;

  00009	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  0000c	f3 0f 7e 41 04	 movq	 xmm0, QWORD PTR [ecx+4]
  00011	66 0f d6 44 24
	10		 movq	 QWORD PTR _v3Position$[esp+28], xmm0
  00017	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00018	f3 0f 10 10	 movss	 xmm2, DWORD PTR [eax]
  0001c	f3 0f 10 60 04	 movss	 xmm4, DWORD PTR [eax+4]
  00021	0f 28 ea	 movaps	 xmm5, xmm2
  00024	f3 0f 5c 6c 24
	14		 subss	 xmm5, DWORD PTR _v3Position$[esp+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 547  : 	v3Position.z = s.v3Position.z;

  0002a	f3 0f 10 78 08	 movss	 xmm7, DWORD PTR [eax+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0002f	0f 28 dc	 movaps	 xmm3, xmm4
  00032	f3 0f 5c 5c 24
	18		 subss	 xmm3, DWORD PTR _v3Position$[esp+36]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 548  : 	if (D3DXVec3LengthSq(&(s.v3Position - v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  00038	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0003b	0f 28 cf	 movaps	 xmm1, xmm7
  0003e	f3 0f 5c cf	 subss	 xmm1, xmm7

; 306  :     z = fz;

  00042	0f 28 c5	 movaps	 xmm0, xmm5

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00045	f3 0f 11 6c 24
	10		 movss	 DWORD PTR tv991[esp+32], xmm5

; 306  :     z = fz;

  0004b	f3 0f 59 c5	 mulss	 xmm0, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 548  : 	if (D3DXVec3LengthSq(&(s.v3Position - v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  0004f	f3 0f 10 68 18	 movss	 xmm5, DWORD PTR [eax+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00054	0f 28 f3	 movaps	 xmm6, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 548  : 	if (D3DXVec3LengthSq(&(s.v3Position - v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  00057	f3 0f 58 69 10	 addss	 xmm5, DWORD PTR [ecx+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0005c	f3 0f 59 f3	 mulss	 xmm6, xmm3
  00060	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00064	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 548  : 	if (D3DXVec3LengthSq(&(s.v3Position - v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  00068	f3 0f 59 ed	 mulss	 xmm5, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0006c	f3 0f 58 f1	 addss	 xmm6, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 548  : 	if (D3DXVec3LengthSq(&(s.v3Position - v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  00070	0f 2f f5	 comiss	 xmm6, xmm5
  00073	72 1d		 jb	 SHORT $LN2@OnGetColli
$LN49@OnGetColli:

; 590  : }

  00075	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0007b	8b c6		 mov	 eax, esi
  0007d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00084	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0008b	5e		 pop	 esi
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 08 00	 ret	 8
$LN2@OnGetColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00092	f3 0f 5c 60 10	 subss	 xmm4, DWORD PTR [eax+16]
  00097	f3 0f 5c 50 0c	 subss	 xmm2, DWORD PTR [eax+12]
  0009c	0f 57 c9	 xorps	 xmm1, xmm1

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0009f	f3 0f 5c ff	 subss	 xmm7, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 558  : 	float mul = (s.fRadius + m_attribute.fRadius) * (s.fRadius + m_attribute.fRadius) - D3DXVec3LengthSq(&(s.v3Position - v3Position));

  000a3	f3 0f 5c ee	 subss	 xmm5, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000a7	0f 28 c4	 movaps	 xmm0, xmm4

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000aa	f3 0f 11 64 24
	0c		 movss	 DWORD PTR tv959[esp+32], xmm4

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000b0	f3 0f 5c c1	 subss	 xmm0, xmm1
  000b4	0f 57 e4	 xorps	 xmm4, xmm4

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000b7	f3 0f 5c e2	 subss	 xmm4, xmm2
  000bb	f3 0f 59 d1	 mulss	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 560  : 	if (sum * sum - 4 * mul <= 0)

  000bf	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@40800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000c7	f3 0f 11 44 24
	04		 movss	 DWORD PTR tv986[esp+32], xmm0

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000cd	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv959[esp+32]
  000d3	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 306  :     z = fz;

  000d7	f3 0f 59 dc	 mulss	 xmm3, xmm4

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000db	f3 0f 5c d0	 subss	 xmm2, xmm0
  000df	f3 0f 11 64 24
	08		 movss	 DWORD PTR tv1004[esp+32], xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000e5	f3 0f 10 44 24
	04		 movss	 xmm0, DWORD PTR tv986[esp+32]
  000eb	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR tv991[esp+32]
  000f1	f3 0f 59 fa	 mulss	 xmm7, xmm2
  000f5	f3 0f 58 d8	 addss	 xmm3, xmm0

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000f9	f3 0f 11 54 24
	0c		 movss	 DWORD PTR tv1005[esp+32], xmm2

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000ff	f3 0f 58 df	 addss	 xmm3, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 557  : 	float sum = - D3DXVec3Dot(&c, &(s.v3Position - v3Position));

  00103	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 560  : 	if (sum * sum - 4 * mul <= 0)

  0010a	0f 28 c3	 movaps	 xmm0, xmm3
  0010d	f3 0f 11 5c 24
	10		 movss	 DWORD PTR _sum$1$[esp+32], xmm3
  00113	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00117	f3 0f 5c c5	 subss	 xmm0, xmm5
  0011b	0f 2f c8	 comiss	 xmm1, xmm0
  0011e	0f 83 51 ff ff
	ff		 jae	 $LN49@OnGetColli

; 561  : 	{
; 562  : 		return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
; 563  : 	}
; 564  : 	float sq = sqrt(sum * sum - 4 * mul);

  00124	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  00128	66 0f 2e c8	 ucomisd xmm1, xmm0
  0012c	77 06		 ja	 SHORT $LN45@OnGetColli
  0012e	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00132	eb 05		 jmp	 SHORT $LN46@OnGetColli
$LN45@OnGetColli:
  00134	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN46@OnGetColli:

; 565  : 	float t1 = -sum - sq, t2 = -sum + sq;

  00139	f3 0f 10 5c 24
	10		 movss	 xmm3, DWORD PTR _sum$1$[esp+32]
  0013f	0f 57 e4	 xorps	 xmm4, xmm4
  00142	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 566  : 	t1 *= 0.5f;
; 567  : 	t2 *= 0.5f;
; 568  : 
; 569  : 
; 570  : 	if (fabs(t1) <= fabs(t2))

  00149	0f 57 d2	 xorps	 xmm2, xmm2
  0014c	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
  00154	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
  00158	f3 0f 5c dc	 subss	 xmm3, xmm4
  0015c	f3 0f 5c 64 24
	10		 subss	 xmm4, DWORD PTR _sum$1$[esp+32]
  00162	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00166	f3 0f 59 e5	 mulss	 xmm4, xmm5
  0016a	f3 0f 5a d3	 cvtss2sd xmm2, xmm3
  0016e	0f 5a c4	 cvtps2pd xmm0, xmm4
  00171	0f 54 15 00 00
	00 00		 andps	 xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00178	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0017f	66 0f 2f c2	 comisd	 xmm0, xmm2
  00183	f3 0f 10 44 24
	04		 movss	 xmm0, DWORD PTR tv986[esp+32]
  00189	72 2e		 jb	 SHORT $LN4@OnGetColli

; 571  : 	{
; 572  : 		return (gc_fReduceMove * t1) * c;

  0018b	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 590  : }

  0018f	8b c6		 mov	 eax, esi
  00191	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00195	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00199	0f 28 c3	 movaps	 xmm0, xmm3

; 305  :     y = fy;

  0019c	f3 0f 59 5c 24
	0c		 mulss	 xmm3, DWORD PTR tv1005[esp+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 590  : }

  001a2	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR tv1004[esp+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  001a8	f3 0f 11 5e 08	 movss	 DWORD PTR [esi+8], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 590  : }

  001ad	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001b2	5e		 pop	 esi
  001b3	8b e5		 mov	 esp, ebp
  001b5	5d		 pop	 ebp
  001b6	c2 08 00	 ret	 8
$LN4@OnGetColli:

; 573  : 	}
; 574  : 	else
; 575  : 	{
; 576  : 		return (gc_fReduceMove * t2) * c;

  001b9	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 590  : }

  001bd	8b c6		 mov	 eax, esi
  001bf	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  001c3	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001c7	0f 28 c4	 movaps	 xmm0, xmm4

; 305  :     y = fy;

  001ca	f3 0f 59 64 24
	0c		 mulss	 xmm4, DWORD PTR tv1005[esp+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 590  : }

  001d0	f3 0f 59 44 24
	08		 mulss	 xmm0, DWORD PTR tv1004[esp+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  001d6	f3 0f 11 66 08	 movss	 DWORD PTR [esi+8], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 590  : }

  001db	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001e0	5e		 pop	 esi
  001e1	8b e5		 mov	 esp, ebp
  001e3	5d		 pop	 ebp
  001e4	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CCylinderCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 538  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 539  : 	//Tracef("OnCollisionDynamicSphere\n");
; 540  : 
; 541  : 	return (CollideCylinderVSDynamicSphere(m_attribute, s));

  00003	ff 75 08	 push	 DWORD PTR _s$[ebp]
  00006	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere

; 542  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v3Step$1$sroa$286$1$ = -40				; size = 4
_v3Step$1$sroa$285$1$ = -36				; size = 4
_v3Step$1$sroa$283$1$ = -32				; size = 4
_iStep$1$ = -28						; size = 4
_cylinder$2 = -24					; size = 20
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CCylinderCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 497  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 28	 mov	 DWORD PTR __$ArrayPad$[esp+44], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	8b d9		 mov	 ebx, ecx
  00018	57		 push	 edi
  00019	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]

; 498  : 	if (CollideCylinderVSDynamicSphere(m_attribute, s))

  0001c	57		 push	 edi
  0001d	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
  00026	84 c0		 test	 al, al
  00028	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0002b	74 47		 je	 SHORT $LN33@OnMovement
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  0002d	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  00031	f3 0f 10 27	 movss	 xmm4, DWORD PTR [edi]
  00035	f3 0f 10 57 10	 movss	 xmm2, DWORD PTR [edi+16]
  0003a	f3 0f 10 4f 0c	 movss	 xmm1, DWORD PTR [edi+12]
  0003f	f3 0f 5c 63 04	 subss	 xmm4, DWORD PTR [ebx+4]
  00044	f3 0f 5c 4b 04	 subss	 xmm1, DWORD PTR [ebx+4]
  00049	f3 0f 5c 5b 08	 subss	 xmm3, DWORD PTR [ebx+8]
  0004e	f3 0f 5c 53 08	 subss	 xmm2, DWORD PTR [ebx+8]
  00053	f3 0f 59 e4	 mulss	 xmm4, xmm4
  00057	f3 0f 59 db	 mulss	 xmm3, xmm3
  0005b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0005f	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00063	f3 0f 58 e3	 addss	 xmm4, xmm3
  00067	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 500  : 		if (GetVector3Distance(s.v3Position, m_attribute.v3Position) <

  0006b	0f 2f cc	 comiss	 xmm1, xmm4
  0006e	0f 87 78 01 00
	00		 ja	 $LN30@OnMovement
$LN33@OnMovement:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00074	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00078	f3 0f 5c 47 10	 subss	 xmm0, DWORD PTR [edi+16]
  0007d	f3 0f 10 17	 movss	 xmm2, DWORD PTR [edi]
  00081	f3 0f 5c 57 0c	 subss	 xmm2, DWORD PTR [edi+12]
  00086	f3 0f 10 5f 08	 movss	 xmm3, DWORD PTR [edi+8]
  0008b	f3 0f 5c 5f 14	 subss	 xmm3, DWORD PTR [edi+20]

; 306  :     z = fz;

  00090	0f 28 c8	 movaps	 xmm1, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00093	f3 0f 11 44 24
	14		 movss	 DWORD PTR _v3Step$1$sroa$285$1$[esp+56], xmm0

; 306  :     z = fz;

  00099	f3 0f 59 c8	 mulss	 xmm1, xmm0

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0009d	0f 28 c2	 movaps	 xmm0, xmm2

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000a0	f3 0f 11 54 24
	10		 movss	 DWORD PTR _v3Step$1$sroa$286$1$[esp+56], xmm2

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000a6	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000aa	f3 0f 11 5c 24
	18		 movss	 DWORD PTR _v3Step$1$sroa$283$1$[esp+56], xmm3

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  000b0	f3 0f 58 c8	 addss	 xmm1, xmm0
  000b4	0f 28 c3	 movaps	 xmm0, xmm3
  000b7	f3 0f 59 c3	 mulss	 xmm0, xmm3
  000bb	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000bf	0f 5a c1	 cvtps2pd xmm0, xmm1
  000c2	0f 57 c9	 xorps	 xmm1, xmm1
  000c5	66 0f 2e c8	 ucomisd xmm1, xmm0
  000c9	77 06		 ja	 SHORT $LN38@OnMovement
  000cb	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000cf	eb 05		 jmp	 SHORT $LN39@OnMovement
$LN38@OnMovement:
  000d1	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN39@OnMovement:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 510  : 	if (s.fRadius <= 0.0001f)

  000d6	f3 0f 10 4f 18	 movss	 xmm1, DWORD PTR [edi+24]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000db	0f 57 d2	 xorps	 xmm2, xmm2
  000de	f2 0f 5a d0	 cvtsd2ss xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 510  : 	if (s.fRadius <= 0.0001f)

  000e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@38d1b717
  000ea	0f 2f c1	 comiss	 xmm0, xmm1
  000ed	0f 83 e3 00 00
	00		 jae	 $LN3@OnMovement

; 511  : 	{
; 512  : 		return false;
; 513  : 	}
; 514  : 	if (fDistance >= s.fRadius * 2.0f)

  000f3	0f 28 c1	 movaps	 xmm0, xmm1
  000f6	f3 0f 58 c1	 addss	 xmm0, xmm1
  000fa	0f 2f d0	 comiss	 xmm2, xmm0
  000fd	0f 82 d3 00 00
	00		 jb	 $LN3@OnMovement

; 520  : 		int iStep = fDistance / s.fRadius * 2.0f;

  00103	f3 0f 5e d1	 divss	 xmm2, xmm1
  00107	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]

; 523  : 		for (int i = 0; i < iStep; ++i)

  0010a	33 f6		 xor	 esi, esi
  0010c	89 44 24 30	 mov	 DWORD PTR _cylinder$2[esp+72], eax
  00110	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00113	0f 10 43 04	 movups	 xmm0, XMMWORD PTR [ebx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 399  :     FLOAT fInv = 1.0f / f;

  00117	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 520  : 		int iStep = fDistance / s.fRadius * 2.0f;

  0011f	f3 0f 58 d2	 addss	 xmm2, xmm2
  00123	0f 11 44 24 20	 movups	 XMMWORD PTR _cylinder$2[esp+56], xmm0
  00128	89 44 24 28	 mov	 DWORD PTR _cylinder$2[esp+64], eax
  0012c	f3 0f 7e 47 0c	 movq	 xmm0, QWORD PTR [edi+12]
  00131	66 0f d6 44 24
	20		 movq	 QWORD PTR _cylinder$2[esp+56], xmm0
  00137	f3 0f 2c c2	 cvttss2si eax, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0013b	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR _v3Step$1$sroa$285$1$[esp+56]

; 305  :     y = fy;

  00141	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _v3Step$1$sroa$283$1$[esp+56]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 520  : 		int iStep = fDistance / s.fRadius * 2.0f;

  00147	89 44 24 1c	 mov	 DWORD PTR _iStep$1$[esp+56], eax
  0014b	66 0f 6e c0	 movd	 xmm0, eax

; 521  : 		D3DXVECTOR3 v3Step = v3Distance / float(iStep);

  0014f	0f 5b c0	 cvtdq2ps xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 399  :     FLOAT fInv = 1.0f / f;

  00152	f3 0f 5e c8	 divss	 xmm1, xmm0
  00156	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _v3Step$1$sroa$286$1$[esp+56]
  0015c	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 304  :     x = fx;

  00160	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 305  :     y = fy;

  00164	f3 0f 59 d9	 mulss	 xmm3, xmm1

; 399  :     FLOAT fInv = 1.0f / f;

  00168	f3 0f 11 44 24
	10		 movss	 DWORD PTR _v3Step$1$sroa$286$1$[esp+56], xmm0

; 304  :     x = fx;

  0016e	f3 0f 11 54 24
	14		 movss	 DWORD PTR _v3Step$1$sroa$285$1$[esp+56], xmm2

; 305  :     y = fy;

  00174	f3 0f 11 5c 24
	18		 movss	 DWORD PTR _v3Step$1$sroa$283$1$[esp+56], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 523  : 		for (int i = 0; i < iStep; ++i)

  0017a	85 c0		 test	 eax, eax
  0017c	7e 58		 jle	 SHORT $LN3@OnMovement
  0017e	66 90		 npad	 2
$LL4@OnMovement:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  00180	f3 0f 58 44 24
	20		 addss	 xmm0, DWORD PTR _cylinder$2[esp+56]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 526  : 			if (CollideCylinderVSDynamicSphere(cylinder, s))

  00186	57		 push	 edi
  00187	8d 44 24 24	 lea	 eax, DWORD PTR _cylinder$2[esp+60]
  0018b	8b cb		 mov	 ecx, ebx
  0018d	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  0018e	f3 0f 11 44 24
	28		 movss	 DWORD PTR _cylinder$2[esp+64], xmm0

; 329  :     y += v.y;

  00194	f3 0f 10 44 24
	2c		 movss	 xmm0, DWORD PTR _cylinder$2[esp+68]
  0019a	f3 0f 58 c2	 addss	 xmm0, xmm2
  0019e	f3 0f 11 44 24
	2c		 movss	 DWORD PTR _cylinder$2[esp+68], xmm0

; 330  :     z += v.z;

  001a4	f3 0f 10 44 24
	30		 movss	 xmm0, DWORD PTR _cylinder$2[esp+72]
  001aa	f3 0f 58 c3	 addss	 xmm0, xmm3
  001ae	f3 0f 11 44 24
	30		 movss	 DWORD PTR _cylinder$2[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 526  : 			if (CollideCylinderVSDynamicSphere(cylinder, s))

  001b4	e8 00 00 00 00	 call	 ?CollideCylinderVSDynamicSphere@CCylinderCollisionInstance@@IBE_NABUSCylinderData@@ABUCDynamicSphereInstance@@@Z ; CCylinderCollisionInstance::CollideCylinderVSDynamicSphere
  001b9	84 c0		 test	 al, al
  001bb	75 2f		 jne	 SHORT $LN30@OnMovement

; 523  : 		for (int i = 0; i < iStep; ++i)

  001bd	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR _v3Step$1$sroa$286$1$[esp+56]
  001c3	46		 inc	 esi
  001c4	f3 0f 10 54 24
	14		 movss	 xmm2, DWORD PTR _v3Step$1$sroa$285$1$[esp+56]
  001ca	f3 0f 10 5c 24
	18		 movss	 xmm3, DWORD PTR _v3Step$1$sroa$283$1$[esp+56]
  001d0	3b 74 24 1c	 cmp	 esi, DWORD PTR _iStep$1$[esp+56]
  001d4	7c aa		 jl	 SHORT $LL4@OnMovement
$LN3@OnMovement:

; 527  : 			{
; 528  : 				return true;
; 529  : 			}
; 530  : 
; 531  : 		}
; 532  : 	}
; 533  : 
; 534  : 	return false;

  001d6	32 c0		 xor	 al, al

; 535  : }

  001d8	5f		 pop	 edi
  001d9	5e		 pop	 esi
  001da	5b		 pop	 ebx
  001db	8b 4c 24 28	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+44]
  001df	33 cc		 xor	 ecx, esp
  001e1	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001e6	8b e5		 mov	 esp, ebp
  001e8	5d		 pop	 ebp
  001e9	c2 04 00	 ret	 4
$LN30@OnMovement:
  001ec	8b 4c 24 34	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+56]
  001f0	b0 01		 mov	 al, 1
  001f2	5f		 pop	 edi
  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
  001f5	33 cc		 xor	 ecx, esp
  001f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CCylinderCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CCylinderCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CCylinderCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CCylinderCollisionInstance@@MAEXXZ PROC	; CCylinderCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 600  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 601  : 	gs_cci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 602  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@AAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 602  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CCylinderCollisionInstance@@MAEXXZ ENDP	; CCylinderCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CCylinderCollisionInstance::Render, COMDAT
; _this$ = ecx

; 593  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 594  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 71		 jg	 SHORT $LN7@Render
$LN2@Render:

; 595  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 596  : 	s.RenderCylinder(NULL, m_attribute.v3Position.x, m_attribute.v3Position.y, m_attribute.v3Position.z + m_attribute.fHeight / 2, m_attribute.fRadius, m_attribute.fHeight, d3dFillMode);

  00050	ff 75 08	 push	 DWORD PTR _d3dFillMode$[ebp]
  00053	f3 0f 10 4e 14	 movss	 xmm1, DWORD PTR [esi+20]
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005d	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  00062	83 ec 14	 sub	 esp, 20			; 00000014H
  00065	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  0006b	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  00073	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00079	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0007e	f3 0f 58 4e 0c	 addss	 xmm1, DWORD PTR [esi+12]
  00083	f3 0f 11 4c 24
	08		 movss	 DWORD PTR [esp+8], xmm1
  00089	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0008f	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	6a 00		 push	 0
  0009b	e8 00 00 00 00	 call	 ?RenderCylinder@CScreen@@QAEXPBUD3DXMATRIX@@MMMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderCylinder

; 597  : }

  000a0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000aa	59		 pop	 ecx
  000ab	5e		 pop	 esi
  000ac	8b e5		 mov	 esp, ebp
  000ae	5d		 pop	 ebp
  000af	c2 04 00	 ret	 4
$LN7@Render:

; 594  : 	static CScreen s;

  000b2	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000b7	e8 00 00 00 00	 call	 __Init_thread_header
  000bc	83 c4 04	 add	 esp, 4
  000bf	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  000c6	0f 85 75 ff ff
	ff		 jne	 $LN2@Render
  000cc	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  000d1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d8	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000dd	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CCylinderCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000e2	e8 00 00 00 00	 call	 _atexit
  000e7	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000ec	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f3	e8 00 00 00 00	 call	 __Init_thread_footer
  000f8	83 c4 08	 add	 esp, 8
  000fb	e9 41 ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CCylinderCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CCylinderCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ
_TEXT	SEGMENT
?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ PROC ; CCylinderCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 470  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 471  : }

  00003	c3		 ret	 0
?GetAttribute@CCylinderCollisionInstance@@QBEABUSCylinderData@@XZ ENDP ; CCylinderCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ
_TEXT	SEGMENT
?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ PROC ; CCylinderCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 465  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 466  : }

  00003	c3		 ret	 0
?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ ENDP ; CCylinderCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; COBBCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 850  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  :     y = fy;

  0000c	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 306  :     z = fz;

  00013	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 854  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@COBBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; COBBCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v3Point$ = -40						; size = 12
_v3Center$$sroa$614$1$ = -28				; size = 4
_v3Sphere$2$ = -24					; size = 4
_v3Center$$sroa$612$1$ = -20				; size = 4
_v3Sphere$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; COBBCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 814  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00018	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b f1		 mov	 esi, ecx
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00023	f3 0f 10 4e 10	 movss	 xmm1, DWORD PTR [esi+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00028	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0002b	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00030	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00035	f3 0f 10 5e 0c	 movss	 xmm3, DWORD PTR [esi+12]
  0003a	f3 0f 58 56 14	 addss	 xmm2, DWORD PTR [esi+20]
  0003f	f3 0f 58 5e 18	 addss	 xmm3, DWORD PTR [esi+24]

; 306  :     z = fz;

  00044	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00048	53		 push	 ebx
  00049	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0004a	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0004e	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0004f	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00053	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00057	f3 0f 5c c1	 subss	 xmm0, xmm1

; 306  :     z = fz;

  0005b	f3 0f 11 4d e8	 movss	 DWORD PTR _v3Sphere$2$[ebp], xmm1

; 304  :     x = fx;

  00060	f3 0f 11 55 e4	 movss	 DWORD PTR _v3Center$$sroa$614$1$[ebp], xmm2

; 305  :     y = fy;

  00065	f3 0f 11 5d ec	 movss	 DWORD PTR _v3Center$$sroa$612$1$[ebp], xmm3

; 304  :     x = fx;

  0006a	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006f	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00074	f3 0f 5c c2	 subss	 xmm0, xmm2

; 305  :     y = fy;

  00078	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007d	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00082	f3 0f 5c c3	 subss	 xmm0, xmm3

; 306  :     z = fz;

  00086	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0008b	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00090	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v3Sphere$[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00095	f3 0f 10 6d e8	 movss	 xmm5, DWORD PTR _v3Sphere$2$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0009a	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v3Center$$sroa$612$1$[ebp]
  0009f	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _v3Sphere$[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 818  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  000a4	0f 28 f5	 movaps	 xmm6, xmm5
  000a7	f3 0f 58 75 f0	 addss	 xmm6, DWORD PTR _v3Sphere$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000ac	f3 0f 10 7d e4	 movss	 xmm7, DWORD PTR _v3Center$$sroa$614$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 822  : 	if (v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000b1	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000b6	f3 0f 58 e7	 addss	 xmm4, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 819  : 	v3Sphere = v3Sphere + v3Center;

  000ba	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0

; 822  : 	if (v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000bf	0f 2f d6	 comiss	 xmm2, xmm6
  000c2	0f 28 c6	 movaps	 xmm0, xmm6
  000c5	0f 28 ce	 movaps	 xmm1, xmm6
  000c8	0f 14 c4	 unpcklps xmm0, xmm4
  000cb	66 0f d6 45 f0	 movq	 QWORD PTR _v3Sphere$[ebp], xmm0
  000d0	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  000d5	76 05		 jbe	 SHORT $LN47@OnCollisio
  000d7	0f 28 ca	 movaps	 xmm1, xmm2
  000da	eb 05		 jmp	 SHORT $LN2@OnCollisio
$LN47@OnCollisio:
  000dc	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Point$[ebp]
$LN2@OnCollisio:

; 823  : 	if (v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  000e1	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  000e6	0f 2f c8	 comiss	 xmm1, xmm0
  000e9	76 03		 jbe	 SHORT $LN3@OnCollisio
  000eb	0f 28 d0	 movaps	 xmm2, xmm0
$LN3@OnCollisio:

; 824  : 	if (v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  000ee	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000f3	0f 28 dc	 movaps	 xmm3, xmm4
  000f6	0f 2f c4	 comiss	 xmm0, xmm4
  000f9	0f 28 cc	 movaps	 xmm1, xmm4
  000fc	76 06		 jbe	 SHORT $LN4@OnCollisio
  000fe	0f 28 d8	 movaps	 xmm3, xmm0
  00101	0f 28 c8	 movaps	 xmm1, xmm0
$LN4@OnCollisio:

; 825  : 	if (v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  00104	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00109	0f 2f d8	 comiss	 xmm3, xmm0
  0010c	76 06		 jbe	 SHORT $LN5@OnCollisio
  0010e	0f 28 d8	 movaps	 xmm3, xmm0
  00111	0f 28 c8	 movaps	 xmm1, xmm0
$LN5@OnCollisio:

; 829  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00114	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00119	f3 0f 5c cc	 subss	 xmm1, xmm4
  0011d	f3 0f 5c d6	 subss	 xmm2, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 829  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00121	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00125	f3 0f 5c dc	 subss	 xmm3, xmm4
  00129	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0012d	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00131	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 829  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00135	0f 2f c1	 comiss	 xmm0, xmm1
  00138	0f 83 d9 00 00
	00		 jae	 $LN45@OnCollisio
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0013e	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 832  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00143	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00146	f3 0f 5c c5	 subss	 xmm0, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 832  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0014a	53		 push	 ebx
  0014b	50		 push	 eax
  0014c	50		 push	 eax
  0014d	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00152	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00157	f3 0f 5c c7	 subss	 xmm0, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 831  : 	v3Sphere = s.v3LastPosition - v3Center;

  0015b	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00160	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00165	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _v3Center$$sroa$612$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 831  : 	v3Sphere = s.v3LastPosition - v3Center;

  0016a	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0

; 832  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0016f	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00174	f3 0f 10 6d e8	 movss	 xmm5, DWORD PTR _v3Sphere$2$[ebp]
  00179	f3 0f 58 6d f0	 addss	 xmm5, DWORD PTR _v3Sphere$[ebp]
  0017e	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _v3Sphere$[ebp+4]
  00183	f3 0f 58 65 e4	 addss	 xmm4, DWORD PTR _v3Center$$sroa$614$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 836  : 	if (v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  00188	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  0018d	0f 2f d5	 comiss	 xmm2, xmm5
  00190	0f 28 c5	 movaps	 xmm0, xmm5
  00193	0f 28 cd	 movaps	 xmm1, xmm5
  00196	0f 14 c4	 unpcklps xmm0, xmm4
  00199	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  0019e	76 05		 jbe	 SHORT $LN48@OnCollisio
  001a0	0f 28 ca	 movaps	 xmm1, xmm2
  001a3	eb 05		 jmp	 SHORT $LN9@OnCollisio
$LN48@OnCollisio:
  001a5	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Point$[ebp]
$LN9@OnCollisio:

; 837  : 	if (v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  001aa	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  001af	0f 2f c8	 comiss	 xmm1, xmm0
  001b2	76 03		 jbe	 SHORT $LN10@OnCollisio
  001b4	0f 28 d0	 movaps	 xmm2, xmm0
$LN10@OnCollisio:

; 838  : 	if (v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  001b7	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001bc	0f 28 dc	 movaps	 xmm3, xmm4
  001bf	0f 2f c4	 comiss	 xmm0, xmm4
  001c2	0f 28 cc	 movaps	 xmm1, xmm4
  001c5	76 06		 jbe	 SHORT $LN11@OnCollisio
  001c7	0f 28 d8	 movaps	 xmm3, xmm0
  001ca	0f 28 c8	 movaps	 xmm1, xmm0
$LN11@OnCollisio:

; 839  : 	if (v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  001cd	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  001d2	0f 2f d8	 comiss	 xmm3, xmm0
  001d5	76 06		 jbe	 SHORT $LN12@OnCollisio
  001d7	0f 28 d8	 movaps	 xmm3, xmm0
  001da	0f 28 c8	 movaps	 xmm1, xmm0
$LN12@OnCollisio:

; 843  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001dd	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  001e2	f3 0f 5c cc	 subss	 xmm1, xmm4
  001e6	f3 0f 5c d5	 subss	 xmm2, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 843  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001ea	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001ee	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  001ef	f3 0f 5c dc	 subss	 xmm3, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 847  : }

  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  001f5	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001f9	f3 0f 59 cb	 mulss	 xmm1, xmm3
  001fd	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 843  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00201	0f 2f c1	 comiss	 xmm0, xmm1
  00204	0f 93 c0	 setae	 al

; 847  : }

  00207	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020a	33 cd		 xor	 ecx, ebp
  0020c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c2 04 00	 ret	 4
$LN45@OnCollisio:
  00217	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021a	b0 01		 mov	 al, 1
  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	33 cd		 xor	 ecx, ebp
  00220	5b		 pop	 ebx
  00221	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; COBBCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v3Point$ = -40						; size = 12
_v3Center$$sroa$614$1$ = -28				; size = 4
_v3Sphere$2$ = -24					; size = 4
_v3Center$$sroa$612$1$ = -20				; size = 4
_v3Sphere$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; COBBCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 780  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00010	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00018	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b f1		 mov	 esi, ecx
  0001f	57		 push	 edi
  00020	8b 7d 08	 mov	 edi, DWORD PTR _s$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00023	f3 0f 10 4e 10	 movss	 xmm1, DWORD PTR [esi+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00028	8d 5e 1c	 lea	 ebx, DWORD PTR [esi+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0002b	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00030	f3 0f 10 56 08	 movss	 xmm2, DWORD PTR [esi+8]
  00035	f3 0f 10 5e 0c	 movss	 xmm3, DWORD PTR [esi+12]
  0003a	f3 0f 58 56 14	 addss	 xmm2, DWORD PTR [esi+20]
  0003f	f3 0f 58 5e 18	 addss	 xmm3, DWORD PTR [esi+24]

; 306  :     z = fz;

  00044	f3 0f 59 c8	 mulss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00048	53		 push	 ebx
  00049	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0004a	f3 0f 59 d0	 mulss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0004e	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0004f	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00053	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00057	f3 0f 5c c1	 subss	 xmm0, xmm1

; 306  :     z = fz;

  0005b	f3 0f 11 4d e8	 movss	 DWORD PTR _v3Sphere$2$[ebp], xmm1

; 304  :     x = fx;

  00060	f3 0f 11 55 e4	 movss	 DWORD PTR _v3Center$$sroa$614$1$[ebp], xmm2

; 305  :     y = fy;

  00065	f3 0f 11 5d ec	 movss	 DWORD PTR _v3Center$$sroa$612$1$[ebp], xmm3

; 304  :     x = fx;

  0006a	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0006f	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00074	f3 0f 5c c2	 subss	 xmm0, xmm2

; 305  :     y = fy;

  00078	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0007d	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00082	f3 0f 5c c3	 subss	 xmm0, xmm3

; 306  :     z = fz;

  00086	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0008b	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00090	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v3Sphere$[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00095	f3 0f 10 6d e8	 movss	 xmm5, DWORD PTR _v3Sphere$2$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0009a	f3 0f 58 45 ec	 addss	 xmm0, DWORD PTR _v3Center$$sroa$612$1$[ebp]
  0009f	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _v3Sphere$[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 783  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  000a4	0f 28 f5	 movaps	 xmm6, xmm5
  000a7	f3 0f 58 75 f0	 addss	 xmm6, DWORD PTR _v3Sphere$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000ac	f3 0f 10 7d e4	 movss	 xmm7, DWORD PTR _v3Center$$sroa$614$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 787  : 	if (v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000b1	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000b6	f3 0f 58 e7	 addss	 xmm4, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 784  : 	v3Sphere = v3Sphere + v3Center;

  000ba	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0

; 787  : 	if (v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  000bf	0f 2f d6	 comiss	 xmm2, xmm6
  000c2	0f 28 c6	 movaps	 xmm0, xmm6
  000c5	0f 28 ce	 movaps	 xmm1, xmm6
  000c8	0f 14 c4	 unpcklps xmm0, xmm4
  000cb	66 0f d6 45 f0	 movq	 QWORD PTR _v3Sphere$[ebp], xmm0
  000d0	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  000d5	76 05		 jbe	 SHORT $LN47@OnMovement
  000d7	0f 28 ca	 movaps	 xmm1, xmm2
  000da	eb 05		 jmp	 SHORT $LN2@OnMovement
$LN47@OnMovement:
  000dc	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Point$[ebp]
$LN2@OnMovement:

; 788  : 	if (v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  000e1	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  000e6	0f 2f c8	 comiss	 xmm1, xmm0
  000e9	76 03		 jbe	 SHORT $LN3@OnMovement
  000eb	0f 28 d0	 movaps	 xmm2, xmm0
$LN3@OnMovement:

; 789  : 	if (v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  000ee	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000f3	0f 28 dc	 movaps	 xmm3, xmm4
  000f6	0f 2f c4	 comiss	 xmm0, xmm4
  000f9	0f 28 cc	 movaps	 xmm1, xmm4
  000fc	76 06		 jbe	 SHORT $LN4@OnMovement
  000fe	0f 28 d8	 movaps	 xmm3, xmm0
  00101	0f 28 c8	 movaps	 xmm1, xmm0
$LN4@OnMovement:

; 790  : 	if (v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  00104	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  00109	0f 2f d8	 comiss	 xmm3, xmm0
  0010c	76 06		 jbe	 SHORT $LN5@OnMovement
  0010e	0f 28 d8	 movaps	 xmm3, xmm0
  00111	0f 28 c8	 movaps	 xmm1, xmm0
$LN5@OnMovement:

; 794  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00114	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00119	f3 0f 5c cc	 subss	 xmm1, xmm4
  0011d	f3 0f 5c d6	 subss	 xmm2, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 794  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00121	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00125	f3 0f 5c dc	 subss	 xmm3, xmm4
  00129	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0012d	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00131	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 794  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00135	0f 2f c1	 comiss	 xmm0, xmm1
  00138	0f 83 d9 00 00
	00		 jae	 $LN45@OnMovement
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0013e	f3 0f 10 47 0c	 movss	 xmm0, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 797  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  00143	8d 45 f0	 lea	 eax, DWORD PTR _v3Sphere$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00146	f3 0f 5c c5	 subss	 xmm0, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 797  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0014a	53		 push	 ebx
  0014b	50		 push	 eax
  0014c	50		 push	 eax
  0014d	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Sphere$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00152	f3 0f 10 47 10	 movss	 xmm0, DWORD PTR [edi+16]
  00157	f3 0f 5c c7	 subss	 xmm0, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 796  : 	v3Sphere = s.v3LastPosition - v3Center;

  0015b	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Sphere$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00160	f3 0f 10 47 14	 movss	 xmm0, DWORD PTR [edi+20]
  00165	f3 0f 5c 45 ec	 subss	 xmm0, DWORD PTR _v3Center$$sroa$612$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 796  : 	v3Sphere = s.v3LastPosition - v3Center;

  0016a	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Sphere$[ebp+8], xmm0

; 797  : 	D3DXVec3TransformCoord(&v3Sphere, &v3Sphere, &m_attribute.matRot);

  0016f	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00174	f3 0f 10 6d e8	 movss	 xmm5, DWORD PTR _v3Sphere$2$[ebp]
  00179	f3 0f 58 6d f0	 addss	 xmm5, DWORD PTR _v3Sphere$[ebp]
  0017e	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _v3Sphere$[ebp+4]
  00183	f3 0f 58 65 e4	 addss	 xmm4, DWORD PTR _v3Center$$sroa$614$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 801  : 	if (v3Point.x < m_attribute.v3Min.x) { v3Point.x = m_attribute.v3Min.x; }

  00188	f3 0f 10 56 04	 movss	 xmm2, DWORD PTR [esi+4]
  0018d	0f 2f d5	 comiss	 xmm2, xmm5
  00190	0f 28 c5	 movaps	 xmm0, xmm5
  00193	0f 28 cd	 movaps	 xmm1, xmm5
  00196	0f 14 c4	 unpcklps xmm0, xmm4
  00199	66 0f d6 45 d8	 movq	 QWORD PTR _v3Point$[ebp], xmm0
  0019e	76 05		 jbe	 SHORT $LN48@OnMovement
  001a0	0f 28 ca	 movaps	 xmm1, xmm2
  001a3	eb 05		 jmp	 SHORT $LN9@OnMovement
$LN48@OnMovement:
  001a5	f3 0f 10 55 d8	 movss	 xmm2, DWORD PTR _v3Point$[ebp]
$LN9@OnMovement:

; 802  : 	if (v3Point.x > m_attribute.v3Max.x) { v3Point.x = m_attribute.v3Max.x; }

  001aa	f3 0f 10 46 10	 movss	 xmm0, DWORD PTR [esi+16]
  001af	0f 2f c8	 comiss	 xmm1, xmm0
  001b2	76 03		 jbe	 SHORT $LN10@OnMovement
  001b4	0f 28 d0	 movaps	 xmm2, xmm0
$LN10@OnMovement:

; 803  : 	if (v3Point.y < m_attribute.v3Min.y) { v3Point.y = m_attribute.v3Min.y; }

  001b7	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001bc	0f 28 dc	 movaps	 xmm3, xmm4
  001bf	0f 2f c4	 comiss	 xmm0, xmm4
  001c2	0f 28 cc	 movaps	 xmm1, xmm4
  001c5	76 06		 jbe	 SHORT $LN11@OnMovement
  001c7	0f 28 d8	 movaps	 xmm3, xmm0
  001ca	0f 28 c8	 movaps	 xmm1, xmm0
$LN11@OnMovement:

; 804  : 	if (v3Point.y > m_attribute.v3Max.y) { v3Point.y = m_attribute.v3Max.y; }

  001cd	f3 0f 10 46 14	 movss	 xmm0, DWORD PTR [esi+20]
  001d2	0f 2f d8	 comiss	 xmm3, xmm0
  001d5	76 06		 jbe	 SHORT $LN12@OnMovement
  001d7	0f 28 d8	 movaps	 xmm3, xmm0
  001da	0f 28 c8	 movaps	 xmm1, xmm0
$LN12@OnMovement:

; 808  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001dd	f3 0f 10 47 18	 movss	 xmm0, DWORD PTR [edi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  001e2	f3 0f 5c cc	 subss	 xmm1, xmm4
  001e6	f3 0f 5c d5	 subss	 xmm2, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 808  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  001ea	f3 0f 59 c0	 mulss	 xmm0, xmm0
  001ee	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  001ef	f3 0f 5c dc	 subss	 xmm3, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 811  : }

  001f3	5e		 pop	 esi
  001f4	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  001f5	f3 0f 59 d2	 mulss	 xmm2, xmm2
  001f9	f3 0f 59 cb	 mulss	 xmm1, xmm3
  001fd	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 808  : 	if (GetVector3Distance(v3Point, v3Sphere) <= s.fRadius * s.fRadius) { return true; }

  00201	0f 2f c1	 comiss	 xmm0, xmm1
  00204	0f 93 c0	 setae	 al

; 811  : }

  00207	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0020a	33 cd		 xor	 ecx, ebp
  0020c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00211	8b e5		 mov	 esp, ebp
  00213	5d		 pop	 ebp
  00214	c2 04 00	 ret	 4
$LN45@OnMovement:
  00217	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021a	b0 01		 mov	 al, 1
  0021c	5f		 pop	 edi
  0021d	5e		 pop	 esi
  0021e	33 cd		 xor	 ecx, ebp
  00220	5b		 pop	 ebx
  00221	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00226	8b e5		 mov	 esp, ebp
  00228	5d		 pop	 ebp
  00229	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@COBBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; COBBCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@COBBCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@COBBCollisionInstance@@MAEXXZ PROC		; COBBCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 865  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 866  : 	gs_oci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 867  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@AAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 867  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@COBBCollisionInstance@@MAEXXZ ENDP		; COBBCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; COBBCollisionInstance::Render, COMDAT
; _this$ = ecx

; 857  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 858  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 70		 jg	 SHORT $LN7@Render
$LN2@Render:

; 859  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 860  : 	s.RenderCube(m_attribute.v3Min.x, m_attribute.v3Min.y, m_attribute.v3Min.z, m_attribute.v3Max.x, m_attribute.v3Max.y, m_attribute.v3Max.z, m_attribute.matRot);

  00050	0f 10 46 1c	 movups	 xmm0, XMMWORD PTR [esi+28]
  00054	83 ec 40	 sub	 esp, 64			; 00000040H
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005c	8b c4		 mov	 eax, esp
  0005e	83 ec 18	 sub	 esp, 24			; 00000018H
  00061	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00064	0f 10 46 2c	 movups	 xmm0, XMMWORD PTR [esi+44]
  00068	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  0006c	0f 10 46 3c	 movups	 xmm0, XMMWORD PTR [esi+60]
  00070	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  00074	0f 10 46 4c	 movups	 xmm0, XMMWORD PTR [esi+76]
  00078	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0
  0007c	0f 10 46 0c	 movups	 xmm0, XMMWORD PTR [esi+12]
  00080	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00085	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0008a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00090	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009a	e8 00 00 00 00	 call	 ?RenderCube@CScreen@@QAEXMMMMMMUD3DXMATRIX@@@Z ; CScreen::RenderCube

; 861  : 	return;
; 862  : }

  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	5e		 pop	 esi
  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN7@Render:

; 858  : 	static CScreen s;

  000b1	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000b6	e8 00 00 00 00	 call	 __Init_thread_header
  000bb	83 c4 04	 add	 esp, 4
  000be	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  000c5	0f 85 76 ff ff
	ff		 jne	 $LN2@Render
  000cb	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  000d0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d7	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000dc	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `COBBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000e1	e8 00 00 00 00	 call	 _atexit
  000e6	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000eb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f2	e8 00 00 00 00	 call	 __Init_thread_footer
  000f7	83 c4 08	 add	 esp, 8
  000fa	e9 42 ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@COBBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; COBBCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ
_TEXT	SEGMENT
?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ PROC ; COBBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 775  : 
; 776  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 777  : }

  00003	c3		 ret	 0
?GetAttribute@COBBCollisionInstance@@QBEABUSOBBData@@XZ ENDP ; COBBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ
_TEXT	SEGMENT
?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ PROC ; COBBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 770  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 771  : }

  00003	c3		 ret	 0
?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ ENDP ; COBBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv820 = 12						; size = 4
tv786 = 12						; size = 4
tv752 = 12						; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CAABBCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 698  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 699  : 
; 700  : 	//Tracef("OnGetCollisionMovementAdjust	v3Min.x = %f, v3Max.x = %f\n", m_attribute.v3Min.x, m_attribute.v3Max.x);
; 701  : 	/*
; 702  : 	float fARadius = D3DXVec3Length(&(m_attribute.v3Min - m_attribute.v3Max));
; 703  : 	if (D3DXVec3LengthSq(&(s.v3Position-(m_attribute.v3Max + m_attribute.v3Min)))>=(s.fRadius+fARadius)*(fARadius+s.fRadius))
; 704  : 		return D3DXVECTOR3(0.0f,0.0f,0.0f);
; 705  : 	D3DXVECTOR3 c;
; 706  : 	D3DXVec3Cross(&c, &(s.v3Position-s.v3LastPosition), &D3DXVECTOR3(0.0f,0.0f,1.0f) );
; 707  : 
; 708  : 	float sum = - D3DXVec3Dot(&c,&(s.v3Position-(m_attribute.v3Max + m_attribute.v3Min)));
; 709  : 	float mul = (s.fRadius+fARadius)*(s.fRadius+fARadius)-D3DXVec3LengthSq(&(s.v3Position-(m_attribute.v3Max + m_attribute.v3Min)));
; 710  : 
; 711  : 	if (sum*sum-4*mul<=0)
; 712  : 		return D3DXVECTOR3(0.0f,0.0f,0.0f);
; 713  : 	float sq = sqrt(sum*sum-4*mul);
; 714  : 	float t1=-sum-sq, t2=-sum+sq;
; 715  : 	t1*=0.5f;
; 716  : 	t2*=0.5f;
; 717  : 
; 718  : 	if (fabs(t1)<=fabs(t2))
; 719  : 	{
; 720  : 		return (gc_fReduceMove*t1)*c;
; 721  : 	}
; 722  : 	else
; 723  : 		return (gc_fReduceMove*t2)*c;
; 724  : 	*/
; 725  : 
; 726  : 	D3DXVECTOR3 v3Temp;
; 727  : 	if (s.v3Position.x + s.fRadius <= m_attribute.v3Min.x)		{ v3Temp.x = m_attribute.v3Min.x; }

  00003	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  00006	f3 0f 10 61 04	 movss	 xmm4, DWORD PTR [ecx+4]
  0000b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0000f	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00014	0f 28 d9	 movaps	 xmm3, xmm1
  00017	f3 0f 58 d8	 addss	 xmm3, xmm0
  0001b	0f 2f e3	 comiss	 xmm4, xmm3
  0001e	73 09		 jae	 SHORT $LN6@OnGetColli

; 728  : 	else if (s.v3Position.x - s.fRadius >= m_attribute.v3Max.x)	{ v3Temp.x = m_attribute.v3Max.x; }

  00020	f3 0f 10 51 10	 movss	 xmm2, DWORD PTR [ecx+16]
  00025	f3 0f 5c c8	 subss	 xmm1, xmm0
$LN6@OnGetColli:

; 729  : 	else if (s.v3Position.x + s.fRadius >= m_attribute.v3Min.x && s.v3Position.x + s.fRadius <= m_attribute.v3Max.x) { v3Temp.x = s.v3Position.x + s.fRadius; }
; 730  : 	else																											{ v3Temp.x = s.v3Position.x - s.fRadius; }
; 731  : 
; 732  : 	if (s.v3Position.y + s.fRadius <= m_attribute.v3Min.y)		{ v3Temp.y = m_attribute.v3Min.y; }

  00029	f3 0f 10 48 04	 movss	 xmm1, DWORD PTR [eax+4]
  0002e	f3 0f 10 61 08	 movss	 xmm4, DWORD PTR [ecx+8]
  00033	0f 28 d1	 movaps	 xmm2, xmm1
  00036	f3 0f 58 d0	 addss	 xmm2, xmm0
  0003a	0f 2f e2	 comiss	 xmm4, xmm2
  0003d	73 09		 jae	 SHORT $LN32@OnGetColli

; 733  : 	else if (s.v3Position.y - s.fRadius >= m_attribute.v3Max.y)	{ v3Temp.y = m_attribute.v3Max.y; }

  0003f	f3 0f 10 59 14	 movss	 xmm3, DWORD PTR [ecx+20]
  00044	f3 0f 5c c8	 subss	 xmm1, xmm0
$LN32@OnGetColli:

; 734  : 	else if (s.v3Position.y + s.fRadius >= m_attribute.v3Min.y && s.v3Position.y + s.fRadius <= m_attribute.v3Max.y) { v3Temp.y = s.v3Position.y + s.fRadius; }
; 735  : 	else																											{ v3Temp.y = s.v3Position.y - s.fRadius; }
; 736  : 
; 737  : 	if (s.v3Position.z + s.fRadius <= m_attribute.v3Min.z)		{ v3Temp.z = m_attribute.v3Min.z; }

  00048	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0004d	f3 0f 10 61 0c	 movss	 xmm4, DWORD PTR [ecx+12]
  00052	0f 28 d1	 movaps	 xmm2, xmm1
  00055	f3 0f 58 d0	 addss	 xmm2, xmm0
  00059	0f 2f e2	 comiss	 xmm4, xmm2
  0005c	73 09		 jae	 SHORT $LN18@OnGetColli

; 738  : 	else if (s.v3Position.z - s.fRadius >= m_attribute.v3Max.z)	{ v3Temp.z = m_attribute.v3Max.z; }

  0005e	f3 0f 10 59 18	 movss	 xmm3, DWORD PTR [ecx+24]
  00063	f3 0f 5c c8	 subss	 xmm1, xmm0
$LN18@OnGetColli:

; 739  : 	else if (s.v3Position.z + s.fRadius >= m_attribute.v3Min.z && s.v3Position.z + s.fRadius <= m_attribute.v3Max.z) { v3Temp.z = s.v3Position.z + s.fRadius; }
; 740  : 	else																											{ v3Temp.z = s.v3Position.z - s.fRadius; }
; 741  : 
; 742  : 
; 743  : 	if (D3DXVec3LengthSq(&(v3Temp - s.v3Position)) < s.fRadius * s.fRadius)

  00067	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0006a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00070	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00077	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 744  : 	{
; 745  : 		return D3DXVECTOR3(.0f, .0f, .0f);
; 746  : 	}
; 747  : 
; 748  : 	return D3DXVECTOR3(.0f, .0f, .0f);
; 749  : 
; 750  : }

  0007e	5d		 pop	 ebp
  0007f	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CAABBCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CAABBCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
tv818 = 8						; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CAABBCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 657  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 658  : 	D3DXVECTOR3 v;
; 659  : 	memcpy(&v, &s.v3Position, sizeof(D3DXVECTOR3));

  00006	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]

; 660  : 
; 661  : 	if (v.x < m_attribute.v3Min.x) { v.x = m_attribute.v3Min.x; }

  00009	f3 0f 10 71 04	 movss	 xmm6, DWORD PTR [ecx+4]
  0000e	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00012	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00015	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0
  0001a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0001f	0f 2f f0	 comiss	 xmm6, xmm0
  00022	89 45 fc	 mov	 DWORD PTR _v$[ebp+8], eax
  00025	76 03		 jbe	 SHORT $LN2@OnCollisio
  00027	0f 28 c6	 movaps	 xmm0, xmm6
$LN2@OnCollisio:

; 662  : 	if (v.x > m_attribute.v3Max.x) { v.x = m_attribute.v3Max.x; }

  0002a	f3 0f 10 59 10	 movss	 xmm3, DWORD PTR [ecx+16]
  0002f	0f 2f c3	 comiss	 xmm0, xmm3
  00032	76 03		 jbe	 SHORT $LN3@OnCollisio
  00034	0f 28 c3	 movaps	 xmm0, xmm3
$LN3@OnCollisio:

; 663  : 	if (v.y < m_attribute.v3Min.y) { v.x = m_attribute.v3Min.y; }

  00037	f3 0f 10 61 08	 movss	 xmm4, DWORD PTR [ecx+8]
  0003c	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _v$[ebp+4]
  00041	0f 2f e2	 comiss	 xmm4, xmm2
  00044	76 03		 jbe	 SHORT $LN4@OnCollisio
  00046	0f 28 c4	 movaps	 xmm0, xmm4
$LN4@OnCollisio:

; 664  : 	if (v.y > m_attribute.v3Max.y) { v.x = m_attribute.v3Max.y; }

  00049	f3 0f 10 69 14	 movss	 xmm5, DWORD PTR [ecx+20]
  0004e	0f 2f d5	 comiss	 xmm2, xmm5
  00051	76 03		 jbe	 SHORT $LN5@OnCollisio
  00053	0f 28 c5	 movaps	 xmm0, xmm5
$LN5@OnCollisio:

; 665  : 	if (v.z < m_attribute.v3Min.z) { v.z = m_attribute.v3Min.z; }

  00056	f3 0f 10 79 0c	 movss	 xmm7, DWORD PTR [ecx+12]
  0005b	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _v$[ebp+8]
  00060	0f 2f f9	 comiss	 xmm7, xmm1
  00063	76 03		 jbe	 SHORT $LN6@OnCollisio
  00065	0f 28 cf	 movaps	 xmm1, xmm7
$LN6@OnCollisio:

; 666  : 	if (v.z > m_attribute.v3Max.z) { v.z = m_attribute.v3Max.z; }

  00068	f3 0f 10 79 18	 movss	 xmm7, DWORD PTR [ecx+24]
  0006d	0f 2f cf	 comiss	 xmm1, xmm7
  00070	76 03		 jbe	 SHORT $LN7@OnCollisio
  00072	0f 28 cf	 movaps	 xmm1, xmm7
$LN7@OnCollisio:

; 667  : 
; 668  : 	if (v.x > m_attribute.v3Min.x && v.x < m_attribute.v3Max.x &&
; 669  : 			v.y > m_attribute.v3Min.y && v.y < m_attribute.v3Max.y &&
; 670  : 			v.z > m_attribute.v3Min.z && v.z < m_attribute.v3Max.z) { return true; }

  00075	0f 2f c6	 comiss	 xmm0, xmm6
  00078	76 1e		 jbe	 SHORT $LN8@OnCollisio
  0007a	0f 2f d8	 comiss	 xmm3, xmm0
  0007d	76 19		 jbe	 SHORT $LN8@OnCollisio
  0007f	0f 2f d4	 comiss	 xmm2, xmm4
  00082	76 14		 jbe	 SHORT $LN8@OnCollisio
  00084	0f 2f ea	 comiss	 xmm5, xmm2
  00087	76 0f		 jbe	 SHORT $LN8@OnCollisio
  00089	0f 2f 49 0c	 comiss	 xmm1, DWORD PTR [ecx+12]
  0008d	76 09		 jbe	 SHORT $LN8@OnCollisio
  0008f	0f 2f f9	 comiss	 xmm7, xmm1
  00092	0f 87 cd 00 00
	00		 ja	 $LN23@OnCollisio
$LN8@OnCollisio:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00098	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  0009c	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 672  : 	if (GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius) { return true; }

  000a1	f3 0f 10 4a 18	 movss	 xmm1, DWORD PTR [edx+24]
  000a6	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  000aa	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000ae	f3 0f 59 d2	 mulss	 xmm2, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 672  : 	if (GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius) { return true; }

  000b2	f3 0f 11 4d 08	 movss	 DWORD PTR tv818[ebp], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  000b7	f3 0f 58 c2	 addss	 xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 672  : 	if (GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius) { return true; }

  000bb	0f 2f c8	 comiss	 xmm1, xmm0
  000be	0f 83 a1 00 00
	00		 jae	 $LN23@OnCollisio

; 673  : 
; 674  : 
; 675  : 	memcpy(&v, &s.v3LastPosition, sizeof(D3DXVECTOR3));

  000c4	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  000c9	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000cc	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0

; 676  : 
; 677  : 	if (v.x < m_attribute.v3Min.x) { v.x = m_attribute.v3Min.x; }

  000d1	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  000d6	0f 2f f0	 comiss	 xmm6, xmm0
  000d9	89 45 fc	 mov	 DWORD PTR _v$[ebp+8], eax
  000dc	76 03		 jbe	 SHORT $LN10@OnCollisio
  000de	0f 28 c6	 movaps	 xmm0, xmm6
$LN10@OnCollisio:

; 678  : 	if (v.x > m_attribute.v3Max.x) { v.x = m_attribute.v3Max.x; }

  000e1	0f 2f c3	 comiss	 xmm0, xmm3
  000e4	76 03		 jbe	 SHORT $LN11@OnCollisio
  000e6	0f 28 c3	 movaps	 xmm0, xmm3
$LN11@OnCollisio:

; 679  : 	if (v.y < m_attribute.v3Min.y) { v.x = m_attribute.v3Min.y; }

  000e9	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v$[ebp+4]
  000ee	0f 2f e1	 comiss	 xmm4, xmm1
  000f1	76 03		 jbe	 SHORT $LN12@OnCollisio
  000f3	0f 28 c4	 movaps	 xmm0, xmm4
$LN12@OnCollisio:

; 680  : 	if (v.y > m_attribute.v3Max.y) { v.x = m_attribute.v3Max.y; }

  000f6	0f 2f cd	 comiss	 xmm1, xmm5
  000f9	76 03		 jbe	 SHORT $LN13@OnCollisio
  000fb	0f 28 c5	 movaps	 xmm0, xmm5
$LN13@OnCollisio:

; 681  : 	if (v.z < m_attribute.v3Min.z) { v.z = m_attribute.v3Min.z; }

  000fe	f3 0f 10 79 0c	 movss	 xmm7, DWORD PTR [ecx+12]
  00103	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _v$[ebp+8]
  00108	0f 2f fa	 comiss	 xmm7, xmm2
  0010b	f3 0f 10 79 18	 movss	 xmm7, DWORD PTR [ecx+24]
  00110	76 05		 jbe	 SHORT $LN14@OnCollisio
  00112	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [ecx+12]
$LN14@OnCollisio:

; 682  : 	if (v.z > m_attribute.v3Max.z) { v.z = m_attribute.v3Max.z; }

  00117	0f 2f d7	 comiss	 xmm2, xmm7
  0011a	76 03		 jbe	 SHORT $LN15@OnCollisio
  0011c	0f 28 d7	 movaps	 xmm2, xmm7
$LN15@OnCollisio:

; 683  : 
; 684  : 
; 685  : 
; 686  : 	if (v.x > m_attribute.v3Min.x && v.x < m_attribute.v3Max.x &&
; 687  : 			v.y > m_attribute.v3Min.y && v.y < m_attribute.v3Max.y &&
; 688  : 			v.z > m_attribute.v3Min.z && v.z < m_attribute.v3Max.z) { return true; }

  0011f	0f 2f c6	 comiss	 xmm0, xmm6
  00122	76 1a		 jbe	 SHORT $LN16@OnCollisio
  00124	0f 2f d8	 comiss	 xmm3, xmm0
  00127	76 15		 jbe	 SHORT $LN16@OnCollisio
  00129	0f 2f cc	 comiss	 xmm1, xmm4
  0012c	76 10		 jbe	 SHORT $LN16@OnCollisio
  0012e	0f 2f e9	 comiss	 xmm5, xmm1
  00131	76 0b		 jbe	 SHORT $LN16@OnCollisio
  00133	0f 2f 51 0c	 comiss	 xmm2, DWORD PTR [ecx+12]
  00137	76 05		 jbe	 SHORT $LN16@OnCollisio
  00139	0f 2f fa	 comiss	 xmm7, xmm2
  0013c	77 27		 ja	 SHORT $LN23@OnCollisio
$LN16@OnCollisio:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  0013e	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  00143	f3 0f 5c 42 0c	 subss	 xmm0, DWORD PTR [edx+12]
  00148	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0014c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00150	f3 0f 58 c1	 addss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 690  : 	if (GetVector3Distance(v, s.v3LastPosition) <= s.fRadius * s.fRadius) { return true; }

  00154	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR tv818[ebp]
  00159	0f 2f c8	 comiss	 xmm1, xmm0
  0015c	0f 93 c0	 setae	 al

; 691  : 
; 692  : 
; 693  : 
; 694  : 	return false;
; 695  : }

  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 04 00	 ret	 4
$LN23@OnCollisio:

; 690  : 	if (GetVector3Distance(v, s.v3LastPosition) <= s.fRadius * s.fRadius) { return true; }

  00165	b0 01		 mov	 al, 1

; 691  : 
; 692  : 
; 693  : 
; 694  : 	return false;
; 695  : }

  00167	8b e5		 mov	 esp, ebp
  00169	5d		 pop	 ebp
  0016a	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CAABBCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CAABBCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 619  : 	D3DXVECTOR3 v;
; 620  : 	D3DXVECTOR3 v3center = (m_attribute.v3Min + m_attribute.v3Max) * 0.5f;
; 621  : 
; 622  : 	memcpy(&v, &s.v3Position, sizeof(D3DXVECTOR3));

  00006	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]

; 623  : 
; 624  : 	if (v.x < m_attribute.v3Min.x) { v.x = m_attribute.v3Min.x; }

  00009	f3 0f 10 69 04	 movss	 xmm5, DWORD PTR [ecx+4]
  0000e	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00012	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0
  00017	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  0001c	0f 2f e8	 comiss	 xmm5, xmm0
  0001f	76 03		 jbe	 SHORT $LN2@OnMovement
  00021	0f 28 c5	 movaps	 xmm0, xmm5
$LN2@OnMovement:

; 625  : 	if (v.x > m_attribute.v3Max.x) { v.x = m_attribute.v3Max.x; }

  00024	f3 0f 10 49 10	 movss	 xmm1, DWORD PTR [ecx+16]
  00029	0f 2f c1	 comiss	 xmm0, xmm1
  0002c	76 03		 jbe	 SHORT $LN3@OnMovement
  0002e	0f 28 c1	 movaps	 xmm0, xmm1
$LN3@OnMovement:

; 626  : 	if (v.y < m_attribute.v3Min.y) { v.x = m_attribute.v3Min.y; }

  00031	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [ecx+8]
  00036	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _v$[ebp+4]
  0003b	0f 2f dc	 comiss	 xmm3, xmm4
  0003e	76 03		 jbe	 SHORT $LN4@OnMovement
  00040	0f 28 c3	 movaps	 xmm0, xmm3
$LN4@OnMovement:

; 627  : 	if (v.y > m_attribute.v3Max.y) { v.x = m_attribute.v3Max.y; }

  00043	f3 0f 10 51 14	 movss	 xmm2, DWORD PTR [ecx+20]
  00048	0f 2f e2	 comiss	 xmm4, xmm2
  0004b	76 03		 jbe	 SHORT $LN5@OnMovement
  0004d	0f 28 c2	 movaps	 xmm0, xmm2
$LN5@OnMovement:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00050	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]
  00054	f3 0f 5c 62 04	 subss	 xmm4, DWORD PTR [edx+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 631  : 	if (GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius)

  00059	f3 0f 10 72 18	 movss	 xmm6, DWORD PTR [edx+24]
  0005e	f3 0f 59 f6	 mulss	 xmm6, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00062	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00066	f3 0f 59 e4	 mulss	 xmm4, xmm4
  0006a	f3 0f 58 c4	 addss	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 631  : 	if (GetVector3Distance(v, s.v3Position) <= s.fRadius * s.fRadius)

  0006e	0f 2f f0	 comiss	 xmm6, xmm0
  00071	73 56		 jae	 SHORT $LN29@OnMovement

; 632  : 	{
; 633  : 
; 634  : 		return true;
; 635  : 	}
; 636  : 
; 637  : 
; 638  : 	memcpy(&v, &s.v3LastPosition, sizeof(D3DXVECTOR3));

  00073	f3 0f 7e 42 0c	 movq	 xmm0, QWORD PTR [edx+12]
  00078	66 0f d6 45 f4	 movq	 QWORD PTR _v$[ebp], xmm0

; 639  : 
; 640  : 	if (v.x < m_attribute.v3Min.x) { v.x = m_attribute.v3Min.x; }

  0007d	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v$[ebp]
  00082	0f 2f e8	 comiss	 xmm5, xmm0
  00085	76 03		 jbe	 SHORT $LN9@OnMovement
  00087	0f 28 c5	 movaps	 xmm0, xmm5
$LN9@OnMovement:

; 641  : 	if (v.x > m_attribute.v3Max.x) { v.x = m_attribute.v3Max.x; }

  0008a	0f 2f c1	 comiss	 xmm0, xmm1
  0008d	76 03		 jbe	 SHORT $LN10@OnMovement
  0008f	0f 28 c1	 movaps	 xmm0, xmm1
$LN10@OnMovement:

; 642  : 	if (v.y < m_attribute.v3Min.y) { v.x = m_attribute.v3Min.y; }

  00092	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v$[ebp+4]
  00097	0f 2f d9	 comiss	 xmm3, xmm1
  0009a	76 03		 jbe	 SHORT $LN11@OnMovement
  0009c	0f 28 c3	 movaps	 xmm0, xmm3
$LN11@OnMovement:

; 643  : 	if (v.y > m_attribute.v3Max.y) { v.x = m_attribute.v3Max.y; }

  0009f	0f 2f ca	 comiss	 xmm1, xmm2
  000a2	76 03		 jbe	 SHORT $LN12@OnMovement
  000a4	0f 28 c2	 movaps	 xmm0, xmm2
$LN12@OnMovement:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  000a7	f3 0f 5c 4a 10	 subss	 xmm1, DWORD PTR [edx+16]
  000ac	f3 0f 5c 42 0c	 subss	 xmm0, DWORD PTR [edx+12]
  000b1	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000b5	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000b9	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 647  : 	if (GetVector3Distance(v, s.v3LastPosition) <= s.fRadius * s.fRadius)

  000bd	0f 2f f1	 comiss	 xmm6, xmm1
  000c0	0f 93 c0	 setae	 al

; 651  : 	}
; 652  : 
; 653  : 	return false;
; 654  : }

  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c2 04 00	 ret	 4
$LN29@OnMovement:

; 648  : 	{
; 649  : 
; 650  : 		return true;

  000c9	b0 01		 mov	 al, 1

; 651  : 	}
; 652  : 
; 653  : 	return false;
; 654  : }

  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CAABBCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CAABBCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CAABBCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CAABBCollisionInstance@@MAEXXZ PROC		; CAABBCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 761  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 762  : 	gs_aci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 763  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@AAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 763  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CAABBCollisionInstance@@MAEXXZ ENDP		; CAABBCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CAABBCollisionInstance::Render, COMDAT
; _this$ = ecx

; 753  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 754  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 4c		 jg	 SHORT $LN7@Render
$LN2@Render:

; 755  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 756  : 	s.RenderCube(m_attribute.v3Min.x, m_attribute.v3Min.y, m_attribute.v3Min.z, m_attribute.v3Max.x, m_attribute.v3Max.y, m_attribute.v3Max.z);

  00050	0f 10 46 0c	 movups	 xmm0, XMMWORD PTR [esi+12]
  00054	83 ec 18	 sub	 esp, 24			; 00000018H
  00057	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005c	0f 11 44 24 08	 movups	 XMMWORD PTR [esp+8], xmm0
  00061	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00066	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0006c	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00071	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00076	e8 00 00 00 00	 call	 ?RenderCube@CScreen@@QAEXMMMMMM@Z ; CScreen::RenderCube

; 757  : 	return;
; 758  : }

  0007b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00085	59		 pop	 ecx
  00086	5e		 pop	 esi
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 04 00	 ret	 4
$LN7@Render:

; 754  : 	static CScreen s;

  0008d	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00092	e8 00 00 00 00	 call	 __Init_thread_header
  00097	83 c4 04	 add	 esp, 4
  0009a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  000a1	75 9e		 jne	 SHORT $LN2@Render
  000a3	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  000a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000af	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000b4	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CAABBCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000b9	e8 00 00 00 00	 call	 _atexit
  000be	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000ca	e8 00 00 00 00	 call	 __Init_thread_footer
  000cf	83 c4 08	 add	 esp, 8
  000d2	e9 6a ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CAABBCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CAABBCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ
_TEXT	SEGMENT
?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ PROC ; CAABBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 613  : 
; 614  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 615  : }

  00003	c3		 ret	 0
?GetAttribute@CAABBCollisionInstance@@QBEABUSAABBData@@XZ ENDP ; CAABBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ
_TEXT	SEGMENT
?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ PROC ; CAABBCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 608  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 609  : }

  00003	c3		 ret	 0
?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ ENDP ; CAABBCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv880 = -20						; size = 8
tv912 = -12						; size = 4
tv909 = -8						; size = 4
tv915 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CPlaneCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 383  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b 55 0c	 mov	 edx, DWORD PTR _s$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00009	f3 0f 10 59 14	 movss	 xmm3, DWORD PTR [ecx+20]
  0000e	f3 0f 10 61 18	 movss	 xmm4, DWORD PTR [ecx+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 383  : {

  00013	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00016	f3 0f 10 72 08	 movss	 xmm6, DWORD PTR [edx+8]
  0001b	f3 0f 10 2a	 movss	 xmm5, DWORD PTR [edx]
  0001f	0f 28 d6	 movaps	 xmm2, xmm6
  00022	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  00027	0f 28 c5	 movaps	 xmm0, xmm5
  0002a	f3 0f 5c 42 0c	 subss	 xmm0, DWORD PTR [edx+12]
  0002f	f3 0f 5c 52 14	 subss	 xmm2, DWORD PTR [edx+20]
  00034	0f 28 f9	 movaps	 xmm7, xmm1
  00037	f3 0f 5c 7a 10	 subss	 xmm7, DWORD PTR [edx+16]
  0003c	f3 0f 11 45 f8	 movss	 DWORD PTR tv909[ebp], xmm0
  00041	f3 0f 11 55 fc	 movss	 DWORD PTR tv915[ebp], xmm2

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00046	f3 0f 10 51 10	 movss	 xmm2, DWORD PTR [ecx+16]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004b	f3 0f 11 7d f4	 movss	 DWORD PTR tv912[ebp], xmm7

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00050	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00054	f3 0f 59 fb	 mulss	 xmm7, xmm3
  00058	f3 0f 58 f8	 addss	 xmm7, xmm0
  0005c	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR tv915[ebp]
  00061	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00065	f3 0f 58 f8	 addss	 xmm7, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 387  : 	if (d >= -0.0001 && d <= 0.0001)

  00069	0f 5a c7	 cvtps2pd xmm0, xmm7
  0006c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@bf1a36e2eb1c432d
  00074	f2 0f 11 45 ec	 movsd	 QWORD PTR tv880[ebp], xmm0
  00079	72 29		 jb	 SHORT $LN2@OnGetColli
  0007b	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00083	66 0f 2f 45 ec	 comisd	 xmm0, QWORD PTR tv880[ebp]
  00088	72 1a		 jb	 SHORT $LN2@OnGetColli
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0008a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  :     y = fy;

  00090	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 306  :     z = fz;

  00097	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 448  : }

  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
$LN2@OnGetColli:

; 395  : 	if (D3DXVec3Dot(&m_attribute.v3Normal, &advance) >= 0)

  000a4	0f 2f 3d 00 00
	00 00		 comiss	 xmm7, DWORD PTR __real@00000000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000ab	f3 0f 5c 49 08	 subss	 xmm1, DWORD PTR [ecx+8]
  000b0	f3 0f 5c 69 04	 subss	 xmm5, DWORD PTR [ecx+4]
  000b5	f3 0f 5c 71 0c	 subss	 xmm6, DWORD PTR [ecx+12]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000ba	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  000bf	f3 0f 59 cb	 mulss	 xmm1, xmm3
  000c3	f3 0f 59 ea	 mulss	 xmm5, xmm2
  000c7	f3 0f 59 f4	 mulss	 xmm6, xmm4
  000cb	f3 0f 58 cd	 addss	 xmm1, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 395  : 	if (D3DXVec3Dot(&m_attribute.v3Normal, &advance) >= 0)

  000cf	f3 0f 59 d0	 mulss	 xmm2, xmm0
  000d3	f3 0f 59 d8	 mulss	 xmm3, xmm0
  000d7	f3 0f 59 e0	 mulss	 xmm4, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000db	f3 0f 58 ce	 addss	 xmm1, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 391  : 	float t = - D3DXVec3Dot(&m_attribute.v3Normal, &(s.v3Position - m_attribute.v3Position)) / d;

  000df	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  000e6	f3 0f 5e cf	 divss	 xmm1, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000ea	0f 28 e9	 movaps	 xmm5, xmm1
  000ed	0f 28 f1	 movaps	 xmm6, xmm1
  000f0	f3 0f 59 6d f8	 mulss	 xmm5, DWORD PTR tv909[ebp]
  000f5	f3 0f 59 75 f4	 mulss	 xmm6, DWORD PTR tv912[ebp]
  000fa	f3 0f 59 4d fc	 mulss	 xmm1, DWORD PTR tv915[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 395  : 	if (D3DXVec3Dot(&m_attribute.v3Normal, &advance) >= 0)

  000ff	72 20		 jb	 SHORT $LN3@OnGetColli
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00101	f3 0f 5c ea	 subss	 xmm5, xmm2
  00105	f3 0f 5c f3	 subss	 xmm6, xmm3
  00109	f3 0f 5c cc	 subss	 xmm1, xmm4

; 304  :     x = fx;

  0010d	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5

; 305  :     y = fy;

  00111	f3 0f 11 70 04	 movss	 DWORD PTR [eax+4], xmm6

; 306  :     z = fz;

  00116	f3 0f 11 48 08	 movss	 DWORD PTR [eax+8], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 448  : }

  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c2 08 00	 ret	 8
$LN3@OnGetColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00121	f3 0f 58 d5	 addss	 xmm2, xmm5
  00125	f3 0f 58 de	 addss	 xmm3, xmm6
  00129	f3 0f 58 e1	 addss	 xmm4, xmm1

; 304  :     x = fx;

  0012d	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2

; 305  :     y = fy;

  00131	f3 0f 11 58 04	 movss	 DWORD PTR [eax+4], xmm3

; 306  :     z = fz;

  00136	f3 0f 11 60 08	 movss	 DWORD PTR [eax+8], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 448  : }

  0013b	8b e5		 mov	 esp, ebp
  0013d	5d		 pop	 ebp
  0013e	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CPlaneCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CPlaneCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
_fPosition2$1$ = -4					; size = 4
tv976 = 8						; size = 4
_fPosition1$1$ = 8					; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CPlaneCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00004	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00007	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  0000c	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00011	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  00016	f3 0f 11 45 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0001b	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0001f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00024	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _fPosition1$1$[ebp]
  00029	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  0002e	f3 0f 58 f8	 addss	 xmm7, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00032	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00037	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0003c	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00041	f3 0f 58 f8	 addss	 xmm7, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00045	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0004a	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0004f	f3 0f 11 7d 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm7

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00054	f3 0f 10 78 10	 movss	 xmm7, DWORD PTR [eax+16]
  00059	f3 0f 5c 79 08	 subss	 xmm7, DWORD PTR [ecx+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0005e	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 365  : 			|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00063	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fPosition1$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00068	f3 0f 59 79 14	 mulss	 xmm7, DWORD PTR [ecx+20]
  0006d	f3 0f 58 f8	 addss	 xmm7, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00071	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00076	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0007b	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00080	f3 0f 58 f8	 addss	 xmm7, xmm0
  00084	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 365  : 			|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00087	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0008a	f3 0f 11 7d fc	 movss	 DWORD PTR _fPosition2$1$[ebp], xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 365  : 			|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  0008f	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  00094	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _fPosition2$1$[ebp]
  00099	76 05		 jbe	 SHORT $LN4@OnCollisio
  0009b	0f 2f c2	 comiss	 xmm0, xmm2
  0009e	77 28		 ja	 SHORT $LN3@OnCollisio
$LN4@OnCollisio:
  000a0	0f 2f c1	 comiss	 xmm0, xmm1
  000a3	76 05		 jbe	 SHORT $LN5@OnCollisio
  000a5	0f 2f d0	 comiss	 xmm2, xmm0
  000a8	77 1e		 ja	 SHORT $LN3@OnCollisio
$LN5@OnCollisio:
  000aa	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000af	0f 2f c1	 comiss	 xmm0, xmm1
  000b2	0f 82 e1 00 00
	00		 jb	 $LN9@OnCollisio
  000b8	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000bf	0f 2f c8	 comiss	 xmm1, xmm0
  000c2	0f 82 d1 00 00
	00		 jb	 $LN9@OnCollisio
$LN3@OnCollisio:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000c8	f3 0f 10 60 08	 movss	 xmm4, DWORD PTR [eax+8]
  000cd	0f 28 d7	 movaps	 xmm2, xmm7
  000d0	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  000d4	0f 28 c4	 movaps	 xmm0, xmm4
  000d7	f3 0f 5c 41 24	 subss	 xmm0, DWORD PTR [ecx+36]
  000dc	f3 0f 5c 51 20	 subss	 xmm2, DWORD PTR [ecx+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 370  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  000e1	f3 0f 10 68 18	 movss	 xmm5, DWORD PTR [eax+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000e6	0f 28 f3	 movaps	 xmm6, xmm3
  000e9	f3 0f 5c 71 1c	 subss	 xmm6, DWORD PTR [ecx+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 370  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  000ee	0f 57 2d 00 00
	00 00		 xorps	 xmm5, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000f5	f3 0f 5c 59 40	 subss	 xmm3, DWORD PTR [ecx+64]
  000fa	f3 0f 5c 79 44	 subss	 xmm7, DWORD PTR [ecx+68]
  000ff	f3 0f 5c 61 48	 subss	 xmm4, DWORD PTR [ecx+72]
  00104	f3 0f 11 45 08	 movss	 DWORD PTR tv976[ebp], xmm0

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00109	0f 28 ca	 movaps	 xmm1, xmm2
  0010c	f3 0f 59 49 50	 mulss	 xmm1, DWORD PTR [ecx+80]
  00111	0f 28 c6	 movaps	 xmm0, xmm6
  00114	f3 0f 59 41 4c	 mulss	 xmm0, DWORD PTR [ecx+76]
  00119	f3 0f 58 c8	 addss	 xmm1, xmm0
  0011d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv976[ebp]
  00122	f3 0f 59 41 54	 mulss	 xmm0, DWORD PTR [ecx+84]
  00127	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 370  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  0012b	0f 2f cd	 comiss	 xmm1, xmm5
  0012e	76 69		 jbe	 SHORT $LN9@OnCollisio
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00130	f3 0f 59 51 5c	 mulss	 xmm2, DWORD PTR [ecx+92]
  00135	f3 0f 59 71 58	 mulss	 xmm6, DWORD PTR [ecx+88]
  0013a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv976[ebp]
  0013f	f3 0f 59 41 60	 mulss	 xmm0, DWORD PTR [ecx+96]
  00144	f3 0f 58 d6	 addss	 xmm2, xmm6
  00148	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 371  : 			if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[1]) > -s.fRadius/*0.0f*/)

  0014c	0f 2f d5	 comiss	 xmm2, xmm5
  0014f	76 48		 jbe	 SHORT $LN9@OnCollisio
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00151	0f 28 c3	 movaps	 xmm0, xmm3
  00154	0f 28 cf	 movaps	 xmm1, xmm7
  00157	f3 0f 59 41 64	 mulss	 xmm0, DWORD PTR [ecx+100]
  0015c	f3 0f 59 49 68	 mulss	 xmm1, DWORD PTR [ecx+104]
  00161	f3 0f 58 c8	 addss	 xmm1, xmm0
  00165	0f 28 c4	 movaps	 xmm0, xmm4
  00168	f3 0f 59 41 6c	 mulss	 xmm0, DWORD PTR [ecx+108]
  0016d	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 372  : 				if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[2]) > - s.fRadius/*0.0f*/)

  00171	0f 2f cd	 comiss	 xmm1, xmm5
  00174	76 23		 jbe	 SHORT $LN9@OnCollisio
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00176	f3 0f 59 79 74	 mulss	 xmm7, DWORD PTR [ecx+116]
  0017b	f3 0f 59 59 70	 mulss	 xmm3, DWORD PTR [ecx+112]
  00180	f3 0f 59 61 78	 mulss	 xmm4, DWORD PTR [ecx+120]
  00185	f3 0f 58 fb	 addss	 xmm7, xmm3
  00189	f3 0f 58 fc	 addss	 xmm7, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 373  : 					if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[3]) > - s.fRadius/*0.0f*/)

  0018d	0f 2f fd	 comiss	 xmm7, xmm5
  00190	0f 97 c0	 seta	 al

; 380  : }

  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 04 00	 ret	 4
$LN9@OnCollisio:

; 374  : 					{
; 375  : 						return true;
; 376  : 					}
; 377  : 	}
; 378  : 
; 379  : 	return false;

  00199	32 c0		 xor	 al, al

; 380  : }

  0019b	8b e5		 mov	 esp, ebp
  0019d	5d		 pop	 ebp
  0019e	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CPlaneCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1173 = -8						; size = 4
_fPosition2$1$ = -4					; size = 4
_fPosition1$1$ = 8					; size = 4
tv1174 = 8						; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CPlaneCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 325  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 08	 mov	 eax, DWORD PTR _s$[ebp]
  00009	0f 57 c9	 xorps	 xmm1, xmm1
  0000c	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  00011	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [ecx+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00016	f3 0f 59 41 14	 mulss	 xmm0, DWORD PTR [ecx+20]
  0001b	f3 0f 11 45 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00020	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00024	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00029	f3 0f 10 7d 08	 movss	 xmm7, DWORD PTR _fPosition1$1$[ebp]
  0002e	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
  00033	f3 0f 58 f8	 addss	 xmm7, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00037	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0003c	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00041	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00046	f3 0f 58 f8	 addss	 xmm7, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004a	f3 0f 10 40 0c	 movss	 xmm0, DWORD PTR [eax+12]
  0004f	f3 0f 5c 41 04	 subss	 xmm0, DWORD PTR [ecx+4]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00054	f3 0f 11 7d 08	 movss	 DWORD PTR _fPosition1$1$[ebp], xmm7

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00059	f3 0f 10 78 10	 movss	 xmm7, DWORD PTR [eax+16]
  0005e	f3 0f 5c 79 08	 subss	 xmm7, DWORD PTR [ecx+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00063	f3 0f 59 41 10	 mulss	 xmm0, DWORD PTR [ecx+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 333  : 			|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00068	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _fPosition1$1$[ebp]
  0006d	0f 2f e9	 comiss	 xmm5, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00070	f3 0f 59 79 14	 mulss	 xmm7, DWORD PTR [ecx+20]
  00075	f3 0f 58 f8	 addss	 xmm7, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00079	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  0007e	f3 0f 5c 41 0c	 subss	 xmm0, DWORD PTR [ecx+12]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00083	f3 0f 59 41 18	 mulss	 xmm0, DWORD PTR [ecx+24]
  00088	f3 0f 58 f8	 addss	 xmm7, xmm0
  0008c	f3 0f 11 7d fc	 movss	 DWORD PTR _fPosition2$1$[ebp], xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 333  : 			|| (fPosition1) <= s.fRadius && fPosition1 >= -s.fRadius)

  00091	f3 0f 10 78 04	 movss	 xmm7, DWORD PTR [eax+4]
  00096	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fPosition2$1$[ebp]
  0009b	76 05		 jbe	 SHORT $LN4@OnMovement
  0009d	0f 2f c8	 comiss	 xmm1, xmm0
  000a0	77 28		 ja	 SHORT $LN3@OnMovement
$LN4@OnMovement:
  000a2	0f 2f cd	 comiss	 xmm1, xmm5
  000a5	76 05		 jbe	 SHORT $LN5@OnMovement
  000a7	0f 2f c1	 comiss	 xmm0, xmm1
  000aa	77 1e		 ja	 SHORT $LN3@OnMovement
$LN5@OnMovement:
  000ac	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  000b1	0f 2f c5	 comiss	 xmm0, xmm5
  000b4	0f 82 0b 01 00
	00		 jb	 $LN10@OnMovement
  000ba	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  000c1	0f 2f e8	 comiss	 xmm5, xmm0
  000c4	0f 82 fb 00 00
	00		 jb	 $LN10@OnMovement
$LN3@OnMovement:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000ca	f3 0f 10 60 08	 movss	 xmm4, DWORD PTR [eax+8]
  000cf	0f 28 d7	 movaps	 xmm2, xmm7
  000d2	f3 0f 10 18	 movss	 xmm3, DWORD PTR [eax]
  000d6	0f 28 cc	 movaps	 xmm1, xmm4
  000d9	f3 0f 5c 49 24	 subss	 xmm1, DWORD PTR [ecx+36]
  000de	f3 0f 5c 51 20	 subss	 xmm2, DWORD PTR [ecx+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 338  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  000e3	f3 0f 10 70 18	 movss	 xmm6, DWORD PTR [eax+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000e8	0f 28 c3	 movaps	 xmm0, xmm3
  000eb	f3 0f 5c 41 1c	 subss	 xmm0, DWORD PTR [ecx+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 338  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  000f0	0f 57 35 00 00
	00 00		 xorps	 xmm6, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000f7	f3 0f 5c 59 40	 subss	 xmm3, DWORD PTR [ecx+64]
  000fc	f3 0f 5c 79 44	 subss	 xmm7, DWORD PTR [ecx+68]
  00101	f3 0f 5c 61 48	 subss	 xmm4, DWORD PTR [ecx+72]
  00106	f3 0f 11 4d 08	 movss	 DWORD PTR tv1174[ebp], xmm1

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0010b	0f 28 ca	 movaps	 xmm1, xmm2
  0010e	f3 0f 59 49 50	 mulss	 xmm1, DWORD PTR [ecx+80]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00113	f3 0f 11 45 f8	 movss	 DWORD PTR tv1173[ebp], xmm0

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00118	f3 0f 59 41 4c	 mulss	 xmm0, DWORD PTR [ecx+76]
  0011d	f3 0f 58 c8	 addss	 xmm1, xmm0
  00121	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv1174[ebp]
  00126	f3 0f 59 41 54	 mulss	 xmm0, DWORD PTR [ecx+84]
  0012b	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 338  : 		if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[0]) > - s.fRadius/*0.0f*/)

  0012f	0f 2f ce	 comiss	 xmm1, xmm6
  00132	0f 86 8d 00 00
	00		 jbe	 $LN10@OnMovement
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00138	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR tv1173[ebp]
  0013d	f3 0f 59 41 58	 mulss	 xmm0, DWORD PTR [ecx+88]
  00142	f3 0f 59 51 5c	 mulss	 xmm2, DWORD PTR [ecx+92]
  00147	f3 0f 58 d0	 addss	 xmm2, xmm0
  0014b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv1174[ebp]
  00150	f3 0f 59 41 60	 mulss	 xmm0, DWORD PTR [ecx+96]
  00155	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 339  : 			if (D3DXVec3Dot(&v3QuadPosition1, &m_attribute.v3InsideVector[1]) > -s.fRadius/*0.0f*/)

  00159	0f 2f d6	 comiss	 xmm2, xmm6
  0015c	76 67		 jbe	 SHORT $LN10@OnMovement
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0015e	0f 28 c3	 movaps	 xmm0, xmm3
  00161	0f 28 cf	 movaps	 xmm1, xmm7
  00164	f3 0f 59 41 64	 mulss	 xmm0, DWORD PTR [ecx+100]
  00169	f3 0f 59 49 68	 mulss	 xmm1, DWORD PTR [ecx+104]
  0016e	f3 0f 58 c8	 addss	 xmm1, xmm0
  00172	0f 28 c4	 movaps	 xmm0, xmm4
  00175	f3 0f 59 41 6c	 mulss	 xmm0, DWORD PTR [ecx+108]
  0017a	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 340  : 				if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[2]) > - s.fRadius/*0.0f*/)

  0017e	0f 2f ce	 comiss	 xmm1, xmm6
  00181	76 42		 jbe	 SHORT $LN10@OnMovement
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00183	f3 0f 59 79 74	 mulss	 xmm7, DWORD PTR [ecx+116]
  00188	f3 0f 59 59 70	 mulss	 xmm3, DWORD PTR [ecx+112]
  0018d	f3 0f 59 61 78	 mulss	 xmm4, DWORD PTR [ecx+120]
  00192	f3 0f 58 fb	 addss	 xmm7, xmm3
  00196	f3 0f 58 fc	 addss	 xmm7, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 341  : 					if (D3DXVec3Dot(&v3QuadPosition2, &m_attribute.v3InsideVector[3]) > - s.fRadius/*0.0f*/)

  0019a	0f 2f fe	 comiss	 xmm7, xmm6
  0019d	76 26		 jbe	 SHORT $LN10@OnMovement

; 342  : 					{
; 343  : 						if (fabs(D3DXVec3Dot(&(s.v3Position - m_attribute.v3Position), &m_attribute.v3Normal)) <

  0019f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fPosition2$1$[ebp]
  001a4	0f 5a d5	 cvtps2pd xmm2, xmm5
  001a7	0f 5a c0	 cvtps2pd xmm0, xmm0
  001aa	0f 54 15 00 00
	00 00		 andps	 xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  001b1	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  001b8	66 0f 2f c2	 comisd	 xmm0, xmm2
  001bc	0f 97 c0	 seta	 al

; 352  : }

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 04 00	 ret	 4
$LN10@OnMovement:

; 344  : 								fabs(D3DXVec3Dot(&(s.v3LastPosition - m_attribute.v3Position), &m_attribute.v3Normal)))
; 345  : 						{
; 346  : 							return true;
; 347  : 						}
; 348  : 					}
; 349  : 	}
; 350  : 
; 351  : 	return false;

  001c5	32 c0		 xor	 al, al

; 352  : }

  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CPlaneCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CPlaneCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CPlaneCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CPlaneCollisionInstance@@MAEXXZ PROC		; CPlaneCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 457  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 458  : 	gs_pci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 459  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@AAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 459  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CPlaneCollisionInstance@@MAEXXZ ENDP		; CPlaneCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CPlaneCollisionInstance::Render, COMDAT
; _this$ = ecx

; 451  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 452  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 20		 jg	 SHORT $LN7@Render
$LN2@Render:

; 453  : 	s.RenderBar3d(m_attribute.v3QuadPosition);

  00041	8d 46 1c	 lea	 eax, DWORD PTR [esi+28]
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 ?RenderBar3d@CScreen@@QAEXPBUD3DXVECTOR3@@@Z ; CScreen::RenderBar3d

; 454  : }

  0004f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00059	59		 pop	 ecx
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN7@Render:

; 452  : 	static CScreen s;

  00061	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00066	e8 00 00 00 00	 call	 __Init_thread_header
  0006b	83 c4 04	 add	 esp, 4
  0006e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  00075	75 ca		 jne	 SHORT $LN2@Render
  00077	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00083	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  00088	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CPlaneCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  0008d	e8 00 00 00 00	 call	 _atexit
  00092	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00097	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	e8 00 00 00 00	 call	 __Init_thread_footer
  000a3	83 c4 08	 add	 esp, 8
  000a6	eb 99		 jmp	 SHORT $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CPlaneCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CPlaneCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ
_TEXT	SEGMENT
?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ PROC ; CPlaneCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 321  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 322  : }

  00003	c3		 ret	 0
?GetAttribute@CPlaneCollisionInstance@@QBEABUSPlaneData@@XZ ENDP ; CPlaneCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ
_TEXT	SEGMENT
?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ PROC ; CPlaneCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 316  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 317  : }

  00003	c3		 ret	 0
?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ ENDP ; CPlaneCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv1060 = -16						; size = 4
tv1010 = -16						; size = 4
tv1055 = -12						; size = 4
tv1047 = -8						; size = 4
_sum$1$ = -8						; size = 4
tv1058 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z PROC ; CSphereCollisionInstance::OnGetCollisionMovementAdjust, COMDAT
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 14	 sub	 esp, 20			; 00000014H
  00009	8b 45 0c	 mov	 eax, DWORD PTR _s$[ebp]
  0000c	56		 push	 esi
  0000d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00010	f3 0f 10 20	 movss	 xmm4, DWORD PTR [eax]
  00014	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00019	0f 28 fc	 movaps	 xmm7, xmm4
  0001c	f3 0f 5c 79 04	 subss	 xmm7, DWORD PTR [ecx+4]
  00021	f3 0f 5c 51 08	 subss	 xmm2, DWORD PTR [ecx+8]
  00026	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 269  : 	if (D3DXVec3LengthSq(&(s.v3Position - m_attribute.v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  0002b	f3 0f 10 68 18	 movss	 xmm5, DWORD PTR [eax+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00030	0f 28 cb	 movaps	 xmm1, xmm3
  00033	f3 0f 5c 49 0c	 subss	 xmm1, DWORD PTR [ecx+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 269  : 	if (D3DXVec3LengthSq(&(s.v3Position - m_attribute.v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  00038	f3 0f 58 69 10	 addss	 xmm5, DWORD PTR [ecx+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0003d	0f 28 c7	 movaps	 xmm0, xmm7

; 306  :     z = fz;

  00040	0f 28 f2	 movaps	 xmm6, xmm2

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00043	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 306  :     z = fz;

  00047	f3 0f 59 f2	 mulss	 xmm6, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 269  : 	if (D3DXVec3LengthSq(&(s.v3Position - m_attribute.v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  0004b	f3 0f 59 ed	 mulss	 xmm5, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0004f	f3 0f 58 f0	 addss	 xmm6, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00053	f3 0f 11 4c 24
	10		 movss	 DWORD PTR tv1047[esp+24], xmm1

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00059	0f 28 c1	 movaps	 xmm0, xmm1
  0005c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00060	f3 0f 58 f0	 addss	 xmm6, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 269  : 	if (D3DXVec3LengthSq(&(s.v3Position - m_attribute.v3Position)) >= (s.fRadius + m_attribute.fRadius) * (m_attribute.fRadius + s.fRadius))

  00064	0f 2f f5	 comiss	 xmm6, xmm5
  00067	72 1d		 jb	 SHORT $LN2@OnGetColli
$LN49@OnGetColli:

; 310  : }

  00069	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0006f	8b c6		 mov	 eax, esi
  00071	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00078	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 08 00	 ret	 8
$LN2@OnGetColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00086	f3 0f 5c 58 14	 subss	 xmm3, DWORD PTR [eax+20]
  0008b	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 277  : 	float mul = (s.fRadius + m_attribute.fRadius) * (s.fRadius + m_attribute.fRadius) - D3DXVec3LengthSq(&(s.v3Position - m_attribute.v3Position));

  00090	f3 0f 5c ee	 subss	 xmm5, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00094	f3 0f 5c 40 10	 subss	 xmm0, DWORD PTR [eax+16]
  00099	f3 0f 5c 60 0c	 subss	 xmm4, DWORD PTR [eax+12]
  0009e	0f 57 c9	 xorps	 xmm1, xmm1

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000a1	f3 0f 59 d9	 mulss	 xmm3, xmm1

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000a5	f3 0f 11 44 24
	08		 movss	 DWORD PTR tv1010[esp+24], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 279  : 	if (sum * sum - 4 * mul <= 0)

  000ab	f3 0f 59 2d 00
	00 00 00	 mulss	 xmm5, DWORD PTR __real@40800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000b3	f3 0f 5c c3	 subss	 xmm0, xmm3

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000b7	f3 0f 5c dc	 subss	 xmm3, xmm4

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000bb	f3 0f 59 e1	 mulss	 xmm4, xmm1
  000bf	f3 0f 11 44 24
	0c		 movss	 DWORD PTR tv1055[esp+24], xmm0
  000c5	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv1010[esp+24]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000cb	f3 0f 59 7c 24
	0c		 mulss	 xmm7, DWORD PTR tv1055[esp+24]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000d1	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 306  :     z = fz;

  000d5	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000d9	f3 0f 5c e0	 subss	 xmm4, xmm0
  000dd	f3 0f 11 5c 24
	14		 movss	 DWORD PTR tv1058[esp+24], xmm3

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000e3	f3 0f 58 d7	 addss	 xmm2, xmm7
  000e7	0f 28 c4	 movaps	 xmm0, xmm4

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  000ea	f3 0f 11 64 24
	08		 movss	 DWORD PTR tv1060[esp+24], xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  000f0	f3 0f 59 44 24
	10		 mulss	 xmm0, DWORD PTR tv1047[esp+24]
  000f6	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 276  : 	float sum = - D3DXVec3Dot(&c, &(s.v3Position - m_attribute.v3Position));

  000fa	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000

; 279  : 	if (sum * sum - 4 * mul <= 0)

  00101	0f 28 c2	 movaps	 xmm0, xmm2
  00104	f3 0f 11 54 24
	10		 movss	 DWORD PTR _sum$1$[esp+24], xmm2
  0010a	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0010e	f3 0f 5c c5	 subss	 xmm0, xmm5
  00112	0f 2f c8	 comiss	 xmm1, xmm0
  00115	0f 83 4e ff ff
	ff		 jae	 $LN49@OnGetColli

; 280  : 	{
; 281  : 		return D3DXVECTOR3(0.0f, 0.0f, 0.0f);
; 282  : 	}
; 283  : 	float sq = sqrt(sum * sum - 4 * mul);

  0011b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0011f	66 0f 2e c8	 ucomisd xmm1, xmm0
  00123	77 06		 ja	 SHORT $LN45@OnGetColli
  00125	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00129	eb 05		 jmp	 SHORT $LN46@OnGetColli
$LN45@OnGetColli:
  0012b	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN46@OnGetColli:

; 284  : 	float t1 = -sum - sq, t2 = -sum + sq;

  00130	f3 0f 10 5c 24
	10		 movss	 xmm3, DWORD PTR _sum$1$[esp+24]
  00136	0f 57 e4	 xorps	 xmm4, xmm4
  00139	0f 57 1d 00 00
	00 00		 xorps	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 285  : 	t1 *= 0.5f;
; 286  : 	t2 *= 0.5f;
; 287  : 
; 288  : 	if (fabs(t1) <= fabs(t2))

  00140	0f 57 d2	 xorps	 xmm2, xmm2
  00143	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f000000
  0014b	f2 0f 5a e0	 cvtsd2ss xmm4, xmm0
  0014f	f3 0f 5c dc	 subss	 xmm3, xmm4
  00153	f3 0f 5c 64 24
	10		 subss	 xmm4, DWORD PTR _sum$1$[esp+24]
  00159	f3 0f 59 dd	 mulss	 xmm3, xmm5
  0015d	f3 0f 59 e5	 mulss	 xmm4, xmm5
  00161	f3 0f 5a d3	 cvtss2sd xmm2, xmm3
  00165	0f 5a c4	 cvtps2pd xmm0, xmm4
  00168	0f 54 15 00 00
	00 00		 andps	 xmm2, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  0016f	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00176	66 0f 2f c2	 comisd	 xmm0, xmm2
  0017a	72 33		 jb	 SHORT $LN4@OnGetColli

; 289  : 	{
; 290  : 		return (gc_fReduceMove * t1) * c;

  0017c	f3 0f 59 dd	 mulss	 xmm3, xmm5

; 310  : }

  00180	8b c6		 mov	 eax, esi
  00182	0f 28 c3	 movaps	 xmm0, xmm3
  00185	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR tv1055[esp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0018b	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0018f	0f 28 c3	 movaps	 xmm0, xmm3

; 305  :     y = fy;

  00192	f3 0f 59 5c 24
	08		 mulss	 xmm3, DWORD PTR tv1060[esp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 310  : }

  00198	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR tv1058[esp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0019e	f3 0f 11 5e 08	 movss	 DWORD PTR [esi+8], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 310  : }

  001a3	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001a8	5e		 pop	 esi
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 08 00	 ret	 8
$LN4@OnGetColli:

; 291  : 	}
; 292  : 	else
; 293  : 	{
; 294  : 		return (gc_fReduceMove * t2) * c;

  001af	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 310  : }

  001b3	8b c6		 mov	 eax, esi
  001b5	0f 28 c4	 movaps	 xmm0, xmm4
  001b8	f3 0f 59 44 24
	0c		 mulss	 xmm0, DWORD PTR tv1055[esp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  001be	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001c2	0f 28 c4	 movaps	 xmm0, xmm4

; 305  :     y = fy;

  001c5	f3 0f 59 64 24
	08		 mulss	 xmm4, DWORD PTR tv1060[esp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 310  : }

  001cb	f3 0f 59 44 24
	14		 mulss	 xmm0, DWORD PTR tv1058[esp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  001d1	f3 0f 11 66 08	 movss	 DWORD PTR [esi+8], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 310  : }

  001d6	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0
  001db	5e		 pop	 esi
  001dc	8b e5		 mov	 esp, ebp
  001de	5d		 pop	 ebp
  001df	c2 08 00	 ret	 8
?OnGetCollisionMovementAdjust@CSphereCollisionInstance@@MBE?AUD3DXVECTOR3@@ABUCDynamicSphereInstance@@@Z ENDP ; CSphereCollisionInstance::OnGetCollisionMovementAdjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv138 = -4						; size = 4
tv130 = 8						; size = 4
_s$ = 8							; size = 4
?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CSphereCollisionInstance::OnCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 257  : 	//Tracef("OnCollisionDynamicSphere\n");
; 258  : 
; 259  : 	if (square_distance_between_linesegment_and_point(s.v3LastPosition, s.v3Position, m_attribute.v3Position) < (m_attribute.fRadius + s.fRadius) * (m_attribute.fRadius + s.fRadius))

  00004	8b 55 08	 mov	 edx, DWORD PTR _s$[ebp]
  00007	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000a	50		 push	 eax
  0000b	52		 push	 edx
  0000c	f3 0f 10 42 18	 movss	 xmm0, DWORD PTR [edx+24]
  00011	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00014	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  00019	50		 push	 eax
  0001a	f3 0f 11 45 08	 movss	 DWORD PTR tv130[ebp], xmm0
  0001f	e8 00 00 00 00	 call	 ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
  00024	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv130[ebp]
  00029	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002c	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00030	d9 5d fc	 fstp	 DWORD PTR tv138[ebp]
  00033	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv138[ebp]
  00037	0f 97 c0	 seta	 al

; 260  : 	{
; 261  : 		return true;
; 262  : 	}
; 263  : 
; 264  : 	return false;
; 265  : }

  0003a	8b e5		 mov	 esp, ebp
  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
?OnCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CSphereCollisionInstance::OnCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z
_TEXT	SEGMENT
tv314 = -4						; size = 4
tv265 = 8						; size = 4
_s$ = 8							; size = 4
?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z PROC ; CSphereCollisionInstance::OnMovementCollisionDynamicSphere, COMDAT
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 243  : 	if (square_distance_between_linesegment_and_point(s.v3LastPosition, s.v3Position, m_attribute.v3Position) < (m_attribute.fRadius + s.fRadius) * (m_attribute.fRadius + s.fRadius))

  00006	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00009	57		 push	 edi
  0000a	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  0000d	57		 push	 edi
  0000e	f3 0f 10 46 18	 movss	 xmm0, DWORD PTR [esi+24]
  00013	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  00016	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [ecx+16]
  0001b	56		 push	 esi
  0001c	53		 push	 ebx
  0001d	f3 0f 11 45 08	 movss	 DWORD PTR tv265[ebp], xmm0
  00022	e8 00 00 00 00	 call	 ?square_distance_between_linesegment_and_point@@YAMABUD3DXVECTOR3@@00@Z ; square_distance_between_linesegment_and_point
  00027	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR tv265[ebp]
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00033	d9 5d fc	 fstp	 DWORD PTR tv314[ebp]
  00036	0f 2f 45 fc	 comiss	 xmm0, DWORD PTR tv314[ebp]
  0003a	76 4b		 jbe	 SHORT $LN3@OnMovement
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  0003c	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  00041	f3 0f 10 26	 movss	 xmm4, DWORD PTR [esi]
  00045	f3 0f 10 53 04	 movss	 xmm2, DWORD PTR [ebx+4]
  0004a	f3 0f 10 0b	 movss	 xmm1, DWORD PTR [ebx]
  0004e	f3 0f 5c 27	 subss	 xmm4, DWORD PTR [edi]
  00052	f3 0f 5c 0f	 subss	 xmm1, DWORD PTR [edi]
  00056	f3 0f 5c 5f 04	 subss	 xmm3, DWORD PTR [edi+4]
  0005b	f3 0f 5c 57 04	 subss	 xmm2, DWORD PTR [edi+4]
  00060	5f		 pop	 edi
  00061	f3 0f 59 e4	 mulss	 xmm4, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 253  : }

  00065	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  00066	f3 0f 59 db	 mulss	 xmm3, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 253  : }

  0006a	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpMath.h

; 48   : 	return (c_rv3Source.x - c_rv3Target.x) * (c_rv3Source.x - c_rv3Target.x) + (c_rv3Source.y - c_rv3Target.y) * (c_rv3Source.y - c_rv3Target.y);

  0006b	f3 0f 59 c9	 mulss	 xmm1, xmm1
  0006f	f3 0f 59 d2	 mulss	 xmm2, xmm2
  00073	f3 0f 58 e3	 addss	 xmm4, xmm3
  00077	f3 0f 58 ca	 addss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 245  : 		if (GetVector3Distance(s.v3Position, m_attribute.v3Position) <

  0007b	0f 2f cc	 comiss	 xmm1, xmm4
  0007e	0f 97 c0	 seta	 al

; 253  : }

  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c2 04 00	 ret	 4
$LN3@OnMovement:
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	32 c0		 xor	 al, al
  0008b	5b		 pop	 ebx
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?OnMovementCollisionDynamicSphere@CSphereCollisionInstance@@MBE_NABUCDynamicSphereInstance@@@Z ENDP ; CSphereCollisionInstance::OnMovementCollisionDynamicSphere
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?OnDestroy@CSphereCollisionInstance@@MAEXXZ
_TEXT	SEGMENT
_pkData$ = -4						; size = 4
?OnDestroy@CSphereCollisionInstance@@MAEXXZ PROC	; CSphereCollisionInstance::OnDestroy, COMDAT
; _this$ = ecx

; 237  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00004	a1 14 00 00 00	 mov	 eax, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 238  : 	gs_sci.Free(this);

  00009	89 4d fc	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0000c	3b 05 18 00 00
	00		 cmp	 eax, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+24
  00012	74 0d		 je	 SHORT $LN8@OnDestroy

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00016	83 05 14 00 00
	00 04		 add	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 239  : }

  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN8@OnDestroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00021	8d 4d fc	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	b9 10 00 00 00	 mov	 ecx, OFFSET ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16
  0002b	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@AAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 239  : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
?OnDestroy@CSphereCollisionInstance@@MAEXXZ ENDP	; CSphereCollisionInstance::OnDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_d3dFillMode$ = 8					; size = 4
?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z PROC ; CSphereCollisionInstance::Render, COMDAT
; _this$ = ecx

; 230  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 231  : 	static CScreen s;

  00025	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  0002b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __tls_index
  00031	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00034	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00039	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0003f	7f 3b		 jg	 SHORT $LN7@Render
$LN2@Render:

; 232  : 	STATEMANAGER.SetRenderState(D3DRS_TEXTUREFACTOR, 0xffffffff);

  00041	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  00047	6a ff		 push	 -1
  00049	6a 3c		 push	 60			; 0000003cH
  0004b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 233  : 	s.RenderSphere(NULL, m_attribute.v3Position.x, m_attribute.v3Position.y, m_attribute.v3Position.z, m_attribute.fRadius, d3dFillMode);

  00050	ff 75 08	 push	 DWORD PTR _d3dFillMode$[ebp]
  00053	0f 10 46 04	 movups	 xmm0, XMMWORD PTR [esi+4]
  00057	83 ec 10	 sub	 esp, 16			; 00000010H
  0005a	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  0005f	0f 11 04 24	 movups	 XMMWORD PTR [esp], xmm0
  00063	6a 00		 push	 0
  00065	e8 00 00 00 00	 call	 ?RenderSphere@CScreen@@QAEXPBUD3DXMATRIX@@MMMMW4_D3DFILLMODE@@@Z ; CScreen::RenderSphere

; 234  : }

  0006a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00074	59		 pop	 ecx
  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c2 04 00	 ret	 4
$LN7@Render:

; 231  : 	static CScreen s;

  0007c	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00081	e8 00 00 00 00	 call	 __Init_thread_header
  00086	83 c4 04	 add	 esp, 4
  00089	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA, -1
  00090	75 af		 jne	 SHORT $LN2@Render
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ?s@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4VCScreen@@A
  00097	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009e	e8 00 00 00 00	 call	 ??0CScreen@@QAE@XZ	; CScreen::CScreen
  000a3	68 00 00 00 00	 push	 OFFSET ??__Fs@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@YAXXZ ; `CSphereCollisionInstance::Render'::`2'::`dynamic atexit destructor for 's''
  000a8	e8 00 00 00 00	 call	 _atexit
  000ad	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  000b2	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b9	e8 00 00 00 00	 call	 __Init_thread_footer
  000be	83 c4 08	 add	 esp, 8
  000c1	e9 7b ff ff ff	 jmp	 $LN2@Render
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Render@CSphereCollisionInstance@@UAEXW4_D3DFILLMODE@@@Z ENDP ; CSphereCollisionInstance::Render
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ
_TEXT	SEGMENT
?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ PROC ; CSphereCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 226  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 227  : }

  00003	c3		 ret	 0
?GetAttribute@CSphereCollisionInstance@@QBEABUSSphereData@@XZ ENDP ; CSphereCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ
_TEXT	SEGMENT
?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ PROC ; CSphereCollisionInstance::GetAttribute, COMDAT
; _this$ = ecx

; 221  : 	return m_attribute;

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 222  : }

  00003	c3		 ret	 0
?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ ENDP ; CSphereCollisionInstance::GetAttribute
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z
_TEXT	SEGMENT
tv3601 = -324						; size = 4
tv3567 = -324						; size = 4
$T1 = -324						; size = 4
_PlaneData$1$ = -320					; size = 4
tv3603 = -320						; size = 4
tv3566 = -320						; size = 4
_pkNewData$2 = -320					; size = 4
_pMat$GSCopy$1$ = -316					; size = 4
tv3602 = -316						; size = 4
tv3565 = -316						; size = 4
tv3548 = -316						; size = 4
_pkNewData$3 = -316					; size = 4
_pkNewData$4 = -316					; size = 4
_pkNewData$5 = -316					; size = 4
_pkNewData$6 = -316					; size = 4
_ppci$1$ = -312						; size = 4
$T7 = -312						; size = 4
$T8 = -312						; size = 4
$T9 = -312						; size = 4
$T10 = -312						; size = 4
_matTranslationLocal$11 = -308				; size = 64
_matTransform$12 = -308					; size = 64
_matRotation$13 = -244					; size = 64
$T14 = -244						; size = 64
$T15 = -180						; size = 64
$T16 = -180						; size = 64
_matTranslationLocal$17 = -180				; size = 64
_matTranslationLocal$18 = -180				; size = 64
_matTranslationLocal$19 = -116				; size = 64
_matTranslationLocal$20 = -116				; size = 64
_matTransform$21 = -116					; size = 64
_matRotation$22 = -116					; size = 64
_v3Line1$23 = -52					; size = 12
_v3Line0$24 = -40					; size = 12
_v3Max$25 = -28						; size = 12
_v3Line3$26 = -28					; size = 12
_v3Min$27 = -16						; size = 12
_v3Line2$28 = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_c_pCollisionData$ = 8					; size = 4
_pMat$ = 12						; size = 4
?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z PROC ; CBaseCollisionInstance::BuildCollisionInstance, COMDAT

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 01 00
	00		 sub	 esp, 324		; 00000144H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b 75 0c	 mov	 esi, DWORD PTR _pMat$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR _c_pCollisionData$[ebp]
  0001b	89 b5 c4 fe ff
	ff		 mov	 DWORD PTR _pMat$GSCopy$1$[ebp], esi

; 37   : 	switch (c_pCollisionData->dwType)

  00021	8b 07		 mov	 eax, DWORD PTR [edi]
  00023	83 f8 05	 cmp	 eax, 5
  00026	0f 87 1d 0b 00
	00		 ja	 $LN2@BuildColli
  0002c	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN179@BuildColli[eax*4]
$LN7@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20
  00039	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  0003f	75 75		 jne	 SHORT $LN41@BuildColli

; 65   : 			T* pkNewData = new T;

  00041	6a 7c		 push	 124			; 0000007cH
  00043	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00048	83 c4 04	 add	 esp, 4
  0004b	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], eax
  00051	89 85 bc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00057	85 c0		 test	 eax, eax
  00059	74 08		 je	 SHORT $LN43@BuildColli
  0005b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CPlaneCollisionInstance@@6B@
  00061	eb 08		 jmp	 SHORT $LN44@BuildColli
$LN43@BuildColli:
  00063	33 c0		 xor	 eax, eax
  00065	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], eax
$LN44@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0006b	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00071	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _pkNewData$2[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00077	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+12
  0007d	74 11		 je	 SHORT $LN51@BuildColli

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0007f	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00081	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00088	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+32

; 68   : 			return pkNewData;

  0008e	eb 37		 jmp	 SHORT $LN40@BuildColli
$LN51@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00090	8d 85 c0 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$2[ebp]
  00096	50		 push	 eax
  00097	51		 push	 ecx
  00098	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+4
  0009d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCPlaneCollisionInstance@@@?$vector@PAVCPlaneCollisionInstance@@V?$allocator@PAVCPlaneCollisionInstance@@@std@@@std@@AAEPAPAVCPlaneCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CPlaneCollisionInstance *,std::allocator<CPlaneCollisionInstance *> >::_Emplace_reallocate<CPlaneCollisionInstance * const &>
  000a2	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _pkNewData$2[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  000a8	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+32
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000ae	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 68   : 			return pkNewData;

  000b4	eb 11		 jmp	 SHORT $LN40@BuildColli
$LN41@BuildColli:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  000b6	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  000b9	89 85 c8 fe ff
	ff		 mov	 DWORD PTR _ppci$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  000bf	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  000c2	a3 14 00 00 00	 mov	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20, eax
$LN40@BuildColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 44   : 		D3DXMatrixRotationQuaternion(&matRotation, &c_pCollisionData->quatRotation);

  000c7	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  000ca	50		 push	 eax
  000cb	8d 45 8c	 lea	 eax, DWORD PTR _matRotation$22[ebp]
  000ce	50		 push	 eax
  000cf	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 45   : 		D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  000d4	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  000d9	8d 77 28	 lea	 esi, DWORD PTR [edi+40]
  000dc	83 ec 0c	 sub	 esp, 12			; 0000000cH
  000df	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$18[ebp]
  000e5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  000eb	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  000f0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  000f6	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00105	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$18[ebp]
  0010b	50		 push	 eax
  0010c	8d 45 8c	 lea	 eax, DWORD PTR _matRotation$22[ebp]
  0010f	50		 push	 eax
  00110	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  00116	50		 push	 eax
  00117	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
  0011c	ff b5 c4 fe ff
	ff		 push	 DWORD PTR _pMat$GSCopy$1$[ebp]
  00122	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]
  00128	50		 push	 eax
  00129	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _matTransform$12[ebp]
  0012f	50		 push	 eax
  00130	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 48   : 		TPlaneData & PlaneData = ppci->GetAttribute();

  00135	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR _ppci$1$[ebp]
  0013b	e8 00 00 00 00	 call	 ?GetAttribute@CPlaneCollisionInstance@@QAEAAUSPlaneData@@XZ ; CPlaneCollisionInstance::GetAttribute

; 49   : 		D3DXVec3TransformCoord(&PlaneData.v3Position, &c_pCollisionData->v3Position, pMat);

  00140	ff b5 c4 fe ff
	ff		 push	 DWORD PTR _pMat$GSCopy$1$[ebp]
  00146	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _PlaneData$1$[ebp], eax
  0014c	56		 push	 esi
  0014d	50		 push	 eax
  0014e	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 50   : 		float fHalfWidth = c_pCollisionData->fDimensions[0] / 2.0f;

  00153	f3 0f 10 67 34	 movss	 xmm4, DWORD PTR [edi+52]

; 51   : 		float fHalfLength = c_pCollisionData->fDimensions[1] / 2.0f;

  00158	f3 0f 10 5f 38	 movss	 xmm3, DWORD PTR [edi+56]

; 52   : 
; 53   : 		PlaneData.v3QuadPosition[0].x = -fHalfWidth;

  0015d	8b bd c0 fe ff
	ff		 mov	 edi, DWORD PTR _PlaneData$1$[ebp]
  00163	f3 0f 59 25 00
	00 00 00	 mulss	 xmm4, DWORD PTR __real@3f000000
  0016b	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0016e	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000

; 54   : 		PlaneData.v3QuadPosition[0].y = -fHalfLength;
; 55   : 		PlaneData.v3QuadPosition[0].z = 0.0f;

  00176	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  0017d	0f 28 d4	 movaps	 xmm2, xmm4

; 56   : 		PlaneData.v3QuadPosition[1].x = +fHalfWidth;

  00180	f3 0f 11 67 24	 movss	 DWORD PTR [edi+36], xmm4
  00185	0f 57 15 00 00
	00 00		 xorps	 xmm2, DWORD PTR __xmm@80000000800000008000000080000000
  0018c	0f 28 cb	 movaps	 xmm1, xmm3

; 57   : 		PlaneData.v3QuadPosition[1].y = -fHalfLength;
; 58   : 		PlaneData.v3QuadPosition[1].z = 0.0f;

  0018f	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  00196	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0019d	f3 0f 11 4f 1c	 movss	 DWORD PTR [edi+28], xmm1
  001a2	f3 0f 11 4f 28	 movss	 DWORD PTR [edi+40], xmm1

; 59   : 		PlaneData.v3QuadPosition[2].x = -fHalfWidth;

  001a7	f3 0f 11 57 30	 movss	 DWORD PTR [edi+48], xmm2

; 60   : 		PlaneData.v3QuadPosition[2].y = +fHalfLength;

  001ac	f3 0f 11 5f 34	 movss	 DWORD PTR [edi+52], xmm3

; 61   : 		PlaneData.v3QuadPosition[2].z = 0.0f;

  001b1	c7 47 38 00 00
	00 00		 mov	 DWORD PTR [edi+56], 0

; 62   : 		PlaneData.v3QuadPosition[3].x = +fHalfWidth;

  001b8	f3 0f 11 67 3c	 movss	 DWORD PTR [edi+60], xmm4

; 63   : 		PlaneData.v3QuadPosition[3].y = +fHalfLength;

  001bd	f3 0f 11 5f 40	 movss	 DWORD PTR [edi+64], xmm3

; 64   : 		PlaneData.v3QuadPosition[3].z = 0.0f;

  001c2	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  001c9	bf 04 00 00 00	 mov	 edi, 4
  001ce	f3 0f 11 16	 movss	 DWORD PTR [esi], xmm2
$LL6@BuildColli:

; 65   : 		for (DWORD i = 0; i < 4; ++i)
; 66   : 		{
; 67   : 			D3DXVec3TransformCoord(&PlaneData.v3QuadPosition[i], &PlaneData.v3QuadPosition[i], &matTransform);

  001d2	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _matTransform$12[ebp]
  001d8	50		 push	 eax
  001d9	56		 push	 esi
  001da	56		 push	 esi
  001db	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
  001e0	83 c6 0c	 add	 esi, 12			; 0000000cH
  001e3	83 ef 01	 sub	 edi, 1
  001e6	75 ea		 jne	 SHORT $LL6@BuildColli
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001e8	8b bd c0 fe ff
	ff		 mov	 edi, DWORD PTR _PlaneData$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 73   : 		D3DXVec3Normalize(&v3Line0, &v3Line0);

  001ee	8d 45 d8	 lea	 eax, DWORD PTR _v3Line0$24[ebp]
  001f1	50		 push	 eax
  001f2	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001f3	f3 0f 10 57 28	 movss	 xmm2, DWORD PTR [edi+40]
  001f8	f3 0f 5c 57 1c	 subss	 xmm2, DWORD PTR [edi+28]
  001fd	f3 0f 10 4f 2c	 movss	 xmm1, DWORD PTR [edi+44]
  00202	f3 0f 5c 4f 20	 subss	 xmm1, DWORD PTR [edi+32]
  00207	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  0020c	f3 0f 5c 47 18	 subss	 xmm0, DWORD PTR [edi+24]

; 305  :     y = fy;

  00211	f3 0f 11 55 dc	 movss	 DWORD PTR _v3Line0$24[ebp+4], xmm2

; 306  :     z = fz;

  00216	f3 0f 11 4d e0	 movss	 DWORD PTR _v3Line0$24[ebp+8], xmm1
  0021b	f3 0f 11 45 d8	 movss	 DWORD PTR _v3Line0$24[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00220	f3 0f 10 57 34	 movss	 xmm2, DWORD PTR [edi+52]
  00225	f3 0f 5c 57 1c	 subss	 xmm2, DWORD PTR [edi+28]
  0022a	f3 0f 10 4f 38	 movss	 xmm1, DWORD PTR [edi+56]
  0022f	f3 0f 5c 4f 20	 subss	 xmm1, DWORD PTR [edi+32]
  00234	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00239	f3 0f 5c 47 18	 subss	 xmm0, DWORD PTR [edi+24]

; 305  :     y = fy;

  0023e	f3 0f 11 55 d0	 movss	 DWORD PTR _v3Line1$23[ebp+4], xmm2

; 306  :     z = fz;

  00243	f3 0f 11 4d d4	 movss	 DWORD PTR _v3Line1$23[ebp+8], xmm1
  00248	f3 0f 11 45 cc	 movss	 DWORD PTR _v3Line1$23[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0024d	f3 0f 10 57 28	 movss	 xmm2, DWORD PTR [edi+40]
  00252	f3 0f 10 4f 2c	 movss	 xmm1, DWORD PTR [edi+44]
  00257	f3 0f 10 47 24	 movss	 xmm0, DWORD PTR [edi+36]
  0025c	f3 0f 5c 57 40	 subss	 xmm2, DWORD PTR [edi+64]
  00261	f3 0f 5c 4f 44	 subss	 xmm1, DWORD PTR [edi+68]
  00266	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]

; 305  :     y = fy;

  0026b	f3 0f 11 55 f4	 movss	 DWORD PTR _v3Line2$28[ebp+4], xmm2

; 306  :     z = fz;

  00270	f3 0f 11 4d f8	 movss	 DWORD PTR _v3Line2$28[ebp+8], xmm1
  00275	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Line2$28[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0027a	f3 0f 10 57 34	 movss	 xmm2, DWORD PTR [edi+52]
  0027f	f3 0f 10 4f 38	 movss	 xmm1, DWORD PTR [edi+56]
  00284	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00289	f3 0f 5c 57 40	 subss	 xmm2, DWORD PTR [edi+64]
  0028e	f3 0f 5c 4f 44	 subss	 xmm1, DWORD PTR [edi+68]
  00293	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]

; 305  :     y = fy;

  00298	f3 0f 11 55 e8	 movss	 DWORD PTR _v3Line3$26[ebp+4], xmm2

; 306  :     z = fz;

  0029d	f3 0f 11 4d ec	 movss	 DWORD PTR _v3Line3$26[ebp+8], xmm1
  002a2	f3 0f 11 45 e4	 movss	 DWORD PTR _v3Line3$26[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 73   : 		D3DXVec3Normalize(&v3Line0, &v3Line0);

  002a7	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 74   : 		D3DXVec3Normalize(&v3Line1, &v3Line1);

  002ac	8d 45 cc	 lea	 eax, DWORD PTR _v3Line1$23[ebp]
  002af	50		 push	 eax
  002b0	50		 push	 eax
  002b1	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 75   : 		D3DXVec3Normalize(&v3Line2, &v3Line2);

  002b6	8d 45 f0	 lea	 eax, DWORD PTR _v3Line2$28[ebp]
  002b9	50		 push	 eax
  002ba	50		 push	 eax
  002bb	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 76   : 		D3DXVec3Normalize(&v3Line3, &v3Line3);

  002c0	8d 45 e4	 lea	 eax, DWORD PTR _v3Line3$26[ebp]
  002c3	50		 push	 eax
  002c4	50		 push	 eax
  002c5	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002ca	f3 0f 10 75 d8	 movss	 xmm6, DWORD PTR _v3Line0$24[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 77   : 		D3DXVec3Cross(&PlaneData.v3Normal, &v3Line0, &v3Line1);

  002cf	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002d2	f3 0f 10 55 cc	 movss	 xmm2, DWORD PTR _v3Line1$23[ebp]
  002d7	0f 28 c6	 movaps	 xmm0, xmm6
  002da	f3 0f 10 5d d4	 movss	 xmm3, DWORD PTR _v3Line1$23[ebp+8]
  002df	0f 28 ea	 movaps	 xmm5, xmm2

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002e2	f3 0f 10 4d d0	 movss	 xmm1, DWORD PTR _v3Line1$23[ebp+4]
  002e7	f3 0f 59 6d e0	 mulss	 xmm5, DWORD PTR _v3Line0$24[ebp+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 78   : 		D3DXVec3Normalize(&PlaneData.v3Normal, &PlaneData.v3Normal);

  002ec	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002ed	f3 0f 59 55 dc	 mulss	 xmm2, DWORD PTR _v3Line0$24[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 78   : 		D3DXVec3Normalize(&PlaneData.v3Normal, &PlaneData.v3Normal);

  002f2	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  002f3	f3 0f 59 c3	 mulss	 xmm0, xmm3
  002f7	f3 0f 59 5d dc	 mulss	 xmm3, DWORD PTR _v3Line0$24[ebp+4]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  002fc	f3 0f 59 f1	 mulss	 xmm6, xmm1
  00300	f3 0f 5c e8	 subss	 xmm5, xmm0
  00304	f3 0f 59 4d e0	 mulss	 xmm1, DWORD PTR _v3Line0$24[ebp+8]
  00309	f3 0f 5c f2	 subss	 xmm6, xmm2
  0030d	f3 0f 5c d9	 subss	 xmm3, xmm1

; 1940 : 
; 1941 :     *pOut = v;

  00311	f3 0f 11 1e	 movss	 DWORD PTR [esi], xmm3
  00315	f3 0f 11 6e 04	 movss	 DWORD PTR [esi+4], xmm5
  0031a	f3 0f 11 76 08	 movss	 DWORD PTR [esi+8], xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 78   : 		D3DXVec3Normalize(&PlaneData.v3Normal, &PlaneData.v3Normal);

  0031f	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00324	f3 0f 10 76 08	 movss	 xmm6, DWORD PTR [esi+8]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00329	f3 0f 10 26	 movss	 xmm4, DWORD PTR [esi]
  0032d	0f 28 ee	 movaps	 xmm5, xmm6
  00330	f3 0f 10 7e 04	 movss	 xmm7, DWORD PTR [esi+4]
  00335	f3 0f 59 6d d8	 mulss	 xmm5, DWORD PTR _v3Line0$24[ebp]
  0033a	f3 0f 11 a5 c4
	fe ff ff	 movss	 DWORD PTR tv3548[ebp], xmm4
  00342	f3 0f 59 75 dc	 mulss	 xmm6, DWORD PTR _v3Line0$24[ebp+4]
  00347	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 85   : 		return ppci;

  0034a	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR _ppci$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00350	f3 0f 59 45 e0	 mulss	 xmm0, DWORD PTR _v3Line0$24[ebp+8]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00355	f3 0f 59 65 dc	 mulss	 xmm4, DWORD PTR _v3Line0$24[ebp+4]
  0035a	f3 0f 5c e8	 subss	 xmm5, xmm0
  0035e	0f 28 c7	 movaps	 xmm0, xmm7
  00361	f3 0f 59 45 d8	 mulss	 xmm0, DWORD PTR _v3Line0$24[ebp]
  00366	f3 0f 59 7d e0	 mulss	 xmm7, DWORD PTR _v3Line0$24[ebp+8]
  0036b	f3 0f 5c e0	 subss	 xmm4, xmm0
  0036f	f3 0f 5c fe	 subss	 xmm7, xmm6

; 1940 : 
; 1941 :     *pOut = v;

  00373	f3 0f 11 7f 48	 movss	 DWORD PTR [edi+72], xmm7
  00378	f3 0f 11 6f 4c	 movss	 DWORD PTR [edi+76], xmm5
  0037d	f3 0f 11 67 50	 movss	 DWORD PTR [edi+80], xmm4

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00382	f3 0f 10 bd c4
	fe ff ff	 movss	 xmm7, DWORD PTR tv3548[ebp]
  0038a	f3 0f 10 77 14	 movss	 xmm6, DWORD PTR [edi+20]
  0038f	0f 28 ef	 movaps	 xmm5, xmm7
  00392	f3 0f 59 6d d4	 mulss	 xmm5, DWORD PTR _v3Line1$23[ebp+8]
  00397	0f 28 c6	 movaps	 xmm0, xmm6
  0039a	f3 0f 59 45 cc	 mulss	 xmm0, DWORD PTR _v3Line1$23[ebp]
  0039f	f3 0f 10 67 10	 movss	 xmm4, DWORD PTR [edi+16]
  003a4	f3 0f 59 75 d0	 mulss	 xmm6, DWORD PTR _v3Line1$23[ebp+4]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  003a9	0f 28 d4	 movaps	 xmm2, xmm4
  003ac	f3 0f 59 65 d4	 mulss	 xmm4, DWORD PTR _v3Line1$23[ebp+8]
  003b1	f3 0f 5c e8	 subss	 xmm5, xmm0
  003b5	f3 0f 59 55 cc	 mulss	 xmm2, DWORD PTR _v3Line1$23[ebp]
  003ba	0f 28 c7	 movaps	 xmm0, xmm7
  003bd	f3 0f 59 45 d0	 mulss	 xmm0, DWORD PTR _v3Line1$23[ebp+4]
  003c2	f3 0f 5c f4	 subss	 xmm6, xmm4
  003c6	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1940 : 
; 1941 :     *pOut = v;

  003ca	f3 0f 11 77 54	 movss	 DWORD PTR [edi+84], xmm6
  003cf	f3 0f 11 6f 58	 movss	 DWORD PTR [edi+88], xmm5

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  003d4	0f 28 ef	 movaps	 xmm5, xmm7

; 1941 :     *pOut = v;

  003d7	f3 0f 11 57 5c	 movss	 DWORD PTR [edi+92], xmm2

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  003dc	f3 0f 10 77 14	 movss	 xmm6, DWORD PTR [edi+20]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  003e1	f3 0f 59 6d f8	 mulss	 xmm5, DWORD PTR _v3Line2$28[ebp+8]
  003e6	0f 28 c6	 movaps	 xmm0, xmm6
  003e9	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _v3Line2$28[ebp]
  003ee	f3 0f 10 67 10	 movss	 xmm4, DWORD PTR [edi+16]
  003f3	f3 0f 59 75 f4	 mulss	 xmm6, DWORD PTR _v3Line2$28[ebp+4]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  003f8	0f 28 d4	 movaps	 xmm2, xmm4
  003fb	f3 0f 59 65 f8	 mulss	 xmm4, DWORD PTR _v3Line2$28[ebp+8]
  00400	f3 0f 5c e8	 subss	 xmm5, xmm0
  00404	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _v3Line2$28[ebp]
  00409	0f 28 c7	 movaps	 xmm0, xmm7
  0040c	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _v3Line2$28[ebp+4]
  00411	f3 0f 5c f4	 subss	 xmm6, xmm4
  00415	f3 0f 5c d0	 subss	 xmm2, xmm0

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00419	0f 28 c7	 movaps	 xmm0, xmm7

; 1941 :     *pOut = v;

  0041c	f3 0f 11 77 60	 movss	 DWORD PTR [edi+96], xmm6
  00421	f3 0f 11 6f 64	 movss	 DWORD PTR [edi+100], xmm5
  00426	f3 0f 11 57 68	 movss	 DWORD PTR [edi+104], xmm2

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  0042b	f3 0f 10 67 14	 movss	 xmm4, DWORD PTR [edi+20]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00430	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _v3Line3$26[ebp+8]
  00435	0f 28 ec	 movaps	 xmm5, xmm4
  00438	f3 0f 59 6d e4	 mulss	 xmm5, DWORD PTR _v3Line3$26[ebp]
  0043d	f3 0f 10 77 10	 movss	 xmm6, DWORD PTR [edi+16]
  00442	f3 0f 59 65 e8	 mulss	 xmm4, DWORD PTR _v3Line3$26[ebp+4]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00447	f3 0f 59 7d e8	 mulss	 xmm7, DWORD PTR _v3Line3$26[ebp+4]
  0044c	f3 0f 5c e8	 subss	 xmm5, xmm0
  00450	0f 28 c6	 movaps	 xmm0, xmm6
  00453	f3 0f 59 75 ec	 mulss	 xmm6, DWORD PTR _v3Line3$26[ebp+8]
  00458	f3 0f 59 45 e4	 mulss	 xmm0, DWORD PTR _v3Line3$26[ebp]
  0045d	f3 0f 5c f4	 subss	 xmm6, xmm4
  00461	f3 0f 5c f8	 subss	 xmm7, xmm0

; 1940 : 
; 1941 :     *pOut = v;

  00465	f3 0f 11 77 6c	 movss	 DWORD PTR [edi+108], xmm6
  0046a	f3 0f 11 6f 70	 movss	 DWORD PTR [edi+112], xmm5
  0046f	f3 0f 11 7f 74	 movss	 DWORD PTR [edi+116], xmm7
  00474	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 209  : }

  00475	5e		 pop	 esi
  00476	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00479	33 cd		 xor	 ecx, ebp
  0047b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00480	8b e5		 mov	 esp, ebp
  00482	5d		 pop	 ebp
  00483	c3		 ret	 0
$LN9@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00484	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20
  0048a	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00490	75 6f		 jne	 SHORT $LN68@BuildColli

; 65   : 			T* pkNewData = new T;

  00492	6a 1c		 push	 28			; 0000001cH
  00494	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00499	83 c4 04	 add	 esp, 4
  0049c	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
  004a2	85 c0		 test	 eax, eax
  004a4	74 08		 je	 SHORT $LN70@BuildColli
  004a6	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CAABBCollisionInstance@@6B@
  004ac	eb 08		 jmp	 SHORT $LN71@BuildColli
$LN70@BuildColli:
  004ae	33 c0		 xor	 eax, eax
  004b0	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
$LN71@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  004b6	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  004bc	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pkNewData$6[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  004c2	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+12
  004c8	74 11		 je	 SHORT $LN78@BuildColli

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  004ca	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  004cc	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  004d3	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+32

; 68   : 			return pkNewData;

  004d9	eb 37		 jmp	 SHORT $LN67@BuildColli
$LN78@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  004db	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$6[ebp]
  004e1	50		 push	 eax
  004e2	51		 push	 ecx
  004e3	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+4
  004e8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCAABBCollisionInstance@@@?$vector@PAVCAABBCollisionInstance@@V?$allocator@PAVCAABBCollisionInstance@@@std@@@std@@AAEPAPAVCAABBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CAABBCollisionInstance *,std::allocator<CAABBCollisionInstance *> >::_Emplace_reallocate<CAABBCollisionInstance * const &>
  004ed	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pkNewData$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  004f3	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+32
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  004f9	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 68   : 			return pkNewData;

  004ff	eb 11		 jmp	 SHORT $LN67@BuildColli
$LN68@BuildColli:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  00501	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00504	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T10[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  0050a	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  0050d	a3 14 00 00 00	 mov	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20, eax
$LN67@BuildColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 96   : 		D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  00512	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00517	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$17[ebp]
  0051d	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00520	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00526	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  0052b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00531	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00536	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053b	50		 push	 eax
  0053c	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 97   : 		D3DXMATRIX matTransform = *pMat;

  00541	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]

; 98   : 
; 99   : 		D3DXVECTOR3 v3Pos;
; 100  : 		v3Pos.x = matTranslationLocal._41;
; 101  : 		v3Pos.y = matTranslationLocal._42;
; 102  : 		v3Pos.z = matTranslationLocal._43;
; 103  : 
; 104  : 		TAABBData & AABBData = paci->GetAttribute();

  00544	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp]
  0054a	0f 11 45 8c	 movups	 XMMWORD PTR _matTransform$21[ebp], xmm0
  0054e	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00552	0f 11 45 9c	 movups	 XMMWORD PTR _matTransform$21[ebp+16], xmm0
  00556	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  0055a	0f 11 45 ac	 movups	 XMMWORD PTR _matTransform$21[ebp+32], xmm0
  0055e	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  00562	0f 11 45 bc	 movups	 XMMWORD PTR _matTransform$21[ebp+48], xmm0
  00566	f3 0f 10 85 7c
	ff ff ff	 movss	 xmm0, DWORD PTR _matTranslationLocal$17[ebp+48]
  0056e	f3 0f 11 85 c4
	fe ff ff	 movss	 DWORD PTR tv3565[ebp], xmm0
  00576	f3 0f 10 45 80	 movss	 xmm0, DWORD PTR _matTranslationLocal$17[ebp+52]
  0057b	f3 0f 11 85 c0
	fe ff ff	 movss	 DWORD PTR tv3566[ebp], xmm0
  00583	f3 0f 10 45 84	 movss	 xmm0, DWORD PTR _matTranslationLocal$17[ebp+56]
  00588	f3 0f 11 85 bc
	fe ff ff	 movss	 DWORD PTR tv3567[ebp], xmm0
  00590	e8 00 00 00 00	 call	 ?GetAttribute@CAABBCollisionInstance@@QAEAAUSAABBData@@XZ ; CAABBCollisionInstance::GetAttribute

; 105  : 		AABBData.v3Min.x = v3Pos.x - c_pCollisionData->fDimensions[0];

  00595	f3 0f 10 8d c4
	fe ff ff	 movss	 xmm1, DWORD PTR tv3565[ebp]

; 106  : 		AABBData.v3Min.y = v3Pos.y - c_pCollisionData->fDimensions[1];
; 107  : 		AABBData.v3Min.z = v3Pos.z - c_pCollisionData->fDimensions[2];
; 108  : 		AABBData.v3Max.x = v3Pos.x + c_pCollisionData->fDimensions[0];

  0059d	8d 70 0c	 lea	 esi, DWORD PTR [eax+12]
  005a0	f3 0f 10 95 c0
	fe ff ff	 movss	 xmm2, DWORD PTR tv3566[ebp]

; 109  : 		AABBData.v3Max.y = v3Pos.y + c_pCollisionData->fDimensions[1];
; 110  : 		AABBData.v3Max.z = v3Pos.z + c_pCollisionData->fDimensions[2];
; 111  : 
; 112  : 		D3DXVec3TransformCoord(&AABBData.v3Min, &AABBData.v3Min, &matTransform);

  005a8	8d 4d 8c	 lea	 ecx, DWORD PTR _matTransform$21[ebp]
  005ab	f3 0f 10 9d bc
	fe ff ff	 movss	 xmm3, DWORD PTR tv3567[ebp]
  005b3	0f 28 c1	 movaps	 xmm0, xmm1
  005b6	f3 0f 5c 47 34	 subss	 xmm0, DWORD PTR [edi+52]
  005bb	51		 push	 ecx
  005bc	50		 push	 eax
  005bd	50		 push	 eax
  005be	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  005c2	0f 28 c2	 movaps	 xmm0, xmm2
  005c5	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  005ca	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  005cf	0f 28 c3	 movaps	 xmm0, xmm3
  005d2	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]
  005d7	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  005dc	f3 0f 58 4f 34	 addss	 xmm1, DWORD PTR [edi+52]
  005e1	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  005e5	f3 0f 58 57 38	 addss	 xmm2, DWORD PTR [edi+56]
  005ea	f3 0f 11 50 10	 movss	 DWORD PTR [eax+16], xmm2
  005ef	f3 0f 58 5f 3c	 addss	 xmm3, DWORD PTR [edi+60]
  005f4	f3 0f 11 58 14	 movss	 DWORD PTR [eax+20], xmm3
  005f9	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 113  : 		D3DXVec3TransformCoord(&AABBData.v3Max, &AABBData.v3Max, &matTransform);

  005fe	8d 45 8c	 lea	 eax, DWORD PTR _matTransform$21[ebp]
  00601	50		 push	 eax
  00602	56		 push	 esi
  00603	56		 push	 esi
  00604	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 114  : 
; 115  : 		return paci;

  00609	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  0060f	5f		 pop	 edi

; 209  : }

  00610	5e		 pop	 esi
  00611	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00614	33 cd		 xor	 ecx, ebp
  00616	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0061b	8b e5		 mov	 esp, ebp
  0061d	5d		 pop	 ebp
  0061e	c3		 ret	 0
$LN10@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  0061f	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20
  00625	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  0062b	75 6f		 jne	 SHORT $LN91@BuildColli

; 65   : 			T* pkNewData = new T;

  0062d	6a 5c		 push	 92			; 0000005cH
  0062f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00634	83 c4 04	 add	 esp, 4
  00637	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  0063d	85 c0		 test	 eax, eax
  0063f	74 08		 je	 SHORT $LN93@BuildColli
  00641	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7COBBCollisionInstance@@6B@
  00647	eb 08		 jmp	 SHORT $LN94@BuildColli
$LN93@BuildColli:
  00649	33 c0		 xor	 eax, eax
  0064b	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
$LN94@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00651	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00657	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pkNewData$5[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0065d	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+12
  00663	74 11		 je	 SHORT $LN101@BuildColli

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00665	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00667	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  0066e	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+32

; 68   : 			return pkNewData;

  00674	eb 37		 jmp	 SHORT $LN90@BuildColli
$LN101@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00676	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$5[ebp]
  0067c	50		 push	 eax
  0067d	51		 push	 ecx
  0067e	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+4
  00683	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCOBBCollisionInstance@@@?$vector@PAVCOBBCollisionInstance@@V?$allocator@PAVCOBBCollisionInstance@@@std@@@std@@AAEPAPAVCOBBCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<COBBCollisionInstance *,std::allocator<COBBCollisionInstance *> >::_Emplace_reallocate<COBBCollisionInstance * const &>
  00688	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pkNewData$5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  0068e	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+32
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00694	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 68   : 			return pkNewData;

  0069a	eb 11		 jmp	 SHORT $LN90@BuildColli
$LN91@BuildColli:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  0069c	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0069f	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  006a5	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  006a8	a3 14 00 00 00	 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, eax
$LN90@BuildColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 123  : 		D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  006ad	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  006b2	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _matTranslationLocal$11[ebp]
  006b8	83 ec 0c	 sub	 esp, 12			; 0000000cH
  006bb	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  006c1	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  006c6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  006cc	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  006d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d6	50		 push	 eax
  006d7	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 124  : 		D3DXMATRIX matRotation;
; 125  : 		D3DXMatrixRotationQuaternion(&matRotation, &c_pCollisionData->quatRotation);

  006dc	8d 47 40	 lea	 eax, DWORD PTR [edi+64]
  006df	50		 push	 eax
  006e0	8d 85 0c ff ff
	ff		 lea	 eax, DWORD PTR _matRotation$13[ebp]
  006e6	50		 push	 eax
  006e7	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 126  : 
; 127  : 		D3DXMATRIX matTranslationWorld;
; 128  : 		D3DXMatrixIdentity(&matTranslationWorld);
; 129  : 		matTranslationWorld._41 = pMat->_41;
; 130  : 		matTranslationWorld._42 = pMat->_42;
; 131  : 		matTranslationWorld._43 = pMat->_43;
; 132  : 		matTranslationWorld._44 = pMat->_44;
; 133  : 
; 134  : 		D3DXVECTOR3 v3Min, v3Max;
; 135  : 		v3Min.x = c_pCollisionData->v3Position.x - c_pCollisionData->fDimensions[0];

  006ec	f3 0f 10 6f 34	 movss	 xmm5, DWORD PTR [edi+52]

; 136  : 		v3Min.y = c_pCollisionData->v3Position.y - c_pCollisionData->fDimensions[1];
; 137  : 		v3Min.z = c_pCollisionData->v3Position.z - c_pCollisionData->fDimensions[2];
; 138  : 		v3Max.x = c_pCollisionData->v3Position.x + c_pCollisionData->fDimensions[0];
; 139  : 		v3Max.y = c_pCollisionData->v3Position.y + c_pCollisionData->fDimensions[1];
; 140  : 		v3Max.z = c_pCollisionData->v3Position.z + c_pCollisionData->fDimensions[2];
; 141  : 
; 142  : 		D3DXVec3TransformCoord(&v3Min, &v3Min, pMat);

  006f1	8d 45 f0	 lea	 eax, DWORD PTR _v3Min$27[ebp]
  006f4	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  006f9	f3 0f 10 5f 38	 movss	 xmm3, DWORD PTR [edi+56]
  006fe	f3 0f 5c c5	 subss	 xmm0, xmm5
  00702	f3 0f 10 4f 3c	 movss	 xmm1, DWORD PTR [edi+60]
  00707	f3 0f 58 6f 28	 addss	 xmm5, DWORD PTR [edi+40]
  0070c	56		 push	 esi
  0070d	50		 push	 eax
  0070e	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Min$27[ebp], xmm0
  00713	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00718	f3 0f 5c c3	 subss	 xmm0, xmm3
  0071c	f3 0f 11 6d e4	 movss	 DWORD PTR _v3Max$25[ebp], xmm5
  00721	f3 0f 58 5f 2c	 addss	 xmm3, DWORD PTR [edi+44]
  00726	50		 push	 eax
  00727	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Min$27[ebp+4], xmm0
  0072c	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00731	f3 0f 5c c1	 subss	 xmm0, xmm1
  00735	f3 0f 11 5d e8	 movss	 DWORD PTR _v3Max$25[ebp+4], xmm3
  0073a	f3 0f 58 4f 30	 addss	 xmm1, DWORD PTR [edi+48]
  0073f	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Min$27[ebp+8], xmm0
  00744	f3 0f 11 4d ec	 movss	 DWORD PTR _v3Max$25[ebp+8], xmm1
  00749	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12

; 143  : 		D3DXVec3TransformCoord(&v3Max, &v3Max, pMat);

  0074e	56		 push	 esi
  0074f	8d 45 e4	 lea	 eax, DWORD PTR _v3Max$25[ebp]
  00752	50		 push	 eax
  00753	50		 push	 eax
  00754	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00759	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _v3Max$25[ebp]
  0075e	f3 0f 58 4d f0	 addss	 xmm1, DWORD PTR _v3Min$27[ebp]

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00763	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 146  : 		TOBBData & OBBData = poci->GetAttribute();

  0076b	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00771	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00775	f3 0f 11 8d bc
	fe ff ff	 movss	 DWORD PTR tv3601[ebp], xmm1

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0077d	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _v3Max$25[ebp+4]
  00782	f3 0f 58 4d f4	 addss	 xmm1, DWORD PTR _v3Min$27[ebp+4]

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00787	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0078b	f3 0f 11 8d c4
	fe ff ff	 movss	 DWORD PTR tv3602[ebp], xmm1

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00793	f3 0f 10 4d ec	 movss	 xmm1, DWORD PTR _v3Max$25[ebp+8]
  00798	f3 0f 58 4d f8	 addss	 xmm1, DWORD PTR _v3Min$27[ebp+8]

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0079d	f3 0f 59 c8	 mulss	 xmm1, xmm0
  007a1	f3 0f 11 8d c0
	fe ff ff	 movss	 DWORD PTR tv3603[ebp], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 146  : 		TOBBData & OBBData = poci->GetAttribute();

  007a9	e8 00 00 00 00	 call	 ?GetAttribute@COBBCollisionInstance@@QAEAAUSOBBData@@XZ ; COBBCollisionInstance::GetAttribute

; 147  : 		OBBData.v3Min.x = v3Position.x - c_pCollisionData->fDimensions[0];

  007ae	f3 0f 10 9d bc
	fe ff ff	 movss	 xmm3, DWORD PTR tv3601[ebp]

; 148  : 		OBBData.v3Min.y = v3Position.y - c_pCollisionData->fDimensions[1];

  007b6	f3 0f 10 95 c4
	fe ff ff	 movss	 xmm2, DWORD PTR tv3602[ebp]
  007be	0f 28 c3	 movaps	 xmm0, xmm3
  007c1	f3 0f 5c 47 34	 subss	 xmm0, DWORD PTR [edi+52]

; 149  : 		OBBData.v3Min.z = v3Position.z - c_pCollisionData->fDimensions[2];

  007c6	f3 0f 10 8d c0
	fe ff ff	 movss	 xmm1, DWORD PTR tv3603[ebp]
  007ce	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  007d2	0f 28 c2	 movaps	 xmm0, xmm2
  007d5	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
  007da	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  007df	0f 28 c1	 movaps	 xmm0, xmm1
  007e2	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]
  007e7	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 150  : 		OBBData.v3Max.x = v3Position.x + c_pCollisionData->fDimensions[0];

  007ec	f3 0f 58 5f 34	 addss	 xmm3, DWORD PTR [edi+52]
  007f1	f3 0f 11 58 0c	 movss	 DWORD PTR [eax+12], xmm3

; 151  : 		OBBData.v3Max.y = v3Position.y + c_pCollisionData->fDimensions[1];

  007f6	f3 0f 58 57 38	 addss	 xmm2, DWORD PTR [edi+56]
  007fb	f3 0f 11 50 10	 movss	 DWORD PTR [eax+16], xmm2

; 152  : 		OBBData.v3Max.z = v3Position.z + c_pCollisionData->fDimensions[2];

  00800	f3 0f 58 4f 3c	 addss	 xmm1, DWORD PTR [edi+60]
  00805	f3 0f 11 48 14	 movss	 DWORD PTR [eax+20], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0080a	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  00811	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  00818	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  0081f	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0
  00826	c7 40 3c 00 00
	00 00		 mov	 DWORD PTR [eax+60], 0
  0082d	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0
  00834	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [eax+52], 0
  0083b	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [eax+48], 0
  00842	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0
  00849	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0
  00850	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [eax+32], 0
  00857	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0085e	c7 40 54 00 00
	80 3f		 mov	 DWORD PTR [eax+84], 1065353216 ; 3f800000H
  00865	c7 40 40 00 00
	80 3f		 mov	 DWORD PTR [eax+64], 1065353216 ; 3f800000H
  0086c	c7 40 2c 00 00
	80 3f		 mov	 DWORD PTR [eax+44], 1065353216 ; 3f800000H
  00873	c7 40 18 00 00
	80 3f		 mov	 DWORD PTR [eax+24], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 159  : 		OBBData.matRot = *pMat;

  0087a	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0087d	5f		 pop	 edi
  0087e	0f 11 40 18	 movups	 XMMWORD PTR [eax+24], xmm0
  00882	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00886	0f 11 40 28	 movups	 XMMWORD PTR [eax+40], xmm0
  0088a	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  0088e	0f 11 40 38	 movups	 XMMWORD PTR [eax+56], xmm0
  00892	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]

; 209  : }

  00896	5e		 pop	 esi
  00897	0f 11 40 48	 movups	 XMMWORD PTR [eax+72], xmm0
  0089b	c7 40 48 00 00
	00 00		 mov	 DWORD PTR [eax+72], 0
  008a2	c7 40 4c 00 00
	00 00		 mov	 DWORD PTR [eax+76], 0
  008a9	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0
  008b0	c7 40 54 00 00
	80 3f		 mov	 DWORD PTR [eax+84], 1065353216 ; 3f800000H
  008b7	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  008bd	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  008c0	33 cd		 xor	 ecx, ebp
  008c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  008c7	8b e5		 mov	 esp, ebp
  008c9	5d		 pop	 ebp
  008ca	c3		 ret	 0
$LN11@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  008cb	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20
  008d1	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  008d7	75 6f		 jne	 SHORT $LN126@BuildColli

; 65   : 			T* pkNewData = new T;

  008d9	6a 14		 push	 20			; 00000014H
  008db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  008e0	83 c4 04	 add	 esp, 4
  008e3	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
  008e9	85 c0		 test	 eax, eax
  008eb	74 08		 je	 SHORT $LN128@BuildColli
  008ed	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CSphereCollisionInstance@@6B@
  008f3	eb 08		 jmp	 SHORT $LN129@BuildColli
$LN128@BuildColli:
  008f5	33 c0		 xor	 eax, eax
  008f7	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
$LN129@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  008fd	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00903	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pkNewData$4[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00909	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+12
  0090f	74 11		 je	 SHORT $LN136@BuildColli

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00911	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00913	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  0091a	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+32

; 68   : 			return pkNewData;

  00920	eb 37		 jmp	 SHORT $LN125@BuildColli
$LN136@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00922	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$4[ebp]
  00928	50		 push	 eax
  00929	51		 push	 ecx
  0092a	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+4
  0092f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCSphereCollisionInstance@@@?$vector@PAVCSphereCollisionInstance@@V?$allocator@PAVCSphereCollisionInstance@@@std@@@std@@AAEPAPAVCSphereCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CSphereCollisionInstance *,std::allocator<CSphereCollisionInstance *> >::_Emplace_reallocate<CSphereCollisionInstance * const &>
  00934	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pkNewData$4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  0093a	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+32
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00940	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 68   : 			return pkNewData;

  00946	eb 11		 jmp	 SHORT $LN125@BuildColli
$LN126@BuildColli:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  00948	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  0094b	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  00951	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00954	a3 14 00 00 00	 mov	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20, eax
$LN125@BuildColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 176  : 		D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  00959	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  0095e	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$20[ebp]
  00961	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00964	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0096a	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  0096f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00975	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  0097a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0097f	50		 push	 eax
  00980	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00985	56		 push	 esi
  00986	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$20[ebp]
  00989	50		 push	 eax
  0098a	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  00990	50		 push	 eax
  00991	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 177  : 		matTranslationLocal = matTranslationLocal * *pMat;

  00996	0f 10 85 4c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp]

; 178  : 
; 179  : 		TSphereData & SphereData = psci->GetAttribute();

  0099d	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  009a3	0f 11 45 8c	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp], xmm0
  009a7	0f 10 85 5c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+16]
  009ae	0f 11 45 9c	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp+16], xmm0
  009b2	0f 10 85 6c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+32]
  009b9	0f 11 45 ac	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp+32], xmm0
  009bd	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+48]
  009c4	0f 11 45 bc	 movups	 XMMWORD PTR _matTranslationLocal$20[ebp+48], xmm0
  009c8	e8 00 00 00 00	 call	 ?GetAttribute@CSphereCollisionInstance@@QAEAAUSSphereData@@XZ ; CSphereCollisionInstance::GetAttribute

; 180  : 		SphereData.v3Position.x = matTranslationLocal._41;

  009cd	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T16[ebp+48]
  009d4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 181  : 		SphereData.v3Position.y = matTranslationLocal._42;

  009d8	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _matTranslationLocal$20[ebp+52]
  009dd	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 182  : 		SphereData.v3Position.z = matTranslationLocal._43;

  009e2	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _matTranslationLocal$20[ebp+56]
  009e7	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 183  : 		SphereData.fRadius = c_pCollisionData->fDimensions[0];

  009ec	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  009ef	5f		 pop	 edi
  009f0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 184  : 
; 185  : 		return psci;

  009f3	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]

; 209  : }

  009f9	5e		 pop	 esi
  009fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  009fd	33 cd		 xor	 ecx, ebp
  009ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a04	8b e5		 mov	 esp, ebp
  00a06	5d		 pop	 ebp
  00a07	c3		 ret	 0
$LN12@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00a08	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20
  00a0e	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  00a14	75 6f		 jne	 SHORT $LN151@BuildColli

; 65   : 			T* pkNewData = new T;

  00a16	6a 18		 push	 24			; 00000018H
  00a18	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00a1d	83 c4 04	 add	 esp, 4
  00a20	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00a26	85 c0		 test	 eax, eax
  00a28	74 08		 je	 SHORT $LN153@BuildColli
  00a2a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCylinderCollisionInstance@@6B@
  00a30	eb 08		 jmp	 SHORT $LN154@BuildColli
$LN153@BuildColli:
  00a32	33 c0		 xor	 eax, eax
  00a34	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
$LN154@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00a3a	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 65   : 			T* pkNewData = new T;

  00a40	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _pkNewData$3[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00a46	3b 0d 0c 00 00
	00		 cmp	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+12
  00a4c	74 11		 je	 SHORT $LN161@BuildColli

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  00a4e	89 01		 mov	 DWORD PTR [ecx], eax

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00a50	83 05 08 00 00
	00 04		 add	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00a57	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+32

; 68   : 			return pkNewData;

  00a5d	eb 37		 jmp	 SHORT $LN150@BuildColli
$LN161@BuildColli:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a5f	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR _pkNewData$3[ebp]
  00a65	50		 push	 eax
  00a66	51		 push	 ecx
  00a67	b9 04 00 00 00	 mov	 ecx, OFFSET ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+4
  00a6c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCCylinderCollisionInstance@@@?$vector@PAVCCylinderCollisionInstance@@V?$allocator@PAVCCylinderCollisionInstance@@@std@@@std@@AAEPAPAVCCylinderCollisionInstance@@QAPAV2@ABQAV2@@Z ; std::vector<CCylinderCollisionInstance *,std::allocator<CCylinderCollisionInstance *> >::_Emplace_reallocate<CCylinderCollisionInstance * const &>
  00a71	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _pkNewData$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00a77	ff 05 20 00 00
	00		 inc	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+32
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00a7d	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 68   : 			return pkNewData;

  00a83	eb 11		 jmp	 SHORT $LN150@BuildColli
$LN151@BuildColli:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  00a85	8b 41 fc	 mov	 eax, DWORD PTR [ecx-4]
  00a88	89 85 c8 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1776 :         --_Mylast;

  00a8e	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00a91	a3 14 00 00 00	 mov	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20, eax
$LN150@BuildColli:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 193  : 		D3DXMatrixTranslation(&matTranslationLocal, c_pCollisionData->v3Position.x, c_pCollisionData->v3Position.y, c_pCollisionData->v3Position.z);

  00a96	f3 0f 10 47 30	 movss	 xmm0, DWORD PTR [edi+48]
  00a9b	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$19[ebp]
  00a9e	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00aa1	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00aa7	f3 0f 10 47 2c	 movss	 xmm0, DWORD PTR [edi+44]
  00aac	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00ab2	f3 0f 10 47 28	 movss	 xmm0, DWORD PTR [edi+40]
  00ab7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abc	50		 push	 eax
  00abd	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  00ac2	56		 push	 esi
  00ac3	8d 45 8c	 lea	 eax, DWORD PTR _matTranslationLocal$19[ebp]
  00ac6	50		 push	 eax
  00ac7	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00acd	50		 push	 eax
  00ace	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 194  : 		matTranslationLocal = matTranslationLocal * *pMat;

  00ad3	0f 10 85 4c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T15[ebp]

; 195  : 
; 196  : 		TCylinderData & CylinderData = pcci->GetAttribute();

  00ada	8b 8d c8 fe ff
	ff		 mov	 ecx, DWORD PTR $T7[ebp]
  00ae0	0f 11 45 8c	 movups	 XMMWORD PTR _matTranslationLocal$19[ebp], xmm0
  00ae4	0f 10 85 5c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T15[ebp+16]
  00aeb	0f 11 45 9c	 movups	 XMMWORD PTR _matTranslationLocal$19[ebp+16], xmm0
  00aef	0f 10 85 6c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T15[ebp+32]
  00af6	0f 11 45 ac	 movups	 XMMWORD PTR _matTranslationLocal$19[ebp+32], xmm0
  00afa	0f 10 85 7c ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T15[ebp+48]
  00b01	0f 11 45 bc	 movups	 XMMWORD PTR _matTranslationLocal$19[ebp+48], xmm0
  00b05	e8 00 00 00 00	 call	 ?GetAttribute@CCylinderCollisionInstance@@QAEAAUSCylinderData@@XZ ; CCylinderCollisionInstance::GetAttribute

; 197  : 		CylinderData.fRadius = c_pCollisionData->fDimensions[0];

  00b0a	8b 4f 34	 mov	 ecx, DWORD PTR [edi+52]
  00b0d	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 198  : 		CylinderData.fHeight = c_pCollisionData->fDimensions[1];

  00b10	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00b13	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 199  : 		CylinderData.v3Position.x = matTranslationLocal._41;

  00b16	f3 0f 10 45 bc	 movss	 xmm0, DWORD PTR _matTranslationLocal$19[ebp+48]
  00b1b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 200  : 		CylinderData.v3Position.y = matTranslationLocal._42;

  00b1f	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _matTranslationLocal$19[ebp+52]
  00b24	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0

; 201  : 		CylinderData.v3Position.z = matTranslationLocal._43 /*+ CylinderData.fHeight/2.0f*/;

  00b29	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _matTranslationLocal$19[ebp+56]
  00b2e	5f		 pop	 edi
  00b2f	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 202  : 
; 203  : 		return pcci;

  00b34	8b 85 c8 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]

; 209  : }

  00b3a	5e		 pop	 esi
  00b3b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b3e	33 cd		 xor	 ecx, ebp
  00b40	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b45	8b e5		 mov	 esp, ebp
  00b47	5d		 pop	 ebp
  00b48	c3		 ret	 0
$LN2@BuildColli:
  00b49	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b4c	33 c0		 xor	 eax, eax
  00b4e	5f		 pop	 edi
  00b4f	33 cd		 xor	 ecx, ebp
  00b51	5e		 pop	 esi
  00b52	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b57	8b e5		 mov	 esp, ebp
  00b59	5d		 pop	 ebp
  00b5a	c3		 ret	 0
  00b5b	90		 npad	 1
$LN179@BuildColli:
  00b5c	00 00 00 00	 DD	 $LN7@BuildColli
  00b60	00 00 00 00	 DD	 $LN2@BuildColli
  00b64	00 00 00 00	 DD	 $LN11@BuildColli
  00b68	00 00 00 00	 DD	 $LN12@BuildColli
  00b6c	00 00 00 00	 DD	 $LN9@BuildColli
  00b70	00 00 00 00	 DD	 $LN10@BuildColli
?BuildCollisionInstance@CBaseCollisionInstance@@SAPAV1@PBVCStaticCollisionData@@PBUD3DXMATRIX@@@Z ENDP ; CBaseCollisionInstance::BuildCollisionInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?Destroy@CBaseCollisionInstance@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CBaseCollisionInstance@@QAEXXZ PROC		; CBaseCollisionInstance::Destroy, COMDAT
; _this$ = ecx

; 213  : 	OnDestroy();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	ff 60 10	 jmp	 DWORD PTR [eax+16]
?Destroy@CBaseCollisionInstance@@QAEXXZ ENDP		; CBaseCollisionInstance::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp
;	COMDAT ?DestroyCollisionInstanceSystem@@YAXXZ
_TEXT	SEGMENT
?DestroyCollisionInstanceSystem@@YAXXZ PROC		; DestroyCollisionInstanceSystem, COMDAT

; 25   : {

  00000	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00001	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 25   : {

  00007	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00008	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0000e	3b f7		 cmp	 esi, edi
  00010	74 21		 je	 SHORT $LN168@DestroyCol
$LL20@DestroyCol:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00012	6a 14		 push	 20			; 00000014H
  00014	ff 36		 push	 DWORD PTR [esi]
  00016	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001b	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  0001e	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00021	3b f7		 cmp	 esi, edi
  00023	75 ed		 jne	 SHORT $LL20@DestroyCol
  00025	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8
  0002b	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00031	3b f7		 cmp	 esi, edi
$LN168@DestroyCol:
  00033	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20
  00039	0f 45 fe	 cmovne	 edi, esi
  0003c	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00042	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00048	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+16
  0004f	89 3d 08 00 00
	00		 mov	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+8, edi

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00055	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0005b	89 0d 14 00 00
	00		 mov	 DWORD PTR ?gs_sci@@3V?$CDynamicPool@VCSphereCollisionInstance@@@@A+20, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00061	3b f7		 cmp	 esi, edi
  00063	74 21		 je	 SHORT $LN169@DestroyCol
$LL49@DestroyCol:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00065	6a 18		 push	 24			; 00000018H
  00067	ff 36		 push	 DWORD PTR [esi]
  00069	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0006e	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00071	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00074	3b f7		 cmp	 esi, edi
  00076	75 ed		 jne	 SHORT $LL49@DestroyCol
  00078	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8
  0007e	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00084	3b f7		 cmp	 esi, edi
$LN169@DestroyCol:
  00086	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20
  0008c	0f 45 fe	 cmovne	 edi, esi
  0008f	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00095	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0009b	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+16
  000a2	89 3d 08 00 00
	00		 mov	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+8, edi

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000a8	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000ae	89 0d 14 00 00
	00		 mov	 DWORD PTR ?gs_cci@@3V?$CDynamicPool@VCCylinderCollisionInstance@@@@A+20, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  000b4	3b f7		 cmp	 esi, edi
  000b6	74 29		 je	 SHORT $LN170@DestroyCol
  000b8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL78@DestroyCol:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  000c0	6a 7c		 push	 124			; 0000007cH
  000c2	ff 36		 push	 DWORD PTR [esi]
  000c4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  000c9	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  000cc	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  000cf	3b f7		 cmp	 esi, edi
  000d1	75 ed		 jne	 SHORT $LL78@DestroyCol
  000d3	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8
  000d9	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000df	3b f7		 cmp	 esi, edi
$LN170@DestroyCol:
  000e1	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20
  000e7	0f 45 fe	 cmovne	 edi, esi
  000ea	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  000f0	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  000f6	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+16
  000fd	89 3d 08 00 00
	00		 mov	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+8, edi

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00103	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00109	89 0d 14 00 00
	00		 mov	 DWORD PTR ?gs_pci@@3V?$CDynamicPool@VCPlaneCollisionInstance@@@@A+20, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0010f	3b f7		 cmp	 esi, edi
  00111	74 21		 je	 SHORT $LN171@DestroyCol
$LL107@DestroyCol:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00113	6a 1c		 push	 28			; 0000001cH
  00115	ff 36		 push	 DWORD PTR [esi]
  00117	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0011c	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  0011f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00122	3b f7		 cmp	 esi, edi
  00124	75 ed		 jne	 SHORT $LL107@DestroyCol
  00126	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8
  0012c	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00132	3b f7		 cmp	 esi, edi
$LN171@DestroyCol:
  00134	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20
  0013a	0f 45 fe	 cmovne	 edi, esi
  0013d	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00143	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00149	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+16
  00150	89 3d 08 00 00
	00		 mov	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+8, edi

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00156	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0015c	89 0d 14 00 00
	00		 mov	 DWORD PTR ?gs_aci@@3V?$CDynamicPool@VCAABBCollisionInstance@@@@A+20, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00162	3b f7		 cmp	 esi, edi
  00164	74 21		 je	 SHORT $LN172@DestroyCol
$LL136@DestroyCol:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00166	6a 5c		 push	 92			; 0000005cH
  00168	ff 36		 push	 DWORD PTR [esi]
  0016a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0016f	83 c6 04	 add	 esi, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00172	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00175	3b f7		 cmp	 esi, edi
  00177	75 ed		 jne	 SHORT $LL136@DestroyCol
  00179	8b 3d 08 00 00
	00		 mov	 edi, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8
  0017f	8b 35 04 00 00
	00		 mov	 esi, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00185	3b f7		 cmp	 esi, edi
$LN172@DestroyCol:
  00187	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20
  0018d	0f 45 fe	 cmovne	 edi, esi
  00190	39 0d 10 00 00
	00		 cmp	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16, ecx
  00196	89 3d 08 00 00
	00		 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+8, edi
  0019c	0f 45 0d 10 00
	00 00		 cmovne	 ecx, DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+16
  001a3	5f		 pop	 edi
  001a4	89 0d 14 00 00
	00		 mov	 DWORD PTR ?gs_oci@@3V?$CDynamicPool@VCOBBCollisionInstance@@@@A+20, ecx
  001aa	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\CollisionData.cpp

; 31   : }

  001ab	c3		 ret	 0
?DestroyCollisionInstanceSystem@@YAXXZ ENDP		; DestroyCollisionInstanceSystem
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
