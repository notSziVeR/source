; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\StateManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?m_kLightData@@3USLightData@@A			; m_kLightData
_BSS	SEGMENT
?m_kLightData@@3USLightData@@A DB 0340H DUP (?)		; m_kLightData
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??_FCStreamData@@QAEXXZ				; CStreamData::`default constructor closure'
PUBLIC	?ResetState@CStateManagerState@@QAEXXZ		; CStateManagerState::ResetState
PUBLIC	??1?$CSingleton@VCStateManager@@@@UAE@XZ	; CSingleton<CStateManager>::~CSingleton<CStateManager>
PUBLIC	??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z	; CSingleton<CStateManager>::`scalar deleting destructor'
PUBLIC	??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z	; CStateManager::CStateManager
PUBLIC	??1CStateManager@@UAE@XZ			; CStateManager::~CStateManager
PUBLIC	?SetDefaultState@CStateManager@@QAEXXZ		; CStateManager::SetDefaultState
PUBLIC	?Restore@CStateManager@@QAEXXZ			; CStateManager::Restore
PUBLIC	?BeginScene@CStateManager@@QAE_NXZ		; CStateManager::BeginScene
PUBLIC	?EndScene@CStateManager@@QAEXXZ			; CStateManager::EndScene
PUBLIC	?SaveMaterial@CStateManager@@QAEXXZ		; CStateManager::SaveMaterial
PUBLIC	?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ; CStateManager::SaveMaterial
PUBLIC	?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ; CStateManager::SetMaterial
PUBLIC	?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL9@@@Z ; CStateManager::GetMaterial
PUBLIC	?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT9@@@Z	; CStateManager::SetLight
PUBLIC	?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT9@@@Z	; CStateManager::GetLight
PUBLIC	?RestoreMaterial@CStateManager@@QAEXXZ		; CStateManager::RestoreMaterial
PUBLIC	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState
PUBLIC	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState
PUBLIC	?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
PUBLIC	?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ; CStateManager::GetRenderState
PUBLIC	?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SaveTexture
PUBLIC	?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
PUBLIC	?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture9@@@Z ; CStateManager::GetTexture
PUBLIC	?RestoreTexture@CStateManager@@QAEXK@Z		; CStateManager::RestoreTexture
PUBLIC	?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SaveTextureStageState
PUBLIC	?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ; CStateManager::RestoreTextureStageState
PUBLIC	?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
PUBLIC	?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ; CStateManager::GetTextureStageState
PUBLIC	?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SaveSamplerState
PUBLIC	?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z ; CStateManager::RestoreSamplerState
PUBLIC	?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState
PUBLIC	?GetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@PAK@Z ; CStateManager::GetSamplerState
PUBLIC	?SetBestFiltering@CStateManager@@QAEXK@Z	; CStateManager::SetBestFiltering
PUBLIC	?SaveVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SaveVertexShader
PUBLIC	?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader
PUBLIC	?GetVertexShader@CStateManager@@QAEXPAPAUIDirect3DVertexShader9@@@Z ; CStateManager::GetVertexShader
PUBLIC	?SaveVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z ; CStateManager::SaveVertexDeclaration
PUBLIC	?RestoreVertexDeclaration@CStateManager@@QAEXXZ	; CStateManager::RestoreVertexDeclaration
PUBLIC	?SetVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z ; CStateManager::SetVertexDeclaration
PUBLIC	?GetVertexDeclaration@CStateManager@@QAEXPAPAUIDirect3DVertexDeclaration9@@@Z ; CStateManager::GetVertexDeclaration
PUBLIC	?RestoreVertexShader@CStateManager@@QAEXXZ	; CStateManager::RestoreVertexShader
PUBLIC	?SavePixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ; CStateManager::SavePixelShader
PUBLIC	?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ; CStateManager::SetPixelShader
PUBLIC	?GetPixelShader@CStateManager@@QAEXPAPAUIDirect3DPixelShader9@@@Z ; CStateManager::GetPixelShader
PUBLIC	?SaveFVF@CStateManager@@QAEXK@Z			; CStateManager::SaveFVF
PUBLIC	?RestoreFVF@CStateManager@@QAEXXZ		; CStateManager::RestoreFVF
PUBLIC	?SetFVF@CStateManager@@QAEXK@Z			; CStateManager::SetFVF
PUBLIC	?GetFVF@CStateManager@@QAEXPAK@Z		; CStateManager::GetFVF
PUBLIC	?RestorePixelShader@CStateManager@@QAEXXZ	; CStateManager::RestorePixelShader
PUBLIC	?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SaveTransform
PUBLIC	?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ; CStateManager::RestoreTransform
PUBLIC	?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
PUBLIC	?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform
PUBLIC	?RestoreVertexShaderConstant@CStateManager@@QAEXII@Z ; CStateManager::RestoreVertexShaderConstant
PUBLIC	?RestorePixelShaderConstant@CStateManager@@QAEXII@Z ; CStateManager::RestorePixelShaderConstant
PUBLIC	?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
PUBLIC	?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SaveVertexShaderConstant
PUBLIC	?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SavePixelShaderConstant
PUBLIC	?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
PUBLIC	?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SaveStreamSource
PUBLIC	?RestoreStreamSource@CStateManager@@QAEXI@Z	; CStateManager::RestoreStreamSource
PUBLIC	?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource
PUBLIC	?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SaveIndices
PUBLIC	?RestoreIndices@CStateManager@@QAEXXZ		; CStateManager::RestoreIndices
PUBLIC	?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices
PUBLIC	?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ; CStateManager::DrawPrimitive
PUBLIC	?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ; CStateManager::DrawPrimitiveUP
PUBLIC	?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ; CStateManager::DrawIndexedPrimitive
PUBLIC	?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ; CStateManager::DrawIndexedPrimitiveUP
PUBLIC	?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::GetRenderState
PUBLIC	?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice9@@@Z ; CStateManager::SetDevice
PUBLIC	??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
PUBLIC	??_GCStateManager@@UAEPAXI@Z			; CStateManager::`scalar deleting destructor'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`vftable'
PUBLIC	??_7CStateManager@@6B@				; CStateManager::`vftable'
PUBLIC	??_R4CStateManager@@6B@				; CStateManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCStateManager@@@8			; CStateManager `RTTI Type Descriptor'
PUBLIC	??_R3CStateManager@@8				; CStateManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CStateManager@@8				; CStateManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CStateManager@@8			; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8	; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCStateManager@@@@@8	; CSingleton<CStateManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCStateManager@@@@8		; CSingleton<CStateManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCStateManager@@@@6B@		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
PUBLIC	__xmm@3f8000003f8000003f8000003f800000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z:PROC ; CSingleton<CStateManager>::`vector deleting destructor'
EXTRN	??_ECStateManager@@UAEPAXI@Z:PROC		; CStateManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT __xmm@3f8000003f8000003f8000003f800000
CONST	SEGMENT
__xmm@3f8000003f8000003f8000003f800000 DB 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCStateManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCStateManager@@@@6B@ DD 00H		; CSingleton<CStateManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCStateManager@@@@8 DD 00H		; CSingleton<CStateManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCStateManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCStateManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CStateManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCStateManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCStateManager@@@@@8 ; CSingleton<CStateManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CStateManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CStateManager@@8 DD FLAT:??_R0?AVCStateManager@@@8 ; CStateManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CStateManager@@8
rdata$r	SEGMENT
??_R2CStateManager@@8 DD FLAT:??_R1A@?0A@EA@CStateManager@@8 ; CStateManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCStateManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CStateManager@@8
rdata$r	SEGMENT
??_R3CStateManager@@8 DD 00H				; CStateManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCStateManager@@@8
data$rs	SEGMENT
??_R0?AVCStateManager@@@8 DD FLAT:??_7type_info@@6B@	; CStateManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCStateManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CStateManager@@6B@
rdata$r	SEGMENT
??_R4CStateManager@@6B@ DD 00H				; CStateManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCStateManager@@@8
	DD	FLAT:??_R3CStateManager@@8
rdata$r	ENDS
;	COMDAT ??_7CStateManager@@6B@
CONST	SEGMENT
??_7CStateManager@@6B@ DD FLAT:??_R4CStateManager@@6B@	; CStateManager::`vftable'
	DD	FLAT:??_ECStateManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCStateManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCStateManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCStateManager@@@@6B@ ; CSingleton<CStateManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCStateManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CStateManager@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z$1
__ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCStateManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCStateManager@@UAEPAXI@Z PROC			; CStateManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CStateManager@@UAE@XZ ; CStateManager::~CStateManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 94 63 01 00	 push	 91028			; 00016394H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCStateManager@@UAEPAXI@Z ENDP			; CStateManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ PROC ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005d	5f		 pop	 edi

; 835  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00065	cc		 int	 3
??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_d3dCaps$ = -308					; size = 304
__$ArrayPad$ = -4					; size = 4
_lpDevice$ = 8						; size = 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice9@@@Z PROC ; CStateManager::SetDevice, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR _lpDevice$[ebp]
  00018	57		 push	 edi

; 72   : 	StateManager_Assert(lpDevice);
; 73   : 	lpDevice->AddRef();

  00019	56		 push	 esi
  0001a	8b f9		 mov	 edi, ecx
  0001c	8b 06		 mov	 eax, DWORD PTR [esi]
  0001e	ff 50 04	 call	 DWORD PTR [eax+4]

; 74   : 
; 75   : 	if (m_lpD3DDev)

  00021	8b 8f 90 63 01
	00		 mov	 ecx, DWORD PTR [edi+91024]
  00027	85 c9		 test	 ecx, ecx
  00029	74 06		 je	 SHORT $LN5@SetDevice

; 76   : 	{
; 77   : 		m_lpD3DDev->Release();

  0002b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002d	51		 push	 ecx
  0002e	ff 50 08	 call	 DWORD PTR [eax+8]
$LN5@SetDevice:

; 78   : 		m_lpD3DDev = NULL;
; 79   : 	}
; 80   : 
; 81   : 	m_lpD3DDev = lpDevice;

  00031	89 b7 90 63 01
	00		 mov	 DWORD PTR [edi+91024], esi

; 82   : 
; 83   : 	D3DCAPS9 d3dCaps;
; 84   : 	m_lpD3DDev->GetDeviceCaps(&d3dCaps);

  00037	8d 8d cc fe ff
	ff		 lea	 ecx, DWORD PTR _d3dCaps$[ebp]
  0003d	8b 06		 mov	 eax, DWORD PTR [esi]
  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	ff 50 1c	 call	 DWORD PTR [eax+28]

; 85   : 
; 86   : 	if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MAGFANISOTROPIC)

  00044	8b 8d 0c ff ff
	ff		 mov	 ecx, DWORD PTR _d3dCaps$[ebp+64]

; 87   : 		m_dwBestMagFilter = D3DTEXF_ANISOTROPIC;
; 88   : 	else
; 89   : 		m_dwBestMagFilter = D3DTEXF_LINEAR;
; 90   : 
; 91   : 	if (d3dCaps.TextureFilterCaps & D3DPTFILTERCAPS_MINFANISOTROPIC)
; 92   : 		m_dwBestMinFilter = D3DTEXF_ANISOTROPIC;
; 93   : 	else
; 94   : 		m_dwBestMinFilter = D3DTEXF_LINEAR;
; 95   : 
; 96   : 	DWORD dwMax = d3dCaps.MaxAnisotropy;
; 97   : 	dwMax = dwMax < 4 ? dwMax : 4;

  0004a	bb 04 00 00 00	 mov	 ebx, 4
  0004f	8b c1		 mov	 eax, ecx
  00051	81 e1 00 04 00
	00		 and	 ecx, 1024		; 00000400H
  00057	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0005c	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  00062	0d 00 00 00 08	 or	 eax, 134217728		; 08000000H
  00067	c1 e9 0a	 shr	 ecx, 10			; 0000000aH
  0006a	c1 e8 1a	 shr	 eax, 26			; 0000001aH
  0006d	89 87 8c 63 01
	00		 mov	 DWORD PTR [edi+91020], eax
  00073	89 8f 88 63 01
	00		 mov	 DWORD PTR [edi+91016], ecx
  00079	39 9d 38 ff ff
	ff		 cmp	 DWORD PTR _d3dCaps$[ebp+108], ebx
  0007f	0f 42 9d 38 ff
	ff ff		 cmovb	 ebx, DWORD PTR _d3dCaps$[ebp+108]
  00086	33 f6		 xor	 esi, esi
  00088	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@SetDevice:

; 98   : 
; 99   : 	for (int i = 0; i < 8; ++i)
; 100  : 		m_lpD3DDev->SetSamplerState(i, D3DSAMP_MAXANISOTROPY, dwMax);

  00090	8b 87 90 63 01
	00		 mov	 eax, DWORD PTR [edi+91024]
  00096	53		 push	 ebx
  00097	6a 0a		 push	 10			; 0000000aH
  00099	56		 push	 esi
  0009a	8b 10		 mov	 edx, DWORD PTR [eax]
  0009c	50		 push	 eax
  0009d	ff 92 14 01 00
	00		 call	 DWORD PTR [edx+276]
  000a3	46		 inc	 esi
  000a4	83 fe 08	 cmp	 esi, 8
  000a7	7c e7		 jl	 SHORT $LL4@SetDevice

; 101  : 	SetDefaultState();

  000a9	8b cf		 mov	 ecx, edi
  000ab	e8 00 00 00 00	 call	 ?SetDefaultState@CStateManager@@QAEXXZ ; CStateManager::SetDefaultState

; 102  : }

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	33 cd		 xor	 ecx, ebp
  000b7	5b		 pop	 ebx
  000b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c2 04 00	 ret	 4
?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice9@@@Z ENDP ; CStateManager::SetDevice
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 359  : 	return m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 84 81 80 76
	00 00		 mov	 eax, DWORD PTR [ecx+eax*4+30336]

; 360  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?GetRenderState@CStateManager@@QAEKW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_MinVertexIndex$ = 12					; size = 4
_NumVertexIndices$ = 16					; size = 4
_PrimitiveCount$ = 20					; size = 4
_pIndexData$ = 24					; size = 4
_IndexDataFormat$ = 28					; size = 4
_pVertexStreamZeroData$ = 32				; size = 4
_VertexStreamZeroStride$ = 36				; size = 4
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z PROC ; CStateManager::DrawIndexedPrimitiveUP, COMDAT
; _this$ = ecx

; 782  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 783  : 	m_CurrentState.m_IndexData = NULL;
; 784  : 	m_CurrentState.m_StreamData[0] = NULL;
; 785  : 	return (m_lpD3DDev->DrawIndexedPrimitiveUP(PrimitiveType, MinVertexIndex, NumVertexIndices, PrimitiveCount, pIndexData, IndexDataFormat, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 24	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	c7 81 f4 ec 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+60660], 0
  00010	ff 75 20	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  00013	c7 81 f8 ec 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+60664], 0
  0001d	ff 75 1c	 push	 DWORD PTR _IndexDataFormat$[ebp]
  00020	c7 81 74 ec 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+60532], 0
  0002a	ff 75 18	 push	 DWORD PTR _pIndexData$[ebp]
  0002d	c7 81 78 ec 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+60536], 0
  00037	ff 75 14	 push	 DWORD PTR _PrimitiveCount$[ebp]
  0003a	8b 89 90 63 01
	00		 mov	 ecx, DWORD PTR [ecx+91024]
  00040	ff 75 10	 push	 DWORD PTR _NumVertexIndices$[ebp]
  00043	ff 75 0c	 push	 DWORD PTR _MinVertexIndex$[ebp]
  00046	8b 01		 mov	 eax, DWORD PTR [ecx]
  00048	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0004b	51		 push	 ecx
  0004c	ff 90 50 01 00
	00		 call	 DWORD PTR [eax+336]

; 786  : }

  00052	5d		 pop	 ebp
  00053	c2 20 00	 ret	 32			; 00000020H
?DrawIndexedPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIPBXW4_D3DFORMAT@@1I@Z ENDP ; CStateManager::DrawIndexedPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_minIndex$ = 12						; size = 4
_NumVertices$ = 16					; size = 4
_startIndex$ = 20					; size = 4
_primCount$ = 24					; size = 4
_baseVertexIndex$ = 28					; size = 4
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z PROC ; CStateManager::DrawIndexedPrimitive, COMDAT
; _this$ = ecx

; 777  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 778  : 	return (m_lpD3DDev->DrawIndexedPrimitive(PrimitiveType, baseVertexIndex, minIndex, NumVertices, startIndex, primCount));

  00003	ff 75 18	 push	 DWORD PTR _primCount$[ebp]
  00006	8b 89 90 63 01
	00		 mov	 ecx, DWORD PTR [ecx+91024]
  0000c	ff 75 14	 push	 DWORD PTR _startIndex$[ebp]
  0000f	ff 75 10	 push	 DWORD PTR _NumVertices$[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	ff 75 0c	 push	 DWORD PTR _minIndex$[ebp]
  00017	ff 75 1c	 push	 DWORD PTR _baseVertexIndex$[ebp]
  0001a	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  0001d	51		 push	 ecx
  0001e	ff 90 48 01 00
	00		 call	 DWORD PTR [eax+328]

; 779  : }

  00024	5d		 pop	 ebp
  00025	c2 18 00	 ret	 24			; 00000018H
?DrawIndexedPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IIIIH@Z ENDP ; CStateManager::DrawIndexedPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_PrimitiveCount$ = 12					; size = 4
_pVertexStreamZeroData$ = 16				; size = 4
_VertexStreamZeroStride$ = 20				; size = 4
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z PROC ; CStateManager::DrawPrimitiveUP, COMDAT
; _this$ = ecx

; 771  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 772  : 	m_CurrentState.m_StreamData[0] = NULL;
; 773  : 	return (m_lpD3DDev->DrawPrimitiveUP(PrimitiveType, PrimitiveCount, pVertexStreamZeroData, VertexStreamZeroStride));

  00003	ff 75 14	 push	 DWORD PTR _VertexStreamZeroStride$[ebp]
  00006	c7 81 74 ec 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+60532], 0
  00010	ff 75 10	 push	 DWORD PTR _pVertexStreamZeroData$[ebp]
  00013	c7 81 78 ec 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+60536], 0
  0001d	8b 89 90 63 01
	00		 mov	 ecx, DWORD PTR [ecx+91024]
  00023	ff 75 0c	 push	 DWORD PTR _PrimitiveCount$[ebp]
  00026	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	51		 push	 ecx
  0002c	ff 90 4c 01 00
	00		 call	 DWORD PTR [eax+332]

; 774  : }

  00032	5d		 pop	 ebp
  00033	c2 10 00	 ret	 16			; 00000010H
?DrawPrimitiveUP@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@IPBXI@Z ENDP ; CStateManager::DrawPrimitiveUP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z
_TEXT	SEGMENT
_PrimitiveType$ = 8					; size = 4
_StartVertex$ = 12					; size = 4
_PrimitiveCount$ = 16					; size = 4
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z PROC ; CStateManager::DrawPrimitive, COMDAT
; _this$ = ecx

; 766  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 767  : 	return (m_lpD3DDev->DrawPrimitive(PrimitiveType, StartVertex, PrimitiveCount));

  00003	ff 75 10	 push	 DWORD PTR _PrimitiveCount$[ebp]
  00006	8b 89 90 63 01
	00		 mov	 ecx, DWORD PTR [ecx+91024]
  0000c	ff 75 0c	 push	 DWORD PTR _StartVertex$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR _PrimitiveType$[ebp]
  00012	8b 01		 mov	 eax, DWORD PTR [ecx]
  00014	51		 push	 ecx
  00015	ff 90 44 01 00
	00		 call	 DWORD PTR [eax+324]

; 768  : }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?DrawPrimitive@CStateManager@@QAEJW4_D3DPRIMITIVETYPE@@II@Z ENDP ; CStateManager::DrawPrimitive
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z PROC ; CStateManager::SetIndices, COMDAT
; _this$ = ecx

; 755  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _BaseVertexIndex$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 755  : {

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 42   : 		: m_lpIndexData(pIndexData),

  0000b	8b 7d 08	 mov	 edi, DWORD PTR _pIndexData$[ebp]

; 49   : 		return ((m_lpIndexData == rhs.m_lpIndexData) && (m_BaseVertexIndex == rhs.m_BaseVertexIndex));

  0000e	39 be f4 ec 00
	00		 cmp	 DWORD PTR [esi+60660], edi
  00014	75 08		 jne	 SHORT $LN10@SetIndices
  00016	39 9e f8 ec 00
	00		 cmp	 DWORD PTR [esi+60664], ebx
  0001c	74 1c		 je	 SHORT $LN1@SetIndices
$LN10@SetIndices:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 761  : 	m_lpD3DDev->SetIndices(pIndexData);

  0001e	8b 86 90 63 01
	00		 mov	 eax, DWORD PTR [esi+91024]
  00024	57		 push	 edi
  00025	50		 push	 eax
  00026	8b 08		 mov	 ecx, DWORD PTR [eax]
  00028	ff 91 a0 01 00
	00		 call	 DWORD PTR [ecx+416]

; 762  : 	m_CurrentState.m_IndexData = kIndexData;

  0002e	89 be f4 ec 00
	00		 mov	 DWORD PTR [esi+60660], edi
  00034	89 9e f8 ec 00
	00		 mov	 DWORD PTR [esi+60664], ebx
$LN1@SetIndices:

; 763  : }

  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ENDP ; CStateManager::SetIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreIndices@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreIndices@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreIndices, COMDAT
; _this$ = ecx

; 751  : 	SetIndices(m_CopyState.m_IndexData.m_lpIndexData, m_CopyState.m_IndexData.m_BaseVertexIndex);

  00000	ff b1 74 63 01
	00		 push	 DWORD PTR [ecx+90996]
  00006	ff b1 70 63 01
	00		 push	 DWORD PTR [ecx+90992]
  0000c	e8 00 00 00 00	 call	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices

; 752  : }

  00011	c3		 ret	 0
?RestoreIndices@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z
_TEXT	SEGMENT
_pIndexData$ = 8					; size = 4
_BaseVertexIndex$ = 12					; size = 4
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z PROC ; CStateManager::SaveIndices, COMDAT
; _this$ = ecx

; 744  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 745  : 	m_CopyState.m_IndexData = m_CurrentState.m_IndexData;

  00003	8b 81 f4 ec 00
	00		 mov	 eax, DWORD PTR [ecx+60660]
  00009	8b 91 f8 ec 00
	00		 mov	 edx, DWORD PTR [ecx+60664]
  0000f	89 81 70 63 01
	00		 mov	 DWORD PTR [ecx+90992], eax
  00015	89 91 74 63 01
	00		 mov	 DWORD PTR [ecx+90996], edx

; 747  : }

  0001b	5d		 pop	 ebp

; 746  : 	SetIndices(pIndexData, BaseVertexIndex);

  0001c	e9 00 00 00 00	 jmp	 ?SetIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ; CStateManager::SetIndices
?SaveIndices@CStateManager@@QAEXPAUIDirect3DIndexBuffer9@@I@Z ENDP ; CStateManager::SaveIndices
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z PROC ; CStateManager::SetStreamSource, COMDAT
; _this$ = ecx

; 734  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 32   : 		return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00003	8b 55 08	 mov	 edx, DWORD PTR _StreamNumber$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 734  : {

  00006	53		 push	 ebx
  00007	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00008	8b 75 10	 mov	 esi, DWORD PTR _Stride$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 734  : {

  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pStreamData$[ebp]

; 32   : 		return ((m_lpStreamData == rhs.m_lpStreamData) && (m_Stride == rhs.m_Stride));

  00011	39 bc d3 74 ec
	00 00		 cmp	 DWORD PTR [ebx+edx*8+60532], edi
  00018	75 09		 jne	 SHORT $LN10@SetStreamS
  0001a	39 b4 d3 78 ec
	00 00		 cmp	 DWORD PTR [ebx+edx*8+60536], esi
  00021	74 25		 je	 SHORT $LN1@SetStreamS
$LN10@SetStreamS:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 739  : 	m_lpD3DDev->SetStreamSource(StreamNumber, pStreamData, 0, Stride);

  00023	8b 83 90 63 01
	00		 mov	 eax, DWORD PTR [ebx+91024]
  00029	56		 push	 esi
  0002a	6a 00		 push	 0
  0002c	57		 push	 edi
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	52		 push	 edx
  00030	50		 push	 eax
  00031	ff 91 90 01 00
	00		 call	 DWORD PTR [ecx+400]

; 740  : 	m_CurrentState.m_StreamData[StreamNumber] = kStreamData;

  00037	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  0003a	89 bc c3 74 ec
	00 00		 mov	 DWORD PTR [ebx+eax*8+60532], edi
  00041	89 b4 c3 78 ec
	00 00		 mov	 DWORD PTR [ebx+eax*8+60536], esi
$LN1@SetStreamS:

; 741  : }

  00048	5f		 pop	 edi
  00049	5e		 pop	 esi
  0004a	5b		 pop	 ebx
  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ENDP ; CStateManager::SetStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreStreamSource@CStateManager@@QAEXI@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
?RestoreStreamSource@CStateManager@@QAEXI@Z PROC	; CStateManager::RestoreStreamSource, COMDAT
; _this$ = ecx

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 728  : 	SetStreamSource(StreamNumber,

  00003	8b 45 08	 mov	 eax, DWORD PTR _StreamNumber$[ebp]
  00006	ff b4 c1 f4 62
	01 00		 push	 DWORD PTR [ecx+eax*8+90868]
  0000d	ff b4 c1 f0 62
	01 00		 push	 DWORD PTR [ecx+eax*8+90864]
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource

; 729  : 		m_CopyState.m_StreamData[StreamNumber].m_lpStreamData,
; 730  : 		m_CopyState.m_StreamData[StreamNumber].m_Stride);
; 731  : }

  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
?RestoreStreamSource@CStateManager@@QAEXI@Z ENDP	; CStateManager::RestoreStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z
_TEXT	SEGMENT
_StreamNumber$ = 8					; size = 4
_pStreamData$ = 12					; size = 4
_Stride$ = 16						; size = 4
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z PROC ; CStateManager::SaveStreamSource, COMDAT
; _this$ = ecx

; 720  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 721  : 	// Check that we have set this up before, if not, the default is this.
; 722  : 	m_CopyState.m_StreamData[StreamNumber] = m_CurrentState.m_StreamData[StreamNumber];

  00004	8b 75 08	 mov	 esi, DWORD PTR _StreamNumber$[ebp]

; 723  : 	SetStreamSource(StreamNumber, pStreamData, Stride);

  00007	ff 75 10	 push	 DWORD PTR _Stride$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR _pStreamData$[ebp]
  0000d	8b 84 f1 74 ec
	00 00		 mov	 eax, DWORD PTR [ecx+esi*8+60532]
  00014	8b 94 f1 78 ec
	00 00		 mov	 edx, DWORD PTR [ecx+esi*8+60536]
  0001b	56		 push	 esi
  0001c	89 84 f1 f0 62
	01 00		 mov	 DWORD PTR [ecx+esi*8+90864], eax
  00023	89 94 f1 f4 62
	01 00		 mov	 DWORD PTR [ecx+esi*8+90868], edx
  0002a	e8 00 00 00 00	 call	 ?SetStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ; CStateManager::SetStreamSource
  0002f	5e		 pop	 esi

; 724  : }

  00030	5d		 pop	 ebp
  00031	c2 0c 00	 ret	 12			; 0000000cH
?SaveStreamSource@CStateManager@@QAEXIPAUIDirect3DVertexBuffer9@@I@Z ENDP ; CStateManager::SaveStreamSource
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC	; CStateManager::SetPixelShaderConstant, COMDAT
; _this$ = ecx

; 703  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 704  : 	m_lpD3DDev->SetPixelShaderConstantF(dwRegister, (const float*)pConstantData, dwConstantCount);  // Converting2DirectX9

  00005	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  0000e	57		 push	 edi
  0000f	8b 83 90 63 01
	00		 mov	 eax, DWORD PTR [ebx+91024]
  00015	56		 push	 esi
  00016	ff 75 08	 push	 DWORD PTR _dwRegister$[ebp]
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	50		 push	 eax
  0001c	ff 92 b4 01 00
	00		 call	 DWORD PTR [edx+436]

; 705  : 
; 706  : 	// Set the renderstate and remember it.
; 707  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00022	85 ff		 test	 edi, edi
  00024	74 20		 je	 SHORT $LN3@SetPixelSh

; 704  : 	m_lpD3DDev->SetPixelShaderConstantF(dwRegister, (const float*)pConstantData, dwConstantCount);  // Converting2DirectX9

  00026	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00029	05 08 0a 00 00	 add	 eax, 2568		; 00000a08H
  0002e	c1 e0 04	 shl	 eax, 4
  00031	03 c3		 add	 eax, ebx
$LL4@SetPixelSh:

; 705  : 
; 706  : 	// Set the renderstate and remember it.
; 707  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00033	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00036	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 708  : 	{
; 709  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 710  : 		m_CurrentState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00039	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  0003d	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  00041	83 ef 01	 sub	 edi, 1
  00044	75 ed		 jne	 SHORT $LL4@SetPixelSh
$LN3@SetPixelSh:
  00046	5f		 pop	 edi

; 711  : 	}
; 712  : }

  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP	; CStateManager::SetPixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SavePixelShaderConstant, COMDAT
; _this$ = ecx

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 694  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00006	56		 push	 esi
  00007	8b 75 10	 mov	 esi, DWORD PTR _dwConstantCount$[ebp]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	85 f6		 test	 esi, esi
  0000f	74 25		 je	 SHORT $LN3@SavePixelS
  00011	8b 55 0c	 mov	 edx, DWORD PTR _pConstantData$[ebp]
  00014	8b ce		 mov	 ecx, esi
  00016	c1 e0 04	 shl	 eax, 4
  00019	05 fc 16 01 00	 add	 eax, 71420		; 000116fcH
  0001e	03 c7		 add	 eax, edi
$LL4@SavePixelS:
  00020	8d 52 10	 lea	 edx, DWORD PTR [edx+16]
  00023	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 695  : 	{
; 696  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 697  : 		m_CopyState.m_PixelShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00026	0f 10 42 f0	 movups	 xmm0, XMMWORD PTR [edx-16]
  0002a	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  0002e	83 e9 01	 sub	 ecx, 1
  00031	75 ed		 jne	 SHORT $LL4@SavePixelS
  00033	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
$LN3@SavePixelS:

; 698  : 	}
; 699  : 	SetPixelShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00036	56		 push	 esi
  00037	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003a	8b cf		 mov	 ecx, edi
  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 700  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
?SavePixelShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SavePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SaveVertexShaderConstant, COMDAT
; _this$ = ecx

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 666  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00003	8b 55 10	 mov	 edx, DWORD PTR _dwConstantCount$[ebp]
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	85 d2		 test	 edx, edx
  0000b	74 2c		 je	 SHORT $LN4@SaveVertex
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _dwRegister$[ebp]
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
  00014	c1 e7 04	 shl	 edi, 4
  00017	8d b1 a8 09 00
	00		 lea	 esi, DWORD PTR [ecx+2472]
  0001d	81 c7 fc 10 01
	00		 add	 edi, 69884		; 000110fcH
  00023	c1 e6 04	 shl	 esi, 4
  00026	8b ca		 mov	 ecx, edx
  00028	03 fb		 add	 edi, ebx
  0002a	03 f3		 add	 esi, ebx
  0002c	81 e1 ff ff ff
	0f		 and	 ecx, 268435455		; 0fffffffH
  00032	c1 e1 02	 shl	 ecx, 2
  00035	f3 a5		 rep movsd
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
$LN4@SaveVertex:

; 667  : 	{
; 668  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 669  : 		m_CopyState.m_VertexShaderConstants[dwRegister + i] = m_CurrentState.m_VertexShaderConstants[dwRegister + i];
; 670  : 	}
; 671  : 	SetVertexShaderConstant(dwRegister, pConstantData, dwConstantCount);

  00039	52		 push	 edx
  0003a	ff 75 0c	 push	 DWORD PTR _pConstantData$[ebp]
  0003d	8b cb		 mov	 ecx, ebx
  0003f	ff 75 08	 push	 DWORD PTR _dwRegister$[ebp]
  00042	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant
  00047	5b		 pop	 ebx

; 672  : }

  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
?SaveVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SaveVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_pConstantData$ = 12					; size = 4
_dwConstantCount$ = 16					; size = 4
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z PROC ; CStateManager::SetVertexShaderConstant, COMDAT
; _this$ = ecx

; 680  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 681  : 	m_lpD3DDev->SetVertexShaderConstantF(dwRegister, (const float*)pConstantData, dwConstantCount);  // Converting2DirectX9

  00005	8b 75 0c	 mov	 esi, DWORD PTR _pConstantData$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR _dwConstantCount$[ebp]
  0000e	57		 push	 edi
  0000f	8b 83 90 63 01
	00		 mov	 eax, DWORD PTR [ebx+91024]
  00015	56		 push	 esi
  00016	ff 75 08	 push	 DWORD PTR _dwRegister$[ebp]
  00019	8b 10		 mov	 edx, DWORD PTR [eax]
  0001b	50		 push	 eax
  0001c	ff 92 78 01 00
	00		 call	 DWORD PTR [edx+376]

; 682  : 
; 683  : 	// Set the renderstate and remember it.
; 684  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00022	85 ff		 test	 edi, edi
  00024	74 20		 je	 SHORT $LN3@SetVertexS

; 681  : 	m_lpD3DDev->SetVertexShaderConstantF(dwRegister, (const float*)pConstantData, dwConstantCount);  // Converting2DirectX9

  00026	8b 45 08	 mov	 eax, DWORD PTR _dwRegister$[ebp]
  00029	05 a8 09 00 00	 add	 eax, 2472		; 000009a8H
  0002e	c1 e0 04	 shl	 eax, 4
  00031	03 c3		 add	 eax, ebx
$LL4@SetVertexS:

; 682  : 
; 683  : 	// Set the renderstate and remember it.
; 684  : 	for (DWORD i = 0; i < dwConstantCount; i++)

  00033	8d 76 10	 lea	 esi, DWORD PTR [esi+16]
  00036	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 685  : 	{
; 686  : 		StateManager_Assert((dwRegister + i) < STATEMANAGER_MAX_VCONSTANTS);
; 687  : 		m_CurrentState.m_VertexShaderConstants[dwRegister + i] = *(((D3DXVECTOR4*)pConstantData) + i);

  00039	0f 10 46 f0	 movups	 xmm0, XMMWORD PTR [esi-16]
  0003d	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  00041	83 ef 01	 sub	 edi, 1
  00044	75 ed		 jne	 SHORT $LL4@SetVertexS
$LN3@SetVertexS:
  00046	5f		 pop	 edi

; 688  : 	}
; 689  : }

  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	5d		 pop	 ebp
  0004a	c2 0c 00	 ret	 12			; 0000000cH
?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ENDP ; CStateManager::SetVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestorePixelShaderConstant@CStateManager@@QAEXII@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestorePixelShaderConstant@CStateManager@@QAEXII@Z PROC ; CStateManager::RestorePixelShaderConstant, COMDAT
; _this$ = ecx

; 715  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 716  : 	SetPixelShaderConstant(dwRegister, &m_CopyState.m_PixelShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 fc 16 01 00	 add	 eax, 71420		; 000116fcH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 717  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestorePixelShaderConstant@CStateManager@@QAEXII@Z ENDP ; CStateManager::RestorePixelShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexShaderConstant@CStateManager@@QAEXII@Z
_TEXT	SEGMENT
_dwRegister$ = 8					; size = 4
_dwConstantCount$ = 12					; size = 4
?RestoreVertexShaderConstant@CStateManager@@QAEXII@Z PROC ; CStateManager::RestoreVertexShaderConstant, COMDAT
; _this$ = ecx

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 676  : 	SetVertexShaderConstant(dwRegister, &m_CopyState.m_VertexShaderConstants[dwRegister], dwConstantCount);

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwRegister$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	ff 75 0c	 push	 DWORD PTR _dwConstantCount$[ebp]
  0000b	c1 e0 04	 shl	 eax, 4
  0000e	05 fc 10 01 00	 add	 eax, 69884		; 000110fcH
  00013	03 c1		 add	 eax, ecx
  00015	50		 push	 eax
  00016	52		 push	 edx
  00017	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 677  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
?RestoreVertexShaderConstant@CStateManager@@QAEXII@Z ENDP ; CStateManager::RestoreVertexShaderConstant
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z PROC ; CStateManager::GetTransform, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 661  : 	*pMatrix = m_CurrentState.m_Matrices[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	c1 e0 06	 shl	 eax, 6
  00009	03 c8		 add	 ecx, eax
  0000b	8b 45 0c	 mov	 eax, DWORD PTR _pMatrix$[ebp]
  0000e	0f 10 81 30 a1
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+41264]
  00015	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00018	0f 10 81 40 a1
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+41280]
  0001f	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  00023	0f 10 81 50 a1
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+41296]
  0002a	0f 11 40 20	 movups	 XMMWORD PTR [eax+32], xmm0
  0002e	0f 10 81 60 a1
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+41312]
  00035	0f 11 40 30	 movups	 XMMWORD PTR [eax+48], xmm0

; 662  : }

  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ENDP ; CStateManager::GetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SetTransform, COMDAT
; _this$ = ecx

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 647  : 	if (m_bScene)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _Type$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR _pMatrix$[ebp]
  0000e	80 be 85 63 01
	00 00		 cmp	 BYTE PTR [esi+91013], 0
  00015	74 11		 je	 SHORT $LN2@SetTransfo

; 648  : 	{
; 649  : 		m_lpD3DDev->SetTransform(Type, pMatrix);

  00017	8b 86 90 63 01
	00		 mov	 eax, DWORD PTR [esi+91024]
  0001d	57		 push	 edi
  0001e	53		 push	 ebx
  0001f	50		 push	 eax
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	ff 92 b0 00 00
	00		 call	 DWORD PTR [edx+176]
$LN2@SetTransfo:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 757  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  00028	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 656  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0002b	c1 e3 06	 shl	 ebx, 6
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 757  :     memcpy(&_11, &mat, sizeof(D3DXMATRIX));

  0002e	0f 10 4f 10	 movups	 xmm1, XMMWORD PTR [edi+16]
  00032	0f 10 57 20	 movups	 xmm2, XMMWORD PTR [edi+32]
  00036	0f 10 5f 30	 movups	 xmm3, XMMWORD PTR [edi+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 656  : 	m_CurrentState.m_Matrices[Type] = *pMatrix;

  0003a	5f		 pop	 edi
  0003b	0f 11 84 33 30
	a1 00 00	 movups	 XMMWORD PTR [ebx+esi+41264], xmm0
  00043	0f 11 8c 33 40
	a1 00 00	 movups	 XMMWORD PTR [ebx+esi+41280], xmm1
  0004b	0f 11 94 33 50
	a1 00 00	 movups	 XMMWORD PTR [ebx+esi+41296], xmm2
  00053	0f 11 9c 33 60
	a1 00 00	 movups	 XMMWORD PTR [ebx+esi+41312], xmm3
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx

; 657  : }

  0005d	5d		 pop	 ebp
  0005e	c2 08 00	 ret	 8
?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SetTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z PROC ; CStateManager::RestoreTransform, COMDAT
; _this$ = ecx

; 633  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 634  : #ifdef _DEBUG
; 635  : 	if (!m_bTransformSavingFlag[Type])
; 636  : 	{
; 637  : 	}
; 638  : 	m_bTransformSavingFlag[Type] = FALSE;
; 639  : #endif _DEBUG
; 640  : 
; 641  : 	SetTransform(Type, &m_CopyState.m_Matrices[Type]);

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	05 ac 17 01 00	 add	 eax, 71596		; 000117acH
  00010	03 c1		 add	 eax, ecx
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 642  : }

  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?RestoreTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@@Z ENDP ; CStateManager::RestoreTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pMatrix$ = 12						; size = 4
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z PROC ; CStateManager::SaveTransform, COMDAT
; _this$ = ecx

; 620  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 621  : #ifdef _DEBUG
; 622  : 	if (m_bTransformSavingFlag[Type])
; 623  : 	{
; 624  : 	}
; 625  : 	m_bTransformSavingFlag[Type] = TRUE;
; 626  : #endif _DEBUG
; 627  : 
; 628  : 	m_CopyState.m_Matrices[Type] = m_CurrentState.m_Matrices[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 06	 shl	 eax, 6
  0000b	0f 10 84 08 30
	a1 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+41264]
  00013	0f 11 84 08 ac
	17 01 00	 movups	 XMMWORD PTR [eax+ecx+71596], xmm0
  0001b	0f 10 84 08 40
	a1 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+41280]
  00023	0f 11 84 08 bc
	17 01 00	 movups	 XMMWORD PTR [eax+ecx+71612], xmm0
  0002b	0f 10 84 08 50
	a1 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+41296]
  00033	0f 11 84 08 cc
	17 01 00	 movups	 XMMWORD PTR [eax+ecx+71628], xmm0
  0003b	0f 10 84 08 60
	a1 00 00	 movups	 xmm0, XMMWORD PTR [eax+ecx+41312]
  00043	0f 11 84 08 dc
	17 01 00	 movups	 XMMWORD PTR [eax+ecx+71644], xmm0

; 629  : 	SetTransform(Type, (D3DXMATRIX*)pMatrix);

  0004b	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 630  : }

  0004e	5d		 pop	 ebp

; 629  : 	SetTransform(Type, (D3DXMATRIX*)pMatrix);

  0004f	e9 00 00 00 00	 jmp	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform
?SaveTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ENDP ; CStateManager::SaveTransform
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestorePixelShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestorePixelShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestorePixelShader, COMDAT
; _this$ = ecx

; 581  : 	SetPixelShader(m_CopyState.m_dwPixelShader);

  00000	ff b1 a4 17 01
	00		 push	 DWORD PTR [ecx+71588]
  00006	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ; CStateManager::SetPixelShader

; 582  : }

  0000b	c3		 ret	 0
?RestorePixelShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestorePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetFVF@CStateManager@@QAEXPAK@Z
_TEXT	SEGMENT
_dwFVF$ = 8						; size = 4
?GetFVF@CStateManager@@QAEXPAK@Z PROC			; CStateManager::GetFVF, COMDAT
; _this$ = ecx

; 612  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 613  : 	*dwFVF = m_CurrentState.m_dwFVF;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwFVF$[ebp]
  00006	8b 89 2c a1 00
	00		 mov	 ecx, DWORD PTR [ecx+41260]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 614  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetFVF@CStateManager@@QAEXPAK@Z ENDP			; CStateManager::GetFVF
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetFVF@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwFVF$ = 8						; size = 4
?SetFVF@CStateManager@@QAEXK@Z PROC			; CStateManager::SetFVF, COMDAT
; _this$ = ecx

; 603  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 604  : 	if (m_CurrentState.m_dwFVF != dwFVF)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwFVF$[ebp]
  0000a	39 be 2c a1 00
	00		 cmp	 DWORD PTR [esi+41260], edi
  00010	74 16		 je	 SHORT $LN2@SetFVF

; 605  : 	{
; 606  : 		m_lpD3DDev->SetFVF(dwFVF);

  00012	8b 86 90 63 01
	00		 mov	 eax, DWORD PTR [esi+91024]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 64 01 00
	00		 call	 DWORD PTR [edx+356]

; 607  : 		m_CurrentState.m_dwFVF = dwFVF;

  00022	89 be 2c a1 00
	00		 mov	 DWORD PTR [esi+41260], edi
$LN2@SetFVF:

; 608  : 	}
; 609  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetFVF@CStateManager@@QAEXK@Z ENDP			; CStateManager::SetFVF
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreFVF@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreFVF@CStateManager@@QAEXXZ PROC			; CStateManager::RestoreFVF, COMDAT
; _this$ = ecx

; 599  : 	SetFVF(m_CopyState.m_dwFVF);

  00000	ff b1 a8 17 01
	00		 push	 DWORD PTR [ecx+71592]
  00006	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 600  : }

  0000b	c3		 ret	 0
?RestoreFVF@CStateManager@@QAEXXZ ENDP			; CStateManager::RestoreFVF
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveFVF@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwFVF$ = 8						; size = 4
?SaveFVF@CStateManager@@QAEXK@Z PROC			; CStateManager::SaveFVF, COMDAT
; _this$ = ecx

; 592  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 593  : 	m_CopyState.m_dwFVF = m_CurrentState.m_dwFVF;

  00003	8b 81 2c a1 00
	00		 mov	 eax, DWORD PTR [ecx+41260]
  00009	89 81 a8 17 01
	00		 mov	 DWORD PTR [ecx+71592], eax

; 595  : }

  0000f	5d		 pop	 ebp

; 594  : 	SetFVF(dwFVF);

  00010	e9 00 00 00 00	 jmp	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF
?SaveFVF@CStateManager@@QAEXK@Z ENDP			; CStateManager::SaveFVF
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetPixelShader@CStateManager@@QAEXPAPAUIDirect3DPixelShader9@@@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetPixelShader@CStateManager@@QAEXPAPAUIDirect3DPixelShader9@@@Z PROC ; CStateManager::GetPixelShader, COMDAT
; _this$ = ecx

; 585  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 586  : 	*pdwShader = m_CurrentState.m_dwPixelShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 28 a1 00
	00		 mov	 ecx, DWORD PTR [ecx+41256]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 587  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetPixelShader@CStateManager@@QAEXPAPAUIDirect3DPixelShader9@@@Z ENDP ; CStateManager::GetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z PROC ; CStateManager::SetPixelShader, COMDAT
; _this$ = ecx

; 571  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 572  : 	if (m_CurrentState.m_dwPixelShader != dwShader)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwShader$[ebp]
  00006	39 91 28 a1 00
	00		 cmp	 DWORD PTR [ecx+41256], edx
  0000c	74 16		 je	 SHORT $LN2@SetPixelSh

; 573  : 	{
; 574  : 		m_CurrentState.m_dwPixelShader = dwShader;
; 575  : 		m_lpD3DDev->SetPixelShader(dwShader);

  0000e	8b 81 90 63 01
	00		 mov	 eax, DWORD PTR [ecx+91024]
  00014	89 91 28 a1 00
	00		 mov	 DWORD PTR [ecx+41256], edx
  0001a	52		 push	 edx
  0001b	50		 push	 eax
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	ff 91 ac 01 00
	00		 call	 DWORD PTR [ecx+428]
$LN2@SetPixelSh:

; 576  : 	}
; 577  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ENDP ; CStateManager::SetPixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SavePixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SavePixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z PROC ; CStateManager::SavePixelShader, COMDAT
; _this$ = ecx

; 564  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 565  : 	m_CopyState.m_dwPixelShader = m_CurrentState.m_dwPixelShader;

  00003	8b 81 28 a1 00
	00		 mov	 eax, DWORD PTR [ecx+41256]
  00009	89 81 a4 17 01
	00		 mov	 DWORD PTR [ecx+71588], eax

; 567  : }

  0000f	5d		 pop	 ebp

; 566  : 	SetPixelShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ; CStateManager::SetPixelShader
?SavePixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ENDP ; CStateManager::SavePixelShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexShader@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVertexShader@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreVertexShader, COMDAT
; _this$ = ecx

; 517  : 	SetVertexShader(m_CopyState.m_dwVertexShader);

  00000	ff b1 9c 17 01
	00		 push	 DWORD PTR [ecx+71580]
  00006	e8 00 00 00 00	 call	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader

; 518  : }

  0000b	c3		 ret	 0
?RestoreVertexShader@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetVertexDeclaration@CStateManager@@QAEXPAPAUIDirect3DVertexDeclaration9@@@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetVertexDeclaration@CStateManager@@QAEXPAPAUIDirect3DVertexDeclaration9@@@Z PROC ; CStateManager::GetVertexDeclaration, COMDAT
; _this$ = ecx

; 557  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 558  : 	*pdwShader = m_CurrentState.m_dwVertexDeclaration;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 24 a1 00
	00		 mov	 ecx, DWORD PTR [ecx+41252]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 559  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetVertexDeclaration@CStateManager@@QAEXPAPAUIDirect3DVertexDeclaration9@@@Z ENDP ; CStateManager::GetVertexDeclaration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z PROC ; CStateManager::SetVertexDeclaration, COMDAT
; _this$ = ecx

; 548  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 549  : 	if (m_CurrentState.m_dwVertexDeclaration == dwShader)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _dwShader$[ebp]
  0000a	39 be 24 a1 00
	00		 cmp	 DWORD PTR [esi+41252], edi
  00010	74 16		 je	 SHORT $LN1@SetVertexD

; 550  : 		return;
; 551  : 
; 552  : 	m_lpD3DDev->SetVertexDeclaration(dwShader);

  00012	8b 86 90 63 01
	00		 mov	 eax, DWORD PTR [esi+91024]
  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	ff 92 5c 01 00
	00		 call	 DWORD PTR [edx+348]

; 553  : 	m_CurrentState.m_dwVertexDeclaration = dwShader;

  00022	89 be 24 a1 00
	00		 mov	 DWORD PTR [esi+41252], edi
$LN1@SetVertexD:

; 554  : }

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?SetVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z ENDP ; CStateManager::SetVertexDeclaration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreVertexDeclaration@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreVertexDeclaration@CStateManager@@QAEXXZ PROC	; CStateManager::RestoreVertexDeclaration, COMDAT
; _this$ = ecx

; 544  : 	SetVertexDeclaration(m_CopyState.m_dwVertexDeclaration);

  00000	ff b1 a0 17 01
	00		 push	 DWORD PTR [ecx+71584]
  00006	e8 00 00 00 00	 call	 ?SetVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z ; CStateManager::SetVertexDeclaration

; 545  : }

  0000b	c3		 ret	 0
?RestoreVertexDeclaration@CStateManager@@QAEXXZ ENDP	; CStateManager::RestoreVertexDeclaration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SaveVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z PROC ; CStateManager::SaveVertexDeclaration, COMDAT
; _this$ = ecx

; 537  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 538  : 	m_CopyState.m_dwVertexDeclaration = m_CurrentState.m_dwVertexDeclaration;

  00003	8b 81 24 a1 00
	00		 mov	 eax, DWORD PTR [ecx+41252]
  00009	89 81 a0 17 01
	00		 mov	 DWORD PTR [ecx+71584], eax

; 540  : }

  0000f	5d		 pop	 ebp

; 539  : 	SetVertexDeclaration(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z ; CStateManager::SetVertexDeclaration
?SaveVertexDeclaration@CStateManager@@QAEXPAUIDirect3DVertexDeclaration9@@@Z ENDP ; CStateManager::SaveVertexDeclaration
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetVertexShader@CStateManager@@QAEXPAPAUIDirect3DVertexShader9@@@Z
_TEXT	SEGMENT
_pdwShader$ = 8						; size = 4
?GetVertexShader@CStateManager@@QAEXPAPAUIDirect3DVertexShader9@@@Z PROC ; CStateManager::GetVertexShader, COMDAT
; _this$ = ecx

; 530  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 531  : 	*pdwShader = m_CurrentState.m_dwVertexShader;

  00003	8b 45 08	 mov	 eax, DWORD PTR _pdwShader$[ebp]
  00006	8b 89 20 a1 00
	00		 mov	 ecx, DWORD PTR [ecx+41248]
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 532  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetVertexShader@CStateManager@@QAEXPAPAUIDirect3DVertexShader9@@@Z ENDP ; CStateManager::GetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z PROC ; CStateManager::SetVertexShader, COMDAT
; _this$ = ecx

; 521  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 522  : 	if (m_CurrentState.m_dwVertexShader != dwShader)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwShader$[ebp]
  00006	39 91 20 a1 00
	00		 cmp	 DWORD PTR [ecx+41248], edx
  0000c	74 16		 je	 SHORT $LN2@SetVertexS

; 523  : 	{
; 524  : 		m_CurrentState.m_dwVertexShader = dwShader;
; 525  : 		m_lpD3DDev->SetVertexShader(dwShader);

  0000e	8b 81 90 63 01
	00		 mov	 eax, DWORD PTR [ecx+91024]
  00014	89 91 20 a1 00
	00		 mov	 DWORD PTR [ecx+41248], edx
  0001a	52		 push	 edx
  0001b	50		 push	 eax
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	ff 91 70 01 00
	00		 call	 DWORD PTR [ecx+368]
$LN2@SetVertexS:

; 526  : 	}
; 527  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ENDP ; CStateManager::SetVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z
_TEXT	SEGMENT
_dwShader$ = 8						; size = 4
?SaveVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z PROC ; CStateManager::SaveVertexShader, COMDAT
; _this$ = ecx

; 510  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 511  : 	m_CopyState.m_dwVertexShader = m_CurrentState.m_dwVertexShader;

  00003	8b 81 20 a1 00
	00		 mov	 eax, DWORD PTR [ecx+41248]
  00009	89 81 9c 17 01
	00		 mov	 DWORD PTR [ecx+71580], eax

; 513  : }

  0000f	5d		 pop	 ebp

; 512  : 	SetVertexShader(dwShader);

  00010	e9 00 00 00 00	 jmp	 ?SetVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ; CStateManager::SetVertexShader
?SaveVertexShader@CStateManager@@QAEXPAUIDirect3DVertexShader9@@@Z ENDP ; CStateManager::SaveVertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetBestFiltering@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?SetBestFiltering@CStateManager@@QAEXK@Z PROC		; CStateManager::SetBestFiltering, COMDAT
; _this$ = ecx

; 105  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 106  : 	SetSamplerState(dwStage, D3DSAMP_MINFILTER, m_dwBestMinFilter);

  00004	8b 75 08	 mov	 esi, DWORD PTR _dwStage$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	ff b7 88 63 01
	00		 push	 DWORD PTR [edi+91016]
  00010	6a 06		 push	 6
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 107  : 	SetSamplerState(dwStage, D3DSAMP_MAGFILTER, m_dwBestMagFilter);

  00018	ff b7 8c 63 01
	00		 push	 DWORD PTR [edi+91020]
  0001e	8b cf		 mov	 ecx, edi
  00020	6a 05		 push	 5
  00022	56		 push	 esi
  00023	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 108  : 	SetSamplerState(dwStage, D3DSAMP_MIPFILTER, D3DTEXF_LINEAR);

  00028	6a 02		 push	 2
  0002a	6a 07		 push	 7
  0002c	56		 push	 esi
  0002d	8b cf		 mov	 ecx, edi
  0002f	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 109  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?SetBestFiltering@CStateManager@@QAEXK@Z ENDP		; CStateManager::SetBestFiltering
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@PAK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_pdwValue$ = 16						; size = 4
?GetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@PAK@Z PROC ; CStateManager::GetSamplerState, COMDAT
; _this$ = ecx

; 504  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 505  : 	*pdwValue = m_CurrentState.m_SamplerStates[dwStage][Type];

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _dwStage$[ebp]
  00008	c1 e1 07	 shl	 ecx, 7
  0000b	03 4d 0c	 add	 ecx, DWORD PTR _Type$[ebp]
  0000e	8b 8c 88 80 8a
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+35456]
  00015	8b 45 10	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 506  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@PAK@Z ENDP ; CStateManager::GetSamplerState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z PROC ; CStateManager::SetSamplerState, COMDAT
; _this$ = ecx

; 494  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 495  : 	if (m_CurrentState.m_SamplerStates[dwStage][Type] == dwValue)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 07	 shl	 eax, 7
  0000b	03 45 0c	 add	 eax, DWORD PTR _Type$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 10	 mov	 esi, DWORD PTR _dwValue$[ebp]
  00013	39 b4 81 80 8a
	00 00		 cmp	 DWORD PTR [ecx+eax*4+35456], esi
  0001a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0001d	74 1a		 je	 SHORT $LN1@SetSampler

; 496  : 		return;
; 497  : 
; 498  : 	m_lpD3DDev->SetSamplerState(dwStage, Type, dwValue);

  0001f	8b 81 90 63 01
	00		 mov	 eax, DWORD PTR [ecx+91024]
  00025	56		 push	 esi
  00026	ff 75 0c	 push	 DWORD PTR _Type$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	ff 91 14 01 00
	00		 call	 DWORD PTR [ecx+276]

; 499  : 
; 500  : 	m_CurrentState.m_SamplerStates[dwStage][Type] = dwValue;

  00033	89 b3 80 8a 00
	00		 mov	 DWORD PTR [ebx+35456], esi
$LN1@SetSampler:

; 501  : }

  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ENDP ; CStateManager::SetSamplerState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z PROC ; CStateManager::RestoreSamplerState, COMDAT
; _this$ = ecx

; 483  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 484  : #ifdef _DEBUG
; 485  : 	if (!m_bSamplerStateSavingFlag[dwStage][Type])
; 486  : 	{
; 487  : 	}
; 488  : 	m_bSamplerStateSavingFlag[dwStage][Type] = FALSE;
; 489  : #endif _DEBUG
; 490  : 	SetSamplerState(dwStage, Type, m_CopyState.m_SamplerStates[dwStage][Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  00009	c1 e0 07	 shl	 eax, 7
  0000c	03 c2		 add	 eax, edx
  0000e	ff b4 81 fc 00
	01 00		 push	 DWORD PTR [ecx+eax*4+65788]
  00015	52		 push	 edx
  00016	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00019	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 491  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RestoreSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@@Z ENDP ; CStateManager::RestoreSamplerState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z PROC ; CStateManager::SaveSamplerState, COMDAT
; _this$ = ecx

; 470  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 471  : 	// Check that we have set this up before, if not, the default is this.
; 472  : #ifdef _DEBUG
; 473  : 	if (m_bSamplerStateSavingFlag[dwStage][Type])
; 474  : 	{
; 475  : 	}
; 476  : 	m_bSamplerStateSavingFlag[dwStage][Type] = TRUE;
; 477  : #endif _DEBUG
; 478  : 	m_CopyState.m_SamplerStates[dwStage][Type] = m_CurrentState.m_SamplerStates[dwStage][Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi

; 479  : 	SetSamplerState(dwStage, Type, dwValue);

  00007	ff 75 10	 push	 DWORD PTR _dwValue$[ebp]
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _Type$[ebp]
  0000d	c1 e2 07	 shl	 edx, 7
  00010	03 d6		 add	 edx, esi
  00012	56		 push	 esi
  00013	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00016	8b 84 91 80 8a
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+35456]
  0001d	89 84 91 fc 00
	01 00		 mov	 DWORD PTR [ecx+edx*4+65788], eax
  00024	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState
  00029	5e		 pop	 esi

; 480  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SaveSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ENDP ; CStateManager::SaveSamplerState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_pdwValue$ = 16						; size = 4
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z PROC ; CStateManager::GetTextureStageState, COMDAT
; _this$ = ecx

; 464  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b c1		 mov	 eax, ecx

; 465  : 	*pdwValue = m_CurrentState.m_TextureStates[dwStage][Type];

  00005	8b 4d 08	 mov	 ecx, DWORD PTR _dwStage$[ebp]
  00008	c1 e1 07	 shl	 ecx, 7
  0000b	03 4d 0c	 add	 ecx, DWORD PTR _Type$[ebp]
  0000e	8b 8c 88 80 7a
	00 00		 mov	 ecx, DWORD PTR [eax+ecx*4+31360]
  00015	8b 45 10	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00018	89 08		 mov	 DWORD PTR [eax], ecx

; 466  : }

  0001a	5d		 pop	 ebp
  0001b	c2 0c 00	 ret	 12			; 0000000cH
?GetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@PAK@Z ENDP ; CStateManager::GetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SetTextureStageState, COMDAT
; _this$ = ecx

; 455  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 456  : 	if (m_CurrentState.m_TextureStates[dwStage][Type] == dwValue)

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	c1 e0 07	 shl	 eax, 7
  0000b	03 45 0c	 add	 eax, DWORD PTR _Type$[ebp]
  0000e	53		 push	 ebx
  0000f	56		 push	 esi
  00010	8b 75 10	 mov	 esi, DWORD PTR _dwValue$[ebp]
  00013	39 b4 81 80 7a
	00 00		 cmp	 DWORD PTR [ecx+eax*4+31360], esi
  0001a	8d 1c 81	 lea	 ebx, DWORD PTR [ecx+eax*4]
  0001d	74 1a		 je	 SHORT $LN1@SetTexture

; 457  : 		return;
; 458  : 
; 459  : 	m_lpD3DDev->SetTextureStageState(dwStage, Type, dwValue);

  0001f	8b 81 90 63 01
	00		 mov	 eax, DWORD PTR [ecx+91024]
  00025	56		 push	 esi
  00026	ff 75 0c	 push	 DWORD PTR _Type$[ebp]
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	ff 91 0c 01 00
	00		 call	 DWORD PTR [ecx+268]

; 460  : 	m_CurrentState.m_TextureStates[dwStage][Type] = dwValue;

  00033	89 b3 80 7a 00
	00		 mov	 DWORD PTR [ebx+31360], esi
$LN1@SetTexture:

; 461  : }

  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SetTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z PROC ; CStateManager::RestoreTextureStageState, COMDAT
; _this$ = ecx

; 444  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 445  : #ifdef _DEBUG
; 446  : 	if (!m_bTextureStageStateSavingFlag[dwStage][Type])
; 447  : 	{
; 448  : 	}
; 449  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = FALSE;
; 450  : #endif _DEBUG
; 451  : 	SetTextureStageState(dwStage, Type, m_CopyState.m_TextureStates[dwStage][Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _Type$[ebp]
  00009	c1 e0 07	 shl	 eax, 7
  0000c	03 c2		 add	 eax, edx
  0000e	ff b4 81 fc f0
	00 00		 push	 DWORD PTR [ecx+eax*4+61692]
  00015	52		 push	 edx
  00016	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00019	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 452  : }

  0001e	5d		 pop	 ebp
  0001f	c2 08 00	 ret	 8
?RestoreTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@@Z ENDP ; CStateManager::RestoreTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_Type$ = 12						; size = 4
_dwValue$ = 16						; size = 4
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z PROC ; CStateManager::SaveTextureStageState, COMDAT
; _this$ = ecx

; 431  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 432  : 	// Check that we have set this up before, if not, the default is this.
; 433  : #ifdef _DEBUG
; 434  : 	if (m_bTextureStageStateSavingFlag[dwStage][Type])
; 435  : 	{
; 436  : 	}
; 437  : 	m_bTextureStageStateSavingFlag[dwStage][Type] = TRUE;
; 438  : #endif _DEBUG
; 439  : 	m_CopyState.m_TextureStates[dwStage][Type] = m_CurrentState.m_TextureStates[dwStage][Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi

; 440  : 	SetTextureStageState(dwStage, Type, dwValue);

  00007	ff 75 10	 push	 DWORD PTR _dwValue$[ebp]
  0000a	8b 75 0c	 mov	 esi, DWORD PTR _Type$[ebp]
  0000d	c1 e2 07	 shl	 edx, 7
  00010	03 d6		 add	 edx, esi
  00012	56		 push	 esi
  00013	ff 75 08	 push	 DWORD PTR _dwStage$[ebp]
  00016	8b 84 91 80 7a
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+31360]
  0001d	89 84 91 fc f0
	00 00		 mov	 DWORD PTR [ecx+edx*4+61692], eax
  00024	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  00029	5e		 pop	 esi

; 441  : }

  0002a	5d		 pop	 ebp
  0002b	c2 0c 00	 ret	 12			; 0000000cH
?SaveTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ENDP ; CStateManager::SaveTextureStageState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreTexture@CStateManager@@QAEXK@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
?RestoreTexture@CStateManager@@QAEXK@Z PROC		; CStateManager::RestoreTexture, COMDAT
; _this$ = ecx

; 411  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 412  : 	SetTexture(dwStage, m_CopyState.m_Textures[dwStage]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	ff b4 81 7c 17
	01 00		 push	 DWORD PTR [ecx+eax*4+71548]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture

; 413  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreTexture@CStateManager@@QAEXK@Z ENDP		; CStateManager::RestoreTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture9@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_ppTexture$ = 12					; size = 4
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture9@@@Z PROC ; CStateManager::GetTexture, COMDAT
; _this$ = ecx

; 425  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 426  : 	*ppTexture = m_CurrentState.m_Textures[dwStage];

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwStage$[ebp]
  00006	8b 8c 81 00 a1
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+41216]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _ppTexture$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 427  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetTexture@CStateManager@@QAEXKPAPAUIDirect3DBaseTexture9@@@Z ENDP ; CStateManager::GetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z PROC ; CStateManager::SetTexture, COMDAT
; _this$ = ecx

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  : 	if (pTexture == m_CurrentState.m_Textures[dwStage])

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _pTexture$[ebp]
  0000a	3b b4 91 00 a1
	00 00		 cmp	 esi, DWORD PTR [ecx+edx*4+41216]
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN1@SetTexture

; 418  : 		return;
; 419  : 
; 420  : 	m_lpD3DDev->SetTexture(dwStage, pTexture);

  00017	8b 81 90 63 01
	00		 mov	 eax, DWORD PTR [ecx+91024]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 04 01 00
	00		 call	 DWORD PTR [ecx+260]

; 421  : 	m_CurrentState.m_Textures[dwStage] = pTexture;

  00028	89 b7 00 a1 00
	00		 mov	 DWORD PTR [edi+41216], esi
$LN1@SetTexture:

; 422  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ENDP ; CStateManager::SetTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z
_TEXT	SEGMENT
_dwStage$ = 8						; size = 4
_pTexture$ = 12						; size = 4
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z PROC ; CStateManager::SaveTexture, COMDAT
; _this$ = ecx

; 404  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 405  : 	// Check that we have set this up before, if not, the default is this.
; 406  : 	m_CopyState.m_Textures[dwStage] = m_CurrentState.m_Textures[dwStage];

  00003	8b 55 08	 mov	 edx, DWORD PTR _dwStage$[ebp]
  00006	8b 84 91 00 a1
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+41216]
  0000d	89 84 91 7c 17
	01 00		 mov	 DWORD PTR [ecx+edx*4+71548], eax

; 407  : 	SetTexture(dwStage, pTexture);

  00014	89 55 08	 mov	 DWORD PTR _dwStage$[ebp], edx

; 408  : }

  00017	5d		 pop	 ebp

; 407  : 	SetTexture(dwStage, pTexture);

  00018	e9 00 00 00 00	 jmp	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
?SaveTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ENDP ; CStateManager::SaveTexture
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_pdwValue$ = 12						; size = 4
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z PROC ; CStateManager::GetRenderState, COMDAT
; _this$ = ecx

; 398  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 399  : 	*pdwValue = m_CurrentState.m_RenderStates[Type];

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	8b 8c 81 80 76
	00 00		 mov	 ecx, DWORD PTR [ecx+eax*4+30336]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR _pdwValue$[ebp]
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 400  : }

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?GetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@PAK@Z ENDP ; CStateManager::GetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_Value$ = 12						; size = 4
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SetRenderState, COMDAT
; _this$ = ecx

; 389  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 390  : 	if (m_CurrentState.m_RenderStates[Type] == Value)

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR _Value$[ebp]
  0000a	39 b4 91 80 76
	00 00		 cmp	 DWORD PTR [ecx+edx*4+30336], esi
  00011	57		 push	 edi
  00012	8d 3c 91	 lea	 edi, DWORD PTR [ecx+edx*4]
  00015	74 17		 je	 SHORT $LN1@SetRenderS

; 391  : 		return;
; 392  : 
; 393  : 	m_lpD3DDev->SetRenderState(Type, Value);

  00017	8b 81 90 63 01
	00		 mov	 eax, DWORD PTR [ecx+91024]
  0001d	56		 push	 esi
  0001e	52		 push	 edx
  0001f	50		 push	 eax
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	ff 91 e4 00 00
	00		 call	 DWORD PTR [ecx+228]

; 394  : 	m_CurrentState.m_RenderStates[Type] = Value;

  00028	89 b7 80 76 00
	00		 mov	 DWORD PTR [edi+30336], esi
$LN1@SetRenderS:

; 395  : }

  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SetRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z PROC ; CStateManager::RestoreRenderState, COMDAT
; _this$ = ecx

; 377  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 378  : #ifdef _DEBUG
; 379  : 	if (!m_bRenderStateSavingFlag[Type])
; 380  : 	{
; 381  : 	}
; 382  : 	m_bRenderStateSavingFlag[Type] = FALSE;
; 383  : #endif _DEBUG
; 384  : 
; 385  : 	SetRenderState(Type, m_CopyState.m_RenderStates[Type]);

  00003	8b 45 08	 mov	 eax, DWORD PTR _Type$[ebp]
  00006	ff b4 81 fc ec
	00 00		 push	 DWORD PTR [ecx+eax*4+60668]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 386  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ENDP ; CStateManager::RestoreRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_dwValue$ = 12						; size = 4
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z PROC ; CStateManager::SaveRenderState, COMDAT
; _this$ = ecx

; 363  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 364  : #ifdef _DEBUG
; 365  : 	if (m_bRenderStateSavingFlag[Type])
; 366  : 	{
; 367  : 	}
; 368  : 	m_bRenderStateSavingFlag[Type] = TRUE;
; 369  : #endif _DEBUG
; 370  : 
; 371  : 	// Check that we have set this up before, if not, the default is this.
; 372  : 	m_CopyState.m_RenderStates[Type] = m_CurrentState.m_RenderStates[Type];

  00003	8b 55 08	 mov	 edx, DWORD PTR _Type$[ebp]
  00006	8b 84 91 80 76
	00 00		 mov	 eax, DWORD PTR [ecx+edx*4+30336]
  0000d	89 84 91 fc ec
	00 00		 mov	 DWORD PTR [ecx+edx*4+60668], eax

; 373  : 	SetRenderState(Type, dwValue);

  00014	89 55 08	 mov	 DWORD PTR _Type$[ebp], edx

; 374  : }

  00017	5d		 pop	 ebp

; 373  : 	SetRenderState(Type, dwValue);

  00018	e9 00 00 00 00	 jmp	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ENDP ; CStateManager::SaveRenderState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?RestoreMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::RestoreMaterial, COMDAT
; _this$ = ecx

; 341  : 	SetMaterial(&m_CopyState.m_D3DMaterial);

  00000	8d 81 ac 62 01
	00		 lea	 eax, DWORD PTR [ecx+90796]
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ; CStateManager::SetMaterial

; 342  : }

  0000c	c3		 ret	 0
?RestoreMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::RestoreMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT9@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT9@@@Z PROC	; CStateManager::GetLight, COMDAT
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 24   : 	assert(index < 8);
; 25   : 	*pLight = m_kLightData.m_akD3DLight[index];

  00004	6b 75 08 68	 imul	 esi, DWORD PTR _index$[ebp], 104
  00008	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  0000d	57		 push	 edi
  0000e	8b 7d 0c	 mov	 edi, DWORD PTR _pLight$[ebp]
  00011	81 c6 00 00 00
	00		 add	 esi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00017	f3 a5		 rep movsd
  00019	5f		 pop	 edi
  0001a	5e		 pop	 esi

; 26   : }

  0001b	5d		 pop	 ebp
  0001c	c2 08 00	 ret	 8
?GetLight@CStateManager@@QAEXKPAU_D3DLIGHT9@@@Z ENDP	; CStateManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT9@@@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
_pLight$ = 12						; size = 4
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT9@@@Z PROC	; CStateManager::SetLight, COMDAT
; _this$ = ecx

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 16   : 	assert(index < SLightData::LIGHT_NUM);
; 17   : 	m_kLightData.m_akD3DLight[index] = *pLight;

  00003	8b 55 0c	 mov	 edx, DWORD PTR _pLight$[ebp]
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
  00009	8b 5d 08	 mov	 ebx, DWORD PTR _index$[ebp]
  0000c	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	6b fb 68	 imul	 edi, ebx, 104
  00016	8b f2		 mov	 esi, edx

; 18   : 
; 19   : 	m_lpD3DDev->SetLight(index, pLight);

  00018	52		 push	 edx
  00019	53		 push	 ebx
  0001a	81 c7 00 00 00
	00		 add	 edi, OFFSET ?m_kLightData@@3USLightData@@A ; m_kLightData
  00020	f3 a5		 rep movsd
  00022	8b 80 90 63 01
	00		 mov	 eax, DWORD PTR [eax+91024]
  00028	50		 push	 eax
  00029	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002b	ff 91 cc 00 00
	00		 call	 DWORD PTR [ecx+204]
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 20   : }

  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?SetLight@CStateManager@@QAEXKPBU_D3DLIGHT9@@@Z ENDP	; CStateManager::SetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL9@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL9@@@Z PROC ; CStateManager::GetMaterial, COMDAT
; _this$ = ecx

; 351  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 352  : 	// Set the renderstate and remember it.
; 353  : 	*pMaterial = m_CurrentState.m_D3DMaterial;

  00003	0f 10 81 30 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60464]
  0000a	8b 55 08	 mov	 edx, DWORD PTR _pMaterial$[ebp]
  0000d	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00010	0f 10 81 40 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60480]
  00017	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  0001b	0f 10 81 50 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60496]
  00022	0f 11 42 20	 movups	 XMMWORD PTR [edx+32], xmm0
  00026	0f 10 81 60 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60512]
  0002d	0f 11 42 30	 movups	 XMMWORD PTR [edx+48], xmm0
  00031	8b 81 70 ec 00
	00		 mov	 eax, DWORD PTR [ecx+60528]
  00037	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 354  : }

  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?GetMaterial@CStateManager@@QAEXPAU_D3DMATERIAL9@@@Z ENDP ; CStateManager::GetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z PROC ; CStateManager::SetMaterial, COMDAT
; _this$ = ecx

; 345  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 346  : 	m_lpD3DDev->SetMaterial(pMaterial);

  00004	8b 75 08	 mov	 esi, DWORD PTR _pMaterial$[ebp]
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	56		 push	 esi
  0000b	8b 87 90 63 01
	00		 mov	 eax, DWORD PTR [edi+91024]
  00011	50		 push	 eax
  00012	8b 10		 mov	 edx, DWORD PTR [eax]
  00014	ff 92 c4 00 00
	00		 call	 DWORD PTR [edx+196]

; 347  : 	m_CurrentState.m_D3DMaterial = *pMaterial;

  0001a	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0001d	0f 11 87 30 ec
	00 00		 movups	 XMMWORD PTR [edi+60464], xmm0
  00024	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00028	0f 11 87 40 ec
	00 00		 movups	 XMMWORD PTR [edi+60480], xmm0
  0002f	0f 10 46 20	 movups	 xmm0, XMMWORD PTR [esi+32]
  00033	0f 11 87 50 ec
	00 00		 movups	 XMMWORD PTR [edi+60496], xmm0
  0003a	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  0003e	0f 11 87 60 ec
	00 00		 movups	 XMMWORD PTR [edi+60512], xmm0
  00045	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00048	89 87 70 ec 00
	00		 mov	 DWORD PTR [edi+60528], eax
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi

; 348  : }

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ENDP ; CStateManager::SetMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z
_TEXT	SEGMENT
_pMaterial$ = 8						; size = 4
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z PROC ; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 334  : 	// Check that we have set this up before, if not, the default is this.
; 335  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00003	0f 10 81 30 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60464]
  0000a	8b 81 70 ec 00
	00		 mov	 eax, DWORD PTR [ecx+60528]
  00010	0f 11 81 ac 62
	01 00		 movups	 XMMWORD PTR [ecx+90796], xmm0
  00017	0f 10 81 40 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60480]
  0001e	0f 11 81 bc 62
	01 00		 movups	 XMMWORD PTR [ecx+90812], xmm0
  00025	0f 10 81 50 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60496]
  0002c	0f 11 81 cc 62
	01 00		 movups	 XMMWORD PTR [ecx+90828], xmm0
  00033	0f 10 81 60 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60512]
  0003a	0f 11 81 dc 62
	01 00		 movups	 XMMWORD PTR [ecx+90844], xmm0
  00041	89 81 ec 62 01
	00		 mov	 DWORD PTR [ecx+90860], eax

; 337  : }

  00047	5d		 pop	 ebp

; 336  : 	SetMaterial(pMaterial);

  00048	e9 00 00 00 00	 jmp	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ; CStateManager::SetMaterial
?SaveMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ENDP ; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SaveMaterial@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?SaveMaterial@CStateManager@@QAEXXZ PROC		; CStateManager::SaveMaterial, COMDAT
; _this$ = ecx

; 329  : 	m_CopyState.m_D3DMaterial = m_CurrentState.m_D3DMaterial;

  00000	0f 10 81 30 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60464]
  00007	8b 81 70 ec 00
	00		 mov	 eax, DWORD PTR [ecx+60528]
  0000d	0f 11 81 ac 62
	01 00		 movups	 XMMWORD PTR [ecx+90796], xmm0
  00014	0f 10 81 40 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60480]
  0001b	0f 11 81 bc 62
	01 00		 movups	 XMMWORD PTR [ecx+90812], xmm0
  00022	0f 10 81 50 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60496]
  00029	0f 11 81 cc 62
	01 00		 movups	 XMMWORD PTR [ecx+90828], xmm0
  00030	0f 10 81 60 ec
	00 00		 movups	 xmm0, XMMWORD PTR [ecx+60512]
  00037	0f 11 81 dc 62
	01 00		 movups	 XMMWORD PTR [ecx+90844], xmm0
  0003e	89 81 ec 62 01
	00		 mov	 DWORD PTR [ecx+90860], eax

; 330  : }

  00044	c3		 ret	 0
?SaveMaterial@CStateManager@@QAEXXZ ENDP		; CStateManager::SaveMaterial
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?EndScene@CStateManager@@QAEXXZ
_TEXT	SEGMENT
?EndScene@CStateManager@@QAEXXZ PROC			; CStateManager::EndScene, COMDAT
; _this$ = ecx

; 48   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 49   : 	m_lpD3DDev->EndScene();

  00003	8b 86 90 63 01
	00		 mov	 eax, DWORD PTR [esi+91024]
  00009	50		 push	 eax
  0000a	8b 10		 mov	 edx, DWORD PTR [eax]
  0000c	ff 92 a8 00 00
	00		 call	 DWORD PTR [edx+168]

; 50   : 	m_bScene = false;

  00012	c6 86 85 63 01
	00 00		 mov	 BYTE PTR [esi+91013], 0
  00019	5e		 pop	 esi

; 51   : }

  0001a	c3		 ret	 0
?EndScene@CStateManager@@QAEXXZ ENDP			; CStateManager::EndScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?BeginScene@CStateManager@@QAE_NXZ
_TEXT	SEGMENT
_m4View$ = -196						; size = 64
_m4Proj$ = -132						; size = 64
_m4World$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
?BeginScene@CStateManager@@QAE_NXZ PROC			; CStateManager::BeginScene, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	8b f1		 mov	 esi, ecx

; 30   : 	m_bScene = true;
; 31   : 
; 32   : 	D3DXMATRIX m4Proj;
; 33   : 	D3DXMATRIX m4View;
; 34   : 	D3DXMATRIX m4World;
; 35   : 	GetTransform(D3DTS_WORLD, &m4World);

  00016	8d 45 bc	 lea	 eax, DWORD PTR _m4World$[ebp]
  00019	50		 push	 eax
  0001a	68 00 01 00 00	 push	 256			; 00000100H
  0001f	c6 86 85 63 01
	00 01		 mov	 BYTE PTR [esi+91013], 1
  00026	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 36   : 	GetTransform(D3DTS_PROJECTION, &m4Proj);

  0002b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00031	8b ce		 mov	 ecx, esi
  00033	50		 push	 eax
  00034	6a 03		 push	 3
  00036	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 37   : 	GetTransform(D3DTS_VIEW, &m4View);

  0003b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00041	8b ce		 mov	 ecx, esi
  00043	50		 push	 eax
  00044	6a 02		 push	 2
  00046	e8 00 00 00 00	 call	 ?GetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PAU_D3DMATRIX@@@Z ; CStateManager::GetTransform

; 38   : 	SetTransform(D3DTS_WORLD, &m4World);

  0004b	8d 45 bc	 lea	 eax, DWORD PTR _m4World$[ebp]
  0004e	8b ce		 mov	 ecx, esi
  00050	50		 push	 eax
  00051	68 00 01 00 00	 push	 256			; 00000100H
  00056	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 39   : 	SetTransform(D3DTS_PROJECTION, &m4Proj);

  0005b	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _m4Proj$[ebp]
  00061	8b ce		 mov	 ecx, esi
  00063	50		 push	 eax
  00064	6a 03		 push	 3
  00066	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 40   : 	SetTransform(D3DTS_VIEW, &m4View);

  0006b	8d 85 3c ff ff
	ff		 lea	 eax, DWORD PTR _m4View$[ebp]
  00071	8b ce		 mov	 ecx, esi
  00073	50		 push	 eax
  00074	6a 02		 push	 2
  00076	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 41   : 
; 42   : 	if (FAILED(m_lpD3DDev->BeginScene()))

  0007b	8b 86 90 63 01
	00		 mov	 eax, DWORD PTR [esi+91024]
  00081	50		 push	 eax
  00082	8b 08		 mov	 ecx, DWORD PTR [eax]
  00084	ff 91 a4 00 00
	00		 call	 DWORD PTR [ecx+164]

; 43   : 		return false;
; 44   : 	return true;
; 45   : }

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0008d	85 c0		 test	 eax, eax
  0008f	5e		 pop	 esi
  00090	0f 99 c0	 setns	 al
  00093	33 cd		 xor	 ecx, ebp
  00095	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009a	8b e5		 mov	 esp, ebp
  0009c	5d		 pop	 ebp
  0009d	c3		 ret	 0
?BeginScene@CStateManager@@QAE_NXZ ENDP			; CStateManager::BeginScene
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?Restore@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_i$3$ = -4						; size = 4
_i$2$ = -4						; size = 4
?Restore@CStateManager@@QAEXXZ PROC			; CStateManager::Restore, COMDAT
; _this$ = ecx

; 112  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 113  : 	int i, j;
; 114  : 
; 115  : 	m_bForce = true;

  00009	33 f6		 xor	 esi, esi
  0000b	c6 83 84 63 01
	00 01		 mov	 BYTE PTR [ebx+91012], 1
  00012	8d bb 80 76 00
	00		 lea	 edi, DWORD PTR [ebx+30336]
$LL4@Restore:

; 116  : 
; 117  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; ++i)
; 118  : 		SetRenderState(D3DRENDERSTATETYPE(i), m_CurrentState.m_RenderStates[i]);

  00018	ff 37		 push	 DWORD PTR [edi]
  0001a	8b cb		 mov	 ecx, ebx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState
  00022	46		 inc	 esi
  00023	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  00026	81 fe 00 01 00
	00		 cmp	 esi, 256		; 00000100H
  0002c	72 ea		 jb	 SHORT $LL4@Restore

; 119  : 
; 120  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0002e	33 c0		 xor	 eax, eax
  00030	8d bb 80 7a 00
	00		 lea	 edi, DWORD PTR [ebx+31360]
  00036	89 45 fc	 mov	 DWORD PTR _i$2$[ebp], eax
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@Restore:

; 121  : 		for (j = 0; j < STATEMANAGER_MAX_TEXTURESTATES; ++j)

  00040	33 f6		 xor	 esi, esi
$LL10@Restore:

; 122  : 			SetTextureStageState(i, D3DTEXTURESTAGESTATETYPE(j), m_CurrentState.m_TextureStates[i][j]);

  00042	ff 37		 push	 DWORD PTR [edi]
  00044	8b cb		 mov	 ecx, ebx
  00046	56		 push	 esi
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _i$2$[ebp]
  00050	46		 inc	 esi
  00051	83 c7 04	 add	 edi, 4
  00054	81 fe 80 00 00
	00		 cmp	 esi, 128		; 00000080H
  0005a	72 e6		 jb	 SHORT $LL10@Restore

; 119  : 
; 120  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0005c	40		 inc	 eax
  0005d	89 45 fc	 mov	 DWORD PTR _i$2$[ebp], eax
  00060	83 f8 08	 cmp	 eax, 8
  00063	72 db		 jb	 SHORT $LL7@Restore

; 123  : 
; 124  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00065	33 c0		 xor	 eax, eax
  00067	8d bb 80 8a 00
	00		 lea	 edi, DWORD PTR [ebx+35456]
  0006d	89 45 fc	 mov	 DWORD PTR _i$3$[ebp], eax
$LL13@Restore:

; 125  : 		for (j = 0; j < STATEMANAGER_MAX_SAMPLERSTATES; ++j)

  00070	33 f6		 xor	 esi, esi
$LL16@Restore:

; 126  : 			SetSamplerState(i, D3DSAMPLERSTATETYPE(j), m_CurrentState.m_SamplerStates[i][j]);

  00072	ff 37		 push	 DWORD PTR [edi]
  00074	8b cb		 mov	 ecx, ebx
  00076	56		 push	 esi
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _i$3$[ebp]
  00080	46		 inc	 esi
  00081	83 c7 04	 add	 edi, 4
  00084	81 fe 80 00 00
	00		 cmp	 esi, 128		; 00000080H
  0008a	72 e6		 jb	 SHORT $LL16@Restore

; 123  : 
; 124  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0008c	40		 inc	 eax
  0008d	89 45 fc	 mov	 DWORD PTR _i$3$[ebp], eax
  00090	83 f8 08	 cmp	 eax, 8
  00093	72 db		 jb	 SHORT $LL13@Restore

; 127  : 
; 128  : 	for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00095	33 f6		 xor	 esi, esi
  00097	8d bb 00 a1 00
	00		 lea	 edi, DWORD PTR [ebx+41216]
  0009d	0f 1f 00	 npad	 3
$LL19@Restore:

; 129  : 		SetTexture(i, m_CurrentState.m_Textures[i]);

  000a0	ff 37		 push	 DWORD PTR [edi]
  000a2	8b cb		 mov	 ecx, ebx
  000a4	56		 push	 esi
  000a5	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
  000aa	46		 inc	 esi
  000ab	8d 7f 04	 lea	 edi, DWORD PTR [edi+4]
  000ae	83 fe 08	 cmp	 esi, 8
  000b1	72 ed		 jb	 SHORT $LL19@Restore

; 130  : 
; 131  : 	m_bForce = false;

  000b3	5f		 pop	 edi
  000b4	5e		 pop	 esi
  000b5	c6 83 84 63 01
	00 00		 mov	 BYTE PTR [ebx+91012], 0
  000bc	5b		 pop	 ebx

; 132  : }

  000bd	8b e5		 mov	 esp, ebp
  000bf	5d		 pop	 ebp
  000c0	c3		 ret	 0
?Restore@CStateManager@@QAEXXZ ENDP			; CStateManager::Restore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ?SetDefaultState@CStateManager@@QAEXXZ
_TEXT	SEGMENT
_DefaultMat$ = -1672					; size = 68
_Identity$ = -1604					; size = 64
_av4Null$ = -1540					; size = 1536
__$ArrayPad$ = -4					; size = 4
?SetDefaultState@CStateManager@@QAEXXZ PROC		; CStateManager::SetDefaultState, COMDAT
; _this$ = ecx

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 88 06 00
	00		 sub	 esp, 1672		; 00000688H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx

; 136  : 	m_CurrentState.ResetState();

  00017	8d 8f 80 76 00
	00		 lea	 ecx, DWORD PTR [edi+30336]
  0001d	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 137  : 	m_CopyState.ResetState();

  00022	8d 8f fc ec 00
	00		 lea	 ecx, DWORD PTR [edi+60668]
  00028	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 138  : 	m_ChipState.ResetState();

  0002d	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00030	e8 00 00 00 00	 call	 ?ResetState@CStateManagerState@@QAEXXZ ; CStateManagerState::ResetState

; 146  : 	SetTransform(D3DTS_WORLD, &Identity);

  00035	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  0003b	66 c7 87 84 63
	01 00 01 00	 mov	 WORD PTR [edi+91012], 1
  00044	50		 push	 eax
  00045	68 00 01 00 00	 push	 256			; 00000100H
  0004a	8b cf		 mov	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  0004c	c7 85 f4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+56], 0
  00056	c7 85 f0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+52], 0
  00060	c7 85 ec f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+48], 0
  0006a	c7 85 e8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+44], 0
  00074	c7 85 e0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+36], 0
  0007e	c7 85 dc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+32], 0
  00088	c7 85 d8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+28], 0
  00092	c7 85 d4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+24], 0
  0009c	c7 85 cc f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+16], 0
  000a6	c7 85 c8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+12], 0
  000b0	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+8], 0
  000ba	c7 85 c0 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _Identity$[ebp+4], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000c4	c7 85 f8 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+60], 1065353216 ; 3f800000H
  000ce	c7 85 e4 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+40], 1065353216 ; 3f800000H
  000d8	c7 85 d0 f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp+20], 1065353216 ; 3f800000H
  000e2	c7 85 bc f9 ff
	ff 00 00 80 3f	 mov	 DWORD PTR _Identity$[ebp], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 146  : 	SetTransform(D3DTS_WORLD, &Identity);

  000ec	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 147  : 	SetTransform(D3DTS_VIEW, &Identity);

  000f1	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  000f7	8b cf		 mov	 ecx, edi
  000f9	50		 push	 eax
  000fa	6a 02		 push	 2
  000fc	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 148  : 	SetTransform(D3DTS_PROJECTION, &Identity);

  00101	8d 85 bc f9 ff
	ff		 lea	 eax, DWORD PTR _Identity$[ebp]
  00107	8b cf		 mov	 ecx, edi
  00109	50		 push	 eax
  0010a	6a 03		 push	 3
  0010c	e8 00 00 00 00	 call	 ?SetTransform@CStateManager@@QAEXW4_D3DTRANSFORMSTATETYPE@@PBU_D3DMATRIX@@@Z ; CStateManager::SetTransform

; 149  : 
; 150  : 	D3DMATERIAL9 DefaultMat;
; 151  : 	ZeroMemory(&DefaultMat, sizeof(D3DMATERIAL9));
; 152  : 	DefaultMat.Diffuse.r = 1.0f;

  00111	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000

; 153  : 	DefaultMat.Diffuse.g = 1.0f;
; 154  : 	DefaultMat.Diffuse.b = 1.0f;
; 155  : 	DefaultMat.Diffuse.a = 1.0f;
; 156  : 	DefaultMat.Ambient.r = 1.0f;
; 157  : 	DefaultMat.Ambient.g = 1.0f;
; 158  : 	DefaultMat.Ambient.b = 1.0f;
; 159  : 	DefaultMat.Ambient.a = 1.0f;
; 160  : 	DefaultMat.Emissive.r = 0.0f;
; 161  : 	DefaultMat.Emissive.g = 0.0f;
; 162  : 	DefaultMat.Emissive.b = 0.0f;
; 163  : 	DefaultMat.Emissive.a = 0.0f;
; 164  : 	DefaultMat.Specular.r = 0.0f;
; 165  : 	DefaultMat.Specular.g = 0.0f;
; 166  : 	DefaultMat.Specular.b = 0.0f;
; 167  : 	DefaultMat.Specular.a = 0.0f;
; 168  : 	DefaultMat.Power = 0.0f;
; 169  : 
; 170  : 	SetMaterial(&DefaultMat);

  00118	8d 85 78 f9 ff
	ff		 lea	 eax, DWORD PTR _DefaultMat$[ebp]
  0011e	0f 11 85 78 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp], xmm0
  00125	8b cf		 mov	 ecx, edi
  00127	c7 85 b8 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _DefaultMat$[ebp+64], 0
  00131	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f8000003f8000003f8000003f800000
  00138	0f 11 85 88 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+16], xmm0
  0013f	50		 push	 eax
  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	0f 11 85 a8 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+48], xmm0
  0014a	0f 11 85 98 f9
	ff ff		 movups	 XMMWORD PTR _DefaultMat$[ebp+32], xmm0
  00151	e8 00 00 00 00	 call	 ?SetMaterial@CStateManager@@QAEXPBU_D3DMATERIAL9@@@Z ; CStateManager::SetMaterial

; 171  : 
; 172  : 	SetRenderState(D3DRS_DIFFUSEMATERIALSOURCE, D3DMCS_MATERIAL);

  00156	6a 00		 push	 0
  00158	68 91 00 00 00	 push	 145			; 00000091H
  0015d	8b cf		 mov	 ecx, edi
  0015f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 173  : 	SetRenderState(D3DRS_SPECULARMATERIALSOURCE, D3DMCS_MATERIAL);

  00164	6a 00		 push	 0
  00166	68 92 00 00 00	 push	 146			; 00000092H
  0016b	8b cf		 mov	 ecx, edi
  0016d	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 174  : 	SetRenderState(D3DRS_AMBIENTMATERIALSOURCE, D3DMCS_MATERIAL);

  00172	6a 00		 push	 0
  00174	68 93 00 00 00	 push	 147			; 00000093H
  00179	8b cf		 mov	 ecx, edi
  0017b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 175  : 	SetRenderState(D3DRS_EMISSIVEMATERIALSOURCE, D3DMCS_MATERIAL);

  00180	6a 00		 push	 0
  00182	68 94 00 00 00	 push	 148			; 00000094H
  00187	8b cf		 mov	 ecx, edi
  00189	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 176  : 
; 177  : 	SetRenderState(D3DRS_LASTPIXEL, FALSE);

  0018e	6a 00		 push	 0
  00190	6a 10		 push	 16			; 00000010H
  00192	8b cf		 mov	 ecx, edi
  00194	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 178  : 	SetRenderState(D3DRS_ALPHAREF, 1);

  00199	6a 01		 push	 1
  0019b	6a 18		 push	 24			; 00000018H
  0019d	8b cf		 mov	 ecx, edi
  0019f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 179  : 	SetRenderState(D3DRS_ALPHAFUNC, D3DCMP_GREATEREQUAL);

  001a4	6a 07		 push	 7
  001a6	6a 19		 push	 25			; 00000019H
  001a8	8b cf		 mov	 ecx, edi
  001aa	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 180  : 	SetRenderState(D3DRS_FOGSTART, 0);

  001af	6a 00		 push	 0
  001b1	6a 24		 push	 36			; 00000024H
  001b3	8b cf		 mov	 ecx, edi
  001b5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 181  : 	SetRenderState(D3DRS_FOGEND, 0);

  001ba	6a 00		 push	 0
  001bc	6a 25		 push	 37			; 00000025H
  001be	8b cf		 mov	 ecx, edi
  001c0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 182  : 	SetRenderState(D3DRS_FOGDENSITY, 0);

  001c5	6a 00		 push	 0
  001c7	6a 26		 push	 38			; 00000026H
  001c9	8b cf		 mov	 ecx, edi
  001cb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 183  : 	SetRenderState(D3DRS_STENCILWRITEMASK, 0xFFFFFFFF);

  001d0	6a ff		 push	 -1
  001d2	6a 3b		 push	 59			; 0000003bH
  001d4	8b cf		 mov	 ecx, edi
  001d6	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 184  : 	SetRenderState(D3DRS_AMBIENT, 0x00000000);

  001db	6a 00		 push	 0
  001dd	68 8b 00 00 00	 push	 139			; 0000008bH
  001e2	8b cf		 mov	 ecx, edi
  001e4	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 185  : 	SetRenderState(D3DRS_LOCALVIEWER, FALSE);

  001e9	6a 00		 push	 0
  001eb	68 8e 00 00 00	 push	 142			; 0000008eH
  001f0	8b cf		 mov	 ecx, edi
  001f2	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 186  : 	SetRenderState(D3DRS_NORMALIZENORMALS, FALSE);

  001f7	6a 00		 push	 0
  001f9	68 8f 00 00 00	 push	 143			; 0000008fH
  001fe	8b cf		 mov	 ecx, edi
  00200	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 187  : 	SetRenderState(D3DRS_VERTEXBLEND, D3DVBF_DISABLE);

  00205	6a 00		 push	 0
  00207	68 97 00 00 00	 push	 151			; 00000097H
  0020c	8b cf		 mov	 ecx, edi
  0020e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 188  : 	SetRenderState(D3DRS_CLIPPLANEENABLE, 0);

  00213	6a 00		 push	 0
  00215	68 98 00 00 00	 push	 152			; 00000098H
  0021a	8b cf		 mov	 ecx, edi
  0021c	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 189  : 	m_lpD3DDev->SetSoftwareVertexProcessing(false);

  00221	8b 87 90 63 01
	00		 mov	 eax, DWORD PTR [edi+91024]
  00227	6a 00		 push	 0
  00229	50		 push	 eax
  0022a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022c	ff 91 34 01 00
	00		 call	 DWORD PTR [ecx+308]

; 190  : 	SetRenderState(D3DRS_MULTISAMPLEANTIALIAS, TRUE);

  00232	6a 01		 push	 1
  00234	68 a1 00 00 00	 push	 161			; 000000a1H
  00239	8b cf		 mov	 ecx, edi
  0023b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 191  : 	SetRenderState(D3DRS_MULTISAMPLEMASK, 0xFFFFFFFF);

  00240	6a ff		 push	 -1
  00242	68 a2 00 00 00	 push	 162			; 000000a2H
  00247	8b cf		 mov	 ecx, edi
  00249	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 192  : 	SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE);

  0024e	6a 00		 push	 0
  00250	68 a7 00 00 00	 push	 167			; 000000a7H
  00255	8b cf		 mov	 ecx, edi
  00257	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 193  : 	SetRenderState(D3DRS_COLORWRITEENABLE, 0xFFFFFFFF);

  0025c	6a ff		 push	 -1
  0025e	68 a8 00 00 00	 push	 168			; 000000a8H
  00263	8b cf		 mov	 ecx, edi
  00265	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 194  : 	SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);

  0026a	6a 03		 push	 3
  0026c	6a 08		 push	 8
  0026e	8b cf		 mov	 ecx, edi
  00270	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 195  : 	SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD);

  00275	6a 02		 push	 2
  00277	6a 09		 push	 9
  00279	8b cf		 mov	 ecx, edi
  0027b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 196  : 	SetRenderState(D3DRS_CULLMODE, D3DCULL_CW);

  00280	6a 02		 push	 2
  00282	6a 16		 push	 22			; 00000016H
  00284	8b cf		 mov	 ecx, edi
  00286	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 197  : 	SetRenderState(D3DRS_ALPHABLENDENABLE, FALSE);

  0028b	6a 00		 push	 0
  0028d	6a 1b		 push	 27			; 0000001bH
  0028f	8b cf		 mov	 ecx, edi
  00291	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 198  : 	SetRenderState(D3DRS_BLENDOP, D3DBLENDOP_ADD);

  00296	6a 01		 push	 1
  00298	68 ab 00 00 00	 push	 171			; 000000abH
  0029d	8b cf		 mov	 ecx, edi
  0029f	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 199  : 	SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

  002a4	6a 05		 push	 5
  002a6	6a 13		 push	 19			; 00000013H
  002a8	8b cf		 mov	 ecx, edi
  002aa	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 200  : 	SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

  002af	6a 06		 push	 6
  002b1	6a 14		 push	 20			; 00000014H
  002b3	8b cf		 mov	 ecx, edi
  002b5	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 201  : 	SetRenderState(D3DRS_FOGENABLE, FALSE);

  002ba	6a 00		 push	 0
  002bc	6a 1c		 push	 28			; 0000001cH
  002be	8b cf		 mov	 ecx, edi
  002c0	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 202  : 	SetRenderState(D3DRS_FOGCOLOR, 0xFF000000);

  002c5	68 00 00 00 ff	 push	 -16777216		; ff000000H
  002ca	6a 22		 push	 34			; 00000022H
  002cc	8b cf		 mov	 ecx, edi
  002ce	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 203  : 	SetRenderState(D3DRS_FOGTABLEMODE, D3DFOG_NONE);

  002d3	6a 00		 push	 0
  002d5	6a 23		 push	 35			; 00000023H
  002d7	8b cf		 mov	 ecx, edi
  002d9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 204  : 	SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_LINEAR);

  002de	6a 03		 push	 3
  002e0	68 8c 00 00 00	 push	 140			; 0000008cH
  002e5	8b cf		 mov	 ecx, edi
  002e7	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 205  : 	SetRenderState(D3DRS_RANGEFOGENABLE, FALSE);

  002ec	6a 00		 push	 0
  002ee	6a 30		 push	 48			; 00000030H
  002f0	8b cf		 mov	 ecx, edi
  002f2	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 206  : 	SetRenderState(D3DRS_ZENABLE, TRUE);

  002f7	6a 01		 push	 1
  002f9	6a 07		 push	 7
  002fb	8b cf		 mov	 ecx, edi
  002fd	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 207  : 	SetRenderState(D3DRS_ZFUNC, D3DCMP_LESSEQUAL);

  00302	6a 04		 push	 4
  00304	6a 17		 push	 23			; 00000017H
  00306	8b cf		 mov	 ecx, edi
  00308	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 208  : 	SetRenderState(D3DRS_ZWRITEENABLE, TRUE);

  0030d	6a 01		 push	 1
  0030f	6a 0e		 push	 14			; 0000000eH
  00311	8b cf		 mov	 ecx, edi
  00313	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 209  : 	SetRenderState(D3DRS_DITHERENABLE, TRUE);

  00318	6a 01		 push	 1
  0031a	6a 1a		 push	 26			; 0000001aH
  0031c	8b cf		 mov	 ecx, edi
  0031e	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 210  : 	SetRenderState(D3DRS_STENCILENABLE, FALSE);

  00323	6a 00		 push	 0
  00325	6a 34		 push	 52			; 00000034H
  00327	8b cf		 mov	 ecx, edi
  00329	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 211  : 	SetRenderState(D3DRS_ALPHATESTENABLE, FALSE);

  0032e	6a 00		 push	 0
  00330	6a 0f		 push	 15			; 0000000fH
  00332	8b cf		 mov	 ecx, edi
  00334	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 212  : 	SetRenderState(D3DRS_CLIPPING, TRUE);

  00339	6a 01		 push	 1
  0033b	68 88 00 00 00	 push	 136			; 00000088H
  00340	8b cf		 mov	 ecx, edi
  00342	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 213  : 	SetRenderState(D3DRS_LIGHTING, FALSE);

  00347	6a 00		 push	 0
  00349	68 89 00 00 00	 push	 137			; 00000089H
  0034e	8b cf		 mov	 ecx, edi
  00350	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 214  : 	SetRenderState(D3DRS_SPECULARENABLE, FALSE);

  00355	6a 00		 push	 0
  00357	6a 1d		 push	 29			; 0000001dH
  00359	8b cf		 mov	 ecx, edi
  0035b	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 215  : 	SetRenderState(D3DRS_COLORVERTEX, FALSE);

  00360	6a 00		 push	 0
  00362	68 8d 00 00 00	 push	 141			; 0000008dH
  00367	8b cf		 mov	 ecx, edi
  00369	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 216  : 	SetRenderState(D3DRS_WRAP0, 0);

  0036e	6a 00		 push	 0
  00370	68 80 00 00 00	 push	 128			; 00000080H
  00375	8b cf		 mov	 ecx, edi
  00377	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 217  : 	SetRenderState(D3DRS_WRAP1, 0);

  0037c	6a 00		 push	 0
  0037e	68 81 00 00 00	 push	 129			; 00000081H
  00383	8b cf		 mov	 ecx, edi
  00385	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 218  : 	SetRenderState(D3DRS_WRAP2, 0);

  0038a	6a 00		 push	 0
  0038c	68 82 00 00 00	 push	 130			; 00000082H
  00391	8b cf		 mov	 ecx, edi
  00393	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 219  : 	SetRenderState(D3DRS_WRAP3, 0);

  00398	6a 00		 push	 0
  0039a	68 83 00 00 00	 push	 131			; 00000083H
  0039f	8b cf		 mov	 ecx, edi
  003a1	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 220  : 	SetRenderState(D3DRS_WRAP4, 0);

  003a6	6a 00		 push	 0
  003a8	68 84 00 00 00	 push	 132			; 00000084H
  003ad	8b cf		 mov	 ecx, edi
  003af	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 221  : 	SetRenderState(D3DRS_WRAP5, 0);

  003b4	6a 00		 push	 0
  003b6	68 85 00 00 00	 push	 133			; 00000085H
  003bb	8b cf		 mov	 ecx, edi
  003bd	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 222  : 	SetRenderState(D3DRS_WRAP6, 0);

  003c2	6a 00		 push	 0
  003c4	68 86 00 00 00	 push	 134			; 00000086H
  003c9	8b cf		 mov	 ecx, edi
  003cb	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 223  : 	SetRenderState(D3DRS_WRAP7, 0);

  003d0	6a 00		 push	 0
  003d2	68 87 00 00 00	 push	 135			; 00000087H
  003d7	8b cf		 mov	 ecx, edi
  003d9	e8 00 00 00 00	 call	 ?SetRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SetRenderState

; 224  : 
; 225  : 	SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

  003de	6a 04		 push	 4
  003e0	6a 01		 push	 1
  003e2	6a 00		 push	 0
  003e4	8b cf		 mov	 ecx, edi
  003e6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 226  : 	SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  003eb	6a 02		 push	 2
  003ed	6a 02		 push	 2
  003ef	6a 00		 push	 0
  003f1	8b cf		 mov	 ecx, edi
  003f3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 227  : 	SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

  003f8	6a 01		 push	 1
  003fa	6a 03		 push	 3
  003fc	6a 00		 push	 0
  003fe	8b cf		 mov	 ecx, edi
  00400	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 228  : 	SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00405	6a 02		 push	 2
  00407	6a 05		 push	 5
  00409	6a 00		 push	 0
  0040b	8b cf		 mov	 ecx, edi
  0040d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 229  : 	SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

  00412	6a 01		 push	 1
  00414	6a 06		 push	 6
  00416	6a 00		 push	 0
  00418	8b cf		 mov	 ecx, edi
  0041a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 230  : 	SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

  0041f	6a 02		 push	 2
  00421	6a 04		 push	 4
  00423	6a 00		 push	 0
  00425	8b cf		 mov	 ecx, edi
  00427	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 231  : 
; 232  : 	SetTextureStageState(1, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0042c	6a 01		 push	 1
  0042e	6a 01		 push	 1
  00430	6a 01		 push	 1
  00432	8b cf		 mov	 ecx, edi
  00434	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 233  : 	SetTextureStageState(1, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00439	6a 02		 push	 2
  0043b	6a 02		 push	 2
  0043d	6a 01		 push	 1
  0043f	8b cf		 mov	 ecx, edi
  00441	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 234  : 	SetTextureStageState(1, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00446	6a 00		 push	 0
  00448	6a 03		 push	 3
  0044a	6a 01		 push	 1
  0044c	8b cf		 mov	 ecx, edi
  0044e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 235  : 	SetTextureStageState(1, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00453	6a 01		 push	 1
  00455	6a 04		 push	 4
  00457	6a 01		 push	 1
  00459	8b cf		 mov	 ecx, edi
  0045b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 236  : 	SetTextureStageState(1, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00460	6a 02		 push	 2
  00462	6a 05		 push	 5
  00464	6a 01		 push	 1
  00466	8b cf		 mov	 ecx, edi
  00468	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 237  : 	SetTextureStageState(1, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  0046d	6a 00		 push	 0
  0046f	6a 06		 push	 6
  00471	6a 01		 push	 1
  00473	8b cf		 mov	 ecx, edi
  00475	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 238  : 
; 239  : 	SetTextureStageState(2, D3DTSS_COLOROP, D3DTOP_DISABLE);

  0047a	6a 01		 push	 1
  0047c	6a 01		 push	 1
  0047e	6a 02		 push	 2
  00480	8b cf		 mov	 ecx, edi
  00482	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 240  : 	SetTextureStageState(2, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00487	6a 02		 push	 2
  00489	6a 02		 push	 2
  0048b	6a 02		 push	 2
  0048d	8b cf		 mov	 ecx, edi
  0048f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 241  : 	SetTextureStageState(2, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00494	6a 00		 push	 0
  00496	6a 03		 push	 3
  00498	6a 02		 push	 2
  0049a	8b cf		 mov	 ecx, edi
  0049c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 242  : 	SetTextureStageState(2, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  004a1	6a 01		 push	 1
  004a3	6a 04		 push	 4
  004a5	6a 02		 push	 2
  004a7	8b cf		 mov	 ecx, edi
  004a9	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 243  : 	SetTextureStageState(2, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  004ae	6a 02		 push	 2
  004b0	6a 05		 push	 5
  004b2	6a 02		 push	 2
  004b4	8b cf		 mov	 ecx, edi
  004b6	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 244  : 	SetTextureStageState(2, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  004bb	6a 00		 push	 0
  004bd	6a 06		 push	 6
  004bf	6a 02		 push	 2
  004c1	8b cf		 mov	 ecx, edi
  004c3	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 245  : 
; 246  : 	SetTextureStageState(3, D3DTSS_COLOROP, D3DTOP_DISABLE);

  004c8	6a 01		 push	 1
  004ca	6a 01		 push	 1
  004cc	6a 03		 push	 3
  004ce	8b cf		 mov	 ecx, edi
  004d0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 247  : 	SetTextureStageState(3, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  004d5	6a 02		 push	 2
  004d7	6a 02		 push	 2
  004d9	6a 03		 push	 3
  004db	8b cf		 mov	 ecx, edi
  004dd	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 248  : 	SetTextureStageState(3, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  004e2	6a 00		 push	 0
  004e4	6a 03		 push	 3
  004e6	6a 03		 push	 3
  004e8	8b cf		 mov	 ecx, edi
  004ea	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 249  : 	SetTextureStageState(3, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  004ef	6a 01		 push	 1
  004f1	6a 04		 push	 4
  004f3	6a 03		 push	 3
  004f5	8b cf		 mov	 ecx, edi
  004f7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 250  : 	SetTextureStageState(3, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  004fc	6a 02		 push	 2
  004fe	6a 05		 push	 5
  00500	6a 03		 push	 3
  00502	8b cf		 mov	 ecx, edi
  00504	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 251  : 	SetTextureStageState(3, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00509	6a 00		 push	 0
  0050b	6a 06		 push	 6
  0050d	6a 03		 push	 3
  0050f	8b cf		 mov	 ecx, edi
  00511	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 252  : 
; 253  : 	SetTextureStageState(4, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00516	6a 01		 push	 1
  00518	6a 01		 push	 1
  0051a	6a 04		 push	 4
  0051c	8b cf		 mov	 ecx, edi
  0051e	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 254  : 	SetTextureStageState(4, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00523	6a 02		 push	 2
  00525	6a 02		 push	 2
  00527	6a 04		 push	 4
  00529	8b cf		 mov	 ecx, edi
  0052b	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 255  : 	SetTextureStageState(4, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  00530	6a 00		 push	 0
  00532	6a 03		 push	 3
  00534	6a 04		 push	 4
  00536	8b cf		 mov	 ecx, edi
  00538	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 256  : 	SetTextureStageState(4, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0053d	6a 01		 push	 1
  0053f	6a 04		 push	 4
  00541	6a 04		 push	 4
  00543	8b cf		 mov	 ecx, edi
  00545	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 257  : 	SetTextureStageState(4, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  0054a	6a 02		 push	 2
  0054c	6a 05		 push	 5
  0054e	6a 04		 push	 4
  00550	8b cf		 mov	 ecx, edi
  00552	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 258  : 	SetTextureStageState(4, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00557	6a 00		 push	 0
  00559	6a 06		 push	 6
  0055b	6a 04		 push	 4
  0055d	8b cf		 mov	 ecx, edi
  0055f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 259  : 
; 260  : 	SetTextureStageState(5, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00564	6a 01		 push	 1
  00566	6a 01		 push	 1
  00568	6a 05		 push	 5
  0056a	8b cf		 mov	 ecx, edi
  0056c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 261  : 	SetTextureStageState(5, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  00571	6a 02		 push	 2
  00573	6a 02		 push	 2
  00575	6a 05		 push	 5
  00577	8b cf		 mov	 ecx, edi
  00579	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 262  : 	SetTextureStageState(5, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0057e	6a 00		 push	 0
  00580	6a 03		 push	 3
  00582	6a 05		 push	 5
  00584	8b cf		 mov	 ecx, edi
  00586	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 263  : 	SetTextureStageState(5, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  0058b	6a 01		 push	 1
  0058d	6a 04		 push	 4
  0058f	6a 05		 push	 5
  00591	8b cf		 mov	 ecx, edi
  00593	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 264  : 	SetTextureStageState(5, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00598	6a 02		 push	 2
  0059a	6a 05		 push	 5
  0059c	6a 05		 push	 5
  0059e	8b cf		 mov	 ecx, edi
  005a0	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 265  : 	SetTextureStageState(5, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  005a5	6a 00		 push	 0
  005a7	6a 06		 push	 6
  005a9	6a 05		 push	 5
  005ab	8b cf		 mov	 ecx, edi
  005ad	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 266  : 
; 267  : 	SetTextureStageState(6, D3DTSS_COLOROP, D3DTOP_DISABLE);

  005b2	6a 01		 push	 1
  005b4	6a 01		 push	 1
  005b6	6a 06		 push	 6
  005b8	8b cf		 mov	 ecx, edi
  005ba	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 268  : 	SetTextureStageState(6, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  005bf	6a 02		 push	 2
  005c1	6a 02		 push	 2
  005c3	6a 06		 push	 6
  005c5	8b cf		 mov	 ecx, edi
  005c7	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 269  : 	SetTextureStageState(6, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  005cc	6a 00		 push	 0
  005ce	6a 03		 push	 3
  005d0	6a 06		 push	 6
  005d2	8b cf		 mov	 ecx, edi
  005d4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 270  : 	SetTextureStageState(6, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  005d9	6a 01		 push	 1
  005db	6a 04		 push	 4
  005dd	6a 06		 push	 6
  005df	8b cf		 mov	 ecx, edi
  005e1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 271  : 	SetTextureStageState(6, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  005e6	6a 02		 push	 2
  005e8	6a 05		 push	 5
  005ea	6a 06		 push	 6
  005ec	8b cf		 mov	 ecx, edi
  005ee	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 272  : 	SetTextureStageState(6, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  005f3	6a 00		 push	 0
  005f5	6a 06		 push	 6
  005f7	6a 06		 push	 6
  005f9	8b cf		 mov	 ecx, edi
  005fb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 273  : 
; 274  : 	SetTextureStageState(7, D3DTSS_COLOROP, D3DTOP_DISABLE);

  00600	6a 01		 push	 1
  00602	6a 01		 push	 1
  00604	6a 07		 push	 7
  00606	8b cf		 mov	 ecx, edi
  00608	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 275  : 	SetTextureStageState(7, D3DTSS_COLORARG1, D3DTA_TEXTURE);

  0060d	6a 02		 push	 2
  0060f	6a 02		 push	 2
  00611	6a 07		 push	 7
  00613	8b cf		 mov	 ecx, edi
  00615	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 276  : 	SetTextureStageState(7, D3DTSS_COLORARG2, D3DTA_DIFFUSE);

  0061a	6a 00		 push	 0
  0061c	6a 03		 push	 3
  0061e	6a 07		 push	 7
  00620	8b cf		 mov	 ecx, edi
  00622	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 277  : 	SetTextureStageState(7, D3DTSS_ALPHAOP, D3DTOP_DISABLE);

  00627	6a 01		 push	 1
  00629	6a 04		 push	 4
  0062b	6a 07		 push	 7
  0062d	8b cf		 mov	 ecx, edi
  0062f	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 278  : 	SetTextureStageState(7, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

  00634	6a 02		 push	 2
  00636	6a 05		 push	 5
  00638	6a 07		 push	 7
  0063a	8b cf		 mov	 ecx, edi
  0063c	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 279  : 	SetTextureStageState(7, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);

  00641	6a 00		 push	 0
  00643	6a 06		 push	 6
  00645	6a 07		 push	 7
  00647	8b cf		 mov	 ecx, edi
  00649	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 280  : 
; 281  : 	SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0);

  0064e	6a 00		 push	 0
  00650	6a 0b		 push	 11			; 0000000bH
  00652	6a 00		 push	 0
  00654	8b cf		 mov	 ecx, edi
  00656	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 282  : 	SetTextureStageState(1, D3DTSS_TEXCOORDINDEX, 1);

  0065b	6a 01		 push	 1
  0065d	6a 0b		 push	 11			; 0000000bH
  0065f	6a 01		 push	 1
  00661	8b cf		 mov	 ecx, edi
  00663	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 283  : 	SetTextureStageState(2, D3DTSS_TEXCOORDINDEX, 2);

  00668	6a 02		 push	 2
  0066a	6a 0b		 push	 11			; 0000000bH
  0066c	6a 02		 push	 2
  0066e	8b cf		 mov	 ecx, edi
  00670	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 284  : 	SetTextureStageState(3, D3DTSS_TEXCOORDINDEX, 3);

  00675	6a 03		 push	 3
  00677	6a 0b		 push	 11			; 0000000bH
  00679	6a 03		 push	 3
  0067b	8b cf		 mov	 ecx, edi
  0067d	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 285  : 	SetTextureStageState(4, D3DTSS_TEXCOORDINDEX, 4);

  00682	6a 04		 push	 4
  00684	6a 0b		 push	 11			; 0000000bH
  00686	6a 04		 push	 4
  00688	8b cf		 mov	 ecx, edi
  0068a	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 286  : 	SetTextureStageState(5, D3DTSS_TEXCOORDINDEX, 5);

  0068f	6a 05		 push	 5
  00691	6a 0b		 push	 11			; 0000000bH
  00693	6a 05		 push	 5
  00695	8b cf		 mov	 ecx, edi
  00697	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 287  : 	SetTextureStageState(6, D3DTSS_TEXCOORDINDEX, 6);

  0069c	6a 06		 push	 6
  0069e	6a 0b		 push	 11			; 0000000bH
  006a0	6a 06		 push	 6
  006a2	8b cf		 mov	 ecx, edi
  006a4	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 288  : 	SetTextureStageState(7, D3DTSS_TEXCOORDINDEX, 7);

  006a9	6a 07		 push	 7
  006ab	6a 0b		 push	 11			; 0000000bH
  006ad	6a 07		 push	 7
  006af	8b cf		 mov	 ecx, edi
  006b1	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState
  006b6	33 f6		 xor	 esi, esi
$LL4@SetDefault:

; 289  : 
; 290  : 	for (DWORD i = 0; i < 8; ++i)
; 291  : 	{
; 292  : 		SetSamplerState(i, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);

  006b8	6a 02		 push	 2
  006ba	6a 06		 push	 6
  006bc	56		 push	 esi
  006bd	8b cf		 mov	 ecx, edi
  006bf	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 293  : 		SetSamplerState(i, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);

  006c4	6a 02		 push	 2
  006c6	6a 05		 push	 5
  006c8	56		 push	 esi
  006c9	8b cf		 mov	 ecx, edi
  006cb	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 294  : 		SetSamplerState(i, D3DSAMP_MIPFILTER, D3DTEXF_ANISOTROPIC);

  006d0	6a 03		 push	 3
  006d2	6a 07		 push	 7
  006d4	56		 push	 esi
  006d5	8b cf		 mov	 ecx, edi
  006d7	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 295  : 		SetSamplerState(i, D3DSAMP_ADDRESSU, D3DTADDRESS_WRAP);

  006dc	6a 01		 push	 1
  006de	6a 01		 push	 1
  006e0	56		 push	 esi
  006e1	8b cf		 mov	 ecx, edi
  006e3	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 296  : 		SetSamplerState(i, D3DSAMP_ADDRESSV, D3DTADDRESS_WRAP);

  006e8	6a 01		 push	 1
  006ea	6a 02		 push	 2
  006ec	56		 push	 esi
  006ed	8b cf		 mov	 ecx, edi
  006ef	e8 00 00 00 00	 call	 ?SetSamplerState@CStateManager@@QAEXKW4_D3DSAMPLERSTATETYPE@@K@Z ; CStateManager::SetSamplerState

; 297  : 		SetTextureStageState(i, D3DTSS_TEXTURETRANSFORMFLAGS, 0);

  006f4	6a 00		 push	 0
  006f6	6a 18		 push	 24			; 00000018H
  006f8	56		 push	 esi
  006f9	8b cf		 mov	 ecx, edi
  006fb	e8 00 00 00 00	 call	 ?SetTextureStageState@CStateManager@@QAEXKW4_D3DTEXTURESTAGESTATETYPE@@K@Z ; CStateManager::SetTextureStageState

; 298  : 		SetTexture(i, NULL);

  00700	6a 00		 push	 0
  00702	56		 push	 esi
  00703	8b cf		 mov	 ecx, edi
  00705	e8 00 00 00 00	 call	 ?SetTexture@CStateManager@@QAEXKPAUIDirect3DBaseTexture9@@@Z ; CStateManager::SetTexture
  0070a	46		 inc	 esi
  0070b	83 fe 08	 cmp	 esi, 8
  0070e	72 a8		 jb	 SHORT $LL4@SetDefault

; 299  : 	}
; 300  : 	SetPixelShader(0);

  00710	6a 00		 push	 0
  00712	8b cf		 mov	 ecx, edi
  00714	e8 00 00 00 00	 call	 ?SetPixelShader@CStateManager@@QAEXPAUIDirect3DPixelShader9@@@Z ; CStateManager::SetPixelShader

; 301  : 	SetFVF(D3DFVF_XYZ);

  00719	6a 02		 push	 2
  0071b	8b cf		 mov	 ecx, edi
  0071d	e8 00 00 00 00	 call	 ?SetFVF@CStateManager@@QAEXK@Z ; CStateManager::SetFVF

; 302  : 
; 303  : 	D3DXVECTOR4 av4Null[STATEMANAGER_MAX_VCONSTANTS];
; 304  : 	memset(av4Null, 0, sizeof(av4Null));

  00722	68 00 06 00 00	 push	 1536			; 00000600H
  00727	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  0072d	6a 00		 push	 0
  0072f	50		 push	 eax
  00730	e8 00 00 00 00	 call	 _memset
  00735	83 c4 0c	 add	 esp, 12			; 0000000cH

; 305  : 	SetVertexShaderConstant(0, av4Null, STATEMANAGER_MAX_VCONSTANTS);

  00738	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  0073e	8b cf		 mov	 ecx, edi
  00740	6a 60		 push	 96			; 00000060H
  00742	50		 push	 eax
  00743	6a 00		 push	 0
  00745	e8 00 00 00 00	 call	 ?SetVertexShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetVertexShaderConstant

; 306  : 	SetPixelShaderConstant(0, av4Null, STATEMANAGER_MAX_PCONSTANTS);

  0074a	6a 08		 push	 8
  0074c	8d 85 fc f9 ff
	ff		 lea	 eax, DWORD PTR _av4Null$[ebp]
  00752	8b cf		 mov	 ecx, edi
  00754	50		 push	 eax
  00755	6a 00		 push	 0
  00757	e8 00 00 00 00	 call	 ?SetPixelShaderConstant@CStateManager@@QAEXKPBXK@Z ; CStateManager::SetPixelShaderConstant

; 307  : 	m_bForce = false;
; 308  : 
; 309  : #ifdef _DEBUG
; 310  : 	int i, j;
; 311  : 	for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)
; 312  : 		m_bRenderStateSavingFlag[i] = FALSE;
; 313  : 
; 314  : 	for (j = 0; j < STATEMANAGER_MAX_TRANSFORMSTATES; j++)
; 315  : 		m_bTransformSavingFlag[j] = FALSE;
; 316  : 
; 317  : 	for (j = 0; j < STATEMANAGER_MAX_STAGES; ++j)
; 318  : 		for (i = 0; i < STATEMANAGER_MAX_TEXTURESTATES; ++i)
; 319  : 			m_bTextureStageStateSavingFlag[j][i] = FALSE;
; 320  : 	for (j = 0; j < STATEMANAGER_MAX_STAGES; ++j)
; 321  : 		for (i = 0; i < STATEMANAGER_MAX_SAMPLERSTATES; ++i)
; 322  : 			m_bSamplerStateSavingFlag[j][i] = FALSE;
; 323  : #endif _DEBUG
; 324  : }

  0075c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0075f	c6 87 84 63 01
	00 00		 mov	 BYTE PTR [edi+91012], 0
  00766	33 cd		 xor	 ecx, ebp
  00768	5f		 pop	 edi
  00769	5e		 pop	 esi
  0076a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0076f	8b e5		 mov	 esp, ebp
  00771	5d		 pop	 ebp
  00772	c3		 ret	 0
?SetDefaultState@CStateManager@@QAEXXZ ENDP		; CStateManager::SetDefaultState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ??1CStateManager@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CStateManager@@UAE@XZ PROC				; CStateManager::~CStateManager, COMDAT
; _this$ = ecx

; 62   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CStateManager@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 63   : 	if (m_lpD3DDev)

  00025	8b 8e 90 63 01
	00		 mov	 ecx, DWORD PTR [esi+91024]
  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
  00031	85 c9		 test	 ecx, ecx
  00033	74 10		 je	 SHORT $LN2@CStateMana

; 64   : 	{
; 65   : 		m_lpD3DDev->Release();

  00035	8b 01		 mov	 eax, DWORD PTR [ecx]
  00037	51		 push	 ecx
  00038	ff 50 08	 call	 DWORD PTR [eax+8]

; 66   : 		m_lpD3DDev = NULL;

  0003b	c7 86 90 63 01
	00 00 00 00 00	 mov	 DWORD PTR [esi+91024], 0
$LN2@CStateMana:

; 68   : }

  00045	8d 8e 78 63 01
	00		 lea	 ecx, DWORD PTR [esi+91000]
  0004b	e8 00 00 00 00	 call	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 19   : 	{

  00050	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 68   : }

  00060	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00063	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006a	59		 pop	 ecx
  0006b	5e		 pop	 esi
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
  00070	cc		 int	 3
  00071	cc		 int	 3
  00072	cc		 int	 3
  00073	cc		 int	 3
  00074	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CStateManager@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CStateManager@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CStateManager@@UAE@XZ ENDP				; CStateManager::~CStateManager
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp
;	COMDAT ??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lpDevice$ = 8						; size = 4
??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z PROC	; CStateManager::CStateManager, COMDAT
; _this$ = ecx

; 54   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  00029	89 35 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, esi ; CSingleton<CStateManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 54   : {

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 117  : 	CStateManagerState()

  00036	8d 86 f8 75 00
	00		 lea	 eax, DWORD PTR [esi+30200]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 54   : {

  0003c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CStateManager@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 117  : 	CStateManagerState()

  00042	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00047	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL148@CStateMana:

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00050	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00056	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00059	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00060	83 e9 01	 sub	 ecx, 1
  00063	75 eb		 jne	 SHORT $LL148@CStateMana

; 42   : 		: m_lpIndexData(pIndexData),

  00065	89 8e 78 76 00
	00		 mov	 DWORD PTR [esi+30328], ecx

; 117  : 	CStateManagerState()

  0006b	8d 86 74 ec 00
	00		 lea	 eax, DWORD PTR [esi+60532]

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  00071	89 8e 7c 76 00
	00		 mov	 DWORD PTR [esi+30332], ecx

; 117  : 	CStateManagerState()

  00077	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0007c	0f 1f 40 00	 npad	 4
$LL152@CStateMana:

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00080	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00086	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00089	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  00090	83 e9 01	 sub	 ecx, 1
  00093	75 eb		 jne	 SHORT $LL152@CStateMana

; 42   : 		: m_lpIndexData(pIndexData),

  00095	89 8e f4 ec 00
	00		 mov	 DWORD PTR [esi+60660], ecx

; 117  : 	CStateManagerState()

  0009b	8d 86 f0 62 01
	00		 lea	 eax, DWORD PTR [esi+90864]

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  000a1	89 8e f8 ec 00
	00		 mov	 DWORD PTR [esi+60664], ecx

; 117  : 	CStateManagerState()

  000a7	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  000ac	0f 1f 40 00	 npad	 4
$LL156@CStateMana:

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  000b0	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  000b6	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  000b9	c7 40 fc 00 00
	00 00		 mov	 DWORD PTR [eax-4], 0
  000c0	83 e9 01	 sub	 ecx, 1
  000c3	75 eb		 jne	 SHORT $LL156@CStateMana

; 42   : 		: m_lpIndexData(pIndexData),

  000c5	89 8e 70 63 01
	00		 mov	 DWORD PTR [esi+90992], ecx

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  000cb	89 8e 74 63 01
	00		 mov	 DWORD PTR [esi+90996], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000d1	89 8e 78 63 01
	00		 mov	 DWORD PTR [esi+91000], ecx
  000d7	89 8e 7c 63 01
	00		 mov	 DWORD PTR [esi+91004], ecx
  000dd	89 8e 80 63 01
	00		 mov	 DWORD PTR [esi+91008], ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.cpp

; 58   : 	SetDevice(lpDevice);

  000e3	ff 75 08	 push	 DWORD PTR _lpDevice$[ebp]
  000e6	89 8e 90 63 01
	00		 mov	 DWORD PTR [esi+91024], ecx
  000ec	88 8e 85 63 01
	00		 mov	 BYTE PTR [esi+91013], cl
  000f2	8b ce		 mov	 ecx, esi
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	c7 86 88 63 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+91016], 2
  00102	c7 86 8c 63 01
	00 02 00 00 00	 mov	 DWORD PTR [esi+91020], 2
  0010c	e8 00 00 00 00	 call	 ?SetDevice@CStateManager@@AAEXPAUIDirect3DDevice9@@@Z ; CStateManager::SetDevice

; 59   : }

  00111	8b c6		 mov	 eax, esi
  00113	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00116	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0011d	59		 pop	 ecx
  0011e	5e		 pop	 esi
  0011f	8b e5		 mov	 esp, ebp
  00121	5d		 pop	 ebp
  00122	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCStateManager@@@@UAE@XZ ; CSingleton<CStateManager>::~CSingleton<CStateManager>
__unwindfunclet$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 78 63 01
	00		 add	 ecx, 91000		; 00016378H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@VCStateID@@V?$allocator@VCStateID@@@std@@@std@@QAE@XZ ; std::vector<CStateID,std::allocator<CStateID> >::~vector<CStateID,std::allocator<CStateID> >
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00027	33 c8		 xor	 ecx, eax
  00029	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z
  00033	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CStateManager@@QAE@PAUIDirect3DDevice9@@@Z ENDP	; CStateManager::CStateManager
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z PROC	; CSingleton<CStateManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCStateManager@@@@UAEPAXI@Z ENDP	; CSingleton<CStateManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCStateManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCStateManager@@@@UAE@XZ PROC		; CSingleton<CStateManager>::~CSingleton<CStateManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCStateManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A, 0 ; CSingleton<CStateManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCStateManager@@@@UAE@XZ ENDP		; CSingleton<CStateManager>::~CSingleton<CStateManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
;	COMDAT ?ResetState@CStateManagerState@@QAEXXZ
_TEXT	SEGMENT
?ResetState@CStateManagerState@@QAEXXZ PROC		; CStateManagerState::ResetState, COMDAT
; _this$ = ecx

; 122  : 	{

  00000	8b d1		 mov	 edx, ecx

; 123  : 		DWORD i, y;
; 124  : 
; 125  : 		for (i = 0; i < STATEMANAGER_MAX_RENDERSTATES; i++)

  00002	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0000e	8b fa		 mov	 edi, edx
  00010	f3 ab		 rep stosd

; 126  : 			m_RenderStates[i] = 0x7FFFFFFF;
; 127  : 
; 128  : 		for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  00012	8d ba 00 04 00
	00		 lea	 edi, DWORD PTR [edx+1024]
  00018	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0001d	f3 ab		 rep stosd

; 129  : 			for (y = 0; y < STATEMANAGER_MAX_TEXTURESTATES; ++y)
; 130  : 				m_TextureStates[i][y] = 0x7FFFFFFF;
; 131  : 		for (i = 0; i < STATEMANAGER_MAX_STAGES; ++i)

  0001f	8d ba 00 14 00
	00		 lea	 edi, DWORD PTR [edx+5120]
  00025	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0002a	f3 ab		 rep stosd

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  0002c	33 f6		 xor	 esi, esi

; 132  : 			for (y = 0; y < STATEMANAGER_MAX_SAMPLERSTATES; ++y)
; 133  : 				m_SamplerStates[i][y] = 0x7FFFFFFF;
; 134  : 
; 135  : 		for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  0002e	8d 82 f4 75 00
	00		 lea	 eax, DWORD PTR [edx+30196]

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00034	33 ff		 xor	 edi, edi

; 132  : 			for (y = 0; y < STATEMANAGER_MAX_SAMPLERSTATES; ++y)
; 133  : 				m_SamplerStates[i][y] = 0x7FFFFFFF;
; 134  : 
; 135  : 		for (i = 0; i < STATEMANAGER_MAX_STREAMS; i++)

  00036	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0003b	0f 1f 44 00 00	 npad	 5
$LL19@ResetState:

; 136  : 			m_StreamData[i] = CStreamData();

  00040	89 30		 mov	 DWORD PTR [eax], esi
  00042	8d 40 08	 lea	 eax, DWORD PTR [eax+8]
  00045	89 78 fc	 mov	 DWORD PTR [eax-4], edi
  00048	83 e9 01	 sub	 ecx, 1
  0004b	75 f3		 jne	 SHORT $LL19@ResetState

; 137  : 
; 138  : 		m_IndexData = CIndexData();

  0004d	89 b2 74 76 00
	00		 mov	 DWORD PTR [edx+30324], esi

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  00053	8d 82 e4 2a 00
	00		 lea	 eax, DWORD PTR [edx+10980]

; 137  : 
; 138  : 		m_IndexData = CIndexData();

  00059	89 b2 78 76 00
	00		 mov	 DWORD PTR [edx+30328], esi

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  0005f	b9 2c 01 00 00	 mov	 ecx, 300		; 0000012cH
  00064	5f		 pop	 edi

; 139  : 
; 140  : 		for (i = 0; i < STATEMANAGER_MAX_STAGES; i++)
; 141  : 			m_Textures[i] = NULL;

  00065	89 b2 80 2a 00
	00		 mov	 DWORD PTR [edx+10880], esi
  0006b	89 b2 84 2a 00
	00		 mov	 DWORD PTR [edx+10884], esi
  00071	89 b2 88 2a 00
	00		 mov	 DWORD PTR [edx+10888], esi
  00077	89 b2 8c 2a 00
	00		 mov	 DWORD PTR [edx+10892], esi
  0007d	89 b2 90 2a 00
	00		 mov	 DWORD PTR [edx+10896], esi
  00083	89 b2 94 2a 00
	00		 mov	 DWORD PTR [edx+10900], esi
  00089	89 b2 98 2a 00
	00		 mov	 DWORD PTR [edx+10904], esi
  0008f	89 b2 9c 2a 00
	00		 mov	 DWORD PTR [edx+10908], esi

; 43   : 		m_BaseVertexIndex(BaseVertexIndex)

  00095	5e		 pop	 esi
$LL25@ResetState:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  00096	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 145  : 		for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  0009d	8d 40 40	 lea	 eax, DWORD PTR [eax+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 2261 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =

  000a0	c7 40 c0 00 00
	00 00		 mov	 DWORD PTR [eax-64], 0
  000a7	c7 40 bc 00 00
	00 00		 mov	 DWORD PTR [eax-68], 0
  000ae	c7 40 b8 00 00
	00 00		 mov	 DWORD PTR [eax-72], 0
  000b5	c7 40 b0 00 00
	00 00		 mov	 DWORD PTR [eax-80], 0
  000bc	c7 40 ac 00 00
	00 00		 mov	 DWORD PTR [eax-84], 0
  000c3	c7 40 a8 00 00
	00 00		 mov	 DWORD PTR [eax-88], 0
  000ca	c7 40 a4 00 00
	00 00		 mov	 DWORD PTR [eax-92], 0
  000d1	c7 40 9c 00 00
	00 00		 mov	 DWORD PTR [eax-100], 0
  000d8	c7 40 98 00 00
	00 00		 mov	 DWORD PTR [eax-104], 0
  000df	c7 40 94 00 00
	00 00		 mov	 DWORD PTR [eax-108], 0
  000e6	c7 40 90 00 00
	00 00		 mov	 DWORD PTR [eax-112], 0

; 2262 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 2263 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 2264 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;
; 2265 : 
; 2266 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  000ed	c7 40 c8 00 00
	80 3f		 mov	 DWORD PTR [eax-56], 1065353216 ; 3f800000H
  000f4	c7 40 b4 00 00
	80 3f		 mov	 DWORD PTR [eax-76], 1065353216 ; 3f800000H
  000fb	c7 40 a0 00 00
	80 3f		 mov	 DWORD PTR [eax-96], 1065353216 ; 3f800000H
  00102	c7 40 8c 00 00
	80 3f		 mov	 DWORD PTR [eax-116], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h

; 145  : 		for (i = 0; i < STATEMANAGER_MAX_TRANSFORMSTATES; i++)

  00109	83 e9 01	 sub	 ecx, 1
  0010c	75 88		 jne	 SHORT $LL25@ResetState

; 146  : 			D3DXMatrixIdentity(&m_Matrices[i]);
; 147  : 
; 148  : 		for (i = 0; i < STATEMANAGER_MAX_VCONSTANTS; i++)

  0010e	0f 57 c0	 xorps	 xmm0, xmm0
  00111	8d 82 00 24 00
	00		 lea	 eax, DWORD PTR [edx+9216]
  00117	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  0011c	0f 1f 40 00	 npad	 4
$LL28@ResetState:
  00120	8d 40 10	 lea	 eax, DWORD PTR [eax+16]

; 149  : 			m_VertexShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);

  00123	0f 11 40 f0	 movups	 XMMWORD PTR [eax-16], xmm0
  00127	83 e9 01	 sub	 ecx, 1
  0012a	75 f4		 jne	 SHORT $LL28@ResetState

; 150  : 
; 151  : 		for (i = 0; i < STATEMANAGER_MAX_PCONSTANTS; i++)
; 152  : 			m_PixelShaderConstants[i] = D3DXVECTOR4(0.0f, 0.0f, 0.0f, 0.0f);
; 153  : 
; 154  : 		//m_dwPixelShader = 0;
; 155  : 		//m_dwVertexShader = 0;
; 156  : 		//m_dwVertexDeclaration = 0;
; 157  : 		//m_dwFVF = D3DFVF_XYZ;
; 158  : 		//m_bVertexProcessing = FALSE;
; 159  : 		m_dwFVF = D3DFVF_XYZ;
; 160  : 		m_dwVertexShader = NULL;
; 161  : 		m_dwPixelShader = NULL;
; 162  : 		ZeroMemory(&m_Matrices, sizeof(D3DXMATRIX) * STATEMANAGER_MAX_TRANSFORMSTATES);

  0012c	0f 57 c0	 xorps	 xmm0, xmm0
  0012f	8d 82 b0 2a 00
	00		 lea	 eax, DWORD PTR [edx+10928]
  00135	68 00 4b 00 00	 push	 19200			; 00004b00H
  0013a	0f 11 82 00 2a
	00 00		 movups	 XMMWORD PTR [edx+10752], xmm0
  00141	51		 push	 ecx
  00142	0f 11 82 10 2a
	00 00		 movups	 XMMWORD PTR [edx+10768], xmm0
  00149	50		 push	 eax
  0014a	0f 11 82 20 2a
	00 00		 movups	 XMMWORD PTR [edx+10784], xmm0
  00151	0f 11 82 30 2a
	00 00		 movups	 XMMWORD PTR [edx+10800], xmm0
  00158	0f 11 82 40 2a
	00 00		 movups	 XMMWORD PTR [edx+10816], xmm0
  0015f	0f 11 82 50 2a
	00 00		 movups	 XMMWORD PTR [edx+10832], xmm0
  00166	0f 11 82 60 2a
	00 00		 movups	 XMMWORD PTR [edx+10848], xmm0
  0016d	0f 11 82 70 2a
	00 00		 movups	 XMMWORD PTR [edx+10864], xmm0
  00174	c7 82 ac 2a 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+10924], 2
  0017e	89 8a a0 2a 00
	00		 mov	 DWORD PTR [edx+10912], ecx
  00184	89 8a a8 2a 00
	00		 mov	 DWORD PTR [edx+10920], ecx
  0018a	e8 00 00 00 00	 call	 _memset
  0018f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 163  : 	}

  00192	c3		 ret	 0
?ResetState@CStateManagerState@@QAEXXZ ENDP		; CStateManagerState::ResetState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\StateManager.h
;	COMDAT ??_FCStreamData@@QAEXXZ
_TEXT	SEGMENT
??_FCStreamData@@QAEXXZ PROC				; CStreamData::`default constructor closure', COMDAT
; _this$ = ecx

; 26   : 	CStreamData(LPDIRECT3DVERTEXBUFFER9 pStreamData = NULL, UINT Stride = 0) : m_lpStreamData(pStreamData), m_Stride(Stride)

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000d	c3		 ret	 0
??_FCStreamData@@QAEXXZ ENDP				; CStreamData::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 315  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.h
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 240  :     D3DXVECTOR4() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
