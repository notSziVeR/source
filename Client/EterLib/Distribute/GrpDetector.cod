; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\GrpDetector.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?msc_aszD3DDevDesc@D3D_CDeviceInfo@@1PAPBDA	; D3D_CDeviceInfo::msc_aszD3DDevDesc
PUBLIC	?msc_aeD3DDevType@D3D_CDeviceInfo@@1QBW4_D3DDEVTYPE@@B ; D3D_CDeviceInfo::msc_aeD3DDevType
PUBLIC	??_C@_03KNIPLHMP@HAL@				; `string'
PUBLIC	??_C@_03GPMNEAGC@REF@				; `string'
;	COMDAT ??_C@_03GPMNEAGC@REF@
CONST	SEGMENT
??_C@_03GPMNEAGC@REF@ DB 'REF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNIPLHMP@HAL@
CONST	SEGMENT
??_C@_03KNIPLHMP@HAL@ DB 'HAL', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?msc_aeD3DDevType@D3D_CDeviceInfo@@1QBW4_D3DDEVTYPE@@B DD 01H ; D3D_CDeviceInfo::msc_aeD3DDevType
	DD	02H
CONST	ENDS
_DATA	SEGMENT
?msc_aszD3DDevDesc@D3D_CDeviceInfo@@1PAPBDA DD FLAT:??_C@_03KNIPLHMP@HAL@ ; D3D_CDeviceInfo::msc_aszD3DDevDesc
	DD	FLAT:??_C@_03GPMNEAGC@REF@
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__snprintf
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_SModeInfo::GetString
PUBLIC	?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D9@@W4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::Build
PUBLIC	?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetDisplayModeNum
PUBLIC	?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
PUBLIC	?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z ; D3D_CAdapterDisplayModeList::GetDisplayModer
PUBLIC	?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::GetPixelFormatr
PUBLIC	??0D3D_CDeviceInfo@@QAE@XZ			; D3D_CDeviceInfo::D3D_CDeviceInfo
PUBLIC	??1D3D_CDeviceInfo@@QAE@XZ			; D3D_CDeviceInfo::~D3D_CDeviceInfo
PUBLIC	?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDeviceInfo::Build
PUBLIC	?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z		; D3D_CDeviceInfo::Find
PUBLIC	?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ	; D3D_CDeviceInfo::GetD3DModeInfoNum
PUBLIC	?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDeviceInfo::GetString
PUBLIC	?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z ; D3D_CDeviceInfo::FindDepthStencilFormat
PUBLIC	?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ; D3D_CDeviceInfo::GetD3DModeInfop
PUBLIC	??0D3D_CAdapterInfo@@QAE@XZ			; D3D_CAdapterInfo::D3D_CAdapterInfo
PUBLIC	??1D3D_CAdapterInfo@@QAE@XZ			; D3D_CAdapterInfo::~D3D_CAdapterInfo
PUBLIC	?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z		; D3D_CAdapterInfo::Find
PUBLIC	?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D9@@IP6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ; D3D_CAdapterInfo::Build
PUBLIC	?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CAdapterInfo::GetString
PUBLIC	?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
PUBLIC	?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ ; D3D_CAdapterInfo::GetDesktopD3DDisplayModep
PUBLIC	?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ; D3D_CAdapterInfo::GetD3DDeviceInfop
PUBLIC	?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z ; D3D_CAdapterInfo::GetD3DModeInfop
PUBLIC	??0D3D_CDisplayModeAutoDetector@@QAE@XZ		; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector
PUBLIC	??1D3D_CDisplayModeAutoDetector@@QAE@XZ		; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector
PUBLIC	?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z ; D3D_CDisplayModeAutoDetector::Find
PUBLIC	?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D9@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDisplayModeAutoDetector::Build
PUBLIC	?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
PUBLIC	?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z ; D3D_CDisplayModeAutoDetector::GetD3DModeInfop
PUBLIC	?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDisplayModeAutoDetector::GetString
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_07NFANNNEC@UNKNOWN@			; `string'
PUBLIC	??_C@_04NFAOCDCH@HWVP@				; `string'
PUBLIC	??_C@_04EFINLMAB@MXVP@				; `string'
PUBLIC	??_C@_04MCDOIFLE@SWVP@				; `string'
PUBLIC	??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@ ; `string'
PUBLIC	??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_04CDOPIHIK@?$CFd?4?5@			; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@		; `string'
PUBLIC	??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@		; `string'
EXTRN	??_L@YGXPAXIIP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIIP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	_qsort:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@
CONST	SEGMENT
??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@ DB 'Adapter %d', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@
CONST	SEGMENT
??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@ DB 'Device %d', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CDOPIHIK@?$CFd?4?5@
CONST	SEGMENT
??_C@_04CDOPIHIK@?$CFd?4?5@ DB '%d. ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@ DB '%'
	DB	's', 0dH, 0aH, '========================================', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@
CONST	SEGMENT
??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@ DB '%dx%dx%d %s', 0dH, 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCDOIFLE@SWVP@
CONST	SEGMENT
??_C@_04MCDOIFLE@SWVP@ DB 'SWVP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFINLMAB@MXVP@
CONST	SEGMENT
??_C@_04EFINLMAB@MXVP@ DB 'MXVP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NFAOCDCH@HWVP@
CONST	SEGMENT
??_C@_04NFAOCDCH@HWVP@ DB 'HWVP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NFANNNEC@UNKNOWN@
CONST	SEGMENT
??_C@_07NFANNNEC@UNKNOWN@ DB 'UNKNOWN', 00H		; `string'
CONST	ENDS
;	COMDAT ?szVP@?1??GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4PAPBDA
_DATA	SEGMENT
?szVP@?1??GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4PAPBDA DD FLAT:??_C@_07NFANNNEC@UNKNOWN@ ; `D3D_SModeInfo::GetString'::`2'::szVP
	DD	FLAT:??_C@_04NFAOCDCH@HWVP@
	DD	FLAT:??_C@_04EFINLMAB@MXVP@
	DD	FLAT:??_C@_04MCDOIFLE@SWVP@
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1D3D_CDisplayModeAutoDetector@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1D3D_CAdapterInfo@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?CompareD3DDisplayModeOrder@@YAHPBX0@Z
_TEXT	SEGMENT
_arg1$ = 8						; size = 4
_arg2$ = 12						; size = 4
?CompareD3DDisplayModeOrder@@YAHPBX0@Z PROC		; CompareD3DDisplayModeOrder, COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 	D3DDISPLAYMODE* p1 = (D3DDISPLAYMODE*)arg1;
; 37   : 	D3DDISPLAYMODE* p2 = (D3DDISPLAYMODE*)arg2;
; 38   : 
; 39   : 	if ( p1->Format > p2->Format ) { return -1; }

  00003	8b 45 08	 mov	 eax, DWORD PTR _arg1$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _arg2$[ebp]
  00009	56		 push	 esi
  0000a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0000d	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00010	7f 25		 jg	 SHORT $LN11@CompareD3D

; 40   : 	if ( p1->Format < p2->Format ) { return +1; }

  00012	7c 1b		 jl	 SHORT $LN9@CompareD3D

; 41   : 	if ( p1->Width  < p2->Width ) { return -1; }

  00014	8b 10		 mov	 edx, DWORD PTR [eax]
  00016	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00018	72 1d		 jb	 SHORT $LN11@CompareD3D

; 42   : 	if ( p1->Width  > p2->Width ) { return +1; }

  0001a	77 13		 ja	 SHORT $LN9@CompareD3D

; 43   : 	if ( p1->Height < p2->Height ) { return -1; }

  0001c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00022	3b c1		 cmp	 eax, ecx
  00024	72 11		 jb	 SHORT $LN11@CompareD3D

; 44   : 	if ( p1->Height > p2->Height ) { return +1; }

  00026	3b c8		 cmp	 ecx, eax
  00028	5e		 pop	 esi
  00029	1b c0		 sbb	 eax, eax
  0002b	f7 d8		 neg	 eax

; 45   : 
; 46   : 	return 0;
; 47   : }

  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
$LN9@CompareD3D:

; 44   : 	if ( p1->Height > p2->Height ) { return +1; }

  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	5e		 pop	 esi

; 45   : 
; 46   : 	return 0;
; 47   : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
$LN11@CompareD3D:

; 43   : 	if ( p1->Height < p2->Height ) { return -1; }

  00037	83 c8 ff	 or	 eax, -1
  0003a	5e		 pop	 esi

; 45   : 
; 46   : 	return 0;
; 47   : }

  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?CompareD3DDisplayModeOrder@@YAHPBX0@Z ENDP		; CompareD3DDisplayModeOrder
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv143 = -1036						; size = 4
_szText$1 = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_CDisplayModeAutoDetector::GetString, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pstEnumList$[ebp]
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx

; 685  : 	for (UINT iD3DAdapterInfo = 0; iD3DAdapterInfo < m_uD3DAdapterInfoCount; ++iD3DAdapterInfo)

  0001b	33 f6		 xor	 esi, esi
  0001d	8d 87 a8 2c 03
	00		 lea	 eax, DWORD PTR [edi+208040]
  00023	89 85 f4 fb ff
	ff		 mov	 DWORD PTR tv143[ebp], eax
  00029	39 30		 cmp	 DWORD PTR [eax], esi
  0002b	76 57		 jbe	 SHORT $LN3@GetString
  0002d	0f 1f 00	 npad	 3
$LL4@GetString:

; 688  : 		_snprintf(szText, sizeof(szText), "Adapter %d\r\n", iD3DAdapterInfo);

  00030	56		 push	 esi
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NKJKCJIP@Adapter?5?$CFd?$AN?6@
  00036	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0003c	68 01 04 00 00	 push	 1025			; 00000401H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00047	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 688  : 		_snprintf(szText, sizeof(szText), "Adapter %d\r\n", iD3DAdapterInfo);

  0004d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00050	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL14@GetString:
  00053	8a 08		 mov	 cl, BYTE PTR [eax]
  00055	40		 inc	 eax
  00056	84 c9		 test	 cl, cl
  00058	75 f9		 jne	 SHORT $LL14@GetString
  0005a	2b c2		 sub	 eax, edx

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005c	8b cb		 mov	 ecx, ebx
  0005e	50		 push	 eax
  0005f	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 692  : 		rkAdapterInfo.GetString(pstEnumList);

  0006b	53		 push	 ebx
  0006c	8b cf		 mov	 ecx, edi
  0006e	e8 00 00 00 00	 call	 ?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CAdapterInfo::GetString
  00073	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR tv143[ebp]
  00079	46		 inc	 esi
  0007a	81 c7 44 51 00
	00		 add	 edi, 20804		; 00005144H
  00080	3b 30		 cmp	 esi, DWORD PTR [eax]
  00082	72 ac		 jb	 SHORT $LL4@GetString
$LN3@GetString:

; 693  : 	}
; 694  : }

  00084	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00087	5f		 pop	 edi
  00088	5e		 pop	 esi
  00089	33 cd		 xor	 ecx, ebp
  0008b	5b		 pop	 ebx
  0008c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 04 00	 ret	 4
?GetString@D3D_CDisplayModeAutoDetector@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_CDisplayModeAutoDetector::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z
_TEXT	SEGMENT
_iD3DAdapterInfo$ = 8					; size = 4
_iD3DDevInfo$ = 12					; size = 4
_iD3D_SModeInfo$ = 16					; size = 4
?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z PROC ; D3D_CDisplayModeAutoDetector::GetD3DModeInfop, COMDAT
; _this$ = ecx

; 628  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 629  : 	D3D_CAdapterInfo* pkD3DAdapterInfo = GetD3DAdapterInfop(iD3DAdapterInfo);

  00003	ff 75 08	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop

; 630  : 	if (pkD3DAdapterInfo)

  0000b	85 c0		 test	 eax, eax
  0000d	74 1c		 je	 SHORT $LN4@GetD3DMode

; 631  : 	{
; 632  : 		D3D_CDeviceInfo* pkD3DDevInfo = pkD3DAdapterInfo->GetD3DDeviceInfop(iD3DDevInfo);

  0000f	ff 75 0c	 push	 DWORD PTR _iD3DDevInfo$[ebp]
  00012	8b c8		 mov	 ecx, eax
  00014	e8 00 00 00 00	 call	 ?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ; D3D_CAdapterInfo::GetD3DDeviceInfop

; 633  : 		if (pkD3DDevInfo)

  00019	85 c0		 test	 eax, eax
  0001b	74 0e		 je	 SHORT $LN4@GetD3DMode

; 634  : 		{
; 635  : 			D3D_SModeInfo* pkD3D_SModeInfo = pkD3DDevInfo->GetD3DModeInfop(iD3D_SModeInfo);

  0001d	ff 75 10	 push	 DWORD PTR _iD3D_SModeInfo$[ebp]
  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ; D3D_CDeviceInfo::GetD3DModeInfop

; 643  : }

  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
$LN4@GetD3DMode:

; 636  : 			if (pkD3D_SModeInfo)
; 637  : 			{
; 638  : 				return pkD3D_SModeInfo;
; 639  : 			}
; 640  : 		}
; 641  : 	}
; 642  : 	return NULL;

  0002b	33 c0		 xor	 eax, eax

; 643  : }

  0002d	5d		 pop	 ebp
  0002e	c2 0c 00	 ret	 12			; 0000000cH
?GetD3DModeInfop@D3D_CDisplayModeAutoDetector@@QAEPAUD3D_SModeInfo@@III@Z ENDP ; D3D_CDisplayModeAutoDetector::GetD3DModeInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z
_TEXT	SEGMENT
_iD3DAdapterInfo$ = 8					; size = 4
?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z PROC ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop, COMDAT
; _this$ = ecx

; 618  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 619  : 	if (iD3DAdapterInfo >= m_uD3DAdapterInfoCount)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DAdapterInfo$[ebp]
  00006	3b 81 a8 2c 03
	00		 cmp	 eax, DWORD PTR [ecx+208040]
  0000c	72 06		 jb	 SHORT $LN2@GetD3DAdap

; 620  : 	{
; 621  : 		return NULL;

  0000e	33 c0		 xor	 eax, eax

; 625  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@GetD3DAdap:

; 622  : 	}
; 623  : 
; 624  : 	return &m_akD3DAdapterInfo[iD3DAdapterInfo];

  00014	69 c0 44 51 00
	00		 imul	 eax, eax, 20804
  0001a	03 c1		 add	 eax, ecx

; 625  : }

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
?GetD3DAdapterInfop@D3D_CDisplayModeAutoDetector@@QAEPAVD3D_CAdapterInfo@@I@Z ENDP ; D3D_CDisplayModeAutoDetector::GetD3DAdapterInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D9@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z
_TEXT	SEGMENT
_rkD3D$ = 8						; size = 4
_pfnConfirmDevice$ = 12					; size = 4
?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D9@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z PROC ; D3D_CDisplayModeAutoDetector::Build, COMDAT
; _this$ = ecx

; 660  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 661  : 	m_uD3DAdapterInfoCount = 0;
; 662  : 
; 663  : 	UINT uTotalAdapterCount = rkD3D.GetAdapterCount();

  00008	8b 4d 08	 mov	 ecx, DWORD PTR _rkD3D$[ebp]
  0000b	51		 push	 ecx
  0000c	c7 87 a8 2c 03
	00 00 00 00 00	 mov	 DWORD PTR [edi+208040], 0
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	ff 50 10	 call	 DWORD PTR [eax+16]

; 664  : 	uTotalAdapterCount = min(uTotalAdapterCount, D3DADAPTERINFO_NUM);

  0001b	bb 0a 00 00 00	 mov	 ebx, 10			; 0000000aH
  00020	3b c3		 cmp	 eax, ebx
  00022	0f 42 d8	 cmovb	 ebx, eax
  00025	33 f6		 xor	 esi, esi

; 665  : 
; 666  : 	for (UINT iD3DAdapterInfo = 0; iD3DAdapterInfo < uTotalAdapterCount; ++iD3DAdapterInfo)

  00027	85 db		 test	 ebx, ebx
  00029	74 2c		 je	 SHORT $LN15@Build
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@Build:

; 667  : 	{
; 668  : 		D3D_CAdapterInfo& rkAdapterInfo = m_akD3DAdapterInfo[m_uD3DAdapterInfoCount];
; 669  : 		if (rkAdapterInfo.Build(rkD3D, iD3DAdapterInfo, pfnConfirmDevice))

  00030	ff 75 0c	 push	 DWORD PTR _pfnConfirmDevice$[ebp]
  00033	69 8f a8 2c 03
	00 44 51 00 00	 imul	 ecx, DWORD PTR [edi+208040], 20804
  0003d	56		 push	 esi
  0003e	ff 75 08	 push	 DWORD PTR _rkD3D$[ebp]
  00041	03 cf		 add	 ecx, edi
  00043	e8 00 00 00 00	 call	 ?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D9@@IP6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ; D3D_CAdapterInfo::Build
  00048	85 c0		 test	 eax, eax
  0004a	74 06		 je	 SHORT $LN2@Build

; 670  : 		{
; 671  : 			++m_uD3DAdapterInfoCount;

  0004c	ff 87 a8 2c 03
	00		 inc	 DWORD PTR [edi+208040]
$LN2@Build:

; 665  : 
; 666  : 	for (UINT iD3DAdapterInfo = 0; iD3DAdapterInfo < uTotalAdapterCount; ++iD3DAdapterInfo)

  00052	46		 inc	 esi
  00053	3b f3		 cmp	 esi, ebx
  00055	72 d9		 jb	 SHORT $LL4@Build
$LN15@Build:

; 672  : 		}
; 673  : 	}
; 674  : 
; 675  : 	if (m_uD3DAdapterInfoCount > 0)

  00057	33 c0		 xor	 eax, eax
  00059	3b 87 a8 2c 03
	00		 cmp	 eax, DWORD PTR [edi+208040]
  0005f	5f		 pop	 edi
  00060	1b c0		 sbb	 eax, eax
  00062	5e		 pop	 esi
  00063	f7 d8		 neg	 eax
  00065	5b		 pop	 ebx

; 676  : 	{
; 677  : 		return TRUE;
; 678  : 	}
; 679  : 
; 680  : 	return FALSE;
; 681  : }

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?Build@D3D_CDisplayModeAutoDetector@@QAEHAAUIDirect3D9@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ENDP ; D3D_CDisplayModeAutoDetector::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z
_TEXT	SEGMENT
_uScrWidth$ = 8						; size = 4
_uScrHeight$ = 12					; size = 4
_uScrDepthBits$ = 16					; size = 4
_isWindowed$ = 20					; size = 4
_piD3DModeInfo$ = 24					; size = 4
_piD3DDevInfo$ = 28					; size = 4
_piD3DAdapterInfo$ = 32					; size = 4
?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z PROC ; D3D_CDisplayModeAutoDetector::Find, COMDAT
; _this$ = ecx

; 646  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx

; 647  : 	for (UINT iD3DAdapterInfo = 0; iD3DAdapterInfo < m_uD3DAdapterInfoCount; ++iD3DAdapterInfo)

  00008	33 f6		 xor	 esi, esi
  0000a	39 b7 a8 2c 03
	00		 cmp	 DWORD PTR [edi+208040], esi
  00010	8d 9f a8 2c 03
	00		 lea	 ebx, DWORD PTR [edi+208040]
  00016	76 28		 jbe	 SHORT $LN3@Find
$LL4@Find:

; 648  : 	{
; 649  : 		D3D_CAdapterInfo& rkAdapterInfo = m_akD3DAdapterInfo[iD3DAdapterInfo];
; 650  : 		if (rkAdapterInfo.Find(uScrWidth, uScrHeight, uScrDepthBits, isWindowed, piD3DModeInfo, piD3DDevInfo))

  00018	ff 75 1c	 push	 DWORD PTR _piD3DDevInfo$[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	ff 75 18	 push	 DWORD PTR _piD3DModeInfo$[ebp]
  00020	ff 75 14	 push	 DWORD PTR _isWindowed$[ebp]
  00023	ff 75 10	 push	 DWORD PTR _uScrDepthBits$[ebp]
  00026	ff 75 0c	 push	 DWORD PTR _uScrHeight$[ebp]
  00029	ff 75 08	 push	 DWORD PTR _uScrWidth$[ebp]
  0002c	e8 00 00 00 00	 call	 ?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z ; D3D_CAdapterInfo::Find
  00031	85 c0		 test	 eax, eax
  00033	75 14		 jne	 SHORT $LN8@Find

; 647  : 	for (UINT iD3DAdapterInfo = 0; iD3DAdapterInfo < m_uD3DAdapterInfoCount; ++iD3DAdapterInfo)

  00035	46		 inc	 esi
  00036	81 c7 44 51 00
	00		 add	 edi, 20804		; 00005144H
  0003c	3b 33		 cmp	 esi, DWORD PTR [ebx]
  0003e	72 d8		 jb	 SHORT $LL4@Find
$LN3@Find:
  00040	5f		 pop	 edi

; 654  : 		}
; 655  : 	}
; 656  : 	return FALSE;
; 657  : }

  00041	5e		 pop	 esi
  00042	33 c0		 xor	 eax, eax
  00044	5b		 pop	 ebx
  00045	5d		 pop	 ebp
  00046	c2 1c 00	 ret	 28			; 0000001cH
$LN8@Find:

; 651  : 		{
; 652  : 			*piD3DAdapterInfo = iD3DAdapterInfo;

  00049	8b 45 20	 mov	 eax, DWORD PTR _piD3DAdapterInfo$[ebp]
  0004c	5f		 pop	 edi
  0004d	89 30		 mov	 DWORD PTR [eax], esi

; 653  : 			return TRUE;

  0004f	b8 01 00 00 00	 mov	 eax, 1

; 654  : 		}
; 655  : 	}
; 656  : 	return FALSE;
; 657  : }

  00054	5e		 pop	 esi
  00055	5b		 pop	 ebx
  00056	5d		 pop	 ebp
  00057	c2 1c 00	 ret	 28			; 0000001cH
?Find@D3D_CDisplayModeAutoDetector@@QAEHIIIHPAI00@Z ENDP ; D3D_CDisplayModeAutoDetector::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ??1D3D_CDisplayModeAutoDetector@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1D3D_CDisplayModeAutoDetector@@QAE@XZ PROC		; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector, COMDAT
; _this$ = ecx

; 614  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1D3D_CDisplayModeAutoDetector@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 615  : }

  00022	68 00 00 00 00	 push	 OFFSET ??1D3D_CAdapterInfo@@QAE@XZ ; D3D_CAdapterInfo::~D3D_CAdapterInfo
  00027	6a 0a		 push	 10			; 0000000aH
  00029	68 44 51 00 00	 push	 20804			; 00005144H
  0002e	51		 push	 ecx
  0002f	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00034	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0003e	59		 pop	 ecx
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
  00043	cc		 int	 3
  00044	cc		 int	 3
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1D3D_CDisplayModeAutoDetector@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1D3D_CDisplayModeAutoDetector@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1D3D_CDisplayModeAutoDetector@@QAE@XZ ENDP		; D3D_CDisplayModeAutoDetector::~D3D_CDisplayModeAutoDetector
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ??0D3D_CDisplayModeAutoDetector@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D_CDisplayModeAutoDetector@@QAE@XZ PROC		; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector, COMDAT
; _this$ = ecx

; 609  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	68 00 00 00 00	 push	 OFFSET ??1D3D_CAdapterInfo@@QAE@XZ ; D3D_CAdapterInfo::~D3D_CAdapterInfo
  0000a	68 00 00 00 00	 push	 OFFSET ??0D3D_CAdapterInfo@@QAE@XZ ; D3D_CAdapterInfo::D3D_CAdapterInfo
  0000f	6a 0a		 push	 10			; 0000000aH
  00011	8b f1		 mov	 esi, ecx
  00013	68 44 51 00 00	 push	 20804			; 00005144H
  00018	56		 push	 esi
  00019	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0001c	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z

; 610  : 	m_uD3DAdapterInfoCount = 0;

  00021	c7 86 a8 2c 03
	00 00 00 00 00	 mov	 DWORD PTR [esi+208040], 0

; 611  : }

  0002b	8b c6		 mov	 eax, esi
  0002d	5e		 pop	 esi
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??0D3D_CDisplayModeAutoDetector@@QAE@XZ ENDP		; D3D_CDisplayModeAutoDetector::D3D_CDisplayModeAutoDetector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z
_TEXT	SEGMENT
_iD3DDevInfo$ = 8					; size = 4
_iD3D_SModeInfo$ = 12					; size = 4
?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z PROC ; D3D_CAdapterInfo::GetD3DModeInfop, COMDAT
; _this$ = ecx

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 533  : 	D3D_CDeviceInfo* pkD3DDevInfo = GetD3DDeviceInfop(iD3DDevInfo);

  00003	ff 75 08	 push	 DWORD PTR _iD3DDevInfo$[ebp]
  00006	e8 00 00 00 00	 call	 ?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ; D3D_CAdapterInfo::GetD3DDeviceInfop

; 534  : 	if (pkD3DDevInfo)

  0000b	85 c0		 test	 eax, eax
  0000d	74 0e		 je	 SHORT $LN3@GetD3DMode

; 535  : 	{
; 536  : 		D3D_SModeInfo* pkD3DModeInfo = pkD3DDevInfo->GetD3DModeInfop(iD3D_SModeInfo);

  0000f	ff 75 0c	 push	 DWORD PTR _iD3D_SModeInfo$[ebp]
  00012	8b c8		 mov	 ecx, eax
  00014	e8 00 00 00 00	 call	 ?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ; D3D_CDeviceInfo::GetD3DModeInfop

; 543  : }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
$LN3@GetD3DMode:

; 537  : 		if (pkD3DModeInfo)
; 538  : 		{
; 539  : 			return pkD3DModeInfo;
; 540  : 		}
; 541  : 	}
; 542  : 	return NULL;

  0001d	33 c0		 xor	 eax, eax

; 543  : }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?GetD3DModeInfop@D3D_CAdapterInfo@@QAEPAUD3D_SModeInfo@@II@Z ENDP ; D3D_CAdapterInfo::GetD3DModeInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z
_TEXT	SEGMENT
_iD3DDevInfo$ = 8					; size = 4
?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z PROC ; D3D_CAdapterInfo::GetD3DDeviceInfop, COMDAT
; _this$ = ecx

; 522  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 523  : 	if (iD3DDevInfo >= m_uD3DDevInfoNum)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DDevInfo$[ebp]
  00006	3b 81 60 04 00
	00		 cmp	 eax, DWORD PTR [ecx+1120]
  0000c	72 06		 jb	 SHORT $LN2@GetD3DDevi

; 524  : 	{
; 525  : 		return NULL;

  0000e	33 c0		 xor	 eax, eax

; 529  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@GetD3DDevi:

; 526  : 	}
; 527  : 
; 528  : 	return &m_akD3DDevInfo[iD3DDevInfo];

  00014	69 c0 60 0f 00
	00		 imul	 eax, eax, 3936
  0001a	05 64 04 00 00	 add	 eax, 1124		; 00000464H
  0001f	03 c1		 add	 eax, ecx

; 529  : }

  00021	5d		 pop	 ebp
  00022	c2 04 00	 ret	 4
?GetD3DDeviceInfop@D3D_CAdapterInfo@@QAEPAVD3D_CDeviceInfo@@I@Z ENDP ; D3D_CAdapterInfo::GetD3DDeviceInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ
_TEXT	SEGMENT
?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModep, COMDAT
; _this$ = ecx

; 518  : 	return &m_kD3DDMDesktop;

  00000	8d 81 4c 04 00
	00		 lea	 eax, DWORD PTR [ecx+1100]

; 519  : }

  00006	c3		 ret	 0
?GetDesktopD3DDisplayModep@D3D_CAdapterInfo@@QAEPAU_D3DDISPLAYMODE@@XZ ENDP ; D3D_CAdapterInfo::GetDesktopD3DDisplayModep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ
_TEXT	SEGMENT
?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ PROC ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer, COMDAT
; _this$ = ecx

; 513  : 	return m_kD3DDMDesktop;

  00000	8d 81 4c 04 00
	00		 lea	 eax, DWORD PTR [ecx+1100]

; 514  : }

  00006	c3		 ret	 0
?GetDesktopD3DDisplayModer@D3D_CAdapterInfo@@QAEAAU_D3DDISPLAYMODE@@XZ ENDP ; D3D_CAdapterInfo::GetDesktopD3DDisplayModer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_pstEnumList$GSCopy$1$ = -1036				; size = 4
_szText$1 = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_CAdapterInfo::GetString, COMDAT
; _this$ = ecx

; 594  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 08	 mov	 eax, DWORD PTR _pstEnumList$[ebp]
  00016	53		 push	 ebx
  00017	8b d9		 mov	 ebx, ecx
  00019	89 85 f4 fb ff
	ff		 mov	 DWORD PTR _pstEnumList$GSCopy$1$[ebp], eax
  0001f	56		 push	 esi

; 595  : 	for (UINT iDevInfo = 0; iDevInfo < m_uD3DDevInfoNum; ++iDevInfo)

  00020	33 f6		 xor	 esi, esi
  00022	39 b3 60 04 00
	00		 cmp	 DWORD PTR [ebx+1120], esi
  00028	76 63		 jbe	 SHORT $LN3@GetString

; 594  : {

  0002a	57		 push	 edi
  0002b	8d bb 64 04 00
	00		 lea	 edi, DWORD PTR [ebx+1124]
$LL4@GetString:

; 598  : 		_snprintf(szText, sizeof(szText), "Device %d\r\n", iDevInfo);

  00031	56		 push	 esi
  00032	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FCEPDHJA@Device?5?$CFd?$AN?6@
  00037	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0003d	68 01 04 00 00	 push	 1025			; 00000401H
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00048	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 598  : 		_snprintf(szText, sizeof(szText), "Device %d\r\n", iDevInfo);

  0004e	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00051	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL14@GetString:
  00054	8a 08		 mov	 cl, BYTE PTR [eax]
  00056	40		 inc	 eax
  00057	84 c9		 test	 cl, cl
  00059	75 f9		 jne	 SHORT $LL14@GetString

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0005b	8b 8d f4 fb ff
	ff		 mov	 ecx, DWORD PTR _pstEnumList$GSCopy$1$[ebp]

; 415  :             return __builtin_strlen(_First);

  00061	2b c2		 sub	 eax, edx

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00063	50		 push	 eax
  00064	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$1[ebp]
  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 602  : 		rkD3DDevInfo.GetString(pstEnumList);

  00070	ff b5 f4 fb ff
	ff		 push	 DWORD PTR _pstEnumList$GSCopy$1$[ebp]
  00076	8b cf		 mov	 ecx, edi
  00078	e8 00 00 00 00	 call	 ?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_CDeviceInfo::GetString
  0007d	46		 inc	 esi
  0007e	81 c7 60 0f 00
	00		 add	 edi, 3936		; 00000f60H
  00084	3b b3 60 04 00
	00		 cmp	 esi, DWORD PTR [ebx+1120]
  0008a	72 a5		 jb	 SHORT $LL4@GetString
  0008c	5f		 pop	 edi
$LN3@GetString:

; 603  : 	}
; 604  : }

  0008d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00090	5e		 pop	 esi
  00091	33 cd		 xor	 ecx, ebp
  00093	5b		 pop	 ebx
  00094	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 04 00	 ret	 4
?GetString@D3D_CAdapterInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_CAdapterInfo::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D9@@IP6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z
_TEXT	SEGMENT
_pfnConfirmDevice$GSCopy$1$ = -1696			; size = 4
_kD3DADMList$ = -1692					; size = 1688
__$ArrayPad$ = -4					; size = 4
_rkD3D$ = 8						; size = 4
_iD3DAdapterInfo$ = 12					; size = 4
_pfnConfirmDevice$ = 16					; size = 4
?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D9@@IP6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z PROC ; D3D_CAdapterInfo::Build, COMDAT
; _this$ = ecx

; 560  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 06 00
	00		 sub	 esp, 1696		; 000006a0H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _pfnConfirmDevice$[ebp]
  00016	53		 push	 ebx
  00017	8b 5d 08	 mov	 ebx, DWORD PTR _rkD3D$[ebp]
  0001a	56		 push	 esi
  0001b	89 85 60 f9 ff
	ff		 mov	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp], eax
  00021	8b f1		 mov	 esi, ecx
  00023	57		 push	 edi

; 561  : 	D3DDISPLAYMODE& rkD3DDMDesktop = m_kD3DDMDesktop;
; 562  : 	if (FAILED(rkD3D.GetAdapterDisplayMode(iD3DAdapterInfo, &rkD3DDMDesktop)))

  00024	8b 03		 mov	 eax, DWORD PTR [ebx]
  00026	8b 7d 0c	 mov	 edi, DWORD PTR _iD3DAdapterInfo$[ebp]
  00029	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0002c	8d 86 4c 04 00
	00		 lea	 eax, DWORD PTR [esi+1100]
  00032	50		 push	 eax
  00033	57		 push	 edi
  00034	53		 push	 ebx
  00035	ff d1		 call	 ecx
  00037	85 c0		 test	 eax, eax
  00039	79 15		 jns	 SHORT $LN5@Build

; 591  : }

  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	33 c0		 xor	 eax, eax
  0003f	5b		 pop	 ebx
  00040	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00043	33 cd		 xor	 ecx, ebp
  00045	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Build:

; 563  : 	{
; 564  : 		return FALSE;
; 565  : 	}
; 566  : 
; 567  : 	rkD3D.GetAdapterIdentifier(iD3DAdapterInfo, 0, &m_kD3DAdapterIdentifier);

  00050	8b 03		 mov	 eax, DWORD PTR [ebx]
  00052	56		 push	 esi
  00053	6a 00		 push	 0
  00055	57		 push	 edi
  00056	53		 push	 ebx
  00057	ff 50 14	 call	 DWORD PTR [eax+20]

; 568  : 
; 569  : 	m_iCurD3DDevInfo = 0;
; 570  : 	m_uD3DDevInfoNum = 0;
; 571  : 
; 572  : 	D3D_CAdapterDisplayModeList kD3DADMList;
; 573  : 	kD3DADMList.Build(rkD3D, m_kD3DDMDesktop.Format, iD3DAdapterInfo);

  0005a	57		 push	 edi
  0005b	ff b6 58 04 00
	00		 push	 DWORD PTR [esi+1112]
  00061	8d 8d 64 f9 ff
	ff		 lea	 ecx, DWORD PTR _kD3DADMList$[ebp]
  00067	c7 86 5c 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1116], 0
  00071	53		 push	 ebx
  00072	c7 86 60 04 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+1120], 0
  0007c	e8 00 00 00 00	 call	 ?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D9@@W4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::Build

; 574  : 
; 575  : 	D3D_CDeviceInfo* akD3DDevInfo = m_akD3DDevInfo;

  00081	8d 96 64 04 00
	00		 lea	 edx, DWORD PTR [esi+1124]
  00087	33 ff		 xor	 edi, edi
  00089	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@Build:

; 577  : 	{
; 578  : 		D3D_CDeviceInfo& rkD3DDevInfo = akD3DDevInfo[m_uD3DDevInfoNum];
; 579  : 		if (rkD3DDevInfo.Build(rkD3D, iD3DAdapterInfo, iDevType, kD3DADMList, pfnConfirmDevice))

  00090	ff b5 60 f9 ff
	ff		 push	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00096	69 8e 60 04 00
	00 60 0f 00 00	 imul	 ecx, DWORD PTR [esi+1120], 3936
  000a0	8d 85 64 f9 ff
	ff		 lea	 eax, DWORD PTR _kD3DADMList$[ebp]
  000a6	50		 push	 eax
  000a7	57		 push	 edi
  000a8	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000ab	03 ca		 add	 ecx, edx
  000ad	53		 push	 ebx
  000ae	e8 00 00 00 00	 call	 ?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ; D3D_CDeviceInfo::Build
  000b3	85 c0		 test	 eax, eax
  000b5	74 06		 je	 SHORT $LN16@Build

; 580  : 		{
; 581  : 			++m_uD3DDevInfoNum;

  000b7	ff 86 60 04 00
	00		 inc	 DWORD PTR [esi+1120]
$LN16@Build:

; 576  : 	for (UINT iDevType = 0; iDevType < D3DDEVICETYPE_NUM; ++iDevType)

  000bd	8b 86 60 04 00
	00		 mov	 eax, DWORD PTR [esi+1120]
  000c3	8d 96 64 04 00
	00		 lea	 edx, DWORD PTR [esi+1124]
  000c9	47		 inc	 edi
  000ca	83 ff 02	 cmp	 edi, 2
  000cd	72 c1		 jb	 SHORT $LL4@Build

; 582  : 		}
; 583  : 	}
; 584  : 
; 585  : 	if (m_uD3DDevInfoNum > 0)
; 586  : 	{
; 587  : 		return TRUE;
; 588  : 	}
; 589  : 
; 590  : 	return FALSE;

  000cf	33 c9		 xor	 ecx, ecx
  000d1	3b c8		 cmp	 ecx, eax

; 591  : }

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d6	5f		 pop	 edi
  000d7	1b c0		 sbb	 eax, eax
  000d9	33 cd		 xor	 ecx, ebp
  000db	5e		 pop	 esi
  000dc	f7 d8		 neg	 eax
  000de	5b		 pop	 ebx
  000df	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e4	8b e5		 mov	 esp, ebp
  000e6	5d		 pop	 ebp
  000e7	c2 0c 00	 ret	 12			; 0000000cH
?Build@D3D_CAdapterInfo@@QAEHAAUIDirect3D9@@IP6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ENDP ; D3D_CAdapterInfo::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z
_TEXT	SEGMENT
_uScrWidth$ = 8						; size = 4
_uScrHeight$ = 12					; size = 4
_uScrDepthBits$ = 16					; size = 4
_isWindowed$ = 20					; size = 4
_piD3DModeInfo$ = 24					; size = 4
_piD3DDevInfo$ = 28					; size = 4
?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z PROC		; D3D_CAdapterInfo::Find, COMDAT
; _this$ = ecx

; 546  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx
  00006	56		 push	 esi

; 547  : 	for (UINT iDevInfo = 0; iDevInfo < m_uD3DDevInfoNum; ++iDevInfo)

  00007	33 f6		 xor	 esi, esi
  00009	57		 push	 edi
  0000a	39 b3 60 04 00
	00		 cmp	 DWORD PTR [ebx+1120], esi
  00010	76 2f		 jbe	 SHORT $LN3@Find
  00012	8d bb 64 04 00
	00		 lea	 edi, DWORD PTR [ebx+1124]
$LL4@Find:

; 548  : 	{
; 549  : 		D3D_CDeviceInfo& rkD3DDevInfo = m_akD3DDevInfo[iDevInfo];
; 550  : 		if (rkD3DDevInfo.Find(uScrWidth, uScrHeight, uScrDepthBits, isWindowed, piD3DModeInfo))

  00018	ff 75 18	 push	 DWORD PTR _piD3DModeInfo$[ebp]
  0001b	8b cf		 mov	 ecx, edi
  0001d	ff 75 14	 push	 DWORD PTR _isWindowed$[ebp]
  00020	ff 75 10	 push	 DWORD PTR _uScrDepthBits$[ebp]
  00023	ff 75 0c	 push	 DWORD PTR _uScrHeight$[ebp]
  00026	ff 75 08	 push	 DWORD PTR _uScrWidth$[ebp]
  00029	e8 00 00 00 00	 call	 ?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z ; D3D_CDeviceInfo::Find
  0002e	85 c0		 test	 eax, eax
  00030	75 18		 jne	 SHORT $LN8@Find

; 547  : 	for (UINT iDevInfo = 0; iDevInfo < m_uD3DDevInfoNum; ++iDevInfo)

  00032	46		 inc	 esi
  00033	81 c7 60 0f 00
	00		 add	 edi, 3936		; 00000f60H
  00039	3b b3 60 04 00
	00		 cmp	 esi, DWORD PTR [ebx+1120]
  0003f	72 d7		 jb	 SHORT $LL4@Find
$LN3@Find:
  00041	5f		 pop	 edi

; 554  : 		}
; 555  : 	}
; 556  : 	return FALSE;
; 557  : }

  00042	5e		 pop	 esi
  00043	33 c0		 xor	 eax, eax
  00045	5b		 pop	 ebx
  00046	5d		 pop	 ebp
  00047	c2 18 00	 ret	 24			; 00000018H
$LN8@Find:

; 551  : 		{
; 552  : 			*piD3DDevInfo = iDevInfo;

  0004a	8b 45 1c	 mov	 eax, DWORD PTR _piD3DDevInfo$[ebp]
  0004d	5f		 pop	 edi
  0004e	89 30		 mov	 DWORD PTR [eax], esi

; 553  : 			return TRUE;

  00050	b8 01 00 00 00	 mov	 eax, 1

; 554  : 		}
; 555  : 	}
; 556  : 	return FALSE;
; 557  : }

  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	5d		 pop	 ebp
  00058	c2 18 00	 ret	 24			; 00000018H
?Find@D3D_CAdapterInfo@@QAEHIIIHPAI0@Z ENDP		; D3D_CAdapterInfo::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.h
;	COMDAT ??1D3D_CAdapterInfo@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1D3D_CAdapterInfo@@QAE@XZ PROC			; D3D_CAdapterInfo::~D3D_CAdapterInfo, COMDAT
; _this$ = ecx

; 110  : 	~D3D_CAdapterInfo() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1D3D_CAdapterInfo@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00022	68 00 00 00 00	 push	 OFFSET ??1D3D_CDeviceInfo@@QAE@XZ ; D3D_CDeviceInfo::~D3D_CDeviceInfo
  00027	6a 05		 push	 5
  00029	68 60 0f 00 00	 push	 3936			; 00000f60H
  0002e	8d 81 64 04 00
	00		 lea	 eax, DWORD PTR [ecx+1124]
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  0003a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0003d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00044	59		 pop	 ecx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1D3D_CAdapterInfo@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1D3D_CAdapterInfo@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1D3D_CAdapterInfo@@QAE@XZ ENDP			; D3D_CAdapterInfo::~D3D_CAdapterInfo
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.h
;	COMDAT ??0D3D_CAdapterInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D_CAdapterInfo@@QAE@XZ PROC			; D3D_CAdapterInfo::D3D_CAdapterInfo, COMDAT
; _this$ = ecx

; 109  : 	D3D_CAdapterInfo() {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	68 00 00 00 00	 push	 OFFSET ??1D3D_CDeviceInfo@@QAE@XZ ; D3D_CDeviceInfo::~D3D_CDeviceInfo
  0000a	8b f1		 mov	 esi, ecx
  0000c	68 00 00 00 00	 push	 OFFSET ??0D3D_CDeviceInfo@@QAE@XZ ; D3D_CDeviceInfo::D3D_CDeviceInfo
  00011	6a 05		 push	 5
  00013	68 60 0f 00 00	 push	 3936			; 00000f60H
  00018	8d 86 64 04 00
	00		 lea	 eax, DWORD PTR [esi+1124]
  0001e	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??_L@YGXPAXIIP6EX0@Z1@Z
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??0D3D_CAdapterInfo@@QAE@XZ ENDP			; D3D_CAdapterInfo::D3D_CAdapterInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z
_TEXT	SEGMENT
_iD3D_SModeInfo$ = 8					; size = 4
?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z PROC ; D3D_CDeviceInfo::GetD3DModeInfop, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  : 	if (iD3D_SModeInfo >= m_uD3DModeInfoNum)

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3D_SModeInfo$[ebp]
  00006	3b 81 40 01 00
	00		 cmp	 eax, DWORD PTR [ecx+320]
  0000c	72 06		 jb	 SHORT $LN2@GetD3DMode

; 184  : 	{
; 185  : 		return NULL;

  0000e	33 c0		 xor	 eax, eax

; 189  : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
$LN2@GetD3DMode:

; 186  : 	}
; 187  : 
; 188  : 	return &m_akD3DModeInfo[iD3D_SModeInfo];

  00014	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00017	8d 04 c5 44 01
	00 00		 lea	 eax, DWORD PTR [eax*8+324]
  0001e	03 c1		 add	 eax, ecx

; 189  : }

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
?GetD3DModeInfop@D3D_CDeviceInfo@@QAEPAUD3D_SModeInfo@@I@Z ENDP ; D3D_CDeviceInfo::GetD3DModeInfop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z
_TEXT	SEGMENT
_rkD3D$ = 8						; size = 4
_iD3DAdapterInfo$ = 12					; size = 4
_DeviceType$ = 16					; size = 4
_TargetFormat$ = 20					; size = 4
_pDepthStencilFormat$ = 24				; size = 4
?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z PROC ; D3D_CDeviceInfo::FindDepthStencilFormat, COMDAT
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 193  : 	UINT m_dwMinDepthBits    = 16;
; 194  : 	UINT m_dwMinStencilBits  = 0;
; 195  : 
; 196  : 	if ( m_dwMinDepthBits <= 16 && m_dwMinStencilBits == 0 )
; 197  : 	{
; 198  : 		if ( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  00004	8b 5d 10	 mov	 ebx, DWORD PTR _DeviceType$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _rkD3D$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 14	 mov	 edi, DWORD PTR _TargetFormat$[ebp]
  0000f	6a 50		 push	 80			; 00000050H
  00011	8b 06		 mov	 eax, DWORD PTR [esi]
  00013	6a 01		 push	 1
  00015	6a 02		 push	 2
  00017	57		 push	 edi
  00018	53		 push	 ebx
  00019	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0001c	56		 push	 esi
  0001d	ff 50 28	 call	 DWORD PTR [eax+40]
  00020	85 c0		 test	 eax, eax
  00022	78 27		 js	 SHORT $LN23@FindDepthS

; 199  : 						TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D16 ) ) )
; 200  : 		{
; 201  : 			if ( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  00024	8b 06		 mov	 eax, DWORD PTR [esi]
  00026	6a 50		 push	 80			; 00000050H
  00028	57		 push	 edi
  00029	57		 push	 edi
  0002a	53		 push	 ebx
  0002b	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0002e	56		 push	 esi
  0002f	ff 50 30	 call	 DWORD PTR [eax+48]
  00032	85 c0		 test	 eax, eax
  00034	78 15		 js	 SHORT $LN23@FindDepthS

; 202  : 							TargetFormat, TargetFormat, D3DFMT_D16 ) ) )
; 203  : 			{
; 204  : 				*pDepthStencilFormat = D3DFMT_D16;

  00036	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  00039	5f		 pop	 edi

; 275  : 				return TRUE;
; 276  : 			}
; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	return FALSE;
; 281  : }

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c7 00 50 00 00
	00		 mov	 DWORD PTR [eax], 80	; 00000050H
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	5d		 pop	 ebp
  00048	c2 14 00	 ret	 20			; 00000014H
$LN23@FindDepthS:

; 205  : 				return TRUE;
; 206  : 			}
; 207  : 		}
; 208  : 	}
; 209  : 
; 210  : 	if ( m_dwMinDepthBits <= 15 && m_dwMinStencilBits <= 1 )
; 211  : 	{
; 212  : 		if ( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,
; 213  : 						TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D15S1 ) ) )
; 214  : 		{
; 215  : 			if ( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,
; 216  : 							TargetFormat, TargetFormat, D3DFMT_D15S1 ) ) )
; 217  : 			{
; 218  : 				*pDepthStencilFormat = D3DFMT_D15S1;
; 219  : 				return TRUE;
; 220  : 			}
; 221  : 		}
; 222  : 	}
; 223  : 
; 224  : 	if ( m_dwMinDepthBits <= 24 && m_dwMinStencilBits == 0 )
; 225  : 	{
; 226  : 		if ( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	6a 4d		 push	 77			; 0000004dH
  0004f	6a 01		 push	 1
  00051	6a 02		 push	 2
  00053	57		 push	 edi
  00054	53		 push	 ebx
  00055	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00058	56		 push	 esi
  00059	ff 50 28	 call	 DWORD PTR [eax+40]
  0005c	85 c0		 test	 eax, eax
  0005e	78 27		 js	 SHORT $LN25@FindDepthS

; 227  : 						TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D24X8 ) ) )
; 228  : 		{
; 229  : 			if ( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  00060	8b 06		 mov	 eax, DWORD PTR [esi]
  00062	6a 4d		 push	 77			; 0000004dH
  00064	57		 push	 edi
  00065	57		 push	 edi
  00066	53		 push	 ebx
  00067	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0006a	56		 push	 esi
  0006b	ff 50 30	 call	 DWORD PTR [eax+48]
  0006e	85 c0		 test	 eax, eax
  00070	78 15		 js	 SHORT $LN25@FindDepthS

; 230  : 							TargetFormat, TargetFormat, D3DFMT_D24X8 ) ) )
; 231  : 			{
; 232  : 				*pDepthStencilFormat = D3DFMT_D24X8;

  00072	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  00075	5f		 pop	 edi

; 275  : 				return TRUE;
; 276  : 			}
; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	return FALSE;
; 281  : }

  00076	5e		 pop	 esi
  00077	5b		 pop	 ebx
  00078	c7 00 4d 00 00
	00		 mov	 DWORD PTR [eax], 77	; 0000004dH
  0007e	b8 01 00 00 00	 mov	 eax, 1
  00083	5d		 pop	 ebp
  00084	c2 14 00	 ret	 20			; 00000014H
$LN25@FindDepthS:

; 233  : 				return TRUE;
; 234  : 			}
; 235  : 		}
; 236  : 	}
; 237  : 
; 238  : 	if ( m_dwMinDepthBits <= 24 && m_dwMinStencilBits <= 8 )
; 239  : 	{
; 240  : 		if ( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	6a 4b		 push	 75			; 0000004bH
  0008b	6a 01		 push	 1
  0008d	6a 02		 push	 2
  0008f	57		 push	 edi
  00090	53		 push	 ebx
  00091	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00094	56		 push	 esi
  00095	ff 50 28	 call	 DWORD PTR [eax+40]
  00098	85 c0		 test	 eax, eax
  0009a	78 27		 js	 SHORT $LN27@FindDepthS

; 241  : 						TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D24S8 ) ) )
; 242  : 		{
; 243  : 			if ( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	6a 4b		 push	 75			; 0000004bH
  000a0	57		 push	 edi
  000a1	57		 push	 edi
  000a2	53		 push	 ebx
  000a3	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000a6	56		 push	 esi
  000a7	ff 50 30	 call	 DWORD PTR [eax+48]
  000aa	85 c0		 test	 eax, eax
  000ac	78 15		 js	 SHORT $LN27@FindDepthS

; 244  : 							TargetFormat, TargetFormat, D3DFMT_D24S8 ) ) )
; 245  : 			{
; 246  : 				*pDepthStencilFormat = D3DFMT_D24S8;

  000ae	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  000b1	5f		 pop	 edi

; 275  : 				return TRUE;
; 276  : 			}
; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	return FALSE;
; 281  : }

  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	c7 00 4b 00 00
	00		 mov	 DWORD PTR [eax], 75	; 0000004bH
  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	5d		 pop	 ebp
  000c0	c2 14 00	 ret	 20			; 00000014H
$LN27@FindDepthS:

; 247  : 				return TRUE;
; 248  : 			}
; 249  : 		}
; 250  : 	}
; 251  : 
; 252  : 	if ( m_dwMinDepthBits <= 24 && m_dwMinStencilBits <= 4 )
; 253  : 	{
; 254  : 		if ( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  000c3	8b 06		 mov	 eax, DWORD PTR [esi]
  000c5	6a 4f		 push	 79			; 0000004fH
  000c7	6a 01		 push	 1
  000c9	6a 02		 push	 2
  000cb	57		 push	 edi
  000cc	53		 push	 ebx
  000cd	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000d0	56		 push	 esi
  000d1	ff 50 28	 call	 DWORD PTR [eax+40]
  000d4	85 c0		 test	 eax, eax
  000d6	78 27		 js	 SHORT $LN29@FindDepthS

; 255  : 						TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D24X4S4 ) ) )
; 256  : 		{
; 257  : 			if ( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  000d8	8b 06		 mov	 eax, DWORD PTR [esi]
  000da	6a 4f		 push	 79			; 0000004fH
  000dc	57		 push	 edi
  000dd	57		 push	 edi
  000de	53		 push	 ebx
  000df	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000e2	56		 push	 esi
  000e3	ff 50 30	 call	 DWORD PTR [eax+48]
  000e6	85 c0		 test	 eax, eax
  000e8	78 15		 js	 SHORT $LN29@FindDepthS

; 258  : 							TargetFormat, TargetFormat, D3DFMT_D24X4S4 ) ) )
; 259  : 			{
; 260  : 				*pDepthStencilFormat = D3DFMT_D24X4S4;

  000ea	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  000ed	5f		 pop	 edi

; 275  : 				return TRUE;
; 276  : 			}
; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	return FALSE;
; 281  : }

  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx
  000f0	c7 00 4f 00 00
	00		 mov	 DWORD PTR [eax], 79	; 0000004fH
  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	5d		 pop	 ebp
  000fc	c2 14 00	 ret	 20			; 00000014H
$LN29@FindDepthS:

; 261  : 				return TRUE;
; 262  : 			}
; 263  : 		}
; 264  : 	}
; 265  : 
; 266  : 	if ( m_dwMinDepthBits <= 32 && m_dwMinStencilBits == 0 )
; 267  : 	{
; 268  : 		if ( SUCCEEDED( rkD3D.CheckDeviceFormat( iD3DAdapterInfo, DeviceType,

  000ff	8b 06		 mov	 eax, DWORD PTR [esi]
  00101	6a 47		 push	 71			; 00000047H
  00103	6a 01		 push	 1
  00105	6a 02		 push	 2
  00107	57		 push	 edi
  00108	53		 push	 ebx
  00109	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0010c	56		 push	 esi
  0010d	ff 50 28	 call	 DWORD PTR [eax+40]
  00110	85 c0		 test	 eax, eax
  00112	78 27		 js	 SHORT $LN19@FindDepthS

; 269  : 						TargetFormat, D3DUSAGE_DEPTHSTENCIL, D3DRTYPE_SURFACE, D3DFMT_D32 ) ) )
; 270  : 		{
; 271  : 			if ( SUCCEEDED( rkD3D.CheckDepthStencilMatch( iD3DAdapterInfo, DeviceType,

  00114	8b 06		 mov	 eax, DWORD PTR [esi]
  00116	6a 47		 push	 71			; 00000047H
  00118	57		 push	 edi
  00119	57		 push	 edi
  0011a	53		 push	 ebx
  0011b	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0011e	56		 push	 esi
  0011f	ff 50 30	 call	 DWORD PTR [eax+48]
  00122	85 c0		 test	 eax, eax
  00124	78 15		 js	 SHORT $LN19@FindDepthS

; 272  : 							TargetFormat, TargetFormat, D3DFMT_D32 ) ) )
; 273  : 			{
; 274  : 				*pDepthStencilFormat = D3DFMT_D32;

  00126	8b 45 18	 mov	 eax, DWORD PTR _pDepthStencilFormat$[ebp]
  00129	5f		 pop	 edi

; 275  : 				return TRUE;
; 276  : 			}
; 277  : 		}
; 278  : 	}
; 279  : 
; 280  : 	return FALSE;
; 281  : }

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	c7 00 47 00 00
	00		 mov	 DWORD PTR [eax], 71	; 00000047H
  00132	b8 01 00 00 00	 mov	 eax, 1
  00137	5d		 pop	 ebp
  00138	c2 14 00	 ret	 20			; 00000014H
$LN19@FindDepthS:
  0013b	5f		 pop	 edi
  0013c	5e		 pop	 esi
  0013d	33 c0		 xor	 eax, eax
  0013f	5b		 pop	 ebx
  00140	5d		 pop	 ebp
  00141	c2 14 00	 ret	 20			; 00000014H
?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z ENDP ; D3D_CDeviceInfo::FindDepthStencilFormat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_this$GSCopy$1$ = -1036					; size = 4
_szText$ = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_CDeviceInfo::GetString, COMDAT
; _this$ = ecx

; 492  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 04 00
	00		 sub	 esp, 1036		; 0000040cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR _pstEnumList$[ebp]

; 494  : 	_snprintf(szText, sizeof(szText), "%s\r\n========================================\r\n", m_szDevDesc);

  00017	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	8b f9		 mov	 edi, ecx
  00021	89 bd f4 fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00027	ff 37		 push	 DWORD PTR [edi]
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@HNBDJADM@?$CFs?$AN?6?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN@
  0002e	68 01 04 00 00	 push	 1025			; 00000401H
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00039	8d 8d f8 fb ff
	ff		 lea	 ecx, DWORD PTR _szText$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 494  : 	_snprintf(szText, sizeof(szText), "%s\r\n========================================\r\n", m_szDevDesc);

  0003f	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00042	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL22@GetString:
  00045	8a 01		 mov	 al, BYTE PTR [ecx]
  00047	41		 inc	 ecx
  00048	84 c0		 test	 al, al
  0004a	75 f9		 jne	 SHORT $LL22@GetString
  0004c	2b ca		 sub	 ecx, edx

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0004e	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00054	51		 push	 ecx
  00055	50		 push	 eax
  00056	8b cb		 mov	 ecx, ebx
  00058	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 497  : 	for (UINT iD3D_SModeInfo = 0; iD3D_SModeInfo < m_uD3DModeInfoNum; ++iD3D_SModeInfo)

  0005d	33 f6		 xor	 esi, esi
  0005f	39 b7 40 01 00
	00		 cmp	 DWORD PTR [edi+320], esi
  00065	76 5e		 jbe	 SHORT $LN3@GetString

; 492  : {

  00067	81 c7 44 01 00
	00		 add	 edi, 324		; 00000144H
  0006d	0f 1f 00	 npad	 3
$LL4@GetString:

; 499  : 		_snprintf(szText, sizeof(szText), "%d. ", iD3D_SModeInfo);

  00070	56		 push	 esi
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_04CDOPIHIK@?$CFd?4?5@
  00076	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0007c	68 01 04 00 00	 push	 1025			; 00000401H
  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00087	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 499  : 		_snprintf(szText, sizeof(szText), "%d. ", iD3D_SModeInfo);

  0008d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00090	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$LL23@GetString:
  00093	8a 08		 mov	 cl, BYTE PTR [eax]
  00095	40		 inc	 eax
  00096	84 c9		 test	 cl, cl
  00098	75 f9		 jne	 SHORT $LL23@GetString
  0009a	2b c2		 sub	 eax, edx

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0009c	8b cb		 mov	 ecx, ebx
  0009e	50		 push	 eax
  0009f	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  000a5	50		 push	 eax
  000a6	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 503  : 		rkModeInfo.GetString(pstEnumList);

  000ab	53		 push	 ebx
  000ac	8b cf		 mov	 ecx, edi
  000ae	e8 00 00 00 00	 call	 ?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; D3D_SModeInfo::GetString
  000b3	8b 85 f4 fb ff
	ff		 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  000b9	46		 inc	 esi
  000ba	83 c7 18	 add	 edi, 24			; 00000018H
  000bd	3b b0 40 01 00
	00		 cmp	 esi, DWORD PTR [eax+320]
  000c3	72 ab		 jb	 SHORT $LL4@GetString
$LN3@GetString:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000c5	6a 02		 push	 2
  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_02PCIJFNDE@?$AN?6@
  000cc	8b cb		 mov	 ecx, ebx
  000ce	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 507  : }

  000d3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d6	5f		 pop	 edi
  000d7	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 507  : }

  000d8	33 cd		 xor	 ecx, ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000da	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 507  : }

  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	8b e5		 mov	 esp, ebp
  000e2	5d		 pop	 ebp
  000e3	c2 04 00	 ret	 4
?GetString@D3D_CDeviceInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_CDeviceInfo::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ
_TEXT	SEGMENT
?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ PROC		; D3D_CDeviceInfo::GetD3DModeInfoNum, COMDAT
; _this$ = ecx

; 178  : 	return m_uD3DModeInfoNum;

  00000	8b 81 40 01 00
	00		 mov	 eax, DWORD PTR [ecx+320]

; 179  : }

  00006	c3		 ret	 0
?GetD3DModeInfoNum@D3D_CDeviceInfo@@QAEIXZ ENDP		; D3D_CDeviceInfo::GetD3DModeInfoNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z
_TEXT	SEGMENT
_uScrWidth$ = 8						; size = 4
_uScrHeight$ = 12					; size = 4
_uScrDepthBits$ = 16					; size = 4
_isWindowed$ = 20					; size = 4
_piD3DModeInfo$ = 24					; size = 4
?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z PROC		; D3D_CDeviceInfo::Find, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 451  : 	if (isWindowed)

  00003	83 7d 14 00	 cmp	 DWORD PTR _isWindowed$[ebp], 0
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	74 09		 je	 SHORT $LN10@Find

; 452  : 		if (!m_isWindowed)

  0000c	83 b9 54 0f 00
	00 00		 cmp	 DWORD PTR [ecx+3924], 0
  00013	74 49		 je	 SHORT $LN26@Find
$LN10@Find:

; 453  : 		{
; 454  : 			return FALSE;
; 455  : 		}
; 456  : 
; 457  : 	for (UINT iD3D_SModeInfo = 0; iD3D_SModeInfo < m_uD3DModeInfoNum; ++iD3D_SModeInfo)

  00015	8b b1 40 01 00
	00		 mov	 esi, DWORD PTR [ecx+320]
  0001b	33 d2		 xor	 edx, edx
  0001d	85 f6		 test	 esi, esi
  0001f	74 3d		 je	 SHORT $LN26@Find
  00021	8b 7d 0c	 mov	 edi, DWORD PTR _uScrHeight$[ebp]
  00024	81 c1 54 01 00
	00		 add	 ecx, 340		; 00000154H
  0002a	8b 5d 08	 mov	 ebx, DWORD PTR _uScrWidth$[ebp]
  0002d	0f 1f 00	 npad	 3
$LL4@Find:

; 458  : 	{
; 459  : 		D3D_SModeInfo& rkModeInfo = m_akD3DModeInfo[iD3D_SModeInfo];
; 460  : 		if (rkModeInfo.m_uScrWidth == uScrWidth && rkModeInfo.m_uScrHeight == uScrHeight)

  00030	39 59 f0	 cmp	 DWORD PTR [ecx-16], ebx
  00033	75 21		 jne	 SHORT $LN2@Find
  00035	39 79 f4	 cmp	 DWORD PTR [ecx-12], edi
  00038	75 1c		 jne	 SHORT $LN2@Find

; 461  : 		{
; 462  : 			if (uScrDepthBits == 16)

  0003a	83 7d 10 10	 cmp	 DWORD PTR _uScrDepthBits$[ebp], 16 ; 00000010H
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	75 05		 jne	 SHORT $LN12@Find

; 463  : 			{
; 464  : 				switch (rkModeInfo.m_eD3DFmtPixel)

  00042	83 e8 17	 sub	 eax, 23			; 00000017H
  00045	eb 03		 jmp	 SHORT $LN29@Find
$LN12@Find:

; 465  : 				{
; 466  : 				case D3DFMT_R5G6B5:
; 467  : 				case D3DFMT_X1R5G5B5:
; 468  : 				case D3DFMT_A1R5G5B5:
; 469  : 					*piD3DModeInfo = iD3D_SModeInfo;
; 470  : 					return TRUE;
; 471  : 					break;
; 472  : 				}
; 473  : 			}
; 474  : 			else
; 475  : 			{
; 476  : 				switch (rkModeInfo.m_eD3DFmtPixel)

  00047	83 e8 14	 sub	 eax, 20			; 00000014H
$LN29@Find:

; 453  : 		{
; 454  : 			return FALSE;
; 455  : 		}
; 456  : 
; 457  : 	for (UINT iD3D_SModeInfo = 0; iD3D_SModeInfo < m_uD3DModeInfoNum; ++iD3D_SModeInfo)

  0004a	74 1b		 je	 SHORT $LN17@Find
  0004c	83 e8 01	 sub	 eax, 1
  0004f	74 16		 je	 SHORT $LN17@Find
  00051	83 e8 01	 sub	 eax, 1
  00054	74 11		 je	 SHORT $LN17@Find
$LN2@Find:
  00056	42		 inc	 edx
  00057	83 c1 18	 add	 ecx, 24			; 00000018H
  0005a	3b d6		 cmp	 edx, esi
  0005c	72 d2		 jb	 SHORT $LL4@Find
$LN26@Find:
  0005e	5f		 pop	 edi

; 482  : 					return TRUE;
; 483  : 					break;
; 484  : 				}
; 485  : 			}
; 486  : 		}
; 487  : 	}
; 488  : 	return FALSE;
; 489  : }

  0005f	5e		 pop	 esi
  00060	33 c0		 xor	 eax, eax
  00062	5b		 pop	 ebx
  00063	5d		 pop	 ebp
  00064	c2 14 00	 ret	 20			; 00000014H
$LN17@Find:

; 477  : 				{
; 478  : 				case D3DFMT_X8R8G8B8:
; 479  : 				case D3DFMT_A8R8G8B8:
; 480  : 				case D3DFMT_R8G8B8:
; 481  : 					*piD3DModeInfo = iD3D_SModeInfo;

  00067	8b 45 18	 mov	 eax, DWORD PTR _piD3DModeInfo$[ebp]
  0006a	5f		 pop	 edi

; 482  : 					return TRUE;
; 483  : 					break;
; 484  : 				}
; 485  : 			}
; 486  : 		}
; 487  : 	}
; 488  : 	return FALSE;
; 489  : }

  0006b	5e		 pop	 esi
  0006c	5b		 pop	 ebx
  0006d	89 10		 mov	 DWORD PTR [eax], edx
  0006f	b8 01 00 00 00	 mov	 eax, 1
  00074	5d		 pop	 ebp
  00075	c2 14 00	 ret	 20			; 00000014H
?Find@D3D_CDeviceInfo@@QAEHIIIHPAI@Z ENDP		; D3D_CDeviceInfo::Find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z
_TEXT	SEGMENT
tv643 = -280						; size = 4
tv642 = -276						; size = 4
_uD3DDMNum$1$ = -272					; size = 4
_uD3DFmtNum$1$ = -272					; size = 4
_iFmt$1$ = -268						; size = 4
_rkD3DADMList$GSCopy$1$ = -264				; size = 4
_dwD3DBehavior$1$ = -260				; size = 4
_pfnConfirmDevice$GSCopy$1$ = -256			; size = 4
_rkD3D$GSCopy$1$ = -252					; size = 4
_uD3DFmtNum$1$ = -252					; size = 4
_iD3DDM$1$ = -248					; size = 4
_c_eD3DDevType$1$ = -248				; size = 4
_aeD3DFmtDepthStencil$ = -244				; size = 80
_adwD3DBehavior$ = -164					; size = 80
_aisFormatConfirmed$ = -84				; size = 80
__$ArrayPad$ = -4					; size = 4
_rkD3D$ = 8						; size = 4
_iD3DAdapterInfo$ = 12					; size = 4
_iDevType$ = 16						; size = 4
_rkD3DADMList$ = 20					; size = 4
_pfnConfirmDevice$ = 24					; size = 4
?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z PROC ; D3D_CDeviceInfo::Build, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b 45 10	 mov	 eax, DWORD PTR _iDevType$[ebp]
  00016	8b 55 08	 mov	 edx, DWORD PTR _rkD3D$[ebp]
  00019	53		 push	 ebx
  0001a	8b d9		 mov	 ebx, ecx
  0001c	89 95 04 ff ff
	ff		 mov	 DWORD PTR _rkD3D$GSCopy$1$[ebp], edx
  00022	8b 4d 18	 mov	 ecx, DWORD PTR _pfnConfirmDevice$[ebp]
  00025	56		 push	 esi

; 285  : 	assert(pfnConfirmDevice != NULL && "D3D_CDeviceInfo::Build");
; 286  : 
; 287  : 	const D3DDEVTYPE	c_eD3DDevType = msc_aeD3DDevType[iDevType];
; 288  : 	const TCHAR*		c_szD3DDevDesc = msc_aszD3DDevDesc[iDevType];

  00026	8b 34 85 00 00
	00 00		 mov	 esi, DWORD PTR ?msc_aszD3DDevDesc@D3D_CDeviceInfo@@1PAPBDA[eax*4]
  0002d	57		 push	 edi
  0002e	8b 7d 14	 mov	 edi, DWORD PTR _rkD3DADMList$[ebp]
  00031	89 8d 00 ff ff
	ff		 mov	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp], ecx
  00037	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?msc_aeD3DDevType@D3D_CDeviceInfo@@1QBW4_D3DDEVTYPE@@B[eax*4]
  0003e	89 8d 08 ff ff
	ff		 mov	 DWORD PTR _c_eD3DDevType$1$[ebp], ecx

; 289  : 
; 290  : 	m_eD3DDevType = c_eD3DDevType;

  00044	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 291  : 	rkD3D.GetDeviceCaps(iD3DAdapterInfo, c_eD3DDevType, &m_kD3DCaps);

  00047	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0004a	8b 02		 mov	 eax, DWORD PTR [edx]
  0004c	51		 push	 ecx
  0004d	ff b5 08 ff ff
	ff		 push	 DWORD PTR _c_eD3DDevType$1$[ebp]
  00053	89 bd f8 fe ff
	ff		 mov	 DWORD PTR _rkD3DADMList$GSCopy$1$[ebp], edi
  00059	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0005c	52		 push	 edx
  0005d	ff 50 38	 call	 DWORD PTR [eax+56]

; 292  : 
; 293  : 	m_szDevDesc = c_szD3DDevDesc;
; 294  : 	m_uD3DModeInfoNum = 0;
; 295  : 	m_canDoWindowed = FALSE;
; 296  : 	m_isWindowed = FALSE;
; 297  : 	m_eD3DMSTFullscreen = D3DMULTISAMPLE_NONE;
; 298  : 	m_eD3DMSTWindowed = D3DMULTISAMPLE_NONE;
; 299  : 
; 300  : 	BOOL  aisFormatConfirmed[20];
; 301  : 	DWORD adwD3DBehavior[20];
; 302  : 	D3DFORMAT aeD3DFmtDepthStencil[20];
; 303  : 
; 304  : 	BOOL isHALExists = FALSE;
; 305  : 	BOOL isHALWindowedCompatible = FALSE;
; 306  : 	BOOL isHALDesktopCompatible = FALSE;
; 307  : 	BOOL isHALSampleCompatible = FALSE;
; 308  : 
; 309  : 	// GetFlagInfo
; 310  : 	{
; 311  : 		UINT uD3DFmtNum = rkD3DADMList.GetPixelFormatNum();

  00060	8b cf		 mov	 ecx, edi
  00062	89 33		 mov	 DWORD PTR [ebx], esi
  00064	c7 83 40 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+320], 0
  0006e	c7 83 38 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+312], 0
  00078	c7 83 54 0f 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+3924], 0
  00082	c7 83 5c 0f 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+3932], 0
  0008c	c7 83 58 0f 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+3928], 0
  00096	e8 00 00 00 00	 call	 ?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
  0009b	8b c8		 mov	 ecx, eax
  0009d	33 c0		 xor	 eax, eax
  0009f	89 8d f0 fe ff
	ff		 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], ecx
  000a5	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iFmt$1$[ebp], eax

; 312  : 
; 313  : 		for (DWORD iFmt = 0; iFmt < uD3DFmtNum; ++iFmt)

  000ab	85 c9		 test	 ecx, ecx
  000ad	0f 84 34 01 00
	00		 je	 $LN3@Build
$LL4@Build:

; 314  : 		{
; 315  : 			D3DFORMAT eD3DFmtPixel = rkD3DADMList.GetPixelFormatr(iFmt);

  000b3	50		 push	 eax
  000b4	8b cf		 mov	 ecx, edi
  000b6	e8 00 00 00 00	 call	 ?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::GetPixelFormatr

; 316  : 			DWORD dwD3DBehavior = 0;
; 317  : 			BOOL isFormatConfirmed = FALSE;

  000bb	33 f6		 xor	 esi, esi

; 318  : 
; 319  : 			aeD3DFmtDepthStencil[iFmt] = D3DFMT_UNKNOWN;

  000bd	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR _aeD3DFmtDepthStencil$[ebp]

; 320  : 
; 321  : 			// SkipNoRenderTargetFormat;
; 322  : 			if (FAILED(rkD3D.CheckDeviceType(iD3DAdapterInfo, m_eD3DDevType, eD3DFmtPixel, eD3DFmtPixel, FALSE)))

  000c3	56		 push	 esi
  000c4	8b 38		 mov	 edi, DWORD PTR [eax]
  000c6	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _iFmt$1$[ebp]
  000cc	c1 e0 02	 shl	 eax, 2
  000cf	57		 push	 edi
  000d0	89 85 e8 fe ff
	ff		 mov	 DWORD PTR tv643[ebp], eax
  000d6	03 c1		 add	 eax, ecx
  000d8	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _rkD3D$GSCopy$1$[ebp]
  000de	57		 push	 edi
  000df	ff 73 04	 push	 DWORD PTR [ebx+4]
  000e2	89 85 ec fe ff
	ff		 mov	 DWORD PTR tv642[ebp], eax
  000e8	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  000eb	89 30		 mov	 DWORD PTR [eax], esi
  000ed	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ef	51		 push	 ecx
  000f0	ff 50 24	 call	 DWORD PTR [eax+36]
  000f3	85 c0		 test	 eax, eax
  000f5	0f 88 cd 00 00
	00		 js	 $LN2@Build

; 323  : 			{
; 324  : 				continue;
; 325  : 			}
; 326  : 
; 327  : 			if (D3DDEVTYPE_HAL == m_eD3DDevType)
; 328  : 			{
; 329  : 				isHALExists = TRUE;
; 330  : 
; 331  : 				{
; 332  : 					isHALWindowedCompatible = TRUE;
; 333  : 
; 334  : 					if (iFmt == 0)
; 335  : 					{
; 336  : 						isHALDesktopCompatible = TRUE;
; 337  : 					}
; 338  : 
; 339  : 				}
; 340  : 			}
; 341  : 
; 342  : 			// Confirm the device/format for HW vertex processing
; 343  : 			if (m_kD3DCaps.DevCaps & D3DDEVCAPS_HWTRANSFORMANDLIGHT)

  000fb	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  000fe	a9 00 00 01 00	 test	 eax, 65536		; 00010000H
  00103	74 64		 je	 SHORT $LN44@Build

; 344  : 			{
; 345  : 				if (m_kD3DCaps.DevCaps & D3DDEVCAPS_PUREDEVICE)

  00105	a9 00 00 10 00	 test	 eax, 1048576		; 00100000H
  0010a	74 1e		 je	 SHORT $LN46@Build

; 346  : 				{
; 347  : 					dwD3DBehavior = D3DCREATE_HARDWARE_VERTEXPROCESSING | D3DCREATE_PUREDEVICE;
; 348  : 
; 349  : 					if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  0010c	57		 push	 edi
  0010d	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  00110	c7 85 fc fe ff
	ff 50 00 00 00	 mov	 DWORD PTR _dwD3DBehavior$1$[ebp], 80 ; 00000050H
  0011a	6a 50		 push	 80			; 00000050H
  0011c	50		 push	 eax
  0011d	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00123	83 c4 0c	 add	 esp, 12			; 0000000cH
  00126	85 c0		 test	 eax, eax
  00128	75 5d		 jne	 SHORT $LN47@Build
$LN46@Build:

; 350  : 					{
; 351  : 						isFormatConfirmed = TRUE;
; 352  : 					}
; 353  : 				}
; 354  : 
; 355  : 				if (FALSE == isFormatConfirmed)
; 356  : 				{
; 357  : 					dwD3DBehavior = D3DCREATE_HARDWARE_VERTEXPROCESSING;
; 358  : 
; 359  : 					if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  0012a	57		 push	 edi
  0012b	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0012e	c7 85 fc fe ff
	ff 40 00 00 00	 mov	 DWORD PTR _dwD3DBehavior$1$[ebp], 64 ; 00000040H
  00138	6a 40		 push	 64			; 00000040H
  0013a	50		 push	 eax
  0013b	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00141	83 c4 0c	 add	 esp, 12			; 0000000cH
  00144	85 c0		 test	 eax, eax
  00146	75 3f		 jne	 SHORT $LN47@Build

; 360  : 					{
; 361  : 						isFormatConfirmed = TRUE;
; 362  : 					}
; 363  : 				}
; 364  : 
; 365  : 				if (FALSE == isFormatConfirmed)
; 366  : 				{
; 367  : 					dwD3DBehavior = D3DCREATE_MIXED_VERTEXPROCESSING;
; 368  : 
; 369  : 					if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  00148	57		 push	 edi
  00149	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0014c	c7 85 fc fe ff
	ff 80 00 00 00	 mov	 DWORD PTR _dwD3DBehavior$1$[ebp], 128 ; 00000080H
  00156	68 80 00 00 00	 push	 128			; 00000080H
  0015b	50		 push	 eax
  0015c	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00162	83 c4 0c	 add	 esp, 12			; 0000000cH
  00165	85 c0		 test	 eax, eax
  00167	75 1e		 jne	 SHORT $LN47@Build
$LN44@Build:

; 370  : 					{
; 371  : 						isFormatConfirmed = TRUE;
; 372  : 					}
; 373  : 				}
; 374  : 			}
; 375  : 
; 376  : 			// Confirm the device/format for SW vertex processing
; 377  : 			if (FALSE == isFormatConfirmed)
; 378  : 			{
; 379  : 				dwD3DBehavior = D3DCREATE_SOFTWARE_VERTEXPROCESSING;
; 380  : 
; 381  : 				if (pfnConfirmDevice(m_kD3DCaps, dwD3DBehavior, eD3DFmtPixel))

  00169	57		 push	 edi
  0016a	8d 43 08	 lea	 eax, DWORD PTR [ebx+8]
  0016d	c7 85 fc fe ff
	ff 20 00 00 00	 mov	 DWORD PTR _dwD3DBehavior$1$[ebp], 32 ; 00000020H
  00177	6a 20		 push	 32			; 00000020H
  00179	50		 push	 eax
  0017a	ff 95 00 ff ff
	ff		 call	 DWORD PTR _pfnConfirmDevice$GSCopy$1$[ebp]
  00180	83 c4 0c	 add	 esp, 12			; 0000000cH
  00183	85 c0		 test	 eax, eax
  00185	74 2a		 je	 SHORT $LN24@Build
$LN47@Build:

; 382  : 				{
; 383  : 					isFormatConfirmed = TRUE;
; 384  : 				}
; 385  : 			}
; 386  : 
; 387  : 			if (isFormatConfirmed)
; 388  : 			{
; 389  : 				if (!FindDepthStencilFormat(rkD3D, iD3DAdapterInfo, c_eD3DDevType, eD3DFmtPixel, &aeD3DFmtDepthStencil[iFmt]))

  00187	ff b5 ec fe ff
	ff		 push	 DWORD PTR tv642[ebp]
  0018d	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _rkD3D$GSCopy$1$[ebp]
  00193	8b cb		 mov	 ecx, ebx
  00195	57		 push	 edi
  00196	ff b5 08 ff ff
	ff		 push	 DWORD PTR _c_eD3DDevType$1$[ebp]
  0019c	be 01 00 00 00	 mov	 esi, 1
  001a1	ff 75 0c	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  001a4	52		 push	 edx
  001a5	e8 00 00 00 00	 call	 ?FindDepthStencilFormat@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IW4_D3DDEVTYPE@@W4_D3DFORMAT@@PAW44@@Z ; D3D_CDeviceInfo::FindDepthStencilFormat
  001aa	85 c0		 test	 eax, eax
  001ac	8b c6		 mov	 eax, esi
  001ae	0f 44 f0	 cmove	 esi, eax
$LN24@Build:

; 390  : 				{
; 391  : 					isFormatConfirmed = TRUE;
; 392  : 				}
; 393  : 
; 394  : 			}
; 395  : 
; 396  : 			adwD3DBehavior[iFmt] = dwD3DBehavior;

  001b1	8b 8d e8 fe ff
	ff		 mov	 ecx, DWORD PTR tv643[ebp]
  001b7	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _dwD3DBehavior$1$[ebp]
  001bd	89 84 0d 5c ff
	ff ff		 mov	 DWORD PTR _adwD3DBehavior$[ebp+ecx], eax

; 397  : 			aisFormatConfirmed[iFmt] = isFormatConfirmed;

  001c4	89 74 0d ac	 mov	 DWORD PTR _aisFormatConfirmed$[ebp+ecx], esi
$LN2@Build:

; 312  : 
; 313  : 		for (DWORD iFmt = 0; iFmt < uD3DFmtNum; ++iFmt)

  001c8	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _iFmt$1$[ebp]
  001ce	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _rkD3DADMList$GSCopy$1$[ebp]
  001d4	40		 inc	 eax
  001d5	89 85 f4 fe ff
	ff		 mov	 DWORD PTR _iFmt$1$[ebp], eax
  001db	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _uD3DFmtNum$1$[ebp]
  001e1	0f 82 cc fe ff
	ff		 jb	 $LL4@Build
$LN3@Build:

; 398  : 		}
; 399  : 	}
; 400  : 
; 401  : 	// BuildModeInfoList
; 402  : 	{
; 403  : 		UINT uD3DDMNum = rkD3DADMList.GetDisplayModeNum();

  001e7	8b cf		 mov	 ecx, edi
  001e9	e8 00 00 00 00	 call	 ?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetDisplayModeNum
  001ee	8b f0		 mov	 esi, eax

; 404  : 		UINT uD3DFmtNum = rkD3DADMList.GetPixelFormatNum();

  001f0	8b cf		 mov	 ecx, edi
  001f2	89 b5 f0 fe ff
	ff		 mov	 DWORD PTR _uD3DDMNum$1$[ebp], esi
  001f8	e8 00 00 00 00	 call	 ?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
  001fd	89 85 04 ff ff
	ff		 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], eax
  00203	33 c0		 xor	 eax, eax
  00205	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iD3DDM$1$[ebp], eax

; 405  : 
; 406  : 
; 407  : 		for (UINT iD3DDM = 0; iD3DDM < uD3DDMNum; ++iD3DDM)

  0020b	85 f6		 test	 esi, esi
  0020d	0f 84 a8 00 00
	00		 je	 $LN6@Build
$LL7@Build:

; 408  : 		{
; 409  : 			const D3DDISPLAYMODE& c_rkD3DDM = rkD3DADMList.GetDisplayModer(iD3DDM);

  00213	50		 push	 eax
  00214	8b cf		 mov	 ecx, edi
  00216	e8 00 00 00 00	 call	 ?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z ; D3D_CAdapterDisplayModeList::GetDisplayModer
  0021b	33 f6		 xor	 esi, esi
  0021d	8b f8		 mov	 edi, eax

; 410  : 			for (DWORD iFmt = 0; iFmt < uD3DFmtNum; ++iFmt)

  0021f	39 b5 04 ff ff
	ff		 cmp	 DWORD PTR _uD3DFmtNum$1$[ebp], esi
  00225	76 75		 jbe	 SHORT $LN5@Build
  00227	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@Build:

; 411  : 			{
; 412  : 				if (rkD3DADMList.GetPixelFormatr(iFmt) == c_rkD3DDM.Format)

  00230	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR _rkD3DADMList$GSCopy$1$[ebp]
  00236	56		 push	 esi
  00237	e8 00 00 00 00	 call	 ?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ; D3D_CAdapterDisplayModeList::GetPixelFormatr
  0023c	8b 00		 mov	 eax, DWORD PTR [eax]
  0023e	3b 47 0c	 cmp	 eax, DWORD PTR [edi+12]
  00241	75 50		 jne	 SHORT $LN8@Build

; 413  : 				{
; 414  : 					if (aisFormatConfirmed[iFmt] == TRUE )

  00243	83 7c b5 ac 01	 cmp	 DWORD PTR _aisFormatConfirmed$[ebp+esi*4], 1
  00248	75 49		 jne	 SHORT $LN8@Build

; 415  : 					{
; 416  : 						D3D_SModeInfo& rkModeInfo = m_akD3DModeInfo[m_uD3DModeInfoNum++];

  0024a	8b 8b 40 01 00
	00		 mov	 ecx, DWORD PTR [ebx+320]
  00250	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00253	8d 14 c3	 lea	 edx, DWORD PTR [ebx+eax*8]
  00256	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00259	89 83 40 01 00
	00		 mov	 DWORD PTR [ebx+320], eax

; 417  : 						rkModeInfo.m_uScrWidth = c_rkD3DDM.Width;

  0025f	8b 07		 mov	 eax, DWORD PTR [edi]
  00261	89 82 44 01 00
	00		 mov	 DWORD PTR [edx+324], eax

; 418  : 						rkModeInfo.m_uScrHeight = c_rkD3DDM.Height;

  00267	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0026a	89 82 48 01 00
	00		 mov	 DWORD PTR [edx+328], eax

; 419  : 						rkModeInfo.m_eD3DFmtPixel = c_rkD3DDM.Format;

  00270	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00273	89 82 54 01 00
	00		 mov	 DWORD PTR [edx+340], eax

; 420  : 						rkModeInfo.m_dwD3DBehavior = adwD3DBehavior[iFmt];

  00279	8b 84 b5 5c ff
	ff ff		 mov	 eax, DWORD PTR _adwD3DBehavior$[ebp+esi*4]
  00280	89 82 50 01 00
	00		 mov	 DWORD PTR [edx+336], eax

; 421  : 						rkModeInfo.m_eD3DFmtDepthStencil = aeD3DFmtDepthStencil[iFmt];

  00286	8b 84 b5 0c ff
	ff ff		 mov	 eax, DWORD PTR _aeD3DFmtDepthStencil$[ebp+esi*4]
  0028d	89 82 58 01 00
	00		 mov	 DWORD PTR [edx+344], eax
$LN8@Build:

; 410  : 			for (DWORD iFmt = 0; iFmt < uD3DFmtNum; ++iFmt)

  00293	46		 inc	 esi
  00294	3b b5 04 ff ff
	ff		 cmp	 esi, DWORD PTR _uD3DFmtNum$1$[ebp]
  0029a	72 94		 jb	 SHORT $LL10@Build
$LN5@Build:

; 405  : 
; 406  : 
; 407  : 		for (UINT iD3DDM = 0; iD3DDM < uD3DDMNum; ++iD3DDM)

  0029c	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _iD3DDM$1$[ebp]
  002a2	8b bd f8 fe ff
	ff		 mov	 edi, DWORD PTR _rkD3DADMList$GSCopy$1$[ebp]
  002a8	40		 inc	 eax
  002a9	89 85 08 ff ff
	ff		 mov	 DWORD PTR _iD3DDM$1$[ebp], eax
  002af	3b 85 f0 fe ff
	ff		 cmp	 eax, DWORD PTR _uD3DDMNum$1$[ebp]
  002b5	0f 82 58 ff ff
	ff		 jb	 $LL7@Build
$LN6@Build:

; 422  : 
; 423  : 						if ( m_eD3DDevType == D3DDEVTYPE_HAL )
; 424  : 						{
; 425  : 							isHALSampleCompatible = TRUE;
; 426  : 						}
; 427  : 					}
; 428  : 				}
; 429  : 			}
; 430  : 		}
; 431  : 	}
; 432  : 
; 433  : 	// Check if the device is compatible with the desktop display mode
; 434  : 	// (which was added initially as formats[0])
; 435  : 	if (aisFormatConfirmed[0])

  002bb	83 7d ac 00	 cmp	 DWORD PTR _aisFormatConfirmed$[ebp], 0
  002bf	74 14		 je	 SHORT $LN28@Build

; 436  : 	{
; 437  : 		m_canDoWindowed = TRUE;

  002c1	c7 83 38 01 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+312], 1

; 438  : 		m_isWindowed = TRUE;

  002cb	c7 83 54 0f 00
	00 01 00 00 00	 mov	 DWORD PTR [ebx+3924], 1
$LN28@Build:

; 439  : 	}
; 440  : 
; 441  : 	if (m_uD3DModeInfoNum > 0)
; 442  : 	{
; 443  : 		return TRUE;
; 444  : 	}
; 445  : 
; 446  : 	return FALSE;
; 447  : }

  002d5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002d8	33 c0		 xor	 eax, eax
  002da	3b 83 40 01 00
	00		 cmp	 eax, DWORD PTR [ebx+320]
  002e0	5f		 pop	 edi
  002e1	1b c0		 sbb	 eax, eax
  002e3	33 cd		 xor	 ecx, ebp
  002e5	5e		 pop	 esi
  002e6	f7 d8		 neg	 eax
  002e8	5b		 pop	 ebx
  002e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ee	8b e5		 mov	 esp, ebp
  002f0	5d		 pop	 ebp
  002f1	c2 14 00	 ret	 20			; 00000014H
?Build@D3D_CDeviceInfo@@QAEHAAUIDirect3D9@@IIAAVD3D_CAdapterDisplayModeList@@P6AHAAU_D3DCAPS9@@IW4_D3DFORMAT@@@Z@Z ENDP ; D3D_CDeviceInfo::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.h
;	COMDAT ??1D3D_CDeviceInfo@@QAE@XZ
_TEXT	SEGMENT
??1D3D_CDeviceInfo@@QAE@XZ PROC				; D3D_CDeviceInfo::~D3D_CDeviceInfo, COMDAT
; _this$ = ecx

; 63   : 	~D3D_CDeviceInfo() {}

  00000	c2 00 00	 ret	 0
??1D3D_CDeviceInfo@@QAE@XZ ENDP				; D3D_CDeviceInfo::~D3D_CDeviceInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.h
;	COMDAT ??0D3D_CDeviceInfo@@QAE@XZ
_TEXT	SEGMENT
??0D3D_CDeviceInfo@@QAE@XZ PROC				; D3D_CDeviceInfo::D3D_CDeviceInfo, COMDAT
; _this$ = ecx

; 62   : 	D3D_CDeviceInfo() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3D_CDeviceInfo@@QAE@XZ ENDP				; D3D_CDeviceInfo::D3D_CDeviceInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z
_TEXT	SEGMENT
_iD3DFmt$ = 8						; size = 4
?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z PROC ; D3D_CAdapterDisplayModeList::GetPixelFormatr, COMDAT
; _this$ = ecx

; 71   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   : 	assert(iD3DFmt < m_uD3DFmtNum);
; 73   : 	return m_aeD3DFmt[iD3DFmt];

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DFmt$[ebp]
  00006	05 90 01 00 00	 add	 eax, 400		; 00000190H
  0000b	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]

; 74   : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?GetPixelFormatr@D3D_CAdapterDisplayModeList@@QAEABW4_D3DFORMAT@@I@Z ENDP ; D3D_CAdapterDisplayModeList::GetPixelFormatr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z
_TEXT	SEGMENT
_iD3DDM$ = 8						; size = 4
?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z PROC ; D3D_CAdapterDisplayModeList::GetDisplayModer, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   : 	assert(iD3DDM < m_uD3DDMNum);
; 67   : 	return m_akD3DDM[iD3DDM];

  00003	8b 45 08	 mov	 eax, DWORD PTR _iD3DDM$[ebp]
  00006	c1 e0 04	 shl	 eax, 4
  00009	03 c1		 add	 eax, ecx

; 68   : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
?GetDisplayModer@D3D_CAdapterDisplayModeList@@QAEABU_D3DDISPLAYMODE@@I@Z ENDP ; D3D_CAdapterDisplayModeList::GetDisplayModer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ
_TEXT	SEGMENT
?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ PROC ; D3D_CAdapterDisplayModeList::GetPixelFormatNum, COMDAT
; _this$ = ecx

; 60   : 	return m_uD3DFmtNum;

  00000	8b 81 94 06 00
	00		 mov	 eax, DWORD PTR [ecx+1684]

; 61   : }

  00006	c3		 ret	 0
?GetPixelFormatNum@D3D_CAdapterDisplayModeList@@QAEIXZ ENDP ; D3D_CAdapterDisplayModeList::GetPixelFormatNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ
_TEXT	SEGMENT
?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ PROC ; D3D_CAdapterDisplayModeList::GetDisplayModeNum, COMDAT
; _this$ = ecx

; 55   : 	return m_uD3DDMNum;

  00000	8b 81 90 06 00
	00		 mov	 eax, DWORD PTR [ecx+1680]

; 56   : }

  00006	c3		 ret	 0
?GetDisplayModeNum@D3D_CAdapterDisplayModeList@@QAEIXZ ENDP ; D3D_CAdapterDisplayModeList::GetDisplayModeNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D9@@W4_D3DFORMAT@@I@Z
_TEXT	SEGMENT
_uAdapterModeNum$1$ = -48				; size = 4
_aeD3DFmt$1$ = -44					; size = 4
_rkD3D$GSCopy$1$ = -40					; size = 4
_this$GSCopy$1$ = -36					; size = 4
_iD3DAdapterInfoMode$1$ = -32				; size = 4
_uD3DDMNum$1$ = -28					; size = 4
_uD3DFmtNum$1$ = -24					; size = 4
_kD3DDMCur$1 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_rkD3D$ = 8						; size = 4
_eD3DFmtDefault$ = 12					; size = 4
_iD3DAdapterInfo$ = 16					; size = 4
?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D9@@W4_D3DFORMAT@@I@Z PROC ; D3D_CAdapterDisplayModeList::Build, COMDAT
; _this$ = ecx

; 77   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 78   : 	D3DDISPLAYMODE* akD3DDM = m_akD3DDM;
; 79   : 	D3DFORMAT* aeD3DFmt = m_aeD3DFmt;
; 80   : 
; 81   : 	UINT uD3DDMNum = 0;
; 82   : 	UINT uD3DFmtNum = 0;
; 83   : 
; 84   : 	aeD3DFmt[uD3DFmtNum++] = eD3DFmtDefault;

  00010	8b 55 0c	 mov	 edx, DWORD PTR _eD3DFmtDefault$[ebp]
  00013	53		 push	 ebx
  00014	8b d9		 mov	 ebx, ecx
  00016	8b 4d 08	 mov	 ecx, DWORD PTR _rkD3D$[ebp]
  00019	56		 push	 esi
  0001a	57		 push	 edi

; 85   : 
; 86   : 	UINT uAdapterModeNum = rkD3D.GetAdapterModeCount(iD3DAdapterInfo, eD3DFmtDefault);

  0001b	52		 push	 edx
  0001c	ff 75 10	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  0001f	8d 83 40 06 00
	00		 lea	 eax, DWORD PTR [ebx+1600]
  00025	89 93 40 06 00
	00		 mov	 DWORD PTR [ebx+1600], edx
  0002b	89 45 d4	 mov	 DWORD PTR _aeD3DFmt$1$[ebp], eax
  0002e	33 f6		 xor	 esi, esi
  00030	8b 01		 mov	 eax, DWORD PTR [ecx]
  00032	bf 01 00 00 00	 mov	 edi, 1
  00037	51		 push	 ecx
  00038	89 5d dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx
  0003b	89 4d d8	 mov	 DWORD PTR _rkD3D$GSCopy$1$[ebp], ecx
  0003e	89 75 e4	 mov	 DWORD PTR _uD3DDMNum$1$[ebp], esi
  00041	89 7d e8	 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], edi
  00044	ff 50 18	 call	 DWORD PTR [eax+24]
  00047	33 c9		 xor	 ecx, ecx
  00049	89 45 d0	 mov	 DWORD PTR _uAdapterModeNum$1$[ebp], eax
  0004c	89 4d e0	 mov	 DWORD PTR _iD3DAdapterInfoMode$1$[ebp], ecx

; 87   : 	for (UINT iD3DAdapterInfoMode = 0; iD3DAdapterInfoMode < uAdapterModeNum; iD3DAdapterInfoMode++)

  0004f	85 c0		 test	 eax, eax
  00051	0f 84 b0 00 00
	00		 je	 $LN3@Build

; 77   : {

  00057	8d b3 44 06 00
	00		 lea	 esi, DWORD PTR [ebx+1604]
  0005d	0f 1f 00	 npad	 3
$LL4@Build:

; 88   : 	{
; 89   : 		D3DDISPLAYMODE kD3DDMCur;
; 90   : 		rkD3D.EnumAdapterModes(iD3DAdapterInfo, eD3DFmtDefault, iD3DAdapterInfoMode, &kD3DDMCur);

  00060	8b 55 d8	 mov	 edx, DWORD PTR _rkD3D$GSCopy$1$[ebp]
  00063	8d 7d ec	 lea	 edi, DWORD PTR _kD3DDMCur$1[ebp]
  00066	57		 push	 edi
  00067	51		 push	 ecx
  00068	ff 75 0c	 push	 DWORD PTR _eD3DFmtDefault$[ebp]
  0006b	8b 02		 mov	 eax, DWORD PTR [edx]
  0006d	ff 75 10	 push	 DWORD PTR _iD3DAdapterInfo$[ebp]
  00070	52		 push	 edx
  00071	ff 50 1c	 call	 DWORD PTR [eax+28]

; 91   : 
; 92   : 		// IsFilterOutLowResolutionMode
; 93   : 		if ( kD3DDMCur.Width  < FILTEROUT_LOWRESOLUTION_WIDTH || kD3DDMCur.Height < FILTEROUT_LOWRESOLUTION_HEIGHT )

  00074	8b 55 ec	 mov	 edx, DWORD PTR _kD3DDMCur$1[ebp]
  00077	8b 7d e8	 mov	 edi, DWORD PTR _uD3DFmtNum$1$[ebp]
  0007a	81 fa 80 02 00
	00		 cmp	 edx, 640		; 00000280H
  00080	72 6f		 jb	 SHORT $LN2@Build
  00082	8b 7d f0	 mov	 edi, DWORD PTR _kD3DDMCur$1[ebp+4]
  00085	81 ff e0 01 00
	00		 cmp	 edi, 480		; 000001e0H
  0008b	72 61		 jb	 SHORT $LN51@Build
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5607 :     auto _UFirst      = _Get_unwrapped(_First);

  0008d	8b 45 dc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]

; 5609 :     for (; _UFirst != _ULast; ++_UFirst) {

  00090	8b 4d f8	 mov	 ecx, DWORD PTR _kD3DDMCur$1[ebp+12]
  00093	3b c3		 cmp	 eax, ebx
  00095	74 15		 je	 SHORT $LN45@Build
$LL15@Build:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 13   : 		if (rkD3DDMTest.Width != m_pkD3DDMChk->Width)

  00097	39 10		 cmp	 DWORD PTR [eax], edx
  00099	75 0a		 jne	 SHORT $LN47@Build

; 14   : 		{
; 15   : 			return FALSE;
; 16   : 		}
; 17   : 
; 18   : 		if (rkD3DDMTest.Height != m_pkD3DDMChk->Height)

  0009b	39 78 04	 cmp	 DWORD PTR [eax+4], edi
  0009e	75 05		 jne	 SHORT $LN47@Build

; 19   : 		{
; 20   : 			return FALSE;
; 21   : 		}
; 22   : 
; 23   : 		if (rkD3DDMTest.Format != m_pkD3DDMChk->Format)

  000a0	39 48 0c	 cmp	 DWORD PTR [eax+12], ecx
  000a3	74 49		 je	 SHORT $LN51@Build
$LN47@Build:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5609 :     for (; _UFirst != _ULast; ++_UFirst) {

  000a5	83 c0 10	 add	 eax, 16			; 00000010H
  000a8	3b c3		 cmp	 eax, ebx
  000aa	75 eb		 jne	 SHORT $LL15@Build
$LN45@Build:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 103  : 		if (pkD3DDMFind == pkD3DDMEnd && uD3DDMNum < D3DDISPLAYMODE_MAX)

  000ac	83 7d e4 64	 cmp	 DWORD PTR _uD3DDMNum$1$[ebp], 100 ; 00000064H
  000b0	73 3c		 jae	 SHORT $LN51@Build

; 104  : 		{
; 105  : 			D3DDISPLAYMODE& rkD3DDMNew = akD3DDM[uD3DDMNum++];

  000b2	ff 45 e4	 inc	 DWORD PTR _uD3DDMNum$1$[ebp]
  000b5	8b c3		 mov	 eax, ebx
  000b7	83 c3 10	 add	 ebx, 16			; 00000010H

; 106  : 			rkD3DDMNew.Width = kD3DDMCur.Width;

  000ba	89 10		 mov	 DWORD PTR [eax], edx

; 107  : 			rkD3DDMNew.Height = kD3DDMCur.Height;

  000bc	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 108  : 			rkD3DDMNew.Format = kD3DDMCur.Format;

  000bf	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 5144 :         _Seek_wrapped(_First, _Find_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val));

  000c2	8b 45 d4	 mov	 eax, DWORD PTR _aeD3DFmt$1$[ebp]

; 5129 :     for (; _First != _Last; ++_First) {

  000c5	3b c6		 cmp	 eax, esi
  000c7	74 12		 je	 SHORT $LN46@Build
  000c9	0f 1f 80 00 00
	00 00		 npad	 7
$LL28@Build:

; 5130 :         if (*_First == _Val) {

  000d0	39 08		 cmp	 DWORD PTR [eax], ecx
  000d2	74 1a		 je	 SHORT $LN51@Build

; 5129 :     for (; _First != _Last; ++_First) {

  000d4	83 c0 04	 add	 eax, 4
  000d7	3b c6		 cmp	 eax, esi
  000d9	75 f5		 jne	 SHORT $LL28@Build
$LN46@Build:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 115  : 			if (peD3DFmtFind == peD3DFmtEnd && uD3DFmtNum < D3DFORMAT_MAX)

  000db	8b 7d e8	 mov	 edi, DWORD PTR _uD3DFmtNum$1$[ebp]
  000de	83 ff 14	 cmp	 edi, 20			; 00000014H
  000e1	73 0e		 jae	 SHORT $LN2@Build

; 116  : 			{
; 117  : 				aeD3DFmt[uD3DFmtNum++] = kD3DDMCur.Format;

  000e3	47		 inc	 edi
  000e4	89 0e		 mov	 DWORD PTR [esi], ecx
  000e6	89 7d e8	 mov	 DWORD PTR _uD3DFmtNum$1$[ebp], edi
  000e9	83 c6 04	 add	 esi, 4

; 23   : 		if (rkD3DDMTest.Format != m_pkD3DDMChk->Format)

  000ec	eb 03		 jmp	 SHORT $LN2@Build
$LN51@Build:

; 87   : 	for (UINT iD3DAdapterInfoMode = 0; iD3DAdapterInfoMode < uAdapterModeNum; iD3DAdapterInfoMode++)

  000ee	8b 7d e8	 mov	 edi, DWORD PTR _uD3DFmtNum$1$[ebp]
$LN2@Build:
  000f1	8b 4d e0	 mov	 ecx, DWORD PTR _iD3DAdapterInfoMode$1$[ebp]
  000f4	41		 inc	 ecx
  000f5	89 4d e0	 mov	 DWORD PTR _iD3DAdapterInfoMode$1$[ebp], ecx
  000f8	3b 4d d0	 cmp	 ecx, DWORD PTR _uAdapterModeNum$1$[ebp]
  000fb	0f 82 5f ff ff
	ff		 jb	 $LL4@Build
  00101	8b 5d dc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00104	8b 75 e4	 mov	 esi, DWORD PTR _uD3DDMNum$1$[ebp]
$LN3@Build:

; 118  : 			}
; 119  : 		}
; 120  : 	}
; 121  : 
; 122  : 	qsort(akD3DDM, uD3DDMNum, sizeof(D3DDISPLAYMODE), CompareD3DDisplayModeOrder);

  00107	68 00 00 00 00	 push	 OFFSET ?CompareD3DDisplayModeOrder@@YAHPBX0@Z ; CompareD3DDisplayModeOrder
  0010c	6a 10		 push	 16			; 00000010H
  0010e	56		 push	 esi
  0010f	53		 push	 ebx
  00110	e8 00 00 00 00	 call	 _qsort

; 123  : 
; 124  : 	m_uD3DFmtNum = uD3DFmtNum;
; 125  : 	m_uD3DDMNum = uD3DDMNum;
; 126  : }

  00115	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00118	83 c4 10	 add	 esp, 16			; 00000010H
  0011b	89 bb 94 06 00
	00		 mov	 DWORD PTR [ebx+1684], edi
  00121	33 cd		 xor	 ecx, ebp
  00123	89 b3 90 06 00
	00		 mov	 DWORD PTR [ebx+1680], esi
  00129	5f		 pop	 edi
  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx
  0012c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 0c 00	 ret	 12			; 0000000cH
?Build@D3D_CAdapterDisplayModeList@@QAEXAAUIDirect3D9@@W4_D3DFORMAT@@I@Z ENDP ; D3D_CAdapterDisplayModeList::Build
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp
;	COMDAT ?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
_szText$ = -1032					; size = 1025
__$ArrayPad$ = -4					; size = 4
_pstEnumList$ = 8					; size = 4
?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; D3D_SModeInfo::GetString, COMDAT
; _this$ = ecx

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 04 00
	00		 sub	 esp, 1032		; 00000408H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	8b d1		 mov	 edx, ecx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b 7d 08	 mov	 edi, DWORD PTR _pstEnumList$[ebp]

; 132  : 	UINT uScrDepthBits = 16;

  0001a	be 10 00 00 00	 mov	 esi, 16			; 00000010H

; 133  : 	switch (m_eD3DFmtPixel)

  0001f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00022	83 e8 14	 sub	 eax, 20			; 00000014H
  00025	74 0a		 je	 SHORT $LN6@GetString
  00027	83 e8 01	 sub	 eax, 1
  0002a	74 05		 je	 SHORT $LN6@GetString
  0002c	83 e8 01	 sub	 eax, 1
  0002f	75 05		 jne	 SHORT $LN2@GetString
$LN6@GetString:

; 134  : 	{
; 135  : 	case D3DFMT_X8R8G8B8:
; 136  : 	case D3DFMT_A8R8G8B8:
; 137  : 	case D3DFMT_R8G8B8:
; 138  : 		uScrDepthBits = 32;

  00031	be 20 00 00 00	 mov	 esi, 32			; 00000020H
$LN2@GetString:

; 139  : 		break;
; 140  : 	}
; 141  : 
; 142  : 	int iVP = 0;
; 143  : 
; 144  : 	switch (m_dwD3DBehavior)

  00036	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00039	33 c9		 xor	 ecx, ecx
  0003b	83 e8 20	 sub	 eax, 32			; 00000020H
  0003e	74 16		 je	 SHORT $LN11@GetString
  00040	83 e8 20	 sub	 eax, 32			; 00000020H
  00043	74 0a		 je	 SHORT $LN9@GetString
  00045	83 e8 40	 sub	 eax, 64			; 00000040H
  00048	75 11		 jne	 SHORT $LN4@GetString

; 149  : 	case D3DCREATE_MIXED_VERTEXPROCESSING:
; 150  : 		iVP = 2;

  0004a	8d 48 02	 lea	 ecx, DWORD PTR [eax+2]

; 151  : 		break;

  0004d	eb 0c		 jmp	 SHORT $LN4@GetString
$LN9@GetString:

; 145  : 	{
; 146  : 	case D3DCREATE_HARDWARE_VERTEXPROCESSING:
; 147  : 		iVP = 1;

  0004f	b9 01 00 00 00	 mov	 ecx, 1

; 148  : 		break;

  00054	eb 05		 jmp	 SHORT $LN4@GetString
$LN11@GetString:

; 152  : 	case D3DCREATE_SOFTWARE_VERTEXPROCESSING:
; 153  : 		iVP = 3;

  00056	b9 03 00 00 00	 mov	 ecx, 3
$LN4@GetString:

; 166  : 	_snprintf(szText, sizeof(szText), "%dx%dx%d %s\r\n", m_uScrWidth, m_uScrHeight, uScrDepthBits, szVP[iVP]);

  0005b	ff 34 8d 00 00
	00 00		 push	 DWORD PTR ?szVP@?1??GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4PAPBDA[ecx*4]
  00062	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  00068	56		 push	 esi
  00069	ff 72 04	 push	 DWORD PTR [edx+4]
  0006c	ff 32		 push	 DWORD PTR [edx]
  0006e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KEGMOEDA@?$CFdx?$CFdx?$CFd?5?$CFs?$AN?6@
  00073	68 01 04 00 00	 push	 1025			; 00000401H
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 __snprintf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0007e	8d 95 f8 fb ff
	ff		 lea	 edx, DWORD PTR _szText$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 166  : 	_snprintf(szText, sizeof(szText), "%dx%dx%d %s\r\n", m_uScrWidth, m_uScrHeight, uScrDepthBits, szVP[iVP]);

  00084	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00087	8d 72 01	 lea	 esi, DWORD PTR [edx+1]
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL17@GetString:
  00090	8a 02		 mov	 al, BYTE PTR [edx]
  00092	42		 inc	 edx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL17@GetString
  00097	2b d6		 sub	 edx, esi

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _szText$[ebp]
  0009f	52		 push	 edx
  000a0	50		 push	 eax
  000a1	8b cf		 mov	 ecx, edi
  000a3	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 168  : }

  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ab	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 168  : }

  000ac	33 cd		 xor	 ecx, ebp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3446 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ae	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpDetector.cpp

; 168  : }

  000af	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c2 04 00	 ret	 4
?GetString@D3D_SModeInfo@@QAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; D3D_SModeInfo::GetString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
tv509 = -12						; size = 4
$T1 = -8						; size = 4
tv521 = -4						; size = 4
__Old_size$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
tv514 = 12						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3422 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3423 :         // append [_Ptr, _Ptr + _Count)
; 3424 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 3425 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d fc	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2e		 ja	 SHORT $LN2@append

; 3426 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count));
; 3427 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 2283 :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 2301 :         return _BUF_SIZE <= _Myres;

  0002a	83 fa 10	 cmp	 edx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0002d	72 02		 jb	 SHORT $LN5@append

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3428 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3429 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00038	56		 push	 esi
  00039	e8 00 00 00 00	 call	 _memmove
  0003e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3430 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 3443 :     }

  00045	8b c7		 mov	 eax, edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN2@append:

; 4939 :         if (max_size() - _Old_size < _Size_increase) {

  00050	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00055	2b c1		 sub	 eax, ecx
  00057	3b c3		 cmp	 eax, ebx
  00059	0f 82 26 01 00
	00		 jb	 $LN68@append

; 4941 :         }
; 4942 : 
; 4943 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005f	8d 34 19	 lea	 esi, DWORD PTR [ecx+ebx]

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00062	83 ce 0f	 or	 esi, 15			; 0000000fH
  00065	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006b	76 18		 jbe	 SHORT $LN19@append

; 4885 :             return _Max;

  0006d	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00072	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0007d	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  00080	83 c4 04	 add	 esp, 4
  00083	eb 61		 jmp	 SHORT $LN66@append
$LN19@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00085	8b c2		 mov	 eax, edx
  00087	d1 e8		 shr	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR tv514[ebp], eax
  0008c	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00091	2b 45 0c	 sub	 eax, DWORD PTR tv514[ebp]
  00094	3b d0		 cmp	 edx, eax
  00096	76 18		 jbe	 SHORT $LN20@append

; 4889 :             return _Max;

  00098	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0009d	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000ab	83 c4 04	 add	 esp, 4
  000ae	eb 36		 jmp	 SHORT $LN66@append
$LN20@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000b0	8b 45 0c	 mov	 eax, DWORD PTR tv514[ebp]
  000b3	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  000b5	3b f0		 cmp	 esi, eax
  000b7	0f 42 f0	 cmovb	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4947 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000ba	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000bd	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000c2	72 0e		 jb	 SHORT $LN27@append

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000c4	50		 push	 eax
  000c5	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000cd	83 c4 04	 add	 esp, 4
  000d0	eb 14		 jmp	 SHORT $LN66@append
$LN27@append:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN28@append

; 77   :         return ::operator new(_Bytes);

  000d6	50		 push	 eax
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  000dc	8b 4d fc	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  000df	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000e2	eb 02		 jmp	 SHORT $LN66@append
$LN28@append:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000e4	33 c0		 xor	 eax, eax
$LN66@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4959 :         if (_BUF_SIZE <= _Old_capacity) {

  000e6	83 7d f8 10	 cmp	 DWORD PTR $T1[ebp], 16	; 00000010H
  000ea	8d 14 19	 lea	 edx, DWORD PTR [ecx+ebx]
  000ed	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000f0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000f3	89 57 10	 mov	 DWORD PTR [edi+16], edx
  000f6	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000f9	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax
  000fc	89 75 fc	 mov	 DWORD PTR tv521[ebp], esi
  000ff	89 55 f4	 mov	 DWORD PTR tv509[ebp], edx
  00102	51		 push	 ecx
  00103	72 56		 jb	 SHORT $LN13@append

; 4960 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00105	8b 37		 mov	 esi, DWORD PTR [edi]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00107	56		 push	 esi
  00108	50		 push	 eax
  00109	e8 00 00 00 00	 call	 _memcpy
  0010e	53		 push	 ebx
  0010f	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00112	ff 75 fc	 push	 DWORD PTR tv521[ebp]
  00115	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0011a	8b 45 f4	 mov	 eax, DWORD PTR tv509[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0011d	83 c4 18	 add	 esp, 24			; 00000018H

; 4962 :             _Al.deallocate(_Old_ptr, _Old_capacity + 1);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00123	41		 inc	 ecx

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00124	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00127	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012d	72 12		 jb	 SHORT $LN52@append

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0012f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00132	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00135	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013d	77 4b		 ja	 SHORT $LN49@append

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0013f	8b f2		 mov	 esi, edx
$LN52@append:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00141	51		 push	 ecx
  00142	56		 push	 esi
  00143	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  00148	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0014b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3434 :         return _Reallocate_grow_by(

  0014e	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  00150	8b c7		 mov	 eax, edi
  00152	5f		 pop	 edi
  00153	5e		 pop	 esi
  00154	5b		 pop	 ebx
  00155	8b e5		 mov	 esp, ebp
  00157	5d		 pop	 ebp
  00158	c2 08 00	 ret	 8
$LN13@append:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015b	57		 push	 edi
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 _memcpy
  00162	53		 push	 ebx
  00163	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00166	56		 push	 esi
  00167	e8 00 00 00 00	 call	 _memcpy

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0016c	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0016f	83 c4 18	 add	 esp, 24			; 00000018H

; 3440 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00172	c6 00 00	 mov	 BYTE PTR [eax], 0

; 3434 :         return _Reallocate_grow_by(

  00175	8b 45 0c	 mov	 eax, DWORD PTR $T2[ebp]
  00178	89 07		 mov	 DWORD PTR [edi], eax

; 3443 :     }

  0017a	8b c7		 mov	 eax, edi
  0017c	5f		 pop	 edi
  0017d	5e		 pop	 esi
  0017e	5b		 pop	 ebx
  0017f	8b e5		 mov	 esp, ebp
  00181	5d		 pop	 ebp
  00182	c2 08 00	 ret	 8
$LN68@append:

; 4940 :             _Xlen_string(); // result too long

  00185	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN49@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0018a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN64@append:
  0018f	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__snprintf PROC						; COMDAT

; 1947 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	8b 08		 mov	 ecx, DWORD PTR [eax]
  00019	ff 70 04	 push	 DWORD PTR [eax+4]
  0001c	83 c9 01	 or	 ecx, 1
  0001f	51		 push	 ecx
  00020	e8 00 00 00 00	 call	 ___stdio_common_vsprintf

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00025	83 c9 ff	 or	 ecx, -1
  00028	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002b	85 c0		 test	 eax, eax
  0002d	0f 48 c1	 cmovs	 eax, ecx

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);
; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1952 :         __crt_va_end(_ArgList);
; 1953 :         return _Result;
; 1954 :     }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
__snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
