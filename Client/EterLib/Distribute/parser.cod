; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\parser.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
PUBLIC	??0SArgumet@script@@QAE@ABU01@@Z		; script::SArgumet::SArgumet
PUBLIC	??1SArgumet@script@@QAE@XZ			; script::SArgumet::~SArgumet
PUBLIC	?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
PUBLIC	??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
PUBLIC	??1SCmd@script@@QAE@XZ				; script::SCmd::~SCmd
PUBLIC	??0Group@script@@QAE@XZ				; script::Group::Group
PUBLIC	??1Group@script@@QAE@XZ				; script::Group::~Group
PUBLIC	?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; script::Group::Create
PUBLIC	?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z		; script::Group::GetCmd
PUBLIC	?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z	; script::Group::ReadCmd
PUBLIC	?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; script::Group::GetError
PUBLIC	?SetError@Group@script@@AAEXPBD@Z		; script::Group::SetError
PUBLIC	?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
PUBLIC	?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
PUBLIC	?LocaleString_FindChar@@YAPBDPBDHD@Z		; LocaleString_FindChar
PUBLIC	?LocaleString_RightTrim@@YAHPADH@Z		; LocaleString_RightTrim
PUBLIC	?LocaleString_RightTrim@@YAXPAD@Z		; LocaleString_RightTrim
PUBLIC	?OLD_rtrim@@YAXPAD@Z				; OLD_rtrim
PUBLIC	?LocaleString_Skip@@YAPBDKPBD@Z			; LocaleString_Skip
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
PUBLIC	??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ ; `string'
PUBLIC	??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ ; `string'
PUBLIC	??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ ; `string'
PUBLIC	??_C@_0BB@DGGADPCI@no?5argument?5name@		; `string'
PUBLIC	??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ ; `string'
PUBLIC	??_C@_06MJINCFFA@LETTER@			; `string'
PUBLIC	??_C@_05MFEJDJP@value@				; `string'
PUBLIC	??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ ; `string'
PUBLIC	??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ ; `string'
PUBLIC	??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ ; `string'
PUBLIC	??_C@_0O@NKNMEGII@list?5too?5long@		; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_isspace:PROC
EXTRN	__imp__CharNextExA@12:PROC
EXTRN	__imp__CharPrevExA@16:PROC
EXTRN	?TraceError@@YAXPBDZZ:PROC			; TraceError
EXTRN	?GetDefaultCodePage@@YAKXZ:PROC			; GetDefaultCodePage
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA DD 01H DUP (?) ; `script::Group::Create'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ??_C@_0O@NKNMEGII@list?5too?5long@
CONST	SEGMENT
??_C@_0O@NKNMEGII@list?5too?5long@ DB 'list too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
CONST	SEGMENT
??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@ DB ' !! '
	DB	'PARSING ERROR - Unknown Arguments : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
CONST	SEGMENT
??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@ DB ' !! '
	DB	'PARSING ERROR - Buffer Overflow : %d, %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
CONST	SEGMENT
??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@ DB ' !! '
	DB	'PARSING ERROR - Syntax Error : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value@
CONST	SEGMENT
??_C@_05MFEJDJP@value@ DB 'value', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJINCFFA@LETTER@
CONST	SEGMENT
??_C@_06MJINCFFA@LETTER@ DB 'LETTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
CONST	SEGMENT
??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@ DB 'Source file has no'
	DB	' content', 00H				; `string'
CONST	ENDS
;	COMDAT ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
_DATA	SEGMENT
?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A DB 00H ; `script::Group::Create'::`2'::stLetter
	DB	19 DUP(00H)
	DD	0fH
_DATA	ENDS
;	COMDAT ??_C@_0BB@DGGADPCI@no?5argument?5name@
CONST	SEGMENT
??_C@_0BB@DGGADPCI@no?5argument?5name@ DB 'no argument name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
CONST	SEGMENT
??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@ DB 'argument nam'
	DB	'e overflow: must be shorter than 32 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
CONST	SEGMENT
??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@ DB 'argument val'
	DB	'ue overflow: must be shorter than 64 letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
CONST	SEGMENT
??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@ DB 'Infinite loop '
	DB	'in LocaleString_Skip [%s]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
__ehfuncinfo$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Append_range_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z$1
__ehfuncinfo$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$construct@USCmd@script@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@QAUSCmd@script@@ABU34@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z$0
__ehfuncinfo$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0USArgumet@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1
__ehfuncinfo$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z$2
__ehfuncinfo$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0ABUSCmd@script@@@?$_List_node_emplace_op2@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@USArgumet@script@@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEPAU?$_List_node@USArgumet@script@@PAX@1@QAU21@$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z$3
__ehfuncinfo$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$_Emplace@ABUSCmd@script@@@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEPAU?$_List_node@USCmd@script@@PAX@1@QAU21@ABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3
__ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$10
	DD	02H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11
	DD	01H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2
	DD	04H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3
	DD	06H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4
	DD	07H
	DD	FLAT:__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	03H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13
	DD	01H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	05H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
	DD	06H
	DD	FLAT:__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Group@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Group@script@@QAE@XZ$0
__ehfuncinfo$??0Group@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Group@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SCmd@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SCmd@script@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SCmd@script@@QAE@XZ$0
__ehfuncinfo$??0SCmd@script@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SCmd@script@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1
__ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABU01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1
__ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 733  :         if (_Added == 0) {

  00000	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00004	74 39		 je	 SHORT $LN3@List_node_

; 734  :             return;
; 735  :         }
; 736  : 
; 737  :         _Construct_in_place(_Head->_Prev, pointer{});

  00006	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00009	57		 push	 edi
  0000a	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 738  :         _Construct_in_place(_Tail->_Next, pointer{});

  00011	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00014	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 739  :         pointer _Subject = _Head;

  0001a	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]

; 740  :         while (_Subject) {

  0001d	85 ff		 test	 edi, edi
  0001f	74 1d		 je	 SHORT $LN41@List_node_
  00021	56		 push	 esi
$LL2@List_node_:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00022	8b f7		 mov	 esi, edi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00024	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 318  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00026	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00029	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002e	6a 38		 push	 56			; 00000038H
  00030	56		 push	 esi
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 740  :         while (_Subject) {

  00039	85 ff		 test	 edi, edi
  0003b	75 e5		 jne	 SHORT $LL2@List_node_
  0003d	5e		 pop	 esi
$LN41@List_node_:
  0003e	5f		 pop	 edi
$LN3@List_node_:

; 741  :             value_type::_Freenode(_Al, _STD exchange(_Subject, _Subject->_Next));
; 742  :         }
; 743  :     }

  0003f	c3		 ret	 0
??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 38		 push	 56			; 00000038H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
_TEXT	SEGMENT
__Op$2 = -48						; size = 16
tv1004 = -32						; size = 4
__Op$2$ = -32						; size = 4
__Newnode$3 = -28					; size = 8
$T4 = -24						; size = 4
__Myend$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >, COMDAT
; _this$ = ecx

; 1304 :     void _Assign_unchecked(_Iter _First, const _Sent _Last) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax

; 1305 :         // assign [_First, _Last)
; 1306 :         const auto _Myend = _Mypair._Myval2._Myhead;

  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]

; 1307 :         auto _Old         = _Myend->_Next;
; 1308 :         for (;;) { // attempt to reuse a node
; 1309 :             if (_First == _Last) {

  00032	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00035	89 7d e0	 mov	 DWORD PTR tv1004[ebp], edi
  00038	8b 19		 mov	 ebx, DWORD PTR [ecx]
  0003a	89 4d ec	 mov	 DWORD PTR __Myend$1$[ebp], ecx
  0003d	3b f7		 cmp	 esi, edi
  0003f	74 66		 je	 SHORT $LN200@Assign_unc
$LL2@Assign_unc:

; 1310 :                 // input sequence exhausted; destroy and deallocate any tail of unneeded nodes
; 1311 :                 _Unchecked_erase(_Old, _Myend);
; 1312 :                 return;
; 1313 :             }
; 1314 : 
; 1315 :             if (_Old == _Myend) { // no more nodes to reuse, append the rest

  00041	3b d9		 cmp	 ebx, ecx
  00043	0f 84 a3 00 00
	00		 je	 $LN201@Assign_unc

; 43   :         return _Ptr->_Myval;

  00049	8d 46 08	 lea	 eax, DWORD PTR [esi+8]

; 1317 :                 _Op._Append_range_unchecked(_STD move(_First), _Last);
; 1318 :                 _Op._Attach_at_end(_Mypair._Myval2);
; 1319 :                 return;
; 1320 :             }
; 1321 : 
; 1322 :             // reuse the node
; 1323 :             _Old->_Myval = *_First;

  0004c	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]

; 43   :         return _Ptr->_Myval;

  0004f	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00052	3b d0		 cmp	 edx, eax
  00054	74 21		 je	 SHORT $LN177@Assign_unc

; 2301 :         return _BUF_SIZE <= _Myres;

  00056	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  0005a	8b c8		 mov	 ecx, eax

; 2293 :         if (_Large_string_engaged()) {

  0005c	72 02		 jb	 SHORT $LN181@Assign_unc

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0005e	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN181@Assign_unc:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00060	ff 70 10	 push	 DWORD PTR [eax+16]
  00063	51		 push	 ecx
  00064	8b ca		 mov	 ecx, edx
  00066	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0006e	8d 53 08	 lea	 edx, DWORD PTR [ebx+8]
  00071	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00074	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
$LN177@Assign_unc:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 24   : 		strValue = c_arg.strValue;

  00077	83 c0 18	 add	 eax, 24			; 00000018H
  0007a	8d 4a 18	 lea	 ecx, DWORD PTR [edx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  0007d	3b c8		 cmp	 ecx, eax
  0007f	74 18		 je	 SHORT $LN185@Assign_unc

; 2301 :         return _BUF_SIZE <= _Myres;

  00081	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00085	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  00088	72 02		 jb	 SHORT $LN189@Assign_unc

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0008a	8b 00		 mov	 eax, DWORD PTR [eax]
$LN189@Assign_unc:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0008c	52		 push	 edx
  0008d	50		 push	 eax
  0008e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00093	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  00096	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
$LN185@Assign_unc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 51   :         _Ptr = _Ptr->_Next;

  00099	8b 36		 mov	 esi, DWORD PTR [esi]

; 1324 :             _Old         = _Old->_Next;

  0009b	8b 1b		 mov	 ebx, DWORD PTR [ebx]
  0009d	8b 4d ec	 mov	 ecx, DWORD PTR __Myend$1$[ebp]

; 51   :         _Ptr = _Ptr->_Next;

  000a0	89 75 08	 mov	 DWORD PTR __First$[ebp], esi

; 73   :         return _Ptr == _Right._Ptr;

  000a3	3b f7		 cmp	 esi, edi

; 1307 :         auto _Old         = _Myend->_Next;
; 1308 :         for (;;) { // attempt to reuse a node
; 1309 :             if (_First == _Last) {

  000a5	75 9a		 jne	 SHORT $LL2@Assign_unc
$LN200@Assign_unc:

; 1435 :         if (_First == _Last) {

  000a7	3b d9		 cmp	 ebx, ecx
  000a9	74 2d		 je	 SHORT $LN139@Assign_unc

; 1436 :             return _Last;
; 1437 :         }
; 1438 : 
; 1439 :         const auto _Predecessor = _First->_Prev;

  000ab	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]

; 1440 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1441 :         const auto _Head = _Mypair._Myval2._Myhead;
; 1442 :         if (_First == _Head->_Next && _Last == _Head) { // orphan all non-end iterators
; 1443 :             _Mypair._Myval2._Orphan_non_end();
; 1444 :         } else { // orphan erased iterators
; 1445 :             _Lockit _Lock(_LOCK_DEBUG);
; 1446 :             for (auto _Marked = _First; _Marked != _Last; _Marked = _Marked->_Next) { // mark erased nodes
; 1447 :                 _Marked->_Prev = nullptr;
; 1448 :             }
; 1449 : 
; 1450 :             _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;
; 1451 :             while (*_Pnext) {
; 1452 :                 _Iterator_base12** _Pnextnext = &(*_Pnext)->_Mynextiter;
; 1453 :                 if (static_cast<const_iterator&>(**_Pnext)._Ptr->_Prev) { // node still has a _Prev, skip
; 1454 :                     _Pnext = _Pnextnext;
; 1455 :                 } else { // orphan the iterator
; 1456 :                     (*_Pnext)->_Myproxy = nullptr;
; 1457 :                     *_Pnext             = *_Pnextnext;
; 1458 :                 }
; 1459 :             }
; 1460 : 
; 1461 :             // _Prev pointers not restored because we're about to delete the nodes of which they are a member anyway
; 1462 :         }
; 1463 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1464 : 
; 1465 :         // snip out the removed range
; 1466 :         _Predecessor->_Next = _Last;
; 1467 :         _Last->_Prev        = _Predecessor;
; 1468 : 
; 1469 :         // count and deallocate the removed nodes
; 1470 :         auto& _Al           = _Getal();
; 1471 :         size_type _Erasures = 0;

  000ae	33 ff		 xor	 edi, edi
  000b0	89 08		 mov	 DWORD PTR [eax], ecx
  000b2	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LL12@Assign_unc:

; 1472 :         do {
; 1473 :             const auto _Next = _First->_Next;

  000b5	8b 33		 mov	 esi, DWORD PTR [ebx]

; 318  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  000b7	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  000ba	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  000bf	6a 38		 push	 56			; 00000038H
  000c1	53		 push	 ebx
  000c2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000c7	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1476 :             ++_Erasures;

  000ca	47		 inc	 edi
  000cb	8b de		 mov	 ebx, esi

; 1477 :         } while (_First != _Last);

  000cd	3b 75 ec	 cmp	 esi, DWORD PTR __Myend$1$[ebp]
  000d0	75 e3		 jne	 SHORT $LL12@Assign_unc

; 1478 : 
; 1479 :         _Mypair._Myval2._Mysize -= _Erasures;

  000d2	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  000d5	29 78 04	 sub	 DWORD PTR [eax+4], edi
$LN139@Assign_unc:

; 1325 :             ++_First;
; 1326 :         }
; 1327 :     }

  000d8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000e2	59		 pop	 ecx
  000e3	5f		 pop	 edi
  000e4	5e		 pop	 esi
  000e5	5b		 pop	 ebx
  000e6	8b e5		 mov	 esp, ebp
  000e8	5d		 pop	 ebp
  000e9	c2 08 00	 ret	 8
$LN201@Assign_unc:

; 618  :     explicit _List_node_insert_op2(_Alnode& _Al_) : _Al(_Al_), _Added(0) {}

  000ec	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ef	33 d2		 xor	 edx, edx
  000f1	89 45 d0	 mov	 DWORD PTR __Op$2[ebp], eax
  000f4	89 55 d4	 mov	 DWORD PTR __Op$2[ebp+4], edx

; 1316 :                 _List_node_insert_op2<_Alnode> _Op(_Getal());

  000f7	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 655  :         if (_First == _Last) { // throws

  000fa	3b 75 e0	 cmp	 esi, DWORD PTR tv1004[ebp]
  000fd	0f 84 c7 00 00
	00		 je	 $LN216@Assign_unc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00103	89 45 e4	 mov	 DWORD PTR __Newnode$3[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00106	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 659  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);

  00108	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0010c	89 55 e8	 mov	 DWORD PTR __Newnode$3[ebp+4], edx

; 77   :         return ::operator new(_Bytes);

  0010f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00114	8b d8		 mov	 ebx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 43   :         return _Ptr->_Myval;

  00116	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00119	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0011c	89 5d e0	 mov	 DWORD PTR __Op$2$[ebp], ebx

; 1013 :         _Ptr = _Al.allocate(1);

  0011f	89 5d e8	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00122	51		 push	 ecx
  00123	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00126	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 51   :         _Ptr = _Ptr->_Next;

  0012b	8b 36		 mov	 esi, DWORD PTR [esi]

; 665  :             _Tail               = _Newhead;

  0012d	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0012f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 666  :             ++_Added;

  00136	ba 01 00 00 00	 mov	 edx, 1
  0013b	89 5d dc	 mov	 DWORD PTR __Op$2[ebp+12], ebx
  0013e	89 4d d8	 mov	 DWORD PTR __Op$2[ebp+8], ecx
  00141	89 55 d4	 mov	 DWORD PTR __Op$2[ebp+4], edx

; 73   :         return _Ptr == _Right._Ptr;

  00144	3b f7		 cmp	 esi, edi

; 670  :         while (_First != _Last) { // throws

  00146	74 4e		 je	 SHORT $LN217@Assign_unc
  00148	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL50@Assign_unc:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00150	6a 38		 push	 56			; 00000038H

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00152	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00159	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0015e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 43   :         return _Ptr->_Myval;

  00161	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 235  :         return _Traits::_Allocate(_Bytes);

  00164	8b d8		 mov	 ebx, eax

; 1013 :         _Ptr = _Al.allocate(1);

  00166	89 5d e8	 mov	 DWORD PTR __Newnode$3[ebp+4], ebx

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00169	51		 push	 ecx
  0016a	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  0016d	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 673  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);

  00172	8b 45 d8	 mov	 eax, DWORD PTR __Op$2[ebp+8]

; 675  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  00175	8b cb		 mov	 ecx, ebx

; 676  :             ++_Added;

  00177	8b 55 d4	 mov	 edx, DWORD PTR __Op$2[ebp+4]
  0017a	42		 inc	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0017b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Newnode$3[ebp+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 675  :             _Tail = _STD exchange(_Newnode._Ptr, pointer{});

  00182	89 4d d8	 mov	 DWORD PTR __Op$2[ebp+8], ecx
  00185	89 18		 mov	 DWORD PTR [eax], ebx
  00187	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 51   :         _Ptr = _Ptr->_Next;

  0018a	8b 36		 mov	 esi, DWORD PTR [esi]

; 676  :             ++_Added;

  0018c	89 55 d4	 mov	 DWORD PTR __Op$2[ebp+4], edx

; 73   :         return _Ptr == _Right._Ptr;

  0018f	3b f7		 cmp	 esi, edi

; 670  :         while (_First != _Last) { // throws

  00191	75 bd		 jne	 SHORT $LL50@Assign_unc

; 619  : 
; 620  :     _List_node_insert_op2(const _List_node_insert_op2&)            = delete;
; 621  :     _List_node_insert_op2& operator=(const _List_node_insert_op2&) = delete;
; 622  : 
; 623  :     template <class... _CArgT>
; 624  :     void _Append_n(size_type _Count, const _CArgT&... _Carg) {
; 625  :         // Append _Count elements constructed from _Carg
; 626  :         if (_Count <= 0) {
; 627  :             return;
; 628  :         }
; 629  : 
; 630  :         _Alloc_construct_ptr<_Alnode> _Newnode(_Al);
; 631  :         if (_Added == 0) {
; 632  :             _Newnode._Allocate(); // throws
; 633  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _Carg...); // throws
; 634  :             _Head = _Newnode._Ptr;
; 635  :             _Tail = _Newnode._Ptr;
; 636  :             ++_Added;
; 637  :             --_Count;
; 638  :         }
; 639  : 
; 640  :         for (; 0 < _Count; --_Count) {
; 641  :             _Newnode._Allocate(); // throws
; 642  :             _Alnode_traits::construct(_Al, _STD addressof(_Newnode._Ptr->_Myval), _Carg...); // throws
; 643  :             _Construct_in_place(_Tail->_Next, _Newnode._Ptr);
; 644  :             _Construct_in_place(_Newnode._Ptr->_Prev, _Tail);
; 645  :             _Tail = _Newnode._Ptr;
; 646  :             ++_Added;
; 647  :         }
; 648  : 
; 649  :         _Newnode._Ptr = pointer{};
; 650  :     }
; 651  : 
; 652  :     template <class _InIt, class _Sentinel>
; 653  :     void _Append_range_unchecked(_InIt _First, const _Sentinel _Last) {
; 654  :         // Append the values in [_First, _Last)
; 655  :         if (_First == _Last) { // throws

  00193	8b 5d e0	 mov	 ebx, DWORD PTR __Op$2$[ebp]
$LN217@Assign_unc:

; 708  :         _Attach_before(_List_data, _List_data._Myhead);

  00196	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
$LN95@Assign_unc:
  00199	8b 30		 mov	 esi, DWORD PTR [eax]

; 688  :         if (_Local_added == 0) {

  0019b	85 d2		 test	 edx, edx
  0019d	0f 84 35 ff ff
	ff		 je	 $LN139@Assign_unc

; 689  :             return _Insert_before;
; 690  :         }
; 691  : 
; 692  :         const auto _Local_head   = _Head;
; 693  :         const auto _Local_tail   = _Tail;
; 694  :         const auto _Insert_after = _Insert_before->_Prev;

  001a3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 695  : 
; 696  :         _Construct_in_place(_Local_head->_Prev, _Insert_after);

  001a6	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 697  :         _Insert_after->_Next = _Local_head;

  001a9	89 18		 mov	 DWORD PTR [eax], ebx

; 698  :         _Construct_in_place(_Local_tail->_Next, _Insert_before);
; 699  :         _Insert_before->_Prev = _Local_tail;
; 700  : 
; 701  :         _List_data._Mysize += _Local_added;

  001ab	8b 45 f0	 mov	 eax, DWORD PTR _this$1$[ebp]
  001ae	89 31		 mov	 DWORD PTR [ecx], esi
  001b0	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  001b3	01 50 04	 add	 DWORD PTR [eax+4], edx

; 1325 :             ++_First;
; 1326 :         }
; 1327 :     }

  001b6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c0	59		 pop	 ecx
  001c1	5f		 pop	 edi
  001c2	5e		 pop	 esi
  001c3	5b		 pop	 ebx
  001c4	8b e5		 mov	 esp, ebp
  001c6	5d		 pop	 ebp
  001c7	c2 08 00	 ret	 8
$LN216@Assign_unc:

; 655  :         if (_First == _Last) { // throws

  001ca	8b 5d dc	 mov	 ebx, DWORD PTR __Op$2[ebp+12]
  001cd	8b 4d d8	 mov	 ecx, DWORD PTR __Op$2[ebp+8]

; 667  :             ++_First; // throws
; 668  :         }
; 669  : 
; 670  :         while (_First != _Last) { // throws

  001d0	eb c7		 jmp	 SHORT $LN95@Assign_unc
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_List_node_insert_op2@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_List_node_insert_op2<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z$1:
  00008	8d 4d e4	 lea	 ecx, DWORD PTR __Newnode$3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 28		 push	 40			; 00000028H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >, COMDAT

; 324  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 325  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 26		 je	 SHORT $LN3@Free_non_h
  00016	57		 push	 edi
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Free_non_h:

; 329  :             _Pnext = _Pnode->_Next;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 318  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	6a 38		 push	 56			; 00000038H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00035	8b f7		 mov	 esi, edi
  00037	85 ff		 test	 edi, edi
  00039	75 e5		 jne	 SHORT $LL4@Free_non_h
  0003b	5f		 pop	 edi
$LN3@Free_non_h:
  0003c	5e		 pop	 esi

; 330  :             _Freenode(_Al, _Pnode);
; 331  :         }
; 332  :     }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Head$ = 12						; size = 4
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z PROC ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >, COMDAT

; 324  :         _Alnode& _Al, _Nodeptr _Head) noexcept { // free a list starting at _First and terminated at nullptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 325  :         _Head->_Prev->_Next = nullptr;

  00004	8b 75 0c	 mov	 esi, DWORD PTR __Head$[ebp]
  00007	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 326  : 
; 327  :         auto _Pnode = _Head->_Next;

  00010	8b 36		 mov	 esi, DWORD PTR [esi]

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00012	85 f6		 test	 esi, esi
  00014	74 26		 je	 SHORT $LN3@Free_non_h
  00016	57		 push	 edi
  00017	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL4@Free_non_h:

; 329  :             _Pnext = _Pnode->_Next;

  00020	8b 3e		 mov	 edi, DWORD PTR [esi]

; 318  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00022	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00025	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0002a	6a 28		 push	 40			; 00000028H
  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 328  :         for (_Nodeptr _Pnext; _Pnode; _Pnode = _Pnext) {

  00035	8b f7		 mov	 esi, edi
  00037	85 ff		 test	 edi, edi
  00039	75 e5		 jne	 SHORT $LL4@Free_non_h
  0003b	5f		 pop	 edi
$LN3@Free_non_h:
  0003c	5e		 pop	 esi

; 330  :             _Freenode(_Al, _Pnode);
; 331  :         }
; 332  :     }

  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ENDP ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ
text$yd	SEGMENT
??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ PROC ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter'', COMDAT

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 2f		 jb	 SHORT $LN15@dynamic
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00011	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00012	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 14		 jb	 SHORT $LN25@dynamic

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H
  00022	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	0f 87 00 00 00
	00		 ja	 __invalid_parameter_noinfo_noreturn
$LN25@dynamic:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	52		 push	 edx
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
$LN15@dynamic:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0003a	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 05 14 00 00
	00 0f 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, 15 ; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, 0
  00055	c3		 ret	 0
??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ENDP ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?LocaleString_Skip@@YAPBDKPBD@Z
_TEXT	SEGMENT
_codePage$ = 8						; size = 4
_cur$ = 12						; size = 4
?LocaleString_Skip@@YAPBDKPBD@Z PROC			; LocaleString_Skip, COMDAT

; 140  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 141  : 	int loopCount = 0;
; 142  : 
; 143  : 	while (*cur)

  00005	8b 75 0c	 mov	 esi, DWORD PTR _cur$[ebp]
  00008	57		 push	 edi
  00009	33 ff		 xor	 edi, edi
  0000b	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0000e	74 59		 je	 SHORT $LN7@LocaleStri
  00010	8b 5d 08	 mov	 ebx, DWORD PTR _codePage$[ebp]
$LL2@LocaleStri:

; 144  : 	{
; 145  : 		if (++loopCount > 9216)

  00013	47		 inc	 edi
  00014	81 ff 00 24 00
	00		 cmp	 edi, 9216		; 00002400H
  0001a	7f 3f		 jg	 SHORT $LN12@LocaleStri

; 148  : 			break;
; 149  : 		}
; 150  : 
; 151  : 		const char* next = CharNextExA(codePage, cur, 0);

  0001c	6a 00		 push	 0
  0001e	56		 push	 esi
  0001f	53		 push	 ebx
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12
  00026	8b c8		 mov	 ecx, eax

; 152  : 		int cur_len = next - cur;

  00028	2b c6		 sub	 eax, esi

; 153  : 		if (cur_len > 1)

  0002a	83 f8 01	 cmp	 eax, 1
  0002d	7e 04		 jle	 SHORT $LN5@LocaleStri

; 154  : 		{
; 155  : 			cur = next;

  0002f	8b f1		 mov	 esi, ecx

; 156  : 		}

  00031	eb 1c		 jmp	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 157  : 		else if (1 == cur_len)

  00033	75 34		 jne	 SHORT $LN7@LocaleStri

; 158  : 		{
; 159  : 			if (!isspace((unsigned char) *cur) && *cur != '\n' && *cur != '\r')

  00035	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 _isspace
  0003e	83 c4 04	 add	 esp, 4
  00041	85 c0		 test	 eax, eax
  00043	75 0a		 jne	 SHORT $LN9@LocaleStri
  00045	8a 06		 mov	 al, BYTE PTR [esi]
  00047	3c 0a		 cmp	 al, 10			; 0000000aH
  00049	74 04		 je	 SHORT $LN9@LocaleStri
  0004b	3c 0d		 cmp	 al, 13			; 0000000dH
  0004d	75 1a		 jne	 SHORT $LN7@LocaleStri
$LN9@LocaleStri:

; 141  : 	int loopCount = 0;
; 142  : 
; 143  : 	while (*cur)

  0004f	80 3e 00	 cmp	 BYTE PTR [esi], 0
  00052	75 bf		 jne	 SHORT $LL2@LocaleStri

; 160  : 			{
; 161  : 				return cur;
; 162  : 			}
; 163  : 		}
; 164  : 		else
; 165  : 		{
; 166  : 			break;
; 167  : 		}
; 168  : 	}
; 169  : 	return cur;
; 170  : }

  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN12@LocaleStri:

; 146  : 		{
; 147  : 			TraceError("Infinite loop in LocaleString_Skip [%s]", cur);

  0005b	56		 push	 esi
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BGFMKJOI@Infinite?5loop?5in?5LocaleString_S@
  00061	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00066	83 c4 08	 add	 esp, 8
$LN7@LocaleStri:

; 160  : 			{
; 161  : 				return cur;
; 162  : 			}
; 163  : 		}
; 164  : 		else
; 165  : 		{
; 166  : 			break;
; 167  : 		}
; 168  : 	}
; 169  : 	return cur;
; 170  : }

  00069	5f		 pop	 edi
  0006a	8b c6		 mov	 eax, esi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?LocaleString_Skip@@YAPBDKPBD@Z ENDP			; LocaleString_Skip
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?OLD_rtrim@@YAXPAD@Z
_TEXT	SEGMENT
tv222 = 8						; size = 4
_codePage$1$ = 8					; size = 4
_base$ = 8						; size = 4
?OLD_rtrim@@YAXPAD@Z PROC				; OLD_rtrim, COMDAT

; 89   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 90   : 	if (!base)

  00004	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00007	85 ff		 test	 edi, edi
  00009	0f 84 e5 00 00
	00		 je	 $LN30@OLD_rtrim

; 91   : 	{
; 92   : 		return;
; 93   : 	}
; 94   : 
; 95   : 	DWORD codePage = GetDefaultCodePage();

  0000f	53		 push	 ebx
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage
  00016	8b d8		 mov	 ebx, eax
  00018	89 5d 08	 mov	 DWORD PTR _codePage$1$[ebp], ebx

; 96   : 
; 97   : 	if (949 == codePage || 936 == codePage)

  0001b	81 fb b5 03 00
	00		 cmp	 ebx, 949		; 000003b5H
  00021	74 70		 je	 SHORT $LN9@OLD_rtrim
  00023	81 fb a8 03 00
	00		 cmp	 ebx, 936		; 000003a8H
  00029	74 68		 je	 SHORT $LN9@OLD_rtrim

; 111  : 		}
; 112  : 	}
; 113  : 	else
; 114  : 	{
; 115  : 		char* end = base + strlen(base);

  0002b	8b cf		 mov	 ecx, edi
  0002d	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL28@OLD_rtrim:
  00030	8a 01		 mov	 al, BYTE PTR [ecx]
  00032	41		 inc	 ecx
  00033	84 c0		 test	 al, al
  00035	75 f9		 jne	 SHORT $LL28@OLD_rtrim
  00037	2b ca		 sub	 ecx, edx
  00039	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]

; 116  : 
; 117  : 		while (end != base)

  0003c	3b df		 cmp	 ebx, edi
  0003e	0f 84 ae 00 00
	00		 je	 $LN31@OLD_rtrim
  00044	8b 45 08	 mov	 eax, DWORD PTR _codePage$1$[ebp]
  00047	0f b7 c0	 movzx	 eax, ax
  0004a	89 45 08	 mov	 DWORD PTR tv222[ebp], eax
  0004d	0f 1f 00	 npad	 3
$LL4@OLD_rtrim:

; 118  : 		{
; 119  : 			char* prev = CharPrevExA(codePage, base, end, 0);

  00050	6a 00		 push	 0
  00052	53		 push	 ebx
  00053	57		 push	 edi
  00054	50		 push	 eax
  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0005b	8b f0		 mov	 esi, eax

; 120  : 
; 121  : 			int prev_len = end - prev;

  0005d	2b de		 sub	 ebx, esi

; 122  : 			if (prev_len != 1)

  0005f	83 fb 01	 cmp	 ebx, 1
  00062	0f 85 8a 00 00
	00		 jne	 $LN31@OLD_rtrim

; 123  : 			{
; 124  : 				break;
; 125  : 			}
; 126  : 
; 127  : 			if (!isspace((unsigned char) *prev) && *prev != '\n' && *prev != '\r')

  00068	0f b6 0e	 movzx	 ecx, BYTE PTR [esi]
  0006b	51		 push	 ecx
  0006c	e8 00 00 00 00	 call	 _isspace
  00071	83 c4 04	 add	 esp, 4
  00074	85 c0		 test	 eax, eax
  00076	75 0a		 jne	 SHORT $LN15@OLD_rtrim
  00078	8a 06		 mov	 al, BYTE PTR [esi]
  0007a	3c 0a		 cmp	 al, 10			; 0000000aH
  0007c	74 04		 je	 SHORT $LN15@OLD_rtrim
  0007e	3c 0d		 cmp	 al, 13			; 0000000dH
  00080	75 70		 jne	 SHORT $LN31@OLD_rtrim
$LN15@OLD_rtrim:

; 116  : 
; 117  : 		while (end != base)

  00082	8b 45 08	 mov	 eax, DWORD PTR tv222[ebp]

; 128  : 			{
; 129  : 				break;
; 130  : 			}
; 131  : 
; 132  : 			*prev = '\0';
; 133  : 
; 134  : 			end = prev;

  00085	8b de		 mov	 ebx, esi
  00087	c6 06 00	 mov	 BYTE PTR [esi], 0
  0008a	3b f7		 cmp	 esi, edi
  0008c	75 c2		 jne	 SHORT $LL4@OLD_rtrim
  0008e	5e		 pop	 esi
  0008f	5b		 pop	 ebx
  00090	5f		 pop	 edi

; 135  : 		}
; 136  : 	}
; 137  : }

  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
$LN9@OLD_rtrim:

; 98   : 	{
; 99   : 		char* end = base + strlen(base) - 1;

  00093	8b cf		 mov	 ecx, edi
  00095	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL29@OLD_rtrim:
  00098	8a 01		 mov	 al, BYTE PTR [ecx]
  0009a	41		 inc	 ecx
  0009b	84 c0		 test	 al, al
  0009d	75 f9		 jne	 SHORT $LL29@OLD_rtrim
  0009f	2b ca		 sub	 ecx, edx
  000a1	8d 77 ff	 lea	 esi, DWORD PTR [edi-1]
  000a4	03 f1		 add	 esi, ecx

; 100  : 
; 101  : 		while (end != base)

  000a6	3b f7		 cmp	 esi, edi
  000a8	74 48		 je	 SHORT $LN31@OLD_rtrim
  000aa	66 0f 1f 44 00
	00		 npad	 6
$LL2@OLD_rtrim:

; 102  : 		{
; 103  : 			if (!isnhspace((unsigned char) *end) && *end != '\n' && *end != '\r' || (end != base && *((unsigned char*)end - 1) > 0xa0))

  000b0	8a 0e		 mov	 cl, BYTE PTR [esi]
  000b2	8a c1		 mov	 al, cl
  000b4	24 e0		 and	 al, 224			; 000000e0H
  000b6	3c 90		 cmp	 al, 144			; 00000090H
  000b8	77 10		 ja	 SHORT $LN13@OLD_rtrim
  000ba	0f b6 c1	 movzx	 eax, cl
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 _isspace
  000c3	83 c4 04	 add	 esp, 4
  000c6	85 c0		 test	 eax, eax
  000c8	75 0e		 jne	 SHORT $LN27@OLD_rtrim
$LN13@OLD_rtrim:
  000ca	8a 06		 mov	 al, BYTE PTR [esi]
  000cc	3c 0a		 cmp	 al, 10			; 0000000aH
  000ce	74 04		 je	 SHORT $LN12@OLD_rtrim
  000d0	3c 0d		 cmp	 al, 13			; 0000000dH
  000d2	75 1e		 jne	 SHORT $LN31@OLD_rtrim
$LN12@OLD_rtrim:
  000d4	3b f7		 cmp	 esi, edi
  000d6	74 06		 je	 SHORT $LN10@OLD_rtrim
$LN27@OLD_rtrim:
  000d8	80 7e ff a0	 cmp	 BYTE PTR [esi-1], 160	; 000000a0H
  000dc	77 14		 ja	 SHORT $LN31@OLD_rtrim
$LN10@OLD_rtrim:

; 104  : 			{
; 105  : 				break;
; 106  : 			}
; 107  : 
; 108  : 			*end = '\0';
; 109  : 
; 110  : 			end = CharPrevExA(codePage, base, end, 0);

  000de	6a 00		 push	 0
  000e0	56		 push	 esi
  000e1	57		 push	 edi
  000e2	53		 push	 ebx
  000e3	c6 06 00	 mov	 BYTE PTR [esi], 0
  000e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  000ec	8b f0		 mov	 esi, eax
  000ee	3b f7		 cmp	 esi, edi
  000f0	75 be		 jne	 SHORT $LL2@OLD_rtrim
$LN31@OLD_rtrim:
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
$LN30@OLD_rtrim:
  000f4	5f		 pop	 edi

; 135  : 		}
; 136  : 	}
; 137  : }

  000f5	5d		 pop	 ebp
  000f6	c3		 ret	 0
?OLD_rtrim@@YAXPAD@Z ENDP				; OLD_rtrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAXPAD@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
?LocaleString_RightTrim@@YAXPAD@Z PROC			; LocaleString_RightTrim, COMDAT

; 84   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 85   : 	LocaleString_RightTrim(base, strlen(base));

  00003	8b 55 08	 mov	 edx, DWORD PTR _base$[ebp]
  00006	8b c2		 mov	 eax, edx
  00008	56		 push	 esi
  00009	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
  0000c	0f 1f 40 00	 npad	 4
$LL3@LocaleStri:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL3@LocaleStri
  00017	2b c6		 sub	 eax, esi
  00019	50		 push	 eax
  0001a	52		 push	 edx
  0001b	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00020	83 c4 08	 add	 esp, 8
  00023	5e		 pop	 esi

; 86   : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?LocaleString_RightTrim@@YAXPAD@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?LocaleString_RightTrim@@YAHPADH@Z
_TEXT	SEGMENT
_base$ = 8						; size = 4
tv168 = 12						; size = 4
_len$ = 12						; size = 4
?LocaleString_RightTrim@@YAHPADH@Z PROC			; LocaleString_RightTrim, COMDAT

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 50   : 	DWORD codePage = GetDefaultCodePage();

  00006	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 51   : 
; 52   : 	int pos = len;

  0000b	8b 75 0c	 mov	 esi, DWORD PTR _len$[ebp]

; 53   : 
; 54   : 	while (pos > 0)

  0000e	85 f6		 test	 esi, esi
  00010	7e 63		 jle	 SHORT $LN6@LocaleStri

; 50   : 	DWORD codePage = GetDefaultCodePage();

  00012	0f b7 c8	 movzx	 ecx, ax
  00015	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  00018	89 4d 0c	 mov	 DWORD PTR tv168[ebp], ecx
  0001b	8d 1c 30	 lea	 ebx, DWORD PTR [eax+esi]
  0001e	66 90		 npad	 2
$LL2@LocaleStri:

; 55   : 	{
; 56   : 		char* cur = base + pos;
; 57   : 		char* prev = CharPrevExA(codePage, base, cur, 0);

  00020	6a 00		 push	 0
  00022	53		 push	 ebx
  00023	50		 push	 eax
  00024	51		 push	 ecx
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharPrevExA@16
  0002b	8b f8		 mov	 edi, eax

; 58   : 
; 59   : 		int prev_len = cur - prev;

  0002d	8b cb		 mov	 ecx, ebx
  0002f	2b cf		 sub	 ecx, edi

; 60   : 		if (prev_len != 1)

  00031	83 f9 01	 cmp	 ecx, 1
  00034	75 38		 jne	 SHORT $LN14@LocaleStri

; 61   : 		{
; 62   : 			break;
; 63   : 		}
; 64   : 
; 65   : 		if (!isspace((unsigned char) *prev) && *prev != '\n' && *prev != '\r')

  00036	0f b6 0f	 movzx	 ecx, BYTE PTR [edi]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 _isspace
  0003f	83 c4 04	 add	 esp, 4
  00042	85 c0		 test	 eax, eax
  00044	75 0a		 jne	 SHORT $LN5@LocaleStri
  00046	8a 07		 mov	 al, BYTE PTR [edi]
  00048	3c 0a		 cmp	 al, 10			; 0000000aH
  0004a	74 04		 je	 SHORT $LN5@LocaleStri
  0004c	3c 0d		 cmp	 al, 13			; 0000000dH
  0004e	75 11		 jne	 SHORT $LN9@LocaleStri
$LN5@LocaleStri:

; 66   : 		{
; 67   : 			break;
; 68   : 		}
; 69   : 
; 70   : 		*prev = '\0';
; 71   : 
; 72   : 		pos -= prev_len;

  00050	4e		 dec	 esi
  00051	c6 07 00	 mov	 BYTE PTR [edi], 0
  00054	4b		 dec	 ebx
  00055	85 f6		 test	 esi, esi
  00057	7e 1c		 jle	 SHORT $LN6@LocaleStri

; 53   : 
; 54   : 	while (pos > 0)

  00059	8b 45 08	 mov	 eax, DWORD PTR _base$[ebp]
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR tv168[ebp]
  0005f	eb bf		 jmp	 SHORT $LL2@LocaleStri
$LN9@LocaleStri:

; 73   : 	}
; 74   : 
; 75   : 	if (pos > 0)

  00061	33 c0		 xor	 eax, eax
  00063	3b c6		 cmp	 eax, esi
  00065	5f		 pop	 edi
  00066	1b c0		 sbb	 eax, eax
  00068	23 c6		 and	 eax, esi

; 78   : 	}
; 79   : 
; 80   : 	return 0;
; 81   : }

  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx
  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
$LN14@LocaleStri:
  0006e	5f		 pop	 edi

; 76   : 	{
; 77   : 		return pos;

  0006f	8b c6		 mov	 eax, esi

; 78   : 	}
; 79   : 
; 80   : 	return 0;
; 81   : }

  00071	5e		 pop	 esi
  00072	5b		 pop	 ebx
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
$LN6@LocaleStri:
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	33 c0		 xor	 eax, eax
  00079	5b		 pop	 ebx
  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
?LocaleString_RightTrim@@YAHPADH@Z ENDP			; LocaleString_RightTrim
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?LocaleString_FindChar@@YAPBDPBDHD@Z
_TEXT	SEGMENT
tv166 = -4						; size = 4
_base$ = 8						; size = 4
_len$ = 12						; size = 4
_test$ = 16						; size = 1
?LocaleString_FindChar@@YAPBDPBDHD@Z PROC		; LocaleString_FindChar, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 14   : 	if (!base)

  00007	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  0000a	85 ff		 test	 edi, edi
  0000c	74 41		 je	 SHORT $LN7@LocaleStri

; 15   : 	{
; 16   : 		return NULL;
; 17   : 	}
; 18   : 
; 19   : 	DWORD codePage = GetDefaultCodePage();

  0000e	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 20   : 
; 21   : 	int pos = 0;
; 22   : 	while (pos < len)

  00013	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp]
  00016	33 f6		 xor	 esi, esi
  00018	85 db		 test	 ebx, ebx
  0001a	7e 33		 jle	 SHORT $LN7@LocaleStri
  0001c	0f b7 c0	 movzx	 eax, ax
  0001f	89 45 fc	 mov	 DWORD PTR tv166[ebp], eax
$LL2@LocaleStri:

; 23   : 	{
; 24   : 		const char* cur = base + pos;
; 25   : 		const char* next = CharNextExA(codePage, cur, 0);

  00022	6a 00		 push	 0
  00024	03 fe		 add	 edi, esi
  00026	57		 push	 edi
  00027	50		 push	 eax
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 26   : 		int cur_len = next - cur;

  0002e	2b c7		 sub	 eax, edi

; 27   : 		if (cur_len > 1)

  00030	83 f8 01	 cmp	 eax, 1
  00033	7f 0e		 jg	 SHORT $LN8@LocaleStri

; 28   : 		{
; 29   : 			pos += cur_len;
; 30   : 		}
; 31   : 		else if (1 == cur_len)

  00035	75 18		 jne	 SHORT $LN7@LocaleStri

; 32   : 		{
; 33   : 			if (*cur == test)

  00037	8a 45 10	 mov	 al, BYTE PTR _test$[ebp]
  0003a	38 07		 cmp	 BYTE PTR [edi], al
  0003c	74 1a		 je	 SHORT $LN12@LocaleStri

; 36   : 			}
; 37   : 
; 38   : 			++pos;

  0003e	b8 01 00 00 00	 mov	 eax, 1
$LN8@LocaleStri:

; 20   : 
; 21   : 	int pos = 0;
; 22   : 	while (pos < len)

  00043	8b 7d 08	 mov	 edi, DWORD PTR _base$[ebp]
  00046	03 f0		 add	 esi, eax
  00048	8b 45 fc	 mov	 eax, DWORD PTR tv166[ebp]
  0004b	3b f3		 cmp	 esi, ebx
  0004d	7c d3		 jl	 SHORT $LL2@LocaleStri
$LN7@LocaleStri:
  0004f	5f		 pop	 edi

; 39   : 		}
; 40   : 		else
; 41   : 		{
; 42   : 			break;
; 43   : 		}
; 44   : 	}
; 45   : 	return NULL;
; 46   : }

  00050	5e		 pop	 esi
  00051	33 c0		 xor	 eax, eax
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN12@LocaleStri:

; 34   : 			{
; 35   : 				return cur;

  00058	8b c7		 mov	 eax, edi
  0005a	5f		 pop	 edi

; 39   : 		}
; 40   : 		else
; 41   : 		{
; 42   : 			break;
; 43   : 		}
; 44   : 	}
; 45   : 	return NULL;
; 46   : }

  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
?LocaleString_FindChar@@YAPBDPBDHD@Z ENDP		; LocaleString_FindChar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
_TEXT	SEGMENT
__Op$2 = -32						; size = 8
$T3 = -24						; size = 4
__Where$1$ = -20					; size = 4
_this$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z PROC ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back, COMDAT
; _this$ = ecx

; 1255 :     void push_back(const _Ty& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f1		 mov	 esi, ecx

; 1012 :         if (_Mysize == max_size()) {

  00029	81 7e 04 66 66
	66 06		 cmp	 DWORD PTR [esi+4], 107374182 ; 06666666H

; 1256 :         _Emplace(_Mypair._Myval2._Myhead, _Val);

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	89 45 ec	 mov	 DWORD PTR __Where$1$[ebp], eax

; 1012 :         if (_Mysize == max_size()) {

  00035	0f 84 c3 00 00
	00		 je	 $LN132@push_back
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0003b	89 75 e0	 mov	 DWORD PTR __Op$2[ebp], esi

; 77   :         return ::operator new(_Bytes);

  0003e	6a 28		 push	 40			; 00000028H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00047	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00053	8b f8		 mov	 edi, eax
  00055	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 586  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  00058	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1013 :         _Ptr = _Al.allocate(1);

  0005b	89 7d e4	 mov	 DWORD PTR __Op$2[ebp+4], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0005e	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 4998 :         _My_data._Mysize = 0;

  00061	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00068	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  0006f	89 45 e8	 mov	 DWORD PTR $T3[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00072	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 39   : 	SCmd(const SCmd& c_cmd)

  00075	83 c0 18	 add	 eax, 24			; 00000018H
  00078	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0007c	6a 38		 push	 56			; 00000038H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 39   : 	SCmd(const SCmd& c_cmd)

  0007e	89 45 f0	 mov	 DWORD PTR _this$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00081	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00087	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0008e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00093	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00096	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  00099	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0009b	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  0009e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  000a0	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  000a3	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 39   : 	SCmd(const SCmd& c_cmd)

  000a6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  000aa	3b c8		 cmp	 ecx, eax
  000ac	74 16		 je	 SHORT $LN70@push_back

; 2301 :         return _BUF_SIZE <= _Myres;

  000ae	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  000b2	8b d0		 mov	 edx, eax

; 2293 :         if (_Large_string_engaged()) {

  000b4	72 02		 jb	 SHORT $LN74@push_back

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000b6	8b 10		 mov	 edx, DWORD PTR [eax]
$LN74@push_back:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000b8	ff 70 10	 push	 DWORD PTR [eax+16]
  000bb	52		 push	 edx
  000bc	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000c1	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
$LN70@push_back:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1068 :         if (this == _STD addressof(_Right)) {

  000c4	8b 4d f0	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 42   : 		argList = c_cmd.argList;

  000c7	83 c0 18	 add	 eax, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1068 :         if (this == _STD addressof(_Right)) {

  000ca	3b c8		 cmp	 ecx, eax
  000cc	74 0a		 je	 SHORT $LN78@push_back

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  000ce	8b 00		 mov	 eax, DWORD PTR [eax]

; 1333 :         _Assign_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  000d0	50		 push	 eax
  000d1	ff 30		 push	 DWORD PTR [eax]
  000d3	e8 00 00 00 00	 call	 ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN78@push_back:

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  000d8	8b 4d ec	 mov	 ecx, DWORD PTR __Where$1$[ebp]

; 1017 :         ++_Mysize;

  000db	ff 46 04	 inc	 DWORD PTR [esi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  000de	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  000e1	89 0f		 mov	 DWORD PTR [edi], ecx

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  000e3	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  000e6	89 79 04	 mov	 DWORD PTR [ecx+4], edi

; 605  :         _Insert_after->_Next  = _Result;

  000e9	89 38		 mov	 DWORD PTR [eax], edi

; 1257 :     }

  000eb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ee	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000f5	59		 pop	 ecx
  000f6	5f		 pop	 edi
  000f7	5e		 pop	 esi
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
$LN132@push_back:

; 1013 :             _Xlength_error("list too long");

  000fe	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00103	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN130@push_back:
  00108	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$1:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SCmd,void *> > >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$2:
  00008	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z$3:
  00010	8b 4d e8	 mov	 ecx, DWORD PTR $T3[ebp]
  00013	83 c1 18	 add	 ecx, 24			; 00000018H
  00016	e9 00 00 00 00	 jmp	 ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
  0001f	cc		 int	 3
__ehhandler$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z:
  00020	90		 npad	 1
  00021	90		 npad	 1
  00022	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00026	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00029	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ENDP ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -284						; size = 8
tv2152 = -276						; size = 4
_c_arg_base$GSCopy$1$ = -272				; size = 4
_pos$1$ = -268						; size = 4
__Result$2$ = -264					; size = 4
__Result$2$ = -264					; size = 4
_argList$GSCopy$1$ = -260				; size = 4
__Ptr$1$ = -256						; size = 4
$T3 = -252						; size = 4
__Old_capacity$1$ = -252				; size = 4
__Ptr$1$ = -248						; size = 4
$T4 = -244						; size = 4
__Old_capacity$1$ = -240				; size = 4
_cur$1$ = -240						; size = 4
_c$1$ = -233						; size = 1
$T5 = -232						; size = 4
_iCharLen$1$ = -228					; size = 4
$T6 = -224						; size = 4
$T7 = -224						; size = 4
$T8 = -224						; size = 4
_isValue$1$ = -217					; size = 1
$T9 = -216						; size = 48
$T10 = -216						; size = 48
$T11 = -168						; size = 24
$T12 = -168						; size = 24
$T13 = -144						; size = 24
$T14 = -144						; size = 24
_szValue$ = -120					; size = 65
_szName$ = -52						; size = 33
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_c_arg_base$ = 8					; size = 4
_arg_len$ = 12						; size = 4
_argList$ = 16						; size = 4
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z PROC ; script::Group::GetArg, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 45 08	 mov	 eax, DWORD PTR _c_arg_base$[ebp]

; 174  : 	char szName[32 + 1];
; 175  : 	char szValue[64 + 1];
; 176  : 
; 177  : 	int iNameLen = 0;

  00030	33 f6		 xor	 esi, esi
  00032	8b 4d 10	 mov	 ecx, DWORD PTR _argList$[ebp]

; 178  : 	int iValueLen = 0;

  00035	33 ff		 xor	 edi, edi
  00037	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _c_arg_base$GSCopy$1$[ebp], eax
  0003d	89 8d fc fe ff
	ff		 mov	 DWORD PTR _argList$GSCopy$1$[ebp], ecx

; 179  : 	int iCharLen = 0;
; 180  : 
; 181  : 	int pos = 0;

  00043	89 b5 f4 fe ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], esi

; 182  : 
; 183  : 	bool isValue = false;

  00049	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _isValue$1$[ebp], 0

; 184  : 
; 185  : 	DWORD codePage = GetDefaultCodePage();

  00050	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 186  : 
; 187  : 	while (pos < arg_len)

  00055	39 75 0c	 cmp	 DWORD PTR _arg_len$[ebp], esi
  00058	0f 8e fd 08 00
	00		 jle	 $LN26@GetArg
  0005e	0f b7 d0	 movzx	 edx, ax
  00061	33 c9		 xor	 ecx, ecx
  00063	89 95 ec fe ff
	ff		 mov	 DWORD PTR tv2152[ebp], edx
  00069	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@GetArg:

; 188  : 	{
; 189  : 		const char* cur = c_arg_base + pos;

  00070	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _c_arg_base$GSCopy$1$[ebp]
  00076	03 c1		 add	 eax, ecx

; 190  : 		const char* next = CharNextExA(codePage, cur, 0);

  00078	6a 00		 push	 0
  0007a	50		 push	 eax
  0007b	52		 push	 edx
  0007c	89 85 10 ff ff
	ff		 mov	 DWORD PTR _cur$1$[ebp], eax
  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12
  00088	8b c8		 mov	 ecx, eax

; 191  : 		iCharLen = next - cur;

  0008a	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _cur$1$[ebp]
  00090	2b c8		 sub	 ecx, eax
  00092	89 8d 1c ff ff
	ff		 mov	 DWORD PTR _iCharLen$1$[ebp], ecx

; 192  : 
; 193  : 		if (iCharLen > 1)

  00098	83 f9 01	 cmp	 ecx, 1
  0009b	7e 71		 jle	 SHORT $LN4@GetArg

; 194  : 		{
; 195  : 			if (isValue)

  0009d	80 bd 27 ff ff
	ff 00		 cmp	 BYTE PTR _isValue$1$[ebp], 0
  000a4	74 34		 je	 SHORT $LN6@GetArg

; 196  : 			{
; 197  : 				if (iValueLen >= 64)

  000a6	83 ff 40	 cmp	 edi, 64			; 00000040H
  000a9	0f 8d ea 07 00
	00		 jge	 $LN459@GetArg

; 198  : 				{
; 199  : 					TraceError("argument value overflow: must be shorter than 64 letters");
; 200  : 					return false;
; 201  : 				}
; 202  : 
; 203  : 				memcpy(szValue + iValueLen, cur, iCharLen);

  000af	51		 push	 ecx
  000b0	50		 push	 eax
  000b1	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  000b4	03 c7		 add	 eax, edi
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 _memcpy

; 204  : 				iValueLen += iCharLen;

  000bc	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000c2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c5	03 f8		 add	 edi, eax

; 205  : 				szValue[iValueLen] = '\0';

  000c7	83 ff 41	 cmp	 edi, 65			; 00000041H
  000ca	0f 83 be 08 00
	00		 jae	 $LN34@GetArg
  000d0	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 206  : 			}

  000d5	e9 8d 07 00 00	 jmp	 $LN21@GetArg
$LN6@GetArg:

; 207  : 			else
; 208  : 			{
; 209  : 				if (iNameLen >= 32)

  000da	83 fe 20	 cmp	 esi, 32			; 00000020H
  000dd	0f 8d ca 07 00
	00		 jge	 $LN460@GetArg

; 210  : 				{
; 211  : 					TraceError("argument name overflow: must be shorter than 32 letters");
; 212  : 					return false;
; 213  : 				}
; 214  : 				memcpy(szName + iNameLen, cur, iCharLen);

  000e3	51		 push	 ecx
  000e4	50		 push	 eax
  000e5	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  000e8	03 c6		 add	 eax, esi
  000ea	50		 push	 eax
  000eb	e8 00 00 00 00	 call	 _memcpy

; 215  : 				iNameLen += iCharLen;

  000f0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
  000f6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f9	03 f0		 add	 esi, eax

; 216  : 				szName[iNameLen] = '\0';

  000fb	83 fe 21	 cmp	 esi, 33			; 00000021H
  000fe	0f 83 8a 08 00
	00		 jae	 $LN34@GetArg
  00104	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0

; 217  : 			}
; 218  : 		}

  00109	e9 59 07 00 00	 jmp	 $LN21@GetArg
$LN4@GetArg:

; 219  : 		else if (iCharLen == 1)

  0010e	0f 85 ad 07 00
	00		 jne	 $LN469@GetArg

; 220  : 		{
; 221  : 			const char c = *cur;

  00114	8a 08		 mov	 cl, BYTE PTR [eax]
  00116	88 8d 17 ff ff
	ff		 mov	 BYTE PTR _c$1$[ebp], cl

; 222  : 			if (c == '|')

  0011c	80 f9 7c	 cmp	 cl, 124			; 0000007cH
  0011f	0f 85 ba 06 00
	00		 jne	 $LN12@GetArg

; 223  : 			{
; 224  : 				if (iNameLen == 0)

  00125	85 f6		 test	 esi, esi
  00127	0f 84 58 07 00
	00		 je	 $LN453@GetArg

; 228  : 				}
; 229  : 
; 230  : 				isValue = false;
; 231  : 
; 232  : 				iNameLen = LocaleString_RightTrim(szName, iNameLen);

  0012d	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  00130	c6 85 27 ff ff
	ff 00		 mov	 BYTE PTR _isValue$1$[ebp], 0
  00137	56		 push	 esi
  00138	50		 push	 eax
  00139	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 233  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  0013e	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  00141	57		 push	 edi
  00142	50		 push	 eax
  00143	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  00148	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2349 :     size_type _Mysize = 0; // current length of string

  0014b	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+16], 0

; 415  :             return __builtin_strlen(_First);

  00155	8d 7d 88	 lea	 edi, DWORD PTR _szValue$[ebp]

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00158	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 233  : 				iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  00162	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00165	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00168	0f 11 85 58 ff
	ff ff		 movups	 XMMWORD PTR $T12[ebp], xmm0
  0016f	90		 npad	 1
$LL470@GetArg:

; 415  :             return __builtin_strlen(_First);

  00170	8a 07		 mov	 al, BYTE PTR [edi]
  00172	47		 inc	 edi
  00173	84 c0		 test	 al, al
  00175	75 f9		 jne	 SHORT $LL470@GetArg
  00177	2b f9		 sub	 edi, ecx

; 2740 :         if (_Count > max_size()) {

  00179	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  0017f	0f 87 04 08 00
	00		 ja	 $LN457@GetArg

; 2741 :             _Xlen_string(); // result too long
; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  00185	83 ff 10	 cmp	 edi, 16			; 00000010H
  00188	73 4c		 jae	 SHORT $LN56@GetArg

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0018a	57		 push	 edi
  0018b	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]

; 2749 :             _My_data._Mysize = _Count;

  0018e	89 bd 68 ff ff
	ff		 mov	 DWORD PTR $T12[ebp+16], edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00194	50		 push	 eax
  00195	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  0019b	c7 85 6c ff ff
	ff 0f 00 00 00	 mov	 DWORD PTR $T12[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001a5	50		 push	 eax
  001a6	e8 00 00 00 00	 call	 _memcpy

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  001ab	c6 84 3d 58 ff
	ff ff 00	 mov	 BYTE PTR $T12[ebp+edi], 0

; 2757 :             } else { // _Strat == _Construct_strategy::_From_string
; 2758 : #ifdef _INSERT_STRING_ANNOTATION
; 2759 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2760 : #else // ^^^ _INSERT_STRING_ANNOTATION ^^^ // vvv !_INSERT_STRING_ANNOTATION vvv
; 2761 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2762 : #endif // !_INSERT_STRING_ANNOTATION
; 2763 :             }
; 2764 : 
; 2765 :             _ASAN_STRING_CREATE(*this);
; 2766 :             _Proxy._Release();
; 2767 :             return;

  001b3	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR $T12[ebp+20]
  001b9	8b bd 68 ff ff
	ff		 mov	 edi, DWORD PTR $T12[ebp+16]
  001bf	89 85 0c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  001c5	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR $T12[ebp]
  001cb	89 85 08 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  001d1	e9 92 00 00 00	 jmp	 $LN477@GetArg
$LN56@GetArg:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  001d6	8b f7		 mov	 esi, edi
  001d8	83 ce 0f	 or	 esi, 15			; 0000000fH
  001db	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  001e1	76 1b		 jbe	 SHORT $LN63@GetArg

; 4885 :             return _Max;

  001e3	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001e8	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001ed	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4885 :             return _Max;

  001ee	89 b5 0c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001f4	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001f9	83 c4 04	 add	 esp, 4
  001fc	eb 3d		 jmp	 SHORT $LN478@GetArg
$LN63@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001fe	83 fe 16	 cmp	 esi, 22			; 00000016H
  00201	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00206	0f 42 f0	 cmovb	 esi, eax
  00209	89 b5 0c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esi

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0020f	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00212	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00217	72 0b		 jb	 SHORT $LN71@GetArg

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00219	50		 push	 eax
  0021a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0021f	83 c4 04	 add	 esp, 4
  00222	eb 17		 jmp	 SHORT $LN478@GetArg
$LN71@GetArg:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00224	85 c0		 test	 eax, eax
  00226	74 0b		 je	 SHORT $LN72@GetArg

; 77   :         return ::operator new(_Bytes);

  00228	50		 push	 eax
  00229	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0022e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00231	eb 02		 jmp	 SHORT $LN479@GetArg
$LN72@GetArg:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00233	33 c0		 xor	 eax, eax
$LN479@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00235	89 b5 0c ff ff
	ff		 mov	 DWORD PTR $T4[ebp], esi
$LN478@GetArg:

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0023b	57		 push	 edi
  0023c	8d 4d 88	 lea	 ecx, DWORD PTR _szValue$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0023f	89 85 08 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00245	51		 push	 ecx
  00246	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00247	89 85 58 ff ff
	ff		 mov	 DWORD PTR $T12[ebp], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  0024d	89 bd 68 ff ff
	ff		 mov	 DWORD PTR $T12[ebp+16], edi

; 2782 :         _My_data._Myres  = _New_capacity;

  00253	89 b5 6c ff ff
	ff		 mov	 DWORD PTR $T12[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00259	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0025e	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR __Ptr$1$[ebp]
  00264	c6 04 38 00	 mov	 BYTE PTR [eax+edi], 0
$LN477@GetArg:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  00268	83 c4 0c	 add	 esp, 12			; 0000000cH
  0026b	0f 57 c0	 xorps	 xmm0, xmm0
  0026e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00275	8d 75 cc	 lea	 esi, DWORD PTR _szName$[ebp]

; 2349 :     size_type _Mysize = 0; // current length of string

  00278	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+16], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0027f	0f 11 85 70 ff
	ff ff		 movups	 XMMWORD PTR $T14[ebp], xmm0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00286	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 0

; 415  :             return __builtin_strlen(_First);

  0028d	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL471@GetArg:
  00290	8a 06		 mov	 al, BYTE PTR [esi]
  00292	46		 inc	 esi
  00293	84 c0		 test	 al, al
  00295	75 f9		 jne	 SHORT $LL471@GetArg
  00297	2b f1		 sub	 esi, ecx
  00299	89 b5 20 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], esi

; 2740 :         if (_Count > max_size()) {

  0029f	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  002a5	0f 87 de 06 00
	00		 ja	 $LN457@GetArg

; 2741 :             _Xlen_string(); // result too long
; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  002ab	83 fe 10	 cmp	 esi, 16			; 00000010H
  002ae	73 46		 jae	 SHORT $LN94@GetArg

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002b0	56		 push	 esi
  002b1	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]

; 2749 :             _My_data._Mysize = _Count;

  002b4	89 75 80	 mov	 DWORD PTR $T14[ebp+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002b7	50		 push	 eax
  002b8	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T14[ebp]

; 2750 :             _My_data._Myres  = _BUF_SIZE - 1;

  002be	c7 45 84 0f 00
	00 00		 mov	 DWORD PTR $T14[ebp+20], 15 ; 0000000fH

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 _memcpy

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  002cb	c6 84 35 70 ff
	ff ff 00	 mov	 BYTE PTR $T14[ebp+esi], 0

; 2757 :             } else { // _Strat == _Construct_strategy::_From_string
; 2758 : #ifdef _INSERT_STRING_ANNOTATION
; 2759 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2760 : #else // ^^^ _INSERT_STRING_ANNOTATION ^^^ // vvv !_INSERT_STRING_ANNOTATION vvv
; 2761 :                 _Traits::move(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2762 : #endif // !_INSERT_STRING_ANNOTATION
; 2763 :             }
; 2764 : 
; 2765 :             _ASAN_STRING_CREATE(*this);
; 2766 :             _Proxy._Release();
; 2767 :             return;

  002d3	8b 45 84	 mov	 eax, DWORD PTR $T14[ebp+20]
  002d6	8b 75 80	 mov	 esi, DWORD PTR $T14[ebp+16]
  002d9	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T14[ebp]
  002df	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  002e5	89 b5 20 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], esi
  002eb	89 8d 00 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  002f1	e9 b6 00 00 00	 jmp	 $LN480@GetArg
$LN94@GetArg:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  002f6	8b c6		 mov	 eax, esi
  002f8	83 c8 0f	 or	 eax, 15			; 0000000fH
  002fb	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00300	76 23		 jbe	 SHORT $LN101@GetArg

; 4885 :             return _Max;

  00302	b9 00 00 00 80	 mov	 ecx, -2147483648	; 80000000H
  00307	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0030c	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4885 :             return _Max;

  0030d	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00313	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00318	8b c8		 mov	 ecx, eax
  0031a	83 c4 04	 add	 esp, 4
  0031d	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00323	eb 5a		 jmp	 SHORT $LN481@GetArg
$LN101@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00325	83 f8 16	 cmp	 eax, 22			; 00000016H
  00328	b9 16 00 00 00	 mov	 ecx, 22			; 00000016H
  0032d	0f 42 c1	 cmovb	 eax, ecx
  00330	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00336	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00339	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0033f	72 13		 jb	 SHORT $LN109@GetArg

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00341	51		 push	 ecx
  00342	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00347	8b c8		 mov	 ecx, eax
  00349	83 c4 04	 add	 esp, 4
  0034c	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00352	eb 2b		 jmp	 SHORT $LN481@GetArg
$LN109@GetArg:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00354	85 c9		 test	 ecx, ecx
  00356	74 1f		 je	 SHORT $LN110@GetArg

; 77   :         return ::operator new(_Bytes);

  00358	51		 push	 ecx
  00359	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0035e	8b c8		 mov	 ecx, eax
  00360	89 85 00 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], eax
  00366	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]

; 77   :         return ::operator new(_Bytes);

  0036c	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0036f	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00375	eb 0e		 jmp	 SHORT $LN108@GetArg
$LN110@GetArg:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00377	33 c9		 xor	 ecx, ecx
  00379	89 85 18 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
$LN481@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0037f	89 8d 00 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
$LN108@GetArg:

; 2782 :         _My_data._Myres  = _New_capacity;

  00385	89 45 84	 mov	 DWORD PTR $T14[ebp+20], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00388	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  0038b	56		 push	 esi
  0038c	50		 push	 eax
  0038d	51		 push	 ecx

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0038e	89 8d 70 ff ff
	ff		 mov	 DWORD PTR $T14[ebp], ecx

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  00394	89 75 80	 mov	 DWORD PTR $T14[ebp+16], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00397	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0039c	8b 8d 00 ff ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
  003a2	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  003a8	c6 04 31 00	 mov	 BYTE PTR [ecx+esi], 0
$LN480@GetArg:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  003ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  003af	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4998 :         _My_data._Mysize = 0;

  003b2	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  003bc	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003c1	0f 11 85 28 ff
	ff ff		 movups	 XMMWORD PTR $T10[ebp], xmm0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  003c8	89 95 04 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  003ce	89 95 3c ff ff
	ff		 mov	 DWORD PTR $T10[ebp+20], edx

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003d4	c6 85 28 ff ff
	ff 00		 mov	 BYTE PTR $T10[ebp], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  003db	0f 11 85 40 ff
	ff ff		 movups	 XMMWORD PTR $T10[ebp+24], xmm0

; 4998 :         _My_data._Mysize = 0;

  003e2	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp+40], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  003ec	89 95 10 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], edx
  003f2	89 95 54 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+44], edx

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  003f8	c6 85 40 ff ff
	ff 00		 mov	 BYTE PTR $T10[ebp+24], 0

; 2293 :         if (_Large_string_engaged()) {

  003ff	83 f8 10	 cmp	 eax, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 11   : 	SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00402	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2292 :         const value_type* _Result = _Bx._Buf;

  00406	8d 95 70 ff ff
	ff		 lea	 edx, DWORD PTR $T14[ebp]

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0040c	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH

; 2293 :         if (_Large_string_engaged()) {

  00411	0f 43 d1	 cmovae	 edx, ecx
  00414	89 95 f8 fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], edx

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0041a	3b f0		 cmp	 esi, eax
  0041c	77 35		 ja	 SHORT $LN156@GetArg

; 3531 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3532 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3533 :             _Mypair._Myval2._Mysize = _Count;

  0041e	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]

; 2283 :         value_type* _Result = _Bx._Buf;

  00424	8d b5 28 ff ff
	ff		 lea	 esi, DWORD PTR $T10[ebp]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0042a	50		 push	 eax
  0042b	52		 push	 edx
  0042c	56		 push	 esi

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  0042d	89 85 38 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+16], eax

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00433	e8 00 00 00 00	 call	 _memmove

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00438	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0043e	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 3536 :             return *this;

  00442	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+44]
  00448	89 8d 10 ff ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx
  0044e	e9 e5 00 00 00	 jmp	 $LN482@GetArg
$LN156@GetArg:

; 4903 :         if (_New_size > max_size()) {

  00453	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00459	0f 87 2a 05 00
	00		 ja	 $LN457@GetArg

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0045f	8b ce		 mov	 ecx, esi
  00461	0b c8		 or	 ecx, eax
  00463	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00469	76 21		 jbe	 SHORT $LN173@GetArg

; 4885 :             return _Max;

  0046b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00470	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00476	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0047b	50		 push	 eax
  0047c	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00481	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00487	83 c4 04	 add	 esp, 4
  0048a	eb 78		 jmp	 SHORT $LN483@GetArg
$LN173@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0048c	8b d0		 mov	 edx, eax
  0048e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00493	d1 ea		 shr	 edx, 1
  00495	2b c2		 sub	 eax, edx
  00497	39 85 04 ff ff
	ff		 cmp	 DWORD PTR __Old_capacity$1$[ebp], eax
  0049d	76 21		 jbe	 SHORT $LN174@GetArg

; 4889 :             return _Max;

  0049f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  004a4	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  004aa	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  004af	50		 push	 eax
  004b0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  004b5	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  004bb	83 c4 04	 add	 esp, 4
  004be	eb 44		 jmp	 SHORT $LN483@GetArg
$LN174@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  004c0	b8 0f 00 00 00	 mov	 eax, 15			; 0000000fH
  004c5	03 c2		 add	 eax, edx
  004c7	3b c8		 cmp	 ecx, eax
  004c9	0f 42 c8	 cmovb	 ecx, eax
  004cc	89 8d 04 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  004d2	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004d5	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  004da	72 11		 jb	 SHORT $LN181@GetArg

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  004dc	50		 push	 eax
  004dd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  004e2	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  004e8	83 c4 04	 add	 esp, 4
  004eb	eb 17		 jmp	 SHORT $LN483@GetArg
$LN181@GetArg:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  004ed	85 c0		 test	 eax, eax
  004ef	74 11		 je	 SHORT $LN182@GetArg

; 77   :         return ::operator new(_Bytes);

  004f1	50		 push	 eax
  004f2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  004f7	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]

; 77   :         return ::operator new(_Bytes);

  004fd	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00500	eb 02		 jmp	 SHORT $LN483@GetArg
$LN182@GetArg:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00502	33 c0		 xor	 eax, eax
$LN483@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00504	56		 push	 esi
  00505	ff b5 f8 fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  0050b	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T8[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00511	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  00512	89 b5 38 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+16], esi

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  00518	89 8d 3c ff ff
	ff		 mov	 DWORD PTR $T10[ebp+20], ecx

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0051e	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00523	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00529	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH

; 4924 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;
; 4925 :         } else {
; 4926 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  0052e	89 85 28 ff ff
	ff		 mov	 DWORD PTR $T10[ebp], eax

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00534	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0
$LN482@GetArg:

; 2292 :         const value_type* _Result = _Bx._Buf;

  00538	83 c4 0c	 add	 esp, 12			; 0000000cH
  0053b	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]

; 2293 :         if (_Large_string_engaged()) {

  00541	83 bd 0c ff ff
	ff 10		 cmp	 DWORD PTR $T4[ebp], 16	; 00000010H
  00548	0f 43 85 08 ff
	ff ff		 cmovae	 eax, DWORD PTR __Ptr$1$[ebp]
  0054f	89 85 f8 fe ff
	ff		 mov	 DWORD PTR __Result$2$[ebp], eax

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00555	3b f9		 cmp	 edi, ecx
  00557	77 2a		 ja	 SHORT $LN220@GetArg

; 2284 :         if (_Large_string_engaged()) {

  00559	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  0055c	89 bd 50 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+40], edi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00562	57		 push	 edi

; 2283 :         value_type* _Result = _Bx._Buf;

  00563	8d b5 40 ff ff
	ff		 lea	 esi, DWORD PTR $T10[ebp+24]

; 2284 :         if (_Large_string_engaged()) {

  00569	0f 43 b5 40 ff
	ff ff		 cmovae	 esi, DWORD PTR $T10[ebp+24]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00570	50		 push	 eax
  00571	56		 push	 esi
  00572	e8 00 00 00 00	 call	 _memmove
  00577	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0057a	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 3536 :             return *this;

  0057e	e9 ea 00 00 00	 jmp	 $LN232@GetArg
$LN220@GetArg:

; 4903 :         if (_New_size > max_size()) {

  00583	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00589	0f 87 fa 03 00
	00		 ja	 $LN457@GetArg

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0058f	8b f7		 mov	 esi, edi
  00591	83 ce 0f	 or	 esi, 15			; 0000000fH
  00594	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0059a	76 15		 jbe	 SHORT $LN237@GetArg

; 4885 :             return _Max;

  0059c	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  005a1	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005a6	50		 push	 eax
  005a7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005ac	83 c4 04	 add	 esp, 4
  005af	eb 52		 jmp	 SHORT $LN484@GetArg
$LN237@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  005b1	8b d1		 mov	 edx, ecx
  005b3	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  005b8	d1 ea		 shr	 edx, 1
  005ba	2b c2		 sub	 eax, edx
  005bc	3b c8		 cmp	 ecx, eax
  005be	76 15		 jbe	 SHORT $LN238@GetArg

; 4889 :             return _Max;

  005c0	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  005c5	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005ca	50		 push	 eax
  005cb	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005d0	83 c4 04	 add	 esp, 4
  005d3	eb 2e		 jmp	 SHORT $LN484@GetArg
$LN238@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  005d5	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  005d8	3b f0		 cmp	 esi, eax
  005da	0f 42 f0	 cmovb	 esi, eax

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  005dd	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  005e0	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  005e5	72 0b		 jb	 SHORT $LN245@GetArg

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005e7	50		 push	 eax
  005e8	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005ed	83 c4 04	 add	 esp, 4
  005f0	eb 11		 jmp	 SHORT $LN484@GetArg
$LN245@GetArg:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  005f2	85 c0		 test	 eax, eax
  005f4	74 0b		 je	 SHORT $LN246@GetArg

; 77   :         return ::operator new(_Bytes);

  005f6	50		 push	 eax
  005f7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  005fc	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  005ff	eb 02		 jmp	 SHORT $LN484@GetArg
$LN246@GetArg:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00601	33 c0		 xor	 eax, eax
$LN484@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00603	57		 push	 edi
  00604	ff b5 f8 fe ff
	ff		 push	 DWORD PTR __Result$2$[ebp]

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  0060a	89 b5 54 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+44], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00610	8b f0		 mov	 esi, eax
  00612	56		 push	 esi

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  00613	89 85 20 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], eax
  00619	89 bd 50 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+40], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0061f	e8 00 00 00 00	 call	 _memcpy

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00624	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR __Old_capacity$1$[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0062a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  0062d	c6 04 37 00	 mov	 BYTE PTR [edi+esi], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00631	83 fa 10	 cmp	 edx, 16			; 00000010H
  00634	72 31		 jb	 SHORT $LN231@GetArg

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00636	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00639	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp+24]
  0063f	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00641	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00647	72 14		 jb	 SHORT $LN268@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00649	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0064c	83 c1 23	 add	 ecx, 35			; 00000023H
  0064f	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00651	83 c0 fc	 add	 eax, -4			; fffffffcH
  00654	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00657	0f 87 1d 03 00
	00		 ja	 $LN442@GetArg
$LN268@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0065d	51		 push	 ecx
  0065e	52		 push	 edx
  0065f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00664	83 c4 08	 add	 esp, 8
$LN231@GetArg:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  00667	89 b5 40 ff ff
	ff		 mov	 DWORD PTR $T10[ebp+24], esi
$LN232@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 971  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  0066d	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _argList$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  00673	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  00677	81 78 04 24 49
	92 04		 cmp	 DWORD PTR [eax+4], 76695844 ; 04924924H

; 971  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  0067e	8b 38		 mov	 edi, DWORD PTR [eax]

; 1012 :         if (_Mysize == max_size()) {

  00680	0f 84 f9 02 00
	00		 je	 $LN458@GetArg
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00686	89 85 e4 fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 77   :         return ::operator new(_Bytes);

  0068c	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0068e	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00692	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  0069c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  006a1	8b f0		 mov	 esi, eax

; 77   :         return ::operator new(_Bytes);

  006a3	83 c4 04	 add	 esp, 4

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  006a6	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]

; 1013 :         _Ptr = _Al.allocate(1);

  006ac	89 b5 e8 fe ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], esi
  006b2	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  006b5	50		 push	 eax
  006b6	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  006bb	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _argList$GSCopy$1$[ebp]

; 603  :         this->_Ptr            = pointer{};

  006c1	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  006cb	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  006cf	ff 40 04	 inc	 DWORD PTR [eax+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  006d2	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  006d5	89 3e		 mov	 DWORD PTR [esi], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  006d7	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 604  :         _Insert_before->_Prev = _Result;

  006da	89 77 04	 mov	 DWORD PTR [edi+4], esi

; 605  :         _Insert_after->_Next  = _Result;

  006dd	89 31		 mov	 DWORD PTR [ecx], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  006df	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+44]
  006e5	83 f9 10	 cmp	 ecx, 16			; 00000010H
  006e8	72 2f		 jb	 SHORT $LN353@GetArg
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006ea	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  006f0	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  006f1	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  006f3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  006f9	72 14		 jb	 SHORT $LN363@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  006fb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  006fe	83 c1 23	 add	 ecx, 35			; 00000023H
  00701	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00703	83 c0 fc	 add	 eax, -4			; fffffffcH
  00706	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00709	0f 87 6b 02 00
	00		 ja	 $LN442@GetArg
$LN363@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0070f	51		 push	 ecx
  00710	52		 push	 edx
  00711	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00716	83 c4 08	 add	 esp, 8
$LN353@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00719	8b 8d 3c ff ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+20]
  0071f	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00722	72 2f		 jb	 SHORT $LN381@GetArg
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00724	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0072a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0072b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0072d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00733	72 14		 jb	 SHORT $LN391@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00735	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00738	83 c1 23	 add	 ecx, 35			; 00000023H
  0073b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0073d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00740	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00743	0f 87 31 02 00
	00		 ja	 $LN442@GetArg
$LN391@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00749	51		 push	 ecx
  0074a	52		 push	 edx
  0074b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00750	83 c4 08	 add	 esp, 8
$LN381@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00753	8b 85 18 ff ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  00759	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0075d	83 f8 10	 cmp	 eax, 16			; 00000010H
  00760	72 31		 jb	 SHORT $LN408@GetArg
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00762	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00768	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0076b	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0076d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00773	72 14		 jb	 SHORT $LN418@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00775	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00778	83 c1 23	 add	 ecx, 35			; 00000023H
  0077b	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0077d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00780	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00783	0f 87 f1 01 00
	00		 ja	 $LN442@GetArg
$LN418@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00789	51		 push	 ecx
  0078a	52		 push	 edx
  0078b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00790	83 c4 08	 add	 esp, 8
$LN408@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00793	8b 85 0c ff ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 234  : 				argList.push_back(TArg(szName, szValue));

  00799	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  007a0	83 f8 10	 cmp	 eax, 16			; 00000010H
  007a3	72 31		 jb	 SHORT $LN435@GetArg
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007a5	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR __Ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  007ab	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  007ae	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  007b0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  007b6	72 14		 jb	 SHORT $LN445@GetArg

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  007b8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  007bb	83 c1 23	 add	 ecx, 35			; 00000023H
  007be	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007c0	83 c0 fc	 add	 eax, -4			; fffffffcH
  007c3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007c6	0f 87 ae 01 00
	00		 ja	 $LN442@GetArg
$LN445@GetArg:

; 255  :         ::operator delete(_Ptr, _Bytes);

  007cc	51		 push	 ecx
  007cd	52		 push	 edx
  007ce	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007d3	83 c4 08	 add	 esp, 8
$LN435@GetArg:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 236  : 				iNameLen = 0;

  007d6	33 f6		 xor	 esi, esi

; 237  : 				iValueLen = 0;

  007d8	33 ff		 xor	 edi, edi

; 238  : 			}

  007da	e9 82 00 00 00	 jmp	 $LN474@GetArg
$LN12@GetArg:

; 239  : 			else if (c == ';')

  007df	80 f9 3b	 cmp	 cl, 59			; 0000003bH
  007e2	75 09		 jne	 SHORT $LN15@GetArg

; 240  : 			{
; 241  : 				isValue = true;

  007e4	c6 85 27 ff ff
	ff 01		 mov	 BYTE PTR _isValue$1$[ebp], 1

; 242  : 			}

  007eb	eb 74		 jmp	 SHORT $LN474@GetArg
$LN15@GetArg:

; 243  : 			else if (!isValue && iNameLen == 0 && isspace((unsigned char) c))

  007ed	8a 95 27 ff ff
	ff		 mov	 dl, BYTE PTR _isValue$1$[ebp]
  007f3	84 d2		 test	 dl, dl
  007f5	75 26		 jne	 SHORT $LN17@GetArg
  007f7	85 f6		 test	 esi, esi
  007f9	75 22		 jne	 SHORT $LN17@GetArg
  007fb	0f b6 c1	 movzx	 eax, cl
  007fe	50		 push	 eax
  007ff	e8 00 00 00 00	 call	 _isspace
  00804	83 c4 04	 add	 esp, 4
  00807	85 c0		 test	 eax, eax
  00809	75 56		 jne	 SHORT $LN474@GetArg
  0080b	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _cur$1$[ebp]
  00811	8a 8d 17 ff ff
	ff		 mov	 cl, BYTE PTR _c$1$[ebp]
  00817	8a 95 27 ff ff
	ff		 mov	 dl, BYTE PTR _isValue$1$[ebp]
$LN17@GetArg:

; 244  : 			{
; 245  : 			}
; 246  : 			else if (c == '\r' || c == '\n')

  0081d	80 f9 0d	 cmp	 cl, 13			; 0000000dH
  00820	74 3f		 je	 SHORT $LN474@GetArg
  00822	80 f9 0a	 cmp	 cl, 10			; 0000000aH
  00825	74 3a		 je	 SHORT $LN474@GetArg

; 247  : 			{
; 248  : 			}
; 249  : 			else
; 250  : 			{
; 251  : 				if (isValue)

  00827	84 d2		 test	 dl, dl
  00829	74 1c		 je	 SHORT $LN22@GetArg

; 252  : 				{
; 253  : 					if (iValueLen >= 64)

  0082b	83 ff 40	 cmp	 edi, 64			; 00000040H
  0082e	7d 69		 jge	 SHORT $LN459@GetArg

; 257  : 					}
; 258  : 
; 259  : 					memcpy(szValue + iValueLen, cur, iCharLen);

  00830	8a 00		 mov	 al, BYTE PTR [eax]
  00832	88 44 3d 88	 mov	 BYTE PTR _szValue$[ebp+edi], al

; 260  : 					iValueLen += iCharLen;

  00836	47		 inc	 edi

; 261  : 					szValue[iValueLen]        = '\0';

  00837	83 ff 41	 cmp	 edi, 65			; 00000041H
  0083a	0f 83 4e 01 00
	00		 jae	 $LN34@GetArg
  00840	c6 44 3d 88 00	 mov	 BYTE PTR _szValue$[ebp+edi], 0

; 262  : 				}

  00845	eb 1a		 jmp	 SHORT $LN474@GetArg
$LN22@GetArg:

; 263  : 				else
; 264  : 				{
; 265  : 					if (iNameLen >= 32)

  00847	83 fe 20	 cmp	 esi, 32			; 00000020H
  0084a	7d 61		 jge	 SHORT $LN460@GetArg

; 269  : 					}
; 270  : 					memcpy(szName + iNameLen, cur, iCharLen);

  0084c	8a 00		 mov	 al, BYTE PTR [eax]
  0084e	88 44 35 cc	 mov	 BYTE PTR _szName$[ebp+esi], al

; 271  : 					iNameLen += iCharLen;

  00852	46		 inc	 esi

; 272  : 					szName[iNameLen]        = '\0';

  00853	83 fe 21	 cmp	 esi, 33			; 00000021H
  00856	0f 83 32 01 00
	00		 jae	 $LN34@GetArg
  0085c	c6 44 35 cc 00	 mov	 BYTE PTR _szName$[ebp+esi], 0
$LN474@GetArg:

; 273  : 				}
; 274  : 			}
; 275  : 		}
; 276  : 		else
; 277  : 		{
; 278  : 			break;
; 279  : 		}
; 280  : 
; 281  : 		pos += iCharLen;

  00861	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _iCharLen$1$[ebp]
$LN21@GetArg:
  00867	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR _pos$1$[ebp]
  0086d	03 c8		 add	 ecx, eax
  0086f	89 8d f4 fe ff
	ff		 mov	 DWORD PTR _pos$1$[ebp], ecx
  00875	3b 4d 0c	 cmp	 ecx, DWORD PTR _arg_len$[ebp]
  00878	7d 47		 jge	 SHORT $LN469@GetArg

; 186  : 
; 187  : 	while (pos < arg_len)

  0087a	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR tv2152[ebp]
  00880	e9 eb f7 ff ff	 jmp	 $LL2@GetArg
$LN453@GetArg:

; 225  : 				{
; 226  : 					TraceError("no argument name");

  00885	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DGGADPCI@no?5argument?5name@
  0088a	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  0088f	83 c4 04	 add	 esp, 4

; 227  : 					return false;

  00892	32 c0		 xor	 al, al
  00894	e9 c4 00 00 00	 jmp	 $LN1@GetArg
$LN459@GetArg:

; 254  : 					{
; 255  : 						TraceError("argument value overflow: must be shorter than 64 letters");

  00899	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OGJKDJPN@argument?5value?5overflow?3?5must?5b@
  0089e	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  008a3	83 c4 04	 add	 esp, 4

; 256  : 						return false;

  008a6	32 c0		 xor	 al, al
  008a8	e9 b0 00 00 00	 jmp	 $LN1@GetArg
$LN460@GetArg:

; 266  : 					{
; 267  : 						TraceError("argument name overflow: must be shorter than 32 letters");

  008ad	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@HBCKLDEP@argument?5name?5overflow?3?5must?5be@
  008b2	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  008b7	83 c4 04	 add	 esp, 4

; 268  : 						return false;

  008ba	32 c0		 xor	 al, al
  008bc	e9 9c 00 00 00	 jmp	 $LN1@GetArg
$LN469@GetArg:

; 282  : 	}
; 283  : 
; 284  : 	if (iNameLen != 0 && iValueLen != 0)

  008c1	85 f6		 test	 esi, esi
  008c3	0f 84 92 00 00
	00		 je	 $LN26@GetArg
  008c9	85 ff		 test	 edi, edi
  008cb	0f 84 8a 00 00
	00		 je	 $LN26@GetArg

; 285  : 	{
; 286  : 		iNameLen = LocaleString_RightTrim(szName, iNameLen);

  008d1	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  008d4	56		 push	 esi
  008d5	50		 push	 eax
  008d6	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim

; 287  : 		iValueLen = LocaleString_RightTrim(szValue, iValueLen);

  008db	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  008de	57		 push	 edi
  008df	50		 push	 eax
  008e0	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  008e5	83 c4 10	 add	 esp, 16			; 00000010H

; 288  : 		argList.push_back(TArg(szName, szValue));

  008e8	8d 45 88	 lea	 eax, DWORD PTR _szValue$[ebp]
  008eb	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  008f1	50		 push	 eax
  008f2	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  008f7	8d 45 cc	 lea	 eax, DWORD PTR _szName$[ebp]
  008fa	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
  00901	50		 push	 eax
  00902	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00908	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0090d	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  00913	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00917	50		 push	 eax
  00918	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T11[ebp]
  0091e	50		 push	 eax
  0091f	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00925	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  0092a	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _argList$GSCopy$1$[ebp]
  00930	50		 push	 eax
  00931	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00935	e8 00 00 00 00	 call	 ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
  0093a	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00940	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
  00945	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0094b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00950	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00956	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN26@GetArg:

; 289  : 	}
; 290  : 
; 291  : 	return true;

  0095b	b0 01		 mov	 al, 1
$LN1@GetArg:

; 292  : }

  0095d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00960	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00967	59		 pop	 ecx
  00968	5f		 pop	 edi
  00969	5e		 pop	 esi
  0096a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0096d	33 cd		 xor	 ecx, ebp
  0096f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00974	8b e5		 mov	 esp, ebp
  00976	5d		 pop	 ebp
  00977	c2 0c 00	 ret	 12			; 0000000cH
$LN442@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0097a	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN458@GetArg:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1013 :             _Xlength_error("list too long");

  0097f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00984	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN457@GetArg:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 292  : }

  00989	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN34@GetArg:

; 272  : 					szName[iNameLen]        = '\0';

  0098e	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN476@GetArg:
  00993	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$0:
  00000	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$1:
  0000b	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$10:
  00016	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$11:
  00021	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp+24]
  00027	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$2:
  0002c	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$19:
  00037	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$3:
  00042	8d 8d 70 ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$4:
  0004d	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z$5:
  00058	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0005e	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
  00063	cc		 int	 3
  00064	cc		 int	 3
  00065	cc		 int	 3
  00066	cc		 int	 3
  00067	cc		 int	 3
__ehhandler$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z:
  00068	90		 npad	 1
  00069	90		 npad	 1
  0006a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0006e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00071	8b 8a e4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-284]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00081	33 c8		 xor	 ecx, eax
  00083	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00088	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z
  0008d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ENDP ; script::Group::GetArg
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?SetError@Group@script@@AAEXPBD@Z
_TEXT	SEGMENT
_c_pszError$ = 8					; size = 4
?SetError@Group@script@@AAEXPBD@Z PROC			; script::Group::SetError, COMDAT
; _this$ = ecx

; 445  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00003	8b 55 08	 mov	 edx, DWORD PTR _c_pszError$[ebp]
  00006	8b c2		 mov	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 445  : {

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  0000c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000f	90		 npad	 1
$LL7@SetError:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL7@SetError
  00017	2b c7		 sub	 eax, edi

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00019	8b ce		 mov	 ecx, esi
  0001b	50		 push	 eax
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 447  : }

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
?SetError@Group@script@@AAEXPBD@Z ENDP			; script::Group::SetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; script::Group::GetError, COMDAT
; _this$ = ecx

; 441  : 	return m_stError;

  00000	8b c1		 mov	 eax, ecx

; 442  : }

  00002	c3		 ret	 0
?GetError@Group@script@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; script::Group::GetError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::ReadCmd, COMDAT
; _this$ = ecx

; 429  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  00003	83 79 1c 00	 cmp	 DWORD PTR [ecx+28], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 430  : 	if (m_cmdList.empty())

  00007	75 06		 jne	 SHORT $LN2@ReadCmd

; 431  : 	{
; 432  : 		return false;

  00009	32 c0		 xor	 al, al

; 437  : }

  0000b	5d		 pop	 ebp
  0000c	c2 04 00	 ret	 4
$LN2@ReadCmd:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1207 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0000f	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00012	56		 push	 esi
  00013	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00014	8b 7d 08	 mov	 edi, DWORD PTR _cmd$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1207 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00017	8b 30		 mov	 esi, DWORD PTR [eax]
  00019	83 c6 08	 add	 esi, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  0001c	3b fe		 cmp	 edi, esi
  0001e	74 15		 je	 SHORT $LN10@ReadCmd

; 2301 :         return _BUF_SIZE <= _Myres;

  00020	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00024	8b c6		 mov	 eax, esi

; 2293 :         if (_Large_string_engaged()) {

  00026	72 02		 jb	 SHORT $LN14@ReadCmd

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00028	8b 06		 mov	 eax, DWORD PTR [esi]
$LN14@ReadCmd:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002a	ff 76 10	 push	 DWORD PTR [esi+16]
  0002d	8b cf		 mov	 ecx, edi
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN10@ReadCmd:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 47   : 		argList = c_cmd.argList;

  00035	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00038	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1068 :         if (this == _STD addressof(_Right)) {

  0003d	3b c8		 cmp	 ecx, eax
  0003f	74 0a		 je	 SHORT $LN18@ReadCmd

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00041	8b 00		 mov	 eax, DWORD PTR [eax]

; 1333 :         _Assign_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  00043	50		 push	 eax
  00044	ff 30		 push	 DWORD PTR [eax]
  00046	e8 00 00 00 00	 call	 ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN18@ReadCmd:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 436  : 	return true;

  0004b	b0 01		 mov	 al, 1

; 437  : }

  0004d	5d		 pop	 ebp
  0004e	c2 04 00	 ret	 4
?ReadCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::ReadCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z
_TEXT	SEGMENT
_cmd$ = 8						; size = 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z PROC		; script::Group::GetCmd, COMDAT
; _this$ = ecx

; 417  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1195 :         return _Mypair._Myval2._Mysize == 0;

  00006	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 418  : 	if (m_cmdList.empty())

  0000a	75 07		 jne	 SHORT $LN2@GetCmd

; 419  : 	{
; 420  : 		return false;

  0000c	32 c0		 xor	 al, al
  0000e	5f		 pop	 edi

; 426  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
$LN2@GetCmd:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1207 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  00013	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00016	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00017	8b 5d 08	 mov	 ebx, DWORD PTR _cmd$[ebp]
  0001a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1207 :         return _Mypair._Myval2._Myhead->_Next->_Myval;

  0001b	8b 30		 mov	 esi, DWORD PTR [eax]
  0001d	83 c6 08	 add	 esi, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00020	3b de		 cmp	 ebx, esi
  00022	74 15		 je	 SHORT $LN10@GetCmd

; 2301 :         return _BUF_SIZE <= _Myres;

  00024	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  00028	8b c6		 mov	 eax, esi

; 2293 :         if (_Large_string_engaged()) {

  0002a	72 02		 jb	 SHORT $LN14@GetCmd

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0002c	8b 06		 mov	 eax, DWORD PTR [esi]
$LN14@GetCmd:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0002e	ff 76 10	 push	 DWORD PTR [esi+16]
  00031	8b cb		 mov	 ecx, ebx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN10@GetCmd:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 47   : 		argList = c_cmd.argList;

  00039	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  0003c	8d 4b 18	 lea	 ecx, DWORD PTR [ebx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1068 :         if (this == _STD addressof(_Right)) {

  0003f	3b c8		 cmp	 ecx, eax
  00041	74 0a		 je	 SHORT $LN18@GetCmd

; 38   :     _List_unchecked_const_iterator(_Nodeptr _Pnode, const _Mylist* _Plist) noexcept : _Ptr(_Pnode) {

  00043	8b 00		 mov	 eax, DWORD PTR [eax]

; 1333 :         _Assign_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last));

  00045	50		 push	 eax
  00046	ff 30		 push	 DWORD PTR [eax]
  00048	e8 00 00 00 00	 call	 ??$_Assign_unchecked@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@AAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@USArgumet@script@@@std@@@std@@U_Iterator_base0@2@@1@V21@@Z ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::_Assign_unchecked<std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0>,std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<script::SArgumet> >,std::_Iterator_base0> >
$LN18@GetCmd:

; 1252 :         _Unchecked_erase(_Mypair._Myval2._Myhead->_Next);

  0004d	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00050	8b 30		 mov	 esi, DWORD PTR [eax]

; 1418 :         const auto _Result = _Pnode->_Next;

  00052	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 1419 :         _Mypair._Myval2._Orphan_ptr2(_Pnode);
; 1420 :         --_Mypair._Myval2._Mysize;

  00054	ff 4f 1c	 dec	 DWORD PTR [edi+28]

; 1421 :         _Pnode->_Prev->_Next = _Result;

  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	89 08		 mov	 DWORD PTR [eax], ecx

; 1422 :         _Result->_Prev       = _Pnode->_Prev;

  0005c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005f	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 318  :         allocator_traits<_Alnode>::destroy(_Al, _STD addressof(_Ptr->_Myval));

  00062	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00065	e8 00 00 00 00	 call	 ??1SCmd@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 28		 push	 40			; 00000028H
  0006c	56		 push	 esi
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 425  : 	return true;

  00075	b0 01		 mov	 al, 1
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
  00079	5f		 pop	 edi

; 426  : }

  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?GetCmd@Group@script@@QAE_NAAUSCmd@2@@Z ENDP		; script::Group::GetCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
__Op$2 = -1200						; size = 8
__Op$3 = -1192						; size = 8
tv3155 = -1184						; size = 4
_len_line$1$ = -1180					; size = 4
_str_len$1$ = -1176					; size = 4
_this$GSCopy$1$ = -1172					; size = 4
_codePage$1$ = -1168					; size = 4
__Result$1$ = -1164					; size = 4
_str_pos$1$ = -1160					; size = 4
_cur$1$ = -1153						; size = 1
__Old_capacity$1$ = -1152				; size = 4
$T4 = -1152						; size = 4
__Old_capacity$1$ = -1152				; size = 4
$T5 = -1152						; size = 4
$T6 = -1152						; size = 4
$T7 = -1148						; size = 48
$T8 = -1148						; size = 48
$T9 = -1100						; size = 24
$T10 = -1100						; size = 24
_cmd$11 = -1076						; size = 32
_box_data$ = -1044					; size = 1025
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_stSource$ = 8						; size = 4
?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; script::Group::Create, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 04 00
	00		 sub	 esp, 1188		; 000004a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	89 8d 6c fb ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00033	ff 71 18	 push	 DWORD PTR [ecx+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 296  : {

  00036	8b 45 08	 mov	 eax, DWORD PTR _stSource$[ebp]

; 297  : 	m_cmdList.clear();

  00039	8d 71 18	 lea	 esi, DWORD PTR [ecx+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0003c	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 296  : {

  0003d	89 85 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  00043	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  00048	8b 06		 mov	 eax, DWORD PTR [esi]
  0004a	83 c4 08	 add	 esp, 8
  0004d	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  00054	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4376 :         return _Mypair._Myval2._Mysize == 0;

  0005b	8b b5 74 fb ff
	ff		 mov	 esi, DWORD PTR __Result$1$[ebp]
  00061	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00064	89 85 68 fb ff
	ff		 mov	 DWORD PTR _str_len$1$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 299  : 	if (stSource.empty())

  0006a	85 c0		 test	 eax, eax
  0006c	0f 84 45 0a 00
	00		 je	 $LN614@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2293 :         if (_Large_string_engaged()) {

  00072	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
  00076	72 08		 jb	 SHORT $LN288@Create

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00078	8b 36		 mov	 esi, DWORD PTR [esi]
  0007a	89 b5 74 fb ff
	ff		 mov	 DWORD PTR __Result$1$[ebp], esi
$LN288@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 305  : 	if (!str_base || !*str_base)

  00080	85 f6		 test	 esi, esi
  00082	0f 84 22 0a 00
	00		 je	 $LN7@Create
  00088	80 3e 00	 cmp	 BYTE PTR [esi], 0
  0008b	0f 84 19 0a 00
	00		 je	 $LN7@Create

; 308  : 		return -1;
; 309  : 	}
; 310  : 
; 311  : 	int str_len = stSource.length();
; 312  : 	int str_pos = 0;

  00091	33 ff		 xor	 edi, edi

; 313  : 	int len_line = 0;

  00093	89 bd 64 fb ff
	ff		 mov	 DWORD PTR _len_line$1$[ebp], edi

; 314  : 
; 315  : 	DWORD codePage = GetDefaultCodePage();

  00099	e8 00 00 00 00	 call	 ?GetDefaultCodePage@@YAKXZ ; GetDefaultCodePage

; 316  : 
; 317  : 	char box_data[1024 + 1];
; 318  : 
; 319  : 	static std::string stLetter;

  0009e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  000a4	8b d0		 mov	 edx, eax
  000a6	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  000ac	89 95 70 fb ff
	ff		 mov	 DWORD PTR _codePage$1$[ebp], edx
  000b2	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  000b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  000ba	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  000c0	0f 8f 11 0a 00
	00		 jg	 $LN770@Create
  000c6	eb 06		 jmp	 SHORT $LN2@Create
$LN765@Create:

; 321  : 	while (str_pos < str_len)

  000c8	8b 95 70 fb ff
	ff		 mov	 edx, DWORD PTR _codePage$1$[ebp]
$LN2@Create:
  000ce	39 bd 68 fb ff
	ff		 cmp	 DWORD PTR _str_len$1$[ebp], edi
  000d4	0f 8e c8 09 00
	00		 jle	 $LN671@Create
  000da	0f b7 c2	 movzx	 eax, dx
  000dd	89 85 60 fb ff
	ff		 mov	 DWORD PTR tv3155[ebp], eax
$LL3@Create:
  000e3	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4998 :         _My_data._Mysize = 0;

  000e6	c7 85 dc fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+16], 0

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000f0	0f 11 85 cc fb
	ff ff		 movups	 XMMWORD PTR _cmd$11[ebp], xmm0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  000f7	c7 85 e0 fb ff
	ff 0f 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+20], 15 ; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00101	c6 85 cc fb ff
	ff 00		 mov	 BYTE PTR _cmd$11[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00108	6a 38		 push	 56			; 00000038H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 37   : 	SCmd()

  0010a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00111	c7 85 e4 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+24], 0
  0011b	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00125	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0012a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0012d	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0012f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00132	89 85 e4 fb ff
	ff		 mov	 DWORD PTR _cmd$11[ebp+24], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 326  : 		const char* word_next = CharNextExA(codePage, word, 0);

  00138	6a 00		 push	 0
  0013a	03 f7		 add	 esi, edi
  0013c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00143	56		 push	 esi
  00144	ff b5 60 fb ff
	ff		 push	 DWORD PTR tv3155[ebp]
  0014a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 327  : 
; 328  : 		int word_len = word_next - word;

  00150	2b c6		 sub	 eax, esi

; 329  : 		if (word_len > 1)

  00152	83 f8 01	 cmp	 eax, 1
  00155	0f 8e 2b 02 00
	00		 jle	 $LN8@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3578 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0015b	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 331  : 			str_pos += word_len;

  0015c	03 f8		 add	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3578 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0015e	b9 00 00 00 00	 mov	 ecx, OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00163	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 331  : 			str_pos += word_len;

  00164	89 bd 78 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3578 :             return assign(_UFirst, _Convert_size<size_type>(static_cast<size_t>(_ULast - _UFirst)));

  0016a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  0016f	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
  00175	89 8d 80 fb ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx
  0017b	83 f9 06	 cmp	 ecx, 6
  0017e	72 33		 jb	 SHORT $LN755@Create

; 2284 :         if (_Large_string_engaged()) {

  00180	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00183	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+16], 6

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0018d	6a 06		 push	 6

; 2283 :         value_type* _Result = _Bx._Buf;

  0018f	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$11[ebp]

; 2284 :         if (_Large_string_engaged()) {

  00195	0f 43 b5 cc fb
	ff ff		 cmovae	 esi, DWORD PTR _cmd$11[ebp]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0019c	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  001a1	56		 push	 esi
  001a2	e8 00 00 00 00	 call	 _memmove
  001a7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  001aa	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 3536 :             return *this;

  001ae	e9 ce 00 00 00	 jmp	 $LN152@Create
$LN755@Create:

; 4907 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001b3	8b d1		 mov	 edx, ecx

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001b5	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4907 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  001ba	d1 ea		 shr	 edx, 1

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  001bc	2b c2		 sub	 eax, edx
  001be	3b c8		 cmp	 ecx, eax
  001c0	76 1d		 jbe	 SHORT $LN158@Create

; 4889 :             return _Max;

  001c2	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  001c7	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001cc	50		 push	 eax
  001cd	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001d2	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  001d8	83 c4 04	 add	 esp, 4
  001db	8b f8		 mov	 edi, eax
  001dd	eb 43		 jmp	 SHORT $LN164@Create
$LN158@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  001df	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  001e2	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  001e7	3b c6		 cmp	 eax, esi
  001e9	0f 47 f0	 cmova	 esi, eax

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  001ec	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  001ef	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  001f4	72 13		 jb	 SHORT $LN165@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  001f6	50		 push	 eax
  001f7	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  001fc	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  00202	83 c4 04	 add	 esp, 4
  00205	8b f8		 mov	 edi, eax
  00207	eb 19		 jmp	 SHORT $LN164@Create
$LN165@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00209	85 c0		 test	 eax, eax
  0020b	74 13		 je	 SHORT $LN166@Create

; 77   :         return ::operator new(_Bytes);

  0020d	50		 push	 eax
  0020e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00213	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  00219	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0021c	8b f8		 mov	 edi, eax
  0021e	eb 02		 jmp	 SHORT $LN164@Create
$LN166@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00220	33 ff		 xor	 edi, edi
$LN164@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00222	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06MJINCFFA@LETTER@

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  00227	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+16], 6

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  00231	89 b5 e0 fb ff
	ff		 mov	 DWORD PTR _cmd$11[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00237	89 07		 mov	 DWORD PTR [edi], eax
  00239	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  0023f	66 89 47 04	 mov	 WORD PTR [edi+4], ax

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00243	c6 47 06 00	 mov	 BYTE PTR [edi+6], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00247	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0024a	72 2f		 jb	 SHORT $LN151@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0024c	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00252	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00253	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00255	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0025b	72 14		 jb	 SHORT $LN188@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0025d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00260	83 c1 23	 add	 ecx, 35			; 00000023H
  00263	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00265	83 c0 fc	 add	 eax, -4			; fffffffcH
  00268	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0026b	0f 87 ab 08 00
	00		 ja	 $LN678@Create
$LN188@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00271	51		 push	 ecx
  00272	52		 push	 edx
  00273	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00278	83 c4 08	 add	 esp, 8
$LN151@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 335  : 			cmd.argList.push_back(TArg("value", stLetter));

  0027b	89 bd cc fb ff
	ff		 mov	 DWORD PTR _cmd$11[ebp], edi
$LN152@Create:
  00281	68 00 00 00 00	 push	 OFFSET ??_C@_05MFEJDJP@value@
  00286	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0028c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00291	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  00296	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T10[ebp]
  0029c	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  002a0	50		 push	 eax
  002a1	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  002a7	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  002ac	89 85 80 fb ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  002b2	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$11[ebp+28], 76695844 ; 04924924H

; 971  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  002bc	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$11[ebp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 335  : 			cmd.argList.push_back(TArg("value", stLetter));

  002c2	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  002c6	0f 84 41 08 00
	00		 je	 $LN745@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  002cc	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  002d2	89 85 58 fb ff
	ff		 mov	 DWORD PTR __Op$3[ebp], eax

; 77   :         return ::operator new(_Bytes);

  002d8	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  002da	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  002de	c7 85 5c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$3[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  002e8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002ed	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  002f0	8b f0		 mov	 esi, eax

; 1013 :         _Ptr = _Al.allocate(1);

  002f2	89 b5 5c fb ff
	ff		 mov	 DWORD PTR __Op$3[ebp+4], esi

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  002f8	ff b5 80 fb ff
	ff		 push	 DWORD PTR $T6[ebp]

; 1013 :         _Ptr = _Al.allocate(1);

  002fe	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00301	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  00306	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$11[ebp+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 335  : 			cmd.argList.push_back(TArg("value", stLetter));

  0030c	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00312	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00315	89 3e		 mov	 DWORD PTR [esi], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00317	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  0031a	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0031d	c7 85 5c fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$3[ebp+4], 0

; 605  :         _Insert_after->_Next  = _Result;

  00327	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 335  : 			cmd.argList.push_back(TArg("value", stLetter));

  00329	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0032e	8b 8d c8 fb ff
	ff		 mov	 ecx, DWORD PTR $T10[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 335  : 			cmd.argList.push_back(TArg("value", stLetter));

  00334	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00338	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0033b	72 2f		 jb	 SHORT $LN270@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0033d	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR $T10[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00343	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00344	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00346	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0034c	72 14		 jb	 SHORT $LN280@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0034e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00351	83 c1 23	 add	 ecx, 35			; 00000023H
  00354	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00356	83 c0 fc	 add	 eax, -4			; fffffffcH
  00359	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0035c	0f 87 ba 07 00
	00		 ja	 $LN678@Create
$LN280@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00362	51		 push	 ecx
  00363	52		 push	 edx
  00364	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00369	83 c4 08	 add	 esp, 8
$LN270@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 336  : 			m_cmdList.push_back(cmd);

  0036c	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00372	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp]
  00378	50		 push	 eax
  00379	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  0037c	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back

; 337  : 		}

  00381	e9 5e 05 00 00	 jmp	 $LN20@Create
$LN8@Create:

; 338  : 		else if (word_len == 1)

  00386	0f 85 ba 06 00
	00		 jne	 $LN10@Create

; 339  : 		{
; 340  : 			const char cur = *word;

  0038c	8a 06		 mov	 al, BYTE PTR [esi]
  0038e	88 85 7f fb ff
	ff		 mov	 BYTE PTR _cur$1$[ebp], al

; 341  : 
; 342  : 			if ('[' == cur)

  00394	3c 5b		 cmp	 al, 91			; 0000005bH
  00396	0f 85 ea 01 00
	00		 jne	 $LN12@Create

; 343  : 			{
; 344  : 				++str_pos;
; 345  : 
; 346  : 				const char* box_begin = str_base + str_pos;
; 347  : 				const char* box_end = LocaleString_FindChar(box_begin, str_len - str_pos, ']');

  0039c	8b 85 68 fb ff
	ff		 mov	 eax, DWORD PTR _str_len$1$[ebp]
  003a2	47		 inc	 edi
  003a3	89 bd 78 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
  003a9	2b 85 78 fb ff
	ff		 sub	 eax, DWORD PTR _str_pos$1$[ebp]
  003af	03 bd 74 fb ff
	ff		 add	 edi, DWORD PTR __Result$1$[ebp]
  003b5	6a 5d		 push	 93			; 0000005dH
  003b7	50		 push	 eax
  003b8	57		 push	 edi
  003b9	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  003be	83 c4 0c	 add	 esp, 12			; 0000000cH
  003c1	8b f0		 mov	 esi, eax

; 348  : 				if (!box_end)

  003c3	57		 push	 edi
  003c4	85 f6		 test	 esi, esi
  003c6	0f 84 0e 06 00
	00		 je	 $LN746@Create

; 351  : 					return -1;
; 352  : 				}
; 353  : 
; 354  : 				str_pos += box_end - box_begin + 1;

  003cc	8b 8d 78 fb ff
	ff		 mov	 ecx, DWORD PTR _str_pos$1$[ebp]
  003d2	2b c7		 sub	 eax, edi

; 355  : 				int data_len = 0;
; 356  : 				const char* data_begin = LocaleString_Skip(codePage, box_begin);

  003d4	ff b5 70 fb ff
	ff		 push	 DWORD PTR _codePage$1$[ebp]
  003da	41		 inc	 ecx
  003db	03 c8		 add	 ecx, eax
  003dd	89 8d 78 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], ecx
  003e3	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 357  : 				const char* data_end = box_end;
; 358  : 				data_len = data_end - data_begin;

  003e8	2b f0		 sub	 esi, eax
  003ea	83 c4 08	 add	 esp, 8

; 359  : 				if (data_len >= 1024)

  003ed	81 fe 00 04 00
	00		 cmp	 esi, 1024		; 00000400H
  003f3	0f 8d 6b 05 00
	00		 jge	 $LN747@Create

; 362  : 					return -1;
; 363  : 				}
; 364  : 
; 365  : 				memcpy(box_data, data_begin, data_len);

  003f9	56		 push	 esi
  003fa	50		 push	 eax
  003fb	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00401	50		 push	 eax
  00402	e8 00 00 00 00	 call	 _memcpy
  00407	83 c4 0c	 add	 esp, 12			; 0000000cH

; 366  : 				box_data[data_len] = '\0';

  0040a	81 fe 01 04 00
	00		 cmp	 esi, 1025		; 00000401H
  00410	0f 83 01 07 00
	00		 jae	 $LN24@Create

; 367  : 				data_len = LocaleString_RightTrim(box_data, data_len);

  00416	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0041c	c6 84 35 ec fb
	ff ff 00	 mov	 BYTE PTR _box_data$[ebp+esi], 0
  00424	56		 push	 esi
  00425	50		 push	 eax
  00426	e8 00 00 00 00	 call	 ?LocaleString_RightTrim@@YAHPADH@Z ; LocaleString_RightTrim
  0042b	8b f0		 mov	 esi, eax

; 368  : 				const char* space = LocaleString_FindChar(box_data, data_len, ' ');

  0042d	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  00433	6a 20		 push	 32			; 00000020H
  00435	56		 push	 esi
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ?LocaleString_FindChar@@YAPBDPBDHD@Z ; LocaleString_FindChar
  0043c	8b f8		 mov	 edi, eax

; 369  : 				if (space)

  0043e	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR _box_data$[ebp]
  00444	83 c4 14	 add	 esp, 20			; 00000014H
  00447	85 ff		 test	 edi, edi
  00449	0f 84 c8 00 00
	00		 je	 $LN16@Create

; 370  : 				{
; 371  : 					int name_len = space - box_data;

  0044f	2b c1		 sub	 eax, ecx

; 372  : 					cmd.name.assign(box_data, name_len);

  00451	50		 push	 eax
  00452	8b c1		 mov	 eax, ecx
  00454	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$11[ebp]
  0045a	50		 push	 eax
  0045b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 373  : 
; 374  : 					const char* space_next = CharNextExA(codePage, space, 0);

  00460	6a 00		 push	 0
  00462	57		 push	 edi
  00463	ff b5 60 fb ff
	ff		 push	 DWORD PTR tv3155[ebp]
  00469	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CharNextExA@12

; 375  : 					const char* arg = LocaleString_Skip(codePage, space_next);

  0046f	50		 push	 eax
  00470	ff b5 70 fb ff
	ff		 push	 DWORD PTR _codePage$1$[ebp]
  00476	e8 00 00 00 00	 call	 ?LocaleString_Skip@@YAPBDKPBD@Z ; LocaleString_Skip

; 376  : 
; 377  : 					int arg_len = data_len - (arg - box_data);
; 378  : 					if (!GetArg(arg, arg_len, cmd.argList))

  0047b	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00481	8b f8		 mov	 edi, eax
  00483	83 c4 08	 add	 esp, 8
  00486	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0048c	2b f7		 sub	 esi, edi
  0048e	03 f0		 add	 esi, eax
  00490	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  00496	50		 push	 eax
  00497	56		 push	 esi
  00498	57		 push	 edi
  00499	e8 00 00 00 00	 call	 ?GetArg@Group@script@@AAE_NPBDHAAV?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@@Z ; script::Group::GetArg
  0049e	84 c0		 test	 al, al
  004a0	0f 85 c6 00 00
	00		 jne	 $LN297@Create

; 379  : 					{
; 380  : 						TraceError(" !! PARSING ERROR - Unknown Arguments : %d, %s\n", arg_len, arg);

  004a6	57		 push	 edi
  004a7	56		 push	 esi
  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@GPNGJHKH@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Unknown?5Arg@
  004ad	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  004b2	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  004b8	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  004be	50		 push	 eax
  004bf	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  004c4	6a 38		 push	 56			; 00000038H
  004c6	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  004cc	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  004d1	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  004d7	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  004da	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  004dd	0f 82 d4 05 00
	00		 jb	 $LN614@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004e3	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  004e9	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004ea	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  004ec	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004f2	72 14		 jb	 SHORT $LN624@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004f4	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004f7	83 c1 23	 add	 ecx, 35			; 00000023H
  004fa	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004fc	83 c0 fc	 add	 eax, -4			; fffffffcH
  004ff	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00502	0f 87 14 06 00
	00		 ja	 $LN678@Create
$LN624@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00508	51		 push	 ecx
  00509	52		 push	 edx
  0050a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0050f	83 c4 08	 add	 esp, 8
  00512	e9 a0 05 00 00	 jmp	 $LN614@Create
$LN16@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 415  :             return __builtin_strlen(_First);

  00517	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0051a	66 0f 1f 44 00
	00		 npad	 6
$LL764@Create:
  00520	8a 01		 mov	 al, BYTE PTR [ecx]
  00522	41		 inc	 ecx
  00523	84 c0		 test	 al, al
  00525	75 f9		 jne	 SHORT $LL764@Create
  00527	2b ca		 sub	 ecx, edx

; 3549 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00529	8d 85 ec fb ff
	ff		 lea	 eax, DWORD PTR _box_data$[ebp]
  0052f	51		 push	 ecx
  00530	50		 push	 eax
  00531	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$11[ebp]
  00537	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1487 :         _Node::_Free_non_head(_Getal(), _My_data._Myhead);

  0053c	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  00542	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  00548	50		 push	 eax
  00549	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >

; 1488 :         _My_data._Myhead->_Next = _My_data._Myhead;

  0054e	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$11[ebp+24]
  00554	83 c4 08	 add	 esp, 8
  00557	89 00		 mov	 DWORD PTR [eax], eax

; 1489 :         _My_data._Myhead->_Prev = _My_data._Myhead;

  00559	8b 85 e4 fb ff
	ff		 mov	 eax, DWORD PTR _cmd$11[ebp+24]
  0055f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1490 :         _My_data._Mysize        = 0;

  00562	c7 85 e8 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+28], 0
$LN297@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 390  : 				m_cmdList.push_back(cmd);

  0056c	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00572	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp]
  00578	50		 push	 eax
  00579	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  0057c	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back

; 391  : 			}

  00581	e9 5e 03 00 00	 jmp	 $LN20@Create
$LN12@Create:

; 392  : 			else if (cur == '\r' || cur == '\n')

  00586	3c 0d		 cmp	 al, 13			; 0000000dH
  00588	0f 84 36 03 00
	00		 je	 $LN21@Create
  0058e	3c 0a		 cmp	 al, 10			; 0000000aH
  00590	0f 84 2e 03 00
	00		 je	 $LN21@Create

; 396  : 			}
; 397  : 			else
; 398  : 			{
; 399  : 				++str_pos;

  00596	47		 inc	 edi
  00597	89 bd 78 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3554 :         if (_Count <= _Mypair._Myval2._Myres) {

  0059d	8b 3d 14 00 00
	00		 mov	 edi, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20
  005a3	83 ff 01	 cmp	 edi, 1
  005a6	72 31		 jb	 SHORT $LN299@Create

; 2284 :         if (_Large_string_engaged()) {

  005a8	83 ff 10	 cmp	 edi, 16			; 00000010H

; 452  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005ab	0f be c8	 movsx	 ecx, al

; 2283 :         value_type* _Result = _Bx._Buf;

  005ae	ba 00 00 00 00	 mov	 edx, OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 452  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005b3	0f b6 c1	 movzx	 eax, cl

; 2284 :         if (_Large_string_engaged()) {

  005b6	0f 43 15 00 00
	00 00		 cmovae	 edx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A

; 452  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005bd	66 c1 e1 08	 shl	 cx, 8

; 3557 :             _Mypair._Myval2._Mysize = _Count;

  005c1	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1

; 452  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  005cb	66 0b c8	 or	 cx, ax
  005ce	88 0a		 mov	 BYTE PTR [edx], cl

; 3559 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  005d0	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0

; 3560 :             return *this;

  005d4	e9 d7 00 00 00	 jmp	 $LN311@Create
$LN299@Create:

; 4907 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  005d9	8b cf		 mov	 ecx, edi

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  005db	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4907 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  005e0	d1 e9		 shr	 ecx, 1

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  005e2	2b c1		 sub	 eax, ecx
  005e4	3b f8		 cmp	 edi, eax
  005e6	76 17		 jbe	 SHORT $LN317@Create

; 4889 :             return _Max;

  005e8	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  005ed	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  005f2	50		 push	 eax
  005f3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  005f8	83 c4 04	 add	 esp, 4
  005fb	8b d0		 mov	 edx, eax
  005fd	eb 3d		 jmp	 SHORT $LN768@Create
$LN317@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  005ff	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  00602	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00607	3b c6		 cmp	 eax, esi
  00609	0f 47 f0	 cmova	 esi, eax

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0060c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0060f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00614	72 0d		 jb	 SHORT $LN324@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00616	50		 push	 eax
  00617	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0061c	83 c4 04	 add	 esp, 4
  0061f	8b d0		 mov	 edx, eax
  00621	eb 19		 jmp	 SHORT $LN768@Create
$LN324@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  00623	85 c0		 test	 eax, eax
  00625	74 13		 je	 SHORT $LN325@Create

; 77   :         return ::operator new(_Bytes);

  00627	50		 push	 eax
  00628	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0062d	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00630	89 85 80 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00636	8b d0		 mov	 edx, eax
  00638	eb 08		 jmp	 SHORT $LN323@Create
$LN325@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0063a	33 d2		 xor	 edx, edx
$LN768@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  0063c	89 95 80 fb ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
$LN323@Create:

; 452  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00642	0f be 8d 7f fb
	ff ff		 movsx	 ecx, BYTE PTR _cur$1$[ebp]
  00649	0f b6 c1	 movzx	 eax, cl
  0064c	66 c1 e1 08	 shl	 cx, 8
  00650	66 0b c8	 or	 cx, ax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  00653	c7 05 10 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+16, 1

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  0065d	89 35 14 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A+20, esi

; 452  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00663	88 0a		 mov	 BYTE PTR [edx], cl

; 3567 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00665	c6 42 01 00	 mov	 BYTE PTR [edx+1], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00669	83 ff 10	 cmp	 edi, 16			; 00000010H
  0066c	72 3c		 jb	 SHORT $LN310@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0066e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00674	47		 inc	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00675	8b c1		 mov	 eax, ecx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00677	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0067d	72 14		 jb	 SHORT $LN347@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0067f	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00682	83 c7 23	 add	 edi, 35			; 00000023H
  00685	2b c1		 sub	 eax, ecx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00687	83 c0 fc	 add	 eax, -4			; fffffffcH
  0068a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0068d	0f 87 89 04 00
	00		 ja	 $LN678@Create
$LN347@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00693	57		 push	 edi
  00694	51		 push	 ecx
  00695	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4924 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  0069a	8b 85 80 fb ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  006a0	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4924 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  006a3	a3 00 00 00 00	 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, eax

; 4925 :         } else {

  006a8	eb 06		 jmp	 SHORT $LN311@Create
$LN310@Create:

; 4926 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  006aa	89 15 00 00 00
	00		 mov	 DWORD PTR ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A, edx
$LN311@Create:

; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  006b0	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
  006b6	89 8d 80 fb ff
	ff		 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx
  006bc	83 f9 06	 cmp	 ecx, 6
  006bf	72 33		 jb	 SHORT $LN757@Create

; 2284 :         if (_Large_string_engaged()) {

  006c1	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3533 :             _Mypair._Myval2._Mysize = _Count;

  006c4	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+16], 6

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  006ce	6a 06		 push	 6

; 2283 :         value_type* _Result = _Bx._Buf;

  006d0	8d b5 cc fb ff
	ff		 lea	 esi, DWORD PTR _cmd$11[ebp]

; 2284 :         if (_Large_string_engaged()) {

  006d6	0f 43 b5 cc fb
	ff ff		 cmovae	 esi, DWORD PTR _cmd$11[ebp]

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  006dd	68 00 00 00 00	 push	 OFFSET ??_C@_06MJINCFFA@LETTER@
  006e2	56		 push	 esi
  006e3	e8 00 00 00 00	 call	 _memmove
  006e8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  006eb	c6 46 06 00	 mov	 BYTE PTR [esi+6], 0

; 3536 :             return *this;

  006ef	e9 ce 00 00 00	 jmp	 $LN369@Create
$LN757@Create:

; 4907 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  006f4	8b d1		 mov	 edx, ecx

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  006f6	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 4907 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  006fb	d1 ea		 shr	 edx, 1

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  006fd	2b c2		 sub	 eax, edx
  006ff	3b c8		 cmp	 ecx, eax
  00701	76 1d		 jbe	 SHORT $LN375@Create

; 4889 :             return _Max;

  00703	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00708	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0070d	50		 push	 eax
  0070e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00713	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  00719	83 c4 04	 add	 esp, 4
  0071c	8b f8		 mov	 edi, eax
  0071e	eb 43		 jmp	 SHORT $LN381@Create
$LN375@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00720	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  00723	be 0f 00 00 00	 mov	 esi, 15			; 0000000fH
  00728	3b c6		 cmp	 eax, esi
  0072a	0f 47 f0	 cmova	 esi, eax

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0072d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00730	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00735	72 13		 jb	 SHORT $LN382@Create

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00737	50		 push	 eax
  00738	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0073d	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]
  00743	83 c4 04	 add	 esp, 4
  00746	8b f8		 mov	 edi, eax
  00748	eb 19		 jmp	 SHORT $LN381@Create
$LN382@Create:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0074a	85 c0		 test	 eax, eax
  0074c	74 13		 je	 SHORT $LN383@Create

; 77   :         return ::operator new(_Bytes);

  0074e	50		 push	 eax
  0074f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  00754	8b 8d 80 fb ff
	ff		 mov	 ecx, DWORD PTR __Old_capacity$1$[ebp]

; 77   :         return ::operator new(_Bytes);

  0075a	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0075d	8b f8		 mov	 edi, eax
  0075f	eb 02		 jmp	 SHORT $LN381@Create
$LN383@Create:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00761	33 ff		 xor	 edi, edi
$LN381@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00763	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_06MJINCFFA@LETTER@

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  00768	c7 85 dc fb ff
	ff 06 00 00 00	 mov	 DWORD PTR _cmd$11[ebp+16], 6

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  00772	89 b5 e0 fb ff
	ff		 mov	 DWORD PTR _cmd$11[ebp+20], esi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00778	89 07		 mov	 DWORD PTR [edi], eax
  0077a	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_06MJINCFFA@LETTER@+4
  00780	66 89 47 04	 mov	 WORD PTR [edi+4], ax

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00784	c6 47 06 00	 mov	 BYTE PTR [edi+6], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  00788	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0078b	72 2f		 jb	 SHORT $LN368@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0078d	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00793	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00794	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00796	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0079c	72 14		 jb	 SHORT $LN405@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0079e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  007a1	83 c1 23	 add	 ecx, 35			; 00000023H
  007a4	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  007a6	83 c0 fc	 add	 eax, -4			; fffffffcH
  007a9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  007ac	0f 87 6a 03 00
	00		 ja	 $LN678@Create
$LN405@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  007b2	51		 push	 ecx
  007b3	52		 push	 edx
  007b4	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  007b9	83 c4 08	 add	 esp, 8
$LN368@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 403  : 				cmd.argList.push_back(TArg("value", stLetter));

  007bc	89 bd cc fb ff
	ff		 mov	 DWORD PTR _cmd$11[ebp], edi
$LN369@Create:
  007c2	68 00 00 00 00	 push	 OFFSET ??_C@_05MFEJDJP@value@
  007c7	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  007cd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  007d2	68 00 00 00 00	 push	 OFFSET ?stLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4V45@A
  007d7	8d 85 b4 fb ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  007dd	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
  007e1	50		 push	 eax
  007e2	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  007e8	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ; script::SArgumet::SArgumet
  007ed	89 85 80 fb ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  007f3	81 bd e8 fb ff
	ff 24 49 92 04	 cmp	 DWORD PTR _cmd$11[ebp+28], 76695844 ; 04924924H

; 971  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  007fd	8b bd e4 fb ff
	ff		 mov	 edi, DWORD PTR _cmd$11[ebp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 403  : 				cmd.argList.push_back(TArg("value", stLetter));

  00803	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1012 :         if (_Mysize == max_size()) {

  00807	0f 84 00 03 00
	00		 je	 $LN745@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  0080d	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  00813	89 85 50 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp], eax

; 77   :         return ::operator new(_Bytes);

  00819	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0081b	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0081f	c7 85 54 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00829	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0082e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00831	8b f0		 mov	 esi, eax

; 1013 :         _Ptr = _Al.allocate(1);

  00833	89 b5 54 fb ff
	ff		 mov	 DWORD PTR __Op$2[ebp+4], esi

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00839	ff b5 80 fb ff
	ff		 push	 DWORD PTR $T5[ebp]

; 1013 :         _Ptr = _Al.allocate(1);

  0083f	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00842	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  00847	ff 85 e8 fb ff
	ff		 inc	 DWORD PTR _cmd$11[ebp+28]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 403  : 				cmd.argList.push_back(TArg("value", stLetter));

  0084d	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00853	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00856	89 3e		 mov	 DWORD PTR [esi], edi

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00858	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  0085b	89 77 04	 mov	 DWORD PTR [edi+4], esi
  0085e	c7 85 54 fb ff
	ff 00 00 00 00	 mov	 DWORD PTR __Op$2[ebp+4], 0

; 605  :         _Insert_after->_Next  = _Result;

  00868	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 403  : 				cmd.argList.push_back(TArg("value", stLetter));

  0086a	e8 00 00 00 00	 call	 ??1SArgumet@script@@QAE@XZ
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  0086f	8b 8d c8 fb ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp+20]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 403  : 				cmd.argList.push_back(TArg("value", stLetter));

  00875	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5011 :         if (_My_data._Large_string_engaged()) {

  00879	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0087c	72 2f		 jb	 SHORT $LN487@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0087e	8b 95 b4 fb ff
	ff		 mov	 edx, DWORD PTR $T9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00884	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00885	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00887	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0088d	72 14		 jb	 SHORT $LN497@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0088f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00892	83 c1 23	 add	 ecx, 35			; 00000023H
  00895	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00897	83 c0 fc	 add	 eax, -4			; fffffffcH
  0089a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0089d	0f 87 79 02 00
	00		 ja	 $LN678@Create
$LN497@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  008a3	51		 push	 ecx
  008a4	52		 push	 edx
  008a5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  008aa	83 c4 08	 add	 esp, 8
$LN487@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 404  : 				m_cmdList.push_back(cmd);

  008ad	8b 8d 6c fb ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  008b3	8d 85 cc fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp]
  008b9	50		 push	 eax
  008ba	8d 49 18	 lea	 ecx, DWORD PTR [ecx+24]
  008bd	e8 00 00 00 00	 call	 ?push_back@?$list@USCmd@script@@V?$allocator@USCmd@script@@@std@@@std@@QAEXABUSCmd@script@@@Z ; std::list<script::SCmd,std::allocator<script::SCmd> >::push_back
  008c2	eb 20		 jmp	 SHORT $LN20@Create
$LN21@Create:

; 393  : 			{
; 394  : 				if (cur == '\n') { len_line += 1; }
; 395  : 				++str_pos;

  008c4	8b 95 64 fb ff
	ff		 mov	 edx, DWORD PTR _len_line$1$[ebp]
  008ca	47		 inc	 edi
  008cb	80 bd 7f fb ff
	ff 0a		 cmp	 BYTE PTR _cur$1$[ebp], 10 ; 0000000aH
  008d2	89 bd 78 fb ff
	ff		 mov	 DWORD PTR _str_pos$1$[ebp], edi
  008d8	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  008db	0f 45 c2	 cmovne	 eax, edx
  008de	89 85 64 fb ff
	ff		 mov	 DWORD PTR _len_line$1$[ebp], eax
$LN20@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  008e4	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  008ea	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 411  : 	}

  008f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  008f7	50		 push	 eax
  008f8	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  008fd	6a 38		 push	 56			; 00000038H
  008ff	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  00905	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0090a	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00910	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00913	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00916	72 2f		 jb	 SHORT $LN114@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00918	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0091e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0091f	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00921	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00927	72 14		 jb	 SHORT $LN124@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00929	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0092c	83 c1 23	 add	 ecx, 35			; 00000023H
  0092f	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00931	83 c0 fc	 add	 eax, -4			; fffffffcH
  00934	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00937	0f 87 df 01 00
	00		 ja	 $LN678@Create
$LN124@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0093d	51		 push	 ecx
  0093e	52		 push	 edx
  0093f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00944	83 c4 08	 add	 esp, 8
$LN114@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 321  : 	while (str_pos < str_len)

  00947	8b bd 78 fb ff
	ff		 mov	 edi, DWORD PTR _str_pos$1$[ebp]
  0094d	3b bd 68 fb ff
	ff		 cmp	 edi, DWORD PTR _str_len$1$[ebp]
  00953	0f 8d 49 01 00
	00		 jge	 $LN671@Create
  00959	8b b5 74 fb ff
	ff		 mov	 esi, DWORD PTR __Result$1$[ebp]
  0095f	e9 7f f7 ff ff	 jmp	 $LL3@Create
$LN747@Create:

; 360  : 				{
; 361  : 					TraceError(" !! PARSING ERROR - Buffer Overflow : %d, %s\n", data_len, str_base);

  00964	ff b5 74 fb ff
	ff		 push	 DWORD PTR __Result$1$[ebp]
  0096a	56		 push	 esi
  0096b	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FGKIOAND@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Buffer?5Over@
  00970	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00975	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  0097b	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  00981	50		 push	 eax
  00982	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00987	6a 38		 push	 56			; 00000038H
  00989	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  0098f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00994	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0099a	83 c4 1c	 add	 esp, 28			; 0000001cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0099d	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  009a0	0f 82 11 01 00
	00		 jb	 $LN614@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009a6	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  009ac	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  009ad	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  009af	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  009b5	72 14		 jb	 SHORT $LN738@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  009b7	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  009ba	83 c1 23	 add	 ecx, 35			; 00000023H
  009bd	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  009bf	83 c0 fc	 add	 eax, -4			; fffffffcH
  009c2	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  009c5	0f 87 51 01 00
	00		 ja	 $LN678@Create
$LN738@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  009cb	51		 push	 ecx
  009cc	52		 push	 edx
  009cd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  009d2	83 c4 08	 add	 esp, 8
  009d5	e9 dd 00 00 00	 jmp	 $LN614@Create
$LN746@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 350  : 					TraceError(" !! PARSING ERROR - Syntax Error : %s\n", box_begin);

  009da	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@IJJEPPJM@?5?$CB?$CB?5PARSING?5ERROR?5?9?5Syntax?5Erro@
  009df	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  009e4	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  009ea	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  009f0	50		 push	 eax
  009f1	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  009f6	6a 38		 push	 56			; 00000038H
  009f8	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  009fe	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a03	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a09	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a0c	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00a0f	0f 82 a2 00 00
	00		 jb	 $LN614@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a15	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00a1b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a1c	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a1e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a24	72 14		 jb	 SHORT $LN567@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a26	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a29	83 c1 23	 add	 ecx, 35			; 00000023H
  00a2c	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a2e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a31	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a34	0f 87 e2 00 00
	00		 ja	 $LN678@Create
$LN567@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a3a	51		 push	 ecx
  00a3b	52		 push	 edx
  00a3c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a41	83 c4 08	 add	 esp, 8
  00a44	eb 71		 jmp	 SHORT $LN614@Create
$LN10@Create:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00a46	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  00a4c	8d 85 e4 fb ff
	ff		 lea	 eax, DWORD PTR _cmd$11[ebp+24]
  00a52	50		 push	 eax
  00a53	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a58	6a 38		 push	 56			; 00000038H
  00a5a	ff b5 e4 fb ff
	ff		 push	 DWORD PTR _cmd$11[ebp+24]
  00a60	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a65	8b 8d e0 fb ff
	ff		 mov	 ecx, DWORD PTR _cmd$11[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a6b	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00a6e	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00a71	72 2f		 jb	 SHORT $LN671@Create
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a73	8b 95 cc fb ff
	ff		 mov	 edx, DWORD PTR _cmd$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00a79	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00a7a	8b c2		 mov	 eax, edx

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00a7c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00a82	72 14		 jb	 SHORT $LN681@Create

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00a84	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00a87	83 c1 23	 add	 ecx, 35			; 00000023H
  00a8a	2b c2		 sub	 eax, edx

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00a8c	83 c0 fc	 add	 eax, -4			; fffffffcH
  00a8f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00a92	0f 87 84 00 00
	00		 ja	 $LN678@Create
$LN681@Create:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00a98	51		 push	 ecx
  00a99	52		 push	 edx
  00a9a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00a9f	83 c4 08	 add	 esp, 8
$LN671@Create:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 413  : 	return len_line;

  00aa2	8b 85 64 fb ff
	ff		 mov	 eax, DWORD PTR _len_line$1$[ebp]
  00aa8	eb 10		 jmp	 SHORT $LN1@Create
$LN7@Create:

; 306  : 	{
; 307  : 		TraceError("Source file has no content");

  00aaa	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LOKOGIPA@Source?5file?5has?5no?5content@
  00aaf	e8 00 00 00 00	 call	 ?TraceError@@YAXPBDZZ	; TraceError
  00ab4	83 c4 04	 add	 esp, 4
$LN614@Create:

; 414  : }

  00ab7	83 c8 ff	 or	 eax, -1
$LN1@Create:
  00aba	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00abd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00ac4	59		 pop	 ecx
  00ac5	5f		 pop	 edi
  00ac6	5e		 pop	 esi
  00ac7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00aca	33 cd		 xor	 ecx, ebp
  00acc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00ad1	8b e5		 mov	 esp, ebp
  00ad3	5d		 pop	 ebp
  00ad4	c2 04 00	 ret	 4
$LN770@Create:

; 316  : 
; 317  : 	char box_data[1024 + 1];
; 318  : 
; 319  : 	static std::string stLetter;

  00ad7	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00adc	e8 00 00 00 00	 call	 __Init_thread_header
  00ae1	83 c4 04	 add	 esp, 4
  00ae4	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA, -1
  00aeb	0f 85 d7 f5 ff
	ff		 jne	 $LN765@Create
  00af1	68 00 00 00 00	 push	 OFFSET ??__FstLetter@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@YAXXZ ; `script::Group::Create'::`2'::`dynamic atexit destructor for 'stLetter''
  00af6	e8 00 00 00 00	 call	 _atexit
  00afb	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@4HA
  00b00	e8 00 00 00 00	 call	 __Init_thread_footer
  00b05	83 c4 08	 add	 esp, 8
  00b08	e9 bb f5 ff ff	 jmp	 $LN765@Create
$LN745@Create:

; 414  : }

  00b0d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00b12	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN24@Create:

; 366  : 				box_data[data_len] = '\0';

  00b17	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN678@Create:

; 414  : }

  00b1c	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN767@Create:
  00b21	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5:
  00000	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$11[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
  0000b	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR _cmd$11[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SCmd@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
  00016	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
  00021	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$13:
  0002c	8d 8d 58 fb ff
	ff		 lea	 ecx, DWORD PTR __Op$3[ebp]
  00032	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
  00037	8d 8d b4 fb ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0003d	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
  00042	8d 8d 84 fb ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00048	e9 00 00 00 00	 jmp	 ??1SArgumet@script@@QAE@XZ
__unwindfunclet$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$17:
  0004d	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR __Op$2[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
  0005b	cc		 int	 3
  0005c	cc		 int	 3
__ehhandler$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  0005d	90		 npad	 1
  0005e	90		 npad	 1
  0005f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00063	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00066	8b 8a 50 fb ff
	ff		 mov	 ecx, DWORD PTR [edx-1200]
  0006c	33 c8		 xor	 ecx, eax
  0006e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00073	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00076	33 c8		 xor	 ecx, eax
  00078	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00082	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Create@Group@script@@QAEHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; script::Group::Create
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ??1Group@script@@QAE@XZ
_TEXT	SEGMENT
??1Group@script@@QAE@XZ PROC				; script::Group::~Group, COMDAT
; _this$ = ecx

; 454  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00004	ff 77 18	 push	 DWORD PTR [edi+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 455  : }

  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@std@@@?$_List_node@USCmd@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USCmd@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SCmd,void *>::_Free_non_head<std::allocator<std::_List_node<script::SCmd,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00010	6a 28		 push	 40			; 00000028H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0001f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00022	72 27		 jb	 SHORT $LN42@Group
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00024	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00026	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN52@Group

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 20		 ja	 SHORT $LN49@Group

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN52@Group:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN42@Group:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00052	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00059	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 455  : }

  0005e	c3		 ret	 0
$LN49@Group:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@Group:
  00064	cc		 int	 3
??1Group@script@@QAE@XZ ENDP				; script::Group::~Group
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp
;	COMDAT ??0Group@script@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Group@script@@QAE@XZ PROC				; script::Group::Group, COMDAT
; _this$ = ecx

; 450  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Group@script@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  00029	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002c	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  0002f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00036	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4998 :         _My_data._Mysize = 0;

  0003d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00044	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004b	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0004e	6a 28		 push	 40			; 00000028H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 450  : {

  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 354  :     _List_val() noexcept : _Myhead(), _Mysize(0) {} // initialize data

  00057	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  0005e	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1834 :         _Construct_in_place(_Newhead->_Next, _Newhead);

  0006d	89 00		 mov	 DWORD PTR [eax], eax

; 1835 :         _Construct_in_place(_Newhead->_Prev, _Newhead);

  0006f	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 1836 :         _Mypair._Myval2._Myhead = _Newhead;

  00072	89 46 18	 mov	 DWORD PTR [esi+24], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.cpp

; 451  : }

  00075	8b c6		 mov	 eax, esi
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5e		 pop	 esi
  00083	8b e5		 mov	 esp, ebp
  00085	5d		 pop	 ebp
  00086	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Group@script@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0Group@script@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Group@script@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Group@script@@QAE@XZ ENDP				; script::Group::Group
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1SCmd@script@@QAE@XZ
_TEXT	SEGMENT
??1SCmd@script@@QAE@XZ PROC				; script::SCmd::~SCmd, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx
  00004	ff 77 18	 push	 DWORD PTR [edi+24]
  00007	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00010	6a 38		 push	 56			; 00000038H
  00012	ff 36		 push	 DWORD PTR [esi]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00019	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001c	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  0001f	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00022	72 27		 jb	 SHORT $LN42@SCmd
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00024	8b 07		 mov	 eax, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  00026	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00027	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002d	72 12		 jb	 SHORT $LN52@SCmd

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002f	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00032	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00035	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00037	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003d	77 20		 ja	 SHORT $LN49@SCmd

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003f	8b c2		 mov	 eax, edx
$LN52@SCmd:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00041	51		 push	 ecx
  00042	50		 push	 eax
  00043	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00048	83 c4 08	 add	 esp, 8
$LN42@SCmd:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  0004b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00052	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00059	c6 07 00	 mov	 BYTE PTR [edi], 0
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	c3		 ret	 0
$LN49@SCmd:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005f	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN57@SCmd:
  00064	cc		 int	 3
??1SCmd@script@@QAE@XZ ENDP				; script::SCmd::~SCmd
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >, COMDAT
; _this$ = ecx

; 1042 :     ~list() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1498 :         _Node::_Free_non_head(_Al, _My_data._Myhead);

  00003	ff 36		 push	 DWORD PTR [esi]
  00005	56		 push	 esi
  00006	e8 00 00 00 00	 call	 ??$_Free_non_head@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@?$_List_node@USArgumet@script@@PAX@std@@SAXAAV?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@1@PAU01@@Z ; std::_List_node<script::SArgumet,void *>::_Free_non_head<std::allocator<std::_List_node<script::SArgumet,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000b	6a 38		 push	 56			; 00000038H
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 10	 add	 esp, 16			; 00000010H
  00017	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1048 :     }

  00018	c3		 ret	 0
??1?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAE@XZ ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::~list<script::SArgumet,std::allocator<script::SArgumet> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list
;	COMDAT ?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
_TEXT	SEGMENT
__Op$2 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Val$ = 8						; size = 4
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z PROC ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back, COMDAT
; _this$ = ecx

; 970  :     void push_back(_Ty&& _Val) { // insert element at end

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 1012 :         if (_Mysize == max_size()) {

  0002a	81 7f 04 24 49
	92 04		 cmp	 DWORD PTR [edi+4], 76695844 ; 04924924H

; 971  :         _Emplace(_Mypair._Myval2._Myhead, _STD move(_Val));

  00031	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1012 :         if (_Mysize == max_size()) {

  00033	74 4f		 je	 SHORT $LN69@push_back
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00035	89 7d ec	 mov	 DWORD PTR __Op$2[ebp], edi

; 77   :         return ::operator new(_Bytes);

  00038	6a 38		 push	 56			; 00000038H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 584  :     explicit _List_node_emplace_op2(_Alnode& _Al_, _Valtys&&... _Vals) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  0003a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  00041	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR __Op$2[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00048	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004d	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00050	8b f0		 mov	 esi, eax

; 1013 :         _Ptr = _Al.allocate(1);

  00052	89 75 f0	 mov	 DWORD PTR __Op$2[ebp+4], esi

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00055	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00058	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0005b	e8 00 00 00 00	 call	 ??0SArgumet@script@@QAE@ABU01@@Z ; script::SArgumet::SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\list

; 1017 :         ++_Mysize;

  00060	ff 47 04	 inc	 DWORD PTR [edi+4]

; 599  :         const pointer _Insert_after = _Insert_before->_Prev;

  00063	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 600  :         _Construct_in_place(this->_Ptr->_Next, _Insert_before);

  00066	89 1e		 mov	 DWORD PTR [esi], ebx

; 601  :         _Construct_in_place(this->_Ptr->_Prev, _Insert_after);

  00068	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 602  :         const auto _Result    = this->_Ptr;
; 603  :         this->_Ptr            = pointer{};
; 604  :         _Insert_before->_Prev = _Result;

  0006b	89 73 04	 mov	 DWORD PTR [ebx+4], esi

; 605  :         _Insert_after->_Next  = _Result;

  0006e	89 31		 mov	 DWORD PTR [ecx], esi

; 972  :     }

  00070	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007a	59		 pop	 ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c2 04 00	 ret	 4
$LN69@push_back:

; 1013 :             _Xlength_error("list too long");

  00084	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NKNMEGII@list?5too?5long@
  00089	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN67@push_back:
  0008e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z$1:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR __Op$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_List_node@USArgumet@script@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_List_node<script::SArgumet,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?push_back@?$list@USArgumet@script@@V?$allocator@USArgumet@script@@@std@@@std@@QAEX$$QAUSArgumet@script@@@Z ENDP ; std::list<script::SArgumet,std::allocator<script::SArgumet> >::push_back
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1SArgumet@script@@QAE@XZ
_TEXT	SEGMENT
??1SArgumet@script@@QAE@XZ PROC				; script::SArgumet::~SArgumet, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2301 :         return _BUF_SIZE <= _Myres;

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 28		 jb	 SHORT $LN15@SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000e	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00015	72 12		 jb	 SHORT $LN25@SArgumet

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00017	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00022	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00025	77 60		 ja	 SHORT $LN50@SArgumet

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00027	8b c2		 mov	 eax, edx
$LN25@SArgumet:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00029	51		 push	 ecx
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00030	83 c4 08	 add	 esp, 8
$LN15@SArgumet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00033	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0003a	c7 46 2c 0f 00
	00 00		 mov	 DWORD PTR [esi+44], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00041	c6 46 18 00	 mov	 BYTE PTR [esi+24], 0

; 2301 :         return _BUF_SIZE <= _Myres;

  00045	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00048	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  0004b	72 27		 jb	 SHORT $LN43@SArgumet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0004f	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00050	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00056	72 12		 jb	 SHORT $LN53@SArgumet

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00058	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0005e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	83 c0 fc	 add	 eax, -4			; fffffffcH
  00063	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00066	77 1f		 ja	 SHORT $LN50@SArgumet

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00068	8b c2		 mov	 eax, edx
$LN53@SArgumet:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	51		 push	 ecx
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
$LN43@SArgumet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00074	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  0007b	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00082	c6 06 00	 mov	 BYTE PTR [esi], 0
  00085	5e		 pop	 esi
  00086	c3		 ret	 0
$LN50@SArgumet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00087	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN58@SArgumet:
  0008c	cc		 int	 3
??1SArgumet@script@@QAE@XZ ENDP				; script::SArgumet::~SArgumet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_arg$ = 8						; size = 4
??0SArgumet@script@@QAE@ABU01@@Z PROC			; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 16   : 	SArgumet(const SArgumet& c_arg)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABU01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00037	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4998 :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 16   : 	SArgumet(const SArgumet& c_arg)

  0004f	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00059	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0

; 4998 :         _My_data._Mysize = 0;

  0005c	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00063	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006a	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 3306 :         if (this == _STD addressof(_Right)) {

  0006d	8b 7d 08	 mov	 edi, DWORD PTR _c_arg$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 16   : 	SArgumet(const SArgumet& c_arg)

  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00074	3b f7		 cmp	 esi, edi
  00076	74 18		 je	 SHORT $LN31@SArgumet

; 2301 :         return _BUF_SIZE <= _Myres;

  00078	83 7f 14 10	 cmp	 DWORD PTR [edi+20], 16	; 00000010H

; 2292 :         const value_type* _Result = _Bx._Buf;

  0007c	8b c7		 mov	 eax, edi

; 2293 :         if (_Large_string_engaged()) {

  0007e	72 02		 jb	 SHORT $LN35@SArgumet

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00080	8b 07		 mov	 eax, DWORD PTR [edi]
$LN35@SArgumet:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00082	ff 77 10	 push	 DWORD PTR [edi+16]
  00085	8b ce		 mov	 ecx, esi
  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0008d	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
$LN31@SArgumet:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 19   : 		strValue = c_arg.strValue;

  00090	8d 47 18	 lea	 eax, DWORD PTR [edi+24]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00093	3b c8		 cmp	 ecx, eax
  00095	74 12		 je	 SHORT $LN47@SArgumet

; 2301 :         return _BUF_SIZE <= _Myres;

  00097	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0009b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0009e	72 02		 jb	 SHORT $LN43@SArgumet

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  000a0	8b 00		 mov	 eax, DWORD PTR [eax]
$LN43@SArgumet:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  000a2	52		 push	 edx
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN47@SArgumet:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 20   : 	}

  000a9	8b c6		 mov	 eax, esi
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABU01@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABU01@@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABU01@@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABU01@@Z ENDP			; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h
;	COMDAT ??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_c_stName$ = 8						; size = 4
_c_stValue$ = 12					; size = 4
??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z PROC ; script::SArgumet::SArgumet, COMDAT
; _this$ = ecx

; 11   : 	SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f1		 mov	 esi, ecx
  00027	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002a	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0002d	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00030	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  00037	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 4998 :         _My_data._Mysize = 0;

  0003e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00045	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	c6 06 00	 mov	 BYTE PTR [esi], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 11   : 	SArgumet(const std::string& c_stName, const std::string& c_stValue)

  0004f	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00059	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 4998 :         _My_data._Mysize = 0;

  0005c	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 4999 :         _My_data._Myres  = _BUF_SIZE - 1;

  00063	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH

; 5000 :         _My_data._Activate_SSO_buffer();
; 5001 : 
; 5002 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5003 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0006a	c6 07 00	 mov	 BYTE PTR [edi], 0

; 3306 :         if (this == _STD addressof(_Right)) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR _c_stName$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 11   : 	SArgumet(const std::string& c_stName, const std::string& c_stValue)

  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3306 :         if (this == _STD addressof(_Right)) {

  00074	3b f0		 cmp	 esi, eax
  00076	74 14		 je	 SHORT $LN31@SArgumet

; 2301 :         return _BUF_SIZE <= _Myres;

  00078	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0007c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0007f	72 02		 jb	 SHORT $LN35@SArgumet

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  00081	8b 00		 mov	 eax, DWORD PTR [eax]
$LN35@SArgumet:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00083	51		 push	 ecx
  00084	50		 push	 eax
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN31@SArgumet:

; 3306 :         if (this == _STD addressof(_Right)) {

  0008c	8b 45 0c	 mov	 eax, DWORD PTR _c_stValue$[ebp]
  0008f	3b f8		 cmp	 edi, eax
  00091	74 14		 je	 SHORT $LN47@SArgumet

; 2301 :         return _BUF_SIZE <= _Myres;

  00093	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00097	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 2293 :         if (_Large_string_engaged()) {

  0009a	72 02		 jb	 SHORT $LN43@SArgumet

; 2294 :             _Result = _Unfancy(_Bx._Ptr);

  0009c	8b 00		 mov	 eax, DWORD PTR [eax]
$LN43@SArgumet:

; 3346 :         assign(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0009e	51		 push	 ecx
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN47@SArgumet:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\parser.h

; 15   : 	}

  000a7	8b c6		 mov	 eax, esi
  000a9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ac	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b3	59		 pop	 ecx
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	8b e5		 mov	 esp, ebp
  000b8	5d		 pop	 ebp
  000b9	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 18	 add	 ecx, 24			; 00000018H
  0000e	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SArgumet@script@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0@Z ENDP ; script::SArgumet::SArgumet
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
$T2 = 12						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3528 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 3529 :         // assign [_Ptr, _Ptr + _Count)
; 3530 :         if (_Count <= _Mypair._Myval2._Myres) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi
  0000c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0000f	89 4d fc	 mov	 DWORD PTR $T1[ebp], ecx
  00012	3b d9		 cmp	 ebx, ecx
  00014	77 28		 ja	 SHORT $LN2@assign

; 2283 :         value_type* _Result = _Bx._Buf;

  00016	8b fe		 mov	 edi, esi

; 2301 :         return _BUF_SIZE <= _Myres;

  00018	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 2284 :         if (_Large_string_engaged()) {

  0001b	72 02		 jb	 SHORT $LN5@assign

; 2285 :             _Result = _Unfancy(_Bx._Ptr);

  0001d	8b 3e		 mov	 edi, DWORD PTR [esi]
$LN5@assign:

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0001f	53		 push	 ebx
  00020	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 3531 :             _ASAN_STRING_MODIFY(static_cast<difference_type>(_Count - _Mypair._Myval2._Mysize));
; 3532 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 3533 :             _Mypair._Myval2._Mysize = _Count;

  00023	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3534 :             _Traits::move(_Old_ptr, _Ptr, _Count);
; 3535 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0002f	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  00033	8b c6		 mov	 eax, esi
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN2@assign:

; 4903 :         if (_New_size > max_size()) {

  0003e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00044	0f 87 d4 00 00
	00		 ja	 $LN60@assign

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  0004a	8b fb		 mov	 edi, ebx
  0004c	83 cf 0f	 or	 edi, 15			; 0000000fH
  0004f	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00055	76 15		 jbe	 SHORT $LN19@assign

; 4885 :             return _Max;

  00057	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  0005c	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00067	83 c4 04	 add	 esp, 4
  0006a	eb 52		 jmp	 SHORT $LN58@assign
$LN19@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4888 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0006c	8b d1		 mov	 edx, ecx
  0006e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00073	d1 ea		 shr	 edx, 1
  00075	2b c2		 sub	 eax, edx
  00077	3b c8		 cmp	 ecx, eax
  00079	76 15		 jbe	 SHORT $LN20@assign

; 4889 :             return _Max;

  0007b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00080	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008b	83 c4 04	 add	 esp, 4
  0008e	eb 2e		 jmp	 SHORT $LN58@assign
$LN20@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4892 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00090	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00093	3b f8		 cmp	 edi, eax
  00095	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4910 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  00098	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0009b	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000a0	72 0b		 jb	 SHORT $LN27@assign

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a2	50		 push	 eax
  000a3	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000a8	83 c4 04	 add	 esp, 4
  000ab	eb 11		 jmp	 SHORT $LN58@assign
$LN27@assign:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000ad	85 c0		 test	 eax, eax
  000af	74 0b		 je	 SHORT $LN28@assign

; 77   :         return ::operator new(_Bytes);

  000b1	50		 push	 eax
  000b2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000ba	eb 02		 jmp	 SHORT $LN58@assign
$LN28@assign:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000bc	33 c0		 xor	 eax, eax
$LN58@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000be	53		 push	 ebx
  000bf	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c2	89 45 0c	 mov	 DWORD PTR $T2[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	50		 push	 eax

; 4919 :         _Mypair._Myval2._Mysize = _New_size;

  000c6	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 4920 :         _Mypair._Myval2._Myres  = _New_capacity;

  000c9	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cc	e8 00 00 00 00	 call	 _memcpy

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000d1	8b 7d 0c	 mov	 edi, DWORD PTR $T2[ebp]

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000d7	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 3543 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  000da	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0

; 4922 :         if (_BUF_SIZE <= _Old_capacity) {

  000de	83 f8 10	 cmp	 eax, 16			; 00000010H
  000e1	72 29		 jb	 SHORT $LN13@assign

; 4923 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  000e3	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000e6	8b 06		 mov	 eax, DWORD PTR [esi]

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000e8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ee	72 12		 jb	 SHORT $LN50@assign

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000f3	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f6	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000fb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000fe	77 19		 ja	 SHORT $LN47@assign

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00100	8b c2		 mov	 eax, edx
$LN50@assign:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00102	51		 push	 ecx
  00103	50		 push	 eax
  00104	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00109	83 c4 08	 add	 esp, 8
$LN13@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 3539 :         return _Reallocate_for(

  0010c	89 3e		 mov	 DWORD PTR [esi], edi

; 3544 :             },
; 3545 :             _Ptr);
; 3546 :     }

  0010e	8b c6		 mov	 eax, esi
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 08 00	 ret	 8
$LN47@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00119	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN60@assign:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 4904 :             _Xlen_string(); // result too long

  0011e	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@assign:
  00123	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 ~basic_string() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2301 :         return _BUF_SIZE <= _Myres;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 5011 :         if (_My_data._Large_string_engaged()) {

  00009	72 27		 jb	 SHORT $LN12@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5016 :             _Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN22@basic_stri

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN19@basic_stri

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN22@basic_stri:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN12@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 5019 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 5020 :         _My_data._Myres  = _BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 5021 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 5022 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3278 :     }

  00044	c3		 ret	 0
$LN19@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN27@basic_stri:
  0004a	cc		 int	 3
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2674 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b d9		 mov	 ebx, ecx
  00008	0f 57 c0	 xorps	 xmm0, xmm0
  0000b	57		 push	 edi

; 415  :             return __builtin_strlen(_First);

  0000c	8b 7d 08	 mov	 edi, DWORD PTR __Ptr$[ebp]
  0000f	8b f7		 mov	 esi, edi

; 2341 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 2349 :     size_type _Mysize = 0; // current length of string

  00014	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 2350 :     size_type _Myres  = 0; // current storage reserved for string

  0001b	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 415  :             return __builtin_strlen(_First);

  00022	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL39@basic_stri:
  00025	8a 06		 mov	 al, BYTE PTR [esi]
  00027	46		 inc	 esi
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL39@basic_stri
  0002c	2b f1		 sub	 esi, ecx

; 2740 :         if (_Count > max_size()) {

  0002e	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  00034	0f 87 a5 00 00
	00		 ja	 $LN44@basic_stri

; 2742 :         }
; 2743 : 
; 2744 :         auto& _Al       = _Getal();
; 2745 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 2746 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 2747 : 
; 2748 :         if (_Count < _BUF_SIZE) {

  0003a	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
  00041	83 fe 10	 cmp	 esi, 16			; 00000010H
  00044	73 1d		 jae	 SHORT $LN15@basic_stri

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00046	56		 push	 esi
  00047	57		 push	 edi
  00048	53		 push	 ebx

; 2749 :             _My_data._Mysize = _Count;

  00049	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004c	e8 00 00 00 00	 call	 _memmove

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00051	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00054	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  00058	8b c3		 mov	 eax, ebx
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5b		 pop	 ebx
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c2 04 00	 ret	 4
$LN15@basic_stri:

; 4883 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00063	8b fe		 mov	 edi, esi
  00065	83 cf 0f	 or	 edi, 15			; 0000000fH
  00068	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 4884 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006e	76 15		 jbe	 SHORT $LN22@basic_stri

; 4885 :             return _Max;

  00070	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00075	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00080	83 c4 04	 add	 esp, 4
  00083	eb 30		 jmp	 SHORT $LN42@basic_stri
$LN22@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 43   :     return _Left < _Right ? _Right : _Left;

  00085	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0008a	3b f8		 cmp	 edi, eax
  0008c	0f 42 f8	 cmovb	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 2772 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  0008f	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00092	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00097	72 0b		 jb	 SHORT $LN30@basic_stri

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0009f	83 c4 04	 add	 esp, 4
  000a2	eb 11		 jmp	 SHORT $LN42@basic_stri
$LN30@basic_stri:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN31@basic_stri

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	eb 02		 jmp	 SHORT $LN42@basic_stri
$LN31@basic_stri:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b3	33 c0		 xor	 eax, eax
$LN42@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b5	56		 push	 esi
  000b6	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000b9	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bc	50		 push	 eax

; 2773 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000bd	89 03		 mov	 DWORD PTR [ebx], eax

; 2774 : 
; 2775 : #if _HAS_CXX20
; 2776 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 2777 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 2778 :         }
; 2779 : #endif // _HAS_CXX20
; 2780 : 
; 2781 :         _My_data._Mysize = _Count;

  000bf	89 73 10	 mov	 DWORD PTR [ebx+16], esi

; 2782 :         _My_data._Myres  = _New_capacity;

  000c2	89 7b 14	 mov	 DWORD PTR [ebx+20], edi

; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c5	e8 00 00 00 00	 call	 _memcpy

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000ca	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d0	5f		 pop	 edi

; 2788 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000d1	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2675 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));
; 2676 :     }

  000d5	8b c3		 mov	 eax, ebx
  000d7	5e		 pop	 esi
  000d8	5b		 pop	 ebx
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 04 00	 ret	 4
$LN44@basic_stri:

; 2741 :             _Xlen_string(); // result too long

  000df	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN40@basic_stri:
  000e4	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2368 :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
