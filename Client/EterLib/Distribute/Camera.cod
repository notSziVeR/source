; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\Camera.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??0CCamera@@QAE@XZ				; CCamera::CCamera
PUBLIC	??1CCamera@@UAE@XZ				; CCamera::~CCamera
PUBLIC	?SetCameraMaxDistance@CCamera@@SAXM@Z		; CCamera::SetCameraMaxDistance
PUBLIC	?Lock@CCamera@@QAEXXZ				; CCamera::Lock
PUBLIC	?Unlock@CCamera@@QAEXXZ				; CCamera::Unlock
PUBLIC	?IsLock@CCamera@@QAE_NXZ			; CCamera::IsLock
PUBLIC	?Wheel@CCamera@@QAEXH@Z				; CCamera::Wheel
PUBLIC	?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z		; CCamera::Drag
PUBLIC	?EndDrag@CCamera@@QAE_NXZ			; CCamera::EndDrag
PUBLIC	?BeginDrag@CCamera@@QAEXHH@Z			; CCamera::BeginDrag
PUBLIC	?IsDraging@CCamera@@QAE_NXZ			; CCamera::IsDraging
PUBLIC	?SetResistance@CCamera@@QAEXM@Z			; CCamera::SetResistance
PUBLIC	?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z ; CCamera::SetCameraState
PUBLIC	?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ	; CCamera::IncreaseNumSrcreenBuilding
PUBLIC	?ResetNumScreenBuilding@CCamera@@QAEXXZ		; CCamera::ResetNumScreenBuilding
PUBLIC	?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams
PUBLIC	?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z		; CCamera::SetEye
PUBLIC	?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z	; CCamera::SetTarget
PUBLIC	?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z		; CCamera::SetUp
PUBLIC	?Pitch@CCamera@@QAEXM@Z				; CCamera::Pitch
PUBLIC	?Roll@CCamera@@QAEXM@Z				; CCamera::Roll
PUBLIC	?SetDistance@CCamera@@QAEXM@Z			; CCamera::SetDistance
PUBLIC	?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z		; CCamera::Move
PUBLIC	?Zoom@CCamera@@QAEXM@Z				; CCamera::Zoom
PUBLIC	?MoveAlongView@CCamera@@QAEXM@Z			; CCamera::MoveAlongView
PUBLIC	?MoveAlongCross@CCamera@@QAEXM@Z		; CCamera::MoveAlongCross
PUBLIC	?MoveAlongUp@CCamera@@QAEXM@Z			; CCamera::MoveAlongUp
PUBLIC	?MoveLateral@CCamera@@QAEXM@Z			; CCamera::MoveLateral
PUBLIC	?MoveFront@CCamera@@QAEXM@Z			; CCamera::MoveFront
PUBLIC	?MoveVertical@CCamera@@QAEXM@Z			; CCamera::MoveVertical
PUBLIC	?RotateEyeAroundTarget@CCamera@@QAEXMM@Z	; CCamera::RotateEyeAroundTarget
PUBLIC	?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z ; CCamera::RotateEyeAroundPoint
PUBLIC	?SetViewMatrix@CCamera@@IAEXXZ			; CCamera::SetViewMatrix
PUBLIC	?CalculateRoll@CCamera@@IAEXXZ			; CCamera::CalculateRoll
PUBLIC	?GetTargetHeight@CCamera@@QAEMXZ		; CCamera::GetTargetHeight
PUBLIC	?SetTargetHeight@CCamera@@QAEXM@Z		; CCamera::SetTargetHeight
PUBLIC	??_GCCamera@@UAEPAXI@Z				; CCamera::`scalar deleting destructor'
PUBLIC	??1?$CSingleton@VCCameraManager@@@@UAE@XZ	; CSingleton<CCameraManager>::~CSingleton<CCameraManager>
PUBLIC	??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z	; CSingleton<CCameraManager>::`scalar deleting destructor'
PUBLIC	??0CCameraManager@@QAE@XZ			; CCameraManager::CCameraManager
PUBLIC	??1CCameraManager@@UAE@XZ			; CCameraManager::~CCameraManager
PUBLIC	?AddCamera@CCameraManager@@QAE_NE@Z		; CCameraManager::AddCamera
PUBLIC	?RemoveCamera@CCameraManager@@QAE_NE@Z		; CCameraManager::RemoveCamera
PUBLIC	?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ; CCameraManager::GetCurrentCamera
PUBLIC	?SetCurrentCamera@CCameraManager@@QAEXE@Z	; CCameraManager::SetCurrentCamera
PUBLIC	?ResetToPreviousCamera@CCameraManager@@QAEXXZ	; CCameraManager::ResetToPreviousCamera
PUBLIC	?isCurrentCamera@CCameraManager@@QAE_NE@Z	; CCameraManager::isCurrentCamera
PUBLIC	?GetCurrentCameraNum@CCameraManager@@QAEEXZ	; CCameraManager::GetCurrentCameraNum
PUBLIC	?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ ; CCameraManager::isTerrainCollisionEnable
PUBLIC	?SetTerrainCollision@CCameraManager@@QAEX_N@Z	; CCameraManager::SetTerrainCollision
PUBLIC	??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
PUBLIC	??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
PUBLIC	??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::~map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >
PUBLIC	??_GCCameraManager@@UAEPAXI@Z			; CCameraManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
PUBLIC	??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CCamera@@6B@				; CCamera::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A ; CSingleton<CCameraManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCCameraManager@@@@6B@		; CSingleton<CCameraManager>::`vftable'
PUBLIC	??_7CCameraManager@@6B@				; CCameraManager::`vftable'
PUBLIC	?aCameraManager@@3VCCameraManager@@A		; aCameraManager
PUBLIC	??_R4CCamera@@6B@				; CCamera::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCamera@@@8				; CCamera `RTTI Type Descriptor'
PUBLIC	??_R3CCamera@@8					; CCamera::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCamera@@8					; CCamera::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCamera@@8			; CCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCameraManager@@6B@			; CCameraManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCameraManager@@@8			; CCameraManager `RTTI Type Descriptor'
PUBLIC	??_R3CCameraManager@@8				; CCameraManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCameraManager@@8				; CCameraManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCameraManager@@8			; CCameraManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8	; CSingleton<CCameraManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCCameraManager@@@@@8	; CSingleton<CCameraManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCCameraManager@@@@8		; CSingleton<CCameraManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCCameraManager@@@@8		; CSingleton<CCameraManager>::`RTTI Base Class Array'
PUBLIC	??_R4?$CSingleton@VCCameraManager@@@@6B@	; CSingleton<CCameraManager>::`RTTI Complete Object Locator'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3e99999a
PUBLIC	__real@3f800000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@42652ee0
PUBLIC	__real@42a00000
PUBLIC	__real@43b40000
PUBLIC	__real@bf800000
PUBLIC	__real@c2a00000
PUBLIC	__real@c3b40000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	_D3DXVec2Normalize@8:PROC
EXTRN	_D3DXVec3Normalize@8:PROC
EXTRN	_D3DXVec3TransformCoord@12:PROC
EXTRN	_D3DXMatrixDeterminant@4:PROC
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixInverse@12:PROC
EXTRN	_D3DXMatrixRotationZ@8:PROC
EXTRN	_D3DXMatrixRotationAxis@12:PROC
EXTRN	_D3DXMatrixLookAtRH@16:PROC
EXTRN	?fMIN@@YAMMM@Z:PROC				; fMIN
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	??_ECCamera@@UAEPAXI@Z:PROC			; CCamera::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCCameraManager@@@@UAEPAXI@Z:PROC ; CSingleton<CCameraManager>::`vector deleting destructor'
EXTRN	??_ECCameraManager@@UAEPAXI@Z:PROC		; CCameraManager::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_acos_precise:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?CAMERA_MAX_DISTANCE@CCamera@@0MA:DWORD		; CCamera::CAMERA_MAX_DISTANCE
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A DD 01H DUP (?) ; CSingleton<CCameraManager>::ms_singleton
_BSS	ENDS
_BSS	SEGMENT
?aCameraManager@@3VCCameraManager@@A DB 014H DUP (?)	; aCameraManager
_BSS	ENDS
CRT$XCU	SEGMENT
?aCameraManager$initializer$@@3P6AXXZA DD FLAT:??__EaCameraManager@@YAXXZ ; aCameraManager$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c3b40000
CONST	SEGMENT
__real@c3b40000 DD 0c3b40000r			; -360
CONST	ENDS
;	COMDAT __real@c2a00000
CONST	SEGMENT
__real@c2a00000 DD 0c2a00000r			; -80
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42652ee0
CONST	SEGMENT
__real@42652ee0 DD 042652ee0r			; 57.2958
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_R4?$CSingleton@VCCameraManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCCameraManager@@@@6B@ DD 00H		; CSingleton<CCameraManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCCameraManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCCameraManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCCameraManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8 ; CSingleton<CCameraManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCCameraManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCCameraManager@@@@8 DD 00H		; CSingleton<CCameraManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCCameraManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCCameraManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CCameraManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCCameraManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCCameraManager@@@@@8 ; CSingleton<CCameraManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCameraManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCameraManager@@8 DD FLAT:??_R0?AVCCameraManager@@@8 ; CCameraManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CCameraManager@@8
rdata$r	SEGMENT
??_R2CCameraManager@@8 DD FLAT:??_R1A@?0A@EA@CCameraManager@@8 ; CCameraManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$CSingleton@VCCameraManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CCameraManager@@8
rdata$r	SEGMENT
??_R3CCameraManager@@8 DD 00H				; CCameraManager::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCameraManager@@@8
data$rs	SEGMENT
??_R0?AVCCameraManager@@@8 DD FLAT:??_7type_info@@6B@	; CCameraManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCameraManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CCameraManager@@6B@
rdata$r	SEGMENT
??_R4CCameraManager@@6B@ DD 00H				; CCameraManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCameraManager@@@8
	DD	FLAT:??_R3CCameraManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCamera@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCamera@@8 DD FLAT:??_R0?AVCCamera@@@8	; CCamera::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCamera@@8
rdata$r	ENDS
;	COMDAT ??_R2CCamera@@8
rdata$r	SEGMENT
??_R2CCamera@@8 DD FLAT:??_R1A@?0A@EA@CCamera@@8	; CCamera::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCamera@@8
rdata$r	SEGMENT
??_R3CCamera@@8 DD 00H					; CCamera::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCamera@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCamera@@@8
data$rs	SEGMENT
??_R0?AVCCamera@@@8 DD FLAT:??_7type_info@@6B@		; CCamera `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCamera@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CCamera@@6B@
rdata$r	SEGMENT
??_R4CCamera@@6B@ DD 00H				; CCamera::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCamera@@@8
	DD	FLAT:??_R3CCamera@@8
rdata$r	ENDS
;	COMDAT ??_7CCameraManager@@6B@
CONST	SEGMENT
??_7CCameraManager@@6B@ DD FLAT:??_R4CCameraManager@@6B@ ; CCameraManager::`vftable'
	DD	FLAT:??_ECCameraManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCCameraManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCCameraManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCCameraManager@@@@6B@ ; CSingleton<CCameraManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCCameraManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CCamera@@6B@
CONST	SEGMENT
??_7CCamera@@6B@ DD FLAT:??_R4CCamera@@6B@		; CCamera::`vftable'
	DD	FLAT:??_ECCamera@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z$1
__ehfuncinfo$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABE@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABE@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z$2
__ehfuncinfo$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Emplace@U?$pair@$$CBEPAVCCamera@@@std@@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z$2
__ehfuncinfo$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABE$$V@?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@_N@1@ABE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z$2
__ehfuncinfo$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$insert@$0A@$0A@@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@@std@@_N@1@$$QAU?$pair@$$CBEPAVCCamera@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z$2
__ehfuncinfo$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddCamera@CCameraManager@@QAE_NE@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddCamera@CCameraManager@@QAE_NE@Z$3
__ehfuncinfo$?AddCamera@CCameraManager@@QAE_NE@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddCamera@CCameraManager@@QAE_NE@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCameraManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCameraManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCameraManager@@QAE@XZ$1
__ehfuncinfo$??0CCameraManager@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCameraManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	53		 push	 ebx
  00021	8a 19		 mov	 bl, BYTE PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	38 58 10	 cmp	 BYTE PTR [eax+16], bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5b		 pop	 ebx
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 63   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 63   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FaCameraManager@@YAXXZ
text$yd	SEGMENT
??__FaCameraManager@@YAXXZ PROC				; `dynamic atexit destructor for 'aCameraManager'', COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?aCameraManager@@3VCCameraManager@@A ; aCameraManager
  00005	e9 00 00 00 00	 jmp	 ??1CCameraManager@@UAE@XZ ; CCameraManager::~CCameraManager
??__FaCameraManager@@YAXXZ ENDP				; `dynamic atexit destructor for 'aCameraManager''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ??__EaCameraManager@@YAXXZ
text$di	SEGMENT
??__EaCameraManager@@YAXXZ PROC				; `dynamic initializer for 'aCameraManager'', COMDAT

; 11   : CCameraManager aCameraManager;	// CCameraManager Instance

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?aCameraManager@@3VCCameraManager@@A ; aCameraManager
  00005	e8 00 00 00 00	 call	 ??0CCameraManager@@QAE@XZ ; CCameraManager::CCameraManager
  0000a	68 00 00 00 00	 push	 OFFSET ??__FaCameraManager@@YAXXZ ; `dynamic atexit destructor for 'aCameraManager''
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
??__EaCameraManager@@YAXXZ ENDP				; `dynamic initializer for 'aCameraManager''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCameraManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCameraManager@@UAEPAXI@Z PROC			; CCameraManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCameraManager@@UAE@XZ ; CCameraManager::~CCameraManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 14		 push	 20			; 00000014H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCCameraManager@@UAEPAXI@Z ENDP			; CCameraManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ PROC ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::~map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::~map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
;	COMDAT ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
_TEXT	SEGMENT
__Loc$3 = -32						; size = 12
$T4 = -20						; size = 8
__$EHRec$ = -12						; size = 12
__Keyval$ = 8						; size = 4
??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z PROC ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[], COMDAT
; _this$ = ecx

; 344  :     mapped_type& operator[](const key_type& _Keyval) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  0002a	8b 5d 08	 mov	 ebx, DWORD PTR __Keyval$[ebp]
  0002d	8d 45 e0	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00030	53		 push	 ebx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00037	8b 55 e8	 mov	 edx, DWORD PTR __Loc$3[ebp+8]
  0003a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003e	75 07		 jne	 SHORT $LN4@operator
  00040	8a 03		 mov	 al, BYTE PTR [ebx]
  00042	3a 42 10	 cmp	 al, BYTE PTR [edx+16]
  00045	73 52		 jae	 SHORT $LN3@operator
$LN4@operator:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  00047	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  0004e	74 60		 je	 SHORT $LN103@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  00050	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  00052	89 7d ec	 mov	 DWORD PTR $T4[ebp], edi

; 77   :         return ::operator new(_Bytes);

  00055	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  00057	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  0005e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 235  :         return _Traits::_Allocate(_Bytes);

  0006a	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  0006c	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  0006f	8a 03		 mov	 al, BYTE PTR [ebx]
  00071	88 41 10	 mov	 BYTE PTR [ecx+16], al
  00074	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  0007b	51		 push	 ecx
  0007c	ff 75 e4	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  0007f	89 31		 mov	 DWORD PTR [ecx], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00081	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  00084	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  00087	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  0008a	66 c7 41 0c 00
	00		 mov	 WORD PTR [ecx+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
  00097	8b d0		 mov	 edx, eax
$LN3@operator:

; 345  :         return _Try_emplace(_Keyval).first->_Myval.second;

  00099	8d 42 14	 lea	 eax, DWORD PTR [edx+20]

; 346  :     }

  0009c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a6	59		 pop	 ecx
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	5b		 pop	 ebx
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
$LN103@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  000b0	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN101@operator:
  000b5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z$2:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ENDP ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1038 = -16						; size = 4
$T1 = -12						; size = 4
tv1091 = -12						; size = 4
tv1075 = -12						; size = 4
tv1042 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract, COMDAT
; _this$ = ecx

; 504  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 505  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	56		 push	 esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 506  :         ++_Where; // save successor iterator for return

  0000e	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00011	57		 push	 edi
  00012	89 5d f8	 mov	 DWORD PTR __Erasednode$1$[ebp], ebx
  00015	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++

; 507  : 
; 508  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 509  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 510  :         _Nodeptr _Pnode = _Erasednode;
; 511  : 
; 512  :         if (_Pnode->_Left->_Isnil) {

  0001a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0001f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00023	75 18		 jne	 SHORT $LN86@Extract

; 513  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 514  :         } else if (_Pnode->_Right->_Isnil) {

  00025	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00029	74 04		 je	 SHORT $LN7@Extract

; 515  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002b	8b f8		 mov	 edi, eax

; 516  :         } else { // two subtrees, must lift successor node to replace erased

  0002d	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 517  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0002f	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 518  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00032	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00035	3b d3		 cmp	 edx, ebx

; 519  :         }
; 520  : 
; 521  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00037	0f 85 95 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 522  :             _Fixnodeparent = _Erasednode->_Parent;
; 523  :             if (!_Fixnode->_Isnil) {

  0003d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00041	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00044	75 03		 jne	 SHORT $LN11@Extract

; 524  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 525  :             }
; 526  : 
; 527  :             if (_Myhead->_Parent == _Erasednode) {

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00051	75 05		 jne	 SHORT $LN12@Extract

; 528  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00053	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00056	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 529  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00058	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005a	75 04		 jne	 SHORT $LN14@Extract

; 530  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005c	89 3e		 mov	 DWORD PTR [esi], edi

; 531  :             } else {

  0005e	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 532  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00060	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 533  :             }
; 534  : 
; 535  :             if (_Myhead->_Left == _Erasednode) {

  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	89 45 f4	 mov	 DWORD PTR tv1075[ebp], eax
  00068	39 18		 cmp	 DWORD PTR [eax], ebx
  0006a	75 28		 jne	 SHORT $LN16@Extract

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006c	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00070	74 04		 je	 SHORT $LN42@Extract
  00072	8b d6		 mov	 edx, esi
  00074	eb 19		 jmp	 SHORT $LN64@Extract
$LN42@Extract:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00078	8b d7		 mov	 edx, edi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0f		 jne	 SHORT $LN64@Extract
$LL63@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL63@Extract
  0008c	8b 45 f4	 mov	 eax, DWORD PTR tv1075[ebp]
$LN64@Extract:

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN16@Extract:

; 537  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Right == _Erasednode) {

  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  00099	0f 85 a0 00 00
	00		 jne	 $LN47@Extract

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a3	74 0a		 je	 SHORT $LN44@Extract
  000a5	8b ce		 mov	 ecx, esi
  000a7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000aa	e9 90 00 00 00	 jmp	 $LN47@Extract
$LN44@Extract:

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000af	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b2	8b cf		 mov	 ecx, edi

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000b4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b8	75 11		 jne	 SHORT $LN68@Extract
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL67@Extract:

; 446  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL67@Extract
$LN68@Extract:
  000cb	8b 02		 mov	 eax, DWORD PTR [edx]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000d0	eb 6d		 jmp	 SHORT $LN47@Extract
$LN9@Extract:

; 545  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 546  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down
; 547  : 
; 548  :             if (_Pnode == _Erasednode->_Right) {

  000d5	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  000d8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000da	89 02		 mov	 DWORD PTR [edx], eax
  000dc	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  000df	3b 53 08	 cmp	 edx, DWORD PTR [ebx+8]
  000e2	75 04		 jne	 SHORT $LN18@Extract

; 549  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e4	8b f2		 mov	 esi, edx

; 550  :             } else { // successor further down, link in place of erased

  000e6	eb 1c		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 551  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 552  :                 if (!_Fixnode->_Isnil) {

  000e8	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ec	8b 31		 mov	 esi, DWORD PTR [ecx]
  000ee	75 03		 jne	 SHORT $LN20@Extract

; 553  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 554  :                 }
; 555  : 
; 556  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f3	89 3e		 mov	 DWORD PTR [esi], edi

; 557  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f5	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000f8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 558  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fb	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000fe	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00101	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@Extract:

; 559  :             }
; 560  : 
; 561  :             if (_Myhead->_Parent == _Erasednode) {

  00104	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0010c	75 05		 jne	 SHORT $LN21@Extract

; 562  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00111	eb 0e		 jmp	 SHORT $LN94@Extract
$LN21@Extract:

; 563  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00113	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00116	39 18		 cmp	 DWORD PTR [eax], ebx
  00118	75 04		 jne	 SHORT $LN23@Extract

; 564  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011a	89 10		 mov	 DWORD PTR [eax], edx

; 565  :             } else {

  0011c	eb 03		 jmp	 SHORT $LN94@Extract
$LN23@Extract:

; 566  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011e	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN94@Extract:

; 567  :             }
; 568  : 
; 569  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00121	b9 04 00 00 00	 mov	 ecx, 4
  00126	8b c3		 mov	 eax, ebx
  00128	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00130	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]

; 101  :     _Left    = _STD move(_Right);

  00133	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00136	88 42 0c	 mov	 BYTE PTR [edx+12], al
  00139	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 102  :     _Right   = _STD move(_Tmp);

  0013c	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN47@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 573  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0013f	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00143	0f 85 89 01 00
	00		 jne	 $LN25@Extract

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  00149	8b 02		 mov	 eax, DWORD PTR [edx]
  0014b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0014e	0f 84 7a 01 00
	00		 je	 $LN3@Extract
  00154	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@Extract:
  00160	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00164	89 75 f4	 mov	 DWORD PTR tv1091[ebp], esi
  00167	0f 85 5e 01 00
	00		 jne	 $LN93@Extract

; 575  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0016d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016f	3b f9		 cmp	 edi, ecx
  00171	0f 85 c3 00 00
	00		 jne	 $LN26@Extract

; 576  :                     _Pnode = _Fixnodeparent->_Right;

  00177	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0017a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0017e	75 57		 jne	 SHORT $LN87@Extract

; 578  :                         _Pnode->_Color         = _Black;

  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00184	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 579  :                         _Fixnodeparent->_Color = _Red;

  00187	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0018b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00196	75 03		 jne	 SHORT $LN49@Extract

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00198	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN49@Extract:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0019b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  001a1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  001ac	75 0c		 jne	 SHORT $LN50@Extract

; 471  :             _Myhead->_Parent = _Pnode;

  001ae	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001b1	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001b3	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001b5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b8	eb 20		 jmp	 SHORT $LN80@Extract
$LN50@Extract:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ba	8b 02		 mov	 eax, DWORD PTR [edx]
  001bc	3b 30		 cmp	 esi, DWORD PTR [eax]
  001be	75 0b		 jne	 SHORT $LN52@Extract

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 08		 mov	 DWORD PTR [eax], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c2	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001c4	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	eb 0f		 jmp	 SHORT $LN80@Extract
$LN52@Extract:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001ce	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001d0	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	eb 03		 jmp	 SHORT $LN80@Extract
$LN87@Extract:
  001d7	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN80@Extract:

; 582  :                     }
; 583  : 
; 584  :                     if (_Pnode->_Isnil) {

  001da	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001de	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 585  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 586  :                     } else if (_Pnode->_Left->_Color == _Black
; 587  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ea	75 0d		 jne	 SHORT $LN89@Extract
  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f3	0f 84 b9 00 00
	00		 je	 $LN95@Extract
$LN89@Extract:

; 588  :                         _Pnode->_Color = _Red;
; 589  :                         _Fixnode       = _Fixnodeparent;
; 590  :                     } else { // must rearrange right subtree
; 591  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001f9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001fc	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00200	75 16		 jne	 SHORT $LN33@Extract

; 592  :                             _Pnode->_Left->_Color = _Black;

  00202	8b 01		 mov	 eax, DWORD PTR [ecx]

; 593  :                             _Pnode->_Color        = _Red;
; 594  :                             _Rrotate(_Pnode);

  00204	51		 push	 ecx
  00205	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00209	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00210	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate

; 595  :                             _Pnode = _Fixnodeparent->_Right;

  00215	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 596  :                         }
; 597  : 
; 598  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00218	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  0021b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 599  :                         _Fixnodeparent->_Color = _Black;

  0021e	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 600  :                         _Pnode->_Right->_Color = _Black;

  00222	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 601  :                         _Lrotate(_Fixnodeparent);

  00225	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00228	56		 push	 esi
  00229	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0022d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate

; 602  :                         break; // tree now recolored/rebalanced

  00232	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00235	e9 91 00 00 00	 jmp	 $LN93@Extract
$LN26@Extract:

; 603  :                     }
; 604  :                 } else { // fixup right subtree
; 605  :                     _Pnode = _Fixnodeparent->_Left;
; 606  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0023a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0023e	75 58		 jne	 SHORT $LN88@Extract

; 607  :                         _Pnode->_Color         = _Black;

  00240	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00244	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 608  :                         _Fixnodeparent->_Color = _Red;

  00246	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  0024a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0024d	89 06		 mov	 DWORD PTR [esi], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0024f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00252	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00256	75 03		 jne	 SHORT $LN56@Extract

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00258	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN56@Extract:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0025b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00261	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00264	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00267	8b 00		 mov	 eax, DWORD PTR [eax]
  00269	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0026c	75 0c		 jne	 SHORT $LN57@Extract

; 493  :             _Myhead->_Parent = _Pnode;

  0026e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00271	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00274	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00276	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00278	eb 21		 jmp	 SHORT $LN79@Extract
$LN57@Extract:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0027a	8b 02		 mov	 eax, DWORD PTR [edx]
  0027c	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0027f	75 0c		 jne	 SHORT $LN59@Extract

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00281	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00284	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00287	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00289	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0028b	eb 0e		 jmp	 SHORT $LN79@Extract
$LN59@Extract:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0028d	89 08		 mov	 DWORD PTR [eax], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  0028f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00292	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00294	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00296	eb 03		 jmp	 SHORT $LN79@Extract
$LN88@Extract:
  00298	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN79@Extract:

; 611  :                     }
; 612  : 
; 613  :                     if (_Pnode->_Isnil) {

  0029b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0029f	75 15		 jne	 SHORT $LN2@Extract

; 614  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 615  :                     } else if (_Pnode->_Right->_Color == _Black
; 616  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  002a1	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  002a4	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  002a8	75 3e		 jne	 SHORT $LN90@Extract
  002aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ac	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002b0	75 36		 jne	 SHORT $LN90@Extract
$LN95@Extract:

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002b2	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002b6	8b 32		 mov	 esi, DWORD PTR [edx]
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  002bb	8b 4d f4	 mov	 ecx, DWORD PTR tv1091[ebp]
  002be	8b f9		 mov	 edi, ecx
  002c0	8b 02		 mov	 eax, DWORD PTR [edx]
  002c2	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002c5	0f 85 95 fe ff
	ff		 jne	 $LL4@Extract
$LN93@Extract:

; 631  :                         break; // tree now recolored/rebalanced
; 632  :                     }
; 633  :                 }
; 634  :             }
; 635  : 
; 636  :             _Fixnode->_Color = _Black; // stopping node is black

  002cb	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002ce	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 637  :         }
; 638  : 
; 639  :         if (0 < _Mysize) {

  002d2	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002d5	8b c3		 mov	 eax, ebx
  002d7	85 c9		 test	 ecx, ecx
  002d9	74 04		 je	 SHORT $LN40@Extract

; 640  :             --_Mysize;

  002db	49		 dec	 ecx
  002dc	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN40@Extract:

; 641  :         }
; 642  : 
; 643  :         return _Erasednode;
; 644  :     }

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	5b		 pop	 ebx
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c2 04 00	 ret	 4
$LN90@Extract:

; 617  :                         _Pnode->_Color = _Red;
; 618  :                         _Fixnode       = _Fixnodeparent;
; 619  :                     } else { // must rearrange left subtree
; 620  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ee	75 13		 jne	 SHORT $LN39@Extract

; 621  :                             _Pnode->_Right->_Color = _Black;

  002f0	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 622  :                             _Pnode->_Color         = _Red;

  002f4	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 623  :                             _Lrotate(_Pnode);

  002f8	51		 push	 ecx
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002fc	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate

; 624  :                             _Pnode = _Fixnodeparent->_Left;

  00301	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 625  :                         }
; 626  : 
; 627  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00303	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00306	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 628  :                         _Fixnodeparent->_Color = _Black;

  00309	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 629  :                         _Pnode->_Left->_Color  = _Black;

  0030d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 630  :                         _Rrotate(_Fixnodeparent);

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00312	56		 push	 esi
  00313	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00317	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate
  0031c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0031f	eb aa		 jmp	 SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 496  :         } else {
; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 474  :         } else {
; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetTerrainCollision@CCameraManager@@QAEX_N@Z
_TEXT	SEGMENT
_bEnable$ = 8						; size = 1
?SetTerrainCollision@CCameraManager@@QAEX_N@Z PROC	; CCameraManager::SetTerrainCollision, COMDAT
; _this$ = ecx

; 724  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 725  : 	m_pCurrentCamera->SetTerrainCollision(bEnable);

  00003	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00006	8a 45 08	 mov	 al, BYTE PTR _bEnable$[ebp]
  00009	88 81 34 03 00
	00		 mov	 BYTE PTR [ecx+820], al

; 726  : }

  0000f	5d		 pop	 ebp
  00010	c2 04 00	 ret	 4
?SetTerrainCollision@CCameraManager@@QAEX_N@Z ENDP	; CCameraManager::SetTerrainCollision
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ
_TEXT	SEGMENT
?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ PROC	; CCameraManager::isTerrainCollisionEnable, COMDAT
; _this$ = ecx

; 720  : 	return m_pCurrentCamera->isTerrainCollisionEnable();

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	8a 80 34 03 00
	00		 mov	 al, BYTE PTR [eax+820]

; 721  : }

  00009	c3		 ret	 0
?isTerrainCollisionEnable@CCameraManager@@QAE_NXZ ENDP	; CCameraManager::isTerrainCollisionEnable
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?GetCurrentCameraNum@CCameraManager@@QAEEXZ
_TEXT	SEGMENT
_itor$1 = -4						; size = 4
?GetCurrentCameraNum@CCameraManager@@QAEEXZ PROC	; CCameraManager::GetCurrentCameraNum, COMDAT
; _this$ = ecx

; 705  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 706  : 	if (!m_pCurrentCamera)

  00006	8b 79 0c	 mov	 edi, DWORD PTR [ecx+12]
  00009	85 ff		 test	 edi, edi
  0000b	74 27		 je	 SHORT $LN3@GetCurrent
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  0000d	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00010	8b 06		 mov	 eax, DWORD PTR [esi]
  00012	89 45 fc	 mov	 DWORD PTR _itor$1[ebp], eax
  00015	3b c6		 cmp	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 710  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  00017	74 1b		 je	 SHORT $LN3@GetCurrent
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL27@GetCurrent:

; 711  : 		if (m_pCurrentCamera == (*itor).second)

  00020	3b 78 14	 cmp	 edi, DWORD PTR [eax+20]
  00023	74 17		 je	 SHORT $LN41@GetCurrent
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  00025	8d 4d fc	 lea	 ecx, DWORD PTR _itor$1[ebp]
  00028	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _itor$1[ebp]
  00030	3b c6		 cmp	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 710  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  00032	75 ec		 jne	 SHORT $LL27@GetCurrent
$LN3@GetCurrent:
  00034	5f		 pop	 edi

; 714  : 		}
; 715  : 	return NO_CURRENT_CAMERA;

  00035	32 c0		 xor	 al, al

; 716  : }

  00037	5e		 pop	 esi
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
$LN41@GetCurrent:

; 712  : 		{
; 713  : 			return (*itor).first;

  0003c	8a 40 10	 mov	 al, BYTE PTR [eax+16]
  0003f	5f		 pop	 edi

; 716  : }

  00040	5e		 pop	 esi
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?GetCurrentCameraNum@CCameraManager@@QAEEXZ ENDP	; CCameraManager::GetCurrentCameraNum
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?isCurrentCamera@CCameraManager@@QAE_NE@Z
_TEXT	SEGMENT
_ucCameraNum$ = 8					; size = 1
?isCurrentCamera@CCameraManager@@QAE_NE@Z PROC		; CCameraManager::isCurrentCamera, COMDAT
; _this$ = ecx

; 675  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 676  : 	if (m_CameraMap[ucCameraNum] == m_pCurrentCamera)

  00006	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  00009	50		 push	 eax
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	e8 00 00 00 00	 call	 ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00017	5e		 pop	 esi
  00018	0f 94 c0	 sete	 al

; 677  : 	{
; 678  : 		return true;
; 679  : 	}
; 680  : 	return false;
; 681  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?isCurrentCamera@CCameraManager@@QAE_NE@Z ENDP		; CCameraManager::isCurrentCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?ResetToPreviousCamera@CCameraManager@@QAEXXZ
_TEXT	SEGMENT
?ResetToPreviousCamera@CCameraManager@@QAEXXZ PROC	; CCameraManager::ResetToPreviousCamera, COMDAT
; _this$ = ecx

; 666  : 	if (!m_pPreviousCamera)
; 667  : 	{
; 668  : 		assert(false);
; 669  : 	}
; 670  : 	m_pCurrentCamera = m_pPreviousCamera;

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 671  : 	m_pPreviousCamera = NULL;

  00006	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 672  : }

  0000d	c3		 ret	 0
?ResetToPreviousCamera@CCameraManager@@QAEXXZ ENDP	; CCameraManager::ResetToPreviousCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetCurrentCamera@CCameraManager@@QAEXE@Z
_TEXT	SEGMENT
_ucCameraNum$ = 8					; size = 1
?SetCurrentCamera@CCameraManager@@QAEXE@Z PROC		; CCameraManager::SetCurrentCamera, COMDAT
; _this$ = ecx

; 655  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 656  : 	if (m_pCurrentCamera != m_CameraMap[ucCameraNum])

  00006	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  00009	57		 push	 edi
  0000a	50		 push	 eax
  0000b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000e	e8 00 00 00 00	 call	 ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
  00013	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00016	3b 10		 cmp	 edx, DWORD PTR [eax]
  00018	74 03		 je	 SHORT $LN2@SetCurrent

; 657  : 	{
; 658  : 		m_pPreviousCamera = m_pCurrentCamera;

  0001a	89 56 10	 mov	 DWORD PTR [esi+16], edx
$LN2@SetCurrent:

; 659  : 	}
; 660  : 
; 661  : 	m_pCurrentCamera = m_CameraMap[ucCameraNum];

  0001d	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  00020	50		 push	 eax
  00021	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00024	e8 00 00 00 00	 call	 ??A?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAEAAPAVCCamera@@ABE@Z ; std::map<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> > >::operator[]
  00029	5f		 pop	 edi
  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002f	5e		 pop	 esi

; 662  : }

  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
?SetCurrentCamera@CCameraManager@@QAEXE@Z ENDP		; CCameraManager::SetCurrentCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ
_TEXT	SEGMENT
?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ PROC ; CCameraManager::GetCurrentCamera, COMDAT
; _this$ = ecx

; 647  : 	if (!m_pCurrentCamera)
; 648  : 	{
; 649  : 		assert(false);
; 650  : 	}
; 651  : 	return m_pCurrentCamera;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 652  : }

  00003	c3		 ret	 0
?GetCurrentCamera@CCameraManager@@QAEPAVCCamera@@XZ ENDP ; CCameraManager::GetCurrentCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?RemoveCamera@CCameraManager@@QAE_NE@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_ucCameraNum$ = 8					; size = 1
?RemoveCamera@CCameraManager@@QAE_NE@Z PROC		; CCameraManager::RemoveCamera, COMDAT
; _this$ = ecx

; 694  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  0000a	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 695  : 	TCameraMap::iterator itor = m_CameraMap.find(ucCameraNum);

  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 55 fc	 mov	 edx, DWORD PTR __Loc$1[ebp+8]
  0001c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00020	75 28		 jne	 SHORT $LN73@RemoveCame
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00022	8a 45 08	 mov	 al, BYTE PTR _ucCameraNum$[ebp]
  00025	3a 42 10	 cmp	 al, BYTE PTR [edx+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 20		 jb	 SHORT $LN73@RemoveCame

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 16		 cmp	 DWORD PTR [esi], edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 696  : 	if (m_CameraMap.end() == itor)

  0002c	74 1c		 je	 SHORT $LN73@RemoveCame
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  0002e	52		 push	 edx
  0002f	8b ce		 mov	 ecx, esi
  00031	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00036	6a 18		 push	 24			; 00000018H
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003e	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 701  : 	return true;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 702  : }

  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
$LN73@RemoveCame:

; 697  : 	{
; 698  : 		return false;

  0004a	32 c0		 xor	 al, al
  0004c	5e		 pop	 esi

; 702  : }

  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
?RemoveCamera@CCameraManager@@QAE_NE@Z ENDP		; CCameraManager::RemoveCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?AddCamera@CCameraManager@@QAE_NE@Z
_TEXT	SEGMENT
__Loc$2 = -44						; size = 12
__Loc$3 = -44						; size = 12
$T4 = -32						; size = 12
$T5 = -28						; size = 8
$T6 = -20						; size = 8
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ucCameraNum$ = 8					; size = 1
?AddCamera@CCameraManager@@QAE_NE@Z PROC		; CCameraManager::AddCamera, COMDAT
; _this$ = ecx

; 684  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AddCamera@CCameraManager@@QAE_NE@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00028	8d 45 08	 lea	 eax, DWORD PTR _ucCameraNum$[ebp]
  0002b	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 685  : 	if (m_CameraMap.end() != m_CameraMap.find(ucCameraNum))

  0002c	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0002f	8d 45 d4	 lea	 eax, DWORD PTR __Loc$3[ebp]
  00032	8b cf		 mov	 ecx, edi
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0003a	8b 45 dc	 mov	 eax, DWORD PTR __Loc$3[ebp+8]
  0003d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00041	75 22		 jne	 SHORT $LN2@AddCamera
  00043	8a 4d 08	 mov	 cl, BYTE PTR _ucCameraNum$[ebp]
  00046	3a 48 10	 cmp	 cl, BYTE PTR [eax+16]
  00049	72 1a		 jb	 SHORT $LN2@AddCamera
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 685  : 	if (m_CameraMap.end() != m_CameraMap.find(ucCameraNum))

  0004b	39 07		 cmp	 DWORD PTR [edi], eax
  0004d	74 16		 je	 SHORT $LN2@AddCamera

; 686  : 	{
; 687  : 		return false;

  0004f	32 c0		 xor	 al, al

; 691  : }

  00051	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00054	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005b	59		 pop	 ecx
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
$LN2@AddCamera:

; 688  : 	}
; 689  : 	m_CameraMap.insert(TCameraMap::value_type(ucCameraNum, new CCamera));

  00065	68 38 03 00 00	 push	 824			; 00000338H
  0006a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006f	83 c4 04	 add	 esp, 4
  00072	89 45 f0	 mov	 DWORD PTR $T7[ebp], eax
  00075	85 c0		 test	 eax, eax
  00077	74 0b		 je	 SHORT $LN4@AddCamera
  00079	8b c8		 mov	 ecx, eax
  0007b	e8 00 00 00 00	 call	 ??0CCamera@@QAE@XZ	; CCamera::CCamera
  00080	8b d8		 mov	 ebx, eax
  00082	eb 02		 jmp	 SHORT $LN5@AddCamera
$LN4@AddCamera:
  00084	33 db		 xor	 ebx, ebx
$LN5@AddCamera:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00086	8a 45 08	 mov	 al, BYTE PTR _ucCameraNum$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00089	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  0008b	88 45 ec	 mov	 BYTE PTR $T6[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  0008e	8d 45 ec	 lea	 eax, DWORD PTR $T6[ebp]
  00091	50		 push	 eax
  00092	8d 45 e0	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 172  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

  00095	89 5d f0	 mov	 DWORD PTR $T6[ebp+4], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1001 :             _Loc                = _Find_lower_bound(_Keyval);

  00098	50		 push	 eax
  00099	e8 00 00 00 00	 call	 ??$_Find_lower_bound@E@?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::_Find_lower_bound<unsigned char>
  0009e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000a1	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  000a5	66 0f d6 45 d4	 movq	 QWORD PTR __Loc$2[ebp], xmm0

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000aa	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000ae	75 08		 jne	 SHORT $LN128@AddCamera
  000b0	8a 45 08	 mov	 al, BYTE PTR _ucCameraNum$[ebp]
  000b3	3a 41 10	 cmp	 al, BYTE PTR [ecx+16]
  000b6	73 4b		 jae	 SHORT $LN116@AddCamera
$LN128@AddCamera:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  000b8	81 7f 04 aa aa
	aa 0a		 cmp	 DWORD PTR [edi+4], 178956970 ; 0aaaaaaaH
  000bf	74 58		 je	 SHORT $LN133@AddCamera

; 1007 :             _Inserted = _Tree_temp_node<_Alnode>(_Getal(), _Scary->_Myhead, _STD forward<_Valtys>(_Vals)...)._Release();

  000c1	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000c3	89 7d e4	 mov	 DWORD PTR $T5[ebp], edi

; 77   :         return ::operator new(_Bytes);

  000c6	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000c8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000cf	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  000d6	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000db	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000de	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000e1	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000e4	8b cf		 mov	 ecx, edi
  000e6	50		 push	 eax
  000e7	ff 75 d8	 push	 DWORD PTR __Loc$2[ebp+4]

; 807  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

  000ea	89 58 14	 mov	 DWORD PTR [eax+20], ebx

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000ed	ff 75 d4	 push	 DWORD PTR __Loc$2[ebp]

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  000f0	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  000f2	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  000f5	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  000f8	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0

; 1026 :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000fe	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Insert_node
$LN116@AddCamera:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 690  : 	return true;

  00103	b0 01		 mov	 al, 1

; 691  : }

  00105	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00108	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0010f	59		 pop	 ecx
  00110	5f		 pop	 edi
  00111	5e		 pop	 esi
  00112	5b		 pop	 ebx
  00113	8b e5		 mov	 esp, ebp
  00115	5d		 pop	 ebp
  00116	c2 04 00	 ret	 4
$LN133@AddCamera:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  00119	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN131@AddCamera:
  0011e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddCamera@CCameraManager@@QAE_NE@Z$3:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?AddCamera@CCameraManager@@QAE_NE@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AddCamera@CCameraManager@@QAE_NE@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AddCamera@CCameraManager@@QAE_NE@Z ENDP		; CCameraManager::AddCamera
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ??1CCameraManager@@UAE@XZ
_TEXT	SEGMENT
_this$1$ = -8						; size = 4
_itor$1 = -4						; size = 4
??1CCameraManager@@UAE@XZ PROC				; CCameraManager::~CCameraManager, COMDAT
; _this$ = ecx

; 637  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b c1		 mov	 eax, ecx
  00008	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00009	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 637  : {

  0000c	89 45 f8	 mov	 DWORD PTR _this$1$[ebp], eax
  0000f	56		 push	 esi
  00010	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCameraManager@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00016	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 637  : {

  00018	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00019	8b 06		 mov	 eax, DWORD PTR [esi]
  0001b	89 45 fc	 mov	 DWORD PTR _itor$1[ebp], eax
  0001e	3b c6		 cmp	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 638  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  00020	74 1e		 je	 SHORT $LN3@CCameraMan
$LL23@CCameraMan:

; 639  : 	{
; 640  : 		delete (*itor).second;

  00022	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00025	85 c9		 test	 ecx, ecx
  00027	74 06		 je	 SHORT $LN2@CCameraMan
  00029	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002b	6a 01		 push	 1
  0002d	ff 10		 call	 DWORD PTR [eax]
$LN2@CCameraMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  0002f	8d 4d fc	 lea	 ecx, DWORD PTR _itor$1[ebp]
  00032	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >,std::_Iterator_base0>::operator++

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  00037	8b 33		 mov	 esi, DWORD PTR [ebx]

; 233  :         return this->_Ptr == _Right._Ptr;

  00039	8b 45 fc	 mov	 eax, DWORD PTR _itor$1[ebp]
  0003c	3b c6		 cmp	 eax, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 638  : 	for (TCameraMap::iterator itor = m_CameraMap.begin(); itor != m_CameraMap.end(); ++itor)

  0003e	75 e2		 jne	 SHORT $LL23@CCameraMan
$LN3@CCameraMan:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00040	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00043	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00047	75 27		 jne	 SHORT $LN32@CCameraMan
  00049	0f 1f 80 00 00
	00 00		 npad	 7
$LL31@CCameraMan:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00050	ff 77 08	 push	 DWORD PTR [edi+8]
  00053	8b cb		 mov	 ecx, ebx
  00055	53		 push	 ebx
  00056	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBEPAVCCamera@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBEPAVCCamera@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned char const ,CCamera *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned char const ,CCamera *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0005b	8b c7		 mov	 eax, edi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0005d	8b 3f		 mov	 edi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0005f	6a 18		 push	 24			; 00000018H
  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00067	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0006a	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0006e	74 e0		 je	 SHORT $LL31@CCameraMan
$LN32@CCameraMan:

; 1358 :         _Head->_Parent  = _Head;

  00070	89 76 04	 mov	 DWORD PTR [esi+4], esi
  00073	8b cb		 mov	 ecx, ebx

; 1359 :         _Head->_Left    = _Head;

  00075	89 36		 mov	 DWORD PTR [esi], esi

; 1360 :         _Head->_Right   = _Head;

  00077	89 76 08	 mov	 DWORD PTR [esi+8], esi

; 1361 :         _Scary->_Mysize = 0;

  0007a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00081	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,CCamera *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CCamera *> >,0> >
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 19   : 	{

  00086	8b 45 f8	 mov	 eax, DWORD PTR _this$1$[ebp]

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx
  0008c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7?$CSingleton@VCCameraManager@@@@6B@
  00092	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, 0 ; CSingleton<CCameraManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 643  : }

  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
??1CCameraManager@@UAE@XZ ENDP				; CCameraManager::~CCameraManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ??0CCameraManager@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCameraManager@@QAE@XZ PROC				; CCameraManager::CCameraManager, COMDAT
; _this$ = ecx

; 624  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCameraManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0002c	89 3d 00 00 00
	00		 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, edi ; CSingleton<CCameraManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 624  : {

  00032	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00035	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CCameraManager@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0003b	6a 18		 push	 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 624  : {

  0003d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00044	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  00047	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0004d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00054	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00059	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  0005c	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  0005e	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  00061	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  00064	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  0006a	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 625  : 	AddCamera(DEFAULT_PERSPECTIVE_CAMERA);

  0006c	6a 01		 push	 1
  0006e	8b cf		 mov	 ecx, edi
  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00074	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0007b	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00082	e8 00 00 00 00	 call	 ?AddCamera@CCameraManager@@QAE_NE@Z ; CCameraManager::AddCamera

; 626  : 	AddCamera(DEFAULT_ORTHO_CAMERA);

  00087	6a 02		 push	 2
  00089	8b cf		 mov	 ecx, edi
  0008b	e8 00 00 00 00	 call	 ?AddCamera@CCameraManager@@QAE_NE@Z ; CCameraManager::AddCamera

; 627  : #ifdef INGAME_WIKI
; 628  : 	AddCamera(INGAME_WIKI_CAMERA);

  00090	6a 03		 push	 3
  00092	8b cf		 mov	 ecx, edi
  00094	e8 00 00 00 00	 call	 ?AddCamera@CCameraManager@@QAE_NE@Z ; CCameraManager::AddCamera

; 629  : #endif
; 630  : #ifdef ENABLE_RT_EXTENSION
; 631  : 	AddCamera(RENDER_TARGET_CAMERA);

  00099	6a 04		 push	 4
  0009b	8b cf		 mov	 ecx, edi
  0009d	e8 00 00 00 00	 call	 ?AddCamera@CCameraManager@@QAE_NE@Z ; CCameraManager::AddCamera

; 632  : #endif
; 633  : 	SetCurrentCamera(DEFAULT_PERSPECTIVE_CAMERA);

  000a2	6a 01		 push	 1
  000a4	8b cf		 mov	 ecx, edi
  000a6	e8 00 00 00 00	 call	 ?SetCurrentCamera@CCameraManager@@QAEXE@Z ; CCameraManager::SetCurrentCamera

; 634  : }

  000ab	8b c7		 mov	 eax, edi
  000ad	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b7	59		 pop	 ecx
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCameraManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCCameraManager@@@@UAE@XZ ; CSingleton<CCameraManager>::~CSingleton<CCameraManager>
__unwindfunclet$??0CCameraManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$map@EPAVCCamera@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCCamera@@@std@@@3@@std@@QAE@XZ
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
__ehhandler$??0CCameraManager@@QAE@XZ:
  00018	90		 npad	 1
  00019	90		 npad	 1
  0001a	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001e	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00021	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00024	33 c8		 xor	 ecx, eax
  00026	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCameraManager@@QAE@XZ
  00030	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCameraManager@@QAE@XZ ENDP				; CCameraManager::CCameraManager
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z PROC	; CSingleton<CCameraManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCCameraManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, 0 ; CSingleton<CCameraManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCCameraManager@@@@UAEPAXI@Z ENDP	; CSingleton<CCameraManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCCameraManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCCameraManager@@@@UAE@XZ PROC		; CSingleton<CCameraManager>::~CSingleton<CCameraManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCCameraManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCCameraManager@@@@0PAVCCameraManager@@A, 0 ; CSingleton<CCameraManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCCameraManager@@@@UAE@XZ ENDP		; CSingleton<CCameraManager>::~CSingleton<CCameraManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCCamera@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCamera@@UAEPAXI@Z PROC				; CCamera::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CCamera@@UAE@XZ	; CCamera::~CCamera
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 38 03 00 00	 push	 824			; 00000338H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCCamera@@UAEPAXI@Z ENDP				; CCamera::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetTargetHeight@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fTarget$ = 8						; size = 4
?SetTargetHeight@CCamera@@QAEXM@Z PROC			; CCamera::SetTargetHeight, COMDAT
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	m_fTarget_ = fTarget;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fTarget$[ebp]
  00008	f3 0f 11 81 f8
	02 00 00	 movss	 DWORD PTR [ecx+760], xmm0

; 26   : }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?SetTargetHeight@CCamera@@QAEXM@Z ENDP			; CCamera::SetTargetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?GetTargetHeight@CCamera@@QAEMXZ
_TEXT	SEGMENT
?GetTargetHeight@CCamera@@QAEMXZ PROC			; CCamera::GetTargetHeight, COMDAT
; _this$ = ecx

; 20   : 	return m_fTarget_;

  00000	d9 81 f8 02 00
	00		 fld	 DWORD PTR [ecx+760]

; 21   : }

  00006	c3		 ret	 0
?GetTargetHeight@CCamera@@QAEMXZ ENDP			; CCamera::GetTargetHeight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?CalculateRoll@CCamera@@IAEXXZ
_TEXT	SEGMENT
_v2ViewXY$ = -8						; size = 8
?CalculateRoll@CCamera@@IAEXXZ PROC			; CCamera::CalculateRoll, COMDAT
; _this$ = ecx

; 591  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 592  : 	D3DXVECTOR2 v2ViewXY;
; 593  : 	v2ViewXY.x = m_v3View.x;
; 594  : 	v2ViewXY.y = m_v3View.y;
; 595  : 	D3DXVec2Normalize(&v2ViewXY, &v2ViewXY);

  00009	8d 45 f8	 lea	 eax, DWORD PTR _v2ViewXY$[ebp]
  0000c	50		 push	 eax
  0000d	50		 push	 eax
  0000e	f3 0f 10 46 54	 movss	 xmm0, DWORD PTR [esi+84]
  00013	f3 0f 11 45 f8	 movss	 DWORD PTR _v2ViewXY$[ebp], xmm0
  00018	f3 0f 10 46 58	 movss	 xmm0, DWORD PTR [esi+88]
  0001d	f3 0f 11 45 fc	 movss	 DWORD PTR _v2ViewXY$[ebp+4], xmm0
  00022	e8 00 00 00 00	 call	 _D3DXVec2Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  00027	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v2ViewXY$[ebp]
  0002c	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@00000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 597  : 	if (fDot >= 1)

  00034	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1647 :     return pV1->x * pV2->x + pV1->y * pV2->y;

  0003c	f3 0f 58 4d fc	 addss	 xmm1, DWORD PTR _v2ViewXY$[ebp+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 597  : 	if (fDot >= 1)

  00041	0f 2f c8	 comiss	 xmm1, xmm0
  00044	73 0c		 jae	 SHORT $LN4@CalculateR

; 598  : 	{
; 599  : 		fDot = 1;
; 600  : 	}
; 601  : 	else if (fDot <= -1)

  00046	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004e	f3 0f 5f c1	 maxss	 xmm0, xmm1
$LN4@CalculateR:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 628  :             return (float)acos(_X);

  00052	0f 5a c0	 cvtps2pd xmm0, xmm0
  00055	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1669 :     return pV1->x * pV2->y - pV1->y * pV2->x;

  0005a	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _v2ViewXY$[ebp+4]
  0005f	0f 57 db	 xorps	 xmm3, xmm3
  00062	f3 0f 10 4d f8	 movss	 xmm1, DWORD PTR _v2ViewXY$[ebp]
  00067	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 628  :             return (float)acos(_X);

  0006b	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1669 :     return pV1->x * pV2->y - pV1->y * pV2->x;

  0006f	f3 0f 5c ca	 subss	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 606  : 	fDot *= (180.0f / D3DX_PI);

  00073	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@42652ee0

; 607  : 	float fCross = D3DXVec2CCW (&v2ViewXY, &D3DXVECTOR2(0.0f, 1.0f));
; 608  : 	if ( 0 > fCross)

  0007b	0f 2f d9	 comiss	 xmm3, xmm1
  0007e	76 07		 jbe	 SHORT $LN17@CalculateR

; 609  : 	{
; 610  : 		fDot = -fDot;

  00080	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
$LN17@CalculateR:

; 611  : 	}
; 612  : 
; 613  : 	m_fRoll = fDot;
; 614  : 
; 615  : }

  00087	f3 0f 11 86 30
	01 00 00	 movss	 DWORD PTR [esi+304], xmm0
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?CalculateRoll@CCamera@@IAEXXZ ENDP			; CCamera::CalculateRoll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetViewMatrix@CCamera@@IAEXXZ
_TEXT	SEGMENT
_fRayRange$1$ = -56					; size = 4
$T5 = -56						; size = 4
$T6 = -56						; size = 4
_fRayRange$1$ = -56					; size = 4
$T7 = -56						; size = 4
_fRayRange$1$ = -56					; size = 4
_this$GSCopy$1$ = -56					; size = 4
tv5158 = -56						; size = 4
tv5130 = -56						; size = 4
tv5100 = -56						; size = 4
tv5069 = -56						; size = 4
tv5032 = -56						; size = 4
tv5157 = -52						; size = 4
tv5129 = -52						; size = 4
tv5099 = -52						; size = 4
tv5068 = -52						; size = 4
tv5030 = -52						; size = 4
tv5159 = -48						; size = 4
tv5131 = -48						; size = 4
tv5101 = -48						; size = 4
tv5070 = -48						; size = 4
tv5031 = -48						; size = 4
$T8 = -44						; size = 4
tv5153 = -40						; size = 4
_fDeterminantD3DMatView$ = -36				; size = 4
tv5322 = -32						; size = 16
$T9 = -16						; size = 12
$T10 = -16						; size = 12
$T11 = -16						; size = 12
$T12 = -16						; size = 12
$T13 = -16						; size = 12
$T14 = -16						; size = 12
$T15 = -16						; size = 12
$T16 = -16						; size = 12
$T17 = -16						; size = 12
$T18 = -16						; size = 12
$T19 = -16						; size = 12
$T20 = -16						; size = 12
$T21 = -16						; size = 12
$T22 = -16						; size = 12
$T23 = -16						; size = 12
$T24 = -16						; size = 12
$T25 = -16						; size = 12
$T26 = -16						; size = 12
$T27 = -16						; size = 12
_v3CenterRay$ = -16					; size = 12
$T28 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
?SetViewMatrix@CCamera@@IAEXXZ PROC			; CCamera::SetViewMatrix, COMDAT
; _this$ = ecx

; 284  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	83 ec 38	 sub	 esp, 56			; 00000038H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 34	 mov	 DWORD PTR __$ArrayPad$[esp+56], eax
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b f9		 mov	 edi, ecx

; 285  : 	m_v3View = m_v3Target - m_v3Eye;

  00018	8d 77 54	 lea	 esi, DWORD PTR [edi+84]
  0001b	89 7c 24 08	 mov	 DWORD PTR _this$GSCopy$1$[esp+64], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0001f	f3 0f 10 57 3c	 movss	 xmm2, DWORD PTR [edi+60]
  00024	f3 0f 10 4f 40	 movss	 xmm1, DWORD PTR [edi+64]
  00029	f3 0f 5c 4f 34	 subss	 xmm1, DWORD PTR [edi+52]
  0002e	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  00033	f3 0f 5c 57 30	 subss	 xmm2, DWORD PTR [edi+48]
  00038	f3 0f 5c 47 38	 subss	 xmm0, DWORD PTR [edi+56]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 285  : 	m_v3View = m_v3Target - m_v3Eye;

  0003d	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00040	f3 0f 11 44 24
	38		 movss	 DWORD PTR $T28[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 285  : 	m_v3View = m_v3Target - m_v3Eye;

  00046	8b 44 24 38	 mov	 eax, DWORD PTR $T28[esp+72]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  0004a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 285  : 	m_v3View = m_v3Target - m_v3Eye;

  00052	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  00056	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00059	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0005d	0f 57 c8	 xorps	 xmm1, xmm0
  00060	0f 11 4c 24 20	 movups	 XMMWORD PTR tv5322[esp+64], xmm1

; 304  :     x = fx;

  00065	f3 0f 11 4c 24
	30		 movss	 DWORD PTR _v3CenterRay$[esp+64], xmm1

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  0006b	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  00070	0f 57 c8	 xorps	 xmm1, xmm0
  00073	f3 0f 11 4c 24
	14		 movss	 DWORD PTR $T8[esp+64], xmm1

; 305  :     y = fy;

  00079	f3 0f 11 4c 24
	34		 movss	 DWORD PTR _v3CenterRay$[esp+68], xmm1

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  0007f	f3 0f 10 4e 08	 movss	 xmm1, DWORD PTR [esi+8]
  00084	0f 57 c8	 xorps	 xmm1, xmm0
  00087	f3 0f 11 4c 24
	18		 movss	 DWORD PTR tv5153[esp+64], xmm1

; 306  :     z = fz;

  0008d	f3 0f 11 4c 24
	38		 movss	 DWORD PTR _v3CenterRay$[esp+72], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 287  : 	CalculateRoll();

  00093	e8 00 00 00 00	 call	 ?CalculateRoll@CCamera@@IAEXXZ ; CCamera::CalculateRoll
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00098	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  0009d	f3 0f 10 16	 movss	 xmm2, DWORD PTR [esi]
  000a1	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  000a6	f3 0f 59 d2	 mulss	 xmm2, xmm2
  000aa	f3 0f 59 c9	 mulss	 xmm1, xmm1
  000ae	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000b2	f3 0f 58 d1	 addss	 xmm2, xmm1
  000b6	0f 57 c9	 xorps	 xmm1, xmm1
  000b9	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  000bd	0f 5a c2	 cvtps2pd xmm0, xmm2
  000c0	66 0f 2e c8	 ucomisd xmm1, xmm0
  000c4	77 06		 ja	 SHORT $LN274@SetViewMat
  000c6	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  000ca	eb 05		 jmp	 SHORT $LN275@SetViewMat
$LN274@SetViewMat:
  000cc	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN275@SetViewMat:
  000d1	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  000d5	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 298  : 	if (m_fDistance <= 0)

  000d8	0f 2f c8	 comiss	 xmm1, xmm0
  000db	f3 0f 11 87 34
	01 00 00	 movss	 DWORD PTR [edi+308], xmm0
  000e3	72 0a		 jb	 SHORT $LN2@SetViewMat

; 299  : 	{
; 300  : 		m_fDistance = 1.0f;

  000e5	c7 87 34 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [edi+308], 1065353216 ; 3f800000H
$LN2@SetViewMat:

; 301  : 	}
; 302  : 
; 303  : 	D3DXVec3Normalize(&m_v3View, &m_v3View);

  000ef	56		 push	 esi
  000f0	56		 push	 esi
  000f1	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  000f6	f3 0f 10 77 48	 movss	 xmm6, DWORD PTR [edi+72]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 305  : 	D3DXVec3Cross(&m_v3Cross, &m_v3Up, &m_v3View);

  000fb	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  000fe	f3 0f 10 7e 08	 movss	 xmm7, DWORD PTR [esi+8]

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  00103	0f 28 c6	 movaps	 xmm0, xmm6
  00106	f3 0f 10 5e 04	 movss	 xmm3, DWORD PTR [esi+4]
  0010b	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0010f	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00113	0f 28 d1	 movaps	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 306  : 	D3DXVec3Normalize(&m_v3Cross, &m_v3Cross);

  00116	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00117	f3 0f 59 7f 4c	 mulss	 xmm7, DWORD PTR [edi+76]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 306  : 	D3DXVec3Normalize(&m_v3Cross, &m_v3Cross);

  0011c	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0011d	f3 0f 59 57 50	 mulss	 xmm2, DWORD PTR [edi+80]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00122	f3 0f 59 4f 4c	 mulss	 xmm1, DWORD PTR [edi+76]
  00127	f3 0f 59 f3	 mulss	 xmm6, xmm3
  0012b	f3 0f 5c d0	 subss	 xmm2, xmm0
  0012f	f3 0f 59 5f 50	 mulss	 xmm3, DWORD PTR [edi+80]
  00134	f3 0f 5c f1	 subss	 xmm6, xmm1
  00138	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1940 : 
; 1941 :     *pOut = v;

  0013c	f3 0f 11 38	 movss	 DWORD PTR [eax], xmm7
  00140	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00145	f3 0f 11 70 08	 movss	 DWORD PTR [eax+8], xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 306  : 	D3DXVec3Normalize(&m_v3Cross, &m_v3Cross);

  0014a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1938 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

  0014f	f3 0f 10 2e	 movss	 xmm5, DWORD PTR [esi]
  00153	f3 0f 10 7f 68	 movss	 xmm7, DWORD PTR [edi+104]
  00158	0f 28 c5	 movaps	 xmm0, xmm5
  0015b	f3 0f 10 5f 64	 movss	 xmm3, DWORD PTR [edi+100]
  00160	f3 0f 10 4f 60	 movss	 xmm1, DWORD PTR [edi+96]
  00165	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00169	0f 28 d1	 movaps	 xmm2, xmm1
  0016c	f3 0f 59 7e 04	 mulss	 xmm7, DWORD PTR [esi+4]
  00171	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  00176	f3 0f 59 4e 04	 mulss	 xmm1, DWORD PTR [esi+4]
  0017b	f3 0f 59 eb	 mulss	 xmm5, xmm3
  0017f	f3 0f 5c d0	 subss	 xmm2, xmm0
  00183	f3 0f 59 5e 08	 mulss	 xmm3, DWORD PTR [esi+8]

; 1940 : 
; 1941 :     *pOut = v;

  00188	8d 77 48	 lea	 esi, DWORD PTR [edi+72]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 309  : 	D3DXVec3Normalize(&m_v3Up, &m_v3Up);

  0018b	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1939 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

  0018c	f3 0f 5c e9	 subss	 xmm5, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 309  : 	D3DXVec3Normalize(&m_v3Up, &m_v3Up);

  00190	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1937 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00191	f3 0f 5c fb	 subss	 xmm7, xmm3

; 1940 : 
; 1941 :     *pOut = v;

  00195	f3 0f 11 3e	 movss	 DWORD PTR [esi], xmm7
  00199	f3 0f 11 56 04	 movss	 DWORD PTR [esi+4], xmm2
  0019e	f3 0f 11 6e 08	 movss	 DWORD PTR [esi+8], xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 309  : 	D3DXVec3Normalize(&m_v3Up, &m_v3Up);

  001a3	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001a8	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  001ac	0f 57 d2	 xorps	 xmm2, xmm2
  001af	f3 0f 10 4e 04	 movss	 xmm1, DWORD PTR [esi+4]
  001b4	f3 0f 59 ca	 mulss	 xmm1, xmm2
  001b8	f3 0f 59 c2	 mulss	 xmm0, xmm2
  001bc	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 312  : 	if (m_fPitch >= 1)

  001c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  001c8	f3 0f 58 4e 08	 addss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 312  : 	if (m_fPitch >= 1)

  001cd	0f 2f c8	 comiss	 xmm1, xmm0
  001d0	73 13		 jae	 SHORT $LN5@SetViewMat

; 313  : 	{
; 314  : 		m_fPitch = 1;
; 315  : 	}
; 316  : 	else if (m_fPitch <= -1)

  001d2	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@bf800000
  001da	0f 28 c1	 movaps	 xmm0, xmm1
  001dd	0f 2f d1	 comiss	 xmm2, xmm1
  001e0	72 03		 jb	 SHORT $LN5@SetViewMat

; 317  : 	{
; 318  : 		m_fPitch = -1;

  001e2	0f 28 c2	 movaps	 xmm0, xmm2
$LN5@SetViewMat:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 628  :             return (float)acos(_X);

  001e5	0f 5a c0	 cvtps2pd xmm0, xmm0
  001e8	e8 00 00 00 00	 call	 __libm_sse2_acos_precise
  001ed	0f 57 c9	 xorps	 xmm1, xmm1
  001f0	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 322  : 	if (0 < m_v3View.z)

  001f4	f3 0f 10 47 5c	 movss	 xmm0, DWORD PTR [edi+92]
  001f9	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00200	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@42652ee0
  00208	f3 0f 11 8f 2c
	01 00 00	 movss	 DWORD PTR [edi+300], xmm1
  00210	76 0f		 jbe	 SHORT $LN6@SetViewMat

; 323  : 	{
; 324  : 		m_fPitch = -m_fPitch;

  00212	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00219	f3 0f 11 8f 2c
	01 00 00	 movss	 DWORD PTR [edi+300], xmm1
$LN6@SetViewMat:

; 325  : 	}
; 326  : 
; 327  : 	D3DXMatrixLookAtRH(&m_matView, &m_v3Eye, &m_v3Target, &m_v3Up);

  00221	8d 47 48	 lea	 eax, DWORD PTR [edi+72]
  00224	50		 push	 eax
  00225	8d 47 3c	 lea	 eax, DWORD PTR [edi+60]
  00228	50		 push	 eax
  00229	8d 47 30	 lea	 eax, DWORD PTR [edi+48]
  0022c	50		 push	 eax
  0022d	8d 77 6c	 lea	 esi, DWORD PTR [edi+108]
  00230	56		 push	 esi
  00231	e8 00 00 00 00	 call	 _D3DXMatrixLookAtRH@16

; 328  : 
; 329  : 	float fDeterminantD3DMatView = D3DXMatrixDeterminant(&m_matView);

  00236	56		 push	 esi
  00237	e8 00 00 00 00	 call	 _D3DXMatrixDeterminant@4

; 330  : 	D3DXMatrixInverse(&m_matInverseView, &fDeterminantD3DMatView, &m_matView);

  0023c	56		 push	 esi
  0023d	8d 44 24 20	 lea	 eax, DWORD PTR _fDeterminantD3DMatView$[esp+68]
  00241	81 c7 ac 00 00
	00		 add	 edi, 172		; 000000acH
  00247	50		 push	 eax
  00248	57		 push	 edi
  00249	d9 5c 24 28	 fstp	 DWORD PTR _fDeterminantD3DMatView$[esp+76]
  0024d	e8 00 00 00 00	 call	 _D3DXMatrixInverse@12

; 332  : 	m_matBillboard = m_matInverseView;

  00252	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00255	8b 44 24 08	 mov	 eax, DWORD PTR _this$GSCopy$1$[esp+64]
  00259	0f 11 80 ec 00
	00 00		 movups	 XMMWORD PTR [eax+236], xmm0
  00260	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  00264	0f 11 80 fc 00
	00 00		 movups	 XMMWORD PTR [eax+252], xmm0
  0026b	0f 10 47 20	 movups	 xmm0, XMMWORD PTR [edi+32]
  0026f	0f 11 80 0c 01
	00 00		 movups	 XMMWORD PTR [eax+268], xmm0
  00276	0f 10 47 30	 movups	 xmm0, XMMWORD PTR [edi+48]
  0027a	8b f8		 mov	 edi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  0027c	8d b7 40 02 00
	00		 lea	 esi, DWORD PTR [edi+576]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00282	56		 push	 esi
  00283	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 332  : 	m_matBillboard = m_matInverseView;

  00284	0f 11 87 1c 01
	00 00		 movups	 XMMWORD PTR [edi+284], xmm0

; 333  : 	m_matBillboard._41 = 0.0f;

  0028b	c7 87 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+284], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 22   : 		m_v3Start = v3Start;

  00295	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 334  : 	m_matBillboard._42 = 0.0f;

  0029a	c7 87 20 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+288], 0

; 335  : 	m_matBillboard._43 = 0.0f;

  002a4	c7 87 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+292], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 22   : 		m_v3Start = v3Start;

  002ae	66 0f d6 87 28
	02 00 00	 movq	 QWORD PTR [edi+552], xmm0
  002b6	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  002b9	89 87 30 02 00
	00		 mov	 DWORD PTR [edi+560], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 338  : 	m_ViewRay.SetDirection(v3CenterRay, m_fDistance);

  002bf	f3 0f 10 87 34
	01 00 00	 movss	 xmm0, DWORD PTR [edi+308]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  002c7	8b 44 24 40	 mov	 eax, DWORD PTR _v3CenterRay$[esp+80]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 338  : 	m_ViewRay.SetDirection(v3CenterRay, m_fDistance);

  002cb	f3 0f 11 44 24
	10		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  002d1	f3 0f 7e 44 24
	38		 movq	 xmm0, QWORD PTR _v3CenterRay$[esp+72]
  002d7	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  002db	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  002de	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  002e3	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR _fRayRange$1$[esp+64]
  002e9	f3 0f 11 97 4c
	02 00 00	 movss	 DWORD PTR [edi+588], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  002f1	0f 28 ca	 movaps	 xmm1, xmm2
  002f4	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  002f8	0f 28 c2	 movaps	 xmm0, xmm2
  002fb	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  00300	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00305	f3 0f 58 87 2c
	02 00 00	 addss	 xmm0, DWORD PTR [edi+556]
  0030d	f3 0f 58 8f 28
	02 00 00	 addss	 xmm1, DWORD PTR [edi+552]
  00315	f3 0f 58 97 30
	02 00 00	 addss	 xmm2, DWORD PTR [edi+560]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0031d	0f 14 c8	 unpcklps xmm1, xmm0
  00320	66 0f d6 8f 34
	02 00 00	 movq	 QWORD PTR [edi+564], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00328	f3 0f 11 54 24
	38		 movss	 DWORD PTR $T19[esp+72], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0032e	8b 44 24 38	 mov	 eax, DWORD PTR $T19[esp+72]
  00332	89 87 3c 02 00
	00		 mov	 DWORD PTR [edi+572], eax

; 22   : 		m_v3Start = v3Start;

  00338	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  0033d	66 0f d6 87 38
	01 00 00	 movq	 QWORD PTR [edi+312], xmm0
  00345	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00348	89 87 40 01 00
	00		 mov	 DWORD PTR [edi+320], eax
  0034e	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  00353	66 0f d6 87 60
	01 00 00	 movq	 QWORD PTR [edi+352], xmm0
  0035b	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  0035e	89 87 68 01 00
	00		 mov	 DWORD PTR [edi+360], eax
  00364	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  00369	66 0f d6 87 88
	01 00 00	 movq	 QWORD PTR [edi+392], xmm0
  00371	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00374	89 87 90 01 00
	00		 mov	 DWORD PTR [edi+400], eax
  0037a	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  0037f	66 0f d6 87 b0
	01 00 00	 movq	 QWORD PTR [edi+432], xmm0
  00387	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  0038a	89 87 b8 01 00
	00		 mov	 DWORD PTR [edi+440], eax
  00390	f3 0f 7e 47 30	 movq	 xmm0, QWORD PTR [edi+48]
  00395	66 0f d6 87 d8
	01 00 00	 movq	 QWORD PTR [edi+472], xmm0
  0039d	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  003a0	89 87 e0 01 00
	00		 mov	 DWORD PTR [edi+480], eax
  003a6	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  003ab	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  003b3	8d b7 50 01 00
	00		 lea	 esi, DWORD PTR [edi+336]

; 22   : 		m_v3Start = v3Start;

  003b9	66 0f d6 87 00
	02 00 00	 movq	 QWORD PTR [edi+512], xmm0
  003c1	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  003c4	89 87 08 02 00
	00		 mov	 DWORD PTR [edi+520], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 347  : 	m_kCameraBottomToTerrainRay.SetDirection(-m_v3Up, 2.0f * m_fTerrainCollisionRadius);

  003ca	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  003d2	f3 0f 10 57 48	 movss	 xmm2, DWORD PTR [edi+72]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 347  : 	m_kCameraBottomToTerrainRay.SetDirection(-m_v3Up, 2.0f * m_fTerrainCollisionRadius);

  003d7	f3 0f 58 c0	 addss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  003db	f3 0f 10 4f 4c	 movss	 xmm1, DWORD PTR [edi+76]
  003e0	0f 57 d3	 xorps	 xmm2, xmm3
  003e3	0f 57 cb	 xorps	 xmm1, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  003e6	0f 14 d1	 unpcklps xmm2, xmm1

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  003e9	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 347  : 	m_kCameraBottomToTerrainRay.SetDirection(-m_v3Up, 2.0f * m_fTerrainCollisionRadius);

  003ea	f3 0f 11 44 24
	0c		 movss	 DWORD PTR $T7[esp+68], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  003f0	f3 0f 10 47 50	 movss	 xmm0, DWORD PTR [edi+80]
  003f5	0f 57 c3	 xorps	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  003f8	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  003fc	f3 0f 11 44 24
	3c		 movss	 DWORD PTR $T27[esp+76], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00402	8b 44 24 3c	 mov	 eax, DWORD PTR $T27[esp+76]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00406	56		 push	 esi
  00407	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0040a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  0040f	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR $T7[esp+64]
  00415	f3 0f 11 97 5c
	01 00 00	 movss	 DWORD PTR [edi+348], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0041d	0f 28 ca	 movaps	 xmm1, xmm2
  00420	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  00424	0f 28 c2	 movaps	 xmm0, xmm2
  00427	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  0042c	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00431	8d b7 78 01 00
	00		 lea	 esi, DWORD PTR [edi+376]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00437	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00438	f3 0f 58 87 3c
	01 00 00	 addss	 xmm0, DWORD PTR [edi+316]
  00440	f3 0f 58 8f 38
	01 00 00	 addss	 xmm1, DWORD PTR [edi+312]
  00448	f3 0f 58 97 40
	01 00 00	 addss	 xmm2, DWORD PTR [edi+320]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00450	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00451	0f 14 c8	 unpcklps xmm1, xmm0
  00454	66 0f d6 8f 44
	01 00 00	 movq	 QWORD PTR [edi+324], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0045c	f3 0f 11 54 24
	40		 movss	 DWORD PTR $T18[esp+80], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00462	8b 44 24 40	 mov	 eax, DWORD PTR $T18[esp+80]
  00466	89 87 4c 01 00
	00		 mov	 DWORD PTR [edi+332], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 348  : 	m_kCameraFrontToTerrainRay.SetDirection(m_v3View, 4.0f * m_fTerrainCollisionRadius);

  0046c	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
  00474	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40800000
  0047c	f3 0f 11 44 24
	10		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00482	f3 0f 7e 47 54	 movq	 xmm0, QWORD PTR [edi+84]
  00487	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  0048b	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  0048e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00491	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  00496	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR _fRayRange$1$[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  0049c	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004a4	0f 28 ca	 movaps	 xmm1, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  004a7	f3 0f 11 97 84
	01 00 00	 movss	 DWORD PTR [edi+388], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004af	0f 28 c2	 movaps	 xmm0, xmm2
  004b2	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  004b6	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  004bb	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  004c0	8d b7 a0 01 00
	00		 lea	 esi, DWORD PTR [edi+416]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  004c6	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004c7	f3 0f 58 87 64
	01 00 00	 addss	 xmm0, DWORD PTR [edi+356]
  004cf	f3 0f 58 8f 60
	01 00 00	 addss	 xmm1, DWORD PTR [edi+352]
  004d7	f3 0f 58 97 68
	01 00 00	 addss	 xmm2, DWORD PTR [edi+360]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  004df	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  004e0	0f 14 c8	 unpcklps xmm1, xmm0
  004e3	66 0f d6 8f 6c
	01 00 00	 movq	 QWORD PTR [edi+364], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  004eb	f3 0f 11 54 24
	40		 movss	 DWORD PTR $T17[esp+80], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  004f1	8b 44 24 40	 mov	 eax, DWORD PTR $T17[esp+80]
  004f5	89 87 74 01 00
	00		 mov	 DWORD PTR [edi+372], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 349  : 	m_kCameraBackToTerrainRay.SetDirection(-m_v3View, m_fTerrainCollisionRadius);

  004fb	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00503	f3 0f 10 57 54	 movss	 xmm2, DWORD PTR [edi+84]
  00508	f3 0f 10 4f 58	 movss	 xmm1, DWORD PTR [edi+88]
  0050d	0f 57 d3	 xorps	 xmm2, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 349  : 	m_kCameraBackToTerrainRay.SetDirection(-m_v3View, m_fTerrainCollisionRadius);

  00510	f3 0f 11 44 24
	10		 movss	 DWORD PTR $T6[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  00516	0f 57 cb	 xorps	 xmm1, xmm3
  00519	f3 0f 10 47 5c	 movss	 xmm0, DWORD PTR [edi+92]
  0051e	0f 57 c3	 xorps	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00521	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00524	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T26[esp+80], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  0052a	8b 44 24 40	 mov	 eax, DWORD PTR $T26[esp+80]
  0052e	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  00532	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00535	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  0053a	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR $T6[esp+64]
  00540	f3 0f 11 97 ac
	01 00 00	 movss	 DWORD PTR [edi+428], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00548	0f 28 ca	 movaps	 xmm1, xmm2
  0054b	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  0054f	0f 28 c2	 movaps	 xmm0, xmm2
  00552	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  00557	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  0055c	8d b7 c8 01 00
	00		 lea	 esi, DWORD PTR [edi+456]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00562	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00563	f3 0f 58 87 8c
	01 00 00	 addss	 xmm0, DWORD PTR [edi+396]
  0056b	f3 0f 58 8f 88
	01 00 00	 addss	 xmm1, DWORD PTR [edi+392]
  00573	f3 0f 58 97 90
	01 00 00	 addss	 xmm2, DWORD PTR [edi+400]

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  0057b	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __xmm@80000000800000008000000080000000
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00583	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00584	0f 14 c8	 unpcklps xmm1, xmm0
  00587	66 0f d6 8f 94
	01 00 00	 movq	 QWORD PTR [edi+404], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0058f	f3 0f 11 54 24
	40		 movss	 DWORD PTR $T16[esp+80], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00595	8b 44 24 40	 mov	 eax, DWORD PTR $T16[esp+80]
  00599	89 87 9c 01 00
	00		 mov	 DWORD PTR [edi+412], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 350  : 	m_kCameraLeftToTerrainRay.SetDirection(-m_v3Cross, 3.0f * m_fTerrainCollisionRadius);

  0059f	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
  005a7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  005af	f3 0f 10 57 60	 movss	 xmm2, DWORD PTR [edi+96]
  005b4	f3 0f 10 4f 64	 movss	 xmm1, DWORD PTR [edi+100]
  005b9	0f 57 d3	 xorps	 xmm2, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 350  : 	m_kCameraLeftToTerrainRay.SetDirection(-m_v3Cross, 3.0f * m_fTerrainCollisionRadius);

  005bc	f3 0f 11 44 24
	10		 movss	 DWORD PTR $T5[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 373  :     return D3DXVECTOR3(-x, -y, -z);

  005c2	0f 57 cb	 xorps	 xmm1, xmm3
  005c5	f3 0f 10 47 68	 movss	 xmm0, DWORD PTR [edi+104]
  005ca	0f 57 c3	 xorps	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  005cd	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  005d0	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T25[esp+80], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  005d6	8b 44 24 40	 mov	 eax, DWORD PTR $T25[esp+80]
  005da	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  005de	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  005e1	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  005e6	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR $T5[esp+64]
  005ec	f3 0f 11 97 d4
	01 00 00	 movss	 DWORD PTR [edi+468], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  005f4	0f 28 ca	 movaps	 xmm1, xmm2
  005f7	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  005fb	0f 28 c2	 movaps	 xmm0, xmm2
  005fe	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  00603	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00608	8d b7 f0 01 00
	00		 lea	 esi, DWORD PTR [edi+496]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0060e	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0060f	f3 0f 58 87 b4
	01 00 00	 addss	 xmm0, DWORD PTR [edi+436]
  00617	f3 0f 58 8f b0
	01 00 00	 addss	 xmm1, DWORD PTR [edi+432]
  0061f	f3 0f 58 97 b8
	01 00 00	 addss	 xmm2, DWORD PTR [edi+440]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00627	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00628	0f 14 c8	 unpcklps xmm1, xmm0
  0062b	66 0f d6 8f bc
	01 00 00	 movq	 QWORD PTR [edi+444], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00633	f3 0f 11 54 24
	40		 movss	 DWORD PTR $T15[esp+80], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00639	8b 44 24 40	 mov	 eax, DWORD PTR $T15[esp+80]
  0063d	89 87 c4 01 00
	00		 mov	 DWORD PTR [edi+452], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 351  : 	m_kCameraRightToTerrainRay.SetDirection(m_v3Cross, 3.0f * m_fTerrainCollisionRadius);

  00643	f3 0f 10 87 f0
	02 00 00	 movss	 xmm0, DWORD PTR [edi+752]
  0064b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  00653	f3 0f 11 44 24
	10		 movss	 DWORD PTR _fRayRange$1$[esp+72], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00659	f3 0f 7e 47 60	 movq	 xmm0, QWORD PTR [edi+96]
  0065e	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00662	8b 47 68	 mov	 eax, DWORD PTR [edi+104]
  00665	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00668	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 30   : 		m_fRayRange = fRayRange;

  0066d	f3 0f 10 54 24
	08		 movss	 xmm2, DWORD PTR _fRayRange$1$[esp+64]
  00673	f3 0f 11 97 fc
	01 00 00	 movss	 DWORD PTR [edi+508], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0067b	0f 28 ca	 movaps	 xmm1, xmm2
  0067e	f3 0f 59 0e	 mulss	 xmm1, DWORD PTR [esi]
  00682	0f 28 c2	 movaps	 xmm0, xmm2
  00685	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  0068a	f3 0f 59 56 08	 mulss	 xmm2, DWORD PTR [esi+8]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0068f	f3 0f 58 8f d8
	01 00 00	 addss	 xmm1, DWORD PTR [edi+472]
  00697	f3 0f 58 87 dc
	01 00 00	 addss	 xmm0, DWORD PTR [edi+476]
  0069f	f3 0f 58 97 e0
	01 00 00	 addss	 xmm2, DWORD PTR [edi+480]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  006a7	0f 14 c8	 unpcklps xmm1, xmm0
  006aa	66 0f d6 8f e4
	01 00 00	 movq	 QWORD PTR [edi+484], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  006b2	f3 0f 11 54 24
	38		 movss	 DWORD PTR $T14[esp+72], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  006b8	8b 44 24 38	 mov	 eax, DWORD PTR $T14[esp+72]
  006bc	89 87 ec 01 00
	00		 mov	 DWORD PTR [edi+492], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 352  : 	m_kTargetToCameraBottomRay.SetDirection(v3CenterRay - m_fTerrainCollisionRadius * m_v3Up,

  006c2	f3 0f 10 9f f0
	02 00 00	 movss	 xmm3, DWORD PTR [edi+752]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006ca	0f 28 cb	 movaps	 xmm1, xmm3
  006cd	0f 28 c3	 movaps	 xmm0, xmm3
  006d0	f3 0f 59 4f 48	 mulss	 xmm1, DWORD PTR [edi+72]
  006d5	f3 0f 59 47 4c	 mulss	 xmm0, DWORD PTR [edi+76]
  006da	f3 0f 59 5f 50	 mulss	 xmm3, DWORD PTR [edi+80]

; 306  :     z = fz;

  006df	0f 10 64 24 20	 movups	 xmm4, XMMWORD PTR tv5322[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  006e4	8d b7 18 02 00
	00		 lea	 esi, DWORD PTR [edi+536]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  006ea	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  006eb	0f 28 d4	 movaps	 xmm2, xmm4
  006ee	f3 0f 5c d1	 subss	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  006f2	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  006f3	f3 0f 11 54 24
	10		 movss	 DWORD PTR tv5032[esp+72], xmm2

; 304  :     x = fx;

  006f9	f3 0f 10 54 24
	1c		 movss	 xmm2, DWORD PTR $T8[esp+72]
  006ff	f3 0f 5c d0	 subss	 xmm2, xmm0
  00703	f3 0f 11 54 24
	14		 movss	 DWORD PTR tv5030[esp+72], xmm2

; 305  :     y = fy;

  00709	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR tv5153[esp+72]
  0070f	f3 0f 5c d3	 subss	 xmm2, xmm3
  00713	f3 0f 11 54 24
	18		 movss	 DWORD PTR tv5031[esp+72], xmm2

; 306  :     z = fz;

  00719	0f 28 d4	 movaps	 xmm2, xmm4
  0071c	f3 0f 5c d1	 subss	 xmm2, xmm1

; 304  :     x = fx;

  00720	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR $T8[esp+72]
  00726	f3 0f 5c c8	 subss	 xmm1, xmm0

; 305  :     y = fy;

  0072a	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR tv5153[esp+72]
  00730	f3 0f 5c c3	 subss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00734	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00737	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T24[esp+80], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  0073d	8b 44 24 40	 mov	 eax, DWORD PTR $T24[esp+80]
  00741	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  00745	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00748	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  0074d	f3 0f 10 4c 24
	08		 movss	 xmm1, DWORD PTR tv5032[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00753	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv5030[esp+64]
  00759	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0075d	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00761	f3 0f 58 c8	 addss	 xmm1, xmm0
  00765	f3 0f 10 44 24
	10		 movss	 xmm0, DWORD PTR tv5031[esp+64]
  0076b	f3 0f 59 c0	 mulss	 xmm0, xmm0
  0076f	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00773	0f 5a c1	 cvtps2pd xmm0, xmm1
  00776	0f 57 c9	 xorps	 xmm1, xmm1
  00779	66 0f 2e c8	 ucomisd xmm1, xmm0
  0077d	77 06		 ja	 SHORT $LN276@SetViewMat
  0077f	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00783	eb 05		 jmp	 SHORT $LN277@SetViewMat
$LN276@SetViewMat:
  00785	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN277@SetViewMat:
  0078a	0f 57 c9	 xorps	 xmm1, xmm1
  0078d	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00791	0f 10 64 24 20	 movups	 xmm4, XMMWORD PTR tv5322[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  00796	f3 0f 11 8f 24
	02 00 00	 movss	 DWORD PTR [edi+548], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0079e	0f 28 d1	 movaps	 xmm2, xmm1
  007a1	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  007a5	0f 28 c1	 movaps	 xmm0, xmm1
  007a8	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  007ad	f3 0f 59 4e 08	 mulss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  007b2	8d b7 68 02 00
	00		 lea	 esi, DWORD PTR [edi+616]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  007b8	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007b9	f3 0f 58 97 00
	02 00 00	 addss	 xmm2, DWORD PTR [edi+512]
  007c1	f3 0f 58 87 04
	02 00 00	 addss	 xmm0, DWORD PTR [edi+516]
  007c9	f3 0f 58 8f 08
	02 00 00	 addss	 xmm1, DWORD PTR [edi+520]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  007d1	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  007d2	0f 14 d0	 unpcklps xmm2, xmm0
  007d5	66 0f d6 97 0c
	02 00 00	 movq	 QWORD PTR [edi+524], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  007dd	f3 0f 11 4c 24
	40		 movss	 DWORD PTR $T13[esp+80], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  007e3	8b 44 24 40	 mov	 eax, DWORD PTR $T13[esp+80]
  007e7	89 87 14 02 00
	00		 mov	 DWORD PTR [edi+532], eax

; 22   : 		m_v3Start = v3Start;

  007ed	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  007f2	66 0f d6 87 50
	02 00 00	 movq	 QWORD PTR [edi+592], xmm0
  007fa	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  007fd	89 87 58 02 00
	00		 mov	 DWORD PTR [edi+600], eax
  00803	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  00808	66 0f d6 87 78
	02 00 00	 movq	 QWORD PTR [edi+632], xmm0
  00810	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00813	89 87 80 02 00
	00		 mov	 DWORD PTR [edi+640], eax
  00819	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  0081e	66 0f d6 87 a0
	02 00 00	 movq	 QWORD PTR [edi+672], xmm0
  00826	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00829	89 87 a8 02 00
	00		 mov	 DWORD PTR [edi+680], eax
  0082f	f3 0f 7e 47 3c	 movq	 xmm0, QWORD PTR [edi+60]
  00834	66 0f d6 87 c8
	02 00 00	 movq	 QWORD PTR [edi+712], xmm0
  0083c	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  0083f	89 87 d0 02 00
	00		 mov	 DWORD PTR [edi+720], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 360  : 	m_kLeftObjectCollisionRay.SetDirection(v3CenterRay + m_fObjectCollisionRadius * m_v3Cross,

  00845	f3 0f 10 9f f4
	02 00 00	 movss	 xmm3, DWORD PTR [edi+756]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0084d	0f 28 cb	 movaps	 xmm1, xmm3
  00850	0f 28 c3	 movaps	 xmm0, xmm3
  00853	f3 0f 59 4f 60	 mulss	 xmm1, DWORD PTR [edi+96]
  00858	f3 0f 59 47 64	 mulss	 xmm0, DWORD PTR [edi+100]
  0085d	f3 0f 59 5f 68	 mulss	 xmm3, DWORD PTR [edi+104]

; 306  :     z = fz;

  00862	0f 28 d1	 movaps	 xmm2, xmm1
  00865	f3 0f 58 d4	 addss	 xmm2, xmm4
  00869	f3 0f 11 54 24
	18		 movss	 DWORD PTR tv5070[esp+72], xmm2

; 304  :     x = fx;

  0086f	0f 28 d0	 movaps	 xmm2, xmm0
  00872	f3 0f 58 54 24
	1c		 addss	 xmm2, DWORD PTR $T8[esp+72]
  00878	f3 0f 11 54 24
	14		 movss	 DWORD PTR tv5068[esp+72], xmm2

; 305  :     y = fy;

  0087e	0f 28 d3	 movaps	 xmm2, xmm3
  00881	f3 0f 58 54 24
	20		 addss	 xmm2, DWORD PTR tv5153[esp+72]
  00887	f3 0f 11 54 24
	10		 movss	 DWORD PTR tv5069[esp+72], xmm2

; 306  :     z = fz;

  0088d	0f 28 d4	 movaps	 xmm2, xmm4
  00890	f3 0f 58 d1	 addss	 xmm2, xmm1

; 304  :     x = fx;

  00894	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR $T8[esp+72]
  0089a	f3 0f 58 c8	 addss	 xmm1, xmm0

; 305  :     y = fy;

  0089e	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR tv5153[esp+72]
  008a4	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  008a8	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  008ab	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T23[esp+80], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  008b1	8b 44 24 40	 mov	 eax, DWORD PTR $T23[esp+80]
  008b5	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  008b9	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  008bc	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  008c1	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR tv5070[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  008c7	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv5068[esp+64]
  008cd	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  008d1	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  008d5	f3 0f 58 c8	 addss	 xmm1, xmm0
  008d9	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv5069[esp+64]
  008df	f3 0f 59 c0	 mulss	 xmm0, xmm0
  008e3	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  008e7	0f 5a c1	 cvtps2pd xmm0, xmm1
  008ea	0f 57 c9	 xorps	 xmm1, xmm1
  008ed	66 0f 2e c8	 ucomisd xmm1, xmm0
  008f1	77 06		 ja	 SHORT $LN278@SetViewMat
  008f3	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  008f7	eb 05		 jmp	 SHORT $LN279@SetViewMat
$LN278@SetViewMat:
  008f9	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN279@SetViewMat:
  008fe	0f 57 c9	 xorps	 xmm1, xmm1
  00901	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00905	0f 10 64 24 20	 movups	 xmm4, XMMWORD PTR tv5322[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  0090a	f3 0f 11 8f 74
	02 00 00	 movss	 DWORD PTR [edi+628], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00912	0f 28 d1	 movaps	 xmm2, xmm1
  00915	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  00919	0f 28 c1	 movaps	 xmm0, xmm1
  0091c	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  00921	f3 0f 59 4e 08	 mulss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00926	8d b7 b8 02 00
	00		 lea	 esi, DWORD PTR [edi+696]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  0092c	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0092d	f3 0f 58 97 50
	02 00 00	 addss	 xmm2, DWORD PTR [edi+592]
  00935	f3 0f 58 87 54
	02 00 00	 addss	 xmm0, DWORD PTR [edi+596]
  0093d	f3 0f 58 8f 58
	02 00 00	 addss	 xmm1, DWORD PTR [edi+600]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00945	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00946	0f 14 d0	 unpcklps xmm2, xmm0
  00949	66 0f d6 97 5c
	02 00 00	 movq	 QWORD PTR [edi+604], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00951	0f 28 d4	 movaps	 xmm2, xmm4
  00954	f3 0f 11 4c 24
	40		 movss	 DWORD PTR $T12[esp+80], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  0095a	8b 44 24 40	 mov	 eax, DWORD PTR $T12[esp+80]
  0095e	89 87 64 02 00
	00		 mov	 DWORD PTR [edi+612], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 362  : 	m_kRightObjectCollisionRay.SetDirection(v3CenterRay - m_fObjectCollisionRadius * m_v3Cross,

  00964	f3 0f 10 9f f4
	02 00 00	 movss	 xmm3, DWORD PTR [edi+756]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0096c	0f 28 cb	 movaps	 xmm1, xmm3
  0096f	0f 28 c3	 movaps	 xmm0, xmm3
  00972	f3 0f 59 4f 60	 mulss	 xmm1, DWORD PTR [edi+96]
  00977	f3 0f 59 47 64	 mulss	 xmm0, DWORD PTR [edi+100]
  0097c	f3 0f 59 5f 68	 mulss	 xmm3, DWORD PTR [edi+104]

; 306  :     z = fz;

  00981	f3 0f 5c d1	 subss	 xmm2, xmm1
  00985	f3 0f 11 54 24
	18		 movss	 DWORD PTR tv5101[esp+72], xmm2

; 304  :     x = fx;

  0098b	f3 0f 10 54 24
	1c		 movss	 xmm2, DWORD PTR $T8[esp+72]
  00991	f3 0f 5c d0	 subss	 xmm2, xmm0
  00995	f3 0f 11 54 24
	14		 movss	 DWORD PTR tv5099[esp+72], xmm2

; 305  :     y = fy;

  0099b	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR tv5153[esp+72]
  009a1	f3 0f 5c d3	 subss	 xmm2, xmm3
  009a5	f3 0f 11 54 24
	10		 movss	 DWORD PTR tv5100[esp+72], xmm2

; 306  :     z = fz;

  009ab	0f 28 d4	 movaps	 xmm2, xmm4
  009ae	f3 0f 5c d1	 subss	 xmm2, xmm1

; 304  :     x = fx;

  009b2	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR $T8[esp+72]
  009b8	f3 0f 5c c8	 subss	 xmm1, xmm0

; 305  :     y = fy;

  009bc	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR tv5153[esp+72]
  009c2	f3 0f 5c c3	 subss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  009c6	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  009c9	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T22[esp+80], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  009cf	8b 44 24 40	 mov	 eax, DWORD PTR $T22[esp+80]
  009d3	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  009d7	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  009da	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  009df	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR tv5101[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  009e5	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv5099[esp+64]
  009eb	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  009ef	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  009f3	f3 0f 58 c8	 addss	 xmm1, xmm0
  009f7	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv5100[esp+64]
  009fd	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00a01	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00a05	0f 5a c1	 cvtps2pd xmm0, xmm1
  00a08	0f 57 c9	 xorps	 xmm1, xmm1
  00a0b	66 0f 2e c8	 ucomisd xmm1, xmm0
  00a0f	77 06		 ja	 SHORT $LN280@SetViewMat
  00a11	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00a15	eb 05		 jmp	 SHORT $LN281@SetViewMat
$LN280@SetViewMat:
  00a17	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN281@SetViewMat:
  00a1c	0f 57 c9	 xorps	 xmm1, xmm1
  00a1f	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00a23	0f 10 64 24 20	 movups	 xmm4, XMMWORD PTR tv5322[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  00a28	f3 0f 11 8f c4
	02 00 00	 movss	 DWORD PTR [edi+708], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a30	0f 28 d1	 movaps	 xmm2, xmm1
  00a33	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  00a37	0f 28 c1	 movaps	 xmm0, xmm1
  00a3a	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  00a3f	f3 0f 59 4e 08	 mulss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00a44	8d b7 90 02 00
	00		 lea	 esi, DWORD PTR [edi+656]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00a4a	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a4b	f3 0f 58 97 a0
	02 00 00	 addss	 xmm2, DWORD PTR [edi+672]
  00a53	f3 0f 58 87 a4
	02 00 00	 addss	 xmm0, DWORD PTR [edi+676]
  00a5b	f3 0f 58 8f a8
	02 00 00	 addss	 xmm1, DWORD PTR [edi+680]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00a63	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00a64	0f 14 d0	 unpcklps xmm2, xmm0
  00a67	66 0f d6 97 ac
	02 00 00	 movq	 QWORD PTR [edi+684], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00a6f	0f 28 d4	 movaps	 xmm2, xmm4
  00a72	f3 0f 11 4c 24
	40		 movss	 DWORD PTR $T11[esp+80], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00a78	8b 44 24 40	 mov	 eax, DWORD PTR $T11[esp+80]
  00a7c	89 87 b4 02 00
	00		 mov	 DWORD PTR [edi+692], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 364  : 	m_kTopObjectCollisionRay.SetDirection(v3CenterRay + m_fObjectCollisionRadius * m_v3Up,

  00a82	f3 0f 10 9f f4
	02 00 00	 movss	 xmm3, DWORD PTR [edi+756]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a8a	0f 28 cb	 movaps	 xmm1, xmm3
  00a8d	0f 28 c3	 movaps	 xmm0, xmm3
  00a90	f3 0f 59 4f 48	 mulss	 xmm1, DWORD PTR [edi+72]
  00a95	f3 0f 59 47 4c	 mulss	 xmm0, DWORD PTR [edi+76]
  00a9a	f3 0f 59 5f 50	 mulss	 xmm3, DWORD PTR [edi+80]

; 306  :     z = fz;

  00a9f	f3 0f 58 d1	 addss	 xmm2, xmm1
  00aa3	f3 0f 11 54 24
	18		 movss	 DWORD PTR tv5131[esp+72], xmm2

; 304  :     x = fx;

  00aa9	f3 0f 10 54 24
	1c		 movss	 xmm2, DWORD PTR $T8[esp+72]
  00aaf	f3 0f 58 d0	 addss	 xmm2, xmm0
  00ab3	f3 0f 11 54 24
	14		 movss	 DWORD PTR tv5129[esp+72], xmm2

; 305  :     y = fy;

  00ab9	f3 0f 10 54 24
	20		 movss	 xmm2, DWORD PTR tv5153[esp+72]
  00abf	f3 0f 58 d3	 addss	 xmm2, xmm3
  00ac3	f3 0f 11 54 24
	10		 movss	 DWORD PTR tv5130[esp+72], xmm2

; 306  :     z = fz;

  00ac9	0f 28 d4	 movaps	 xmm2, xmm4
  00acc	f3 0f 58 d1	 addss	 xmm2, xmm1

; 304  :     x = fx;

  00ad0	f3 0f 10 4c 24
	1c		 movss	 xmm1, DWORD PTR $T8[esp+72]
  00ad6	f3 0f 58 c8	 addss	 xmm1, xmm0

; 305  :     y = fy;

  00ada	f3 0f 10 44 24
	20		 movss	 xmm0, DWORD PTR tv5153[esp+72]
  00ae0	f3 0f 58 c3	 addss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00ae4	0f 14 d1	 unpcklps xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00ae7	f3 0f 11 44 24
	40		 movss	 DWORD PTR $T21[esp+80], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00aed	8b 44 24 40	 mov	 eax, DWORD PTR $T21[esp+80]
  00af1	66 0f d6 16	 movq	 QWORD PTR [esi], xmm2
  00af5	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00af8	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  00afd	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR tv5131[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00b03	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv5129[esp+64]
  00b09	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00b0d	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00b11	f3 0f 58 c8	 addss	 xmm1, xmm0
  00b15	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv5130[esp+64]
  00b1b	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00b1f	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00b23	0f 5a c1	 cvtps2pd xmm0, xmm1
  00b26	0f 57 c9	 xorps	 xmm1, xmm1
  00b29	66 0f 2e c8	 ucomisd xmm1, xmm0
  00b2d	77 06		 ja	 SHORT $LN282@SetViewMat
  00b2f	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00b33	eb 05		 jmp	 SHORT $LN283@SetViewMat
$LN282@SetViewMat:
  00b35	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN283@SetViewMat:
  00b3a	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00b3d	f3 0f 10 6c 24
	14		 movss	 xmm5, DWORD PTR $T8[esp+64]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00b43	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00b47	0f 10 64 24 20	 movups	 xmm4, XMMWORD PTR tv5322[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  00b4c	f3 0f 11 8f 9c
	02 00 00	 movss	 DWORD PTR [edi+668], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b54	0f 28 d1	 movaps	 xmm2, xmm1
  00b57	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  00b5b	0f 28 c1	 movaps	 xmm0, xmm1
  00b5e	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]

; 306  :     z = fz;

  00b63	0f 28 dc	 movaps	 xmm3, xmm4

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00b66	f3 0f 59 4e 08	 mulss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00b6b	8d b7 e0 02 00
	00		 lea	 esi, DWORD PTR [edi+736]

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00b71	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00b72	f3 0f 58 97 78
	02 00 00	 addss	 xmm2, DWORD PTR [edi+632]
  00b7a	f3 0f 58 87 7c
	02 00 00	 addss	 xmm0, DWORD PTR [edi+636]
  00b82	f3 0f 58 8f 80
	02 00 00	 addss	 xmm1, DWORD PTR [edi+640]

; 305  :     y = fy;

  00b8a	f3 0f 10 74 24
	1c		 movss	 xmm6, DWORD PTR tv5153[esp+68]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00b90	56		 push	 esi

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00b91	0f 14 d0	 unpcklps xmm2, xmm0
  00b94	66 0f d6 97 84
	02 00 00	 movq	 QWORD PTR [edi+644], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00b9c	f3 0f 11 4c 24
	40		 movss	 DWORD PTR $T10[esp+80], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00ba2	8b 44 24 40	 mov	 eax, DWORD PTR $T10[esp+80]
  00ba6	89 87 8c 02 00
	00		 mov	 DWORD PTR [edi+652], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 366  : 	m_kBottomObjectCollisionRay.SetDirection(v3CenterRay - m_fObjectCollisionRadius * m_v3Up,

  00bac	f3 0f 10 97 f4
	02 00 00	 movss	 xmm2, DWORD PTR [edi+756]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00bb4	0f 28 c2	 movaps	 xmm0, xmm2
  00bb7	0f 28 ca	 movaps	 xmm1, xmm2
  00bba	f3 0f 59 47 48	 mulss	 xmm0, DWORD PTR [edi+72]
  00bbf	f3 0f 59 4f 4c	 mulss	 xmm1, DWORD PTR [edi+76]
  00bc4	f3 0f 59 57 50	 mulss	 xmm2, DWORD PTR [edi+80]

; 306  :     z = fz;

  00bc9	f3 0f 58 d8	 addss	 xmm3, xmm0
  00bcd	f3 0f 5c e0	 subss	 xmm4, xmm0
  00bd1	f3 0f 11 5c 24
	18		 movss	 DWORD PTR tv5159[esp+72], xmm3

; 304  :     x = fx;

  00bd7	0f 28 dd	 movaps	 xmm3, xmm5
  00bda	f3 0f 58 d9	 addss	 xmm3, xmm1
  00bde	f3 0f 5c e9	 subss	 xmm5, xmm1
  00be2	f3 0f 11 5c 24
	14		 movss	 DWORD PTR tv5157[esp+72], xmm3

; 305  :     y = fy;

  00be8	0f 28 de	 movaps	 xmm3, xmm6
  00beb	f3 0f 5c f2	 subss	 xmm6, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00bef	0f 14 e5	 unpcklps xmm4, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00bf2	f3 0f 58 da	 addss	 xmm3, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00bf6	66 0f d6 26	 movq	 QWORD PTR [esi], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00bfa	f3 0f 11 74 24
	40		 movss	 DWORD PTR $T20[esp+80], xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00c00	8b 44 24 40	 mov	 eax, DWORD PTR $T20[esp+80]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00c04	f3 0f 11 5c 24
	10		 movss	 DWORD PTR tv5158[esp+72], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 28   : 		m_v3Direction = v3Dir;

  00c0a	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00c0d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
  00c12	f3 0f 10 4c 24
	10		 movss	 xmm1, DWORD PTR tv5159[esp+64]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00c18	f3 0f 10 44 24
	0c		 movss	 xmm0, DWORD PTR tv5157[esp+64]
  00c1e	f3 0f 59 c0	 mulss	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 29   : 		D3DXVec3Normalize(&m_v3Direction, &m_v3Direction);

  00c22	f3 0f 59 c9	 mulss	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00c26	f3 0f 58 c8	 addss	 xmm1, xmm0
  00c2a	f3 0f 10 44 24
	08		 movss	 xmm0, DWORD PTR tv5158[esp+64]
  00c30	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00c34	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00c38	0f 5a c1	 cvtps2pd xmm0, xmm1
  00c3b	0f 57 c9	 xorps	 xmm1, xmm1
  00c3e	66 0f 2e c8	 ucomisd xmm1, xmm0
  00c42	77 06		 ja	 SHORT $LN284@SetViewMat
  00c44	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00c48	eb 05		 jmp	 SHORT $LN285@SetViewMat
$LN284@SetViewMat:
  00c4a	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN285@SetViewMat:
  00c4f	0f 57 c9	 xorps	 xmm1, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 368  : }

  00c52	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+64]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00c56	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 30   : 		m_fRayRange = fRayRange;

  00c5a	f3 0f 11 8f ec
	02 00 00	 movss	 DWORD PTR [edi+748], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00c62	0f 28 d1	 movaps	 xmm2, xmm1
  00c65	f3 0f 59 16	 mulss	 xmm2, DWORD PTR [esi]
  00c69	0f 28 c1	 movaps	 xmm0, xmm1
  00c6c	f3 0f 59 46 04	 mulss	 xmm0, DWORD PTR [esi+4]
  00c71	f3 0f 59 4e 08	 mulss	 xmm1, DWORD PTR [esi+8]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00c76	f3 0f 58 97 c8
	02 00 00	 addss	 xmm2, DWORD PTR [edi+712]
  00c7e	f3 0f 58 87 cc
	02 00 00	 addss	 xmm0, DWORD PTR [edi+716]
  00c86	f3 0f 58 8f d0
	02 00 00	 addss	 xmm1, DWORD PTR [edi+720]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00c8e	0f 14 d0	 unpcklps xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00c91	f3 0f 11 4c 24
	38		 movss	 DWORD PTR $T9[esp+72], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Ray.h

; 31   : 		m_v3End = m_v3Start + m_fRayRange * m_v3Direction;

  00c97	8b 44 24 38	 mov	 eax, DWORD PTR $T9[esp+72]
  00c9b	66 0f d6 97 d4
	02 00 00	 movq	 QWORD PTR [edi+724], xmm2
  00ca3	89 87 dc 02 00
	00		 mov	 DWORD PTR [edi+732], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 368  : }

  00ca9	5f		 pop	 edi
  00caa	5e		 pop	 esi
  00cab	33 cc		 xor	 ecx, esp
  00cad	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00cb2	8b e5		 mov	 esp, ebp
  00cb4	5d		 pop	 ebp
  00cb5	c3		 ret	 0
?SetViewMatrix@CCamera@@IAEXXZ ENDP			; CCamera::SetViewMatrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z
_TEXT	SEGMENT
_v3Point$GSCopy$1$ = -292				; size = 4
_this$GSCopy$1$ = -288					; size = 4
_matRotPitch$ = -284					; size = 64
_matRotRoll$ = -220					; size = 64
$T1 = -156						; size = 64
_matRot$ = -92						; size = 64
$T2 = -28						; size = 12
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_v3Point$ = 8						; size = 4
_fPitchDegree$ = 12					; size = 4
_fRollDegree$ = 16					; size = 4
?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z PROC ; CCamera::RotateEyeAroundPoint, COMDAT
; _this$ = ecx

; 541  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 24 01 00
	00		 sub	 esp, 292		; 00000124H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 542  : //	if (IsLock())
; 543  : //		return;
; 544  : 
; 545  : 	D3DXMATRIX matRot, matRotPitch, matRotRoll;
; 546  : 
; 547  : 	D3DXMatrixRotationAxis(&matRotPitch, &m_v3Cross, D3DXToRadian(fPitchDegree));

  00013	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fPitchDegree$[ebp]
  00018	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00020	56		 push	 esi
  00021	8b 75 08	 mov	 esi, DWORD PTR _v3Point$[ebp]
  00024	57		 push	 edi
  00025	8b f9		 mov	 edi, ecx
  00027	89 b5 dc fe ff
	ff		 mov	 DWORD PTR _v3Point$GSCopy$1$[ebp], esi
  0002d	51		 push	 ecx
  0002e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00033	89 bd e0 fe ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], edi
  00039	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
  0003c	50		 push	 eax
  0003d	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _D3DXMatrixRotationAxis@12

; 548  : 
; 549  : 	D3DXMatrixRotationZ(&matRotRoll, -D3DXToRadian(fRollDegree));

  00049	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _fRollDegree$[ebp]
  0004e	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  00054	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0005c	51		 push	 ecx
  0005d	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  0006f	8d 85 24 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  00075	50		 push	 eax
  00076	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  0007c	50		 push	 eax
  0007d	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 550  : 	matRot = matRotPitch * matRotRoll;

  00089	0f 10 85 64 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp]

; 551  : 
; 552  : 	D3DXVECTOR3 v3Temp = m_v3Eye - v3Point;

  00090	83 c7 30	 add	 edi, 48			; 00000030H

; 553  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  00093	8d 45 a4	 lea	 eax, DWORD PTR _matRot$[ebp]
  00096	50		 push	 eax
  00097	0f 11 45 a4	 movups	 XMMWORD PTR _matRot$[ebp], xmm0
  0009b	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  0009e	0f 10 85 74 ff
	ff ff		 movups	 xmm0, XMMWORD PTR $T1[ebp+16]
  000a5	50		 push	 eax
  000a6	57		 push	 edi
  000a7	0f 11 45 b4	 movups	 XMMWORD PTR _matRot$[ebp+16], xmm0
  000ab	0f 10 45 84	 movups	 xmm0, XMMWORD PTR $T1[ebp+32]
  000af	0f 11 45 c4	 movups	 XMMWORD PTR _matRot$[ebp+32], xmm0
  000b3	0f 10 45 94	 movups	 xmm0, XMMWORD PTR $T1[ebp+48]
  000b7	0f 11 45 d4	 movups	 XMMWORD PTR _matRot$[ebp+48], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000bb	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  000bf	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]

; 304  :     x = fx;

  000c3	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000c8	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  000cd	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 305  :     y = fy;

  000d2	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000d7	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  000dc	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 306  :     z = fz;

  000e1	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Temp$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 553  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  000e6	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  000eb	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 556  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  000ef	8d 45 a4	 lea	 eax, DWORD PTR _matRot$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  000f2	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 556  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  000f6	50		 push	 eax
  000f7	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  000fa	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  000fb	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0

; 329  :     y += v.y;

  000ff	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  00104	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  00109	f3 0f 11 47 04	 movss	 DWORD PTR [edi+4], xmm0

; 330  :     z += v.z;

  0010e	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00113	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 556  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  00118	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  0011e	83 c6 48	 add	 esi, 72			; 00000048H
  00121	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 330  :     z += v.z;

  00122	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00127	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _v3Temp$[ebp]
  0012c	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]

; 304  :     x = fx;

  00130	f3 0f 11 45 e4	 movss	 DWORD PTR $T2[ebp], xmm0

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00135	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _v3Temp$[ebp+4]
  0013a	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]

; 305  :     y = fy;

  0013f	f3 0f 11 45 e8	 movss	 DWORD PTR $T2[ebp+4], xmm0

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00144	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _v3Temp$[ebp+8]
  00149	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]

; 306  :     z = fz;

  0014e	f3 0f 11 45 ec	 movss	 DWORD PTR $T2[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 556  : 	D3DXVec3TransformCoord(&m_v3Up, &(v3Temp + m_v3Up), &matRot);

  00153	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00158	f3 0f 10 67 04	 movss	 xmm4, DWORD PTR [edi+4]
  0015d	f3 0f 10 6f 08	 movss	 xmm5, DWORD PTR [edi+8]
  00162	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  00166	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _v3Point$GSCopy$1$[ebp]
  0016c	8b f8		 mov	 edi, eax

; 337  :     x -= v.x;

  0016e	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00172	f3 0f 5c 0f	 subss	 xmm1, DWORD PTR [edi]
  00176	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  0017b	f3 0f 10 58 08	 movss	 xmm3, DWORD PTR [eax+8]
  00180	f3 0f 5c e2	 subss	 xmm4, xmm2
  00184	f3 0f 5c eb	 subss	 xmm5, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 560  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  00188	8d 45 a4	 lea	 eax, DWORD PTR _matRot$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 337  :     x -= v.x;

  0018b	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 560  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  0018f	50		 push	 eax
  00190	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  00193	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 337  :     x -= v.x;

  00194	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 338  :     y -= v.y;

  00198	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  0019d	f3 0f 5c c4	 subss	 xmm0, xmm4
  001a1	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 339  :     z -= v.z;

  001a6	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001ab	f3 0f 5c c5	 subss	 xmm0, xmm5
  001af	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 559  : 	v3Temp = m_v3Target - v3Point;

  001b4	8b b5 e0 fe ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  001ba	83 c6 3c	 add	 esi, 60			; 0000003cH

; 560  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  001bd	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001be	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  001c2	f3 0f 5c 07	 subss	 xmm0, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 559  : 	v3Temp = m_v3Target - v3Point;

  001c6	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001cb	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  001d0	f3 0f 5c 47 04	 subss	 xmm0, DWORD PTR [edi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 559  : 	v3Temp = m_v3Target - v3Point;

  001d5	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001da	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  001df	f3 0f 5c 47 08	 subss	 xmm0, DWORD PTR [edi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 559  : 	v3Temp = m_v3Target - v3Point;

  001e4	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Temp$[ebp+8], xmm0

; 560  : 	D3DXVec3TransformCoord(&m_v3Target, &v3Temp, &matRot);

  001e9	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  001ee	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  001f2	f3 0f 58 07	 addss	 xmm0, DWORD PTR [edi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 563  : 	SetViewMatrix();

  001f6	8b 8d e0 fe ff
	ff		 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  001fc	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 329  :     y += v.y;

  00200	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00205	f3 0f 58 47 04	 addss	 xmm0, DWORD PTR [edi+4]
  0020a	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 330  :     z += v.z;

  0020f	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00214	f3 0f 58 47 08	 addss	 xmm0, DWORD PTR [edi+8]
  00219	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 563  : 	SetViewMatrix();

  0021e	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix

; 564  : }

  00223	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00226	5f		 pop	 edi
  00227	33 cd		 xor	 ecx, ebp
  00229	5e		 pop	 esi
  0022a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0022f	8b e5		 mov	 esp, ebp
  00231	5d		 pop	 ebp
  00232	c2 0c 00	 ret	 12			; 0000000cH
?RotateEyeAroundPoint@CCamera@@QAEXABUD3DXVECTOR3@@MM@Z ENDP ; CCamera::RotateEyeAroundPoint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z
_TEXT	SEGMENT
$T1 = -284						; size = 12
_matRotPitch$ = -272					; size = 64
_matRotRoll$ = -208					; size = 64
_matRot$ = -144						; size = 64
$T2 = -80						; size = 64
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fPitchDegree$ = 8					; size = 4
_fRollDegree$ = 12					; size = 4
?RotateEyeAroundTarget@CCamera@@QAEXMM@Z PROC		; CCamera::RotateEyeAroundTarget, COMDAT
; _this$ = ecx

; 500  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 1c 01 00
	00		 sub	 esp, 284		; 0000011cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00013	57		 push	 edi
  00014	8b f9		 mov	 edi, ecx

; 501  : 	if (IsLock())

  00016	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0001b	84 c0		 test	 al, al
  0001d	0f 85 8d 01 00
	00		 jne	 $LN8@RotateEyeA

; 502  : 	{
; 503  : 		return;
; 504  : 	}
; 505  : 
; 506  : 	D3DXMATRIX matRot, matRotPitch, matRotRoll;
; 507  : 
; 508  : 	if (m_fPitch + fPitchDegree > 80.0f)

  00023	f3 0f 10 97 2c
	01 00 00	 movss	 xmm2, DWORD PTR [edi+300]
  0002b	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fPitchDegree$[ebp]
  00030	0f 28 ca	 movaps	 xmm1, xmm2
  00033	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@42a00000
  0003b	f3 0f 58 c8	 addss	 xmm1, xmm0
  0003f	0f 2f cb	 comiss	 xmm1, xmm3
  00042	77 0d		 ja	 SHORT $LN20@RotateEyeA

; 509  : 	{
; 510  : 		fPitchDegree = 80.0f - m_fPitch;
; 511  : 	}
; 512  : 	else if ( m_fPitch + fPitchDegree < -80.0f)

  00044	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@c2a00000
  0004c	0f 2f d9	 comiss	 xmm3, xmm1
  0004f	76 07		 jbe	 SHORT $LN5@RotateEyeA
$LN20@RotateEyeA:

; 513  : 	{
; 514  : 		fPitchDegree = -80.0f - m_fPitch;
; 515  : 	}
; 516  : 
; 517  : 	D3DXMatrixRotationAxis(&matRotPitch, &m_v3Cross, D3DXToRadian(fPitchDegree));

  00051	0f 28 c3	 movaps	 xmm0, xmm3
  00054	f3 0f 5c c2	 subss	 xmm0, xmm2
$LN5@RotateEyeA:
  00058	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  00060	8d 47 60	 lea	 eax, DWORD PTR [edi+96]
  00063	56		 push	 esi
  00064	51		 push	 ecx
  00065	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006a	50		 push	 eax
  0006b	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  00071	50		 push	 eax
  00072	e8 00 00 00 00	 call	 _D3DXMatrixRotationAxis@12

; 518  : 
; 519  : 	D3DXMatrixRotationZ(&matRotRoll, -D3DXToRadian(fRollDegree));

  00077	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _fRollDegree$[ebp]
  0007c	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  00082	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3c8efa35
  0008a	51		 push	 ecx
  0008b	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  00092	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _D3DXMatrixRotationZ@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 885  :     D3DXMatrixMultiply(&matT, this, &mat);

  0009d	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _matRotRoll$[ebp]
  000a3	50		 push	 eax
  000a4	8d 85 f0 fe ff
	ff		 lea	 eax, DWORD PTR _matRotPitch$[ebp]
  000aa	50		 push	 eax
  000ab	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 520  : 	matRot = matRotPitch * matRotRoll;

  000b4	0f 10 45 b0	 movups	 xmm0, XMMWORD PTR $T2[ebp]

; 521  : 
; 522  : 	D3DXVECTOR3 v3Temp = m_v3Eye - m_v3Target;

  000b8	8d 77 30	 lea	 esi, DWORD PTR [edi+48]

; 523  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  000bb	8d 85 70 ff ff
	ff		 lea	 eax, DWORD PTR _matRot$[ebp]
  000c1	0f 11 85 70 ff
	ff ff		 movups	 XMMWORD PTR _matRot$[ebp], xmm0
  000c8	50		 push	 eax
  000c9	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T2[ebp+16]
  000cd	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  000d0	50		 push	 eax
  000d1	0f 11 45 80	 movups	 XMMWORD PTR _matRot$[ebp+16], xmm0
  000d5	56		 push	 esi
  000d6	0f 10 45 d0	 movups	 xmm0, XMMWORD PTR $T2[ebp+32]
  000da	0f 11 45 90	 movups	 XMMWORD PTR _matRot$[ebp+32], xmm0
  000de	0f 10 45 e0	 movups	 xmm0, XMMWORD PTR $T2[ebp+48]
  000e2	0f 11 45 a0	 movups	 XMMWORD PTR _matRot$[ebp+48], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000e6	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  000ea	f3 0f 5c 47 3c	 subss	 xmm0, DWORD PTR [edi+60]

; 304  :     x = fx;

  000ef	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  000f4	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  000f9	f3 0f 5c 47 40	 subss	 xmm0, DWORD PTR [edi+64]

; 305  :     y = fy;

  000fe	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00103	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00108	f3 0f 5c 47 44	 subss	 xmm0, DWORD PTR [edi+68]

; 306  :     z = fz;

  0010d	f3 0f 11 45 f8	 movss	 DWORD PTR _v3Temp$[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 523  : 	D3DXVec3TransformCoord(&m_v3Eye, &v3Temp, &matRot);

  00112	e8 00 00 00 00	 call	 _D3DXVec3TransformCoord@12
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  00117	f3 0f 10 47 3c	 movss	 xmm0, DWORD PTR [edi+60]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 526  : 	SetUp(D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  0011c	8d 85 e4 fe ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  00122	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 526  : 	SetUp(D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00126	50		 push	 eax
  00127	8b cf		 mov	 ecx, edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00129	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0

; 305  :     y = fy;

  00133	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp+4], 0

; 306  :     z = fz;

  0013d	c7 85 ec fe ff
	ff 00 00 80 3f	 mov	 DWORD PTR $T1[ebp+8], 1065353216 ; 3f800000H

; 328  :     x += v.x;

  00147	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0

; 329  :     y += v.y;

  0014b	f3 0f 10 47 40	 movss	 xmm0, DWORD PTR [edi+64]
  00150	f3 0f 58 46 04	 addss	 xmm0, DWORD PTR [esi+4]
  00155	f3 0f 11 46 04	 movss	 DWORD PTR [esi+4], xmm0

; 330  :     z += v.z;

  0015a	f3 0f 10 47 44	 movss	 xmm0, DWORD PTR [edi+68]
  0015f	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  00164	f3 0f 11 46 08	 movss	 DWORD PTR [esi+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 526  : 	SetUp(D3DXVECTOR3(0.0f, 0.0f, 1.0f));

  00169	e8 00 00 00 00	 call	 ?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z ; CCamera::SetUp

; 527  : 
; 528  : 	m_fRoll += fRollDegree;

  0016e	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fRollDegree$[ebp]
  00173	f3 0f 58 8f 30
	01 00 00	 addss	 xmm1, DWORD PTR [edi+304]

; 529  : 
; 530  : 	if (m_fRoll > 360.0f)

  0017b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@43b40000
  00183	5e		 pop	 esi
  00184	0f 2f ca	 comiss	 xmm1, xmm2
  00187	f3 0f 11 8f 30
	01 00 00	 movss	 DWORD PTR [edi+304], xmm1
  0018f	76 06		 jbe	 SHORT $LN6@RotateEyeA

; 531  : 	{
; 532  : 		m_fRoll -= 360.0f;

  00191	f3 0f 5c ca	 subss	 xmm1, xmm2

; 533  : 	}

  00195	eb 11		 jmp	 SHORT $LN21@RotateEyeA
$LN6@RotateEyeA:

; 534  : 	else if (m_fRoll < -360.0f)

  00197	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c3b40000
  0019f	0f 2f c1	 comiss	 xmm0, xmm1
  001a2	76 0c		 jbe	 SHORT $LN8@RotateEyeA

; 535  : 	{
; 536  : 		m_fRoll += 360.0f;

  001a4	f3 0f 58 ca	 addss	 xmm1, xmm2
$LN21@RotateEyeA:

; 537  : 	}
; 538  : }

  001a8	f3 0f 11 8f 30
	01 00 00	 movss	 DWORD PTR [edi+304], xmm1
$LN8@RotateEyeA:
  001b0	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001b3	33 cd		 xor	 ecx, ebp
  001b5	5f		 pop	 edi
  001b6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c2 08 00	 ret	 8
?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ENDP		; CCamera::RotateEyeAroundTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?MoveVertical@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?MoveVertical@CCamera@@QAEXM@Z PROC			; CCamera::MoveVertical, COMDAT
; _this$ = ecx

; 475  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 476  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 23		 jne	 SHORT $LN1@MoveVertic

; 477  : 	{
; 478  : 		return;
; 479  : 	}
; 480  : 
; 481  : 	m_v3Eye.z += fDistance;

  0000f	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fDistance$[ebp]

; 482  : 	m_v3Target.z += fDistance;
; 483  : 
; 484  : 	SetViewMatrix();

  00014	8b ce		 mov	 ecx, esi
  00016	0f 28 c1	 movaps	 xmm0, xmm1
  00019	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  0001e	f3 0f 58 4e 44	 addss	 xmm1, DWORD PTR [esi+68]
  00023	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
  00028	f3 0f 11 4e 44	 movss	 DWORD PTR [esi+68], xmm1
  0002d	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveVertic:
  00032	5e		 pop	 esi

; 485  : }

  00033	5d		 pop	 ebp
  00034	c2 04 00	 ret	 4
?MoveVertical@CCamera@@QAEXM@Z ENDP			; CCamera::MoveVertical
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?MoveFront@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveFront@CCamera@@QAEXM@Z PROC			; CCamera::MoveFront, COMDAT
; _this$ = ecx

; 459  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 460  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	0f 85 90 00 00
	00		 jne	 $LN1@MoveFront
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0002a	f3 0f 10 46 54	 movss	 xmm0, DWORD PTR [esi+84]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 466  : 	D3DXVec3Normalize(&v3Temp, &v3Temp);

  0002f	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00032	f3 0f 11 45 f0	 movss	 DWORD PTR _v3Temp$[ebp], xmm0

; 305  :     y = fy;

  00037	f3 0f 10 46 58	 movss	 xmm0, DWORD PTR [esi+88]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 466  : 	D3DXVec3Normalize(&v3Temp, &v3Temp);

  0003c	50		 push	 eax
  0003d	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  0003e	f3 0f 11 45 f4	 movss	 DWORD PTR _v3Temp$[ebp+4], xmm0

; 306  :     z = fz;

  00043	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _v3Temp$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 466  : 	D3DXVec3Normalize(&v3Temp, &v3Temp);

  0004a	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0004f	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 471  : 	SetViewMatrix();

  00054	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00056	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+4]
  0005b	0f 28 c8	 movaps	 xmm1, xmm0
  0005e	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _v3Temp$[ebp]
  00063	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+8]
  00068	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0006c	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 328  :     x += v.x;

  00070	0f 28 c1	 movaps	 xmm0, xmm1
  00073	f3 0f 58 46 30	 addss	 xmm0, DWORD PTR [esi+48]
  00078	f3 0f 58 4e 3c	 addss	 xmm1, DWORD PTR [esi+60]
  0007d	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 329  :     y += v.y;

  00082	0f 28 c2	 movaps	 xmm0, xmm2
  00085	f3 0f 58 46 34	 addss	 xmm0, DWORD PTR [esi+52]
  0008a	f3 0f 58 56 40	 addss	 xmm2, DWORD PTR [esi+64]
  0008f	f3 0f 11 4e 3c	 movss	 DWORD PTR [esi+60], xmm1
  00094	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 330  :     z += v.z;

  00099	0f 28 c3	 movaps	 xmm0, xmm3
  0009c	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  000a1	f3 0f 58 5e 44	 addss	 xmm3, DWORD PTR [esi+68]
  000a6	f3 0f 11 56 40	 movss	 DWORD PTR [esi+64], xmm2
  000ab	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
  000b0	f3 0f 11 5e 44	 movss	 DWORD PTR [esi+68], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 471  : 	SetViewMatrix();

  000b5	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveFront:

; 472  : }

  000ba	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bd	33 cd		 xor	 ecx, ebp
  000bf	5e		 pop	 esi
  000c0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c5	8b e5		 mov	 esp, ebp
  000c7	5d		 pop	 ebp
  000c8	c2 04 00	 ret	 4
?MoveFront@CCamera@@QAEXM@Z ENDP			; CCamera::MoveFront
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?MoveLateral@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?MoveLateral@CCamera@@QAEXM@Z PROC			; CCamera::MoveLateral, COMDAT
; _this$ = ecx

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 450  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 12		 jne	 SHORT $LN1@MoveLatera

; 451  : 	{
; 452  : 		return;
; 453  : 	}
; 454  : 
; 455  : 	MoveAlongCross(fDistance);

  0000f	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00014	51		 push	 ecx
  00015	8b ce		 mov	 ecx, esi
  00017	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0001c	e8 00 00 00 00	 call	 ?MoveAlongCross@CCamera@@QAEXM@Z ; CCamera::MoveAlongCross
$LN1@MoveLatera:
  00021	5e		 pop	 esi

; 456  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?MoveLateral@CCamera@@QAEXM@Z ENDP			; CCamera::MoveLateral
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?MoveAlongUp@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveAlongUp@CCamera@@QAEXM@Z PROC			; CCamera::MoveAlongUp, COMDAT
; _this$ = ecx

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 436  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	75 79		 jne	 SHORT $LN1@MoveAlongU

; 437  : 	{
; 438  : 		return;
; 439  : 	}
; 440  : 
; 441  : 	D3DXVECTOR3 v3Temp ;
; 442  : 	D3DXVec3Normalize(&v3Temp, &m_v3Up);

  00026	8d 46 48	 lea	 eax, DWORD PTR [esi+72]
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00033	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 445  : 	SetViewMatrix();

  00038	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0003a	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _v3Temp$[ebp]
  0003f	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+4]
  00044	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+8]
  00049	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0004d	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00051	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 328  :     x += v.x;

  00055	0f 28 c1	 movaps	 xmm0, xmm1
  00058	f3 0f 58 46 3c	 addss	 xmm0, DWORD PTR [esi+60]
  0005d	f3 0f 58 4e 30	 addss	 xmm1, DWORD PTR [esi+48]
  00062	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 329  :     y += v.y;

  00067	0f 28 c2	 movaps	 xmm0, xmm2
  0006a	f3 0f 58 46 40	 addss	 xmm0, DWORD PTR [esi+64]
  0006f	f3 0f 58 56 34	 addss	 xmm2, DWORD PTR [esi+52]
  00074	f3 0f 11 4e 30	 movss	 DWORD PTR [esi+48], xmm1
  00079	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0

; 330  :     z += v.z;

  0007e	0f 28 c3	 movaps	 xmm0, xmm3
  00081	f3 0f 58 46 44	 addss	 xmm0, DWORD PTR [esi+68]
  00086	f3 0f 58 5e 38	 addss	 xmm3, DWORD PTR [esi+56]
  0008b	f3 0f 11 56 34	 movss	 DWORD PTR [esi+52], xmm2
  00090	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
  00095	f3 0f 11 5e 38	 movss	 DWORD PTR [esi+56], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 445  : 	SetViewMatrix();

  0009a	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveAlongU:

; 446  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	5e		 pop	 esi
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?MoveAlongUp@CCamera@@QAEXM@Z ENDP			; CCamera::MoveAlongUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?MoveAlongCross@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveAlongCross@CCamera@@QAEXM@Z PROC			; CCamera::MoveAlongCross, COMDAT
; _this$ = ecx

; 419  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 420  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	75 79		 jne	 SHORT $LN1@MoveAlongC

; 421  : 	{
; 422  : 		return;
; 423  : 	}
; 424  : 
; 425  : 	D3DXVECTOR3 v3Temp;
; 426  : 	D3DXVec3Normalize(&v3Temp, &m_v3Cross);

  00026	8d 46 60	 lea	 eax, DWORD PTR [esi+96]
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00033	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 431  : 	SetViewMatrix();

  00038	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0003a	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _v3Temp$[ebp]
  0003f	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+4]
  00044	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+8]
  00049	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0004d	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00051	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 328  :     x += v.x;

  00055	0f 28 c1	 movaps	 xmm0, xmm1
  00058	f3 0f 58 46 30	 addss	 xmm0, DWORD PTR [esi+48]
  0005d	f3 0f 58 4e 3c	 addss	 xmm1, DWORD PTR [esi+60]
  00062	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 329  :     y += v.y;

  00067	0f 28 c2	 movaps	 xmm0, xmm2
  0006a	f3 0f 58 46 34	 addss	 xmm0, DWORD PTR [esi+52]
  0006f	f3 0f 58 56 40	 addss	 xmm2, DWORD PTR [esi+64]
  00074	f3 0f 11 4e 3c	 movss	 DWORD PTR [esi+60], xmm1
  00079	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 330  :     z += v.z;

  0007e	0f 28 c3	 movaps	 xmm0, xmm3
  00081	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  00086	f3 0f 58 5e 44	 addss	 xmm3, DWORD PTR [esi+68]
  0008b	f3 0f 11 56 40	 movss	 DWORD PTR [esi+64], xmm2
  00090	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
  00095	f3 0f 11 5e 44	 movss	 DWORD PTR [esi+68], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 431  : 	SetViewMatrix();

  0009a	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveAlongC:

; 432  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	5e		 pop	 esi
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?MoveAlongCross@CCamera@@QAEXM@Z ENDP			; CCamera::MoveAlongCross
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?MoveAlongView@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$GSCopy$1$ = -20				; size = 4
_v3Temp$ = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
_fDistance$ = 8						; size = 4
?MoveAlongView@CCamera@@QAEXM@Z PROC			; CCamera::MoveAlongView, COMDAT
; _this$ = ecx

; 403  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx
  00018	f3 0f 11 45 ec	 movss	 DWORD PTR _fDistance$GSCopy$1$[ebp], xmm0

; 404  : 	if (IsLock())

  0001d	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00022	84 c0		 test	 al, al
  00024	75 79		 jne	 SHORT $LN1@MoveAlongV

; 405  : 	{
; 406  : 		return;
; 407  : 	}
; 408  : 
; 409  : 	D3DXVECTOR3 v3Temp;
; 410  : 	D3DXVec3Normalize(&v3Temp, &m_v3View);

  00026	8d 46 54	 lea	 eax, DWORD PTR [esi+84]
  00029	50		 push	 eax
  0002a	8d 45 f0	 lea	 eax, DWORD PTR _v3Temp$[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  00033	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _fDistance$GSCopy$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 415  : 	SetViewMatrix();

  00038	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 393  :     return D3DXVECTOR3(x * f, y * f, z * f);

  0003a	f3 0f 10 4d f0	 movss	 xmm1, DWORD PTR _v3Temp$[ebp]
  0003f	f3 0f 10 55 f4	 movss	 xmm2, DWORD PTR _v3Temp$[ebp+4]
  00044	f3 0f 10 5d f8	 movss	 xmm3, DWORD PTR _v3Temp$[ebp+8]
  00049	f3 0f 59 c8	 mulss	 xmm1, xmm0
  0004d	f3 0f 59 d0	 mulss	 xmm2, xmm0
  00051	f3 0f 59 d8	 mulss	 xmm3, xmm0

; 328  :     x += v.x;

  00055	0f 28 c1	 movaps	 xmm0, xmm1
  00058	f3 0f 58 46 30	 addss	 xmm0, DWORD PTR [esi+48]
  0005d	f3 0f 58 4e 3c	 addss	 xmm1, DWORD PTR [esi+60]
  00062	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 329  :     y += v.y;

  00067	0f 28 c2	 movaps	 xmm0, xmm2
  0006a	f3 0f 58 46 34	 addss	 xmm0, DWORD PTR [esi+52]
  0006f	f3 0f 58 56 40	 addss	 xmm2, DWORD PTR [esi+64]
  00074	f3 0f 11 4e 3c	 movss	 DWORD PTR [esi+60], xmm1
  00079	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 330  :     z += v.z;

  0007e	0f 28 c3	 movaps	 xmm0, xmm3
  00081	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  00086	f3 0f 58 5e 44	 addss	 xmm3, DWORD PTR [esi+68]
  0008b	f3 0f 11 56 40	 movss	 DWORD PTR [esi+64], xmm2
  00090	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0
  00095	f3 0f 11 5e 44	 movss	 DWORD PTR [esi+68], xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 415  : 	SetViewMatrix();

  0009a	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@MoveAlongV:

; 416  : }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	33 cd		 xor	 ecx, ebp
  000a4	5e		 pop	 esi
  000a5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 04 00	 ret	 4
?MoveAlongView@CCamera@@QAEXM@Z ENDP			; CCamera::MoveAlongView
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Zoom@CCamera@@QAEXM@Z
_TEXT	SEGMENT
$T1 = -12						; size = 12
_fRatio$ = 8						; size = 4
?Zoom@CCamera@@QAEXM@Z PROC				; CCamera::Zoom, COMDAT
; _this$ = ecx

; 384  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 385  : 	if (IsLock())

  00009	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000e	84 c0		 test	 al, al
  00010	75 65		 jne	 SHORT $LN1@Zoom

; 386  : 	{
; 387  : 		return;
; 388  : 	}
; 389  : 
; 390  : 	if (fRatio == 1.0f)

  00012	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _fRatio$[ebp]
  00017	0f 2e 2d 00 00
	00 00		 ucomiss xmm5, DWORD PTR __real@3f800000
  0001e	9f		 lahf
  0001f	f6 c4 44	 test	 ah, 68			; 00000044H
  00022	7b 53		 jnp	 SHORT $LN1@Zoom
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00024	f3 0f 10 66 30	 movss	 xmm4, DWORD PTR [esi+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 399  : 	SetViewMatrix();

  00029	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0002b	f3 0f 5c 66 3c	 subss	 xmm4, DWORD PTR [esi+60]
  00030	f3 0f 10 56 34	 movss	 xmm2, DWORD PTR [esi+52]
  00035	f3 0f 5c 56 40	 subss	 xmm2, DWORD PTR [esi+64]
  0003a	f3 0f 10 46 38	 movss	 xmm0, DWORD PTR [esi+56]
  0003f	f3 0f 5c 46 44	 subss	 xmm0, DWORD PTR [esi+68]

; 306  :     z = fz;

  00044	f3 0f 59 e5	 mulss	 xmm4, xmm5

; 346  :     x *= f;

  00048	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0004c	f3 0f 58 66 3c	 addss	 xmm4, DWORD PTR [esi+60]

; 347  :     y *= f;

  00051	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00055	f3 0f 58 56 40	 addss	 xmm2, DWORD PTR [esi+64]
  0005a	f3 0f 58 46 44	 addss	 xmm0, DWORD PTR [esi+68]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 397  : 	m_v3Eye = v3Temp + m_v3Target;

  0005f	0f 14 e2	 unpcklps xmm4, xmm2
  00062	66 0f d6 66 30	 movq	 QWORD PTR [esi+48], xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00067	f3 0f 11 45 fc	 movss	 DWORD PTR $T1[ebp+8], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 397  : 	m_v3Eye = v3Temp + m_v3Target;

  0006c	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp+8]
  0006f	89 46 38	 mov	 DWORD PTR [esi+56], eax

; 399  : 	SetViewMatrix();

  00072	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@Zoom:
  00077	5e		 pop	 esi

; 400  : }

  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
?Zoom@CCamera@@QAEXM@Z ENDP				; CCamera::Zoom
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Displacement$ = 8					; size = 4
?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::Move, COMDAT
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 372  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 62		 jne	 SHORT $LN1@Move
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Displacement$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 380  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 328  :     x += v.x;

  00014	f3 0f 10 46 30	 movss	 xmm0, DWORD PTR [esi+48]
  00019	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0001d	f3 0f 11 46 30	 movss	 DWORD PTR [esi+48], xmm0

; 329  :     y += v.y;

  00022	f3 0f 10 46 34	 movss	 xmm0, DWORD PTR [esi+52]
  00027	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0002c	f3 0f 11 46 34	 movss	 DWORD PTR [esi+52], xmm0

; 330  :     z += v.z;

  00031	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00036	f3 0f 58 46 38	 addss	 xmm0, DWORD PTR [esi+56]
  0003b	f3 0f 11 46 38	 movss	 DWORD PTR [esi+56], xmm0

; 328  :     x += v.x;

  00040	f3 0f 10 46 3c	 movss	 xmm0, DWORD PTR [esi+60]
  00045	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00049	f3 0f 11 46 3c	 movss	 DWORD PTR [esi+60], xmm0

; 329  :     y += v.y;

  0004e	f3 0f 10 46 40	 movss	 xmm0, DWORD PTR [esi+64]
  00053	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  00058	f3 0f 11 46 40	 movss	 DWORD PTR [esi+64], xmm0

; 330  :     z += v.z;

  0005d	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00062	f3 0f 58 46 44	 addss	 xmm0, DWORD PTR [esi+68]
  00067	f3 0f 11 46 44	 movss	 DWORD PTR [esi+68], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 380  : 	SetViewMatrix();

  0006c	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@Move:
  00071	5e		 pop	 esi

; 381  : }

  00072	5d		 pop	 ebp
  00073	c2 04 00	 ret	 4
?Move@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::Move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetDistance@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fdistance$ = 8						; size = 4
?SetDistance@CCamera@@QAEXM@Z PROC			; CCamera::SetDistance, COMDAT
; _this$ = ecx

; 583  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 584  : //	if (IsLock())
; 585  : //		return;
; 586  : 
; 587  : 	Zoom(fdistance / m_fDistance);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fdistance$[ebp]
  00008	f3 0f 5e 81 34
	01 00 00	 divss	 xmm0, DWORD PTR [ecx+308]
  00010	51		 push	 ecx
  00011	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00016	e8 00 00 00 00	 call	 ?Zoom@CCamera@@QAEXM@Z	; CCamera::Zoom

; 588  : }

  0001b	5d		 pop	 ebp
  0001c	c2 04 00	 ret	 4
?SetDistance@CCamera@@QAEXM@Z ENDP			; CCamera::SetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Roll@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fRollDelta$ = 8					; size = 4
?Roll@CCamera@@QAEXM@Z PROC				; CCamera::Roll, COMDAT
; _this$ = ecx

; 575  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 576  : //	if (IsLock())
; 577  : //		return;
; 578  : 
; 579  : 	RotateEyeAroundTarget(0.0f, fRollDelta);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRollDelta$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00011	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00018	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget

; 580  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?Roll@CCamera@@QAEXM@Z ENDP				; CCamera::Roll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Pitch@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fPitchDelta$ = 8					; size = 4
?Pitch@CCamera@@QAEXM@Z PROC				; CCamera::Pitch, COMDAT
; _this$ = ecx

; 567  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 568  : //	if (IsLock())
; 569  : //		return;
; 570  : 
; 571  : 	RotateEyeAroundTarget(fPitchDelta, 0.0f);

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fPitchDelta$[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR [esp+4], 0
  00013	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00018	e8 00 00 00 00	 call	 ?RotateEyeAroundTarget@CCamera@@QAEXMM@Z ; CCamera::RotateEyeAroundTarget

; 572  : }

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
?Pitch@CCamera@@QAEXM@Z ENDP				; CCamera::Pitch
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Up$ = 8						; size = 4
?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::SetUp, COMDAT
; _this$ = ecx

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 273  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 19		 jne	 SHORT $LN1@SetUp

; 274  : 	{
; 275  : 		return;
; 276  : 	}
; 277  : 
; 278  : 	m_v3Up = v3Up;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Up$[ebp]

; 279  : 
; 280  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 48	 movq	 QWORD PTR [esi+72], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00023	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetUp:
  00028	5e		 pop	 esi

; 281  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetUp@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::SetUp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Target$ = 8						; size = 4
?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::SetTarget, COMDAT
; _this$ = ecx

; 260  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 261  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 19		 jne	 SHORT $LN1@SetTarget

; 262  : 	{
; 263  : 		return;
; 264  : 	}
; 265  : 
; 266  : 	m_v3Target = v3Target;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Target$[ebp]

; 267  : 
; 268  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 3c	 movq	 QWORD PTR [esi+60], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00023	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetTarget:
  00028	5e		 pop	 esi

; 269  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetTarget@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::SetTarget
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_v3Eye$ = 8						; size = 4
?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z PROC		; CCamera::SetEye, COMDAT
; _this$ = ecx

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 249  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 19		 jne	 SHORT $LN1@SetEye

; 250  : 	{
; 251  : 		return;
; 252  : 	}
; 253  : 
; 254  : 	m_v3Eye = v3Eye;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Eye$[ebp]

; 255  : 
; 256  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00023	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetEye:
  00028	5e		 pop	 esi

; 257  : }

  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
?SetEye@CCamera@@QAEXABUD3DXVECTOR3@@@Z ENDP		; CCamera::SetEye
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
_v3Eye$ = 8						; size = 4
_v3Target$ = 12						; size = 4
_v3Up$ = 16						; size = 4
?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z PROC	; CCamera::SetViewParams, COMDAT
; _this$ = ecx

; 233  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 234  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 3d		 jne	 SHORT $LN1@SetViewPar

; 235  : 	{
; 236  : 		return;
; 237  : 	}
; 238  : 
; 239  : 	// Set attributes for the view matrix
; 240  : 	m_v3Eye = v3Eye;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _v3Eye$[ebp]

; 241  : 	m_v3Target = v3Target;
; 242  : 	m_v3Up = v3Up;
; 243  : 
; 244  : 	SetViewMatrix();

  00012	8b ce		 mov	 ecx, esi
  00014	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00018	66 0f d6 46 30	 movq	 QWORD PTR [esi+48], xmm0
  0001d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00020	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00023	8b 45 0c	 mov	 eax, DWORD PTR _v3Target$[ebp]
  00026	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0002a	66 0f d6 46 3c	 movq	 QWORD PTR [esi+60], xmm0
  0002f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00032	89 46 44	 mov	 DWORD PTR [esi+68], eax
  00035	8b 45 10	 mov	 eax, DWORD PTR _v3Up$[ebp]
  00038	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0003c	66 0f d6 46 48	 movq	 QWORD PTR [esi+72], xmm0
  00041	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00044	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00047	e8 00 00 00 00	 call	 ?SetViewMatrix@CCamera@@IAEXXZ ; CCamera::SetViewMatrix
$LN1@SetViewPar:
  0004c	5e		 pop	 esi

; 245  : }

  0004d	5d		 pop	 ebp
  0004e	c2 0c 00	 ret	 12			; 0000000cH
?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ENDP	; CCamera::SetViewParams
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?ResetNumScreenBuilding@CCamera@@QAEXXZ
_TEXT	SEGMENT
?ResetNumScreenBuilding@CCamera@@QAEXXZ PROC		; CCamera::ResetNumScreenBuilding, COMDAT
; _this$ = ecx

; 227  : 	m_ulNumScreenBuilding = 0;

  00000	c7 41 28 00 00
	00 00		 mov	 DWORD PTR [ecx+40], 0

; 228  : }

  00007	c3		 ret	 0
?ResetNumScreenBuilding@CCamera@@QAEXXZ ENDP		; CCamera::ResetNumScreenBuilding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ
_TEXT	SEGMENT
?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ PROC	; CCamera::IncreaseNumSrcreenBuilding, COMDAT
; _this$ = ecx

; 222  : 	++m_ulNumScreenBuilding;

  00000	ff 41 28	 inc	 DWORD PTR [ecx+40]

; 223  : }

  00003	c3		 ret	 0
?IncreaseNumSrcreenBuilding@CCamera@@QAEXXZ ENDP	; CCamera::IncreaseNumSrcreenBuilding
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z
_TEXT	SEGMENT
_eNewCameraState$ = 8					; size = 4
?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z PROC	; CCamera::SetCameraState, COMDAT
; _this$ = ecx

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  : 	if (eNewCameraState == m_eCameraState)

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8b 55 08	 mov	 edx, DWORD PTR _eNewCameraState$[ebp]
  00009	3b d0		 cmp	 edx, eax
  0000b	74 06		 je	 SHORT $LN1@SetCameraS

; 199  : 	{
; 200  : 		return;
; 201  : 	}
; 202  : 
; 203  : 	m_eCameraStatePrev = m_eCameraState;

  0000d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 204  : 	m_eCameraState = eNewCameraState;

  00010	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN1@SetCameraS:

; 205  : 
; 206  : 	/*
; 207  : 		if ((CAMERA_STATE_NORMAL == m_eCameraStatePrev))
; 208  : 		{
; 209  : 			m_fDistanceBackup = m_fDistance;
; 210  : 			m_fPitchBackup = m_fPitch;
; 211  : 			m_fRollBackup = m_fRoll;
; 212  : 		}
; 213  : 		else if ((CAMERA_STATE_CANTGODOWN == m_eCameraStatePrev) && (CAMERA_STATE_CANTGODOWN == m_eCameraState) )
; 214  : 		{
; 215  : 			m_v3EyeBackup = m_v3Eye;
; 216  : 		}
; 217  : 	*/
; 218  : }

  00013	5d		 pop	 ebp
  00014	c2 04 00	 ret	 4
?SetCameraState@CCamera@@QAEXW4_eCameraState_@@@Z ENDP	; CCamera::SetCameraState
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetResistance@CCamera@@QAEXM@Z
_TEXT	SEGMENT
_fResistance$ = 8					; size = 4
?SetResistance@CCamera@@QAEXM@Z PROC			; CCamera::SetResistance, COMDAT
; _this$ = ecx

; 86   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 87   : 	m_fResistance = c_fDefaultResistance * fResistance;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fResistance$[ebp]
  00008	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e99999a
  00010	f3 0f 11 81 30
	03 00 00	 movss	 DWORD PTR [ecx+816], xmm0

; 88   : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
?SetResistance@CCamera@@QAEXM@Z ENDP			; CCamera::SetResistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?IsDraging@CCamera@@QAE_NXZ
_TEXT	SEGMENT
?IsDraging@CCamera@@QAE_NXZ PROC			; CCamera::IsDraging, COMDAT
; _this$ = ecx

; 115  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 116  : 	if (IsLock())

  00003	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  00008	84 c0		 test	 al, al
  0000a	74 04		 je	 SHORT $LN2@IsDraging

; 117  : 	{
; 118  : 		return false;

  0000c	32 c0		 xor	 al, al
  0000e	5e		 pop	 esi

; 122  : }

  0000f	c3		 ret	 0
$LN2@IsDraging:

; 119  : 	}
; 120  : 
; 121  : 	return m_bDrag;

  00010	8a 86 14 03 00
	00		 mov	 al, BYTE PTR [esi+788]
  00016	5e		 pop	 esi

; 122  : }

  00017	c3		 ret	 0
?IsDraging@CCamera@@QAE_NXZ ENDP			; CCamera::IsDraging
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?BeginDrag@CCamera@@QAEXHH@Z
_TEXT	SEGMENT
_nMouseX$ = 8						; size = 4
_nMouseY$ = 12						; size = 4
?BeginDrag@CCamera@@QAEXHH@Z PROC			; CCamera::BeginDrag, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 102  : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 2d		 jne	 SHORT $LN1@BeginDrag

; 103  : 	{
; 104  : 		return;
; 105  : 	}
; 106  : 
; 107  : 	m_bDrag = true;
; 108  : 	m_lMousePosX = nMouseX;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _nMouseX$[ebp]
  00012	89 86 0c 03 00
	00		 mov	 DWORD PTR [esi+780], eax

; 109  : 	m_lMousePosY = nMouseY;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _nMouseY$[ebp]
  0001b	c6 86 14 03 00
	00 01		 mov	 BYTE PTR [esi+788], 1
  00022	89 86 10 03 00
	00		 mov	 DWORD PTR [esi+784], eax

; 110  : 	m_fPitchSum = 0.0f;

  00028	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0

; 111  : 	m_fRollSum = 0.0f;

  00032	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
$LN1@BeginDrag:
  0003c	5e		 pop	 esi

; 112  : }

  0003d	5d		 pop	 ebp
  0003e	c2 08 00	 ret	 8
?BeginDrag@CCamera@@QAEXHH@Z ENDP			; CCamera::BeginDrag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?EndDrag@CCamera@@QAE_NXZ
_TEXT	SEGMENT
?EndDrag@CCamera@@QAE_NXZ PROC				; CCamera::EndDrag, COMDAT
; _this$ = ecx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	51		 push	 ecx
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 126  : 	if (IsLock())

  0000a	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000f	84 c0		 test	 al, al
  00011	75 67		 jne	 SHORT $LN5@EndDrag

; 127  : 	{
; 128  : 		return false;
; 129  : 	}
; 130  : 
; 131  : 	m_bDrag = false;
; 132  : 
; 133  : 	float fSum = sqrt(m_fPitchSum * m_fPitchSum + m_fRollSum * m_fRollSum);

  00013	f3 0f 10 8e 04
	03 00 00	 movss	 xmm1, DWORD PTR [esi+772]
  0001b	f3 0f 10 96 08
	03 00 00	 movss	 xmm2, DWORD PTR [esi+776]
  00023	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00027	88 86 14 03 00
	00		 mov	 BYTE PTR [esi+788], al
  0002d	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 134  : 
; 135  : 	m_fPitchSum = 0.0f;

  00031	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0

; 136  : 	m_fRollSum = 0.0f;

  0003b	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
  00045	f3 0f 58 ca	 addss	 xmm1, xmm2
  00049	0f 5a c1	 cvtps2pd xmm0, xmm1
  0004c	0f 57 c9	 xorps	 xmm1, xmm1
  0004f	66 0f 2e c8	 ucomisd xmm1, xmm0
  00053	77 06		 ja	 SHORT $LN7@EndDrag

; 127  : 	{
; 128  : 		return false;
; 129  : 	}
; 130  : 
; 131  : 	m_bDrag = false;
; 132  : 
; 133  : 	float fSum = sqrt(m_fPitchSum * m_fPitchSum + m_fRollSum * m_fRollSum);

  00055	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  00059	eb 05		 jmp	 SHORT $LN8@EndDrag
$LN7@EndDrag:
  0005b	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN8@EndDrag:
  00060	0f 57 c9	 xorps	 xmm1, xmm1
  00063	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0

; 137  : 
; 138  : 	if (fSum < 1.0f)

  00067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0006f	0f 2f c1	 comiss	 xmm0, xmm1
  00072	0f 96 c0	 setbe	 al

; 141  : 	}
; 142  : 
; 143  : 	return true;
; 144  : }

  00075	5e		 pop	 esi
  00076	8b e5		 mov	 esp, ebp
  00078	5d		 pop	 ebp
  00079	c3		 ret	 0
$LN5@EndDrag:

; 139  : 	{
; 140  : 		return false;

  0007a	32 c0		 xor	 al, al

; 141  : 	}
; 142  : 
; 143  : 	return true;
; 144  : }

  0007c	5e		 pop	 esi
  0007d	8b e5		 mov	 esp, ebp
  0007f	5d		 pop	 ebp
  00080	c3		 ret	 0
?EndDrag@CCamera@@QAE_NXZ ENDP				; CCamera::EndDrag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z
_TEXT	SEGMENT
_fNewPitchVelocity$1$ = -4				; size = 4
_fNewPitchVelocity$ = 8					; size = 4
_nMouseX$ = 8						; size = 4
_fNewRotationVelocity$1$ = 12				; size = 4
_fNewRotationVelocity$ = 12				; size = 4
_nMouseY$ = 12						; size = 4
_lpReturnPoint$ = 16					; size = 4
?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z PROC		; CCamera::Drag, COMDAT
; _this$ = ecx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 148  : 	if (IsLock())

  00007	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000c	84 c0		 test	 al, al
  0000e	75 29		 jne	 SHORT $LN9@Drag

; 149  : 	{
; 150  : 		return false;
; 151  : 	}
; 152  : 
; 153  : 	if (!m_bDrag)

  00010	80 be 14 03 00
	00 00		 cmp	 BYTE PTR [esi+788], 0
  00017	8b 45 0c	 mov	 eax, DWORD PTR _nMouseY$[ebp]
  0001a	75 26		 jne	 SHORT $LN3@Drag

; 154  : 	{
; 155  : 		m_lMousePosX = nMouseX;
; 156  : 		m_lMousePosY = nMouseY;
; 157  : 		lpReturnPoint->x = m_lMousePosX;

  0001c	8b 4d 10	 mov	 ecx, DWORD PTR _lpReturnPoint$[ebp]
  0001f	8b 55 08	 mov	 edx, DWORD PTR _nMouseX$[ebp]
  00022	89 86 10 03 00
	00		 mov	 DWORD PTR [esi+784], eax
  00028	89 96 0c 03 00
	00		 mov	 DWORD PTR [esi+780], edx
  0002e	89 11		 mov	 DWORD PTR [ecx], edx

; 158  : 		lpReturnPoint->y = m_lMousePosY;

  00030	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
  00036	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN9@Drag:

; 191  : }

  00039	32 c0		 xor	 al, al
  0003b	5e		 pop	 esi
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
$LN3@Drag:

; 159  : 		return false;
; 160  : 	}
; 161  : 
; 162  : 	long lMouseX = nMouseX;
; 163  : 	long lMouseY = nMouseY;
; 164  : 
; 165  : 	float fNewPitchVelocity = (float)(lMouseY - m_lMousePosY) * m_fResistance;

  00042	2b 86 10 03 00
	00		 sub	 eax, DWORD PTR [esi+784]
  00048	f3 0f 10 86 30
	03 00 00	 movss	 xmm0, DWORD PTR [esi+816]
  00050	66 0f 6e d0	 movd	 xmm2, eax

; 166  : 	float fNewRotationVelocity = (float)(lMouseX - m_lMousePosX) * m_fResistance;

  00054	8b 45 08	 mov	 eax, DWORD PTR _nMouseX$[ebp]
  00057	2b 86 0c 03 00
	00		 sub	 eax, DWORD PTR [esi+780]

; 167  : 
; 168  : 	m_fPitchSum += fNewPitchVelocity;
; 169  : 	m_fRollSum += fNewRotationVelocity;
; 170  : 
; 171  : 
; 172  : 	if (CAMERA_STATE_CANTGOLEFT == GetCameraState())

  0005d	83 7e 04 03	 cmp	 DWORD PTR [esi+4], 3
  00061	0f 5b d2	 cvtdq2ps xmm2, xmm2
  00064	66 0f 6e c8	 movd	 xmm1, eax
  00068	f3 0f 59 d0	 mulss	 xmm2, xmm0
  0006c	0f 5b c9	 cvtdq2ps xmm1, xmm1
  0006f	f3 0f 11 55 fc	 movss	 DWORD PTR _fNewPitchVelocity$1$[ebp], xmm2
  00074	f3 0f 59 c8	 mulss	 xmm1, xmm0
  00078	0f 28 c2	 movaps	 xmm0, xmm2
  0007b	f3 0f 58 86 04
	03 00 00	 addss	 xmm0, DWORD PTR [esi+772]
  00083	f3 0f 11 4d 0c	 movss	 DWORD PTR _fNewRotationVelocity$1$[ebp], xmm1
  00088	f3 0f 11 86 04
	03 00 00	 movss	 DWORD PTR [esi+772], xmm0
  00090	0f 28 c1	 movaps	 xmm0, xmm1
  00093	f3 0f 58 86 08
	03 00 00	 addss	 xmm0, DWORD PTR [esi+776]
  0009b	f3 0f 11 86 08
	03 00 00	 movss	 DWORD PTR [esi+776], xmm0
  000a3	75 25		 jne	 SHORT $LN4@Drag

; 173  : 	{
; 174  : 		fNewRotationVelocity = fMAX(0.0f, fNewRotationVelocity);

  000a5	83 ec 08	 sub	 esp, 8
  000a8	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000ae	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000b5	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  000ba	d9 5d 0c	 fstp	 DWORD PTR _fNewRotationVelocity$[ebp]
  000bd	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fNewRotationVelocity$[ebp]
  000c2	83 c4 08	 add	 esp, 8
  000c5	f3 0f 11 4d 0c	 movss	 DWORD PTR _fNewRotationVelocity$1$[ebp], xmm1
$LN4@Drag:

; 175  : 	}
; 176  : 	if (CAMERA_STATE_CANTGORIGHT == GetCameraState())

  000ca	83 7e 04 02	 cmp	 DWORD PTR [esi+4], 2
  000ce	75 25		 jne	 SHORT $LN5@Drag

; 177  : 	{
; 178  : 		fNewRotationVelocity = fMIN(0.0f, fNewRotationVelocity);

  000d0	83 ec 08	 sub	 esp, 8
  000d3	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  000d9	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  000e0	e8 00 00 00 00	 call	 ?fMIN@@YAMMM@Z		; fMIN
  000e5	d9 5d 0c	 fstp	 DWORD PTR _fNewRotationVelocity$[ebp]
  000e8	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fNewRotationVelocity$[ebp]
  000ed	83 c4 08	 add	 esp, 8
  000f0	f3 0f 11 4d 0c	 movss	 DWORD PTR _fNewRotationVelocity$1$[ebp], xmm1
$LN5@Drag:

; 179  : 	}
; 180  : 	if (CAMERA_STATE_CANTGODOWN == GetCameraState())

  000f5	83 7e 04 01	 cmp	 DWORD PTR [esi+4], 1
  000f9	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _fNewPitchVelocity$1$[ebp]
  000fe	75 25		 jne	 SHORT $LN6@Drag

; 181  : 	{
; 182  : 		fNewPitchVelocity = fMAX(0.0f, fNewPitchVelocity);

  00100	83 ec 08	 sub	 esp, 8
  00103	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00109	c7 04 24 00 00
	00 00		 mov	 DWORD PTR [esp], 0
  00110	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00115	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _fNewRotationVelocity$1$[ebp]
  0011a	83 c4 08	 add	 esp, 8
  0011d	d9 5d 08	 fstp	 DWORD PTR _fNewPitchVelocity$[ebp]
  00120	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fNewPitchVelocity$[ebp]
$LN6@Drag:

; 183  : 	}
; 184  : 
; 185  : 	m_v3AngularVelocity.x = fNewRotationVelocity;
; 186  : 	m_v3AngularVelocity.z = fNewPitchVelocity;
; 187  : 
; 188  : 	lpReturnPoint->x = m_lMousePosX;

  00125	8b 4d 10	 mov	 ecx, DWORD PTR _lpReturnPoint$[ebp]
  00128	8b 86 0c 03 00
	00		 mov	 eax, DWORD PTR [esi+780]
  0012e	f3 0f 11 8e 24
	03 00 00	 movss	 DWORD PTR [esi+804], xmm1
  00136	f3 0f 11 86 2c
	03 00 00	 movss	 DWORD PTR [esi+812], xmm0
  0013e	89 01		 mov	 DWORD PTR [ecx], eax

; 189  : 	lpReturnPoint->y = m_lMousePosY;

  00140	8b 86 10 03 00
	00		 mov	 eax, DWORD PTR [esi+784]
  00146	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 190  : 	return true;

  00149	b0 01		 mov	 al, 1
  0014b	5e		 pop	 esi

; 191  : }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 0c 00	 ret	 12			; 0000000cH
?Drag@CCamera@@QAE_NHHPAUtagPOINT@@@Z ENDP		; CCamera::Drag
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Wheel@CCamera@@QAEXH@Z
_TEXT	SEGMENT
_nLen$ = 8						; size = 4
?Wheel@CCamera@@QAEXH@Z PROC				; CCamera::Wheel, COMDAT
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 92   : 	if (IsLock())

  00006	e8 00 00 00 00	 call	 ?IsLock@CCamera@@QAE_NXZ ; CCamera::IsLock
  0000b	84 c0		 test	 al, al
  0000d	75 18		 jne	 SHORT $LN1@Wheel

; 93   : 	{
; 94   : 		return;
; 95   : 	}
; 96   : 
; 97   : 	m_v3AngularVelocity.y = (float)(nLen) * m_fResistance;

  0000f	66 0f 6e 45 08	 movd	 xmm0, DWORD PTR _nLen$[ebp]
  00014	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00017	f3 0f 59 86 30
	03 00 00	 mulss	 xmm0, DWORD PTR [esi+816]
  0001f	f3 0f 11 86 28
	03 00 00	 movss	 DWORD PTR [esi+808], xmm0
$LN1@Wheel:
  00027	5e		 pop	 esi

; 98   : }

  00028	5d		 pop	 ebp
  00029	c2 04 00	 ret	 4
?Wheel@CCamera@@QAEXH@Z ENDP				; CCamera::Wheel
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?IsLock@CCamera@@QAE_NXZ
_TEXT	SEGMENT
?IsLock@CCamera@@QAE_NXZ PROC				; CCamera::IsLock, COMDAT
; _this$ = ecx

; 82   : 	return m_isLock;

  00000	8a 41 2c	 mov	 al, BYTE PTR [ecx+44]

; 83   : }

  00003	c3		 ret	 0
?IsLock@CCamera@@QAE_NXZ ENDP				; CCamera::IsLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Unlock@CCamera@@QAEXXZ
_TEXT	SEGMENT
?Unlock@CCamera@@QAEXXZ PROC				; CCamera::Unlock, COMDAT
; _this$ = ecx

; 77   : 	m_isLock = false;

  00000	c6 41 2c 00	 mov	 BYTE PTR [ecx+44], 0

; 78   : }

  00004	c3		 ret	 0
?Unlock@CCamera@@QAEXXZ ENDP				; CCamera::Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?Lock@CCamera@@QAEXXZ
_TEXT	SEGMENT
?Lock@CCamera@@QAEXXZ PROC				; CCamera::Lock, COMDAT
; _this$ = ecx

; 72   : 	m_isLock = true;

  00000	c6 41 2c 01	 mov	 BYTE PTR [ecx+44], 1

; 73   : }

  00004	c3		 ret	 0
?Lock@CCamera@@QAEXXZ ENDP				; CCamera::Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ?SetCameraMaxDistance@CCamera@@SAXM@Z
_TEXT	SEGMENT
_fMax$ = 8						; size = 4
?SetCameraMaxDistance@CCamera@@SAXM@Z PROC		; CCamera::SetCameraMaxDistance, COMDAT

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 15   : 	CAMERA_MAX_DISTANCE = fMax;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fMax$[ebp]
  00008	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?CAMERA_MAX_DISTANCE@CCamera@@0MA, xmm0

; 16   : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?SetCameraMaxDistance@CCamera@@SAXM@Z ENDP		; CCamera::SetCameraMaxDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ??1CCamera@@UAE@XZ
_TEXT	SEGMENT
??1CCamera@@UAE@XZ PROC					; CCamera::~CCamera, COMDAT
; _this$ = ecx

; 67   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CCamera@@6B@

; 68   : }

  00006	c3		 ret	 0
??1CCamera@@UAE@XZ ENDP					; CCamera::~CCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp
;	COMDAT ??0CCamera@@QAE@XZ
_TEXT	SEGMENT
$T1 = -40						; size = 12
$T2 = -28						; size = 12
$T3 = -16						; size = 12
$T4 = -16						; size = 12
$T5 = -16						; size = 12
__$ArrayPad$ = -4					; size = 4
??0CCamera@@QAE@XZ PROC					; CCamera::CCamera, COMDAT
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00013	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T5[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 58   : 	m_v3AngularAcceleration			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0001a	8b 45 f8	 mov	 eax, DWORD PTR $T5[ebp+8]
  0001d	0f 57 c9	 xorps	 xmm1, xmm1
  00020	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 58   : 	m_v3AngularAcceleration			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0002a	0f 14 c1	 unpcklps xmm0, xmm1
  0002d	66 0f d6 86 18
	03 00 00	 movq	 QWORD PTR [esi+792], xmm0
  00035	89 86 20 03 00
	00		 mov	 DWORD PTR [esi+800], eax

; 59   : 	m_v3AngularVelocity				= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR $T4[ebp+8]
  0003e	0f 14 c9	 unpcklps xmm1, xmm1
  00041	66 0f d6 8e 24
	03 00 00	 movq	 QWORD PTR [esi+804], xmm1
  00049	89 86 2c 03 00
	00		 mov	 DWORD PTR [esi+812], eax

; 63   : 	SetViewParams(D3DXVECTOR3(0.0f, 0.0f, 1.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 1.0f, 0.0f));

  0004f	8d 45 e4	 lea	 eax, DWORD PTR $T2[ebp]
  00052	50		 push	 eax
  00053	8d 45 d8	 lea	 eax, DWORD PTR $T1[ebp]
  00056	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CCamera@@6B@
  0005c	50		 push	 eax
  0005d	8d 45 f0	 lea	 eax, DWORD PTR $T3[ebp]
  00060	c6 46 2c 00	 mov	 BYTE PTR [esi+44], 0
  00064	50		 push	 eax
  00065	c7 86 fc 02 00
	00 9a 99 99 3e	 mov	 DWORD PTR [esi+764], 1050253722 ; 3e99999aH
  0006f	c7 86 00 03 00
	00 00 00 00 40	 mov	 DWORD PTR [esi+768], 1073741824 ; 40000000H
  00079	c7 86 30 03 00
	00 9a 99 99 3e	 mov	 DWORD PTR [esi+816], 1050253722 ; 3e99999aH
  00083	c7 86 34 01 00
	00 00 00 80 3f	 mov	 DWORD PTR [esi+308], 1065353216 ; 3f800000H
  0008d	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00094	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0009b	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0
  000a2	c7 86 04 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+772], 0
  000ac	c7 86 08 03 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+776], 0
  000b6	c7 86 f0 02 00
	00 00 00 48 42	 mov	 DWORD PTR [esi+752], 1112014848 ; 42480000H
  000c0	c7 86 f4 02 00
	00 00 00 48 42	 mov	 DWORD PTR [esi+756], 1112014848 ; 42480000H
  000ca	c6 86 14 03 00
	00 00		 mov	 BYTE PTR [esi+788], 0
  000d1	c7 86 0c 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+780], -1
  000db	c7 86 10 03 00
	00 ff ff ff ff	 mov	 DWORD PTR [esi+784], -1
  000e5	c7 86 f8 02 00
	00 00 00 c8 42	 mov	 DWORD PTR [esi+760], 1120403456 ; 42c80000H
  000ef	c6 86 34 03 00
	00 01		 mov	 BYTE PTR [esi+820], 1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  000f6	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 305  :     y = fy;

  000fd	c7 45 e8 00 00
	80 3f		 mov	 DWORD PTR $T2[ebp+4], 1065353216 ; 3f800000H

; 306  :     z = fz;

  00104	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0

; 304  :     x = fx;

  0010b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0

; 305  :     y = fy;

  00112	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+4], 0

; 306  :     z = fz;

  00119	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp+8], 0

; 304  :     x = fx;

  00120	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp], 0

; 305  :     y = fy;

  00127	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+4], 0

; 306  :     z = fz;

  0012e	c7 45 f8 00 00
	80 3f		 mov	 DWORD PTR $T3[ebp+8], 1065353216 ; 3f800000H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Camera.cpp

; 63   : 	SetViewParams(D3DXVECTOR3(0.0f, 0.0f, 1.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 1.0f, 0.0f));

  00135	e8 00 00 00 00	 call	 ?SetViewParams@CCamera@@QAEXABUD3DXVECTOR3@@00@Z ; CCamera::SetViewParams

; 64   : }

  0013a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0013d	8b c6		 mov	 eax, esi
  0013f	33 cd		 xor	 ecx, ebp
  00141	5e		 pop	 esi
  00142	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00147	8b e5		 mov	 esp, ebp
  00149	5d		 pop	 ebp
  0014a	c3		 ret	 0
??0CCamera@@QAE@XZ ENDP					; CCamera::CCamera
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
