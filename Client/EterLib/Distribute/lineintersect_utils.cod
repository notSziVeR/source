; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\lineintersect_utils.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ; IntersectLineSegments
PUBLIC	?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ; IntersectLineSegments
PUBLIC	?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
PUBLIC	?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
PUBLIC	?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
PUBLIC	__real@3c23d70b
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@7fffffff7fffffff7fffffff7fffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffff7fffffff7fffffff7fffffff
CONST	SEGMENT
__xmm@7fffffff7fffffff7fffffff7fffffff DB 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3c23d70b
CONST	SEGMENT
__real@3c23d70b DD 03c23d70br			; 0.01
CONST	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
;	COMDAT ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z
_TEXT	SEGMENT
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lax$ = 20						; size = 4
_Lay$ = 24						; size = 4
_Laz$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_Lbx$ = 44						; size = 4
_Lby$ = 48						; size = 4
_Lbz$ = 52						; size = 4
_epsilon_squared$ = 56					; size = 4
_s$ = 60						; size = 4
_t$ = 64						; size = 4
_PointOnSegAx$ = 68					; size = 4
_PointOnSegAy$ = 72					; size = 4
_PointOnSegAz$ = 76					; size = 4
_PointOnSegBx$ = 80					; size = 4
_PointOnSegBy$ = 84					; size = 4
_PointOnSegBz$ = 88					; size = 4
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z PROC	; AdjustNearestPoints, COMDAT

; 798  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  : 	// handle the case where both parameter s and t are out of range
; 800  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00003	f3 0f 10 55 3c	 movss	 xmm2, DWORD PTR _s$[ebp]
  00008	0f 57 db	 xorps	 xmm3, xmm3
  0000b	0f 2f da	 comiss	 xmm3, xmm2
  0000e	f3 0f 10 65 40	 movss	 xmm4, DWORD PTR _t$[ebp]
  00013	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  0001b	77 05		 ja	 SHORT $LN4@AdjustNear
  0001d	0f 2f d1	 comiss	 xmm2, xmm1
  00020	76 12		 jbe	 SHORT $LN2@AdjustNear
$LN4@AdjustNear:
  00022	0f 2f dc	 comiss	 xmm3, xmm4
  00025	0f 87 dd 01 00
	00		 ja	 $LN5@AdjustNear
  0002b	0f 2f e1	 comiss	 xmm4, xmm1
  0002e	0f 87 d4 01 00
	00		 ja	 $LN5@AdjustNear
$LN2@AdjustNear:

; 819  : 										  PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 820  : 										  PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 821  : 		}
; 822  : 	}
; 823  : 	// otherwise, handle the case where the parameter for only one segment is
; 824  : 	// out of range
; 825  : 	else if (OUT_OF_RANGE(s))

  00034	0f 2f da	 comiss	 xmm3, xmm2
  00037	0f 87 f1 00 00
	00		 ja	 $LN10@AdjustNear
  0003d	0f 2f d1	 comiss	 xmm2, xmm1
  00040	0f 87 e8 00 00
	00		 ja	 $LN10@AdjustNear

; 832  : 									  PointOnSegAy, PointOnSegAz, false, epsilon_squared,
; 833  : 									  PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 834  : 	}
; 835  : 	else if (OUT_OF_RANGE(t))

  00046	0f 2f dc	 comiss	 xmm3, xmm4
  00049	77 09		 ja	 SHORT $LN13@AdjustNear
  0004b	0f 2f e1	 comiss	 xmm4, xmm1
  0004e	0f 86 11 04 00
	00		 jbe	 $LN6@AdjustNear
$LN13@AdjustNear:

; 836  : 	{
; 837  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  00054	0f 28 c4	 movaps	 xmm0, xmm4
  00057	f3 0f 5d c1	 minss	 xmm0, xmm1
  0005b	0f 2f d8	 comiss	 xmm3, xmm0
  0005e	76 05		 jbe	 SHORT $LN37@AdjustNear
  00060	0f 57 e4	 xorps	 xmm4, xmm4
  00063	eb 08		 jmp	 SHORT $LN36@AdjustNear
$LN37@AdjustNear:
  00065	0f 2f cc	 comiss	 xmm1, xmm4
  00068	77 03		 ja	 SHORT $LN36@AdjustNear
  0006a	0f 28 e1	 movaps	 xmm4, xmm1
$LN36@AdjustNear:

; 838  : 		PointOnSegBx = (B1x + t * Lbx);

  0006d	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00072	8b 55 50	 mov	 edx, DWORD PTR _PointOnSegBx$[ebp]

; 839  : 		PointOnSegBy = (B1y + t * Lby);
; 840  : 		PointOnSegBz = (B1z + t * Lbz);

  00075	f3 0f 10 4d 34	 movss	 xmm1, DWORD PTR _Lbz$[ebp]
  0007a	8b 4d 54	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  0007d	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00081	8b 45 58	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00084	f3 0f 59 cc	 mulss	 xmm1, xmm4
  00088	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  0008d	f3 0f 58 4d 28	 addss	 xmm1, DWORD PTR _B1z$[ebp]
  00092	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00096	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  0009b	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0009f	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  000a4	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 841  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,

  000a8	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000ad	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  000b1	8d 45 3c	 lea	 eax, DWORD PTR _s$[ebp]
  000b4	50		 push	 eax
  000b5	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  000b8	ff 75 48	 push	 DWORD PTR _PointOnSegAy$[ebp]
  000bb	ff 75 44	 push	 DWORD PTR _PointOnSegAx$[ebp]
  000be	51		 push	 ecx
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  000c8	6a 00		 push	 0
  000ca	83 ec 24	 sub	 esp, 36			; 00000024H
  000cd	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  000d3	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  000d9	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  000dd	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  000e3	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  000e8	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000ee	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  000f3	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  000f9	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  000fe	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00104	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00109	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0010f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00114	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0011a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0011f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00124	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00129	83 c4 3c	 add	 esp, 60			; 0000003cH

; 842  : 									  PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 									  PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  0012c	5d		 pop	 ebp
  0012d	c3		 ret	 0
$LN10@AdjustNear:

; 826  : 	{
; 827  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  0012e	0f 28 c2	 movaps	 xmm0, xmm2
  00131	f3 0f 5d c1	 minss	 xmm0, xmm1
  00135	0f 2f d8	 comiss	 xmm3, xmm0
  00138	76 05		 jbe	 SHORT $LN31@AdjustNear
  0013a	0f 57 d2	 xorps	 xmm2, xmm2
  0013d	eb 08		 jmp	 SHORT $LN30@AdjustNear
$LN31@AdjustNear:
  0013f	0f 2f ca	 comiss	 xmm1, xmm2
  00142	77 03		 ja	 SHORT $LN30@AdjustNear
  00144	0f 28 d1	 movaps	 xmm2, xmm1
$LN30@AdjustNear:

; 828  : 		PointOnSegAx = (A1x + s * Lax);

  00147	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0014c	8b 55 44	 mov	 edx, DWORD PTR _PointOnSegAx$[ebp]

; 829  : 		PointOnSegAy = (A1y + s * Lay);
; 830  : 		PointOnSegAz = (A1z + s * Laz);

  0014f	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _Laz$[ebp]
  00154	8b 4d 48	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]
  00157	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0015b	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0015e	f3 0f 59 ca	 mulss	 xmm1, xmm2
  00162	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  00167	f3 0f 58 4d 10	 addss	 xmm1, DWORD PTR _A1z$[ebp]
  0016c	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00170	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  00175	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00179	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  0017e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0

; 831  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  00182	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00187	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0018b	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  0018e	50		 push	 eax
  0018f	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00192	ff 75 54	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00195	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00198	51		 push	 ecx
  00199	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019e	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  001a2	6a 00		 push	 0
  001a4	83 ec 24	 sub	 esp, 36			; 00000024H
  001a7	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  001ad	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  001b3	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  001b7	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  001bd	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  001c2	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  001c8	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  001cd	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  001d3	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  001d8	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  001de	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  001e3	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001e9	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  001ee	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001f4	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  001f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fe	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00203	83 c4 3c	 add	 esp, 60			; 0000003cH

; 842  : 									  PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 									  PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  00206	5d		 pop	 ebp
  00207	c3		 ret	 0
$LN5@AdjustNear:

; 801  : 	{
; 802  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  00208	0f 28 c2	 movaps	 xmm0, xmm2
  0020b	f3 0f 5d c1	 minss	 xmm0, xmm1
  0020f	0f 2f d8	 comiss	 xmm3, xmm0
  00212	76 05		 jbe	 SHORT $LN19@AdjustNear
  00214	0f 57 d2	 xorps	 xmm2, xmm2
  00217	eb 08		 jmp	 SHORT $LN44@AdjustNear
$LN19@AdjustNear:
  00219	0f 2f ca	 comiss	 xmm1, xmm2
  0021c	77 08		 ja	 SHORT $LN18@AdjustNear
  0021e	0f 28 d1	 movaps	 xmm2, xmm1
$LN44@AdjustNear:

; 803  : 		PointOnSegAx = (A1x + s * Lax);

  00221	f3 0f 11 55 3c	 movss	 DWORD PTR _s$[ebp], xmm2
$LN18@AdjustNear:
  00226	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  0022b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0022f	53		 push	 ebx
  00230	56		 push	 esi
  00231	8b 75 44	 mov	 esi, DWORD PTR _PointOnSegAx$[ebp]
  00234	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]

; 804  : 		PointOnSegAy = (A1y + s * Lay);
; 805  : 		PointOnSegAz = (A1z + s * Laz);

  00239	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0023c	57		 push	 edi
  0023d	8b 7d 48	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]

; 806  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  00240	8b 5d 54	 mov	 ebx, DWORD PTR _PointOnSegBy$[ebp]
  00243	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00247	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  0024c	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00250	f3 0f 10 4d 38	 movss	 xmm1, DWORD PTR _epsilon_squared$[ebp]
  00255	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  0025a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0025e	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00263	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00267	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  0026c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00270	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  00273	50		 push	 eax
  00274	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00277	53		 push	 ebx
  00278	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  0027b	51		 push	 ecx
  0027c	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00281	6a 01		 push	 1
  00283	83 ec 24	 sub	 esp, 36			; 00000024H
  00286	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  0028c	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00290	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00296	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0029a	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  002a0	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  002a5	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  002ab	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  002b0	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  002b6	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  002bb	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  002c1	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002c6	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002cc	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002d1	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  002d7	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e1	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 807  : 									  PointOnSegAy, PointOnSegAz, true, epsilon_squared,
; 808  : 									  PointOnSegBx, PointOnSegBy, PointOnSegBz, t);
; 809  : 		if (OUT_OF_RANGE(t))

  002e6	f3 0f 10 5d 40	 movss	 xmm3, DWORD PTR _t$[ebp]
  002eb	0f 57 d2	 xorps	 xmm2, xmm2
  002ee	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f800000
  002f6	83 c4 3c	 add	 esp, 60			; 0000003cH
  002f9	0f 2f d3	 comiss	 xmm2, xmm3
  002fc	77 09		 ja	 SHORT $LN7@AdjustNear
  002fe	0f 2f d9	 comiss	 xmm3, xmm1
  00301	0f 86 5b 01 00
	00		 jbe	 $LN41@AdjustNear
$LN7@AdjustNear:

; 810  : 		{
; 811  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  00307	0f 28 c3	 movaps	 xmm0, xmm3
  0030a	f3 0f 5d c1	 minss	 xmm0, xmm1
  0030e	0f 2f d0	 comiss	 xmm2, xmm0
  00311	76 05		 jbe	 SHORT $LN25@AdjustNear
  00313	0f 57 db	 xorps	 xmm3, xmm3
  00316	eb 08		 jmp	 SHORT $LN45@AdjustNear
$LN25@AdjustNear:
  00318	0f 2f cb	 comiss	 xmm1, xmm3
  0031b	77 08		 ja	 SHORT $LN24@AdjustNear
  0031d	0f 28 d9	 movaps	 xmm3, xmm1
$LN45@AdjustNear:

; 812  : 			PointOnSegBx = (B1x + t * Lbx);

  00320	f3 0f 11 5d 40	 movss	 DWORD PTR _t$[ebp], xmm3
$LN24@AdjustNear:
  00325	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  0032a	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0032d	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 813  : 			PointOnSegBy = (B1y + t * Lby);
; 814  : 			PointOnSegBz = (B1z + t * Lbz);

  00331	8b 4d 58	 mov	 ecx, DWORD PTR _PointOnSegBz$[ebp]

; 815  : 			FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, PointOnSegBx,

  00334	f3 0f 10 4d 38	 movss	 xmm1, DWORD PTR _epsilon_squared$[ebp]
  00339	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  0033e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00342	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  00347	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0034b	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00350	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  00354	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  00359	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0035d	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00362	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00366	8d 4d 3c	 lea	 ecx, DWORD PTR _s$[ebp]
  00369	51		 push	 ecx
  0036a	ff 75 4c	 push	 DWORD PTR _PointOnSegAz$[ebp]
  0036d	57		 push	 edi
  0036e	56		 push	 esi
  0036f	51		 push	 ecx
  00370	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00375	6a 00		 push	 0
  00377	83 ec 24	 sub	 esp, 36			; 00000024H
  0037a	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00380	f3 0f 10 03	 movss	 xmm0, DWORD PTR [ebx]
  00384	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0038a	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0038e	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00394	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00399	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0039f	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  003a4	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  003aa	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  003af	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  003b5	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  003ba	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  003c0	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  003c5	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003cb	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  003d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d5	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 816  : 										  PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 817  : 										  PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 818  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, PointOnSegAx,

  003da	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  003df	8d 45 40	 lea	 eax, DWORD PTR _t$[ebp]
  003e2	83 c4 3c	 add	 esp, 60			; 0000003cH
  003e5	50		 push	 eax
  003e6	ff 75 58	 push	 DWORD PTR _PointOnSegBz$[ebp]
  003e9	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  003ec	53		 push	 ebx
  003ed	ff 75 50	 push	 DWORD PTR _PointOnSegBx$[ebp]
  003f0	51		 push	 ecx
  003f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  003fa	6a 00		 push	 0
  003fc	83 ec 24	 sub	 esp, 36			; 00000024H
  003ff	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00405	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00409	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0040f	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00413	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00419	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  0041e	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00424	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  00429	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0042f	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00434	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0043a	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0043f	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00445	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0044a	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00450	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00455	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0045a	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  0045f	83 c4 3c	 add	 esp, 60			; 0000003cH
$LN41@AdjustNear:
  00462	5f		 pop	 edi
  00463	5e		 pop	 esi
  00464	5b		 pop	 ebx
$LN6@AdjustNear:

; 842  : 									  PointOnSegBy, PointOnSegBz, false, epsilon_squared,
; 843  : 									  PointOnSegAx, PointOnSegAy, PointOnSegAz, s);
; 844  : 	}
; 845  : 	else
; 846  : 	{
; 847  : 		assert(0);
; 848  : 	}
; 849  : }

  00465	5d		 pop	 ebp
  00466	c3		 ret	 0
?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ENDP	; AdjustNearestPoints
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_tp$1 = -20						; size = 12
_s$ = -8						; size = 8
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_Lax$ = 32						; size = 4
_Lay$ = 36						; size = 4
_Laz$ = 40						; size = 4
_B1x$ = 44						; size = 4
_B1y$ = 48						; size = 4
_B1z$ = 52						; size = 4
_B2x$ = 56						; size = 4
_B2y$ = 60						; size = 4
_B2z$ = 64						; size = 4
_Lbx$ = 68						; size = 4
_Lby$ = 72						; size = 4
_Lbz$ = 76						; size = 4
_temp$ = 80						; size = 4
_infinite_lines$ = 80					; size = 1
_epsilon_squared$ = 84					; size = 4
_PointOnSegAx$ = 88					; size = 4
_PointOnSegAy$ = 92					; size = 4
_PointOnSegAz$ = 96					; size = 4
_PointOnSegBx$ = 100					; size = 4
_PointOnSegBy$ = 104					; size = 4
_PointOnSegBz$ = 108					; size = 4
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z PROC ; FindNearestPointOfParallelLineSegments, COMDAT

; 700  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 701  : 	float s[2], temp;
; 702  : 	FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  00003	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00008	8d 45 f8	 lea	 eax, DWORD PTR _s$[ebp]
  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	f3 0f 10 4d 24	 movss	 xmm1, DWORD PTR _Lay$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 60	 mov	 ebx, DWORD PTR _PointOnSegAz$[ebp]
  00017	56		 push	 esi
  00018	8b 75 5c	 mov	 esi, DWORD PTR _PointOnSegAy$[ebp]
  0001b	57		 push	 edi
  0001c	8b 7d 58	 mov	 edi, DWORD PTR _PointOnSegAx$[ebp]
  0001f	50		 push	 eax
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	51		 push	 ecx
  00024	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00029	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0002e	6a 01		 push	 1
  00030	83 ec 24	 sub	 esp, 36			; 00000024H
  00033	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  00039	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0003e	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  00044	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00049	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  0004f	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  00054	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0005a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0005f	f3 0f 11 4c 24
	10		 movss	 DWORD PTR [esp+16], xmm1
  00065	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _Lax$[ebp]
  0006a	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  00070	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _A1y$[ebp]
  00075	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0007b	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  00081	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _A1x$[ebp]
  00086	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0008b	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00090	83 c4 3c	 add	 esp, 60			; 0000003cH

; 703  : 								  true, epsilon_squared, PointOnSegAx, PointOnSegAy, PointOnSegAz, s[0]);
; 704  : 	if (true == infinite_lines)

  00093	80 7d 50 01	 cmp	 BYTE PTR _infinite_lines$[ebp], 1
  00097	75 14		 jne	 SHORT $LN2@FindNeares

; 705  : 	{
; 706  : 		PointOnSegBx = B1x;

  00099	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B1x$[ebp]

; 707  : 		PointOnSegBy = B1y;

  0009e	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _B1y$[ebp]

; 708  : 		PointOnSegBz = B1z;

  000a3	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]

; 709  : 	}

  000a8	e9 13 01 00 00	 jmp	 $LN11@FindNeares
$LN2@FindNeares:

; 710  : 	else
; 711  : 	{
; 712  : 		float tp[3];
; 713  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B2x, B2y, B2z,

  000ad	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  000b2	8d 45 fc	 lea	 eax, DWORD PTR _s$[ebp+4]
  000b5	50		 push	 eax
  000b6	8d 45 f4	 lea	 eax, DWORD PTR _tp$1[ebp+8]
  000b9	50		 push	 eax
  000ba	8d 45 f0	 lea	 eax, DWORD PTR _tp$1[ebp+4]
  000bd	50		 push	 eax
  000be	8d 45 ec	 lea	 eax, DWORD PTR _tp$1[ebp]
  000c1	50		 push	 eax
  000c2	51		 push	 ecx
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  000cd	6a 01		 push	 1
  000cf	83 ec 24	 sub	 esp, 36			; 00000024H
  000d2	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  000d8	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  000dd	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  000e3	f3 0f 10 45 38	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  000e8	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  000ee	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Laz$[ebp]
  000f3	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  000f9	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _Lay$[ebp]
  000fe	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00104	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _Lax$[ebp]
  00109	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  0010f	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00114	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0011a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0011f	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00125	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0012a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012f	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment

; 714  : 									  true, epsilon_squared, tp[0], tp[1], tp[2], s[1]);
; 715  : 		if (s[0] < 0.f && s[1] < 0.f)

  00134	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _s$[ebp]
  00139	0f 57 db	 xorps	 xmm3, xmm3
  0013c	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _s$[ebp+4]
  00141	83 c4 3c	 add	 esp, 60			; 0000003cH
  00144	0f 2f da	 comiss	 xmm3, xmm2
  00147	76 36		 jbe	 SHORT $LN4@FindNeares
  00149	0f 2f d9	 comiss	 xmm3, xmm1
  0014c	76 31		 jbe	 SHORT $LN4@FindNeares

; 716  : 		{
; 717  : 			PointOnSegAx = A1x;
; 718  : 			PointOnSegAy = A1y;
; 719  : 			PointOnSegAz = A1z;
; 720  : 			if (s[0] < s[1])

  0014e	0f 2f ca	 comiss	 xmm1, xmm2
  00151	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00156	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0015a	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0015f	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00163	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00168	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  0016c	77 43		 ja	 SHORT $LN10@FindNeares
$LN26@FindNeares:

; 758  : 										  PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 										  epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  0016e	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00173	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _B1y$[ebp]
  00178	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B1x$[ebp]
  0017d	eb 41		 jmp	 SHORT $LN11@FindNeares
$LN4@FindNeares:

; 721  : 			{
; 722  : 				PointOnSegBx = B2x;
; 723  : 				PointOnSegBy = B2y;
; 724  : 				PointOnSegBz = B2z;
; 725  : 			}
; 726  : 			else
; 727  : 			{
; 728  : 				PointOnSegBx = B1x;
; 729  : 				PointOnSegBy = B1y;
; 730  : 				PointOnSegBz = B1z;
; 731  : 			}
; 732  : 		}
; 733  : 		else if (s[0] > 1.f && s[1] > 1.f)

  0017f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00187	0f 2f d0	 comiss	 xmm2, xmm0
  0018a	76 50		 jbe	 SHORT $LN8@FindNeares
  0018c	0f 2f c8	 comiss	 xmm1, xmm0
  0018f	76 4b		 jbe	 SHORT $LN8@FindNeares

; 734  : 		{
; 735  : 			PointOnSegAx = A2x;
; 736  : 			PointOnSegAy = A2y;
; 737  : 			PointOnSegAz = A2z;
; 738  : 			if (s[0] < s[1])

  00191	0f 2f ca	 comiss	 xmm1, xmm2
  00194	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00199	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0019d	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  001a2	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  001a6	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  001ab	f3 0f 11 03	 movss	 DWORD PTR [ebx], xmm0
  001af	77 bd		 ja	 SHORT $LN26@FindNeares
$LN10@FindNeares:

; 758  : 										  PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 										  epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  001b1	f3 0f 10 55 38	 movss	 xmm2, DWORD PTR _B2x$[ebp]
  001b6	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _B2y$[ebp]
  001bb	f3 0f 10 45 40	 movss	 xmm0, DWORD PTR _B2z$[ebp]
$LN11@FindNeares:
  001c0	8b 45 64	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  001c3	5f		 pop	 edi
  001c4	5e		 pop	 esi
  001c5	5b		 pop	 ebx
  001c6	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  001ca	8b 45 68	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  001cd	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  001d1	8b 45 6c	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  001d4	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c3		 ret	 0
$LN8@FindNeares:

; 739  : 			{
; 740  : 				PointOnSegBx = B1x;
; 741  : 				PointOnSegBy = B1y;
; 742  : 				PointOnSegBz = B1z;
; 743  : 			}
; 744  : 			else
; 745  : 			{
; 746  : 				PointOnSegBx = B2x;
; 747  : 				PointOnSegBy = B2y;
; 748  : 				PointOnSegBz = B2z;
; 749  : 			}
; 750  : 		}
; 751  : 		else
; 752  : 		{
; 753  : 			temp = 0.5f * (FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  001dc	f3 0f 5d d0	 minss	 xmm2, xmm0
  001e0	0f 2f da	 comiss	 xmm3, xmm2
  001e3	76 03		 jbe	 SHORT $LN17@FindNeares
  001e5	0f 57 d2	 xorps	 xmm2, xmm2
$LN17@FindNeares:
  001e8	f3 0f 5d c8	 minss	 xmm1, xmm0
  001ec	0f 2f d9	 comiss	 xmm3, xmm1
  001ef	77 03		 ja	 SHORT $LN24@FindNeares
  001f1	0f 28 d9	 movaps	 xmm3, xmm1
$LN24@FindNeares:
  001f4	f3 0f 58 da	 addss	 xmm3, xmm2

; 754  : 			PointOnSegAx = (A1x + temp * Lax);
; 755  : 			PointOnSegAy = (A1y + temp * Lay);
; 756  : 			PointOnSegAz = (A1z + temp * Laz);
; 757  : 			FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz,

  001f8	f3 0f 10 4d 30	 movss	 xmm1, DWORD PTR _B1y$[ebp]
  001fd	8d 45 50	 lea	 eax, DWORD PTR _temp$[ebp]
  00200	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B1x$[ebp]
  00205	50		 push	 eax
  00206	ff 75 6c	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00209	f3 0f 59 1d 00
	00 00 00	 mulss	 xmm3, DWORD PTR __real@3f000000
  00211	ff 75 68	 push	 DWORD PTR _PointOnSegBy$[ebp]
  00214	ff 75 64	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00217	0f 28 c3	 movaps	 xmm0, xmm3
  0021a	f3 0f 11 5d 50	 movss	 DWORD PTR _temp$[ebp], xmm3
  0021f	f3 0f 59 45 20	 mulss	 xmm0, DWORD PTR _Lax$[ebp]
  00224	51		 push	 ecx
  00225	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  0022a	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0022e	0f 28 c3	 movaps	 xmm0, xmm3
  00231	f3 0f 59 45 24	 mulss	 xmm0, DWORD PTR _Lay$[ebp]
  00236	f3 0f 59 5d 28	 mulss	 xmm3, DWORD PTR _Laz$[ebp]
  0023b	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  00240	f3 0f 58 5d 10	 addss	 xmm3, DWORD PTR _A1z$[ebp]
  00245	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  00249	f3 0f 10 45 54	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  0024e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00253	6a 01		 push	 1
  00255	83 ec 24	 sub	 esp, 36			; 00000024H
  00258	f3 0f 11 1b	 movss	 DWORD PTR [ebx], xmm3
  0025c	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00260	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  00266	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  0026c	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00270	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00276	f3 0f 10 45 4c	 movss	 xmm0, DWORD PTR _Lbz$[ebp]
  0027b	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00281	f3 0f 10 45 48	 movss	 xmm0, DWORD PTR _Lby$[ebp]
  00286	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0028c	f3 0f 10 45 44	 movss	 xmm0, DWORD PTR _Lbx$[ebp]
  00291	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00297	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0029c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  002a2	f3 0f 11 4c 24
	04		 movss	 DWORD PTR [esp+4], xmm1
  002a8	f3 0f 11 14 24	 movss	 DWORD PTR [esp], xmm2
  002ad	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  002b2	83 c4 3c	 add	 esp, 60			; 0000003cH
  002b5	5f		 pop	 edi

; 758  : 										  PointOnSegAx, PointOnSegAy, PointOnSegAz, true,
; 759  : 										  epsilon_squared, PointOnSegBx, PointOnSegBy, PointOnSegBz, temp);
; 760  : 		}
; 761  : 	}
; 762  : }

  002b6	5e		 pop	 esi
  002b7	5b		 pop	 ebx
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c3		 ret	 0
?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ENDP ; FindNearestPointOfParallelLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
;	COMDAT ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z
_TEXT	SEGMENT
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_Lx$ = 20						; size = 4
_Ly$ = 24						; size = 4
_Lz$ = 28						; size = 4
_Bx$ = 32						; size = 4
_By$ = 36						; size = 4
_Bz$ = 40						; size = 4
_infinite_line$ = 44					; size = 1
_epsilon_squared$ = 48					; size = 4
_NearestPointX$ = 52					; size = 4
_NearestPointY$ = 56					; size = 4
_NearestPointZ$ = 60					; size = 4
_parameter$ = 64					; size = 4
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z PROC ; FindNearestPointOnLineSegment, COMDAT

; 630  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 631  : 	// Line/Segment is degenerate --- special case #1
; 632  : 	float D = Lx * Lx + Ly * Ly + Lz * Lz;

  00003	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _Lx$[ebp]
  00008	f3 0f 10 5d 18	 movss	 xmm3, DWORD PTR _Ly$[ebp]
  0000d	0f 28 d5	 movaps	 xmm2, xmm5
  00010	f3 0f 10 65 1c	 movss	 xmm4, DWORD PTR _Lz$[ebp]
  00015	0f 28 c3	 movaps	 xmm0, xmm3
  00018	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0001c	f3 0f 59 d5	 mulss	 xmm2, xmm5
  00020	f3 0f 58 d0	 addss	 xmm2, xmm0
  00024	0f 28 c4	 movaps	 xmm0, xmm4
  00027	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0002b	f3 0f 58 d0	 addss	 xmm2, xmm0

; 633  : 	if (D < epsilon_squared)

  0002f	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _epsilon_squared$[ebp]
  00034	0f 2f c2	 comiss	 xmm0, xmm2
  00037	76 26		 jbe	 SHORT $LN2@FindNeares

; 634  : 	{
; 635  : 		NearestPointX = A1x;

  00039	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  0003c	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00041	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 636  : 		NearestPointY = A1y;

  00045	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  00048	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  0004d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0

; 653  : 	return;
; 654  : }

  00051	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00054	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00059	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN2@FindNeares:

; 637  : 		NearestPointZ = A1z;
; 638  : 		return;
; 639  : 	}
; 640  : 
; 641  : 	float ABx = Bx - A1x;
; 642  : 	float ABy = By - A1y;
; 643  : 	float ABz = Bz - A1z;
; 644  : 
; 645  : 	// parameter is computed from Equation (20).
; 646  : 	parameter = (Lx * ABx + Ly * ABy + Lz * ABz) / D;
; 647  : 
; 648  : 	if (false == infinite_line) { parameter = FMAX(0.0f, FMIN(1.0f, parameter)); }

  0005f	80 7d 2c 00	 cmp	 BYTE PTR _infinite_line$[ebp], 0
  00063	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _By$[ebp]
  00068	f3 0f 10 4d 20	 movss	 xmm1, DWORD PTR _Bx$[ebp]
  0006d	f3 0f 10 75 08	 movss	 xmm6, DWORD PTR _A1x$[ebp]
  00072	f3 0f 10 7d 0c	 movss	 xmm7, DWORD PTR _A1y$[ebp]
  00077	f3 0f 5c ce	 subss	 xmm1, xmm6
  0007b	f3 0f 5c c7	 subss	 xmm0, xmm7
  0007f	8b 4d 40	 mov	 ecx, DWORD PTR _parameter$[ebp]
  00082	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00086	f3 0f 59 c3	 mulss	 xmm0, xmm3
  0008a	f3 0f 58 c8	 addss	 xmm1, xmm0
  0008e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _Bz$[ebp]
  00093	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00098	f3 0f 59 c4	 mulss	 xmm0, xmm4
  0009c	f3 0f 58 c8	 addss	 xmm1, xmm0
  000a0	f3 0f 5e ca	 divss	 xmm1, xmm2
  000a4	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  000a8	75 1a		 jne	 SHORT $LN3@FindNeares
  000aa	f3 0f 5d 0d 00
	00 00 00	 minss	 xmm1, DWORD PTR __real@3f800000
  000b2	0f 28 c1	 movaps	 xmm0, xmm1
  000b5	0f 57 c9	 xorps	 xmm1, xmm1
  000b8	0f 2f c8	 comiss	 xmm1, xmm0
  000bb	77 03		 ja	 SHORT $LN10@FindNeares
  000bd	0f 28 c8	 movaps	 xmm1, xmm0
$LN10@FindNeares:
  000c0	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
$LN3@FindNeares:

; 649  : 
; 650  : 	NearestPointX = A1x + parameter * Lx;

  000c4	8b 45 34	 mov	 eax, DWORD PTR _NearestPointX$[ebp]
  000c7	f3 0f 59 cd	 mulss	 xmm1, xmm5
  000cb	f3 0f 58 ce	 addss	 xmm1, xmm6
  000cf	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1

; 651  : 	NearestPointY = A1y + parameter * Ly;

  000d3	f3 0f 59 19	 mulss	 xmm3, DWORD PTR [ecx]
  000d7	8b 45 38	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  000da	f3 0f 58 df	 addss	 xmm3, xmm7
  000de	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3

; 652  : 	NearestPointZ = A1z + parameter * Lz;

  000e2	f3 0f 59 21	 mulss	 xmm4, DWORD PTR [ecx]

; 653  : 	return;
; 654  : }

  000e6	8b 45 3c	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  000e9	f3 0f 58 65 10	 addss	 xmm4, DWORD PTR _A1z$[ebp]
  000ee	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ENDP ; FindNearestPointOnLineSegment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z
_TEXT	SEGMENT
_Lbx$1$ = -28						; size = 4
_ABz$1$ = -24						; size = 4
_epsilon_squared$1$ = -24				; size = 4
_ABy$1$ = -20						; size = 4
_ABx$1$ = -16						; size = 4
_temp$ = -16						; size = 4
_Laz$1$ = -12						; size = 4
_Lby$1$ = -8						; size = 4
_Lbz$1$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z PROC ; IntersectLineSegments, COMDAT

; 321  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 322  : 	float temp = 0.f;
; 323  : 	float epsilon_squared = epsilon * epsilon;
; 324  : 
; 325  : 	// Compute parameters from Equations (1) and (2) in the text
; 326  : 	float Lax = A2x - A1x;
; 327  : 	float Lay = A2y - A1y;
; 328  : 	float Laz = A2z - A1z;
; 329  : 	float Lbx = B2x - B1x;
; 330  : 	float Lby = B2y - B1y;
; 331  : 	float Lbz = B2z - B1z;

  00006	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0000b	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00010	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00015	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _A2x$[ebp]
  0001a	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _A2y$[ebp]
  0001f	f3 0f 5c 75 08	 subss	 xmm6, DWORD PTR _A1x$[ebp]
  00024	f3 0f 5c 7d 0c	 subss	 xmm7, DWORD PTR _A1y$[ebp]
  00029	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B2x$[ebp]
  0002e	f3 0f 10 65 30	 movss	 xmm4, DWORD PTR _B2y$[ebp]
  00033	f3 0f 5c 55 20	 subss	 xmm2, DWORD PTR _B1x$[ebp]
  00038	f3 0f 5c 65 24	 subss	 xmm4, DWORD PTR _B1y$[ebp]
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$1$[ebp], xmm0

; 332  : 	// From Equation (15)
; 333  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00042	0f 28 ef	 movaps	 xmm5, xmm7
  00045	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00049	0f 28 c6	 movaps	 xmm0, xmm6
  0004c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  00053	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00057	f3 0f 59 ef	 mulss	 xmm5, xmm7

; 334  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);

  0005b	0f 28 dc	 movaps	 xmm3, xmm4
  0005e	f3 0f 11 4d e8	 movss	 DWORD PTR _epsilon_squared$1$[ebp], xmm1
  00063	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _A2z$[ebp]
  00068	f3 0f 5c 4d 10	 subss	 xmm1, DWORD PTR _A1z$[ebp]
  0006d	f3 0f 58 e8	 addss	 xmm5, xmm0
  00071	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00075	f3 0f 11 55 e4	 movss	 DWORD PTR _Lbx$1$[ebp], xmm2
  0007a	f3 0f 11 65 f8	 movss	 DWORD PTR _Lby$1$[ebp], xmm4
  0007f	0f 28 c1	 movaps	 xmm0, xmm1
  00082	f3 0f 11 4d f4	 movss	 DWORD PTR _Laz$1$[ebp], xmm1
  00087	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0008b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0008f	0f 28 c2	 movaps	 xmm0, xmm2
  00092	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00096	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009a	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0009f	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a3	f3 0f 58 d8	 addss	 xmm3, xmm0

; 335  : 
; 336  : 	// Line/Segment A is degenerate ---- Special Case #1
; 337  : 	if (L11 < epsilon_squared)

  000a7	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _epsilon_squared$1$[ebp]
  000ac	0f 2f c5	 comiss	 xmm0, xmm5
  000af	0f 86 97 00 00
	00		 jbe	 $LN2@IntersectL

; 338  : 	{
; 339  : 		PointOnSegAx = A1x;

  000b5	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  000b8	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]

; 340  : 		PointOnSegAy = A1y;

  000bd	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _A1y$[ebp]

; 341  : 		PointOnSegAz = A1z;

  000c2	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _A1z$[ebp]
  000c7	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  000cb	8b 45 44	 mov	 eax, DWORD PTR _PointOnSegAy$[ebp]

; 342  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,

  000ce	f3 0f 10 6d 3c	 movss	 xmm5, DWORD PTR _epsilon$[ebp]
  000d3	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  000d7	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000da	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  000de	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  000e1	50		 push	 eax
  000e2	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  000e5	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  000e8	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  000eb	51		 push	 ecx
  000ec	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  000f1	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  000f4	83 ec 24	 sub	 esp, 36			; 00000024H
  000f7	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  000fd	f3 0f 11 4c 24
	1c		 movss	 DWORD PTR [esp+28], xmm1
  00103	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  00109	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0010e	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00114	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00119	f3 0f 11 64 24
	10		 movss	 DWORD PTR [esp+16], xmm4
  0011f	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00125	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012b	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00130	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  00136	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0013b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00140	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00145	83 c4 3c	 add	 esp, 60			; 0000003cH

; 415  : 									B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 									epsilon, s, t,
; 417  : 									PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 									PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  00148	8b e5		 mov	 esp, ebp
  0014a	5d		 pop	 ebp
  0014b	c3		 ret	 0
$LN2@IntersectL:

; 343  : 									  infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 344  : 									  PointOnSegBz, temp);
; 345  : 	}
; 346  : 	// Line/Segment B is degenerate ---- Special Case #1
; 347  : 	else if (L22 < epsilon_squared)

  0014c	0f 2f c3	 comiss	 xmm0, xmm3
  0014f	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  00154	0f 86 8d 00 00
	00		 jbe	 $LN4@IntersectL

; 348  : 	{
; 349  : 		PointOnSegBx = B1x;

  0015a	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]

; 350  : 		PointOnSegBy = B1y;

  0015d	f3 0f 10 55 24	 movss	 xmm2, DWORD PTR _B1y$[ebp]

; 351  : 		PointOnSegBz = B1z;

  00162	f3 0f 10 5d 28	 movss	 xmm3, DWORD PTR _B1z$[ebp]

; 352  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  00167	f3 0f 10 65 3c	 movss	 xmm4, DWORD PTR _epsilon$[ebp]
  0016c	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00170	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00173	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00177	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0017a	f3 0f 11 18	 movss	 DWORD PTR [eax], xmm3
  0017e	8d 45 f0	 lea	 eax, DWORD PTR _temp$[ebp]
  00181	50		 push	 eax
  00182	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00185	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00188	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0018b	51		 push	 ecx
  0018c	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00191	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00194	83 ec 24	 sub	 esp, 36			; 00000024H
  00197	f3 0f 11 5c 24
	20		 movss	 DWORD PTR [esp+32], xmm3
  0019d	f3 0f 11 54 24
	1c		 movss	 DWORD PTR [esp+28], xmm2
  001a3	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  001a9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  001ae	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  001b4	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  001ba	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  001c0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001c6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001cb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001db	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001e0	83 c4 3c	 add	 esp, 60			; 0000003cH

; 415  : 									B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 									epsilon, s, t,
; 417  : 									PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 									PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  001e3	8b e5		 mov	 esp, ebp
  001e5	5d		 pop	 ebp
  001e6	c3		 ret	 0
$LN4@IntersectL:

; 353  : 									  infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 354  : 									  PointOnSegAz, temp);
; 355  : 	}
; 356  : 	// Neither line/segment is degenerate
; 357  : 	else
; 358  : 	{
; 359  : 		// Compute more parameters from Equation (3) in the text.
; 360  : 		float ABx = B1x - A1x;

  001e7	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]

; 361  : 		float ABy = B1y - A1y;
; 362  : 		float ABz = B1z - A1z;
; 363  : 
; 364  : 		// and from Equation (15).
; 365  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  001ec	0f 28 e2	 movaps	 xmm4, xmm2

; 366  : 
; 367  : 		float DetL = L11 * L22 - L12 * L12;

  001ef	f3 0f 59 dd	 mulss	 xmm3, xmm5
  001f3	f3 0f 59 e6	 mulss	 xmm4, xmm6
  001f7	f3 0f 11 45 f0	 movss	 DWORD PTR _ABx$1$[ebp], xmm0
  001fc	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00201	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00206	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  0020d	f3 0f 11 45 ec	 movss	 DWORD PTR _ABy$1$[ebp], xmm0
  00212	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00217	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  0021c	f3 0f 11 45 e8	 movss	 DWORD PTR _ABz$1$[ebp], xmm0
  00221	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00226	f3 0f 59 c7	 mulss	 xmm0, xmm7
  0022a	f3 0f 5c e0	 subss	 xmm4, xmm0
  0022e	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00233	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 368  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 369  : 		if (FABS(DetL) < epsilon)

  00237	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  0023c	f3 0f 5c e0	 subss	 xmm4, xmm0
  00240	0f 28 c4	 movaps	 xmm0, xmm4
  00243	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00247	f3 0f 5c d8	 subss	 xmm3, xmm0
  0024b	0f 28 c3	 movaps	 xmm0, xmm3
  0024e	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00255	0f 2f c8	 comiss	 xmm1, xmm0
  00258	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Laz$1$[ebp]
  0025d	0f 86 e0 00 00
	00		 jbe	 $LN6@IntersectL

; 370  : 		{
; 371  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,

  00263	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00266	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  0026b	ff 75 50	 push	 DWORD PTR _PointOnSegBy$[ebp]
  0026e	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00271	ff 75 48	 push	 DWORD PTR _PointOnSegAz$[ebp]
  00274	ff 75 44	 push	 DWORD PTR _PointOnSegAy$[ebp]
  00277	ff 75 40	 push	 DWORD PTR _PointOnSegAx$[ebp]
  0027a	51		 push	 ecx
  0027b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00280	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00283	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00288	83 ec 48	 sub	 esp, 72			; 00000048H
  0028b	f3 0f 11 44 24
	44		 movss	 DWORD PTR [esp+68], xmm0
  00291	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00296	f3 0f 11 44 24
	40		 movss	 DWORD PTR [esp+64], xmm0
  0029c	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002a1	f3 0f 11 54 24
	3c		 movss	 DWORD PTR [esp+60], xmm2
  002a7	f3 0f 11 44 24
	38		 movss	 DWORD PTR [esp+56], xmm0
  002ad	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002b2	f3 0f 11 44 24
	34		 movss	 DWORD PTR [esp+52], xmm0
  002b8	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002bd	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  002c3	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002c8	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  002ce	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002d3	f3 0f 11 44 24
	28		 movss	 DWORD PTR [esp+40], xmm0
  002d9	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002de	f3 0f 11 44 24
	24		 movss	 DWORD PTR [esp+36], xmm0
  002e4	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  002e9	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  002ef	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR [esp+28], xmm7
  002f5	f3 0f 11 74 24
	18		 movss	 DWORD PTR [esp+24], xmm6
  002fb	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00301	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00306	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  0030c	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  00311	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00317	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0031c	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  00322	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00327	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0032d	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  00332	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00337	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  0033c	83 c4 68	 add	 esp, 104		; 00000068H

; 415  : 									B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 									epsilon, s, t,
; 417  : 									PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 									PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  0033f	8b e5		 mov	 esp, ebp
  00341	5d		 pop	 ebp
  00342	c3		 ret	 0
$LN6@IntersectL:

; 372  : 												   Lax, Lay, Laz,
; 373  : 												   B1x, B1y, B1z, B2x, B2y, B2z,
; 374  : 												   Lbx, Lby, Lbz,
; 375  : 												   infinite_lines, epsilon,
; 376  : 												   PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 377  : 												   PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 378  : 		}
; 379  : 		// The general case
; 380  : 		else
; 381  : 		{
; 382  : 			// from Equation (15)
; 383  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;
; 384  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;
; 385  : 
; 386  : 			float t = (L11 * rb - ra * L12) / DetL; // Equation (12)
; 387  : 
; 388  : #ifdef USE_CRAMERS_RULE
; 389  : 			float s = (L22 * ra - rb * L12) / DetL;
; 390  : #else
; 391  : 			float s = (ra - L12 * t) / L11;       // Equation (13)
; 392  : #endif // USE_CRAMERS_RULE
; 393  : 
; 394  : #ifdef CHECK_ANSWERS
; 395  : 			float check_ra = s * L11 + t * L12;
; 396  : 			float check_rb = s * L12 + t * L22;
; 397  : 			assert(FABS(check_ra - ra) < epsilon);
; 398  : 			assert(FABS(check_rb - rb) < epsilon);
; 399  : #endif // CHECK_ANSWERS
; 400  : 
; 401  : 			// if we are dealing with infinite lines or if parameters s and t both
; 402  : 			// lie in the range [0,1] then just compute the points using Equations
; 403  : 			// (1) and (2) from the text.
; 404  : 			PointOnSegAx = (A1x + s * Lax);
; 405  : 			PointOnSegAy = (A1y + s * Lay);
; 406  : 			PointOnSegAz = (A1z + s * Laz);
; 407  : 			PointOnSegBx = (B1x + t * Lbx);
; 408  : 			PointOnSegBy = (B1y + t * Lby);
; 409  : 			PointOnSegBz = (B1z + t * Lbz);
; 410  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 411  : 			// handle this case.
; 412  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00343	80 7d 38 00	 cmp	 BYTE PTR _infinite_lines$[ebp], 0
  00347	f3 0f 10 55 ec	 movss	 xmm2, DWORD PTR _ABy$1$[ebp]
  0034c	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ABx$1$[ebp]
  00351	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00355	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00358	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0035c	8b 4d 44	 mov	 ecx, DWORD PTR _PointOnSegAy$[ebp]
  0035f	8b 55 48	 mov	 edx, DWORD PTR _PointOnSegAz$[ebp]
  00362	56		 push	 esi
  00363	f3 0f 58 d0	 addss	 xmm2, xmm0
  00367	8b 75 4c	 mov	 esi, DWORD PTR _PointOnSegBx$[ebp]
  0036a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0036f	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00373	57		 push	 edi
  00374	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _Lbx$1$[ebp]
  00379	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  00380	f3 0f 59 4d f0	 mulss	 xmm1, DWORD PTR _ABx$1$[ebp]
  00385	f3 0f 58 d0	 addss	 xmm2, xmm0
  00389	8b 7d 50	 mov	 edi, DWORD PTR _PointOnSegBy$[ebp]
  0038c	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABy$1$[ebp]
  00391	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00396	f3 0f 5c c8	 subss	 xmm1, xmm0
  0039a	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0039f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  003a4	f3 0f 5c c8	 subss	 xmm1, xmm0
  003a8	0f 28 c2	 movaps	 xmm0, xmm2
  003ab	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003af	f3 0f 59 cd	 mulss	 xmm1, xmm5
  003b3	f3 0f 5c c8	 subss	 xmm1, xmm0
  003b7	f3 0f 5e cb	 divss	 xmm1, xmm3
  003bb	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  003c0	0f 28 c1	 movaps	 xmm0, xmm1
  003c3	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003c7	f3 0f 10 65 e4	 movss	 xmm4, DWORD PTR _Lbx$1$[ebp]
  003cc	f3 0f 5c d0	 subss	 xmm2, xmm0
  003d0	f3 0f 5e d5	 divss	 xmm2, xmm5
  003d4	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lby$1$[ebp]
  003d9	0f 28 c2	 movaps	 xmm0, xmm2
  003dc	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003e0	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  003e5	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  003e9	0f 28 c2	 movaps	 xmm0, xmm2
  003ec	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003f0	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  003f3	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  003f8	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  003fc	0f 28 c2	 movaps	 xmm0, xmm2
  003ff	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00403	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  00408	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  0040c	0f 28 c1	 movaps	 xmm0, xmm1
  0040f	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00413	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  00418	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0041c	0f 28 c1	 movaps	 xmm0, xmm1
  0041f	f3 0f 59 c5	 mulss	 xmm0, xmm5
  00423	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00428	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  0042c	0f 28 c1	 movaps	 xmm0, xmm1
  0042f	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00434	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00439	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0043d	8b 45 40	 mov	 eax, DWORD PTR _PointOnSegAx$[ebp]
  00440	0f 85 bf 00 00
	00		 jne	 $LN12@IntersectL
  00446	0f 57 c0	 xorps	 xmm0, xmm0
  00449	0f 2f c2	 comiss	 xmm0, xmm2
  0044c	77 23		 ja	 SHORT $LN10@IntersectL
  0044e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00456	0f 2f d0	 comiss	 xmm2, xmm0
  00459	77 16		 ja	 SHORT $LN10@IntersectL
  0045b	0f 57 db	 xorps	 xmm3, xmm3
  0045e	0f 2f d9	 comiss	 xmm3, xmm1
  00461	f3 0f 10 5d f4	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  00466	77 09		 ja	 SHORT $LN10@IntersectL
  00468	0f 2f c8	 comiss	 xmm1, xmm0
  0046b	0f 86 94 00 00
	00		 jbe	 $LN12@IntersectL
$LN10@IntersectL:

; 413  : 			{
; 414  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,

  00471	ff 75 54	 push	 DWORD PTR _PointOnSegBz$[ebp]
  00474	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00479	57		 push	 edi
  0047a	56		 push	 esi
  0047b	52		 push	 edx
  0047c	51		 push	 ecx
  0047d	50		 push	 eax
  0047e	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00481	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [esp+56], xmm1
  00487	f3 0f 11 54 24
	34		 movss	 DWORD PTR [esp+52], xmm2
  0048d	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  00493	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00498	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  0049e	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  004a3	f3 0f 11 6c 24
	28		 movss	 DWORD PTR [esp+40], xmm5
  004a9	f3 0f 11 64 24
	24		 movss	 DWORD PTR [esp+36], xmm4
  004af	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  004b5	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004ba	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  004c0	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004c5	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  004cb	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  004d0	f3 0f 11 5c 24
	14		 movss	 DWORD PTR [esp+20], xmm3
  004d6	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  004dc	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  004e2	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004e8	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  004ed	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004f3	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  004f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fd	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  00502	83 c4 54	 add	 esp, 84			; 00000054H
$LN12@IntersectL:
  00505	5f		 pop	 edi
  00506	5e		 pop	 esi

; 415  : 									B1x, B1y, B1z, Lbx, Lby, Lbz,
; 416  : 									epsilon, s, t,
; 417  : 									PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 418  : 									PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 419  : 			}
; 420  : 		}
; 421  : 	}
; 422  : 
; 423  : }

  00507	8b e5		 mov	 esp, ebp
  00509	5d		 pop	 ebp
  0050a	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z
_TEXT	SEGMENT
_Lbx$1$ = -28						; size = 4
_Laz$1$ = -24						; size = 4
_ABz$1$ = -20						; size = 4
_epsilon_squared$1$ = -20				; size = 4
_ABy$1$ = -16						; size = 4
_ABx$1$ = -12						; size = 4
_temp$ = -12						; size = 4
_Lby$1$ = -8						; size = 4
_Lbz$1$ = -4						; size = 4
_A1x$ = 8						; size = 4
_A1y$ = 12						; size = 4
_A1z$ = 16						; size = 4
_A2x$ = 20						; size = 4
_A2y$ = 24						; size = 4
_A2z$ = 28						; size = 4
_B1x$ = 32						; size = 4
_B1y$ = 36						; size = 4
_B1z$ = 40						; size = 4
_B2x$ = 44						; size = 4
_B2y$ = 48						; size = 4
_B2z$ = 52						; size = 4
_infinite_lines$ = 56					; size = 1
_epsilon$ = 60						; size = 4
_PointOnSegAx$ = 64					; size = 4
_PointOnSegAy$ = 68					; size = 4
_PointOnSegAz$ = 72					; size = 4
_PointOnSegBx$ = 76					; size = 4
_PointOnSegBy$ = 80					; size = 4
_PointOnSegBz$ = 84					; size = 4
_NearestPointX$ = 88					; size = 4
_NearestPointY$ = 92					; size = 4
_NearestPointZ$ = 96					; size = 4
_NearestVectorX$ = 100					; size = 4
_NearestVectorY$ = 104					; size = 4
_NearestVectorZ$ = 108					; size = 4
_true_intersection$ = 112				; size = 4
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z PROC ; IntersectLineSegments, COMDAT

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 481  : 	float temp = 0.f;
; 482  : 	float epsilon_squared = epsilon * epsilon;
; 483  : 
; 484  : 	// Compute parameters from Equations (1) and (2) in the text
; 485  : 	float Lax = A2x - A1x;
; 486  : 	float Lay = A2y - A1y;
; 487  : 	float Laz = A2z - A1z;
; 488  : 	float Lbx = B2x - B1x;
; 489  : 	float Lby = B2y - B1y;
; 490  : 	float Lbz = B2z - B1z;

  00006	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  0000b	f3 0f 5c 45 28	 subss	 xmm0, DWORD PTR _B1z$[ebp]
  00010	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00015	f3 0f 10 75 14	 movss	 xmm6, DWORD PTR _A2x$[ebp]
  0001a	f3 0f 10 7d 18	 movss	 xmm7, DWORD PTR _A2y$[ebp]
  0001f	f3 0f 5c 75 08	 subss	 xmm6, DWORD PTR _A1x$[ebp]
  00024	f3 0f 5c 7d 0c	 subss	 xmm7, DWORD PTR _A1y$[ebp]
  00029	f3 0f 10 55 2c	 movss	 xmm2, DWORD PTR _B2x$[ebp]
  0002e	f3 0f 10 65 30	 movss	 xmm4, DWORD PTR _B2y$[ebp]
  00033	f3 0f 5c 55 20	 subss	 xmm2, DWORD PTR _B1x$[ebp]
  00038	f3 0f 5c 65 24	 subss	 xmm4, DWORD PTR _B1y$[ebp]
  0003d	f3 0f 11 45 fc	 movss	 DWORD PTR _Lbz$1$[ebp], xmm0

; 491  : 	// From Equation (15)
; 492  : 	float L11 =  (Lax * Lax) + (Lay * Lay) + (Laz * Laz);

  00042	0f 28 ef	 movaps	 xmm5, xmm7
  00045	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00049	0f 28 c6	 movaps	 xmm0, xmm6
  0004c	56		 push	 esi
  0004d	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 493  : 	float L22 =  (Lbx * Lbx) + (Lby * Lby) + (Lbz * Lbz);
; 494  : 
; 495  : 	// Line/Segment A is degenerate ---- Special Case #1
; 496  : 	if (L11 < epsilon_squared)

  00051	8b 75 40	 mov	 esi, DWORD PTR _PointOnSegAx$[ebp]
  00054	f3 0f 59 ef	 mulss	 xmm5, xmm7
  00058	0f 28 dc	 movaps	 xmm3, xmm4
  0005b	57		 push	 edi
  0005c	f3 0f 11 4d ec	 movss	 DWORD PTR _epsilon_squared$1$[ebp], xmm1
  00061	f3 0f 10 4d 1c	 movss	 xmm1, DWORD PTR _A2z$[ebp]
  00066	f3 0f 5c 4d 10	 subss	 xmm1, DWORD PTR _A1z$[ebp]
  0006b	f3 0f 58 e8	 addss	 xmm5, xmm0
  0006f	f3 0f 59 dc	 mulss	 xmm3, xmm4
  00073	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _temp$[ebp], 0
  0007a	f3 0f 11 55 e4	 movss	 DWORD PTR _Lbx$1$[ebp], xmm2
  0007f	f3 0f 11 65 f8	 movss	 DWORD PTR _Lby$1$[ebp], xmm4
  00084	0f 28 c1	 movaps	 xmm0, xmm1
  00087	f3 0f 11 4d e8	 movss	 DWORD PTR _Laz$1$[ebp], xmm1
  0008c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00090	f3 0f 58 e8	 addss	 xmm5, xmm0
  00094	0f 28 c2	 movaps	 xmm0, xmm2
  00097	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0009b	f3 0f 58 d8	 addss	 xmm3, xmm0
  0009f	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  000a4	f3 0f 59 c0	 mulss	 xmm0, xmm0
  000a8	f3 0f 58 d8	 addss	 xmm3, xmm0
  000ac	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _epsilon_squared$1$[ebp]
  000b1	0f 2f c5	 comiss	 xmm0, xmm5
  000b4	0f 86 97 00 00
	00		 jbe	 $LN2@IntersectL

; 497  : 	{
; 498  : 		PointOnSegAx = A1x;

  000ba	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _A1x$[ebp]

; 499  : 		PointOnSegAy = A1y;

  000bf	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]

; 500  : 		PointOnSegAz = A1z;

  000c2	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  000c5	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _A1y$[ebp]
  000ca	f3 0f 10 6d 10	 movss	 xmm5, DWORD PTR _A1z$[ebp]

; 501  : 		FindNearestPointOnLineSegment(B1x, B1y, B1z, Lbx, Lby, Lbz, A1x, A1y, A1z,

  000cf	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  000d2	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  000d7	f3 0f 11 0e	 movss	 DWORD PTR [esi], xmm1
  000db	f3 0f 11 1f	 movss	 DWORD PTR [edi], xmm3
  000df	f3 0f 11 28	 movss	 DWORD PTR [eax], xmm5
  000e3	8d 45 f4	 lea	 eax, DWORD PTR _temp$[ebp]
  000e6	50		 push	 eax
  000e7	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  000ea	50		 push	 eax
  000eb	51		 push	 ecx
  000ec	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  000ef	51		 push	 ecx
  000f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f5	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  000f8	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  000fd	83 ec 24	 sub	 esp, 36			; 00000024H
  00100	f3 0f 11 6c 24
	20		 movss	 DWORD PTR [esp+32], xmm5
  00106	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR [esp+28], xmm3
  0010c	f3 0f 11 4c 24
	18		 movss	 DWORD PTR [esp+24], xmm1
  00112	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  00118	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  0011d	f3 0f 11 64 24
	10		 movss	 DWORD PTR [esp+16], xmm4
  00123	f3 0f 11 54 24
	0c		 movss	 DWORD PTR [esp+12], xmm2
  00129	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0012f	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  00134	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0013a	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  00149	83 c4 3c	 add	 esp, 60			; 0000003cH

; 502  : 									  infinite_lines, epsilon, PointOnSegBx, PointOnSegBy,
; 503  : 									  PointOnSegBz, temp);
; 504  : 	}

  0014c	e9 b2 03 00 00	 jmp	 $LN8@IntersectL
$LN2@IntersectL:

; 505  : 	// Line/Segment B is degenerate ---- Special Case #1
; 506  : 	else if (L22 < epsilon_squared)

  00151	0f 2f c3	 comiss	 xmm0, xmm3
  00154	0f 86 93 00 00
	00		 jbe	 $LN4@IntersectL

; 507  : 	{
; 508  : 		PointOnSegBx = B1x;

  0015a	8b 45 4c	 mov	 eax, DWORD PTR _PointOnSegBx$[ebp]
  0015d	f3 0f 10 55 20	 movss	 xmm2, DWORD PTR _B1x$[ebp]

; 509  : 		PointOnSegBy = B1y;

  00162	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00165	f3 0f 10 5d 24	 movss	 xmm3, DWORD PTR _B1y$[ebp]

; 510  : 		PointOnSegBz = B1z;

  0016a	f3 0f 10 65 28	 movss	 xmm4, DWORD PTR _B1z$[ebp]

; 511  : 		FindNearestPointOnLineSegment(A1x, A1y, A1z, Lax, Lay, Laz, B1x, B1y, B1z,

  0016f	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00172	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00177	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  0017b	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0017e	f3 0f 11 19	 movss	 DWORD PTR [ecx], xmm3
  00182	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4
  00186	8d 45 f4	 lea	 eax, DWORD PTR _temp$[ebp]
  00189	50		 push	 eax
  0018a	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0018d	50		 push	 eax
  0018e	57		 push	 edi
  0018f	56		 push	 esi
  00190	51		 push	 ecx
  00191	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00196	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00199	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  0019e	83 ec 24	 sub	 esp, 36			; 00000024H
  001a1	f3 0f 11 64 24
	20		 movss	 DWORD PTR [esp+32], xmm4
  001a7	f3 0f 11 5c 24
	1c		 movss	 DWORD PTR [esp+28], xmm3
  001ad	f3 0f 11 54 24
	18		 movss	 DWORD PTR [esp+24], xmm2
  001b3	f3 0f 11 4c 24
	14		 movss	 DWORD PTR [esp+20], xmm1
  001b9	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  001bf	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  001c5	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  001cb	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  001d0	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  001d6	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  001db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e0	e8 00 00 00 00	 call	 ?FindNearestPointOnLineSegment@@YAXMMMMMMMMM_NMAAM111@Z ; FindNearestPointOnLineSegment
  001e5	83 c4 3c	 add	 esp, 60			; 0000003cH

; 512  : 									  infinite_lines, epsilon, PointOnSegAx, PointOnSegAy,
; 513  : 									  PointOnSegAz, temp);
; 514  : 	}

  001e8	e9 16 03 00 00	 jmp	 $LN8@IntersectL
$LN4@IntersectL:

; 515  : 	// Neither line/segment is degenerate
; 516  : 	else
; 517  : 	{
; 518  : 		// Compute more parameters from Equation (3) in the text.
; 519  : 		float ABx = B1x - A1x;

  001ed	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]

; 520  : 		float ABy = B1y - A1y;
; 521  : 		float ABz = B1z - A1z;
; 522  : 
; 523  : 		// and from Equation (15).
; 524  : 		float L12 = -(Lax * Lbx) - (Lay * Lby) - (Laz * Lbz);

  001f2	0f 28 e2	 movaps	 xmm4, xmm2
  001f5	f3 0f 5c 45 08	 subss	 xmm0, DWORD PTR _A1x$[ebp]
  001fa	f3 0f 59 e6	 mulss	 xmm4, xmm6

; 525  : 
; 526  : 		float DetL = L11 * L22 - L12 * L12;

  001fe	f3 0f 59 dd	 mulss	 xmm3, xmm5
  00202	f3 0f 11 45 f4	 movss	 DWORD PTR _ABx$1$[ebp], xmm0
  00207	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  0020c	f3 0f 5c 45 0c	 subss	 xmm0, DWORD PTR _A1y$[ebp]
  00211	0f 57 25 00 00
	00 00		 xorps	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  00218	f3 0f 11 45 f0	 movss	 DWORD PTR _ABy$1$[ebp], xmm0
  0021d	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  00222	f3 0f 5c 45 10	 subss	 xmm0, DWORD PTR _A1z$[ebp]
  00227	f3 0f 11 45 ec	 movss	 DWORD PTR _ABz$1$[ebp], xmm0
  0022c	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  00231	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00235	f3 0f 5c e0	 subss	 xmm4, xmm0
  00239	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0023e	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 527  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 528  : 		if (FABS(DetL) < epsilon)

  00242	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  00247	f3 0f 5c e0	 subss	 xmm4, xmm0
  0024b	0f 28 c4	 movaps	 xmm0, xmm4
  0024e	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00252	f3 0f 5c d8	 subss	 xmm3, xmm0
  00256	0f 28 c3	 movaps	 xmm0, xmm3
  00259	0f 54 05 00 00
	00 00		 andps	 xmm0, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00260	0f 2f c8	 comiss	 xmm1, xmm0
  00263	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR _Laz$1$[ebp]
  00268	0f 86 e3 00 00
	00		 jbe	 $LN6@IntersectL

; 529  : 		{
; 530  : 			FindNearestPointOfParallelLineSegments(A1x, A1y, A1z, A2x, A2y, A2z,

  0026e	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  00271	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00274	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00277	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  0027c	50		 push	 eax
  0027d	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  00280	51		 push	 ecx
  00281	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00284	50		 push	 eax
  00285	57		 push	 edi
  00286	56		 push	 esi
  00287	51		 push	 ecx
  00288	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0028d	ff 75 38	 push	 DWORD PTR _infinite_lines$[ebp]
  00290	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00295	83 ec 48	 sub	 esp, 72			; 00000048H
  00298	f3 0f 11 44 24
	44		 movss	 DWORD PTR [esp+68], xmm0
  0029e	f3 0f 10 45 f8	 movss	 xmm0, DWORD PTR _Lby$1$[ebp]
  002a3	f3 0f 11 44 24
	40		 movss	 DWORD PTR [esp+64], xmm0
  002a9	f3 0f 10 45 34	 movss	 xmm0, DWORD PTR _B2z$[ebp]
  002ae	f3 0f 11 54 24
	3c		 movss	 DWORD PTR [esp+60], xmm2
  002b4	f3 0f 11 44 24
	38		 movss	 DWORD PTR [esp+56], xmm0
  002ba	f3 0f 10 45 30	 movss	 xmm0, DWORD PTR _B2y$[ebp]
  002bf	f3 0f 11 44 24
	34		 movss	 DWORD PTR [esp+52], xmm0
  002c5	f3 0f 10 45 2c	 movss	 xmm0, DWORD PTR _B2x$[ebp]
  002ca	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  002d0	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  002d5	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  002db	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  002e0	f3 0f 11 44 24
	28		 movss	 DWORD PTR [esp+40], xmm0
  002e6	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  002eb	f3 0f 11 44 24
	24		 movss	 DWORD PTR [esp+36], xmm0
  002f1	f3 0f 10 45 1c	 movss	 xmm0, DWORD PTR _A2z$[ebp]
  002f6	f3 0f 11 4c 24
	20		 movss	 DWORD PTR [esp+32], xmm1
  002fc	f3 0f 11 7c 24
	1c		 movss	 DWORD PTR [esp+28], xmm7
  00302	f3 0f 11 74 24
	18		 movss	 DWORD PTR [esp+24], xmm6
  00308	f3 0f 11 44 24
	14		 movss	 DWORD PTR [esp+20], xmm0
  0030e	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _A2y$[ebp]
  00313	f3 0f 11 44 24
	10		 movss	 DWORD PTR [esp+16], xmm0
  00319	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _A2x$[ebp]
  0031e	f3 0f 11 44 24
	0c		 movss	 DWORD PTR [esp+12], xmm0
  00324	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  00329	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  0032f	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  00334	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0033a	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  0033f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00344	e8 00 00 00 00	 call	 ?FindNearestPointOfParallelLineSegments@@YAXMMMMMMMMMMMMMMMMMM_NMAAM11111@Z ; FindNearestPointOfParallelLineSegments
  00349	83 c4 68	 add	 esp, 104		; 00000068H

; 531  : 												   Lax, Lay, Laz,
; 532  : 												   B1x, B1y, B1z, B2x, B2y, B2z,
; 533  : 												   Lbx, Lby, Lbz,
; 534  : 												   infinite_lines, epsilon,
; 535  : 												   PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 536  : 												   PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 537  : 		}

  0034c	e9 b2 01 00 00	 jmp	 $LN8@IntersectL
$LN6@IntersectL:

; 538  : 		// The general case
; 539  : 		else
; 540  : 		{
; 541  : 			// from Equation (15)
; 542  : 			float ra = Lax * ABx + Lay * ABy + Laz * ABz;
; 543  : 			float rb = -Lbx * ABx - Lby * ABy - Lbz * ABz;
; 544  : 
; 545  : 			float t = (L11 * rb - ra * L12) / DetL; // Equation (12)
; 546  : 
; 547  : #ifdef USE_CRAMERS_RULE
; 548  : 			float s = (L22 * ra - rb * L12) / DetL;
; 549  : #else
; 550  : 			float s = (ra - L12 * t) / L11;       // Equation (13)
; 551  : #endif // USE_CRAMERS_RULE
; 552  : 
; 553  : #ifdef CHECK_ANSWERS
; 554  : 			float check_ra = s * L11 + t * L12;
; 555  : 			float check_rb = s * L12 + t * L22;
; 556  : 			assert(FABS(check_ra - ra) < epsilon);
; 557  : 			assert(FABS(check_rb - rb) < epsilon);
; 558  : #endif // CHECK_ANSWERS
; 559  : 
; 560  : 			// if we are dealing with infinite lines or if parameters s and t both
; 561  : 			// lie in the range [0,1] then just compute the points using Equations
; 562  : 			// (1) and (2) from the text.
; 563  : 			PointOnSegAx = (A1x + s * Lax);
; 564  : 			PointOnSegAy = (A1y + s * Lay);
; 565  : 			PointOnSegAz = (A1z + s * Laz);
; 566  : 			PointOnSegBx = (B1x + t * Lbx);
; 567  : 			PointOnSegBy = (B1y + t * Lby);
; 568  : 			PointOnSegBz = (B1z + t * Lbz);
; 569  : 			// otherwise, at least one of s and t is outside of [0,1] and we have to
; 570  : 			// handle this case.
; 571  : 			if (false == infinite_lines && (OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  00351	80 7d 38 00	 cmp	 BYTE PTR _infinite_lines$[ebp], 0
  00355	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _ABy$1$[ebp]
  0035a	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _ABx$1$[ebp]
  0035f	f3 0f 59 c6	 mulss	 xmm0, xmm6
  00363	8b 7d 44	 mov	 edi, DWORD PTR _PointOnSegAy$[ebp]
  00366	f3 0f 59 d7	 mulss	 xmm2, xmm7
  0036a	8b 45 48	 mov	 eax, DWORD PTR _PointOnSegAz$[ebp]
  0036d	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  00370	8b 55 54	 mov	 edx, DWORD PTR _PointOnSegBz$[ebp]
  00373	f3 0f 58 d0	 addss	 xmm2, xmm0
  00377	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  0037c	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00380	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR _Lbx$1$[ebp]
  00385	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000
  0038c	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _ABx$1$[ebp]
  00391	f3 0f 58 d0	 addss	 xmm2, xmm0
  00395	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _ABy$1$[ebp]
  0039a	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _Lby$1$[ebp]
  0039f	f3 0f 5c c8	 subss	 xmm1, xmm0
  003a3	f3 0f 10 45 ec	 movss	 xmm0, DWORD PTR _ABz$1$[ebp]
  003a8	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  003ad	f3 0f 5c c8	 subss	 xmm1, xmm0
  003b1	0f 28 c2	 movaps	 xmm0, xmm2
  003b4	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003b8	f3 0f 59 cd	 mulss	 xmm1, xmm5
  003bc	f3 0f 5c c8	 subss	 xmm1, xmm0
  003c0	f3 0f 5e cb	 divss	 xmm1, xmm3
  003c4	f3 0f 10 5d e8	 movss	 xmm3, DWORD PTR _Laz$1$[ebp]
  003c9	0f 28 c1	 movaps	 xmm0, xmm1
  003cc	f3 0f 59 c4	 mulss	 xmm0, xmm4
  003d0	f3 0f 10 65 e4	 movss	 xmm4, DWORD PTR _Lbx$1$[ebp]
  003d5	f3 0f 5c d0	 subss	 xmm2, xmm0
  003d9	f3 0f 5e d5	 divss	 xmm2, xmm5
  003dd	f3 0f 10 6d f8	 movss	 xmm5, DWORD PTR _Lby$1$[ebp]
  003e2	0f 28 c2	 movaps	 xmm0, xmm2
  003e5	f3 0f 59 c6	 mulss	 xmm0, xmm6
  003e9	f3 0f 58 45 08	 addss	 xmm0, DWORD PTR _A1x$[ebp]
  003ee	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  003f2	0f 28 c2	 movaps	 xmm0, xmm2
  003f5	f3 0f 59 c7	 mulss	 xmm0, xmm7
  003f9	f3 0f 58 45 0c	 addss	 xmm0, DWORD PTR _A1y$[ebp]
  003fe	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
  00402	0f 28 c2	 movaps	 xmm0, xmm2
  00405	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00409	f3 0f 58 45 10	 addss	 xmm0, DWORD PTR _A1z$[ebp]
  0040e	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00412	0f 28 c1	 movaps	 xmm0, xmm1
  00415	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00419	f3 0f 58 45 20	 addss	 xmm0, DWORD PTR _B1x$[ebp]
  0041e	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00422	0f 28 c1	 movaps	 xmm0, xmm1
  00425	8b 4d 50	 mov	 ecx, DWORD PTR _PointOnSegBy$[ebp]
  00428	f3 0f 59 c5	 mulss	 xmm0, xmm5
  0042c	f3 0f 58 45 24	 addss	 xmm0, DWORD PTR _B1y$[ebp]
  00431	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00435	0f 28 c1	 movaps	 xmm0, xmm1
  00438	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  0043d	f3 0f 58 45 28	 addss	 xmm0, DWORD PTR _B1z$[ebp]
  00442	f3 0f 11 02	 movss	 DWORD PTR [edx], xmm0
  00446	0f 85 b7 00 00
	00		 jne	 $LN8@IntersectL
  0044c	0f 57 c0	 xorps	 xmm0, xmm0
  0044f	0f 2f c2	 comiss	 xmm0, xmm2
  00452	77 1b		 ja	 SHORT $LN10@IntersectL
  00454	0f 2f 15 00 00
	00 00		 comiss	 xmm2, DWORD PTR __real@3f800000
  0045b	77 12		 ja	 SHORT $LN10@IntersectL
  0045d	0f 2f c1	 comiss	 xmm0, xmm1
  00460	77 0d		 ja	 SHORT $LN10@IntersectL
  00462	0f 2f 0d 00 00
	00 00		 comiss	 xmm1, DWORD PTR __real@3f800000
  00469	0f 86 94 00 00
	00		 jbe	 $LN8@IntersectL
$LN10@IntersectL:

; 572  : 			{
; 573  : 				AdjustNearestPoints(A1x, A1y, A1z, Lax, Lay, Laz,

  0046f	f3 0f 10 45 3c	 movss	 xmm0, DWORD PTR _epsilon$[ebp]
  00474	52		 push	 edx
  00475	51		 push	 ecx
  00476	ff 75 4c	 push	 DWORD PTR _PointOnSegBx$[ebp]
  00479	50		 push	 eax
  0047a	57		 push	 edi
  0047b	56		 push	 esi
  0047c	83 ec 3c	 sub	 esp, 60			; 0000003cH
  0047f	f3 0f 11 4c 24
	38		 movss	 DWORD PTR [esp+56], xmm1
  00485	f3 0f 11 54 24
	34		 movss	 DWORD PTR [esp+52], xmm2
  0048b	f3 0f 11 44 24
	30		 movss	 DWORD PTR [esp+48], xmm0
  00491	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _Lbz$1$[ebp]
  00496	f3 0f 11 44 24
	2c		 movss	 DWORD PTR [esp+44], xmm0
  0049c	f3 0f 10 45 28	 movss	 xmm0, DWORD PTR _B1z$[ebp]
  004a1	f3 0f 11 6c 24
	28		 movss	 DWORD PTR [esp+40], xmm5
  004a7	f3 0f 11 64 24
	24		 movss	 DWORD PTR [esp+36], xmm4
  004ad	f3 0f 11 44 24
	20		 movss	 DWORD PTR [esp+32], xmm0
  004b3	f3 0f 10 45 24	 movss	 xmm0, DWORD PTR _B1y$[ebp]
  004b8	f3 0f 11 44 24
	1c		 movss	 DWORD PTR [esp+28], xmm0
  004be	f3 0f 10 45 20	 movss	 xmm0, DWORD PTR _B1x$[ebp]
  004c3	f3 0f 11 44 24
	18		 movss	 DWORD PTR [esp+24], xmm0
  004c9	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _A1z$[ebp]
  004ce	f3 0f 11 5c 24
	14		 movss	 DWORD PTR [esp+20], xmm3
  004d4	f3 0f 11 7c 24
	10		 movss	 DWORD PTR [esp+16], xmm7
  004da	f3 0f 11 74 24
	0c		 movss	 DWORD PTR [esp+12], xmm6
  004e0	f3 0f 11 44 24
	08		 movss	 DWORD PTR [esp+8], xmm0
  004e6	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _A1y$[ebp]
  004eb	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  004f1	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _A1x$[ebp]
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	e8 00 00 00 00	 call	 ?AdjustNearestPoints@@YAXMMMMMMMMMMMMMMMAAM00000@Z ; AdjustNearestPoints
  00500	83 c4 54	 add	 esp, 84			; 00000054H
$LN8@IntersectL:

; 574  : 									B1x, B1y, B1z, Lbx, Lby, Lbz,
; 575  : 									epsilon, s, t,
; 576  : 									PointOnSegAx, PointOnSegAy, PointOnSegAz,
; 577  : 									PointOnSegBx, PointOnSegBy, PointOnSegBz);
; 578  : 			}
; 579  : 		}
; 580  : 	}
; 581  : 
; 582  : 	NearestPointX = 0.5f * (PointOnSegAx + PointOnSegBx);

  00503	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00507	0f 57 db	 xorps	 xmm3, xmm3
  0050a	8b 4d 4c	 mov	 ecx, DWORD PTR _PointOnSegBx$[ebp]
  0050d	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@3f000000
  00515	8b 45 58	 mov	 eax, DWORD PTR _NearestPointX$[ebp]

; 583  : 	NearestPointY = 0.5f * (PointOnSegAy + PointOnSegBy);
; 584  : 	NearestPointZ = 0.5f * (PointOnSegAz + PointOnSegBz);

  00518	8b 55 48	 mov	 edx, DWORD PTR _PointOnSegAz$[ebp]
  0051b	f3 0f 58 01	 addss	 xmm0, DWORD PTR [ecx]

; 585  : 
; 586  : 	NearestVectorX = PointOnSegBx - PointOnSegAx;
; 587  : 	NearestVectorY = PointOnSegBy - PointOnSegAy;
; 588  : 	NearestVectorZ = PointOnSegBz - PointOnSegAz;
; 589  : 
; 590  : 	// optional check to indicate if the lines truly intersect
; 591  : 	true_intersection = (FABS(NearestVectorX) +

  0051f	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  00527	f3 0f 59 c1	 mulss	 xmm0, xmm1
  0052b	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0052f	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00533	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00536	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0053a	8b 45 5c	 mov	 eax, DWORD PTR _NearestPointY$[ebp]
  0053d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00541	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00545	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00549	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0054c	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00550	8b 45 60	 mov	 eax, DWORD PTR _NearestPointZ$[ebp]
  00553	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00557	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  0055b	f3 0f 10 01	 movss	 xmm0, DWORD PTR [ecx]
  0055f	f3 0f 5c 06	 subss	 xmm0, DWORD PTR [esi]
  00563	8b 4d 64	 mov	 ecx, DWORD PTR _NearestVectorX$[ebp]
  00566	8b 45 50	 mov	 eax, DWORD PTR _PointOnSegBy$[ebp]
  00569	8b 75 68	 mov	 esi, DWORD PTR _NearestVectorY$[ebp]
  0056c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00570	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00574	f3 0f 5c 07	 subss	 xmm0, DWORD PTR [edi]
  00578	8b 45 54	 mov	 eax, DWORD PTR _PointOnSegBz$[ebp]
  0057b	f3 0f 11 06	 movss	 DWORD PTR [esi], xmm0
  0057f	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00583	f3 0f 5c 0a	 subss	 xmm1, DWORD PTR [edx]
  00587	8b 45 6c	 mov	 eax, DWORD PTR _NearestVectorZ$[ebp]
  0058a	f3 0f 11 08	 movss	 DWORD PTR [eax], xmm1
  0058e	f3 0f 10 11	 movss	 xmm2, DWORD PTR [ecx]
  00592	0f 2f da	 comiss	 xmm3, xmm2
  00595	76 03		 jbe	 SHORT $LN13@IntersectL
  00597	0f 57 d4	 xorps	 xmm2, xmm4
$LN13@IntersectL:
  0059a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  0059e	0f 2f d8	 comiss	 xmm3, xmm0
  005a1	5f		 pop	 edi
  005a2	5e		 pop	 esi
  005a3	76 03		 jbe	 SHORT $LN14@IntersectL
  005a5	0f 57 c4	 xorps	 xmm0, xmm4
$LN14@IntersectL:
  005a8	0f 2f d9	 comiss	 xmm3, xmm1
  005ab	76 03		 jbe	 SHORT $LN16@IntersectL
  005ad	0f 57 cc	 xorps	 xmm1, xmm4
$LN16@IntersectL:
  005b0	8b 45 70	 mov	 eax, DWORD PTR _true_intersection$[ebp]
  005b3	f3 0f 58 c2	 addss	 xmm0, xmm2
  005b7	f3 0f 58 c1	 addss	 xmm0, xmm1
  005bb	f3 0f 10 4d 3c	 movss	 xmm1, DWORD PTR _epsilon$[ebp]
  005c0	0f 2f c8	 comiss	 xmm1, xmm0
  005c3	0f 97 c1	 seta	 cl
  005c6	88 08		 mov	 BYTE PTR [eax], cl

; 592  : 						 FABS(NearestVectorY) +
; 593  : 						 FABS(NearestVectorZ)) < epsilon ? true : false;
; 594  : }

  005c8	8b e5		 mov	 esp, ebp
  005ca	5d		 pop	 ebp
  005cb	c3		 ret	 0
?IntersectLineSegments@@YAXMMMMMMMMMMMM_NMAAM11111111111AA_N@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp
;	COMDAT ?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z
_TEXT	SEGMENT
_DetL$1$ = -32						; size = 4
tv4753 = -28						; size = 4
tv4555 = -28						; size = 4
tv4844 = -24						; size = 4
tv4556 = -24						; size = 4
_L12$1$ = -20						; size = 4
_La$$sroa$2733$1$ = -16					; size = 4
_Lb$$sroa$2726$1$ = -12					; size = 4
_La$$sroa$2730$1$ = -8					; size = 4
_La$$sroa$2729$1$ = -4					; size = 4
_D$1$ = 8						; size = 4
_A1$ = 8						; size = 4
tv4719 = 12						; size = 4
tv4671 = 12						; size = 4
_s$1$sroa$2725$ = 12					; size = 4
_s$1$sroa$2724$ = 12					; size = 4
_A2$ = 12						; size = 4
_D$1$ = 16						; size = 4
_B1$ = 16						; size = 4
_Lb$$sroa$2727$1$ = 20					; size = 4
_B2$ = 20						; size = 4
_OutA$ = 24						; size = 4
_OutB$ = 28						; size = 4
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z PROC ; IntersectLineSegments, COMDAT

; 229  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00006	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00009	8b 55 10	 mov	 edx, DWORD PTR _B1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 229  : {

  0000c	56		 push	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0000d	8b 75 08	 mov	 esi, DWORD PTR _A1$[ebp]
  00010	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00015	f3 0f 10 20	 movss	 xmm4, DWORD PTR [eax]
  00019	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [eax+8]
  0001e	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]
  00023	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00027	f3 0f 10 5a 04	 movss	 xmm3, DWORD PTR [edx+4]
  0002c	f3 0f 5c e0	 subss	 xmm4, xmm0
  00030	f3 0f 11 45 e4	 movss	 DWORD PTR tv4753[ebp], xmm0
  00035	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  0003a	f3 0f 5c c8	 subss	 xmm1, xmm0
  0003e	f3 0f 11 45 e8	 movss	 DWORD PTR tv4844[ebp], xmm0

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00043	0f 28 c2	 movaps	 xmm0, xmm2

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00046	f3 0f 11 55 f8	 movss	 DWORD PTR _La$$sroa$2730$1$[ebp], xmm2

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0004b	f3 0f 59 c2	 mulss	 xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 229  : {

  0004f	57		 push	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00050	8b 7d 14	 mov	 edi, DWORD PTR _B2$[ebp]
  00053	f3 0f 11 65 f0	 movss	 DWORD PTR _La$$sroa$2733$1$[ebp], xmm4

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00058	f3 0f 11 45 08	 movss	 DWORD PTR _D$1$[ebp], xmm0

; 306  :     z = fz;

  0005d	0f 28 c4	 movaps	 xmm0, xmm4
  00060	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00064	f3 0f 10 6f 04	 movss	 xmm5, DWORD PTR [edi+4]
  00069	f3 0f 10 3f	 movss	 xmm7, DWORD PTR [edi]
  0006d	f3 0f 5c eb	 subss	 xmm5, xmm3
  00071	f3 0f 5c 3a	 subss	 xmm7, DWORD PTR [edx]
  00075	f3 0f 10 77 08	 movss	 xmm6, DWORD PTR [edi+8]
  0007a	f3 0f 5c 72 08	 subss	 xmm6, DWORD PTR [edx+8]
  0007f	f3 0f 11 4d fc	 movss	 DWORD PTR _La$$sroa$2729$1$[ebp], xmm1
  00084	f3 0f 11 6d 14	 movss	 DWORD PTR _Lb$$sroa$2727$1$[ebp], xmm5

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  00089	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _D$1$[ebp]
  0008e	f3 0f 58 e8	 addss	 xmm5, xmm0
  00092	0f 28 c1	 movaps	 xmm0, xmm1
  00095	f3 0f 59 c1	 mulss	 xmm0, xmm1

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00099	f3 0f 11 75 f4	 movss	 DWORD PTR _Lb$$sroa$2726$1$[ebp], xmm6

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  0009e	f3 0f 58 e8	 addss	 xmm5, xmm0
  000a2	f3 0f 11 6d 08	 movss	 DWORD PTR _D$1$[ebp], xmm5
  000a7	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _Lb$$sroa$2727$1$[ebp]
  000ac	0f 28 c5	 movaps	 xmm0, xmm5
  000af	f3 0f 59 c5	 mulss	 xmm0, xmm5
  000b3	f3 0f 11 45 10	 movss	 DWORD PTR _D$1$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 238  : 	float L11 =  D3DXVec3LengthSq(&La);

  000b8	0f 28 c7	 movaps	 xmm0, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000bb	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _D$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 238  : 	float L11 =  D3DXVec3LengthSq(&La);

  000c0	f3 0f 59 c7	 mulss	 xmm0, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000c4	f3 0f 58 d0	 addss	 xmm2, xmm0
  000c8	0f 28 c6	 movaps	 xmm0, xmm6
  000cb	f3 0f 59 c6	 mulss	 xmm0, xmm6
  000cf	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 242  : 	if (L11 < epsilon_squared)

  000d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  000db	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1884 :     return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;

  000df	f3 0f 11 55 10	 movss	 DWORD PTR _D$1$[ebp], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 242  : 	if (L11 < epsilon_squared)

  000e4	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _La$$sroa$2730$1$[ebp]
  000e9	0f 86 c7 00 00
	00		 jbe	 $LN2@IntersectL

; 243  : 	{
; 244  : 		OutA = A1;

  000ef	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  000f2	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  000f6	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _D$1$[ebp]

; 243  : 	{
; 244  : 		OutA = A1;

  000fb	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  000ff	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00107	0f 2f c2	 comiss	 xmm0, xmm2

; 243  : 	{
; 244  : 		OutA = A1;

  0010a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0010d	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  00110	76 17		 jbe	 SHORT $LN25@IntersectL
$LN404@IntersectL:

; 312  : }

  00112	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00115	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0011f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00122	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00125	8b e5		 mov	 esp, ebp
  00127	5d		 pop	 ebp
  00128	c3		 ret	 0
$LN25@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00129	f3 0f 10 0e	 movss	 xmm1, DWORD PTR [esi]
  0012d	0f 57 db	 xorps	 xmm3, xmm3
  00130	f3 0f 10 46 04	 movss	 xmm0, DWORD PTR [esi+4]
  00135	f3 0f 5c 42 04	 subss	 xmm0, DWORD PTR [edx+4]
  0013a	f3 0f 10 22	 movss	 xmm4, DWORD PTR [edx]
  0013e	f3 0f 5c cc	 subss	 xmm1, xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00142	f3 0f 59 c5	 mulss	 xmm0, xmm5

; 306  :     z = fz;

  00146	f3 0f 59 cf	 mulss	 xmm1, xmm7

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0014a	f3 0f 58 c8	 addss	 xmm1, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0014e	f3 0f 10 46 08	 movss	 xmm0, DWORD PTR [esi+8]
  00153	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00158	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0015c	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  00160	f3 0f 5e ca	 divss	 xmm1, xmm2

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00164	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
  0016c	0f 28 c1	 movaps	 xmm0, xmm1
  0016f	f3 0f 5d c2	 minss	 xmm0, xmm2
  00173	0f 2f d8	 comiss	 xmm3, xmm0
  00176	76 05		 jbe	 SHORT $LN31@IntersectL
  00178	0f 57 c9	 xorps	 xmm1, xmm1
  0017b	eb 08		 jmp	 SHORT $LN30@IntersectL
$LN31@IntersectL:
  0017d	0f 2f d1	 comiss	 xmm2, xmm1
  00180	77 03		 ja	 SHORT $LN30@IntersectL
  00182	0f 28 ca	 movaps	 xmm1, xmm2
$LN30@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  00185	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
  00188	f3 0f 59 f9	 mulss	 xmm7, xmm1
  0018c	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  0018d	f3 0f 59 e9	 mulss	 xmm5, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 312  : }

  00191	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00192	f3 0f 59 f1	 mulss	 xmm6, xmm1

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00196	f3 0f 58 fc	 addss	 xmm7, xmm4
  0019a	f3 0f 58 6a 04	 addss	 xmm5, DWORD PTR [edx+4]
  0019f	f3 0f 58 72 08	 addss	 xmm6, DWORD PTR [edx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  001a4	f3 0f 11 38	 movss	 DWORD PTR [eax], xmm7
  001a8	f3 0f 11 68 04	 movss	 DWORD PTR [eax+4], xmm5
  001ad	f3 0f 11 70 08	 movss	 DWORD PTR [eax+8], xmm6

; 312  : }

  001b2	8b e5		 mov	 esp, ebp
  001b4	5d		 pop	 ebp
  001b5	c3		 ret	 0
$LN2@IntersectL:

; 245  : 		FindNearestPointOnLineSegment(B1, Lb, A1,
; 246  : 									  OutB, temp);
; 247  : 	}
; 248  : 	// Line/Segment B is degenerate ---- Special Case #1
; 249  : 	else if (L22 < epsilon_squared)

  001b6	0f 2f 45 10	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
  001ba	0f 86 cc 00 00
	00		 jbe	 $LN4@IntersectL

; 250  : 	{
; 251  : 		OutB = B1;

  001c0	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  001c3	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  001c7	f3 0f 10 6d 08	 movss	 xmm5, DWORD PTR _D$1$[ebp]

; 250  : 	{
; 251  : 		OutB = B1;

  001cc	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  001d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  001d8	0f 2f c5	 comiss	 xmm0, xmm5

; 250  : 	{
; 251  : 		OutB = B1;

  001db	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001de	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  001e1	76 17		 jbe	 SHORT $LN50@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  001e3	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  001e6	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  001ea	5f		 pop	 edi
  001eb	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  001ef	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001f2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 312  : }

  001f5	5e		 pop	 esi
  001f6	8b e5		 mov	 esp, ebp
  001f8	5d		 pop	 ebp
  001f9	c3		 ret	 0
$LN50@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  001fa	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [edx+4]
  001ff	0f 57 f6	 xorps	 xmm6, xmm6
  00202	f3 0f 5c 4e 04	 subss	 xmm1, DWORD PTR [esi+4]
  00207	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  0020b	f3 0f 10 3e	 movss	 xmm7, DWORD PTR [esi]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0020f	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _La$$sroa$2729$1$[ebp]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00214	f3 0f 5c c7	 subss	 xmm0, xmm7

; 306  :     z = fz;

  00218	f3 0f 59 ca	 mulss	 xmm1, xmm2

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0021c	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00220	f3 0f 58 c8	 addss	 xmm1, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00224	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  00229	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0022e	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00232	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  00236	f3 0f 5e cd	 divss	 xmm1, xmm5

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0023a	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f800000
  00242	0f 28 c1	 movaps	 xmm0, xmm1
  00245	f3 0f 5d c5	 minss	 xmm0, xmm5
  00249	0f 2f f0	 comiss	 xmm6, xmm0
  0024c	76 05		 jbe	 SHORT $LN56@IntersectL
  0024e	0f 57 c9	 xorps	 xmm1, xmm1
  00251	eb 08		 jmp	 SHORT $LN55@IntersectL
$LN56@IntersectL:
  00253	0f 2f e9	 comiss	 xmm5, xmm1
  00256	77 03		 ja	 SHORT $LN55@IntersectL
  00258	0f 28 cd	 movaps	 xmm1, xmm5
$LN55@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  0025b	8b 45 18	 mov	 eax, DWORD PTR _OutA$[ebp]
  0025e	f3 0f 59 e1	 mulss	 xmm4, xmm1
  00262	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00263	f3 0f 59 d1	 mulss	 xmm2, xmm1

; 305  :     y = fy;

  00267	f3 0f 59 d9	 mulss	 xmm3, xmm1

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0026b	f3 0f 58 e7	 addss	 xmm4, xmm7
  0026f	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  00274	f3 0f 58 5e 08	 addss	 xmm3, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00279	f3 0f 11 20	 movss	 DWORD PTR [eax], xmm4

; 312  : }

  0027d	5e		 pop	 esi

; 49   : 	Nearest = A1 + parameter * L;

  0027e	f3 0f 11 50 04	 movss	 DWORD PTR [eax+4], xmm2
  00283	f3 0f 11 58 08	 movss	 DWORD PTR [eax+8], xmm3

; 312  : }

  00288	8b e5		 mov	 esp, ebp
  0028a	5d		 pop	 ebp
  0028b	c3		 ret	 0
$LN4@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0028c	f3 0f 10 02	 movss	 xmm0, DWORD PTR [edx]
  00290	f3 0f 5c 45 e4	 subss	 xmm0, DWORD PTR tv4753[ebp]
  00295	f3 0f 5c 5e 04	 subss	 xmm3, DWORD PTR [esi+4]
  0029a	f3 0f 11 45 e4	 movss	 DWORD PTR tv4555[ebp], xmm0
  0029f	f3 0f 10 42 08	 movss	 xmm0, DWORD PTR [edx+8]
  002a4	f3 0f 5c 45 e8	 subss	 xmm0, DWORD PTR tv4844[ebp]
  002a9	f3 0f 11 45 e8	 movss	 DWORD PTR tv4556[ebp], xmm0

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002ae	0f 28 c5	 movaps	 xmm0, xmm5
  002b1	f3 0f 59 c2	 mulss	 xmm0, xmm2
  002b5	f3 0f 11 45 ec	 movss	 DWORD PTR _L12$1$[ebp], xmm0

; 306  :     z = fz;

  002ba	0f 28 c7	 movaps	 xmm0, xmm7

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002bd	f3 0f 10 6d ec	 movss	 xmm5, DWORD PTR _L12$1$[ebp]

; 306  :     z = fz;

  002c2	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002c6	f3 0f 58 e8	 addss	 xmm5, xmm0
  002ca	0f 28 c6	 movaps	 xmm0, xmm6
  002cd	f3 0f 59 c1	 mulss	 xmm0, xmm1
  002d1	0f 28 cd	 movaps	 xmm1, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 264  : 		float DetL = L11 * L22 - L12 * L12;

  002d4	f3 0f 10 6d 10	 movss	 xmm5, DWORD PTR _D$1$[ebp]
  002d9	f3 0f 59 6d 08	 mulss	 xmm5, DWORD PTR _D$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  002de	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 262  : 		float L12 = -D3DXVec3Dot(&La, &Lb);

  002e2	0f 57 0d 00 00
	00 00		 xorps	 xmm1, DWORD PTR __xmm@80000000800000008000000080000000

; 264  : 		float DetL = L11 * L22 - L12 * L12;

  002e9	0f 28 c1	 movaps	 xmm0, xmm1
  002ec	f3 0f 11 4d ec	 movss	 DWORD PTR _L12$1$[ebp], xmm1
  002f1	f3 0f 59 c1	 mulss	 xmm0, xmm1
  002f5	f3 0f 5c e8	 subss	 xmm5, xmm0

; 265  : 		// Lines/Segments A and B are parallel ---- special case #2.
; 266  : 		if (FABS(DetL) < epsilon)

  002f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00301	0f 28 cd	 movaps	 xmm1, xmm5
  00304	f3 0f 11 6d e0	 movss	 DWORD PTR _DetL$1$[ebp], xmm5
  00309	0f 54 0d 00 00
	00 00		 andps	 xmm1, DWORD PTR __xmm@7fffffff7fffffff7fffffff7fffffff
  00310	0f 2f c1	 comiss	 xmm0, xmm1
  00313	f3 0f 10 6d 14	 movss	 xmm5, DWORD PTR _Lb$$sroa$2727$1$[ebp]
  00318	0f 86 64 02 00
	00		 jbe	 $LN6@IntersectL

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  0031e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00326	0f 57 c9	 xorps	 xmm1, xmm1
  00329	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
  0032d	76 1b		 jbe	 SHORT $LN103@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  0032f	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
  00332	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]

; 38   : 		return;

  00336	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _s$1$sroa$2725$[ebp]
  0033b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0033f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00342	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00345	8b 45 0c	 mov	 eax, DWORD PTR _A2$[ebp]
  00348	eb 73		 jmp	 SHORT $LN102@IntersectL
$LN103@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  0034a	f3 0f 10 45 e4	 movss	 xmm0, DWORD PTR tv4555[ebp]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0034f	f3 0f 10 75 e8	 movss	 xmm6, DWORD PTR tv4556[ebp]
  00354	f3 0f 59 da	 mulss	 xmm3, xmm2

; 306  :     z = fz;

  00358	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0035c	f3 0f 58 d8	 addss	 xmm3, xmm0
  00360	f3 0f 10 45 fc	 movss	 xmm0, DWORD PTR _La$$sroa$2729$1$[ebp]
  00365	f3 0f 59 f0	 mulss	 xmm6, xmm0
  00369	f3 0f 58 de	 addss	 xmm3, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  0036d	f3 0f 5e 5d 08	 divss	 xmm3, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00372	f3 0f 5d 1d 00
	00 00 00	 minss	 xmm3, DWORD PTR __real@3f800000
  0037a	0f 2f cb	 comiss	 xmm1, xmm3
  0037d	76 03		 jbe	 SHORT $LN109@IntersectL
  0037f	0f 57 db	 xorps	 xmm3, xmm3
$LN109@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  00382	8b 4d 18	 mov	 ecx, DWORD PTR _OutA$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 305  :     y = fy;

  00385	0f 28 c8	 movaps	 xmm1, xmm0
  00388	f3 0f 10 75 f4	 movss	 xmm6, DWORD PTR _Lb$$sroa$2726$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0038d	0f 28 c4	 movaps	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  00390	f3 0f 59 d3	 mulss	 xmm2, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00394	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00398	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]

; 305  :     y = fy;

  0039d	f3 0f 59 cb	 mulss	 xmm1, xmm3

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  003a1	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]
  003a5	f3 0f 58 4e 08	 addss	 xmm1, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  003aa	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  003ae	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  003b3	f3 0f 10 55 f8	 movss	 xmm2, DWORD PTR _La$$sroa$2730$1$[ebp]
  003b8	f3 0f 11 49 08	 movss	 DWORD PTR [ecx+8], xmm1
$LN102@IntersectL:

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  003bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  003c5	0f 2f 45 08	 comiss	 xmm0, DWORD PTR _D$1$[ebp]
  003c9	77 4f		 ja	 SHORT $LN400@IntersectL
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003cb	f3 0f 10 47 04	 movss	 xmm0, DWORD PTR [edi+4]
  003d0	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]
  003d5	f3 0f 10 0f	 movss	 xmm1, DWORD PTR [edi]
  003d9	f3 0f 5c 0e	 subss	 xmm1, DWORD PTR [esi]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003dd	f3 0f 59 c2	 mulss	 xmm0, xmm2

; 306  :     z = fz;

  003e1	f3 0f 59 cc	 mulss	 xmm1, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  003e5	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003ed	f3 0f 58 c8	 addss	 xmm1, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  003f1	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  003f6	f3 0f 5c 46 08	 subss	 xmm0, DWORD PTR [esi+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  003fb	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _La$$sroa$2729$1$[ebp]
  00400	f3 0f 58 c8	 addss	 xmm1, xmm0
  00404	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  00407	f3 0f 5e 4d 08	 divss	 xmm1, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0040c	f3 0f 5d ca	 minss	 xmm1, xmm2
  00410	0f 2f c1	 comiss	 xmm0, xmm1
  00413	76 15		 jbe	 SHORT $LN127@IntersectL
  00415	0f 57 c9	 xorps	 xmm1, xmm1

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  00418	eb 10		 jmp	 SHORT $LN127@IntersectL
$LN400@IntersectL:
  0041a	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR _s$1$sroa$2724$[ebp]
  0041f	0f 57 c0	 xorps	 xmm0, xmm0
  00422	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3f800000
$LN127@IntersectL:

; 112  : 		if (s[0] < 0.f && s[1] < 0.f)

  0042a	0f 2f c3	 comiss	 xmm0, xmm3
  0042d	76 33		 jbe	 SHORT $LN81@IntersectL
  0042f	0f 2f c1	 comiss	 xmm0, xmm1
  00432	76 2e		 jbe	 SHORT $LN81@IntersectL

; 113  : 		{
; 114  : 			OutA = A1;
; 115  : 			if (s[0] < s[1])

  00434	0f 2f cb	 comiss	 xmm1, xmm3
  00437	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0043b	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0043f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00442	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00445	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00448	0f 86 21 06 00
	00		 jbe	 $LN403@IntersectL
$LN87@IntersectL:

; 312  : }

  0044e	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00452	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00456	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00459	5f		 pop	 edi
  0045a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0045d	5e		 pop	 esi
  0045e	8b e5		 mov	 esp, ebp
  00460	5d		 pop	 ebp
  00461	c3		 ret	 0
$LN81@IntersectL:

; 124  : 		else if (s[0] > 1.f && s[1] > 1.f)

  00462	0f 2f da	 comiss	 xmm3, xmm2
  00465	76 2f		 jbe	 SHORT $LN85@IntersectL
  00467	0f 2f ca	 comiss	 xmm1, xmm2
  0046a	76 2a		 jbe	 SHORT $LN85@IntersectL

; 125  : 		{
; 126  : 			OutA = A2;
; 127  : 			if (s[0] < s[1])

  0046c	0f 2f cb	 comiss	 xmm1, xmm3
  0046f	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  00473	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00477	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0047a	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0047d	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  00480	76 cc		 jbe	 SHORT $LN87@IntersectL

; 312  : }

  00482	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00486	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  0048a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0048d	5f		 pop	 edi
  0048e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00491	5e		 pop	 esi
  00492	8b e5		 mov	 esp, ebp
  00494	5d		 pop	 ebp
  00495	c3		 ret	 0
$LN85@IntersectL:

; 138  : 			temp = 0.5f * (FMAX(0.0f, FMIN(1.0f, s[0])) + FMAX(0.0f, FMIN(1.0f, s[1])));

  00496	f3 0f 5d da	 minss	 xmm3, xmm2
  0049a	0f 2f c3	 comiss	 xmm0, xmm3
  0049d	76 03		 jbe	 SHORT $LN94@IntersectL
  0049f	0f 57 db	 xorps	 xmm3, xmm3
$LN94@IntersectL:
  004a2	f3 0f 5d ca	 minss	 xmm1, xmm2
  004a6	0f 2f c1	 comiss	 xmm0, xmm1
  004a9	76 03		 jbe	 SHORT $LN100@IntersectL
  004ab	0f 57 c9	 xorps	 xmm1, xmm1
$LN100@IntersectL:
  004ae	f3 0f 58 cb	 addss	 xmm1, xmm3
  004b2	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004ba	0f 28 d1	 movaps	 xmm2, xmm1
  004bd	0f 28 c1	 movaps	 xmm0, xmm1
  004c0	f3 0f 59 55 f8	 mulss	 xmm2, DWORD PTR _La$$sroa$2730$1$[ebp]
  004c5	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _La$$sroa$2729$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004ca	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  004cf	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  004d3	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  004d8	f3 0f 58 0e	 addss	 xmm1, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 139  : 			OutA = A1 + temp * La;

  004dc	f3 0f 11 09	 movss	 DWORD PTR [ecx], xmm1
  004e0	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  004e5	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  004ea	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3c23d70b
  004f2	0f 2f 65 10	 comiss	 xmm4, DWORD PTR _D$1$[ebp]
  004f6	0f 87 16 fc ff
	ff		 ja	 $LN404@IntersectL
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  004fc	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
  00501	f3 0f 10 22	 movss	 xmm4, DWORD PTR [edx]
  00505	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]
  0050a	f3 0f 5c cc	 subss	 xmm1, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  0050e	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3f800000
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  00516	f3 0f 59 d5	 mulss	 xmm2, xmm5

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  0051a	f3 0f 59 c6	 mulss	 xmm0, xmm6
  0051e	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00522	f3 0f 58 d1	 addss	 xmm2, xmm1
  00526	0f 57 c9	 xorps	 xmm1, xmm1
  00529	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  0052d	f3 0f 5e 55 10	 divss	 xmm2, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00532	0f 28 c2	 movaps	 xmm0, xmm2
  00535	f3 0f 5d c3	 minss	 xmm0, xmm3
  00539	0f 2f c8	 comiss	 xmm1, xmm0
  0053c	76 05		 jbe	 SHORT $LN167@IntersectL
  0053e	0f 57 d2	 xorps	 xmm2, xmm2
  00541	eb 08		 jmp	 SHORT $LN166@IntersectL
$LN167@IntersectL:
  00543	0f 2f da	 comiss	 xmm3, xmm2
  00546	77 03		 ja	 SHORT $LN166@IntersectL
  00548	0f 28 d3	 movaps	 xmm2, xmm3
$LN166@IntersectL:

; 49   : 	Nearest = A1 + parameter * L;

  0054b	8b 45 1c	 mov	 eax, DWORD PTR _OutB$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0054e	0f 28 ca	 movaps	 xmm1, xmm2
  00551	0f 28 c2	 movaps	 xmm0, xmm2
  00554	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00558	5f		 pop	 edi
  00559	f3 0f 59 d7	 mulss	 xmm2, xmm7
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 312  : }

  0055d	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0055e	f3 0f 58 4a 04	 addss	 xmm1, DWORD PTR [edx+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00563	f3 0f 59 c6	 mulss	 xmm0, xmm6

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00567	f3 0f 58 d4	 addss	 xmm2, xmm4
  0056b	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00570	f3 0f 11 10	 movss	 DWORD PTR [eax], xmm2
  00574	f3 0f 11 48 04	 movss	 DWORD PTR [eax+4], xmm1
  00579	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0

; 312  : }

  0057e	8b e5		 mov	 esp, ebp
  00580	5d		 pop	 ebp
  00581	c3		 ret	 0
$LN6@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00582	f3 0f 10 4d e4	 movss	 xmm1, DWORD PTR tv4555[ebp]
  00587	0f 28 e3	 movaps	 xmm4, xmm3
  0058a	f3 0f 59 e2	 mulss	 xmm4, xmm2
  0058e	0f 28 c1	 movaps	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00591	8b 7d 18	 mov	 edi, DWORD PTR _OutA$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00594	f3 0f 59 45 f0	 mulss	 xmm0, DWORD PTR _La$$sroa$2733$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  00599	8b 4d 1c	 mov	 ecx, DWORD PTR _OutB$[ebp]
  0059c	f3 0f 59 dd	 mulss	 xmm3, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005a0	f3 0f 58 e0	 addss	 xmm4, xmm0
  005a4	f3 0f 59 cf	 mulss	 xmm1, xmm7
  005a8	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv4556[ebp]
  005ad	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _La$$sroa$2729$1$[ebp]
  005b2	f3 0f 58 d9	 addss	 xmm3, xmm1

; 304  :     x = fx;

  005b6	0f 28 ca	 movaps	 xmm1, xmm2

; 305  :     y = fy;

  005b9	f3 0f 10 55 fc	 movss	 xmm2, DWORD PTR _La$$sroa$2729$1$[ebp]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  005be	f3 0f 58 e0	 addss	 xmm4, xmm0
  005c2	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR tv4556[ebp]
  005c7	f3 0f 59 c6	 mulss	 xmm0, xmm6
  005cb	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 281  : 			float t = (L11 * rb - ra * L12) / DetL; // Equation (12)

  005cf	0f 28 c4	 movaps	 xmm0, xmm4
  005d2	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _L12$1$[ebp]
  005d7	f3 0f 59 5d 08	 mulss	 xmm3, DWORD PTR _D$1$[ebp]
  005dc	f3 0f 5c d8	 subss	 xmm3, xmm0
  005e0	f3 0f 5e 5d e0	 divss	 xmm3, DWORD PTR _DetL$1$[ebp]

; 282  : 
; 283  : #ifdef USE_CRAMERS_RULE
; 284  : 			float s = (L22 * ra - rb * L12) / DetL;
; 285  : #else
; 286  : 			float s = (ra - L12 * t) / L11;       // Equation (13)

  005e5	0f 28 c3	 movaps	 xmm0, xmm3
  005e8	f3 0f 59 45 ec	 mulss	 xmm0, DWORD PTR _L12$1$[ebp]
  005ed	f3 0f 5c e0	 subss	 xmm4, xmm0
  005f1	f3 0f 10 45 f0	 movss	 xmm0, DWORD PTR _La$$sroa$2733$1$[ebp]
  005f6	f3 0f 5e 65 08	 divss	 xmm4, DWORD PTR _D$1$[ebp]
  005fb	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 304  :     x = fx;

  005ff	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00603	f3 0f 58 06	 addss	 xmm0, DWORD PTR [esi]

; 305  :     y = fy;

  00607	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0060b	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00610	f3 0f 58 56 08	 addss	 xmm2, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00615	f3 0f 11 07	 movss	 DWORD PTR [edi], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00619	0f 28 c7	 movaps	 xmm0, xmm7
  0061c	f3 0f 59 c3	 mulss	 xmm0, xmm3
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00620	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00625	0f 28 cd	 movaps	 xmm1, xmm5
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 299  : 			OutA = (A1 + s * La);

  00628	f3 0f 11 57 08	 movss	 DWORD PTR [edi+8], xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0062d	0f 28 d6	 movaps	 xmm2, xmm6

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00630	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00634	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00638	0f 57 f6	 xorps	 xmm6, xmm6
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  0063b	0f 2f f4	 comiss	 xmm6, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0063e	f3 0f 58 4a 04	 addss	 xmm1, DWORD PTR [edx+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00643	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00647	f3 0f 58 52 08	 addss	 xmm2, DWORD PTR [edx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 300  : 			OutB = (B1 + t * Lb);

  0064c	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00650	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1
  00655	f3 0f 11 51 08	 movss	 DWORD PTR [ecx+8], xmm2

; 303  : 			if ((OUT_OF_RANGE(s) || OUT_OF_RANGE(t)))

  0065a	f3 0f 10 2d 00
	00 00 00	 movss	 xmm5, DWORD PTR __real@3f800000
  00662	77 1d		 ja	 SHORT $LN208@IntersectL
  00664	0f 2f e5	 comiss	 xmm4, xmm5
  00667	77 0e		 ja	 SHORT $LN10@IntersectL
  00669	0f 2f f3	 comiss	 xmm6, xmm3
  0066c	77 09		 ja	 SHORT $LN10@IntersectL
  0066e	0f 2f dd	 comiss	 xmm3, xmm5
  00671	0f 86 88 04 00
	00		 jbe	 $LN309@IntersectL
$LN10@IntersectL:

; 182  : 	if (OUT_OF_RANGE(s) && OUT_OF_RANGE(t))

  00677	0f 2f f4	 comiss	 xmm6, xmm4
  0067a	77 05		 ja	 SHORT $LN208@IntersectL
  0067c	0f 2f e5	 comiss	 xmm4, xmm5
  0067f	76 12		 jbe	 SHORT $LN206@IntersectL
$LN208@IntersectL:
  00681	0f 2f f3	 comiss	 xmm6, xmm3
  00684	0f 87 d3 01 00
	00		 ja	 $LN209@IntersectL
  0068a	0f 2f dd	 comiss	 xmm3, xmm5
  0068d	0f 87 ca 01 00
	00		 ja	 $LN209@IntersectL
$LN206@IntersectL:

; 193  : 			FindNearestPointOnLineSegment(A1, La, OutB,
; 194  : 										  OutA, s);
; 195  : 			FindNearestPointOnLineSegment(B1, Lb, OutA,
; 196  : 										  OutB, t);
; 197  : 		}
; 198  : 	}
; 199  : 	// otherwise, handle the case where the parameter for only one segment is
; 200  : 	// out of range
; 201  : 	else if (OUT_OF_RANGE(s))

  00693	0f 2f f4	 comiss	 xmm6, xmm4
  00696	0f 87 05 01 00
	00		 ja	 $LN214@IntersectL
  0069c	0f 2f e5	 comiss	 xmm4, xmm5
  0069f	0f 87 fc 00 00
	00		 ja	 $LN214@IntersectL

; 209  : 	else if (OUT_OF_RANGE(t))

  006a5	0f 2f f3	 comiss	 xmm6, xmm3
  006a8	77 09		 ja	 SHORT $LN217@IntersectL
  006aa	0f 2f dd	 comiss	 xmm3, xmm5
  006ad	0f 86 4c 04 00
	00		 jbe	 $LN309@IntersectL
$LN217@IntersectL:

; 210  : 	{
; 211  : 		t = FMAX(0.0f, FMIN(1.0f, t));

  006b3	0f 28 c3	 movaps	 xmm0, xmm3
  006b6	f3 0f 5d c5	 minss	 xmm0, xmm5
  006ba	0f 2f f0	 comiss	 xmm6, xmm0
  006bd	76 05		 jbe	 SHORT $LN241@IntersectL
  006bf	0f 57 db	 xorps	 xmm3, xmm3
  006c2	eb 08		 jmp	 SHORT $LN240@IntersectL
$LN241@IntersectL:
  006c4	0f 2f eb	 comiss	 xmm5, xmm3
  006c7	77 03		 ja	 SHORT $LN240@IntersectL
  006c9	0f 28 dd	 movaps	 xmm3, xmm5
$LN240@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006cc	0f 28 c3	 movaps	 xmm0, xmm3
  006cf	0f 28 cb	 movaps	 xmm1, xmm3
  006d2	f3 0f 59 45 14	 mulss	 xmm0, DWORD PTR _Lb$$sroa$2727$1$[ebp]
  006d7	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _Lb$$sroa$2726$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006dc	f3 0f 58 42 04	 addss	 xmm0, DWORD PTR [edx+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  006e1	f3 0f 59 df	 mulss	 xmm3, xmm7

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  006e5	f3 0f 58 4a 08	 addss	 xmm1, DWORD PTR [edx+8]
  006ea	f3 0f 58 1a	 addss	 xmm3, DWORD PTR [edx]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 212  : 		OutB = B1 + t * Lb;

  006ee	f3 0f 11 19	 movss	 DWORD PTR [ecx], xmm3
  006f2	f3 0f 11 41 04	 movss	 DWORD PTR [ecx+4], xmm0
  006f7	f3 0f 11 49 08	 movss	 DWORD PTR [ecx+8], xmm1

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  006fc	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70b
  00704	0f 2f 55 08	 comiss	 xmm2, DWORD PTR _D$1$[ebp]
  00708	76 14		 jbe	 SHORT $LN376@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  0070a	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  0070e	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  00712	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00715	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00718	5f		 pop	 edi

; 312  : }

  00719	5e		 pop	 esi
  0071a	8b e5		 mov	 esp, ebp
  0071c	5d		 pop	 ebp
  0071d	c3		 ret	 0
$LN376@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0071e	f3 0f 5c 1e	 subss	 xmm3, DWORD PTR [esi]
  00722	f3 0f 5c 46 04	 subss	 xmm0, DWORD PTR [esi+4]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00727	f3 0f 10 55 f0	 movss	 xmm2, DWORD PTR _La$$sroa$2733$1$[ebp]

; 306  :     z = fz;

  0072c	f3 0f 10 65 f8	 movss	 xmm4, DWORD PTR _La$$sroa$2730$1$[ebp]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00731	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00736	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR _La$$sroa$2729$1$[ebp]
  0073b	f3 0f 59 da	 mulss	 xmm3, xmm2

; 306  :     z = fz;

  0073f	f3 0f 59 c4	 mulss	 xmm0, xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00743	f3 0f 59 cf	 mulss	 xmm1, xmm7
  00747	f3 0f 58 d8	 addss	 xmm3, xmm0
  0074b	f3 0f 58 d9	 addss	 xmm3, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  0074f	f3 0f 5e 5d 08	 divss	 xmm3, DWORD PTR _D$1$[ebp]

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00754	0f 28 c3	 movaps	 xmm0, xmm3
  00757	f3 0f 5d c5	 minss	 xmm0, xmm5
  0075b	0f 2f f0	 comiss	 xmm6, xmm0
  0075e	76 05		 jbe	 SHORT $LN382@IntersectL
  00760	0f 57 db	 xorps	 xmm3, xmm3
  00763	eb 08		 jmp	 SHORT $LN381@IntersectL
$LN382@IntersectL:
  00765	0f 2f eb	 comiss	 xmm5, xmm3
  00768	77 03		 ja	 SHORT $LN381@IntersectL
  0076a	0f 28 dd	 movaps	 xmm3, xmm5
$LN381@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0076d	0f 28 cb	 movaps	 xmm1, xmm3
  00770	0f 28 c3	 movaps	 xmm0, xmm3
  00773	f3 0f 59 da	 mulss	 xmm3, xmm2
  00777	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0077b	f3 0f 58 1e	 addss	 xmm3, DWORD PTR [esi]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0077f	f3 0f 59 c7	 mulss	 xmm0, xmm7

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00783	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]
  00788	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  0078d	f3 0f 11 1f	 movss	 DWORD PTR [edi], xmm3
  00791	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1
  00796	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
  0079b	5f		 pop	 edi

; 312  : }

  0079c	5e		 pop	 esi
  0079d	8b e5		 mov	 esp, ebp
  0079f	5d		 pop	 ebp
  007a0	c3		 ret	 0
$LN214@IntersectL:

; 203  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  007a1	0f 28 c4	 movaps	 xmm0, xmm4
  007a4	f3 0f 5d c5	 minss	 xmm0, xmm5
  007a8	0f 2f f0	 comiss	 xmm6, xmm0
  007ab	76 05		 jbe	 SHORT $LN235@IntersectL
  007ad	0f 57 e4	 xorps	 xmm4, xmm4
  007b0	eb 08		 jmp	 SHORT $LN234@IntersectL
$LN235@IntersectL:
  007b2	0f 2f ec	 comiss	 xmm5, xmm4
  007b5	77 03		 ja	 SHORT $LN234@IntersectL
  007b7	0f 28 e5	 movaps	 xmm4, xmm5
$LN234@IntersectL:

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  007ba	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _D$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  007bf	0f 28 d4	 movaps	 xmm2, xmm4
  007c2	f3 0f 59 55 f8	 mulss	 xmm2, DWORD PTR _La$$sroa$2730$1$[ebp]
  007c7	0f 28 c4	 movaps	 xmm0, xmm4
  007ca	f3 0f 59 65 f0	 mulss	 xmm4, DWORD PTR _La$$sroa$2733$1$[ebp]
  007cf	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _La$$sroa$2729$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  007d4	f3 0f 58 26	 addss	 xmm4, DWORD PTR [esi]
  007d8	f3 0f 58 56 04	 addss	 xmm2, DWORD PTR [esi+4]
  007dd	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 204  : 		OutA = A1 + s * La;

  007e2	f3 0f 11 27	 movss	 DWORD PTR [edi], xmm4
  007e6	f3 0f 11 57 04	 movss	 DWORD PTR [edi+4], xmm2
  007eb	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  007f0	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@3c23d70b
  007f8	0f 2f d9	 comiss	 xmm3, xmm1
  007fb	0f 87 6e 02 00
	00		 ja	 $LN403@IntersectL
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00801	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
  00806	f3 0f 5c 22	 subss	 xmm4, DWORD PTR [edx]

; 306  :     z = fz;

  0080a	f3 0f 10 5d 14	 movss	 xmm3, DWORD PTR _Lb$$sroa$2727$1$[ebp]

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0080f	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 306  :     z = fz;

  00814	f3 0f 59 d3	 mulss	 xmm2, xmm3

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00818	f3 0f 59 e7	 mulss	 xmm4, xmm7
  0081c	f3 0f 58 d4	 addss	 xmm2, xmm4
  00820	f3 0f 10 65 f4	 movss	 xmm4, DWORD PTR _Lb$$sroa$2726$1$[ebp]
  00825	f3 0f 59 c4	 mulss	 xmm0, xmm4
  00829	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  0082d	f3 0f 5e d1	 divss	 xmm2, xmm1

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00831	0f 28 c2	 movaps	 xmm0, xmm2
  00834	f3 0f 5d c5	 minss	 xmm0, xmm5
  00838	0f 2f f0	 comiss	 xmm6, xmm0
  0083b	76 05		 jbe	 SHORT $LN349@IntersectL
  0083d	0f 57 d2	 xorps	 xmm2, xmm2
  00840	eb 08		 jmp	 SHORT $LN348@IntersectL
$LN349@IntersectL:
  00842	0f 2f ea	 comiss	 xmm5, xmm2
  00845	77 03		 ja	 SHORT $LN348@IntersectL
  00847	0f 28 d5	 movaps	 xmm2, xmm5
$LN348@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0084a	0f 28 ca	 movaps	 xmm1, xmm2
  0084d	0f 28 c2	 movaps	 xmm0, xmm2
  00850	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00854	f3 0f 59 c4	 mulss	 xmm0, xmm4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 208  : 	}

  00858	e9 82 02 00 00	 jmp	 $LN402@IntersectL
$LN209@IntersectL:

; 183  : 	{
; 184  : 		s = FMAX(0.0f, FMIN(1.0f, s));

  0085d	0f 28 c4	 movaps	 xmm0, xmm4
  00860	f3 0f 5d c5	 minss	 xmm0, xmm5
  00864	0f 2f f0	 comiss	 xmm6, xmm0
  00867	76 05		 jbe	 SHORT $LN223@IntersectL
  00869	0f 57 e4	 xorps	 xmm4, xmm4
  0086c	eb 08		 jmp	 SHORT $LN222@IntersectL
$LN223@IntersectL:
  0086e	0f 2f ec	 comiss	 xmm5, xmm4
  00871	77 03		 ja	 SHORT $LN222@IntersectL
  00873	0f 28 e5	 movaps	 xmm4, xmm5
$LN222@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00876	0f 28 cc	 movaps	 xmm1, xmm4
  00879	0f 28 c4	 movaps	 xmm0, xmm4
  0087c	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _La$$sroa$2730$1$[ebp]
  00881	f3 0f 59 65 f0	 mulss	 xmm4, DWORD PTR _La$$sroa$2733$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00886	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0088b	f3 0f 59 45 fc	 mulss	 xmm0, DWORD PTR _La$$sroa$2729$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00890	f3 0f 58 26	 addss	 xmm4, DWORD PTR [esi]
  00894	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
  00899	f3 0f 11 4d 0c	 movss	 DWORD PTR tv4671[ebp], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 185  : 		OutA = A1 + s * La;

  0089e	f3 0f 11 27	 movss	 DWORD PTR [edi], xmm4
  008a2	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  008a7	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _D$1$[ebp]

; 185  : 		OutA = A1 + s * La;

  008ac	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  008b1	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@3c23d70b
  008b9	0f 2f d1	 comiss	 xmm2, xmm1
  008bc	76 15		 jbe	 SHORT $LN252@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  008be	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]

; 38   : 		return;

  008c2	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _Lb$$sroa$2727$1$[ebp]
  008c7	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  008cb	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  008ce	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  008d1	eb 7d		 jmp	 SHORT $LN251@IntersectL
$LN252@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  008d3	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR tv4671[ebp]
  008d8	f3 0f 5c 5a 04	 subss	 xmm3, DWORD PTR [edx+4]
  008dd	f3 0f 5c 22	 subss	 xmm4, DWORD PTR [edx]
  008e1	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 306  :     z = fz;

  008e6	f3 0f 59 5d 14	 mulss	 xmm3, DWORD PTR _Lb$$sroa$2727$1$[ebp]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  008eb	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Lb$$sroa$2726$1$[ebp]
  008f0	f3 0f 59 e7	 mulss	 xmm4, xmm7
  008f4	f3 0f 58 dc	 addss	 xmm3, xmm4
  008f8	f3 0f 58 d8	 addss	 xmm3, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  008fc	f3 0f 5e d9	 divss	 xmm3, xmm1

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00900	0f 28 c3	 movaps	 xmm0, xmm3
  00903	f3 0f 5d c5	 minss	 xmm0, xmm5
  00907	0f 2f f0	 comiss	 xmm6, xmm0
  0090a	76 05		 jbe	 SHORT $LN258@IntersectL
  0090c	0f 57 db	 xorps	 xmm3, xmm3
  0090f	eb 08		 jmp	 SHORT $LN257@IntersectL
$LN258@IntersectL:
  00911	0f 2f eb	 comiss	 xmm5, xmm3
  00914	77 03		 ja	 SHORT $LN257@IntersectL
  00916	0f 28 dd	 movaps	 xmm3, xmm5
$LN257@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00919	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _Lb$$sroa$2727$1$[ebp]
  0091e	0f 28 c3	 movaps	 xmm0, xmm3
  00921	0f 28 d3	 movaps	 xmm2, xmm3
  00924	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00928	0f 28 cb	 movaps	 xmm1, xmm3
  0092b	f3 0f 59 d4	 mulss	 xmm2, xmm4
  0092f	f3 0f 59 4d f4	 mulss	 xmm1, DWORD PTR _Lb$$sroa$2726$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00934	f3 0f 58 02	 addss	 xmm0, DWORD PTR [edx]
  00938	f3 0f 58 52 04	 addss	 xmm2, DWORD PTR [edx+4]
  0093d	f3 0f 58 4a 08	 addss	 xmm1, DWORD PTR [edx+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00942	f3 0f 11 01	 movss	 DWORD PTR [ecx], xmm0
  00946	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  0094b	f3 0f 11 49 08	 movss	 DWORD PTR [ecx+8], xmm1
$LN251@IntersectL:

; 189  : 		if (OUT_OF_RANGE(t))

  00950	0f 2f f3	 comiss	 xmm6, xmm3
  00953	77 09		 ja	 SHORT $LN211@IntersectL
  00955	0f 2f dd	 comiss	 xmm3, xmm5
  00958	0f 86 a1 01 00
	00		 jbe	 $LN309@IntersectL
$LN211@IntersectL:

; 190  : 		{
; 191  : 			t = FMAX(0.0f, FMIN(1.0f, t));

  0095e	0f 28 c3	 movaps	 xmm0, xmm3
  00961	f3 0f 5d c5	 minss	 xmm0, xmm5
  00965	0f 2f f0	 comiss	 xmm6, xmm0
  00968	76 05		 jbe	 SHORT $LN229@IntersectL
  0096a	0f 57 db	 xorps	 xmm3, xmm3
  0096d	eb 08		 jmp	 SHORT $LN228@IntersectL
$LN229@IntersectL:
  0096f	0f 2f eb	 comiss	 xmm5, xmm3
  00972	77 03		 ja	 SHORT $LN228@IntersectL
  00974	0f 28 dd	 movaps	 xmm3, xmm5
$LN228@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00977	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Lb$$sroa$2726$1$[ebp]
  0097c	0f 28 c3	 movaps	 xmm0, xmm3
  0097f	0f 28 d3	 movaps	 xmm2, xmm3
  00982	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00986	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  0098a	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  0098f	f3 0f 59 df	 mulss	 xmm3, xmm7

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00993	f3 0f 58 52 04	 addss	 xmm2, DWORD PTR [edx+4]
  00998	f3 0f 58 1a	 addss	 xmm3, DWORD PTR [edx]
  0099c	f3 0f 11 45 0c	 movss	 DWORD PTR tv4719[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 192  : 			OutB = B1 + t * Lb;

  009a1	f3 0f 11 19	 movss	 DWORD PTR [ecx], xmm3
  009a5	f3 0f 11 51 04	 movss	 DWORD PTR [ecx+4], xmm2
  009aa	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  009af	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _D$1$[ebp]
  009b4	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@3c23d70b
  009bc	0f 2f e0	 comiss	 xmm4, xmm0
  009bf	76 13		 jbe	 SHORT $LN285@IntersectL

; 36   : 	{
; 37   : 		Nearest = A1;

  009c1	f3 0f 7e 06	 movq	 xmm0, QWORD PTR [esi]
  009c5	66 0f d6 07	 movq	 QWORD PTR [edi], xmm0
  009c9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  009cc	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 38   : 		return;

  009cf	e9 84 00 00 00	 jmp	 $LN284@IntersectL
$LN285@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  009d4	f3 0f 5c 56 04	 subss	 xmm2, DWORD PTR [esi+4]
  009d9	f3 0f 10 26	 movss	 xmm4, DWORD PTR [esi]
  009dd	f3 0f 10 4d 0c	 movss	 xmm1, DWORD PTR tv4719[ebp]
  009e2	f3 0f 5c dc	 subss	 xmm3, xmm4
  009e6	f3 0f 5c 4e 08	 subss	 xmm1, DWORD PTR [esi+8]

; 306  :     z = fz;

  009eb	f3 0f 59 55 f8	 mulss	 xmm2, DWORD PTR _La$$sroa$2730$1$[ebp]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  009f0	f3 0f 59 5d f0	 mulss	 xmm3, DWORD PTR _La$$sroa$2733$1$[ebp]
  009f5	f3 0f 58 d3	 addss	 xmm2, xmm3
  009f9	f3 0f 10 5d fc	 movss	 xmm3, DWORD PTR _La$$sroa$2729$1$[ebp]
  009fe	f3 0f 59 cb	 mulss	 xmm1, xmm3
  00a02	f3 0f 58 d1	 addss	 xmm2, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  00a06	f3 0f 5e d0	 divss	 xmm2, xmm0

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00a0a	0f 28 c2	 movaps	 xmm0, xmm2
  00a0d	f3 0f 5d c5	 minss	 xmm0, xmm5
  00a11	0f 2f f0	 comiss	 xmm6, xmm0
  00a14	76 05		 jbe	 SHORT $LN291@IntersectL
  00a16	0f 57 d2	 xorps	 xmm2, xmm2
  00a19	eb 08		 jmp	 SHORT $LN290@IntersectL
$LN291@IntersectL:
  00a1b	0f 2f ea	 comiss	 xmm5, xmm2
  00a1e	77 03		 ja	 SHORT $LN290@IntersectL
  00a20	0f 28 d5	 movaps	 xmm2, xmm5
$LN290@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a23	0f 28 ca	 movaps	 xmm1, xmm2
  00a26	0f 28 c2	 movaps	 xmm0, xmm2
  00a29	f3 0f 59 4d f8	 mulss	 xmm1, DWORD PTR _La$$sroa$2730$1$[ebp]
  00a2e	f3 0f 59 55 f0	 mulss	 xmm2, DWORD PTR _La$$sroa$2733$1$[ebp]

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a33	f3 0f 58 4e 04	 addss	 xmm1, DWORD PTR [esi+4]

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00a38	f3 0f 59 c3	 mulss	 xmm0, xmm3

; 381  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00a3c	f3 0f 58 d4	 addss	 xmm2, xmm4
  00a40	f3 0f 58 46 08	 addss	 xmm0, DWORD PTR [esi+8]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 49   : 	Nearest = A1 + parameter * L;

  00a45	f3 0f 11 17	 movss	 DWORD PTR [edi], xmm2
  00a49	f3 0f 11 4f 04	 movss	 DWORD PTR [edi+4], xmm1
  00a4e	f3 0f 10 4d f4	 movss	 xmm1, DWORD PTR _Lb$$sroa$2726$1$[ebp]
  00a53	f3 0f 11 47 08	 movss	 DWORD PTR [edi+8], xmm0
$LN284@IntersectL:

; 35   : 	if (D < MY_EPSILON * MY_EPSILON)

  00a58	f3 0f 10 5d 10	 movss	 xmm3, DWORD PTR _D$1$[ebp]
  00a5d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70b
  00a65	0f 2f c3	 comiss	 xmm0, xmm3
  00a68	f3 0f 10 65 14	 movss	 xmm4, DWORD PTR _Lb$$sroa$2727$1$[ebp]
  00a6d	76 14		 jbe	 SHORT $LN310@IntersectL
$LN403@IntersectL:

; 312  : }

  00a6f	f3 0f 7e 02	 movq	 xmm0, QWORD PTR [edx]
  00a73	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00a77	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00a7a	5f		 pop	 edi
  00a7b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00a7e	5e		 pop	 esi
  00a7f	8b e5		 mov	 esp, ebp
  00a81	5d		 pop	 ebp
  00a82	c3		 ret	 0
$LN310@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00a83	f3 0f 10 57 04	 movss	 xmm2, DWORD PTR [edi+4]
  00a88	f3 0f 5c 52 04	 subss	 xmm2, DWORD PTR [edx+4]
  00a8d	f3 0f 10 07	 movss	 xmm0, DWORD PTR [edi]
  00a91	f3 0f 5c 02	 subss	 xmm0, DWORD PTR [edx]

; 306  :     z = fz;

  00a95	f3 0f 59 d4	 mulss	 xmm2, xmm4

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00a99	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00a9d	f3 0f 58 d0	 addss	 xmm2, xmm0

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00aa1	f3 0f 10 47 08	 movss	 xmm0, DWORD PTR [edi+8]
  00aa6	f3 0f 5c 42 08	 subss	 xmm0, DWORD PTR [edx+8]

; 1906 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00aab	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00aaf	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 44   : 	parameter = (D3DXVec3Dot(&AB, &L)) / D;

  00ab3	f3 0f 5e d3	 divss	 xmm2, xmm3

; 47   : 	parameter = FMAX(0.0f, FMIN(1.0f, parameter));

  00ab7	0f 28 c2	 movaps	 xmm0, xmm2
  00aba	f3 0f 5d c5	 minss	 xmm0, xmm5
  00abe	0f 2f f0	 comiss	 xmm6, xmm0
  00ac1	76 05		 jbe	 SHORT $LN316@IntersectL
  00ac3	0f 57 d2	 xorps	 xmm2, xmm2
  00ac6	eb 08		 jmp	 SHORT $LN315@IntersectL
$LN316@IntersectL:
  00ac8	0f 2f ea	 comiss	 xmm5, xmm2
  00acb	77 03		 ja	 SHORT $LN315@IntersectL
  00acd	0f 28 d5	 movaps	 xmm2, xmm5
$LN315@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 407  :     return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);

  00ad0	0f 28 ca	 movaps	 xmm1, xmm2
  00ad3	0f 28 c2	 movaps	 xmm0, xmm2
  00ad6	f3 0f 59 45 f4	 mulss	 xmm0, DWORD PTR _Lb$$sroa$2726$1$[ebp]
  00adb	f3 0f 59 cc	 mulss	 xmm1, xmm4
$LN402@IntersectL:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\lineintersect_utils.cpp

; 312  : }

  00adf	f3 0f 58 4a 04	 addss	 xmm1, DWORD PTR [edx+4]
  00ae4	f3 0f 58 42 08	 addss	 xmm0, DWORD PTR [edx+8]
  00ae9	f3 0f 59 d7	 mulss	 xmm2, xmm7
  00aed	f3 0f 58 12	 addss	 xmm2, DWORD PTR [edx]
  00af1	f3 0f 11 11	 movss	 DWORD PTR [ecx], xmm2
  00af5	f3 0f 11 49 04	 movss	 DWORD PTR [ecx+4], xmm1
  00afa	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
$LN309@IntersectL:
  00aff	5f		 pop	 edi
  00b00	5e		 pop	 esi
  00b01	8b e5		 mov	 esp, ebp
  00b03	5d		 pop	 ebp
  00b04	c3		 ret	 0
?IntersectLineSegments@@YAXABUD3DXVECTOR3@@000AAU1@1@Z ENDP ; IntersectLineSegments
_TEXT	ENDS
END
