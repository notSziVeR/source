; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\AttributeData.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?c_szAttributeDataFileHeader@@3QBDB DB 'AttributeData', 00H ; c_szAttributeDataFileHeader
CONST	ENDS
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
PUBLIC	?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
PUBLIC	?Type@CAttributeData@@SAKXZ			; CAttributeData::Type
PUBLIC	??0CAttributeData@@QAE@PBD@Z			; CAttributeData::CAttributeData
PUBLIC	??1CAttributeData@@UAE@XZ			; CAttributeData::~CAttributeData
PUBLIC	?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ; CAttributeData::GetCollisionDataVector
PUBLIC	?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ ; CAttributeData::GetHeightDataVector
PUBLIC	?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ; CAttributeData::AddCollisionData
PUBLIC	?GetHeightDataCount@CAttributeData@@QBEKXZ	; CAttributeData::GetHeightDataCount
PUBLIC	?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ; CAttributeData::GetHeightDataPointer
PUBLIC	?GetMaximizeRadius@CAttributeData@@QAEMXZ	; CAttributeData::GetMaximizeRadius
PUBLIC	?OnLoad@CAttributeData@@MAE_NHPBX@Z		; CAttributeData::OnLoad
PUBLIC	?OnClear@CAttributeData@@MAEXXZ			; CAttributeData::OnClear
PUBLIC	?OnIsEmpty@CAttributeData@@MBE_NXZ		; CAttributeData::OnIsEmpty
PUBLIC	?OnIsType@CAttributeData@@MAE_NK@Z		; CAttributeData::OnIsType
PUBLIC	?OnSelfDestruct@CAttributeData@@MAEXXZ		; CAttributeData::OnSelfDestruct
PUBLIC	??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >
PUBLIC	?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
PUBLIC	?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
PUBLIC	??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >
PUBLIC	?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
PUBLIC	??_GCAttributeData@@UAEPAXI@Z			; CAttributeData::`scalar deleting destructor'
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
PUBLIC	??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7CAttributeData@@6B@				; CAttributeData::`vftable'
PUBLIC	??_C@_0P@COGNDLAI@CAttributeData@		; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_R4CAttributeData@@6B@			; CAttributeData::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCAttributeData@@@8			; CAttributeData `RTTI Type Descriptor'
PUBLIC	??_R3CAttributeData@@8				; CAttributeData::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CAttributeData@@8				; CAttributeData::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CAttributeData@@8			; CAttributeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CResource@@8			; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCResource@@@8				; CResource `RTTI Type Descriptor'
PUBLIC	??_R3CResource@@8				; CResource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CResource@@8				; CResource::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CReferenceObject@@8		; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCReferenceObject@@@8			; CReferenceObject `RTTI Type Descriptor'
PUBLIC	??_R3CReferenceObject@@8			; CReferenceObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CReferenceObject@@8			; CReferenceObject::`RTTI Base Class Array'
PUBLIC	__real@4049000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?fMAX@@YAMMM@Z:PROC				; fMAX
EXTRN	?Clear@CResource@@QAEXXZ:PROC			; CResource::Clear
EXTRN	?StringToType@CResource@@SAKPBD@Z:PROC		; CResource::StringToType
EXTRN	?CreateDeviceObjects@CResource@@UAE_NXZ:PROC	; CResource::CreateDeviceObjects
EXTRN	?DestroyDeviceObjects@CResource@@UAEXXZ:PROC	; CResource::DestroyDeviceObjects
EXTRN	??0CResource@@QAE@PBD@Z:PROC			; CResource::CResource
EXTRN	??1CResource@@UAE@XZ:PROC			; CResource::~CResource
EXTRN	?OnIsType@CResource@@MAE_NK@Z:PROC		; CResource::OnIsType
EXTRN	?OnConstruct@CResource@@MAEXXZ:PROC		; CResource::OnConstruct
EXTRN	??_ECAttributeData@@UAEPAXI@Z:PROC		; CAttributeData::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA
_BSS	SEGMENT
?s_type@?1??Type@CAttributeData@@SAKXZ@4KA DD 01H DUP (?) ; `CAttributeData::Type'::`2'::s_type
_BSS	ENDS
;	COMDAT ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
_BSS	SEGMENT
?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA DD 01H DUP (?) ; `CAttributeData::Type'::`2'::$TSS0
_BSS	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT ??_R2CReferenceObject@@8
rdata$r	SEGMENT
??_R2CReferenceObject@@8 DD FLAT:??_R1A@?0A@EA@CReferenceObject@@8 ; CReferenceObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CReferenceObject@@8
rdata$r	SEGMENT
??_R3CReferenceObject@@8 DD 00H				; CReferenceObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCReferenceObject@@@8
data$rs	SEGMENT
??_R0?AVCReferenceObject@@@8 DD FLAT:??_7type_info@@6B@	; CReferenceObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCReferenceObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CReferenceObject@@8 DD FLAT:??_R0?AVCReferenceObject@@@8 ; CReferenceObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CResource@@8
rdata$r	SEGMENT
??_R2CResource@@8 DD FLAT:??_R1A@?0A@EA@CResource@@8	; CResource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CResource@@8
rdata$r	SEGMENT
??_R3CResource@@8 DD 00H				; CResource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CResource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCResource@@@8
data$rs	SEGMENT
??_R0?AVCResource@@@8 DD FLAT:??_7type_info@@6B@	; CResource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCResource@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CResource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CResource@@8 DD FLAT:??_R0?AVCResource@@@8 ; CResource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CResource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CAttributeData@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CAttributeData@@8 DD FLAT:??_R0?AVCAttributeData@@@8 ; CAttributeData::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_R2CAttributeData@@8
rdata$r	SEGMENT
??_R2CAttributeData@@8 DD FLAT:??_R1A@?0A@EA@CAttributeData@@8 ; CAttributeData::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CResource@@8
	DD	FLAT:??_R1A@?0A@EA@CReferenceObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CAttributeData@@8
rdata$r	SEGMENT
??_R3CAttributeData@@8 DD 00H				; CAttributeData::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCAttributeData@@@8
data$rs	SEGMENT
??_R0?AVCAttributeData@@@8 DD FLAT:??_7type_info@@6B@	; CAttributeData `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAttributeData@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CAttributeData@@6B@
rdata$r	SEGMENT
??_R4CAttributeData@@6B@ DD 00H				; CAttributeData::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCAttributeData@@@8
	DD	FLAT:??_R3CAttributeData@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COGNDLAI@CAttributeData@
CONST	SEGMENT
??_C@_0P@COGNDLAI@CAttributeData@ DB 'CAttributeData', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CAttributeData@@6B@
CONST	SEGMENT
??_7CAttributeData@@6B@ DD FLAT:??_R4CAttributeData@@6B@ ; CAttributeData::`vftable'
	DD	FLAT:??_ECAttributeData@@UAEPAXI@Z
	DD	FLAT:?OnConstruct@CResource@@MAEXXZ
	DD	FLAT:?OnSelfDestruct@CAttributeData@@MAEXXZ
	DD	FLAT:?CreateDeviceObjects@CResource@@UAE_NXZ
	DD	FLAT:?DestroyDeviceObjects@CResource@@UAEXXZ
	DD	FLAT:?OnLoad@CAttributeData@@MAE_NHPBX@Z
	DD	FLAT:?OnClear@CAttributeData@@MAEXXZ
	DD	FLAT:?OnIsEmpty@CAttributeData@@MBE_NXZ
	DD	FLAT:?OnIsType@CAttributeData@@MAE_NK@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Type@CAttributeData@@SAKXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Type@CAttributeData@@SAKXZ$0
__ehfuncinfo$?Type@CAttributeData@@SAKXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Type@CAttributeData@@SAKXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z PROC ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ENDP ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z PROC ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ENDP ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv427 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1575 :         if (_Newsize > max_size()) {

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	81 fb 55 55 55
	15		 cmp	 ebx, 357913941		; 15555555H
  00012	0f 87 f6 00 00
	00		 ja	 $LN81@Resize_rea

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00018	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0001b	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00020	2b 0f		 sub	 ecx, DWORD PTR [edi]
  00022	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00024	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00029	d1 fa		 sar	 edx, 1
  0002b	8b ca		 mov	 ecx, edx
  0002d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00030	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00032	8b d1		 mov	 edx, ecx
  00034	d1 ea		 shr	 edx, 1
  00036	2b c2		 sub	 eax, edx
  00038	3b c8		 cmp	 ecx, eax
  0003a	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0003c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00041	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00042	89 45 fc	 mov	 DWORD PTR tv427[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00045	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0004a	83 c4 04	 add	 esp, 4
  0004d	8b d8		 mov	 ebx, eax
  0004f	eb 46		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00051	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00054	3b c3		 cmp	 eax, ebx
  00056	73 1f		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00058	8b c3		 mov	 eax, ebx
$LN77@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0005a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005d	c1 e0 02	 shl	 eax, 2
  00060	89 45 fc	 mov	 DWORD PTR tv427[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00063	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00068	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00070	83 c4 04	 add	 esp, 4
  00073	8b d8		 mov	 ebx, eax
  00075	eb 20		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00077	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0007c	0f 87 91 00 00
	00		 ja	 $LN82@Resize_rea
  00082	eb d6		 jmp	 SHORT $LN77@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  00084	85 c0		 test	 eax, eax
  00086	74 0d		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  00088	50		 push	 eax
  00089	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008e	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00091	8b d8		 mov	 ebx, eax
  00093	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  00095	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00097	53		 push	 ebx
  00098	ff 77 04	 push	 DWORD PTR [edi+4]
  0009b	ff 37		 push	 DWORD PTR [edi]
  0009d	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAUD3DXVECTOR3@@PAU1@@std@@YAPAUD3DXVECTOR3@@PAU1@00@Z ; std::_Copy_memmove<D3DXVECTOR3 *,D3DXVECTOR3 *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000a2	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000a4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000a7	85 f6		 test	 esi, esi
  000a9	74 3f		 je	 SHORT $LN59@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000ab	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  000ae	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000b3	2b ce		 sub	 ecx, esi
  000b5	f7 e9		 imul	 ecx
  000b7	d1 fa		 sar	 edx, 1
  000b9	8b c2		 mov	 eax, edx
  000bb	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000be	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000c0	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  000c3	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000c6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000cc	72 12		 jb	 SHORT $LN69@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000ce	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000d1	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d4	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d6	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000d9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000dc	77 2b		 ja	 SHORT $LN66@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  000de	8b f2		 mov	 esi, edx
$LN69@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  000e0	51		 push	 ecx
  000e1	56		 push	 esi
  000e2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e7	83 c4 08	 add	 esp, 8
$LN59@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  000ea	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  000ed	89 1f		 mov	 DWORD PTR [edi], ebx
  000ef	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000f2	8d 04 83	 lea	 eax, DWORD PTR [ebx+eax*4]
  000f5	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  000f8	8b 45 fc	 mov	 eax, DWORD PTR tv427[ebp]
  000fb	03 c3		 add	 eax, ebx
  000fd	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	5b		 pop	 ebx

; 1611 :     }

  00103	8b e5		 mov	 esp, ebp
  00105	5d		 pop	 ebp
  00106	c2 08 00	 ret	 8
$LN66@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00109	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN81@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  0010e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
$LN82@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00113	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN79@Resize_rea:
  00118	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z
_TEXT	SEGMENT
__Oldsize$1$ = -12					; size = 4
__Whereoff$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00006	8b 55 08	 mov	 edx, DWORD PTR __Whereptr$[ebp]
  00009	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000e	53		 push	 ebx
  0000f	8b d9		 mov	 ebx, ecx
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  00016	8b 33		 mov	 esi, DWORD PTR [ebx]
  00018	2b d6		 sub	 edx, esi

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  0001a	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001d	f7 ea		 imul	 edx
  0001f	2b ce		 sub	 ecx, esi
  00021	c1 fa 05	 sar	 edx, 5
  00024	8b c2		 mov	 eax, edx
  00026	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00029	03 c2		 add	 eax, edx
  0002b	89 45 f8	 mov	 DWORD PTR __Whereoff$1$[ebp], eax
  0002e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00033	f7 e9		 imul	 ecx
  00035	c1 fa 05	 sar	 edx, 5
  00038	8b c2		 mov	 eax, edx
  0003a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003d	03 c2		 add	 eax, edx
  0003f	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  00042	3d 33 33 33 03	 cmp	 eax, 53687091		; 03333333H
  00047	0f 84 05 01 00
	00		 je	 $LN74@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0004d	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00050	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00053	2b ce		 sub	 ecx, esi
  00055	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0005a	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0005c	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00061	c1 fa 05	 sar	 edx, 5
  00064	8b ca		 mov	 ecx, edx
  00066	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00069	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0006b	8b d1		 mov	 edx, ecx
  0006d	d1 ea		 shr	 edx, 1
  0006f	2b c2		 sub	 eax, edx
  00071	3b c8		 cmp	 ecx, eax
  00073	76 17		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00075	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0007a	be 33 33 33 03	 mov	 esi, 53687091		; 03333333H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00085	83 c4 04	 add	 esp, 4
  00088	8b f8		 mov	 edi, eax
  0008a	eb 43		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0008c	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0008f	8b f7		 mov	 esi, edi
  00091	3b c7		 cmp	 eax, edi
  00093	0f 43 f0	 cmovae	 esi, eax
  00096	81 fe 33 33 33
	03		 cmp	 esi, 53687091		; 03333333H
  0009c	0f 87 b5 00 00
	00		 ja	 $LN75@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  000a2	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  000a5	c1 e0 04	 shl	 eax, 4

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a8	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000ad	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000b5	83 c4 04	 add	 esp, 4
  000b8	8b f8		 mov	 edi, eax
  000ba	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000bc	85 c0		 test	 eax, eax
  000be	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c6	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c9	8b f8		 mov	 edi, eax
  000cb	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000cd	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000cf	8b 45 f8	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000d2	8d 1c 80	 lea	 ebx, DWORD PTR [eax+eax*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000d5	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000d8	c1 e3 04	 shl	 ebx, 4
  000db	03 df		 add	 ebx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  000dd	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000e0	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0
  000e3	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000e7	0f 11 43 10	 movups	 XMMWORD PTR [ebx+16], xmm0
  000eb	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  000ef	0f 11 43 20	 movups	 XMMWORD PTR [ebx+32], xmm0
  000f3	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  000f7	0f 11 43 30	 movups	 XMMWORD PTR [ebx+48], xmm0
  000fb	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000ff	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00102	0f 11 43 40	 movups	 XMMWORD PTR [ebx+64], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  00106	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00109	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010b	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  0010e	3b c2		 cmp	 eax, edx
  00110	75 04		 jne	 SHORT $LN4@Emplace_re
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00112	8b c7		 mov	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  00114	eb 17		 jmp	 SHORT $LN58@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  00116	57		 push	 edi
  00117	50		 push	 eax
  00118	51		 push	 ecx
  00119	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
  0011e	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH
  00124	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]
  00127	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  0012a	8d 43 50	 lea	 eax, DWORD PTR [ebx+80]
$LN58@Emplace_re:
  0012d	50		 push	 eax
  0012e	52		 push	 edx
  0012f	51		 push	 ecx
  00130	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  00135	8b 45 f4	 mov	 eax, DWORD PTR __Oldsize$1$[ebp]
  00138	83 c4 0c	 add	 esp, 12			; 0000000cH
  0013b	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0013e	40		 inc	 eax
  0013f	56		 push	 esi
  00140	50		 push	 eax
  00141	57		 push	 edi
  00142	e8 00 00 00 00	 call	 ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array

; 920  :         return _Newvec + _Whereoff;

  00147	5f		 pop	 edi
  00148	5e		 pop	 esi
  00149	8b c3		 mov	 eax, ebx
  0014b	5b		 pop	 ebx

; 921  :     }

  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c2 08 00	 ret	 8
$LN74@Emplace_re:

; 888  :             _Xlength();

  00152	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
$LN75@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00157	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN72@Emplace_re:
  0015c	cc		 int	 3
??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Oldsize$1$ = 8					; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi

; 1575 :         if (_Newsize > max_size()) {

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newsize$[ebp]
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000f	81 ff 33 33 33
	03		 cmp	 edi, 53687091		; 03333333H
  00015	0f 87 dd 00 00
	00		 ja	 $LN62@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00023	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00025	f7 e9		 imul	 ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00027	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002a	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002c	c1 fa 05	 sar	 edx, 5
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00034	03 c2		 add	 eax, edx
  00036	89 45 08	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00039	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0003e	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00040	b8 33 33 33 03	 mov	 eax, 53687091		; 03333333H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00045	c1 fa 05	 sar	 edx, 5
  00048	8b ca		 mov	 ecx, edx
  0004a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004d	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  0004f	8b d1		 mov	 edx, ecx
  00051	d1 ea		 shr	 edx, 1
  00053	2b c2		 sub	 eax, edx
  00055	3b c8		 cmp	 ecx, eax
  00057	76 17		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  00059	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
  0005e	be 33 33 33 03	 mov	 esi, 53687091		; 03333333H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00069	83 c4 04	 add	 esp, 4
  0006c	8b d8		 mov	 ebx, eax
  0006e	eb 40		 jmp	 SHORT $LN21@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00070	8d 34 0a	 lea	 esi, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00073	3b f7		 cmp	 esi, edi
  00075	73 1c		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00077	8b f7		 mov	 esi, edi
$LN58@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  00079	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  0007c	c1 e0 04	 shl	 eax, 4

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007f	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00084	72 17		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00086	50		 push	 eax
  00087	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0008c	83 c4 04	 add	 esp, 4
  0008f	8b d8		 mov	 ebx, eax
  00091	eb 1d		 jmp	 SHORT $LN21@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00093	81 fe 33 33 33
	03		 cmp	 esi, 53687091		; 03333333H
  00099	77 62		 ja	 SHORT $LN63@Resize_rea
  0009b	eb dc		 jmp	 SHORT $LN58@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  0009d	85 c0		 test	 eax, eax
  0009f	74 0d		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000a1	50		 push	 eax
  000a2	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a7	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000aa	8b d8		 mov	 ebx, eax
  000ac	eb 02		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000ae	33 db		 xor	 ebx, ebx
$LN21@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1588 :         const pointer _Appended_first = _Newvec + _Oldsize;

  000b0	8b 55 08	 mov	 edx, DWORD PTR __Oldsize$1$[ebp]

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000b3	8b c7		 mov	 eax, edi
  000b5	8d 0c 92	 lea	 ecx, DWORD PTR [edx+edx*4]
  000b8	c1 e1 04	 shl	 ecx, 4
  000bb	03 cb		 add	 ecx, ebx
  000bd	2b c2		 sub	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  000bf	74 12		 je	 SHORT $LN31@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000c1	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  000c4	c1 e0 04	 shl	 eax, 4
  000c7	50		 push	 eax
  000c8	6a 00		 push	 0
  000ca	51		 push	 ecx
  000cb	e8 00 00 00 00	 call	 _memset
  000d0	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN31@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d3	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000d6	53		 push	 ebx
  000d7	ff 70 04	 push	 DWORD PTR [eax+4]
  000da	ff 30		 push	 DWORD PTR [eax]
  000dc	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAVCStaticCollisionData@@PAV1@@std@@YAPAVCStaticCollisionData@@PAV1@00@Z ; std::_Copy_memmove<CStaticCollisionData *,CStaticCollisionData *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1610 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1610 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

  000e7	56		 push	 esi
  000e8	57		 push	 edi
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
  000ef	5f		 pop	 edi
  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx

; 1611 :     }

  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN62@Resize_rea:

; 1576 :             _Xlength();

  000f8	e8 00 00 00 00	 call	 ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
$LN63@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  000fd	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN60@Resize_rea:
  00102	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >, COMDAT

; 1887 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	57		 push	 edi

; 1652 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

  00008	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  0000b	85 db		 test	 ebx, ebx
  0000d	74 31		 je	 SHORT $LN47@Uninitiali
  0000f	56		 push	 esi
  00010	8d 77 2c	 lea	 esi, DWORD PTR [edi+44]
$LL4@Uninitiali:

; 680  :             ::new (_Voidify_iter(_Ptr)) _Objty(_STD forward<_Types>(_Args)...);

  00013	6a 30		 push	 48			; 00000030H
  00015	6a 00		 push	 0
  00017	57		 push	 edi
  00018	e8 00 00 00 00	 call	 _memset
  0001d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  00020	c7 46 f8 00 00
	00 00		 mov	 DWORD PTR [esi-8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00027	83 c7 30	 add	 edi, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0002a	c7 46 fc 00 00
	00 00		 mov	 DWORD PTR [esi-4], 0
  00031	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  00037	8d 76 30	 lea	 esi, DWORD PTR [esi+48]

; 1888 :     // value-initialize _Count objects to raw _First, using _Al
; 1889 :     using _Ptrty = typename _Alloc::value_type*;
; 1890 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 1891 : #if _HAS_CXX20
; 1892 :         if (!_STD is_constant_evaluated())
; 1893 : #endif // _HAS_CXX20
; 1894 :         {
; 1895 :             auto _PFirst = _Unfancy(_First);
; 1896 :             _Zero_range(_PFirst, _PFirst + _Count);
; 1897 :             return _First + _Count;
; 1898 :         }
; 1899 :     }
; 1900 : 
; 1901 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};
; 1902 :     for (; 0 < _Count; --_Count) {

  0003a	83 eb 01	 sub	 ebx, 1
  0003d	75 d4		 jne	 SHORT $LL4@Uninitiali

; 1903 :         _Backout._Emplace_back();
; 1904 :     }
; 1905 : 
; 1906 :     return _Backout._Release();

  0003f	5e		 pop	 esi
$LN47@Uninitiali:

; 1907 : }

  00040	8b c7		 mov	 eax, edi
  00042	5f		 pop	 edi
  00043	5b		 pop	 ebx
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Last$1$ = -16						; size = 4
_this$1$ = -16						; size = 4
__ULast$1$ = -12					; size = 4
__Oldsize$1$ = -12					; size = 4
tv763 = -8						; size = 4
$T2 = -4						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1574 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 1575 :         if (_Newsize > max_size()) {

  00006	81 7d 08 55 55
	55 05		 cmp	 DWORD PTR __Newsize$[ebp], 89478485 ; 05555555H
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	57		 push	 edi
  00012	89 5d f0	 mov	 DWORD PTR _this$1$[ebp], ebx
  00015	0f 87 af 01 00
	00		 ja	 $LN122@Resize_rea

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0001b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0001e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00023	2b 0b		 sub	 ecx, DWORD PTR [ebx]
  00025	f7 e9		 imul	 ecx

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00027	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0002a	2b 0b		 sub	 ecx, DWORD PTR [ebx]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  0002c	c1 fa 03	 sar	 edx, 3
  0002f	8b c2		 mov	 eax, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00031	8b 75 08	 mov	 esi, DWORD PTR __Newsize$[ebp]

; 1577 :         }
; 1578 : 
; 1579 :         auto& _Al         = _Getal();
; 1580 :         auto& _My_data    = _Mypair._Myval2;
; 1581 :         pointer& _Myfirst = _My_data._Myfirst;
; 1582 :         pointer& _Mylast  = _My_data._Mylast;
; 1583 : 
; 1584 :         const auto _Oldsize          = static_cast<size_type>(_Mylast - _Myfirst);

  00034	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00037	03 c2		 add	 eax, edx
  00039	89 45 f4	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0003c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00041	f7 e9		 imul	 ecx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00043	b8 55 55 55 05	 mov	 eax, 89478485		; 05555555H

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00048	c1 fa 03	 sar	 edx, 3
  0004b	8b ca		 mov	 ecx, edx
  0004d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00050	03 ca		 add	 ecx, edx

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00052	8b d1		 mov	 edx, ecx
  00054	d1 ea		 shr	 edx, 1
  00056	2b c2		 sub	 eax, edx
  00058	3b c8		 cmp	 ecx, eax
  0005a	76 15		 jbe	 SHORT $LN10@Resize_rea

; 2030 :             return _Max; // geometric growth would overflow

  0005c	b8 f0 ff ff ff	 mov	 eax, -16		; fffffff0H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00061	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  00062	89 45 f8	 mov	 DWORD PTR tv763[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00065	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  0006a	83 c4 04	 add	 esp, 4
  0006d	8b f8		 mov	 edi, eax
  0006f	eb 49		 jmp	 SHORT $LN120@Resize_rea
$LN10@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00071	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00074	3b c6		 cmp	 eax, esi
  00076	73 1f		 jae	 SHORT $LN11@Resize_rea

; 2036 :             return _Newsize; // geometric growth would be insufficient

  00078	8b c6		 mov	 eax, esi
$LN117@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 65   :     return _Count * _Ty_size;

  0007a	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0007d	c1 e0 04	 shl	 eax, 4
  00080	89 45 f8	 mov	 DWORD PTR tv763[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00083	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00088	72 1a		 jb	 SHORT $LN22@Resize_rea

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00090	83 c4 04	 add	 esp, 4
  00093	8b f8		 mov	 edi, eax
  00095	eb 23		 jmp	 SHORT $LN120@Resize_rea
$LN11@Resize_rea:

; 60   :         if (_Count > _Max_possible) {

  00097	3d 55 55 55 05	 cmp	 eax, 89478485		; 05555555H
  0009c	0f 87 2d 01 00
	00		 ja	 $LN123@Resize_rea
  000a2	eb d6		 jmp	 SHORT $LN117@Resize_rea
$LN22@Resize_rea:

; 234  :     if (_Bytes != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	74 10		 je	 SHORT $LN23@Resize_rea

; 77   :         return ::operator new(_Bytes);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ae	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000b1	89 45 fc	 mov	 DWORD PTR $T2[ebp], eax
  000b4	8b f8		 mov	 edi, eax
  000b6	eb 05		 jmp	 SHORT $LN21@Resize_rea
$LN23@Resize_rea:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000b8	33 ff		 xor	 edi, edi
$LN120@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000ba	89 7d fc	 mov	 DWORD PTR $T2[ebp], edi
$LN21@Resize_rea:
  000bd	8b 4d f4	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]
  000c0	2b f1		 sub	 esi, ecx
  000c2	53		 push	 ebx
  000c3	56		 push	 esi
  000c4	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  000c7	c1 e0 04	 shl	 eax, 4
  000ca	03 c7		 add	 eax, edi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000d2	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1597 :         }
; 1598 : 
; 1599 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1600 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

  000d8	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1793 :     const auto _ULast = _Get_unwrapped(_Last);

  000da	89 45 f4	 mov	 DWORD PTR __ULast$1$[ebp], eax

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000dd	3b f0		 cmp	 esi, eax
  000df	74 58		 je	 SHORT $LN30@Resize_rea
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1596 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

  000e1	83 c7 2c	 add	 edi, 44			; 0000002cH
  000e4	8d 5e 28	 lea	 ebx, DWORD PTR [esi+40]
$LL31@Resize_rea:
  000e7	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1664 :         ++_Last;

  000ea	8d 7f 30	 lea	 edi, DWORD PTR [edi+48]

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  000ed	8d 5b 30	 lea	 ebx, DWORD PTR [ebx+48]
  000f0	0f 11 47 a4	 movups	 XMMWORD PTR [edi-92], xmm0
  000f4	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  000f8	0f 11 47 b4	 movups	 XMMWORD PTR [edi-76], xmm0
  000fc	8a 46 20	 mov	 al, BYTE PTR [esi+32]
  000ff	83 c6 30	 add	 esi, 48			; 00000030H
  00102	88 47 c4	 mov	 BYTE PTR [edi-60], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00105	8b 53 d4	 mov	 edx, DWORD PTR [ebx-44]
  00108	8b 4b d0	 mov	 ecx, DWORD PTR [ebx-48]
  0010b	8b 43 cc	 mov	 eax, DWORD PTR [ebx-52]

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0010e	c7 43 d4 00 00
	00 00		 mov	 DWORD PTR [ebx-44], 0
  00115	c7 43 d0 00 00
	00 00		 mov	 DWORD PTR [ebx-48], 0
  0011c	c7 43 cc 00 00
	00 00		 mov	 DWORD PTR [ebx-52], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 393  :         : _Myfirst(_First), _Mylast(_Last), _Myend(_End) {}

  00123	89 47 c8	 mov	 DWORD PTR [edi-56], eax
  00126	89 4f cc	 mov	 DWORD PTR [edi-52], ecx
  00129	89 57 d0	 mov	 DWORD PTR [edi-48], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1806 :     for (; _UFirst != _ULast; ++_UFirst) {

  0012c	3b 75 f4	 cmp	 esi, DWORD PTR __ULast$1$[ebp]
  0012f	75 b6		 jne	 SHORT $LL31@Resize_rea
  00131	8b 5d f0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00134	8b 7d fc	 mov	 edi, DWORD PTR $T2[ebp]
  00137	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN30@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00139	85 f6		 test	 esi, esi
  0013b	74 67		 je	 SHORT $LN91@Resize_rea

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0013d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00140	89 45 f0	 mov	 DWORD PTR __Last$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00143	3b f0		 cmp	 esi, eax
  00145	74 1b		 je	 SHORT $LN76@Resize_rea
  00147	8b f8		 mov	 edi, eax
  00149	0f 1f 80 00 00
	00 00		 npad	 7
$LL77@Resize_rea:
  00150	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00153	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00158	83 c6 30	 add	 esi, 48			; 00000030H
  0015b	3b f7		 cmp	 esi, edi
  0015d	75 f1		 jne	 SHORT $LL77@Resize_rea
  0015f	8b 7d fc	 mov	 edi, DWORD PTR $T2[ebp]
$LN76@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00162	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00165	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0016a	8b 33		 mov	 esi, DWORD PTR [ebx]
  0016c	2b ce		 sub	 ecx, esi
  0016e	f7 e9		 imul	 ecx
  00170	c1 fa 03	 sar	 edx, 3
  00173	8b c2		 mov	 eax, edx
  00175	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00178	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0017a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0017d	c1 e1 04	 shl	 ecx, 4

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00180	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00186	72 12		 jb	 SHORT $LN101@Resize_rea

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00188	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0018b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0018e	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00190	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00193	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00196	77 2d		 ja	 SHORT $LN98@Resize_rea

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00198	8b f2		 mov	 esi, edx
$LN101@Resize_rea:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0019a	51		 push	 ecx
  0019b	56		 push	 esi
  0019c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a1	83 c4 08	 add	 esp, 8
$LN91@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  001a4	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  001a7	89 3b		 mov	 DWORD PTR [ebx], edi
  001a9	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001ac	c1 e0 04	 shl	 eax, 4
  001af	03 c7		 add	 eax, edi
  001b1	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  001b4	8b 45 f8	 mov	 eax, DWORD PTR tv763[ebp]
  001b7	03 c7		 add	 eax, edi
  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi
  001bb	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  001be	5b		 pop	 ebx

; 1611 :     }

  001bf	8b e5		 mov	 esp, ebp
  001c1	5d		 pop	 ebp
  001c2	c2 08 00	 ret	 8
$LN98@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c5	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN122@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1576 :             _Xlength();

  001ca	e8 00 00 00 00	 call	 ?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
$LN123@Resize_rea:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  001cf	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN119@Resize_rea:
  001d4	cc		 int	 3
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCAttributeData@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCAttributeData@@UAEPAXI@Z PROC			; CAttributeData::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CAttributeData@@UAE@XZ ; CAttributeData::~CAttributeData
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 48		 push	 72			; 00000048H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCAttributeData@@UAEPAXI@Z ENDP			; CAttributeData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@CAXXZ ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ PROC ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 6e		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);

  0000a	53		 push	 ebx
  0000b	8b 5f 04	 mov	 ebx, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  0000e	3b f3		 cmp	 esi, ebx
  00010	74 0f		 je	 SHORT $LN8@vector
$LL9@vector:
  00012	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00015	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  0001a	83 c6 30	 add	 esi, 48			; 00000030H
  0001d	3b f3		 cmp	 esi, ebx
  0001f	75 f1		 jne	 SHORT $LL9@vector
$LN8@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00021	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00024	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00029	8b 37		 mov	 esi, DWORD PTR [edi]
  0002b	2b ce		 sub	 ecx, esi
  0002d	f7 e9		 imul	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002f	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00030	c1 fa 03	 sar	 edx, 3
  00033	8b c2		 mov	 eax, edx
  00035	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00038	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0003a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0003d	c1 e1 04	 shl	 ecx, 4

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00040	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00046	72 12		 jb	 SHORT $LN33@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00048	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0004b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0004e	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00050	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00053	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00056	77 23		 ja	 SHORT $LN30@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00058	8b f2		 mov	 esi, edx
$LN33@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0005a	51		 push	 ecx
  0005b	56		 push	 esi
  0005c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00061	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00067	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0006a	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00071	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  00078	5f		 pop	 edi

; 835  :     }

  00079	5e		 pop	 esi
  0007a	c3		 ret	 0
$LN30@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN42@vector:
  00080	cc		 int	 3
??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ ENDP ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@CAXXZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array, COMDAT
; _this$ = ecx

; 2076 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx

; 2077 :         // orphan all iterators, discard old array, acquire new array
; 2078 :         auto& _Al         = _Getal();
; 2079 :         auto& _My_data    = _Mypair._Myval2;
; 2080 :         pointer& _Myfirst = _My_data._Myfirst;
; 2081 :         pointer& _Mylast  = _My_data._Mylast;
; 2082 :         pointer& _Myend   = _My_data._Myend;
; 2083 : 
; 2084 :         _My_data._Orphan_all();
; 2085 : 
; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	85 f6		 test	 esi, esi
  0000b	74 40		 je	 SHORT $LN8@Change_arr

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000d	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00010	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00015	2b ce		 sub	 ecx, esi
  00017	f7 e9		 imul	 ecx
  00019	c1 fa 05	 sar	 edx, 5
  0001c	8b c2		 mov	 eax, edx
  0001e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00021	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00023	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00026	c1 e1 04	 shl	 ecx, 4

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00029	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002f	72 12		 jb	 SHORT $LN18@Change_arr

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00031	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00034	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00037	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0003c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003f	77 33		 ja	 SHORT $LN15@Change_arr

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00041	8b f2		 mov	 esi, edx
$LN18@Change_arr:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00043	51		 push	 ecx
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004a	83 c4 08	 add	 esp, 8
$LN8@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0004d	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]
  00053	89 0f		 mov	 DWORD PTR [edi], ecx
  00055	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00058	c1 e0 04	 shl	 eax, 4
  0005b	03 c1		 add	 eax, ecx
  0005d	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00060	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00063	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00066	c1 e0 04	 shl	 eax, 4
  00069	03 c1		 add	 eax, ecx
  0006b	89 47 08	 mov	 DWORD PTR [edi+8], eax
  0006e	5f		 pop	 edi
  0006f	5e		 pop	 esi

; 2096 :     }

  00070	5d		 pop	 ebp
  00071	c2 0c 00	 ret	 12			; 0000000cH
$LN15@Change_arr:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00074	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN22@Change_arr:
  00079	cc		 int	 3
?_Change_array@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXQAVCStaticCollisionData@@II@Z ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ PROC ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 54		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	c1 fa 05	 sar	 edx, 5
  00019	8b c2		 mov	 eax, edx
  0001b	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001e	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00020	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00023	c1 e1 04	 shl	 ecx, 4

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00026	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002c	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002e	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00031	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00034	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00039	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003c	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003e	8b f2		 mov	 esi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	51		 push	 ecx
  00041	56		 push	 esi
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00047	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004d	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00050	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00057	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005e	5f		 pop	 edi

; 835  :     }

  0005f	5e		 pop	 esi
  00060	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00066	cc		 int	 3
??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ ENDP ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?OnSelfDestruct@CAttributeData@@MAEXXZ
_TEXT	SEGMENT
?OnSelfDestruct@CAttributeData@@MAEXXZ PROC		; CAttributeData::OnSelfDestruct, COMDAT
; _this$ = ecx

; 199  : 	Clear();

  00000	e9 00 00 00 00	 jmp	 ?Clear@CResource@@QAEXXZ ; CResource::Clear
?OnSelfDestruct@CAttributeData@@MAEXXZ ENDP		; CAttributeData::OnSelfDestruct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?OnIsType@CAttributeData@@MAE_NK@Z
_TEXT	SEGMENT
_type$ = 8						; size = 4
?OnIsType@CAttributeData@@MAE_NK@Z PROC			; CAttributeData::OnIsType, COMDAT
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 183  : 	if (CAttributeData::Type() == type)

  00006	e8 00 00 00 00	 call	 ?Type@CAttributeData@@SAKXZ ; CAttributeData::Type
  0000b	8b 55 08	 mov	 edx, DWORD PTR _type$[ebp]
  0000e	3b c2		 cmp	 eax, edx
  00010	75 07		 jne	 SHORT $LN2@OnIsType

; 184  : 	{
; 185  : 		return true;

  00012	b0 01		 mov	 al, 1
  00014	5e		 pop	 esi

; 189  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN2@OnIsType:

; 186  : 	}
; 187  : 
; 188  : 	return CResource::OnIsType(type);

  00019	52		 push	 edx
  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 ?OnIsType@CResource@@MAE_NK@Z ; CResource::OnIsType
  00021	5e		 pop	 esi

; 189  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?OnIsType@CAttributeData@@MAE_NK@Z ENDP			; CAttributeData::OnIsType
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?OnIsEmpty@CAttributeData@@MBE_NXZ
_TEXT	SEGMENT
?OnIsEmpty@CAttributeData@@MBE_NXZ PROC			; CAttributeData::OnIsEmpty, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00000	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00003	3b 41 34	 cmp	 eax, DWORD PTR [ecx+52]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 169  : 	if (!m_StaticCollisionDataVector.empty())

  00006	75 0a		 jne	 SHORT $LN9@OnIsEmpty
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  00008	8b 41 3c	 mov	 eax, DWORD PTR [ecx+60]
  0000b	3b 41 40	 cmp	 eax, DWORD PTR [ecx+64]
  0000e	0f 94 c0	 sete	 al
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 179  : }

  00011	c3		 ret	 0
$LN9@OnIsEmpty:

; 170  : 	{
; 171  : 		return false;
; 172  : 	}
; 173  : 	if (!m_HeightDataVector.empty())
; 174  : 	{
; 175  : 		return false;

  00012	32 c0		 xor	 al, al

; 179  : }

  00014	c3		 ret	 0
?OnIsEmpty@CAttributeData@@MBE_NXZ ENDP			; CAttributeData::OnIsEmpty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?OnClear@CAttributeData@@MAEXXZ
_TEXT	SEGMENT
?OnClear@CAttributeData@@MAEXXZ PROC			; CAttributeData::OnClear, COMDAT
; _this$ = ecx

; 162  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00005	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00008	3b 47 34	 cmp	 eax, DWORD PTR [edi+52]
  0000b	74 03		 je	 SHORT $LN3@OnClear

; 1839 :         _Mylast = _Myfirst;

  0000d	89 47 34	 mov	 DWORD PTR [edi+52], eax
$LN3@OnClear:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00010	8b 77 3c	 mov	 esi, DWORD PTR [edi+60]
  00013	8b 5f 40	 mov	 ebx, DWORD PTR [edi+64]
  00016	3b f3		 cmp	 esi, ebx
  00018	74 1b		 je	 SHORT $LN6@OnClear
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL12@OnClear:
  00020	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00023	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00028	83 c6 30	 add	 esi, 48			; 00000030H
  0002b	3b f3		 cmp	 esi, ebx
  0002d	75 f1		 jne	 SHORT $LL12@OnClear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1839 :         _Mylast = _Myfirst;

  0002f	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00032	89 47 40	 mov	 DWORD PTR [edi+64], eax
$LN6@OnClear:
  00035	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 165  : }

  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	c3		 ret	 0
?OnClear@CAttributeData@@MAEXXZ ENDP			; CAttributeData::OnClear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?OnLoad@CAttributeData@@MAE_NHPBX@Z
_TEXT	SEGMENT
_szHeader$ = -40					; size = 14
__Oldsize$1$ = -24					; size = 4
_dwCollisionDataCount$1$ = -24				; size = 4
tv288 = -24						; size = 4
tv263 = -24						; size = 4
__Newlast$1$ = -20					; size = 4
__Oldsize$1$ = -20					; size = 4
tv1033 = -20						; size = 4
tv974 = -20						; size = 4
__Oldsize$1$ = -16					; size = 4
tv1029 = -16						; size = 4
__My_data$2$ = -16					; size = 4
_dwHeightDataCount$1$ = -12				; size = 4
_dwPrimitiveCount$1$ = -8				; size = 4
_c_pbBuf$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
___formal$ = 8						; size = 4
$T3 = 12						; size = 4
__Backout$1$sroa$318$1$ = 12				; size = 4
__Backout$2$sroa$317$1$ = 12				; size = 4
tv989 = 12						; size = 4
_k$1$ = 12						; size = 4
_c_pvBuf$ = 12						; size = 4
$T4 = 15						; size = 1
$T5 = 15						; size = 1
$T6 = 15						; size = 1
?OnLoad@CAttributeData@@MAE_NHPBX@Z PROC		; CAttributeData::OnLoad, COMDAT
; _this$ = ecx

; 63   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi

; 64   : 	if (!c_pvBuf)

  00007	8b 7d 0c	 mov	 edi, DWORD PTR _c_pvBuf$[ebp]
  0000a	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000d	85 ff		 test	 edi, edi
  0000f	0f 84 73 04 00
	00		 je	 $LN8@OnLoad

; 65   : 	{
; 66   : 		return true;
; 67   : 	}
; 68   : 
; 69   : 	const BYTE * c_pbBuf = static_cast<const BYTE *> (c_pvBuf);
; 70   : 
; 71   : 	char szHeader[c_iAttributeDataFileHeaderLength + 1];
; 72   : 	memcpy(szHeader, c_pbBuf, c_iAttributeDataFileHeaderLength + 1);

  00015	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 73   : 	c_pbBuf += c_iAttributeDataFileHeaderLength + 1;
; 74   : 	if (strcmp(szHeader, c_szAttributeDataFileHeader))

  00018	b9 00 00 00 00	 mov	 ecx, OFFSET ?c_szAttributeDataFileHeader@@3QBDB
  0001d	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00021	89 45 e0	 mov	 DWORD PTR _szHeader$[ebp+8], eax
  00024	66 8b 47 0c	 mov	 ax, WORD PTR [edi+12]
  00028	66 89 45 e4	 mov	 WORD PTR _szHeader$[ebp+12], ax
  0002c	8d 45 d8	 lea	 eax, DWORD PTR _szHeader$[ebp]
  0002f	66 0f d6 45 d8	 movq	 QWORD PTR _szHeader$[ebp], xmm0
$LL145@OnLoad:
  00034	8a 10		 mov	 dl, BYTE PTR [eax]
  00036	3a 11		 cmp	 dl, BYTE PTR [ecx]
  00038	75 1a		 jne	 SHORT $LN146@OnLoad
  0003a	84 d2		 test	 dl, dl
  0003c	74 12		 je	 SHORT $LN147@OnLoad
  0003e	8a 50 01	 mov	 dl, BYTE PTR [eax+1]
  00041	3a 51 01	 cmp	 dl, BYTE PTR [ecx+1]
  00044	75 0e		 jne	 SHORT $LN146@OnLoad
  00046	83 c0 02	 add	 eax, 2
  00049	83 c1 02	 add	 ecx, 2
  0004c	84 d2		 test	 dl, dl
  0004e	75 e4		 jne	 SHORT $LL145@OnLoad
$LN147@OnLoad:
  00050	33 c0		 xor	 eax, eax
  00052	eb 05		 jmp	 SHORT $LN148@OnLoad
$LN146@OnLoad:
  00054	1b c0		 sbb	 eax, eax
  00056	83 c8 01	 or	 eax, 1
$LN148@OnLoad:
  00059	85 c0		 test	 eax, eax
  0005b	74 09		 je	 SHORT $LN14@OnLoad

; 75   : 	{
; 76   : 		return FALSE;

  0005d	32 c0		 xor	 al, al
  0005f	5f		 pop	 edi

; 159  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c2 08 00	 ret	 8
$LN14@OnLoad:

; 77   : 	}
; 78   : 
; 79   : 	DWORD dwCollisionDataCount;
; 80   : 	DWORD dwHeightDataCount;
; 81   : 	memcpy(&dwCollisionDataCount, c_pbBuf, sizeof(DWORD));
; 82   : 	c_pbBuf += sizeof(DWORD);
; 83   : 	memcpy(&dwHeightDataCount, c_pbBuf, sizeof(DWORD));

  00066	8b 47 12	 mov	 eax, DWORD PTR [edi+18]
  00069	89 45 f4	 mov	 DWORD PTR _dwHeightDataCount$1$[ebp], eax

; 85   : 
; 86   : 	m_StaticCollisionDataVector.clear();

  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0006f	56		 push	 esi
  00070	8b 77 0e	 mov	 esi, DWORD PTR [edi+14]
  00073	83 c7 16	 add	 edi, 22			; 00000016H
  00076	89 75 e8	 mov	 DWORD PTR _dwCollisionDataCount$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00079	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0007c	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 84   : 	c_pbBuf += sizeof(DWORD);

  0007f	89 7d f8	 mov	 DWORD PTR _c_pbBuf$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00082	89 4d 0c	 mov	 DWORD PTR __Backout$1$sroa$318$1$[ebp], ecx
  00085	3b d1		 cmp	 edx, ecx
  00087	74 08		 je	 SHORT $LN57@OnLoad

; 1839 :         _Mylast = _Myfirst;

  00089	89 50 34	 mov	 DWORD PTR [eax+52], edx
  0008c	8b ca		 mov	 ecx, edx
  0008e	89 55 0c	 mov	 DWORD PTR __Backout$1$sroa$318$1$[ebp], edx
$LN57@OnLoad:

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00091	8b c2		 mov	 eax, edx
  00093	2b c8		 sub	 ecx, eax
  00095	89 45 ec	 mov	 DWORD PTR tv1033[ebp], eax
  00098	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0009d	f7 e9		 imul	 ecx
  0009f	c1 fa 05	 sar	 edx, 5
  000a2	8b c2		 mov	 eax, edx
  000a4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a7	03 c2		 add	 eax, edx
  000a9	89 45 f0	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  000ac	3b f0		 cmp	 esi, eax
  000ae	73 11		 jae	 SHORT $LN63@OnLoad

; 1626 :             _Mylast = _Newlast;

  000b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000b3	8d 04 b6	 lea	 eax, DWORD PTR [esi+esi*4]
  000b6	c1 e0 04	 shl	 eax, 4
  000b9	03 45 ec	 add	 eax, DWORD PTR tv1033[ebp]
  000bc	89 41 34	 mov	 DWORD PTR [ecx+52], eax

; 1627 :             return;

  000bf	eb 58		 jmp	 SHORT $LN64@OnLoad
$LN63@OnLoad:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  000c1	76 56		 jbe	 SHORT $LN64@OnLoad

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  000c3	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000c6	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  000c9	2b 48 30	 sub	 ecx, DWORD PTR [eax+48]
  000cc	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000d1	f7 e9		 imul	 ecx
  000d3	c1 fa 05	 sar	 edx, 5
  000d6	8b c2		 mov	 eax, edx
  000d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000db	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  000dd	3b f0		 cmp	 esi, eax
  000df	76 12		 jbe	 SHORT $LN65@OnLoad

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  000e4	8d 45 0f	 lea	 eax, DWORD PTR $T5[ebp]
  000e7	50		 push	 eax
  000e8	56		 push	 esi
  000e9	8d 49 30	 lea	 ecx, DWORD PTR [ecx+48]
  000ec	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  000f1	eb 26		 jmp	 SHORT $LN64@OnLoad
$LN65@OnLoad:

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000f3	2b 75 f0	 sub	 esi, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  000f6	74 18		 je	 SHORT $LN70@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR __Backout$1$sroa$318$1$[ebp]
  000fb	8d 34 b6	 lea	 esi, DWORD PTR [esi+esi*4]
  000fe	c1 e6 04	 shl	 esi, 4
  00101	56		 push	 esi
  00102	6a 00		 push	 0
  00104	51		 push	 ecx
  00105	e8 00 00 00 00	 call	 _memset
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	01 75 0c	 add	 DWORD PTR __Backout$1$sroa$318$1$[ebp], esi
$LN70@OnLoad:
  00110	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00113	8b 4d 0c	 mov	 ecx, DWORD PTR __Backout$1$sroa$318$1$[ebp]
  00116	89 4a 34	 mov	 DWORD PTR [edx+52], ecx
$LN64@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 88   : 	m_HeightDataVector.clear();

  00119	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  0011c	83 c1 3c	 add	 ecx, 60			; 0000003cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0011f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00122	8b 31		 mov	 esi, DWORD PTR [ecx]
  00124	89 45 0c	 mov	 DWORD PTR $T3[ebp], eax
  00127	3b f0		 cmp	 esi, eax
  00129	74 25		 je	 SHORT $LN80@OnLoad
  0012b	8b f8		 mov	 edi, eax
  0012d	0f 1f 00	 npad	 3
$LL86@OnLoad:
  00130	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00133	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00138	83 c6 30	 add	 esi, 48			; 00000030H
  0013b	3b f7		 cmp	 esi, edi
  0013d	75 f1		 jne	 SHORT $LL86@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1839 :         _Mylast = _Myfirst;

  0013f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00142	8b 7d f8	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
  00145	83 c1 3c	 add	 ecx, 60			; 0000003cH
  00148	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014a	89 45 0c	 mov	 DWORD PTR $T3[ebp], eax
  0014d	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN80@OnLoad:

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  00150	8b 11		 mov	 edx, DWORD PTR [ecx]
  00152	8b c8		 mov	 ecx, eax

; 1621 :         if (_Newsize < _Oldsize) { // trim

  00154	8b 75 f4	 mov	 esi, DWORD PTR _dwHeightDataCount$1$[ebp]
  00157	2b ca		 sub	 ecx, edx
  00159	89 55 f0	 mov	 DWORD PTR tv1029[ebp], edx
  0015c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00161	f7 e9		 imul	 ecx
  00163	c1 fa 03	 sar	 edx, 3
  00166	8b c2		 mov	 eax, edx
  00168	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0016b	03 c2		 add	 eax, edx
  0016d	89 45 ec	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  00170	3b f0		 cmp	 esi, eax
  00172	73 39		 jae	 SHORT $LN99@OnLoad

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  00174	8d 04 76	 lea	 eax, DWORD PTR [esi+esi*2]
  00177	c1 e0 04	 shl	 eax, 4
  0017a	03 45 f0	 add	 eax, DWORD PTR tv1029[ebp]

; 1623 :             _Orphan_range(_Newlast, _Mylast);
; 1624 :             _Destroy_range(_Newlast, _Mylast, _Al);

  0017d	8b f0		 mov	 esi, eax
  0017f	89 45 ec	 mov	 DWORD PTR __Newlast$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 947  :         for (; _First != _Last; ++_First) {

  00182	3b 45 0c	 cmp	 eax, DWORD PTR $T3[ebp]
  00185	74 1e		 je	 SHORT $LN105@OnLoad
  00187	8b 7d 0c	 mov	 edi, DWORD PTR $T3[ebp]
  0018a	66 0f 1f 44 00
	00		 npad	 6
$LL106@OnLoad:
  00190	8d 4e 24	 lea	 ecx, DWORD PTR [esi+36]
  00193	e8 00 00 00 00	 call	 ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
  00198	83 c6 30	 add	 esi, 48			; 00000030H
  0019b	3b f7		 cmp	 esi, edi
  0019d	75 f1		 jne	 SHORT $LL106@OnLoad
  0019f	8b 7d f8	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
  001a2	8b 45 ec	 mov	 eax, DWORD PTR __Newlast$1$[ebp]
$LN105@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1626 :             _Mylast = _Newlast;

  001a5	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  001a8	89 42 40	 mov	 DWORD PTR [edx+64], eax

; 1627 :             return;

  001ab	eb 33		 jmp	 SHORT $LN100@OnLoad
$LN99@OnLoad:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  001ad	76 2e		 jbe	 SHORT $LN151@OnLoad

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  001af	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001b2	8b 48 44	 mov	 ecx, DWORD PTR [eax+68]
  001b5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001ba	2b 4d f0	 sub	 ecx, DWORD PTR tv1029[ebp]
  001bd	f7 e9		 imul	 ecx
  001bf	c1 fa 03	 sar	 edx, 3
  001c2	8b c2		 mov	 eax, edx
  001c4	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001c7	03 c2		 add	 eax, edx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  001c9	3b f0		 cmp	 esi, eax
  001cb	76 5b		 jbe	 SHORT $LN101@OnLoad

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  001cd	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  001d0	8d 45 0f	 lea	 eax, DWORD PTR $T4[ebp]
  001d3	50		 push	 eax
  001d4	56		 push	 esi
  001d5	8d 49 3c	 lea	 ecx, DWORD PTR [ecx+60]
  001d8	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<SHeightData,std::allocator<SHeightData> >::_Resize_reallocate<std::_Value_init_tag>
$LN151@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 91   : 	for (DWORD i = 0; i < dwCollisionDataCount; ++i)

  001dd	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN100@OnLoad:
  001e0	8b 75 e8	 mov	 esi, DWORD PTR _dwCollisionDataCount$1$[ebp]
  001e3	85 f6		 test	 esi, esi
  001e5	0f 84 a8 00 00
	00		 je	 $LN3@OnLoad
  001eb	33 c0		 xor	 eax, eax
  001ed	89 45 0c	 mov	 DWORD PTR tv989[ebp], eax
$LL4@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001f0	8b 52 30	 mov	 edx, DWORD PTR [edx+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 94   : 		memcpy(&rCollisionData.dwType, c_pbBuf, sizeof(DWORD));

  001f3	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  001f5	03 d0		 add	 edx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 94   : 		memcpy(&rCollisionData.dwType, c_pbBuf, sizeof(DWORD));

  001f7	89 0a		 mov	 DWORD PTR [edx], ecx

; 95   : 		c_pbBuf += sizeof(DWORD);
; 96   : 		memcpy(rCollisionData.szName, c_pbBuf, 32);

  001f9	0f 10 47 04	 movups	 xmm0, XMMWORD PTR [edi+4]
  001fd	0f 11 42 04	 movups	 XMMWORD PTR [edx+4], xmm0
  00201	0f 10 47 14	 movups	 xmm0, XMMWORD PTR [edi+20]
  00205	0f 11 42 14	 movups	 XMMWORD PTR [edx+20], xmm0

; 97   : 		c_pbBuf += 32;
; 98   : 		memcpy(&rCollisionData.v3Position, c_pbBuf, sizeof(D3DXVECTOR3));

  00209	f3 0f 7e 47 24	 movq	 xmm0, QWORD PTR [edi+36]
  0020e	66 0f d6 42 28	 movq	 QWORD PTR [edx+40], xmm0
  00213	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]

; 99   : 		c_pbBuf += sizeof(D3DXVECTOR3);

  00216	83 c7 30	 add	 edi, 48			; 00000030H
  00219	89 42 30	 mov	 DWORD PTR [edx+48], eax

; 100  : 
; 101  : 		switch (rCollisionData.dwType)

  0021c	83 f9 05	 cmp	 ecx, 5
  0021f	77 53		 ja	 SHORT $LN5@OnLoad
  00221	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN149@OnLoad[ecx*4]
$LN101@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00228	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0022b	83 c0 3c	 add	 eax, 60			; 0000003cH
  0022e	50		 push	 eax
  0022f	8b c6		 mov	 eax, esi
  00231	2b 45 ec	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
  00234	50		 push	 eax
  00235	ff 75 0c	 push	 DWORD PTR $T3[ebp]
  00238	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n@V?$allocator@USHeightData@@@std@@@std@@YAPAUSHeightData@@PAU1@IAAV?$allocator@USHeightData@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<SHeightData> >
  0023d	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00240	83 c4 0c	 add	 esp, 12			; 0000000cH
  00243	89 42 40	 mov	 DWORD PTR [edx+64], eax
  00246	eb 98		 jmp	 SHORT $LN100@OnLoad
$LN15@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 129  : 		memcpy(rCollisionData.quatRotation, c_pbBuf, sizeof(D3DXQUATERNION));

  00248	8b 07		 mov	 eax, DWORD PTR [edi]
  0024a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0024d	83 c7 08	 add	 edi, 8
  00250	89 42 34	 mov	 DWORD PTR [edx+52], eax
  00253	89 4a 38	 mov	 DWORD PTR [edx+56], ecx
  00256	eb 1c		 jmp	 SHORT $LN5@OnLoad
$LN17@OnLoad:

; 102  : 		{
; 103  : 		case COLLISION_TYPE_PLANE:
; 104  : 			memcpy(rCollisionData.fDimensions, c_pbBuf, 2 * sizeof(float));
; 105  : 			c_pbBuf += 2 * sizeof(float);
; 106  : 			break;
; 107  : 		case COLLISION_TYPE_BOX:
; 108  : 			memcpy(rCollisionData.fDimensions, c_pbBuf, 3 * sizeof(float));
; 109  : 			c_pbBuf += 3 * sizeof(float);
; 110  : 			break;
; 111  : 		case COLLISION_TYPE_SPHERE:
; 112  : 			memcpy(rCollisionData.fDimensions, c_pbBuf, sizeof(float));

  00258	8b 07		 mov	 eax, DWORD PTR [edi]

; 113  : 			c_pbBuf += sizeof(float);

  0025a	83 c7 04	 add	 edi, 4
  0025d	89 42 34	 mov	 DWORD PTR [edx+52], eax

; 114  : 			break;

  00260	eb 12		 jmp	 SHORT $LN5@OnLoad
$LN20@OnLoad:

; 129  : 		memcpy(rCollisionData.quatRotation, c_pbBuf, sizeof(D3DXQUATERNION));

  00262	f3 0f 7e 07	 movq	 xmm0, QWORD PTR [edi]
  00266	66 0f d6 42 34	 movq	 QWORD PTR [edx+52], xmm0
  0026b	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0026e	83 c7 0c	 add	 edi, 12			; 0000000cH
  00271	89 42 3c	 mov	 DWORD PTR [edx+60], eax
$LN5@OnLoad:
  00274	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00277	8b 45 0c	 mov	 eax, DWORD PTR tv989[ebp]

; 130  : 		c_pbBuf += sizeof(D3DXQUATERNION);

  0027a	83 c7 10	 add	 edi, 16			; 00000010H
  0027d	83 c0 50	 add	 eax, 80			; 00000050H
  00280	89 45 0c	 mov	 DWORD PTR tv989[ebp], eax
  00283	0f 11 42 40	 movups	 XMMWORD PTR [edx+64], xmm0
  00287	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0028a	83 ee 01	 sub	 esi, 1
  0028d	0f 85 5d ff ff
	ff		 jne	 $LL4@OnLoad
$LN3@OnLoad:

; 131  : 	}
; 132  : 
; 133  : 	for (DWORD j = 0; j < dwHeightDataCount; ++j)

  00293	83 7d f4 00	 cmp	 DWORD PTR _dwHeightDataCount$1$[ebp], 0
  00297	0f 84 ea 01 00
	00		 je	 $LN152@OnLoad
  0029d	33 c9		 xor	 ecx, ecx
  0029f	89 4d ec	 mov	 DWORD PTR tv974[ebp], ecx
$LL9@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  002a2	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 136  : 		memcpy(rHeightData.szName, c_pbBuf, 32);

  002a5	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1952 :         return _My_data._Myfirst[_Pos];

  002a8	8b 42 3c	 mov	 eax, DWORD PTR [edx+60]
  002ab	03 c1		 add	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 136  : 		memcpy(rHeightData.szName, c_pbBuf, 32);

  002ad	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0

; 141  : 		c_pbBuf += sizeof(DWORD);
; 142  : 
; 143  : 		rHeightData.v3VertexVector.clear();

  002b0	8d 70 24	 lea	 esi, DWORD PTR [eax+36]
  002b3	0f 10 47 10	 movups	 xmm0, XMMWORD PTR [edi+16]
  002b7	89 75 f0	 mov	 DWORD PTR __My_data$2$[ebp], esi
  002ba	0f 11 40 10	 movups	 XMMWORD PTR [eax+16], xmm0
  002be	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  002c1	83 c7 24	 add	 edi, 36			; 00000024H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  002c4	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 140  : 		memcpy(&dwPrimitiveCount, c_pbBuf, sizeof(DWORD));

  002c7	89 4d f8	 mov	 DWORD PTR _dwPrimitiveCount$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  002ca	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002cc	89 45 0c	 mov	 DWORD PTR __Backout$2$sroa$317$1$[ebp], eax
  002cf	3b c8		 cmp	 ecx, eax
  002d1	74 08		 je	 SHORT $LN32@OnLoad

; 1839 :         _Mylast = _Myfirst;

  002d3	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  002d6	8b c1		 mov	 eax, ecx
  002d8	89 4d 0c	 mov	 DWORD PTR __Backout$2$sroa$317$1$[ebp], ecx
$LN32@OnLoad:

; 1620 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  002db	8b d1		 mov	 edx, ecx
  002dd	8b c8		 mov	 ecx, eax
  002df	2b ca		 sub	 ecx, edx
  002e1	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  002e6	f7 e9		 imul	 ecx

; 1621 :         if (_Newsize < _Oldsize) { // trim

  002e8	8b 4d f8	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  002eb	d1 fa		 sar	 edx, 1
  002ed	8b c2		 mov	 eax, edx
  002ef	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  002f2	03 c2		 add	 eax, edx
  002f4	89 45 e8	 mov	 DWORD PTR __Oldsize$1$[ebp], eax
  002f7	3b c8		 cmp	 ecx, eax
  002f9	73 0d		 jae	 SHORT $LN38@OnLoad

; 1622 :             const pointer _Newlast = _Myfirst + _Newsize;

  002fb	8b 16		 mov	 edx, DWORD PTR [esi]
  002fd	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]
  00300	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]

; 1626 :             _Mylast = _Newlast;

  00303	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1627 :             return;

  00306	eb 42		 jmp	 SHORT $LN39@OnLoad
$LN38@OnLoad:

; 1628 :         }
; 1629 : 
; 1630 :         if (_Newsize > _Oldsize) { // append

  00308	76 40		 jbe	 SHORT $LN39@OnLoad

; 1631 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

  0030a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0030d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00312	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00314	f7 e9		 imul	 ecx

; 1632 :             if (_Newsize > _Oldcapacity) { // reallocate

  00316	8b 4d f8	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  00319	d1 fa		 sar	 edx, 1
  0031b	8b c2		 mov	 eax, edx
  0031d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00320	03 c2		 add	 eax, edx
  00322	3b c8		 cmp	 ecx, eax
  00324	76 11		 jbe	 SHORT $LN40@OnLoad

; 1633 :                 _Resize_reallocate(_Newsize, _Val);

  00326	8d 45 0f	 lea	 eax, DWORD PTR $T6[ebp]
  00329	50		 push	 eax
  0032a	51		 push	 ecx
  0032b	8b ce		 mov	 ecx, esi
  0032d	e8 00 00 00 00	 call	 ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Resize_reallocate<std::_Value_init_tag>

; 1634 :                 return;

  00332	8b 4d f8	 mov	 ecx, DWORD PTR _dwPrimitiveCount$1$[ebp]
  00335	eb 13		 jmp	 SHORT $LN39@OnLoad
$LN40@OnLoad:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  00337	8b 55 0c	 mov	 edx, DWORD PTR __Backout$2$sroa$317$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  0033a	8b c1		 mov	 eax, ecx
  0033c	2b 45 e8	 sub	 eax, DWORD PTR __Oldsize$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1902 :     for (; 0 < _Count; --_Count) {

  0033f	74 06		 je	 SHORT $LN45@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1643 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

  00341	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00344	8d 14 82	 lea	 edx, DWORD PTR [edx+eax*4]
$LN45@OnLoad:
  00347	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN39@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 145  : 		memcpy(&rHeightData.v3VertexVector[0], c_pbBuf, dwPrimitiveCount * sizeof(D3DXVECTOR3));

  0034a	8b 45 f0	 mov	 eax, DWORD PTR __My_data$2$[ebp]
  0034d	8d 34 49	 lea	 esi, DWORD PTR [ecx+ecx*2]
  00350	c1 e6 02	 shl	 esi, 2
  00353	56		 push	 esi
  00354	57		 push	 edi
  00355	ff 30		 push	 DWORD PTR [eax]
  00357	e8 00 00 00 00	 call	 _memcpy

; 146  : 		c_pbBuf += dwPrimitiveCount * sizeof(D3DXVECTOR3);

  0035c	03 fe		 add	 edi, esi

; 149  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  0035e	33 c9		 xor	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00360	8b 75 f0	 mov	 esi, DWORD PTR __My_data$2$[ebp]
  00363	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 149  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  00368	89 4d 0c	 mov	 DWORD PTR _k$1$[ebp], ecx
  0036b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036e	89 7d f8	 mov	 DWORD PTR _c_pbBuf$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00371	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00374	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00376	f7 e9		 imul	 ecx
  00378	d1 fa		 sar	 edx, 1
  0037a	8b c2		 mov	 eax, edx
  0037c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0037f	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 149  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  00381	0f 84 ed 00 00
	00		 je	 $LN7@OnLoad
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1931 :         auto& _My_data = _Mypair._Myval2;

  00387	33 ff		 xor	 edi, edi
  00389	0f 1f 80 00 00
	00 00		 npad	 7
$LL12@OnLoad:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 151  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].x) + 50.0f);

  00390	8b 06		 mov	 eax, DWORD PTR [esi]
  00392	83 ec 08	 sub	 esp, 8
  00395	f3 0f 10 04 07	 movss	 xmm0, DWORD PTR [edi+eax]
  0039a	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0039d	0f 5a c0	 cvtps2pd xmm0, xmm0
  003a0	f3 0f 10 48 2c	 movss	 xmm1, DWORD PTR [eax+44]
  003a5	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  003ac	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  003b4	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003b8	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003be	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  003c3	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  003c8	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  003cb	d9 5d e8	 fstp	 DWORD PTR tv263[ebp]
  003ce	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR tv263[ebp]
  003d3	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1

; 152  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].y) + 50.0f);

  003d8	8b 06		 mov	 eax, DWORD PTR [esi]
  003da	f3 0f 10 44 38
	04		 movss	 xmm0, DWORD PTR [eax+edi+4]
  003e0	0f 5a c0	 cvtps2pd xmm0, xmm0
  003e3	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  003ea	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  003f2	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  003f6	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  003fc	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  00401	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00406	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00409	d9 5d e8	 fstp	 DWORD PTR tv288[ebp]
  0040c	f3 0f 10 4d e8	 movss	 xmm1, DWORD PTR tv288[ebp]
  00411	f3 0f 11 48 2c	 movss	 DWORD PTR [eax+44], xmm1

; 153  : 			m_fMaximizeRadius = fMAX(m_fMaximizeRadius, fabs(rHeightData.v3VertexVector[k].z) + 50.0f);

  00416	8b 06		 mov	 eax, DWORD PTR [esi]
  00418	f3 0f 10 44 38
	08		 movss	 xmm0, DWORD PTR [eax+edi+8]
  0041e	0f 5a c0	 cvtps2pd xmm0, xmm0
  00421	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  00428	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@4049000000000000
  00430	66 0f 5a c0	 cvtpd2ps xmm0, xmm0
  00434	f3 0f 11 44 24
	04		 movss	 DWORD PTR [esp+4], xmm0
  0043a	f3 0f 11 0c 24	 movss	 DWORD PTR [esp], xmm1
  0043f	e8 00 00 00 00	 call	 ?fMAX@@YAMMM@Z		; fMAX
  00444	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00447	83 c4 08	 add	 esp, 8
  0044a	ff 45 0c	 inc	 DWORD PTR _k$1$[ebp]
  0044d	83 c7 0c	 add	 edi, 12			; 0000000cH
  00450	d9 58 2c	 fstp	 DWORD PTR [eax+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00453	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00456	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0045b	2b 0e		 sub	 ecx, DWORD PTR [esi]
  0045d	f7 e9		 imul	 ecx
  0045f	d1 fa		 sar	 edx, 1
  00461	8b c2		 mov	 eax, edx
  00463	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00466	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 149  : 		for (DWORD k = 0; k < rHeightData.v3VertexVector.size(); ++k)

  00468	39 45 0c	 cmp	 DWORD PTR _k$1$[ebp], eax
  0046b	0f 82 1f ff ff
	ff		 jb	 $LL12@OnLoad
  00471	8b 7d f8	 mov	 edi, DWORD PTR _c_pbBuf$1$[ebp]
$LN7@OnLoad:

; 131  : 	}
; 132  : 
; 133  : 	for (DWORD j = 0; j < dwHeightDataCount; ++j)

  00474	8b 4d ec	 mov	 ecx, DWORD PTR tv974[ebp]
  00477	83 c1 30	 add	 ecx, 48			; 00000030H
  0047a	83 6d f4 01	 sub	 DWORD PTR _dwHeightDataCount$1$[ebp], 1
  0047e	89 4d ec	 mov	 DWORD PTR tv974[ebp], ecx
  00481	0f 85 1b fe ff
	ff		 jne	 $LL9@OnLoad
$LN152@OnLoad:
  00487	5e		 pop	 esi
$LN8@OnLoad:

; 154  : 		}
; 155  : 		// Getting Maximize Radius
; 156  : 	}
; 157  : 
; 158  : 	return true;

  00488	b0 01		 mov	 al, 1
  0048a	5f		 pop	 edi

; 159  : }

  0048b	8b e5		 mov	 esp, ebp
  0048d	5d		 pop	 ebp
  0048e	c2 08 00	 ret	 8
  00491	0f 1f 00	 npad	 3
$LN149@OnLoad:
  00494	00 00 00 00	 DD	 $LN15@OnLoad
  00498	00 00 00 00	 DD	 $LN20@OnLoad
  0049c	00 00 00 00	 DD	 $LN17@OnLoad
  004a0	00 00 00 00	 DD	 $LN15@OnLoad
  004a4	00 00 00 00	 DD	 $LN20@OnLoad
  004a8	00 00 00 00	 DD	 $LN20@OnLoad
?OnLoad@CAttributeData@@MAE_NHPBX@Z ENDP		; CAttributeData::OnLoad
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?GetMaximizeRadius@CAttributeData@@QAEMXZ
_TEXT	SEGMENT
?GetMaximizeRadius@CAttributeData@@QAEMXZ PROC		; CAttributeData::GetMaximizeRadius, COMDAT
; _this$ = ecx

; 53   : 	return m_fMaximizeRadius;

  00000	d9 41 2c	 fld	 DWORD PTR [ecx+44]

; 54   : }

  00003	c3		 ret	 0
?GetMaximizeRadius@CAttributeData@@QAEMXZ ENDP		; CAttributeData::GetMaximizeRadius
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z
_TEXT	SEGMENT
_dwIndex$ = 8						; size = 4
_c_ppHeightData$ = 12					; size = 4
?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z PROC ; CAttributeData::GetHeightDataPointer, COMDAT
; _this$ = ecx

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 41   : 	if (dwIndex >= GetHeightDataCount())

  00006	e8 00 00 00 00	 call	 ?GetHeightDataCount@CAttributeData@@QBEKXZ ; CAttributeData::GetHeightDataCount
  0000b	8b 55 08	 mov	 edx, DWORD PTR _dwIndex$[ebp]
  0000e	3b d0		 cmp	 edx, eax
  00010	72 07		 jb	 SHORT $LN2@GetHeightD

; 42   : 	{
; 43   : 		return FALSE;

  00012	33 c0		 xor	 eax, eax
  00014	5e		 pop	 esi

; 49   : }

  00015	5d		 pop	 ebp
  00016	c2 08 00	 ret	 8
$LN2@GetHeightD:

; 46   : 	*c_ppHeightData = &m_HeightDataVector[dwIndex];

  00019	8b 45 0c	 mov	 eax, DWORD PTR _c_ppHeightData$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1962 :         return _My_data._Myfirst[_Pos];

  0001c	8d 0c 52	 lea	 ecx, DWORD PTR [edx+edx*2]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	03 4e 3c	 add	 ecx, DWORD PTR [esi+60]
  00025	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 46   : 	*c_ppHeightData = &m_HeightDataVector[dwIndex];

  00026	89 08		 mov	 DWORD PTR [eax], ecx

; 47   : 
; 48   : 	return TRUE;

  00028	b8 01 00 00 00	 mov	 eax, 1

; 49   : }

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
?GetHeightDataPointer@CAttributeData@@QBEHKPAPBUSHeightData@@@Z ENDP ; CAttributeData::GetHeightDataPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataCount@CAttributeData@@QBEKXZ
_TEXT	SEGMENT
?GetHeightDataCount@CAttributeData@@QBEKXZ PROC		; CAttributeData::GetHeightDataCount, COMDAT
; _this$ = ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00000	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 51 3c	 sub	 edx, DWORD PTR [ecx+60]
  0000b	f7 ea		 imul	 edx
  0000d	c1 fa 03	 sar	 edx, 3
  00010	8b c2		 mov	 eax, edx
  00012	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00015	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 37   : }

  00017	c3		 ret	 0
?GetHeightDataCount@CAttributeData@@QBEKXZ ENDP		; CAttributeData::GetHeightDataCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z PROC ; CAttributeData::AddCollisionData, COMDAT
; _this$ = ecx

; 57   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00007	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  0000a	3b 56 38	 cmp	 edx, DWORD PTR [esi+56]
  0000d	74 2f		 je	 SHORT $LN6@AddCollisi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 231  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

  0000f	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00012	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00015	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  00018	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0001c	0f 11 42 10	 movups	 XMMWORD PTR [edx+16], xmm0
  00020	0f 10 40 20	 movups	 xmm0, XMMWORD PTR [eax+32]
  00024	0f 11 42 20	 movups	 XMMWORD PTR [edx+32], xmm0
  00028	0f 10 40 30	 movups	 xmm0, XMMWORD PTR [eax+48]
  0002c	0f 11 42 30	 movups	 XMMWORD PTR [edx+48], xmm0
  00030	0f 10 40 40	 movups	 xmm0, XMMWORD PTR [eax+64]
  00034	0f 11 42 40	 movups	 XMMWORD PTR [edx+64], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 869  :         ++_Mylast;

  00038	83 46 34 50	 add	 DWORD PTR [esi+52], 80	; 00000050H

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  0003c	eb 0c		 jmp	 SHORT $LN5@AddCollisi
$LN6@AddCollisi:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0003e	ff 75 08	 push	 DWORD PTR _data$[ebp]
  00041	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00044	52		 push	 edx
  00045	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABVCStaticCollisionData@@@?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@AAEPAVCStaticCollisionData@@QAV2@ABV2@@Z ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::_Emplace_reallocate<CStaticCollisionData const &>
$LN5@AddCollisi:

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  0004a	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  0004d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00052	2b 4e 30	 sub	 ecx, DWORD PTR [esi+48]
  00055	f7 e9		 imul	 ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 59   : 	return m_StaticCollisionDataVector.size();

  00057	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00058	c1 fa 05	 sar	 edx, 5
  0005b	8b c2		 mov	 eax, edx
  0005d	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00060	03 c2		 add	 eax, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 59   : 	return m_StaticCollisionDataVector.size();

  00062	5e		 pop	 esi

; 60   : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
?AddCollisionData@CAttributeData@@QAEIABVCStaticCollisionData@@@Z ENDP ; CAttributeData::AddCollisionData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ PROC ; CAttributeData::GetHeightDataVector, COMDAT
; _this$ = ecx

; 31   : 	return m_HeightDataVector;

  00000	8d 41 3c	 lea	 eax, DWORD PTR [ecx+60]

; 32   : }

  00003	c3		 ret	 0
?GetHeightDataVector@CAttributeData@@QBEABV?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@XZ ENDP ; CAttributeData::GetHeightDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ
_TEXT	SEGMENT
?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ PROC ; CAttributeData::GetCollisionDataVector, COMDAT
; _this$ = ecx

; 26   : 	return m_StaticCollisionDataVector;

  00000	8d 41 30	 lea	 eax, DWORD PTR [ecx+48]

; 27   : }

  00003	c3		 ret	 0
?GetCollisionDataVector@CAttributeData@@QBEABV?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@XZ ENDP ; CAttributeData::GetCollisionDataVector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ??1CAttributeData@@UAE@XZ
_TEXT	SEGMENT
??1CAttributeData@@UAE@XZ PROC				; CAttributeData::~CAttributeData, COMDAT
; _this$ = ecx

; 208  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 209  : }

  00003	8d 4e 3c	 lea	 ecx, DWORD PTR [esi+60]
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CAttributeData@@6B@
  0000c	e8 00 00 00 00	 call	 ??1?$vector@USHeightData@@V?$allocator@USHeightData@@@std@@@std@@QAE@XZ ; std::vector<SHeightData,std::allocator<SHeightData> >::~vector<SHeightData,std::allocator<SHeightData> >
  00011	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00014	e8 00 00 00 00	 call	 ??1?$vector@VCStaticCollisionData@@V?$allocator@VCStaticCollisionData@@@std@@@std@@QAE@XZ ; std::vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >::~vector<CStaticCollisionData,std::allocator<CStaticCollisionData> >
  00019	8b ce		 mov	 ecx, esi
  0001b	5e		 pop	 esi
  0001c	e9 00 00 00 00	 jmp	 ??1CResource@@UAE@XZ	; CResource::~CResource
??1CAttributeData@@UAE@XZ ENDP				; CAttributeData::~CAttributeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ??0CAttributeData@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c_szFileName$ = 8					; size = 4
??0CAttributeData@@QAE@PBD@Z PROC			; CAttributeData::CAttributeData, COMDAT
; _this$ = ecx

; 203  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	ff 75 08	 push	 DWORD PTR _c_szFileName$[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	e8 00 00 00 00	 call	 ??0CResource@@QAE@PBD@Z	; CResource::CResource
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CAttributeData@@6B@

; 205  : }

  00018	8b c6		 mov	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  0001a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00021	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00028	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  0002f	c7 46 3c 00 00
	00 00		 mov	 DWORD PTR [esi+60], 0
  00036	c7 46 40 00 00
	00 00		 mov	 DWORD PTR [esi+64], 0
  0003d	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp

; 204  : 	m_fMaximizeRadius = 0.0f;

  00044	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 205  : }

  0004b	5e		 pop	 esi
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
??0CAttributeData@@QAE@PBD@Z ENDP			; CAttributeData::CAttributeData
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\AttributeData.cpp
;	COMDAT ?Type@CAttributeData@@SAKXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?Type@CAttributeData@@SAKXZ PROC			; CAttributeData::Type, COMDAT

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Type@CAttributeData@@SAKXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 193  : 	static TType s_type = StringToType("CAttributeData");

  00022	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__tls_array
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __tls_index
  0002e	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00036	3b 81 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[ecx]
  0003c	7f 14		 jg	 SHORT $LN9@Type
$LN5@Type:

; 194  : 	return s_type;
; 195  : }

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA
  00043	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00046	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004d	59		 pop	 ecx
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
$LN9@Type:

; 193  : 	static TType s_type = StringToType("CAttributeData");

  00052	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00057	e8 00 00 00 00	 call	 __Init_thread_header
  0005c	83 c4 04	 add	 esp, 4
  0005f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA, -1
  00066	75 d6		 jne	 SHORT $LN5@Type
  00068	68 00 00 00 00	 push	 OFFSET ??_C@_0P@COGNDLAI@CAttributeData@
  0006d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00074	e8 00 00 00 00	 call	 ?StringToType@CResource@@SAKPBD@Z ; CResource::StringToType
  00079	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  0007e	a3 00 00 00 00	 mov	 DWORD PTR ?s_type@?1??Type@CAttributeData@@SAKXZ@4KA, eax
  00083	e8 00 00 00 00	 call	 __Init_thread_footer
  00088	83 c4 08	 add	 esp, 8
  0008b	eb b1		 jmp	 SHORT $LN5@Type
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Type@CAttributeData@@SAKXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??Type@CAttributeData@@SAKXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?Type@CAttributeData@@SAKXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Type@CAttributeData@@SAKXZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Type@CAttributeData@@SAKXZ ENDP			; CAttributeData::Type
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@CAXXZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ PROC ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >, COMDAT
; _this$ = ecx

; 829  :     _CONSTEXPR20 ~vector() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	85 f6		 test	 esi, esi
  00008	74 53		 je	 SHORT $LN4@vector

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  0000a	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	2b ce		 sub	 ecx, esi
  00014	f7 e9		 imul	 ecx
  00016	d1 fa		 sar	 edx, 1
  00018	8b c2		 mov	 eax, edx
  0001a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001d	03 c2		 add	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0001f	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00022	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00025	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0002b	72 12		 jb	 SHORT $LN20@vector

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0002d	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00030	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00033	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00035	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00038	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0003b	77 23		 ja	 SHORT $LN17@vector

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0003d	8b f2		 mov	 esi, edx
$LN20@vector:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	51		 push	 ecx
  00040	56		 push	 esi
  00041	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00046	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0004c	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0004f	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2114 :             _Myend   = nullptr;

  00056	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN4@vector:
  0005d	5f		 pop	 edi

; 835  :     }

  0005e	5e		 pop	 esi
  0005f	c3		 ret	 0
$LN17@vector:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00060	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN25@vector:
  00065	cc		 int	 3
??1?$vector@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@QAE@XZ ENDP ; std::vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >::~vector<D3DXVECTOR3,std::allocator<D3DXVECTOR3> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
END
