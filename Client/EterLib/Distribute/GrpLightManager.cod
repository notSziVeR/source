; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31942.0 

	TITLE	C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Distribute\GrpLightManager.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?ms_fCurTime@CLightBase@@1MA			; CLightBase::ms_fCurTime
_BSS	SEGMENT
?ms_fCurTime@CLightBase@@1MA DD 01H DUP (?)		; CLightBase::ms_fCurTime
_BSS	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1CLightBase@@UAE@XZ				; CLightBase::~CLightBase
PUBLIC	??_GCLightBase@@UAEPAXI@Z			; CLightBase::`scalar deleting destructor'
PUBLIC	??0CLight@@QAE@XZ				; CLight::CLight
PUBLIC	??1CLight@@UAE@XZ				; CLight::~CLight
PUBLIC	?Initialize@CLight@@QAEXXZ			; CLight::Initialize
PUBLIC	?Clear@CLight@@QAEXXZ				; CLight::Clear
PUBLIC	?Update@CLight@@QAEXXZ				; CLight::Update
PUBLIC	?SetParameter@CLight@@QAEXKABU_D3DLIGHT9@@@Z	; CLight::SetParameter
PUBLIC	?SetDistance@CLight@@QAEXM@Z			; CLight::SetDistance
PUBLIC	?SetDeviceLight@CLight@@QAEXH@Z			; CLight::SetDeviceLight
PUBLIC	?SetDiffuseColor@CLight@@QAEXMMMM@Z		; CLight::SetDiffuseColor
PUBLIC	?SetAmbientColor@CLight@@QAEXMMMM@Z		; CLight::SetAmbientColor
PUBLIC	?SetRange@CLight@@QAEXM@Z			; CLight::SetRange
PUBLIC	?SetPosition@CLight@@QAEXMMM@Z			; CLight::SetPosition
PUBLIC	?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ	; CLight::GetPosition
PUBLIC	?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendDiffuseColor
PUBLIC	?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ; CLight::BlendAmbientColor
PUBLIC	?BlendRange@CLight@@QAEXMMM@Z			; CLight::BlendRange
PUBLIC	??_GCLight@@UAEPAXI@Z				; CLight::`scalar deleting destructor'
PUBLIC	??1?$CSingleton@VCLightManager@@@@UAE@XZ	; CSingleton<CLightManager>::~CSingleton<CLightManager>
PUBLIC	??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z	; CSingleton<CLightManager>::`scalar deleting destructor'
PUBLIC	??0CLightManager@@QAE@XZ			; CLightManager::CLightManager
PUBLIC	??1CLightManager@@UAE@XZ			; CLightManager::~CLightManager
PUBLIC	?Destroy@CLightManager@@QAEXXZ			; CLightManager::Destroy
PUBLIC	?Initialize@CLightManager@@QAEXXZ		; CLightManager::Initialize
PUBLIC	?Update@CLightManager@@QAEXXZ			; CLightManager::Update
PUBLIC	?FlushLight@CLightManager@@QAEXXZ		; CLightManager::FlushLight
PUBLIC	?RestoreLight@CLightManager@@QAEXXZ		; CLightManager::RestoreLight
PUBLIC	?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z ; CLightManager::RegisterLight
PUBLIC	?GetLight@CLightManager@@QAEPAVCLight@@K@Z	; CLightManager::GetLight
PUBLIC	?DeleteLight@CLightManager@@QAEXK@Z		; CLightManager::DeleteLight
PUBLIC	?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ; CLightManager::SetCenterPosition
PUBLIC	?SetLimitLightCount@CLightManager@@QAEXK@Z	; CLightManager::SetLimitLightCount
PUBLIC	?SetSkipIndex@CLightManager@@QAEXK@Z		; CLightManager::SetSkipIndex
PUBLIC	??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
PUBLIC	?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
PUBLIC	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
PUBLIC	?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
PUBLIC	?NewLightID@CLightManager@@IAEKXZ		; CLightManager::NewLightID
PUBLIC	?ReleaseLightID@CLightManager@@IAEXK@Z		; CLightManager::ReleaseLightID
PUBLIC	??1?$CDynamicPool@VCLight@@@@UAE@XZ		; CDynamicPool<CLight>::~CDynamicPool<CLight>
PUBLIC	?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ; CDynamicPool<CLight>::Delete
PUBLIC	??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z		; CDynamicPool<CLight>::`scalar deleting destructor'
PUBLIC	??_GCLightManager@@UAEPAXI@Z			; CLightManager::`scalar deleting destructor'
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>
PUBLIC	??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>
PUBLIC	??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
PUBLIC	??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
PUBLIC	??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>
PUBLIC	??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
PUBLIC	??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
PUBLIC	??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
PUBLIC	??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z	; std::_Zero_range<unsigned long * *>
PUBLIC	??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
PUBLIC	??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Guess_median_unchecked<CLight * *,LightComp>
PUBLIC	??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
PUBLIC	??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CLight * *,CLight * *>
PUBLIC	??_ECLight@@W3AEPAXI@Z				; [thunk]:CLight::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W3AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_ECLightManager@@W7AEPAXI@Z			; [thunk]:CLightManager::`vector deleting destructor'
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
PUBLIC	??_7CLightBase@@6B@				; CLightBase::`vftable'
PUBLIC	??_7CLight@@6BCGraphicBase@@@			; CLight::`vftable'
PUBLIC	??_7CLight@@6BCLightBase@@@			; CLight::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A ; CSingleton<CLightManager>::ms_singleton
PUBLIC	??_7?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`vftable'
PUBLIC	??_7?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`vftable'
PUBLIC	??_7CLightManager@@6BCGraphicBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6BCLightBase@@@		; CLightManager::`vftable'
PUBLIC	??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
PUBLIC	?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_R4CLightBase@@6B@				; CLightBase::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightBase@@@8				; CLightBase `RTTI Type Descriptor'
PUBLIC	??_R3CLightBase@@8				; CLightBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightBase@@8				; CLightBase::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLight@@6BCGraphicBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLight@@@8				; CLight `RTTI Type Descriptor'
PUBLIC	??_R3CLight@@8					; CLight::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLight@@8					; CLight::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLight@@8				; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CGraphicBase@@8			; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCGraphicBase@@@8			; CGraphicBase `RTTI Type Descriptor'
PUBLIC	??_R3CGraphicBase@@8				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CGraphicBase@@8				; CGraphicBase::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CLightBase@@8			; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4CLight@@6BCLightBase@@@			; CLight::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6BCGraphicBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLightManager@@@8			; CLightManager `RTTI Type Descriptor'
PUBLIC	??_R3CLightManager@@8				; CLightManager::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLightManager@@8				; CLightManager::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLightManager@@8			; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$CSingleton@VCLightManager@@@@@8	; CSingleton<CLightManager> `RTTI Type Descriptor'
PUBLIC	??_R3?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CSingleton@VCLightManager@@@@8		; CSingleton<CLightManager>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8	; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CLightManager@@6BCLightBase@@@		; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CSingleton@VCLightManager@@@@6B@		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
PUBLIC	??_R4?$CDynamicPool@VCLight@@@@6B@		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$CDynamicPool@VCLight@@@@@8		; CDynamicPool<CLight> `RTTI Type Descriptor'
PUBLIC	??_R3?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$CDynamicPool@VCLight@@@@8		; CDynamicPool<CLight>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8	; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__invalid_parameter_noinfo_noreturn:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?GetCurrentSecond@CTimer@@QAEMXZ:PROC		; CTimer::GetCurrentSecond
EXTRN	??0CGraphicBase@@QAE@XZ:PROC			; CGraphicBase::CGraphicBase
EXTRN	??1CGraphicBase@@UAE@XZ:PROC			; CGraphicBase::~CGraphicBase
EXTRN	??_ECLightBase@@UAEPAXI@Z:PROC			; CLightBase::`vector deleting destructor'
EXTRN	??_ECLight@@UAEPAXI@Z:PROC			; CLight::`vector deleting destructor'
EXTRN	??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z:PROC ; CSingleton<CLightManager>::`vector deleting destructor'
EXTRN	??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z:PROC	; CDynamicPool<CLight>::`vector deleting destructor'
EXTRN	??_ECLightManager@@UAEPAXI@Z:PROC		; CLightManager::`vector deleting destructor'
EXTRN	?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z:PROC ; CStateManager::SaveRenderState
EXTRN	?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z:PROC ; CStateManager::RestoreRenderState
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__libm_sse2_sqrt_precise:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A:DWORD ; CGraphicBase::ms_lpd3dDevice
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A DD 01H DUP (?) ; CSingleton<CTimer>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A DD 01H DUP (?) ; CSingleton<CLightManager>::ms_singleton
_BSS	ENDS
;	COMDAT ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A
_BSS	SEGMENT
?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A DD 01H DUP (?) ; CSingleton<CStateManager>::ms_singleton
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R2?$CDynamicPool@VCLight@@@@8 DD FLAT:??_R1A@?0A@EA@?$CDynamicPool@VCLight@@@@8 ; CDynamicPool<CLight>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	SEGMENT
??_R3?$CDynamicPool@VCLight@@@@8 DD 00H			; CDynamicPool<CLight>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CDynamicPool@VCLight@@@@@8
data$rs	SEGMENT
??_R0?AV?$CDynamicPool@VCLight@@@@@8 DD FLAT:??_7type_info@@6B@ ; CDynamicPool<CLight> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CDynamicPool@VCLight@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$CDynamicPool@VCLight@@@@6B@
rdata$r	SEGMENT
??_R4?$CDynamicPool@VCLight@@@@6B@ DD 00H		; CDynamicPool<CLight>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CDynamicPool@VCLight@@@@@8
	DD	FLAT:??_R3?$CDynamicPool@VCLight@@@@8
rdata$r	ENDS
;	COMDAT ??_R4?$CSingleton@VCLightManager@@@@6B@
rdata$r	SEGMENT
??_R4?$CSingleton@VCLightManager@@@@6B@ DD 00H		; CSingleton<CLightManager>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@
rdata$r	SEGMENT
??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD 00H ; CLightManager::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLightManager@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCLightBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R2?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R1A@?0A@EA@?$CSingleton@VCLightManager@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R3?$CSingleton@VCLightManager@@@@8 DD 00H		; CSingleton<CLightManager>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$CSingleton@VCLightManager@@@@@8
data$rs	SEGMENT
??_R0?AV?$CSingleton@VCLightManager@@@@@8 DD FLAT:??_7type_info@@6B@ ; CSingleton<CLightManager> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$CSingleton@VCLightManager@@@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8 DD FLAT:??_R0?AV?$CSingleton@VCLightManager@@@@@8 ; CSingleton<CLightManager>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightManager@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightManager@@8 DD FLAT:??_R0?AVCLightManager@@@8 ; CLightManager::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightManager@@8
rdata$r	SEGMENT
??_R2CLightManager@@8 DD FLAT:??_R1A@?0A@EA@CLightManager@@8 ; CLightManager::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
	DD	FLAT:??_R17?0A@EA@?$CSingleton@VCLightManager@@@@8
rdata$r	ENDS
;	COMDAT ??_R3CLightManager@@8
rdata$r	SEGMENT
??_R3CLightManager@@8 DD 00H				; CLightManager::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightManager@@@8
data$rs	SEGMENT
??_R0?AVCLightManager@@@8 DD FLAT:??_7type_info@@6B@	; CLightManager `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightManager@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLightManager@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLightManager@@6BCGraphicBase@@@ DD 00H		; CLightManager::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightManager@@@8
	DD	FLAT:??_R3CLightManager@@8
rdata$r	ENDS
;	COMDAT ??_R4CLight@@6BCLightBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCLightBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R13?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CGraphicBase@@8
rdata$r	SEGMENT
??_R2CGraphicBase@@8 DD FLAT:??_R1A@?0A@EA@CGraphicBase@@8 ; CGraphicBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CGraphicBase@@8
rdata$r	SEGMENT
??_R3CGraphicBase@@8 DD 00H				; CGraphicBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCGraphicBase@@@8
data$rs	SEGMENT
??_R0?AVCGraphicBase@@@8 DD FLAT:??_7type_info@@6B@	; CGraphicBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCGraphicBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CGraphicBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CGraphicBase@@8 DD FLAT:??_R0?AVCGraphicBase@@@8 ; CGraphicBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CGraphicBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLight@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLight@@8 DD FLAT:??_R0?AVCLight@@@8	; CLight::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R2CLight@@8
rdata$r	SEGMENT
??_R2CLight@@8 DD FLAT:??_R1A@?0A@EA@CLight@@8		; CLight::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CGraphicBase@@8
	DD	FLAT:??_R13?0A@EA@CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R3CLight@@8
rdata$r	SEGMENT
??_R3CLight@@8 DD 00H					; CLight::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2CLight@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLight@@@8
data$rs	SEGMENT
??_R0?AVCLight@@@8 DD FLAT:??_7type_info@@6B@		; CLight `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLight@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLight@@6BCGraphicBase@@@
rdata$r	SEGMENT
??_R4CLight@@6BCGraphicBase@@@ DD 00H			; CLight::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLight@@@8
	DD	FLAT:??_R3CLight@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLightBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLightBase@@8 DD FLAT:??_R0?AVCLightBase@@@8 ; CLightBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R2CLightBase@@8
rdata$r	SEGMENT
??_R2CLightBase@@8 DD FLAT:??_R1A@?0A@EA@CLightBase@@8	; CLightBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CLightBase@@8
rdata$r	SEGMENT
??_R3CLightBase@@8 DD 00H				; CLightBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLightBase@@@8
data$rs	SEGMENT
??_R0?AVCLightBase@@@8 DD FLAT:??_7type_info@@6B@	; CLightBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLightBase@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CLightBase@@6B@
rdata$r	SEGMENT
??_R4CLightBase@@6B@ DD 00H				; CLightBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLightBase@@@8
	DD	FLAT:??_R3CLightBase@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
CONST	SEGMENT
??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@ DD FLAT:??_R4CLightManager@@6B?$CSingleton@VCLightManager@@@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W7AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCLightBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCLightBase@@@ DD FLAT:??_R4CLightManager@@6BCLightBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightManager@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLightManager@@6BCGraphicBase@@@ DD FLAT:??_R4CLightManager@@6BCGraphicBase@@@ ; CLightManager::`vftable'
	DD	FLAT:??_ECLightManager@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CDynamicPool@VCLight@@@@6B@
CONST	SEGMENT
??_7?$CDynamicPool@VCLight@@@@6B@ DD FLAT:??_R4?$CDynamicPool@VCLight@@@@6B@ ; CDynamicPool<CLight>::`vftable'
	DD	FLAT:??_E?$CDynamicPool@VCLight@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$CSingleton@VCLightManager@@@@6B@
CONST	SEGMENT
??_7?$CSingleton@VCLightManager@@@@6B@ DD FLAT:??_R4?$CSingleton@VCLightManager@@@@6B@ ; CSingleton<CLightManager>::`vftable'
	DD	FLAT:??_E?$CSingleton@VCLightManager@@@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCLightBase@@@
CONST	SEGMENT
??_7CLight@@6BCLightBase@@@ DD FLAT:??_R4CLight@@6BCLightBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@W3AEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLight@@6BCGraphicBase@@@
CONST	SEGMENT
??_7CLight@@6BCGraphicBase@@@ DD FLAT:??_R4CLight@@6BCGraphicBase@@@ ; CLight::`vftable'
	DD	FLAT:??_ECLight@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7CLightBase@@6B@
CONST	SEGMENT
??_7CLightBase@@6B@ DD FLAT:??_R4CLightBase@@6B@	; CLightBase::`vftable'
	DD	FLAT:??_ECLightBase@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z$1
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABK@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABK@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z$2
__ehfuncinfo$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Try_emplace@ABK$$V@?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@_N@1@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ$0
__ehfuncinfo$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Alloc@?$CDynamicPool@VCLight@@@@QAEPAVCLight@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z$2
__ehfuncinfo$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??A?$map@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@@std@@QAEAAPAVCLight@@ABK@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z$3
__ehfuncinfo$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLightManager@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CLightManager@@QAE@XZ$3
__ehfuncinfo$??0CLightManager@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CLightManager@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CLight@@UAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W7AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W7AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 08	 sub	 ecx, 8
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W7AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLightManager@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLightManager@@W3AEPAXI@Z PROC			; [thunk]:CLightManager::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLightManager@@UAEPAXI@Z
??_ECLightManager@@W3AEPAXI@Z ENDP			; [thunk]:CLightManager::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_ECLight@@W3AEPAXI@Z
_TEXT	SEGMENT
??_ECLight@@W3AEPAXI@Z PROC				; [thunk]:CLight::`vector deleting destructor', COMDAT
  00000	83 e9 04	 sub	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??_ECLight@@UAEPAXI@Z
??_ECLight@@W3AEPAXI@Z ENDP				; [thunk]:CLight::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_backward_memmove<CLight * *,CLight * *>, COMDAT

; 4146 : _CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 4147 :     // implement copy_backward-like function as memmove
; 4148 :     auto _FirstPtr              = _To_address(_First);
; 4149 :     auto _LastPtr               = _To_address(_Last);
; 4150 :     auto _DestPtr               = _To_address(_Dest);
; 4151 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 4152 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 4153 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 4154 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b c8		 sub	 ecx, eax

; 4155 :     auto _Result                = _CSTD memmove(_Dest_ch - _Count, _First_ch, _Count);

  0000b	51		 push	 ecx
  0000c	50		 push	 eax
  0000d	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00010	2b c1		 sub	 eax, ecx
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4156 :     if constexpr (is_pointer_v<_CtgIt2>) {
; 4157 :         return static_cast<_CtgIt2>(_Result);
; 4158 :     } else {
; 4159 :         return _Dest - (_LastPtr - _FirstPtr);
; 4160 :     }
; 4161 : }

  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_backward_memmove<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z PROC	; std::_Copy_memmove<unsigned long * *,unsigned long * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ENDP	; std::_Copy_memmove<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z
_TEXT	SEGMENT
tv934 = -8						; size = 4
tv925 = -8						; size = 4
__Tmp$1$ = -8						; size = 4
tv914 = -4						; size = 4
tv909 = -4						; size = 4
tv908 = -4						; size = 4
__First$ = 8						; size = 4
__Mid$ = 12						; size = 4
tv904 = 16						; size = 4
tv903 = 16						; size = 4
tv902 = 16						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z PROC ; std::_Guess_median_unchecked<CLight * *,LightComp>, COMDAT

; 7548 : _CONSTEXPR20 void _Guess_median_unchecked(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 7549 :     // sort median element to middle
; 7550 :     using _Diff        = _Iter_diff_t<_RanIt>;
; 7551 :     const _Diff _Count = _Last - _First;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	56		 push	 esi

; 7552 :     if (40 < _Count) { // Tukey's ninther

  0000a	8b 31		 mov	 esi, DWORD PTR [ecx]
  0000c	57		 push	 edi
  0000d	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00010	8b c7		 mov	 eax, edi
  00012	2b c1		 sub	 eax, ecx
  00014	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00019	c1 f8 02	 sar	 eax, 2
  0001c	83 f8 28	 cmp	 eax, 40			; 00000028H
  0001f	0f 8e 36 01 00
	00		 jle	 $LN2@Guess_medi

; 7553 :         const _Diff _Step     = (_Count + 1) >> 3; // +1 can't overflow because range was made inclusive in caller

  00025	40		 inc	 eax
  00026	c1 f8 03	 sar	 eax, 3
  00029	53		 push	 ebx

; 7554 :         const _Diff _Two_step = _Step << 1; // note: intentionally discards low-order bit
; 7555 :         _Med3_unchecked(_First, _First + _Step, _First + _Two_step, _Pred);

  0002a	8d 1c c5 00 00
	00 00		 lea	 ebx, DWORD PTR [eax*8]
  00031	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00038	89 5d f8	 mov	 DWORD PTR tv925[ebp], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0003b	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  0003e	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7534 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00042	76 05		 jbe	 SHORT $LN17@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00044	89 34 0a	 mov	 DWORD PTR [edx+ecx], esi

; 102  :     _Right   = _STD move(_Tmp);

  00047	89 01		 mov	 DWORD PTR [ecx], eax
$LN17@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00049	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  0004c	8b 04 0b	 mov	 eax, DWORD PTR [ebx+ecx]
  0004f	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00054	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7538 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00058	76 18		 jbe	 SHORT $LN27@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0005a	89 34 0b	 mov	 DWORD PTR [ebx+ecx], esi

; 102  :     _Right   = _STD move(_Tmp);

  0005d	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00060	8b 31		 mov	 esi, DWORD PTR [ecx]
  00062	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00067	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7541 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0006b	76 05		 jbe	 SHORT $LN27@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0006d	89 34 0a	 mov	 DWORD PTR [edx+ecx], esi

; 102  :     _Right   = _STD move(_Tmp);

  00070	89 01		 mov	 DWORD PTR [ecx], eax
$LN27@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7556 :         _Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00072	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  00075	8b f0		 mov	 esi, eax
  00077	2b f2		 sub	 esi, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00079	8b 18		 mov	 ebx, DWORD PTR [eax]
  0007b	8b 3e		 mov	 edi, DWORD PTR [esi]
  0007d	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  00082	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7534 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00086	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  00089	76 06		 jbe	 SHORT $LN40@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	89 08		 mov	 DWORD PTR [eax], ecx

; 102  :     _Right   = _STD move(_Tmp);

  0008f	89 1e		 mov	 DWORD PTR [esi], ebx
$LN40@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 1c 02	 mov	 ebx, DWORD PTR [edx+eax]
  00096	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0009b	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7538 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0009f	76 1d		 jbe	 SHORT $LN50@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  000a1	8b f9		 mov	 edi, ecx
  000a3	89 3c 02	 mov	 DWORD PTR [edx+eax], edi

; 102  :     _Right   = _STD move(_Tmp);

  000a6	89 18		 mov	 DWORD PTR [eax], ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000a8	8b 3e		 mov	 edi, DWORD PTR [esi]
  000aa	f3 0f 10 47 78	 movss	 xmm0, DWORD PTR [edi+120]
  000af	0f 2f 43 78	 comiss	 xmm0, DWORD PTR [ebx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7541 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000b3	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  000b6	76 06		 jbe	 SHORT $LN50@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  000b8	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000ba	89 08		 mov	 DWORD PTR [eax], ecx

; 102  :     _Right   = _STD move(_Tmp);

  000bc	89 1e		 mov	 DWORD PTR [esi], ebx
$LN50@Guess_medi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7557 :         _Med3_unchecked(_Last - _Two_step, _Last - _Step, _Last, _Pred);

  000be	8b df		 mov	 ebx, edi
  000c0	8b f7		 mov	 esi, edi
  000c2	2b 5d f8	 sub	 ebx, DWORD PTR tv925[ebp]
  000c5	2b f2		 sub	 esi, edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000c7	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000c9	8b 06		 mov	 eax, DWORD PTR [esi]
  000cb	89 45 f8	 mov	 DWORD PTR tv934[ebp], eax
  000ce	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000d3	0f 2f 40 78	 comiss	 xmm0, DWORD PTR [eax+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7534 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  000d7	76 06		 jbe	 SHORT $LN63@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  000d9	89 0e		 mov	 DWORD PTR [esi], ecx

; 102  :     _Right   = _STD move(_Tmp);

  000db	8b c8		 mov	 ecx, eax
  000dd	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN63@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000df	8b 06		 mov	 eax, DWORD PTR [esi]
  000e1	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000e3	89 4d f8	 mov	 DWORD PTR __Tmp$1$[ebp], ecx
  000e6	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  000eb	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7538 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  000ef	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  000f2	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  000f5	76 22		 jbe	 SHORT $LN73@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  000f7	8b 06		 mov	 eax, DWORD PTR [esi]
  000f9	89 07		 mov	 DWORD PTR [edi], eax

; 102  :     _Right   = _STD move(_Tmp);

  000fb	8b 7d f8	 mov	 edi, DWORD PTR __Tmp$1$[ebp]
  000fe	89 3e		 mov	 DWORD PTR [esi], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00100	8b 03		 mov	 eax, DWORD PTR [ebx]
  00102	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00107	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7541 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0010b	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0010e	76 09		 jbe	 SHORT $LN73@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00110	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00112	89 0e		 mov	 DWORD PTR [esi], ecx
  00114	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]

; 102  :     _Right   = _STD move(_Tmp);

  00117	89 3b		 mov	 DWORD PTR [ebx], edi
$LN73@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00119	8b 1c 0a	 mov	 ebx, DWORD PTR [edx+ecx]
  0011c	8b 38		 mov	 edi, DWORD PTR [eax]
  0011e	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  00123	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7534 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00127	76 05		 jbe	 SHORT $LN86@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00129	89 18		 mov	 DWORD PTR [eax], ebx

; 102  :     _Right   = _STD move(_Tmp);

  0012b	89 3c 0a	 mov	 DWORD PTR [edx+ecx], edi
$LN86@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0012e	8b 18		 mov	 ebx, DWORD PTR [eax]
  00130	8b 3e		 mov	 edi, DWORD PTR [esi]
  00132	f3 0f 10 43 78	 movss	 xmm0, DWORD PTR [ebx+120]
  00137	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7538 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  0013b	76 17		 jbe	 SHORT $LN120@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0013d	89 1e		 mov	 DWORD PTR [esi], ebx

; 102  :     _Right   = _STD move(_Tmp);

  0013f	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00141	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  00144	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00149	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7541 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  0014d	76 05		 jbe	 SHORT $LN120@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0014f	89 30		 mov	 DWORD PTR [eax], esi

; 102  :     _Right   = _STD move(_Tmp);

  00151	89 3c 0a	 mov	 DWORD PTR [edx+ecx], edi
$LN120@Guess_medi:
  00154	5b		 pop	 ebx
$LN119@Guess_medi:
  00155	5f		 pop	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7562 : }

  00156	5e		 pop	 esi
  00157	8b e5		 mov	 esp, ebp
  00159	5d		 pop	 ebp
  0015a	c3		 ret	 0
$LN2@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0015b	8b 45 0c	 mov	 eax, DWORD PTR __Mid$[ebp]
  0015e	8b 10		 mov	 edx, DWORD PTR [eax]
  00160	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7534 :     if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00164	76 04		 jbe	 SHORT $LN109@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00166	89 30		 mov	 DWORD PTR [eax], esi

; 102  :     _Right   = _STD move(_Tmp);

  00168	89 11		 mov	 DWORD PTR [ecx], edx
$LN109@Guess_medi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0016a	8b 30		 mov	 esi, DWORD PTR [eax]
  0016c	8b 17		 mov	 edx, DWORD PTR [edi]
  0016e	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00173	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7538 :     if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid)) { // swap middle and last, then test first again

  00177	76 dc		 jbe	 SHORT $LN119@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00179	89 37		 mov	 DWORD PTR [edi], esi

; 102  :     _Right   = _STD move(_Tmp);

  0017b	89 10		 mov	 DWORD PTR [eax], edx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0017d	8b 31		 mov	 esi, DWORD PTR [ecx]
  0017f	f3 0f 10 46 78	 movss	 xmm0, DWORD PTR [esi+120]
  00184	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7541 :         if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First)) {

  00188	76 cb		 jbe	 SHORT $LN119@Guess_medi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0018a	89 30		 mov	 DWORD PTR [eax], esi
  0018c	5f		 pop	 edi

; 102  :     _Right   = _STD move(_Tmp);

  0018d	89 11		 mov	 DWORD PTR [ecx], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7562 : }

  0018f	5e		 pop	 esi
  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c3		 ret	 0
??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ENDP ; std::_Guess_median_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z
_TEXT	SEGMENT
__Max_sequence_non_leaf$1$ = -4				; size = 4
__First$ = 8						; size = 4
__Top$1$ = 12						; size = 4
__Hole$ = 12						; size = 4
__Bottom$ = 16						; size = 4
__Val$ = 20						; size = 4
__Pred$ = 24						; size = 1
??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z PROC ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>, COMDAT

; 6027 :     _RanIt _First, _Iter_diff_t<_RanIt> _Hole, _Iter_diff_t<_RanIt> _Bottom, _Ty&& _Val, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 6028 :     // percolate _Hole to _Bottom, then push _Val
; 6029 :     _STL_INTERNAL_CHECK(_Bottom > 0);
; 6030 : 
; 6031 :     using _Diff      = _Iter_diff_t<_RanIt>;
; 6032 :     const _Diff _Top = _Hole;
; 6033 :     _Diff _Idx       = _Hole;
; 6034 : 
; 6035 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6036 :     // calculating the child's index can trigger integer overflows
; 6037 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen

  00004	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b 75 0c	 mov	 esi, DWORD PTR __Hole$[ebp]
  0000c	8b ce		 mov	 ecx, esi
  0000e	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  00011	89 4d 0c	 mov	 DWORD PTR __Top$1$[ebp], ecx
  00014	d1 f8		 sar	 eax, 1
  00016	8b de		 mov	 ebx, esi
  00018	89 45 fc	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  0001b	57		 push	 edi

; 6038 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0001c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0001f	3b f0		 cmp	 esi, eax
  00021	7d 31		 jge	 SHORT $LN3@Pop_heap_h
$LL2@Pop_heap_h:

; 6039 :         _Idx = 2 * _Idx + 2;

  00023	8d 14 1b	 lea	 edx, DWORD PTR [ebx+ebx]

; 6040 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 6041 :             --_Idx;
; 6042 :         }
; 6043 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00026	33 db		 xor	 ebx, ebx
  00028	8b 44 97 04	 mov	 eax, DWORD PTR [edi+edx*4+4]
  0002c	8b 4c 97 08	 mov	 ecx, DWORD PTR [edi+edx*4+8]
  00030	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00035	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  00039	0f 96 c3	 setbe	 bl
  0003c	43		 inc	 ebx
  0003d	03 da		 add	 ebx, edx
  0003f	8b 04 9f	 mov	 eax, DWORD PTR [edi+ebx*4]
  00042	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax

; 6044 :         _Hole             = _Idx;

  00045	8b f3		 mov	 esi, ebx
  00047	8b 45 fc	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  0004a	3b d8		 cmp	 ebx, eax
  0004c	7c d5		 jl	 SHORT $LL2@Pop_heap_h
  0004e	8b 4d 0c	 mov	 ecx, DWORD PTR __Top$1$[ebp]
  00051	8b 55 10	 mov	 edx, DWORD PTR __Bottom$[ebp]
$LN3@Pop_heap_h:

; 6045 :     }
; 6046 : 
; 6047 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  00054	3b d8		 cmp	 ebx, eax
  00056	75 0f		 jne	 SHORT $LN5@Pop_heap_h
  00058	f6 c2 01	 test	 dl, 1
  0005b	75 0a		 jne	 SHORT $LN5@Pop_heap_h

; 6048 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  0005d	8b 44 97 fc	 mov	 eax, DWORD PTR [edi+edx*4-4]
  00061	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax

; 6049 :         _Hole             = _Bottom - 1;

  00064	8d 72 ff	 lea	 esi, DWORD PTR [edx-1]
$LN5@Pop_heap_h:

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00067	3b ce		 cmp	 ecx, esi
  00069	7d 30		 jge	 SHORT $LN24@Pop_heap_h
  0006b	8b 5d 14	 mov	 ebx, DWORD PTR __Val$[ebp]
  0006e	66 90		 npad	 2
$LL12@Pop_heap_h:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00070	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5920 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  00072	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  00075	d1 f9		 sar	 ecx, 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00077	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0007c	8b 14 8f	 mov	 edx, DWORD PTR [edi+ecx*4]
  0007f	0f 2f 42 78	 comiss	 xmm0, DWORD PTR [edx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  00083	76 1b		 jbe	 SHORT $LN26@Pop_heap_h

; 5922 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5923 :         // move _Hole up to parent
; 5924 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00085	89 14 b7	 mov	 DWORD PTR [edi+esi*4], edx

; 5925 :         _Hole             = _Idx;

  00088	8b f1		 mov	 esi, ecx
  0008a	39 4d 0c	 cmp	 DWORD PTR __Top$1$[ebp], ecx
  0008d	7c e1		 jl	 SHORT $LL12@Pop_heap_h

; 5926 :     }
; 5927 : 
; 5928 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0008f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 6050 :     }
; 6051 : 
; 6052 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6053 : }

  00091	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN24@Pop_heap_h:

; 5928 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0009b	8b 45 14	 mov	 eax, DWORD PTR __Val$[ebp]
  0009e	8b 00		 mov	 eax, DWORD PTR [eax]
$LN26@Pop_heap_h:

; 6050 :     }
; 6051 : 
; 6052 :     _Push_heap_by_index(_First, _Hole, _Top, _STD forward<_Ty>(_Val), _Pred);
; 6053 : }

  000a0	89 04 b7	 mov	 DWORD PTR [edi+esi*4], eax
  000a3	5f		 pop	 edi
  000a4	5e		 pop	 esi
  000a5	5b		 pop	 ebx
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c3		 ret	 0
??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ENDP ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z PROC		; std::_Zero_range<unsigned long * *>, COMDAT

; 1878 : _Ptr _Zero_range(const _Ptr _First, const _Ptr _Last) { // fill [_First, _Last) with zeroes

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1879 :     char* const _First_ch = reinterpret_cast<char*>(_To_address(_First));
; 1880 :     char* const _Last_ch  = reinterpret_cast<char*>(_To_address(_Last));
; 1881 :     _CSTD memset(_First_ch, 0, static_cast<size_t>(_Last_ch - _First_ch));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	6a 00		 push	 0
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 _memset

; 1882 :     return _Last;

  00014	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00017	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1883 : }

  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z ENDP		; std::_Zero_range<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z PROC ; std::_Copy_memmove<CLight * *,CLight * *>, COMDAT

; 3833 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3834 :     auto _FirstPtr              = _To_address(_First);
; 3835 :     auto _LastPtr               = _To_address(_Last);
; 3836 :     auto _DestPtr               = _To_address(_Dest);
; 3837 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
; 3838 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
; 3839 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
; 3840 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00003	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00006	56		 push	 esi

; 3841 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  00007	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	2b f8		 sub	 edi, eax
  00010	57		 push	 edi
  00011	50		 push	 eax
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memmove
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3842 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3843 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  0001b	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 3844 :     } else {
; 3845 :         return _Dest + (_LastPtr - _FirstPtr);
; 3846 :     }
; 3847 : }

  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z
_TEXT	SEGMENT
__UFirst$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z PROC ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>, COMDAT

; 1910 : _NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1(_NoThrowFwdIt _UFirst, _Diff _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1911 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1912 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1913 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1914 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __UFirst$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __UFirst$[ebp], ecx

; 1915 :     } else {
; 1916 :         _Uninitialized_backout<_NoThrowFwdIt> _Backout{_UFirst};
; 1917 :         for (; 0 < _Count; --_Count) {
; 1918 :             _Backout._Emplace_back();
; 1919 :         }
; 1920 : 
; 1921 :         return _Backout._Release();
; 1922 :     }
; 1923 : }

  00012	5d		 pop	 ebp

; 1911 :     // value-initialize all elements in [_UFirst, _UFirst + _Count_raw)
; 1912 :     _STL_INTERNAL_CHECK(_Count >= 0);
; 1913 :     if constexpr (_Use_memset_value_construct_v<_NoThrowFwdIt>) {
; 1914 :         return _Zero_range(_UFirst, _UFirst + _Count);

  00013	e9 00 00 00 00	 jmp	 ??$_Zero_range@PAPAK@std@@YAPAPAKQAPAK0@Z ; std::_Zero_range<unsigned long * *>
??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ENDP ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z PROC ; std::uninitialized_copy<unsigned long * *,unsigned long * *>, COMDAT

; 1776 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1777 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1778 :     _Adl_verify_range(_First, _Last);
; 1779 :     auto _UFirst      = _Get_unwrapped(_First);
; 1780 :     const auto _ULast = _Get_unwrapped(_Last);
; 1781 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 1782 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));
; 1783 :     return _Dest;
; 1784 : }

  00003	5d		 pop	 ebp

; 1763 :             return _Copy_memmove(_First, _Last, _Dest);

  00004	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ENDP ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z PROC ; std::_Copy_memmove_n<CLight * *,CLight * *>, COMDAT

; 3850 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Count, _OutCtgIt _Dest) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3851 :     const auto _Result = _Copy_memmove(_First, _First + _Count, _Dest);

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0000c	89 45 0c	 mov	 DWORD PTR __Count$[ebp], eax
  0000f	89 4d 08	 mov	 DWORD PTR __First$[ebp], ecx

; 3852 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 3853 :         return _Result;
; 3854 :     } else { // _Result is unused so the compiler can optimize it away
; 3855 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Count);
; 3856 :     }
; 3857 : }

  00012	5d		 pop	 ebp

; 3851 :     const auto _Result = _Copy_memmove(_First, _First + _Count, _Dest);

  00013	e9 00 00 00 00	 jmp	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ENDP ; std::_Copy_memmove_n<CLight * *,CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 1017 :         if (_Ptr) {

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 0b		 je	 SHORT $LN8@Alloc_cons

; 255  :         ::operator delete(_Ptr, _Bytes);

  00007	6a 18		 push	 24			; 00000018H
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000f	83 c4 08	 add	 esp, 8
$LN8@Alloc_cons:

; 1018 :             _Al.deallocate(_Ptr, 1);
; 1019 :         }
; 1020 :     }

  00012	c3		 ret	 0
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>, COMDAT
; _this$ = ecx

; 1609 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1610 :         const auto _Scary = _Get_scary();
; 1611 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
  0000d	c7 42 04 00 00
	00 00		 mov	 DWORD PTR [edx+4], 0
  00014	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  00017	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0001b	75 28		 jne	 SHORT $LN12@Find_lower
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  0001d	8b 4d 0c	 mov	 ecx, DWORD PTR __Keyval$[ebp]
  00020	56		 push	 esi
  00021	8b 31		 mov	 esi, DWORD PTR [ecx]
$LL2@Find_lower:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1614 :             _Result._Location._Parent = _Trynode;

  00023	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00025	39 70 10	 cmp	 DWORD PTR [eax+16], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1615 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

  00028	73 07		 jae	 SHORT $LN4@Find_lower

; 1616 :                 _Result._Location._Child = _Tree_child::_Right;
; 1617 :                 _Trynode                 = _Trynode->_Right;

  0002a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002d	33 c9		 xor	 ecx, ecx

; 1618 :             } else {

  0002f	eb 0a		 jmp	 SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1619 :                 _Result._Location._Child = _Tree_child::_Left;
; 1620 :                 _Result._Bound           = _Trynode;

  00031	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 1621 :                 _Trynode                 = _Trynode->_Left;

  00034	b9 01 00 00 00	 mov	 ecx, 1
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$LN5@Find_lower:

; 1612 :         _Nodeptr _Trynode = _Result._Location._Parent;
; 1613 :         while (!_Trynode->_Isnil) {

  0003b	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0003e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00042	74 df		 je	 SHORT $LL2@Find_lower

; 1622 :             }
; 1623 :         }
; 1624 : 
; 1625 :         return _Result;

  00044	5e		 pop	 esi
$LN12@Find_lower:

; 1626 :     }

  00045	8b c2		 mov	 eax, edx
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
__Newsize$1$ = -12					; size = 4
tv639 = -8						; size = 4
tv622 = -4						; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>, COMDAT
; _this$ = ecx

; 875  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 876  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 877  :         _Alty& _Al        = _Getal();
; 878  :         auto& _My_data    = _Mypair._Myval2;
; 879  :         pointer& _Myfirst = _My_data._Myfirst;
; 880  :         pointer& _Mylast  = _My_data._Mylast;
; 881  : 
; 882  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 883  : 
; 884  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
  0000e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00010	2b d9		 sub	 ebx, ecx

; 885  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

  00012	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00015	2b c1		 sub	 eax, ecx
  00017	c1 fb 02	 sar	 ebx, 2
  0001a	c1 f8 02	 sar	 eax, 2

; 886  : 
; 887  :         if (_Oldsize == max_size()) {

  0001d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00022	0f 84 0f 01 00
	00		 je	 $LN88@Emplace_re

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00028	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  0002e	2b d1		 sub	 edx, ecx

; 889  :         }
; 890  : 
; 891  :         const size_type _Newsize     = _Oldsize + 1;

  00030	89 7d f4	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1942 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

  00033	c1 fa 02	 sar	 edx, 2

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00036	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  0003b	8b ca		 mov	 ecx, edx
  0003d	d1 e9		 shr	 ecx, 1
  0003f	2b c1		 sub	 eax, ecx
  00041	3b d0		 cmp	 edx, eax
  00043	76 15		 jbe	 SHORT $LN12@Emplace_re

; 2030 :             return _Max; // geometric growth would overflow

  00045	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004a	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2030 :             return _Max; // geometric growth would overflow

  0004b	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0004e	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00053	83 c4 04	 add	 esp, 4
  00056	8b f8		 mov	 edi, eax
  00058	eb 47		 jmp	 SHORT $LN23@Emplace_re
$LN12@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0005a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0005d	8b cf		 mov	 ecx, edi
  0005f	3b c7		 cmp	 eax, edi
  00061	0f 43 c8	 cmovae	 ecx, eax
  00064	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  0006a	0f 87 cc 00 00
	00		 ja	 $LN89@Emplace_re

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00070	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  00077	89 45 f8	 mov	 DWORD PTR tv639[ebp], eax

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0007a	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0007f	72 0d		 jb	 SHORT $LN24@Emplace_re

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  00081	50		 push	 eax
  00082	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00087	83 c4 04	 add	 esp, 4
  0008a	8b f8		 mov	 edi, eax
  0008c	eb 13		 jmp	 SHORT $LN23@Emplace_re
$LN24@Emplace_re:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN25@Emplace_re

; 77   :         return ::operator new(_Bytes);

  00092	50		 push	 eax
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN23@Emplace_re
$LN25@Emplace_re:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0009f	33 ff		 xor	 edi, edi
$LN23@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 899  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000a1	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  000a4	8d 0c 9f	 lea	 ecx, DWORD PTR [edi+ebx*4]

; 900  :         _Constructed_first = _Newvec + _Whereoff;
; 901  : 
; 902  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

  000a7	8b 5d 08	 mov	 ebx, DWORD PTR __Whereptr$[ebp]
  000aa	89 4d fc	 mov	 DWORD PTR tv622[ebp], ecx
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	89 01		 mov	 DWORD PTR [ecx], eax
  000b1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b4	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b6	3b d8		 cmp	 ebx, eax
  000b8	75 07		 jne	 SHORT $LN4@Emplace_re

; 908  :         } else { // provide basic guarantee

  000ba	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000bd	8b d7		 mov	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 908  :         } else { // provide basic guarantee

  000bf	eb 16		 jmp	 SHORT $LN73@Emplace_re
$LN4@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000c1	57		 push	 edi
  000c2	53		 push	 ebx
  000c3	51		 push	 ecx
  000c4	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>
  000c9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000cc	8b cb		 mov	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000ce	8b 5d fc	 mov	 ebx, DWORD PTR tv622[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1800 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000d4	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
$LN73@Emplace_re:
  000d7	52		 push	 edx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??$_Copy_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_memmove<CLight * *,CLight * *>

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000df	8b 06		 mov	 eax, DWORD PTR [esi]

; 911  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2086 :         if (_Myfirst) { // destroy and deallocate old array

  000e4	85 c0		 test	 eax, eax
  000e6	74 2c		 je	 SHORT $LN37@Emplace_re

; 2087 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2088 :             _ASAN_VECTOR_REMOVE;
; 2089 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  000e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000eb	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000ed	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN47@Emplace_re

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	83 c0 fc	 add	 eax, -4			; fffffffcH
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 2a		 ja	 SHORT $LN44@Emplace_re

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b c2		 mov	 eax, edx
$LN47@Emplace_re:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00111	83 c4 08	 add	 esp, 8
$LN37@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2093 :         _Mylast  = _Newvec + _Newsize;

  00114	8b 45 f4	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  00117	89 3e		 mov	 DWORD PTR [esi], edi
  00119	8d 0c 87	 lea	 ecx, DWORD PTR [edi+eax*4]

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0011c	8b c3		 mov	 eax, ebx

; 2093 :         _Mylast  = _Newvec + _Newsize;

  0011e	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00121	8b 4d f8	 mov	 ecx, DWORD PTR tv639[ebp]
  00124	03 cf		 add	 ecx, edi

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  00126	5f		 pop	 edi

; 2094 :         _Myend   = _Newvec + _Newcapacity;

  00127	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 912  :         }
; 913  :         _CATCH_ALL
; 914  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);
; 915  :         _Al.deallocate(_Newvec, _Newcapacity);
; 916  :         _RERAISE;
; 917  :         _CATCH_END
; 918  : 
; 919  :         _Change_array(_Newvec, _Newsize, _Newcapacity);
; 920  :         return _Newvec + _Whereoff;

  0012a	5e		 pop	 esi
  0012b	5b		 pop	 ebx

; 921  :     }

  0012c	8b e5		 mov	 esp, ebp
  0012e	5d		 pop	 ebp
  0012f	c2 08 00	 ret	 8
$LN44@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00132	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN88@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 888  :             _Xlength();

  00137	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
$LN89@Emplace_re:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  0013c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN86@Emplace_re:
  00141	cc		 int	 3
??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
;	COMDAT ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z
_TEXT	SEGMENT
$T2 = -16						; size = 4
__Gfirst$1$ = -12					; size = 4
__Hole$1$ = -12						; size = 4
tv1580 = -12						; size = 4
__Glast$1$ = -8						; size = 4
__Val$1$ = -8						; size = 4
tv1568 = -8						; size = 4
__Plast$1$ = -4						; size = 4
tv1591 = -4						; size = 4
__Bottom$1$ = 8						; size = 4
__Val$1$ = 8						; size = 4
__First$ = 8						; size = 4
__Max_sequence_non_leaf$1$ = 12				; size = 4
__Val$3 = 12						; size = 4
__Last$ = 12						; size = 4
__Ideal$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z PROC ; std::_Sort_unchecked<CLight * *,LightComp>, COMDAT

; 7635 : _CONSTEXPR20 void _Sort_unchecked(_RanIt _First, _RanIt _Last, _Iter_diff_t<_RanIt> _Ideal, _Pr _Pred) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 7636 :     // order [_First, _Last)
; 7637 :     for (;;) {
; 7638 :         if (_Last - _First <= _ISORT_MAX) { // small

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000f	8b c7		 mov	 eax, edi
  00011	2b c3		 sub	 eax, ebx
  00013	83 e0 fc	 and	 eax, -4			; fffffffcH
  00016	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0001b	0f 8e f4 01 00
	00		 jle	 $LN155@Sort_unche
  00021	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
$LL2@Sort_unche:

; 7639 :             _Insertion_sort_unchecked(_First, _Last, _Pred);
; 7640 :             return;
; 7641 :         }
; 7642 : 
; 7643 :         if (_Ideal <= 0) { // heap sort if too many divisions

  00024	8b f7		 mov	 esi, edi
  00026	2b f3		 sub	 esi, ebx
  00028	83 7d 10 00	 cmp	 DWORD PTR __Ideal$[ebp], 0
  0002c	89 75 f0	 mov	 DWORD PTR $T2[ebp], esi
  0002f	0f 8e 29 02 00
	00		 jle	 $LN156@Sort_unche

; 7567 :     _RanIt _Mid = _First + ((_Last - _First) >> 1); // shift for codegen

  00035	c1 fe 03	 sar	 esi, 3

; 7568 :     _Guess_median_unchecked(_First, _Mid, _Prev_iter(_Last), _Pred);

  00038	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  0003b	51		 push	 ecx
  0003c	50		 push	 eax
  0003d	8d 34 b3	 lea	 esi, DWORD PTR [ebx+esi*4]
  00040	56		 push	 esi
  00041	53		 push	 ebx
  00042	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@00ULightComp@@@Z ; std::_Guess_median_unchecked<CLight * *,LightComp>
  00047	83 c4 10	 add	 esp, 16			; 00000010H

; 7569 :     _RanIt _Pfirst = _Mid;
; 7570 :     _RanIt _Plast  = _Next_iter(_Pfirst);

  0004a	8d 7e 04	 lea	 edi, DWORD PTR [esi+4]
  0004d	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi

; 7573 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00050	3b de		 cmp	 ebx, esi
  00052	73 2c		 jae	 SHORT $LN202@Sort_unche
  00054	8b 16		 mov	 edx, DWORD PTR [esi]
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL60@Sort_unche:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00060	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00063	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  00068	f3 0f 10 49 78	 movss	 xmm1, DWORD PTR [ecx+120]
  0006d	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7573 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00070	77 0e		 ja	 SHORT $LN202@Sort_unche
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00072	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7573 :            && !_Pred(*_Pfirst, *_Prev_iter(_Pfirst))) {

  00075	77 09		 ja	 SHORT $LN202@Sort_unche

; 7574 :         --_Pfirst;

  00077	83 c6 fc	 add	 esi, -4			; fffffffcH
  0007a	8b d1		 mov	 edx, ecx
  0007c	3b de		 cmp	 ebx, esi
  0007e	72 e0		 jb	 SHORT $LL60@Sort_unche
$LN202@Sort_unche:

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  00080	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00083	3b f9		 cmp	 edi, ecx
  00085	73 24		 jae	 SHORT $LN63@Sort_unche
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00087	8b 06		 mov	 eax, DWORD PTR [esi]
  00089	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  0008e	66 90		 npad	 2
$LL62@Sort_unche:
  00090	8b 07		 mov	 eax, DWORD PTR [edi]
  00092	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00097	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0009a	77 0c		 ja	 SHORT $LN203@Sort_unche
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0009c	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7577 :     while (_Plast < _Last && !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst) && !_Pred(*_Pfirst, *_Plast)) {

  0009f	77 07		 ja	 SHORT $LN203@Sort_unche

; 7578 :         ++_Plast;

  000a1	83 c7 04	 add	 edi, 4
  000a4	3b f9		 cmp	 edi, ecx
  000a6	72 e8		 jb	 SHORT $LL62@Sort_unche
$LN203@Sort_unche:
  000a8	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN63@Sort_unche:

; 7579 :     }
; 7580 : 
; 7581 :     _RanIt _Gfirst = _Plast;

  000ab	8b d7		 mov	 edx, edi

; 7582 :     _RanIt _Glast  = _Pfirst;

  000ad	8b de		 mov	 ebx, esi
$LN209@Sort_unche:

; 7585 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000af	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN208@Sort_unche:
  000b2	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
$LL64@Sort_unche:
  000b5	3b d1		 cmp	 edx, ecx
  000b7	73 3f		 jae	 SHORT $LN152@Sort_unche
  000b9	0f 1f 80 00 00
	00 00		 npad	 7
$LL69@Sort_unche:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000c0	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000c2	8b 06		 mov	 eax, DWORD PTR [esi]
  000c4	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  000c9	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  000ce	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7586 :             if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst)) {

  000d1	77 14		 ja	 SHORT $LN67@Sort_unche
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  000d3	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7588 :             } else if (_Pred(*_Gfirst, *_Pfirst)) {

  000d6	77 17		 ja	 SHORT $LN204@Sort_unche

; 7589 :                 break;
; 7590 :             } else if (_Plast != _Gfirst) {

  000d8	3b fa		 cmp	 edi, edx
  000da	74 08		 je	 SHORT $LN77@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  000dc	8b 07		 mov	 eax, DWORD PTR [edi]

; 101  :     _Left    = _STD move(_Right);

  000de	8b d9		 mov	 ebx, ecx
  000e0	89 1f		 mov	 DWORD PTR [edi], ebx

; 102  :     _Right   = _STD move(_Tmp);

  000e2	89 02		 mov	 DWORD PTR [edx], eax
$LN77@Sort_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7585 :         for (; _Gfirst < _Last; ++_Gfirst) {

  000e4	83 c7 04	 add	 edi, 4
$LN67@Sort_unche:
  000e7	83 c2 04	 add	 edx, 4
  000ea	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  000ed	72 d1		 jb	 SHORT $LL69@Sort_unche
$LN204@Sort_unche:
  000ef	8b 5d f8	 mov	 ebx, DWORD PTR __Glast$1$[ebp]
  000f2	89 55 f4	 mov	 DWORD PTR __Gfirst$1$[ebp], edx
  000f5	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
$LN152@Sort_unche:

; 7598 :         for (; _First < _Glast; --_Glast) {

  000f8	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  000fb	3b d8		 cmp	 ebx, eax
  000fd	76 44		 jbe	 SHORT $LN207@Sort_unche
  000ff	8d 4b fc	 lea	 ecx, DWORD PTR [ebx-4]
  00102	8b d0		 mov	 edx, eax
$LL72@Sort_unche:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00104	8b 01		 mov	 eax, DWORD PTR [ecx]
  00106	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  0010b	8b 06		 mov	 eax, DWORD PTR [esi]
  0010d	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  00112	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7599 :             if (_DEBUG_LT_PRED(_Pred, *_Prev_iter(_Glast), *_Pfirst)) {

  00115	77 14		 ja	 SHORT $LN70@Sort_unche
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00117	0f 2f c8	 comiss	 xmm1, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7601 :             } else if (_Pred(*_Pfirst, *_Prev_iter(_Glast))) {

  0011a	77 19		 ja	 SHORT $LN205@Sort_unche

; 7602 :                 break;
; 7603 :             } else if (--_Pfirst != _Prev_iter(_Glast)) {

  0011c	83 ee 04	 sub	 esi, 4
  0011f	3b f1		 cmp	 esi, ecx
  00121	74 08		 je	 SHORT $LN70@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00123	8b 06		 mov	 eax, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

  00125	8b 39		 mov	 edi, DWORD PTR [ecx]
  00127	89 3e		 mov	 DWORD PTR [esi], edi

; 102  :     _Right   = _STD move(_Tmp);

  00129	89 01		 mov	 DWORD PTR [ecx], eax
$LN70@Sort_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7598 :         for (; _First < _Glast; --_Glast) {

  0012b	83 eb 04	 sub	 ebx, 4
  0012e	83 e9 04	 sub	 ecx, 4
  00131	3b d3		 cmp	 edx, ebx
  00133	72 cf		 jb	 SHORT $LL72@Sort_unche
$LN205@Sort_unche:
  00135	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]

; 7604 :                 _STD iter_swap(_Pfirst, _Prev_iter(_Glast));
; 7605 :             }
; 7606 :         }
; 7607 : 
; 7608 :         if (_Glast == _First && _Gfirst == _Last) {

  00138	3b d8		 cmp	 ebx, eax
  0013a	8b 7d fc	 mov	 edi, DWORD PTR __Plast$1$[ebp]
  0013d	8b 55 f4	 mov	 edx, DWORD PTR __Gfirst$1$[ebp]
  00140	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
$LN207@Sort_unche:
  00143	75 2f		 jne	 SHORT $LN85@Sort_unche
  00145	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00148	3b d1		 cmp	 edx, ecx
  0014a	74 6b		 je	 SHORT $LN154@Sort_unche

; 7609 :             return pair<_RanIt, _RanIt>(_Pfirst, _Plast);
; 7610 :         }
; 7611 : 
; 7612 :         if (_Glast == _First) { // no room at bottom, rotate pivot upward
; 7613 :             if (_Plast != _Gfirst) {

  0014c	3b fa		 cmp	 edi, edx
  0014e	74 08		 je	 SHORT $LN105@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00150	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 101  :     _Left    = _STD move(_Right);

  00152	8b 07		 mov	 eax, DWORD PTR [edi]
  00154	89 06		 mov	 DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

  00156	89 0f		 mov	 DWORD PTR [edi], ecx
$LN105@Sort_unche:

; 100  :     _Ty _Tmp = _STD move(_Left);

  00158	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7617 :             ++_Plast;

  0015a	83 c7 04	 add	 edi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  0015d	8b 02		 mov	 eax, DWORD PTR [edx]
  0015f	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7619 :             ++_Pfirst;

  00161	83 c6 04	 add	 esi, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 102  :     _Right   = _STD move(_Tmp);

  00164	89 0a		 mov	 DWORD PTR [edx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7620 :             ++_Gfirst;

  00166	83 c2 04	 add	 edx, 4
  00169	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0016c	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
  0016f	e9 3e ff ff ff	 jmp	 $LN208@Sort_unche
$LN85@Sort_unche:

; 7621 :         } else if (_Gfirst == _Last) { // no room at top, rotate pivot downward

  00174	83 c3 fc	 add	 ebx, -4			; fffffffcH
  00177	89 5d f8	 mov	 DWORD PTR __Glast$1$[ebp], ebx
  0017a	3b 55 0c	 cmp	 edx, DWORD PTR __Last$[ebp]
  0017d	75 25		 jne	 SHORT $LN88@Sort_unche

; 7622 :             if (--_Glast != --_Pfirst) {

  0017f	83 ee 04	 sub	 esi, 4
  00182	3b de		 cmp	 ebx, esi
  00184	74 08		 je	 SHORT $LN192@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00186	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 101  :     _Left    = _STD move(_Right);

  00188	8b 06		 mov	 eax, DWORD PTR [esi]
  0018a	89 03		 mov	 DWORD PTR [ebx], eax

; 102  :     _Right   = _STD move(_Tmp);

  0018c	89 0e		 mov	 DWORD PTR [esi], ecx
$LN192@Sort_unche:

; 100  :     _Ty _Tmp = _STD move(_Left);

  0018e	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7626 :             _STD iter_swap(_Pfirst, --_Plast);

  00190	83 ef 04	 sub	 edi, 4
  00193	89 7d fc	 mov	 DWORD PTR __Plast$1$[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 101  :     _Left    = _STD move(_Right);

  00196	8b 07		 mov	 eax, DWORD PTR [edi]
  00198	89 06		 mov	 DWORD PTR [esi], eax

; 102  :     _Right   = _STD move(_Tmp);

  0019a	89 0f		 mov	 DWORD PTR [edi], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7627 :         } else {

  0019c	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  0019f	e9 11 ff ff ff	 jmp	 $LL64@Sort_unche
$LN88@Sort_unche:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  001a4	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 101  :     _Left    = _STD move(_Right);

  001a6	8b 03		 mov	 eax, DWORD PTR [ebx]
  001a8	89 02		 mov	 DWORD PTR [edx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7629 :             ++_Gfirst;

  001aa	83 c2 04	 add	 edx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 102  :     _Right   = _STD move(_Tmp);

  001ad	89 0b		 mov	 DWORD PTR [ebx], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7631 :     }

  001af	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  001b2	e9 f8 fe ff ff	 jmp	 $LN209@Sort_unche
$LN154@Sort_unche:

; 7644 :             _Make_heap_unchecked(_First, _Last, _Pred);
; 7645 :             _Sort_heap_unchecked(_First, _Last, _Pred);
; 7646 :             return;
; 7647 :         }
; 7648 : 
; 7649 :         // divide and conquer by quicksort
; 7650 :         auto _Mid = _Partition_by_median_guess_unchecked(_First, _Last, _Pred);
; 7651 : 
; 7652 :         _Ideal = (_Ideal >> 1) + (_Ideal >> 2); // allow 1.5 log2(N) divisions

  001b7	8b 55 10	 mov	 edx, DWORD PTR __Ideal$[ebp]
  001ba	2b cf		 sub	 ecx, edi

; 7653 : 
; 7654 :         if (_Mid.first - _First < _Last - _Mid.second) { // loop on second half

  001bc	8b 5d 08	 mov	 ebx, DWORD PTR __First$[ebp]
  001bf	8b c2		 mov	 eax, edx
  001c1	c1 f8 02	 sar	 eax, 2
  001c4	83 e1 fc	 and	 ecx, -4			; fffffffcH
  001c7	d1 fa		 sar	 edx, 1
  001c9	03 d0		 add	 edx, eax
  001cb	8b c6		 mov	 eax, esi
  001cd	2b c3		 sub	 eax, ebx
  001cf	89 55 10	 mov	 DWORD PTR __Ideal$[ebp], edx
  001d2	83 e0 fc	 and	 eax, -4			; fffffffcH
  001d5	3b c1		 cmp	 eax, ecx
  001d7	8b 45 14	 mov	 eax, DWORD PTR __Pred$[ebp]
  001da	50		 push	 eax
  001db	52		 push	 edx
  001dc	7d 11		 jge	 SHORT $LN7@Sort_unche

; 7655 :             _Sort_unchecked(_First, _Mid.first, _Ideal, _Pred);

  001de	56		 push	 esi
  001df	53		 push	 ebx
  001e0	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>

; 7656 :             _First = _Mid.second;

  001e5	8b df		 mov	 ebx, edi

; 7657 :         } else { // loop on first half

  001e7	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  001ea	89 5d 08	 mov	 DWORD PTR __First$[ebp], ebx
  001ed	eb 0e		 jmp	 SHORT $LN210@Sort_unche
$LN7@Sort_unche:

; 7658 :             _Sort_unchecked(_Mid.second, _Last, _Ideal, _Pred);

  001ef	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  001f2	57		 push	 edi
  001f3	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>

; 7659 :             _Last = _Mid.first;

  001f8	8b fe		 mov	 edi, esi
  001fa	89 7d 0c	 mov	 DWORD PTR __Last$[ebp], edi
$LN210@Sort_unche:

; 7636 :     // order [_First, _Last)
; 7637 :     for (;;) {
; 7638 :         if (_Last - _First <= _ISORT_MAX) { // small

  001fd	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00200	8b c7		 mov	 eax, edi
  00202	2b c3		 sub	 eax, ebx
  00204	83 c4 10	 add	 esp, 16			; 00000010H
  00207	83 e0 fc	 and	 eax, -4			; fffffffcH
  0020a	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0020f	0f 8f 0f fe ff
	ff		 jg	 $LL2@Sort_unche
$LN155@Sort_unche:

; 7510 :     if (_First != _Last) {

  00215	3b df		 cmp	 ebx, edi
  00217	0f 84 8b 01 00
	00		 je	 $LN51@Sort_unche

; 7511 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  0021d	8d 53 04	 lea	 edx, DWORD PTR [ebx+4]
  00220	3b d7		 cmp	 edx, edi
  00222	0f 84 80 01 00
	00		 je	 $LN51@Sort_unche
$LL11@Sort_unche:

; 7512 :             _BidIt _Hole               = _Mid;
; 7513 :             _Iter_value_t<_BidIt> _Val = _STD move(*_Mid);

  00228	8b 02		 mov	 eax, DWORD PTR [edx]
  0022a	8b f2		 mov	 esi, edx
  0022c	89 45 08	 mov	 DWORD PTR __Val$1$[ebp], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0022f	f3 0f 10 48 78	 movss	 xmm1, DWORD PTR [eax+120]
  00234	8b 03		 mov	 eax, DWORD PTR [ebx]
  00236	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  0023b	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7515 :             if (_DEBUG_LT_PRED(_Pred, _Val, *_First)) { // found new earliest element, move to front

  0023e	0f 86 26 01 00
	00		 jbe	 $LN18@Sort_unche
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4249 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  00244	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
  00247	56		 push	 esi
  00248	52		 push	 edx
  00249	53		 push	 ebx
  0024a	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@00@Z ; std::_Copy_backward_memmove<CLight * *,CLight * *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7517 :                 *_First = _STD move(_Val);

  0024f	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 4249 :             return _Copy_backward_memmove(_First, _Last, _Dest);

  00252	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7517 :                 *_First = _STD move(_Val);

  00255	89 03		 mov	 DWORD PTR [ebx], eax
  00257	8b d6		 mov	 edx, esi

; 7518 :             } else { // look for insertion point after first

  00259	e9 42 01 00 00	 jmp	 $LN19@Sort_unche
$LN156@Sort_unche:

; 6195 :     _Diff _Bottom = _Last - _First;

  0025e	8b c6		 mov	 eax, esi
  00260	c1 f8 02	 sar	 eax, 2

; 6196 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00263	8b f8		 mov	 edi, eax
  00265	89 45 08	 mov	 DWORD PTR __Bottom$1$[ebp], eax
  00268	d1 ff		 sar	 edi, 1
  0026a	85 ff		 test	 edi, edi
  0026c	0f 8e b1 00 00
	00		 jle	 $LN31@Sort_unche
  00272	48		 dec	 eax
  00273	89 45 fc	 mov	 DWORD PTR tv1591[ebp], eax
  00276	d1 f8		 sar	 eax, 1
  00278	89 45 0c	 mov	 DWORD PTR __Max_sequence_non_leaf$1$[ebp], eax
  0027b	0f 1f 44 00 00	 npad	 5
$LL30@Sort_unche:

; 6197 :         // reheap top half, bottom to top
; 6198 :         --_Hole;
; 6199 :         _Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  00280	8b 54 bb fc	 mov	 edx, DWORD PTR [ebx+edi*4-4]
  00284	4f		 dec	 edi
  00285	89 7d f4	 mov	 DWORD PTR __Hole$1$[ebp], edi

; 6200 :         _Pop_heap_hole_by_index(_First, _Hole, _Bottom, _STD move(_Val), _Pred);

  00288	8b f7		 mov	 esi, edi
  0028a	89 55 f8	 mov	 DWORD PTR __Val$1$[ebp], edx

; 6033 :     _Diff _Idx       = _Hole;

  0028d	8b cf		 mov	 ecx, edi

; 6034 : 
; 6035 :     // Check whether _Idx can have a child before calculating that child's index, since
; 6036 :     // calculating the child's index can trigger integer overflows
; 6037 :     const _Diff _Max_sequence_non_leaf = (_Bottom - 1) >> 1; // shift for codegen
; 6038 :     while (_Idx < _Max_sequence_non_leaf) { // move _Hole down to larger child

  0028f	3b f8		 cmp	 edi, eax
  00291	7d 41		 jge	 SHORT $LN36@Sort_unche
  00293	8b 7d 0c	 mov	 edi, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
  00296	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL35@Sort_unche:

; 6039 :         _Idx = 2 * _Idx + 2;

  002a0	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 6040 :         if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1)))) {
; 6041 :             --_Idx;
; 6042 :         }
; 6043 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  002a3	8b 44 93 04	 mov	 eax, DWORD PTR [ebx+edx*4+4]
  002a7	8b 4c 93 08	 mov	 ecx, DWORD PTR [ebx+edx*4+8]
  002ab	f3 0f 10 40 78	 movss	 xmm0, DWORD PTR [eax+120]
  002b0	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
  002b4	b9 00 00 00 00	 mov	 ecx, 0
  002b9	0f 96 c1	 setbe	 cl
  002bc	41		 inc	 ecx
  002bd	03 ca		 add	 ecx, edx
  002bf	8b 04 8b	 mov	 eax, DWORD PTR [ebx+ecx*4]
  002c2	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 6044 :         _Hole             = _Idx;

  002c5	8b f1		 mov	 esi, ecx
  002c7	3b cf		 cmp	 ecx, edi
  002c9	7c d5		 jl	 SHORT $LL35@Sort_unche
  002cb	8b 7d f4	 mov	 edi, DWORD PTR __Hole$1$[ebp]
  002ce	8b 55 f8	 mov	 edx, DWORD PTR __Val$1$[ebp]
  002d1	8b 45 0c	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]
$LN36@Sort_unche:

; 6045 :     }
; 6046 : 
; 6047 :     if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0) { // only child at bottom, move _Hole down to it

  002d4	3b f0		 cmp	 esi, eax
  002d6	75 11		 jne	 SHORT $LN38@Sort_unche
  002d8	8b 45 08	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  002db	a8 01		 test	 al, 1
  002dd	75 0a		 jne	 SHORT $LN38@Sort_unche

; 6048 :         *(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  002df	8b 44 83 fc	 mov	 eax, DWORD PTR [ebx+eax*4-4]
  002e3	89 04 b3	 mov	 DWORD PTR [ebx+esi*4], eax

; 6049 :         _Hole             = _Bottom - 1;

  002e6	8b 75 fc	 mov	 esi, DWORD PTR tv1591[ebp]
$LN38@Sort_unche:

; 5920 :     for (_Diff _Idx = (_Hole - 1) >> 1; // shift for codegen

  002e9	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  002ec	d1 f8		 sar	 eax, 1

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  002ee	3b fe		 cmp	 edi, esi
  002f0	7d 1a		 jge	 SHORT $LN206@Sort_unche
$LL45@Sort_unche:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  002f2	8b 0c 83	 mov	 ecx, DWORD PTR [ebx+eax*4]
  002f5	f3 0f 10 42 78	 movss	 xmm0, DWORD PTR [edx+120]
  002fa	0f 2f 41 78	 comiss	 xmm0, DWORD PTR [ecx+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 5921 :          _Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val); //

  002fe	76 0c		 jbe	 SHORT $LN206@Sort_unche

; 5922 :          _Idx = (_Hole - 1) >> 1) { // shift for codegen
; 5923 :         // move _Hole up to parent
; 5924 :         *(_First + _Hole) = _STD move(*(_First + _Idx));

  00300	89 0c b3	 mov	 DWORD PTR [ebx+esi*4], ecx

; 5925 :         _Hole             = _Idx;

  00303	8b f0		 mov	 esi, eax
  00305	48		 dec	 eax
  00306	d1 f8		 sar	 eax, 1
  00308	3b fe		 cmp	 edi, esi
  0030a	7c e6		 jl	 SHORT $LL45@Sort_unche
$LN206@Sort_unche:

; 6196 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  0030c	8b 45 0c	 mov	 eax, DWORD PTR __Max_sequence_non_leaf$1$[ebp]

; 5928 :     *(_First + _Hole) = _STD forward<_Ty>(_Val); // drop _Val into final hole

  0030f	89 14 b3	 mov	 DWORD PTR [ebx+esi*4], edx

; 6196 :     for (_Diff _Hole = _Bottom >> 1; _Hole > 0;) { // shift for codegen

  00312	85 ff		 test	 edi, edi
  00314	0f 8f 66 ff ff
	ff		 jg	 $LL30@Sort_unche
  0031a	8b 75 f0	 mov	 esi, DWORD PTR $T2[ebp]
  0031d	8b 45 08	 mov	 eax, DWORD PTR __Bottom$1$[ebp]
  00320	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
$LN31@Sort_unche:

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  00323	83 f8 02	 cmp	 eax, 2
  00326	0f 8c 7c 00 00
	00		 jl	 $LN51@Sort_unche
  0032c	0f 1f 40 00	 npad	 4
$LL52@Sort_unche:

; 6071 :         _Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  00330	8b 44 33 fc	 mov	 eax, DWORD PTR [ebx+esi-4]
  00334	89 45 0c	 mov	 DWORD PTR __Val$3[ebp], eax

; 6060 :     *_Dest      = _STD move(*_First);

  00337	8b 03		 mov	 eax, DWORD PTR [ebx]
  00339	89 44 33 fc	 mov	 DWORD PTR [ebx+esi-4], eax

; 6061 :     using _Diff = _Iter_diff_t<_RanIt>;
; 6062 :     _Pop_heap_hole_by_index(

  0033d	83 c6 fc	 add	 esi, -4			; fffffffcH
  00340	51		 push	 ecx
  00341	8d 45 0c	 lea	 eax, DWORD PTR __Val$3[ebp]
  00344	50		 push	 eax
  00345	8b c6		 mov	 eax, esi
  00347	c1 f8 02	 sar	 eax, 2
  0034a	50		 push	 eax
  0034b	6a 00		 push	 0
  0034d	53		 push	 ebx
  0034e	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PAPAVCLight@@PAV1@ULightComp@@@std@@YAXPAPAVCLight@@HH$$QAPAV1@ULightComp@@@Z ; std::_Pop_heap_hole_by_index<CLight * *,CLight *,LightComp>

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  00353	8b 4d 14	 mov	 ecx, DWORD PTR __Pred$[ebp]
  00356	8b c6		 mov	 eax, esi
  00358	83 e0 fc	 and	 eax, -4			; fffffffcH

; 6062 :     _Pop_heap_hole_by_index(

  0035b	83 c4 14	 add	 esp, 20			; 00000014H

; 6416 :     for (; _Last - _First >= 2; --_Last) {

  0035e	83 f8 08	 cmp	 eax, 8
  00361	7d cd		 jge	 SHORT $LL52@Sort_unche

; 7660 :         }
; 7661 :     }
; 7662 : }

  00363	5f		 pop	 edi
  00364	5e		 pop	 esi
  00365	5b		 pop	 ebx
  00366	8b e5		 mov	 esp, ebp
  00368	5d		 pop	 ebp
  00369	c3		 ret	 0
$LN18@Sort_unche:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0036a	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  0036d	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00370	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  00375	0f 2f c1	 comiss	 xmm0, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00378	76 1e		 jbe	 SHORT $LN15@Sort_unche
  0037a	8b 7d 08	 mov	 edi, DWORD PTR __Val$1$[ebp]
  0037d	0f 1f 00	 npad	 3
$LL16@Sort_unche:

; 7520 :                     *_Hole = _STD move(*_Prev); // move hole down

  00380	89 0e		 mov	 DWORD PTR [esi], ecx
  00382	8b f0		 mov	 esi, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  00384	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00387	83 e8 04	 sub	 eax, 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 96   : 		return l->GetDistance() < r->GetDistance();

  0038a	f3 0f 10 41 78	 movss	 xmm0, DWORD PTR [ecx+120]
  0038f	0f 2f 47 78	 comiss	 xmm0, DWORD PTR [edi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7519 :                 for (_BidIt _Prev = _Hole; _DEBUG_LT_PRED(_Pred, _Val, *--_Prev); _Hole = _Prev) {

  00393	77 eb		 ja	 SHORT $LL16@Sort_unche
  00395	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
$LN15@Sort_unche:

; 7521 :                 }
; 7522 : 
; 7523 :                 *_Hole = _STD move(_Val); // insert element in hole

  00398	8b 45 08	 mov	 eax, DWORD PTR __Val$1$[ebp]
  0039b	83 c2 04	 add	 edx, 4
  0039e	89 06		 mov	 DWORD PTR [esi], eax
$LN19@Sort_unche:

; 7511 :         for (_BidIt _Mid = _First; ++_Mid != _Last;) { // order next element

  003a0	3b d7		 cmp	 edx, edi
  003a2	0f 85 80 fe ff
	ff		 jne	 $LL11@Sort_unche
$LN51@Sort_unche:
  003a8	5f		 pop	 edi

; 7660 :         }
; 7661 :     }
; 7662 : }

  003a9	5e		 pop	 esi
  003aa	5b		 pop	 ebx
  003ab	8b e5		 mov	 esp, ebp
  003ad	5d		 pop	 ebp
  003ae	c3		 ret	 0
??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ENDP ; std::_Sort_unchecked<CLight * *,LightComp>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Newcapacity$1$ = 12					; size = 4
__Oldsize$1$ = 12					; size = 4
__Newsize$ = 12						; size = 4
??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>, COMDAT
; _this$ = ecx

; 1444 :     _CONSTEXPR20 void _Assign_counted_range(_Iter _First, const size_type _Newsize) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 1445 :         // assign elements from counted range _First + [0, _Newsize)
; 1446 :         auto& _Al         = _Getal();
; 1447 :         auto& _My_data    = _Mypair._Myval2;
; 1448 :         pointer& _Myfirst = _My_data._Myfirst;
; 1449 :         pointer& _Mylast  = _My_data._Mylast;
; 1450 :         pointer& _Myend   = _My_data._Myend;
; 1451 : 
; 1452 :         constexpr bool _Nothrow_construct = conjunction_v<is_nothrow_constructible<_Ty, _Iter_ref_t<_Iter>>,
; 1453 :             _Uses_default_construct<_Alloc, _Ty*, _Iter_ref_t<_Iter>>>;
; 1454 : 
; 1455 :         _My_data._Orphan_all();
; 1456 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);
; 1457 :         if (_Newsize > _Oldcapacity) {

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR __Newsize$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0000e	8b 37		 mov	 esi, DWORD PTR [edi]
  00010	2b ce		 sub	 ecx, esi
  00012	c1 f9 02	 sar	 ecx, 2
  00015	3b d9		 cmp	 ebx, ecx
  00017	0f 86 d4 00 00
	00		 jbe	 $LN5@Assign_cou

; 1721 :         if (_Newsize > max_size()) {

  0001d	81 fb ff ff ff
	3f		 cmp	 ebx, 1073741823		; 3fffffffH
  00023	0f 87 05 01 00
	00		 ja	 $LN88@Assign_cou

; 2029 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

  00029	8b d1		 mov	 edx, ecx
  0002b	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00030	d1 ea		 shr	 edx, 1
  00032	2b c2		 sub	 eax, edx
  00034	3b c8		 cmp	 ecx, eax
  00036	76 09		 jbe	 SHORT $LN26@Assign_cou

; 2030 :             return _Max; // geometric growth would overflow

  00038	c7 45 0c ff ff
	ff 3f		 mov	 DWORD PTR __Newcapacity$1$[ebp], 1073741823 ; 3fffffffH
  0003f	eb 0b		 jmp	 SHORT $LN27@Assign_cou
$LN26@Assign_cou:

; 2031 :         }
; 2032 : 
; 2033 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00041	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2034 : 
; 2035 :         if (_Geometric < _Newsize) {

  00044	3b c3		 cmp	 eax, ebx
  00046	0f 42 c3	 cmovb	 eax, ebx
  00049	89 45 0c	 mov	 DWORD PTR __Newcapacity$1$[ebp], eax
$LN27@Assign_cou:

; 1727 :         if (_Myfirst) { // destroy and deallocate old array

  0004c	85 f6		 test	 esi, esi
  0004e	74 3f		 je	 SHORT $LN23@Assign_cou
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00050	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00053	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00059	72 16		 jb	 SHORT $LN61@Assign_cou

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005b	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  0005e	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00061	2b f2		 sub	 esi, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00063	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00066	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00069	0f 87 c9 00 00
	00		 ja	 $LN58@Assign_cou

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006f	8b f2		 mov	 esi, edx
$LN61@Assign_cou:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00071	51		 push	 ecx
  00072	56		 push	 esi
  00073	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1732 :             _Myfirst = nullptr;

  00078	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007e	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1733 :             _Mylast  = nullptr;

  00081	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1734 :             _Myend   = nullptr;

  00088	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
$LN23@Assign_cou:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  0008f	8b 75 0c	 mov	 esi, DWORD PTR __Newcapacity$1$[ebp]
  00092	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00098	0f 87 95 00 00
	00		 ja	 $LN89@Assign_cou

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  0009e	c1 e6 02	 shl	 esi, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  000a1	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  000a7	72 0d		 jb	 SHORT $LN40@Assign_cou

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  000a9	56		 push	 esi
  000aa	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  000af	83 c4 04	 add	 esp, 4
  000b2	8b f0		 mov	 esi, eax
  000b4	eb 13		 jmp	 SHORT $LN39@Assign_cou
$LN40@Assign_cou:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  000b6	85 f6		 test	 esi, esi
  000b8	74 0d		 je	 SHORT $LN41@Assign_cou

; 77   :         return ::operator new(_Bytes);

  000ba	56		 push	 esi
  000bb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c0	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  000c3	8b f0		 mov	 esi, eax
  000c5	eb 02		 jmp	 SHORT $LN39@Assign_cou
$LN41@Assign_cou:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  000c7	33 f6		 xor	 esi, esi
$LN39@Assign_cou:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2055 :         _Myend             = _Newvec + _Newcapacity;

  000c9	8b 45 0c	 mov	 eax, DWORD PTR __Newcapacity$1$[ebp]
  000cc	89 37		 mov	 DWORD PTR [edi], esi
  000ce	89 77 04	 mov	 DWORD PTR [edi+4], esi
  000d1	8d 04 86	 lea	 eax, DWORD PTR [esi+eax*4]
  000d4	89 47 08	 mov	 DWORD PTR [edi+8], eax
$LN6@Assign_cou:

; 1504 :     }

  000d7	56		 push	 esi
  000d8	53		 push	 ebx
  000d9	ff 75 08	 push	 DWORD PTR __First$[ebp]
  000dc	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e4	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]
  000e7	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000ea	5f		 pop	 edi
  000eb	5e		 pop	 esi
  000ec	5b		 pop	 ebx
  000ed	5d		 pop	 ebp
  000ee	c2 08 00	 ret	 8
$LN5@Assign_cou:

; 1458 :             _Clear_and_reserve_geometric(_Newsize);
; 1459 :             if constexpr (_Nothrow_construct) {
; 1460 :                 _Mylast = _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1461 :                 _ASAN_VECTOR_CREATE;
; 1462 :             } else {
; 1463 :                 _ASAN_VECTOR_CREATE_GUARD;
; 1464 :                 _Mylast = _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1465 :             }
; 1466 :             return;
; 1467 :         }
; 1468 : 
; 1469 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

  000f1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000f4	2b c6		 sub	 eax, esi
  000f6	c1 f8 02	 sar	 eax, 2
  000f9	89 45 0c	 mov	 DWORD PTR __Oldsize$1$[ebp], eax

; 1470 :         if (_Newsize > _Oldsize) {

  000fc	3b d8		 cmp	 ebx, eax
  000fe	76 d7		 jbe	 SHORT $LN6@Assign_cou

; 1471 :             bool _Copied = false;
; 1472 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1473 : #if _HAS_CXX20
; 1474 :                 if (!_STD is_constant_evaluated())
; 1475 : #endif // _HAS_CXX20
; 1476 :                 {
; 1477 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

  00100	56		 push	 esi
  00101	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00104	50		 push	 eax
  00105	56		 push	 esi
  00106	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>

; 1478 :                     _First += _Oldsize;

  0010b	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldsize$1$[ebp]

; 1479 :                     _Copied = true;
; 1480 :                 }
; 1481 :             }
; 1482 : 
; 1483 :             if (!_Copied) {
; 1484 :                 for (auto _Mid = _Myfirst; _Mid != _Mylast; ++_Mid, (void) ++_First) {
; 1485 :                     *_Mid = *_First;
; 1486 :                 }
; 1487 :             }
; 1488 : 
; 1489 :             if constexpr (_Nothrow_construct) {
; 1490 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1491 :                 _Mylast = _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

  0010e	2b d9		 sub	 ebx, ecx
  00110	8d 04 8e	 lea	 eax, DWORD PTR [esi+ecx*4]
  00113	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1741 :             _Copy_memmove_n(_UFirst, _Count, _Unfancy(_Dest));

  00116	56		 push	 esi
  00117	53		 push	 ebx
  00118	50		 push	 eax
  00119	e8 00 00 00 00	 call	 ??$_Copy_memmove_n@PAPAVCLight@@PAPAV1@@std@@YAPAPAVCLight@@PAPAV1@I0@Z ; std::_Copy_memmove_n<CLight * *,CLight * *>
  0011e	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1504 :     }

  00121	8d 04 9e	 lea	 eax, DWORD PTR [esi+ebx*4]
  00124	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00127	5f		 pop	 edi
  00128	5e		 pop	 esi
  00129	5b		 pop	 ebx
  0012a	5d		 pop	 ebp
  0012b	c2 08 00	 ret	 8
$LN88@Assign_cou:

; 1722 :             _Xlength();

  0012e	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
$LN89@Assign_cou:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00133	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN58@Assign_cou:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00138	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN85@Assign_cou:
  0013d	cc		 int	 3
??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >, COMDAT
; _this$ = ecx

; 744  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00005	8b 75 0c	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000e	75 25		 jne	 SHORT $LN3@Erase_tree
  00010	57		 push	 edi
  00011	8b 7d 08	 mov	 edi, DWORD PTR __Al$[ebp]
$LL2@Erase_tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00014	ff 76 08	 push	 DWORD PTR [esi+8]
  00017	8b cb		 mov	 ecx, ebx
  00019	57		 push	 edi
  0001a	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001f	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  00021	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00023	6a 18		 push	 24			; 00000018H
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002e	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00032	74 e0		 je	 SHORT $LL2@Erase_tree
  00034	5f		 pop	 edi
$LN3@Erase_tree:
  00035	5e		 pop	 esi

; 747  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));
; 748  :         }
; 749  :     }

  00036	5b		 pop	 ebx
  00037	5d		 pop	 ebp
  00038	c2 08 00	 ret	 8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 50   :     _Tree_unchecked_const_iterator& operator++() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 51   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 52   :             _Nodeptr _Pnode;
; 53   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 54   :                 _Ptr = _Pnode; // ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 63   :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 55   :             }
; 56   : 
; 57   :             _Ptr = _Pnode; // ==> parent (head if end())
; 58   :         } else {
; 59   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree
; 60   :         }
; 61   : 
; 62   :         return *this;

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 63   :     }

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightManager@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightManager@@UAEPAXI@Z PROC			; CLightManager::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLightManager@@UAE@XZ ; CLightManager::~CLightManager
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 6c		 push	 108			; 0000006cH
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_GCLightManager@@UAEPAXI@Z ENDP			; CLightManager::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z PROC		; CDynamicPool<CLight>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCLight@@@@UAE@XZ ; CDynamicPool<CLight>::~CDynamicPool<CLight>
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 24		 push	 36			; 00000024H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$CDynamicPool@VCLight@@@@UAEPAXI@Z ENDP		; CDynamicPool<CLight>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z
_TEXT	SEGMENT
_pkData$ = 8						; size = 4
?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z PROC	; CDynamicPool<CLight>::Delete, COMDAT

; 113  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 114  : 		delete pkData;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _pkData$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 06		 je	 SHORT $LN3@Delete
  0000a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0000c	6a 01		 push	 1
  0000e	ff 10		 call	 DWORD PTR [eax]
$LN3@Delete:

; 115  : 	}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
?Delete@?$CDynamicPool@VCLight@@@@KAXPAVCLight@@@Z ENDP	; CDynamicPool<CLight>::Delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
;	COMDAT ??1?$CDynamicPool@VCLight@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CDynamicPool@VCLight@@@@UAE@XZ PROC		; CDynamicPool<CLight>::~CDynamicPool<CLight>, COMDAT
; _this$ = ecx

; 18   : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00009	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0000c	85 c0		 test	 eax, eax
  0000e	74 41		 je	 SHORT $LN6@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00010	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00013	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00015	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN22@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 6b		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN22@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00039	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00040	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  00043	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2114 :             _Myend   = nullptr;

  0004a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
$LN6@CDynamicPo:

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00051	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00054	85 c0		 test	 eax, eax
  00056	74 41		 je	 SHORT $LN31@CDynamicPo

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00058	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0005b	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005d	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00060	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00066	72 12		 jb	 SHORT $LN47@CDynamicPo

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00068	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0006b	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006e	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	83 c0 fc	 add	 eax, -4			; fffffffcH
  00073	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00076	77 23		 ja	 SHORT $LN44@CDynamicPo

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00078	8b c2		 mov	 eax, edx
$LN47@CDynamicPo:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007a	51		 push	 ecx
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00081	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00088	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0008b	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 2114 :             _Myend   = nullptr;

  00092	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$LN31@CDynamicPo:
  00099	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 26   : 	}

  0009a	c3		 ret	 0
$LN44@CDynamicPo:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN52@CDynamicPo:
  000a0	cc		 int	 3
??1?$CDynamicPool@VCLight@@@@UAE@XZ ENDP		; CDynamicPool<CLight>::~CDynamicPool<CLight>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?ReleaseLightID@CLightManager@@IAEXK@Z
_TEXT	SEGMENT
_LightID$ = 8						; size = 4
?ReleaseLightID@CLightManager@@IAEXK@Z PROC		; CLightManager::ReleaseLightID, COMDAT
; _this$ = ecx

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1149 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00003	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 155  : {

  00006	53		 push	 ebx
  00007	56		 push	 esi

; 156  : 	m_NonUsingLightIDDeque.push_back(LightID);

  00008	8d 71 0c	 lea	 esi, DWORD PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1149 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  0000b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0000e	03 c1		 add	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 155  : {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1149 :         if ((_Myoff() + _Mysize()) % _Block_size == 0 && _Mapsize() <= (_Mysize() + _Block_size) / _Block_size) {

  00011	a8 03		 test	 al, 3
  00013	75 14		 jne	 SHORT $LN6@ReleaseLig
  00015	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00018	c1 e8 02	 shr	 eax, 2
  0001b	39 46 08	 cmp	 DWORD PTR [esi+8], eax
  0001e	77 09		 ja	 SHORT $LN6@ReleaseLig

; 1150 :             _Growmap(1);

  00020	6a 01		 push	 1
  00022	8b ce		 mov	 ecx, esi
  00024	e8 00 00 00 00	 call	 ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
$LN6@ReleaseLig:

; 1151 :         }
; 1152 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00029	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002c	8d 04 8d ff ff
	ff ff		 lea	 eax, DWORD PTR [ecx*4-1]

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00033	49		 dec	 ecx

; 1152 :         _Myoff() &= _Mapsize() * _Block_size - 1;

  00034	21 46 0c	 and	 DWORD PTR [esi+12], eax

; 1153 :         size_type _Newoff = _Myoff() + _Mysize();

  00037	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  0003a	03 7e 0c	 add	 edi, DWORD PTR [esi+12]

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  0003d	8b c7		 mov	 eax, edi
  0003f	c1 e8 02	 shr	 eax, 2
  00042	23 c8		 and	 ecx, eax

; 1155 :         if (_Map()[_Block] == nullptr) {

  00044	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00047	8d 1c 8d 00 00
	00 00		 lea	 ebx, DWORD PTR [ecx*4]
  0004e	83 3c 03 00	 cmp	 DWORD PTR [ebx+eax], 0
  00052	75 10		 jne	 SHORT $LN7@ReleaseLig
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00054	6a 10		 push	 16			; 00000010H
  00056	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1156 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  0005b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0005e	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1156 :             _Map()[_Block] = _Getal().allocate(_Block_size);

  00061	89 04 0b	 mov	 DWORD PTR [ebx+ecx], eax
$LN7@ReleaseLig:

; 1157 :         }
; 1158 : 
; 1159 :         _Alty_traits::construct(

  00064	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00067	83 e7 03	 and	 edi, 3
  0006a	8b 45 08	 mov	 eax, DWORD PTR _LightID$[ebp]
  0006d	8b 0c 19	 mov	 ecx, DWORD PTR [ecx+ebx]
  00070	89 04 b9	 mov	 DWORD PTR [ecx+edi*4], eax

; 1160 :             _Getal(), _Unfancy(_Map()[_Block] + _Newoff % _Block_size), _STD forward<_Tys>(_Vals)...);
; 1161 : 
; 1162 :         ++_Mysize();

  00073	ff 46 10	 inc	 DWORD PTR [esi+16]
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 157  : }

  00079	5d		 pop	 ebp
  0007a	c2 04 00	 ret	 4
?ReleaseLightID@CLightManager@@IAEXK@Z ENDP		; CLightManager::ReleaseLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?NewLightID@CLightManager@@IAEKXZ
_TEXT	SEGMENT
?NewLightID@CLightManager@@IAEKXZ PROC			; CLightManager::NewLightID, COMDAT
; _this$ = ecx

; 143  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1045 :         return _Mysize() == 0;

  00009	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 144  : 	if (!m_NonUsingLightIDDeque.empty())

  0000d	74 34		 je	 SHORT $LN2@NewLightID
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0000f	8b 57 18	 mov	 edx, DWORD PTR [edi+24]

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00012	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  00015	56		 push	 esi
  00016	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00019	48		 dec	 eax

; 955  :         return _Unchecked_iterator(_Myoff() + _Mysize(), _STD addressof(_Get_data()));

  0001a	03 d6		 add	 edx, esi

; 1105 :         return *_Prev_iter(_Unchecked_end());

  0001c	4a		 dec	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 1191 :     return --_First;

  0001d	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 48   :         return _Mycont->_Map[_Block][_Off];

  0001f	83 e2 03	 and	 edx, 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xutility

; 1191 :     return --_First;

  00022	c1 e9 02	 shr	 ecx, 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 564  :         return (_Off / _Block_size) & (_Mapsize - 1);

  00025	23 c8		 and	 ecx, eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 146  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00027	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0002a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1208 :         if (--_Mysize() == 0) {

  0002d	8d 4e ff	 lea	 ecx, DWORD PTR [esi-1]
  00030	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 146  : 		TLightID id = m_NonUsingLightIDDeque.back();

  00031	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1208 :         if (--_Mysize() == 0) {

  00034	89 4f 1c	 mov	 DWORD PTR [edi+28], ecx
  00037	85 c9		 test	 ecx, ecx
  00039	75 0e		 jne	 SHORT $LN1@NewLightID

; 1209 :             _Myoff() = 0;

  0003b	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  0003e	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 152  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
$LN2@NewLightID:

; 147  : 		m_NonUsingLightIDDeque.pop_back();
; 148  : 		return (id);
; 149  : 	}
; 150  : 
; 151  : 	return m_dwSkipIndex + m_LightMap.size();

  00043	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  00046	03 47 24	 add	 eax, DWORD PTR [edi+36]
$LN1@NewLightID:
  00049	5f		 pop	 edi

; 152  : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?NewLightID@CLightManager@@IAEKXZ ENDP			; CLightManager::NewLightID
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
;	COMDAT ?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ PROC ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength, COMDAT

; 2201 :         _Xlength_error("vector too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlength:
  0000a	cc		 int	 3
?_Xlength@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@CAXXZ ENDP ; std::vector<CLight *,std::allocator<CLight *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Head$1$ = -4						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 646  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 647  :         ++_Mysize;
; 648  :         const auto _Head  = _Myhead;
; 649  :         _Newnode->_Parent = _Loc._Parent;

  00004	8b 55 08	 mov	 edx, DWORD PTR __Loc$[ebp]
  00007	53		 push	 ebx
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Newnode$[ebp]
  0000e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00010	ff 43 04	 inc	 DWORD PTR [ebx+4]
  00013	89 45 fc	 mov	 DWORD PTR __Head$1$[ebp], eax
  00016	89 57 04	 mov	 DWORD PTR [edi+4], edx

; 650  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

  00019	3b d0		 cmp	 edx, eax
  0001b	75 16		 jne	 SHORT $LN5@Insert_nod

; 651  :             _Head->_Left     = _Newnode;

  0001d	89 38		 mov	 DWORD PTR [eax], edi

; 652  :             _Head->_Parent   = _Newnode;

  0001f	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 653  :             _Head->_Right    = _Newnode;

  00022	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 712  :         return _Newnode;
; 713  :     }

  00025	8b c7		 mov	 eax, edi
  00027	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
  0002b	5f		 pop	 edi
  0002c	5b		 pop	 ebx
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
$LN5@Insert_nod:

; 654  :             _Newnode->_Color = _Black; // the root is black
; 655  :             return _Newnode;
; 656  :         }
; 657  : 
; 658  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 659  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

  00033	83 7d 0c 00	 cmp	 DWORD PTR __Loc$[ebp+4], 0
  00037	75 0d		 jne	 SHORT $LN6@Insert_nod

; 660  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 661  :             _Loc._Parent->_Right = _Newnode;

  00039	89 7a 08	 mov	 DWORD PTR [edx+8], edi

; 662  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

  0003c	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003f	75 0d		 jne	 SHORT $LN9@Insert_nod

; 663  :                 _Head->_Right = _Newnode;

  00041	89 78 08	 mov	 DWORD PTR [eax+8], edi

; 664  :             }
; 665  :         } else { // add to left of _Loc._Parent

  00044	eb 08		 jmp	 SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 666  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 667  :             _Loc._Parent->_Left = _Newnode;

  00046	89 3a		 mov	 DWORD PTR [edx], edi

; 668  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

  00048	3b 10		 cmp	 edx, DWORD PTR [eax]
  0004a	75 02		 jne	 SHORT $LN9@Insert_nod

; 669  :                 _Head->_Left = _Newnode;

  0004c	89 38		 mov	 DWORD PTR [eax], edi
$LN9@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  0004e	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00051	8b c7		 mov	 eax, edi
  00053	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00057	0f 85 7d 01 00
	00		 jne	 $LN3@Insert_nod
  0005d	56		 push	 esi
  0005e	66 90		 npad	 2
$LL2@Insert_nod:

; 674  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

  00060	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00063	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  00066	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00068	3b d1		 cmp	 edx, ecx
  0006a	0f 85 aa 00 00
	00		 jne	 $LN10@Insert_nod

; 675  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

  00070	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 676  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  00073	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00077	0f 84 a3 00 00
	00		 je	 $LN54@Insert_nod

; 677  :                     _Pnode->_Parent->_Color          = _Black;
; 678  :                     _Parent_sibling->_Color          = _Black;
; 679  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 680  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 681  :                 } else { // parent's sibling has red and black children
; 682  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

  0007d	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  00080	3b c6		 cmp	 eax, esi
  00082	75 37		 jne	 SHORT $LN51@Insert_nod

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00084	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 683  :                         _Pnode = _Pnode->_Parent;

  00086	8b c2		 mov	 eax, edx

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00088	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0008b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00091	75 03		 jne	 SHORT $LN34@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00093	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN34@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  00096	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00099	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  0009c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0009e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  000a1	75 05		 jne	 SHORT $LN35@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  000a3	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  000a6	eb 0e		 jmp	 SHORT $LN38@Insert_nod
$LN35@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  000a8	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000ab	3b 01		 cmp	 eax, DWORD PTR [ecx]
  000ad	75 04		 jne	 SHORT $LN37@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  000af	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  000b1	eb 03		 jmp	 SHORT $LN38@Insert_nod
$LN37@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  000b3	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN38@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  000b6	89 06		 mov	 DWORD PTR [esi], eax

; 479  :         _Wherenode->_Parent = _Pnode;

  000b8	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN51@Insert_nod:

; 684  :                         _Lrotate(_Pnode);
; 685  :                     }
; 686  : 
; 687  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  000bb	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000be	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 688  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  000c2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c5	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000c8	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 689  :                     _Rrotate(_Pnode->_Parent->_Parent);

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  000d2	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  000d4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000d7	89 0a		 mov	 DWORD PTR [edx], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  000d9	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000dc	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000e0	75 03		 jne	 SHORT $LN20@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  000e2	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN20@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  000e5	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  000e8	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  000eb	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ed	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000f0	75 0b		 jne	 SHORT $LN21@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  000f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  000f5	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  000f8	e9 cc 00 00 00	 jmp	 $LN53@Insert_nod
$LN21@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  000fd	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00100	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00103	75 0b		 jne	 SHORT $LN23@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00105	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00108	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  0010b	e9 b9 00 00 00	 jmp	 $LN53@Insert_nod
$LN23@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00110	89 31		 mov	 DWORD PTR [ecx], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00112	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 690  :                 }
; 691  :             } else { // fixup red-red in right subtree

  00115	e9 af 00 00 00	 jmp	 $LN53@Insert_nod
$LN10@Insert_nod:

; 692  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;
; 693  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

  0011a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0011e	75 1d		 jne	 SHORT $LN15@Insert_nod
$LN54@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  00120	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1
  00124	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00128	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0012b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0012e	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00138	e9 8f 00 00 00	 jmp	 $LN32@Insert_nod
$LN15@Insert_nod:

; 694  :                     _Pnode->_Parent->_Color          = _Black;
; 695  :                     _Parent_sibling->_Color          = _Black;
; 696  :                     _Pnode->_Parent->_Parent->_Color = _Red;
; 697  :                     _Pnode                           = _Pnode->_Parent->_Parent;
; 698  :                 } else { // parent's sibling has red and black children
; 699  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

  0013d	8b 32		 mov	 esi, DWORD PTR [edx]
  0013f	3b c6		 cmp	 eax, esi
  00141	75 3a		 jne	 SHORT $LN46@Insert_nod

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00143	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 700  :                         _Pnode = _Pnode->_Parent;

  00146	8b c2		 mov	 eax, edx

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00148	89 08		 mov	 DWORD PTR [eax], ecx

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00151	75 03		 jne	 SHORT $LN41@Insert_nod

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00153	89 41 04	 mov	 DWORD PTR [ecx+4], eax
$LN41@Insert_nod:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  00156	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00159	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  0015c	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0015e	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00161	75 05		 jne	 SHORT $LN42@Insert_nod

; 493  :             _Myhead->_Parent = _Pnode;

  00163	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  00166	eb 0f		 jmp	 SHORT $LN45@Insert_nod
$LN42@Insert_nod:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00168	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0016b	3b 41 08	 cmp	 eax, DWORD PTR [ecx+8]
  0016e	75 05		 jne	 SHORT $LN44@Insert_nod

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00170	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 496  :         } else {

  00173	eb 02		 jmp	 SHORT $LN45@Insert_nod
$LN44@Insert_nod:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  00175	89 31		 mov	 DWORD PTR [ecx], esi
$LN45@Insert_nod:

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00177	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 501  :         _Wherenode->_Parent = _Pnode;

  0017a	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN46@Insert_nod:

; 701  :                         _Rrotate(_Pnode);
; 702  :                     }
; 703  : 
; 704  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

  0017d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 705  :                     _Pnode->_Parent->_Parent->_Color = _Red;

  00184	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00187	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0018a	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 706  :                     _Lrotate(_Pnode->_Parent->_Parent);

  0018e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00191	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00194	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  00197	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00199	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0019c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0019e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001a2	75 03		 jne	 SHORT $LN27@Insert_nod

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  001a4	89 51 04	 mov	 DWORD PTR [ecx+4], edx
$LN27@Insert_nod:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  001a7	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001aa	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001ad	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  001af	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  001b2	75 05		 jne	 SHORT $LN28@Insert_nod

; 471  :             _Myhead->_Parent = _Pnode;

  001b4	89 71 04	 mov	 DWORD PTR [ecx+4], esi
  001b7	eb 0e		 jmp	 SHORT $LN31@Insert_nod
$LN28@Insert_nod:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001b9	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  001bc	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001be	75 04		 jne	 SHORT $LN30@Insert_nod

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 31		 mov	 DWORD PTR [ecx], esi

; 474  :         } else {

  001c2	eb 03		 jmp	 SHORT $LN31@Insert_nod
$LN30@Insert_nod:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001c4	89 71 08	 mov	 DWORD PTR [ecx+8], esi
$LN31@Insert_nod:

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c7	89 16		 mov	 DWORD PTR [esi], edx
$LN53@Insert_nod:

; 670  :             }
; 671  :         }
; 672  : 
; 673  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

  001c9	89 72 04	 mov	 DWORD PTR [edx+4], esi
$LN32@Insert_nod:
  001cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cf	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  001d3	0f 84 87 fe ff
	ff		 je	 $LL2@Insert_nod
  001d9	5e		 pop	 esi
$LN3@Insert_nod:

; 707  :                 }
; 708  :             }
; 709  :         }
; 710  : 
; 711  :         _Head->_Parent->_Color = _Black; // root is always black

  001da	8b 45 fc	 mov	 eax, DWORD PTR __Head$1$[ebp]
  001dd	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001e0	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 712  :         return _Newnode;
; 713  :     }

  001e4	8b c7		 mov	 eax, edi
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	8b e5		 mov	 esp, ebp
  001ea	5d		 pop	 ebp
  001eb	c2 0c 00	 ret	 12			; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z
_TEXT	SEGMENT
tv1038 = -16						; size = 4
$T1 = -12						; size = 4
tv1091 = -12						; size = 4
tv1075 = -12						; size = 4
tv1042 = -12						; size = 4
__Erasednode$1$ = -8					; size = 4
_this$1$ = -4						; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract, COMDAT
; _this$ = ecx

; 504  :     _Nodeptr _Extract(_Unchecked_const_iterator _Where) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 505  :         _Nodeptr _Erasednode = _Where._Ptr; // node to erase

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  0000a	56		 push	 esi
  0000b	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx

; 506  :         ++_Where; // save successor iterator for return

  0000e	8d 4d 08	 lea	 ecx, DWORD PTR __Where$[ebp]
  00011	57		 push	 edi
  00012	89 5d f8	 mov	 DWORD PTR __Erasednode$1$[ebp], ebx
  00015	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 507  : 
; 508  :         _Nodeptr _Fixnode; // the node to recolor as needed
; 509  :         _Nodeptr _Fixnodeparent; // parent of _Fixnode (which may be nil)
; 510  :         _Nodeptr _Pnode = _Erasednode;
; 511  : 
; 512  :         if (_Pnode->_Left->_Isnil) {

  0001a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0001c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0001f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00023	75 18		 jne	 SHORT $LN86@Extract

; 513  :             _Fixnode = _Pnode->_Right; // stitch up right subtree
; 514  :         } else if (_Pnode->_Right->_Isnil) {

  00025	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00029	74 04		 je	 SHORT $LN7@Extract

; 515  :             _Fixnode = _Pnode->_Left; // stitch up left subtree

  0002b	8b f8		 mov	 edi, eax

; 516  :         } else { // two subtrees, must lift successor node to replace erased

  0002d	eb 0e		 jmp	 SHORT $LN86@Extract
$LN7@Extract:

; 517  :             _Pnode   = _Where._Ptr; // _Pnode is successor node

  0002f	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]

; 518  :             _Fixnode = _Pnode->_Right; // _Fixnode is only subtree

  00032	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00035	3b d3		 cmp	 edx, ebx

; 519  :         }
; 520  : 
; 521  :         if (_Pnode == _Erasednode) { // at most one subtree, relink it

  00037	0f 85 95 00 00
	00		 jne	 $LN9@Extract
$LN86@Extract:

; 522  :             _Fixnodeparent = _Erasednode->_Parent;
; 523  :             if (!_Fixnode->_Isnil) {

  0003d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00041	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00044	75 03		 jne	 SHORT $LN11@Extract

; 524  :                 _Fixnode->_Parent = _Fixnodeparent; // link up

  00046	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN11@Extract:

; 525  :             }
; 526  : 
; 527  :             if (_Myhead->_Parent == _Erasednode) {

  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0004c	8b 02		 mov	 eax, DWORD PTR [edx]
  0004e	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  00051	75 05		 jne	 SHORT $LN12@Extract

; 528  :                 _Myhead->_Parent = _Fixnode; // link down from root

  00053	89 78 04	 mov	 DWORD PTR [eax+4], edi
  00056	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 529  :             } else if (_Fixnodeparent->_Left == _Erasednode) {

  00058	39 1e		 cmp	 DWORD PTR [esi], ebx
  0005a	75 04		 jne	 SHORT $LN14@Extract

; 530  :                 _Fixnodeparent->_Left = _Fixnode; // link down to left

  0005c	89 3e		 mov	 DWORD PTR [esi], edi

; 531  :             } else {

  0005e	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 532  :                 _Fixnodeparent->_Right = _Fixnode; // link down to right

  00060	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$LN15@Extract:

; 533  :             }
; 534  : 
; 535  :             if (_Myhead->_Left == _Erasednode) {

  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	89 45 f4	 mov	 DWORD PTR tv1075[ebp], eax
  00068	39 18		 cmp	 DWORD PTR [eax], ebx
  0006a	75 28		 jne	 SHORT $LN16@Extract

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0006c	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00070	74 04		 je	 SHORT $LN42@Extract
  00072	8b d6		 mov	 edx, esi
  00074	eb 19		 jmp	 SHORT $LN64@Extract
$LN42@Extract:

; 453  :         while (!_Pnode->_Left->_Isnil) {

  00076	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  00078	8b d7		 mov	 edx, edi

; 453  :         while (!_Pnode->_Left->_Isnil) {

  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0f		 jne	 SHORT $LN64@Extract
$LL63@Extract:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 454  :             _Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL63@Extract
  0008c	8b 45 f4	 mov	 eax, DWORD PTR tv1075[ebp]
$LN64@Extract:

; 536  :                 _Myhead->_Left = _Fixnode->_Isnil ? _Fixnodeparent // smallest is parent of erased node

  0008f	89 10		 mov	 DWORD PTR [eax], edx
  00091	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
$LN16@Extract:

; 537  :                                                   : _Min(_Fixnode); // smallest in relinked subtree
; 538  :             }
; 539  : 
; 540  :             if (_Myhead->_Right == _Erasednode) {

  00094	8b 02		 mov	 eax, DWORD PTR [edx]
  00096	39 58 08	 cmp	 DWORD PTR [eax+8], ebx
  00099	0f 85 a0 00 00
	00		 jne	 $LN47@Extract

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  0009f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a3	74 0a		 je	 SHORT $LN44@Extract
  000a5	8b ce		 mov	 ecx, esi
  000a7	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000aa	e9 90 00 00 00	 jmp	 $LN47@Extract
$LN44@Extract:

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000af	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000b2	8b cf		 mov	 ecx, edi

; 445  :         while (!_Pnode->_Right->_Isnil) {

  000b4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b8	75 11		 jne	 SHORT $LN68@Extract
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL67@Extract:

; 446  :             _Pnode = _Pnode->_Right;

  000c0	8b c8		 mov	 ecx, eax
  000c2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000c5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c9	74 f5		 je	 SHORT $LL67@Extract
$LN68@Extract:
  000cb	8b 02		 mov	 eax, DWORD PTR [edx]

; 541  :                 _Myhead->_Right = _Fixnode->_Isnil ? _Fixnodeparent // largest is parent of erased node

  000cd	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 542  :                                                    : _Max(_Fixnode); // largest in relinked subtree
; 543  :             }
; 544  :         } else { // erased has two subtrees, _Pnode is successor to erased

  000d0	eb 6d		 jmp	 SHORT $LN47@Extract
$LN9@Extract:

; 545  :             _Erasednode->_Left->_Parent = _Pnode; // link left up

  000d2	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 546  :             _Pnode->_Left               = _Erasednode->_Left; // link successor down
; 547  : 
; 548  :             if (_Pnode == _Erasednode->_Right) {

  000d5	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  000d8	8b 03		 mov	 eax, DWORD PTR [ebx]
  000da	89 02		 mov	 DWORD PTR [edx], eax
  000dc	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  000df	3b 53 08	 cmp	 edx, DWORD PTR [ebx+8]
  000e2	75 04		 jne	 SHORT $LN18@Extract

; 549  :                 _Fixnodeparent = _Pnode; // successor is next to erased

  000e4	8b f2		 mov	 esi, edx

; 550  :             } else { // successor further down, link in place of erased

  000e6	eb 1c		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 551  :                 _Fixnodeparent = _Pnode->_Parent; // parent is successor's
; 552  :                 if (!_Fixnode->_Isnil) {

  000e8	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000ec	8b 31		 mov	 esi, DWORD PTR [ecx]
  000ee	75 03		 jne	 SHORT $LN20@Extract

; 553  :                     _Fixnode->_Parent = _Fixnodeparent; // link fix up

  000f0	89 77 04	 mov	 DWORD PTR [edi+4], esi
$LN20@Extract:

; 554  :                 }
; 555  : 
; 556  :                 _Fixnodeparent->_Left        = _Fixnode; // link fix down

  000f3	89 3e		 mov	 DWORD PTR [esi], edi

; 557  :                 _Pnode->_Right               = _Erasednode->_Right; // link next down

  000f5	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000f8	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 558  :                 _Erasednode->_Right->_Parent = _Pnode; // right up

  000fb	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  000fe	89 4d f4	 mov	 DWORD PTR $T1[ebp], ecx
  00101	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN19@Extract:

; 559  :             }
; 560  : 
; 561  :             if (_Myhead->_Parent == _Erasednode) {

  00104	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00107	8b 00		 mov	 eax, DWORD PTR [eax]
  00109	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0010c	75 05		 jne	 SHORT $LN21@Extract

; 562  :                 _Myhead->_Parent = _Pnode; // link down from root

  0010e	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00111	eb 0e		 jmp	 SHORT $LN94@Extract
$LN21@Extract:

; 563  :             } else if (_Erasednode->_Parent->_Left == _Erasednode) {

  00113	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00116	39 18		 cmp	 DWORD PTR [eax], ebx
  00118	75 04		 jne	 SHORT $LN23@Extract

; 564  :                 _Erasednode->_Parent->_Left = _Pnode; // link down to left

  0011a	89 10		 mov	 DWORD PTR [eax], edx

; 565  :             } else {

  0011c	eb 03		 jmp	 SHORT $LN94@Extract
$LN23@Extract:

; 566  :                 _Erasednode->_Parent->_Right = _Pnode; // link down to right

  0011e	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN94@Extract:

; 567  :             }
; 568  : 
; 569  :             _Pnode->_Parent = _Erasednode->_Parent; // link successor up

  00121	b9 04 00 00 00	 mov	 ecx, 4
  00126	8b c3		 mov	 eax, ebx
  00128	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR $T1[ebp]
  0012e	89 01		 mov	 DWORD PTR [ecx], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 100  :     _Ty _Tmp = _STD move(_Left);

  00130	8a 4a 0c	 mov	 cl, BYTE PTR [edx+12]

; 101  :     _Left    = _STD move(_Right);

  00133	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  00136	88 42 0c	 mov	 BYTE PTR [edx+12], al
  00139	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]

; 102  :     _Right   = _STD move(_Tmp);

  0013c	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN47@Extract:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 573  :         if (_Erasednode->_Color == _Black) { // erasing black link, must recolor/rebalance tree

  0013f	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  00143	0f 85 89 01 00
	00		 jne	 $LN25@Extract

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  00149	8b 02		 mov	 eax, DWORD PTR [edx]
  0014b	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  0014e	0f 84 7a 01 00
	00		 je	 $LN3@Extract
  00154	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL4@Extract:
  00160	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00164	89 75 f4	 mov	 DWORD PTR tv1091[ebp], esi
  00167	0f 85 5e 01 00
	00		 jne	 $LN93@Extract

; 575  :                 if (_Fixnode == _Fixnodeparent->_Left) { // fixup left subtree

  0016d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0016f	3b f9		 cmp	 edi, ecx
  00171	0f 85 c3 00 00
	00		 jne	 $LN26@Extract

; 576  :                     _Pnode = _Fixnodeparent->_Right;

  00177	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 577  :                     if (_Pnode->_Color == _Red) { // rotate red up from right subtree

  0017a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0017e	75 57		 jne	 SHORT $LN87@Extract

; 578  :                         _Pnode->_Color         = _Black;

  00180	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00184	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 579  :                         _Fixnodeparent->_Color = _Red;

  00187	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0018b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018d	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  00190	8b 01		 mov	 eax, DWORD PTR [ecx]
  00192	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00196	75 03		 jne	 SHORT $LN49@Extract

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00198	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN49@Extract:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0019b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0019e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  001a1	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  001a4	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001a7	8b 00		 mov	 eax, DWORD PTR [eax]
  001a9	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  001ac	75 0c		 jne	 SHORT $LN50@Extract

; 471  :             _Myhead->_Parent = _Pnode;

  001ae	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001b1	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001b3	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001b5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001b8	eb 20		 jmp	 SHORT $LN80@Extract
$LN50@Extract:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  001ba	8b 02		 mov	 eax, DWORD PTR [edx]
  001bc	3b 30		 cmp	 esi, DWORD PTR [eax]
  001be	75 0b		 jne	 SHORT $LN52@Extract

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  001c0	89 08		 mov	 DWORD PTR [eax], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001c2	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001c4	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	eb 0f		 jmp	 SHORT $LN80@Extract
$LN52@Extract:

; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  001cb	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;

  001ce	89 31		 mov	 DWORD PTR [ecx], esi

; 479  :         _Wherenode->_Parent = _Pnode;

  001d0	89 0a		 mov	 DWORD PTR [edx], ecx

; 580  :                         _Lrotate(_Fixnodeparent);
; 581  :                         _Pnode = _Fixnodeparent->_Right;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	eb 03		 jmp	 SHORT $LN80@Extract
$LN87@Extract:
  001d7	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN80@Extract:

; 582  :                     }
; 583  : 
; 584  :                     if (_Pnode->_Isnil) {

  001da	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001de	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 585  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 586  :                     } else if (_Pnode->_Left->_Color == _Black
; 587  :                                && _Pnode->_Right->_Color == _Black) { // redden right subtree with black children

  001e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  001e6	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ea	75 0d		 jne	 SHORT $LN89@Extract
  001ec	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ef	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001f3	0f 84 b9 00 00
	00		 je	 $LN95@Extract
$LN89@Extract:

; 588  :                         _Pnode->_Color = _Red;
; 589  :                         _Fixnode       = _Fixnodeparent;
; 590  :                     } else { // must rearrange right subtree
; 591  :                         if (_Pnode->_Right->_Color == _Black) { // rotate red up from left sub-subtree

  001f9	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001fc	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00200	75 16		 jne	 SHORT $LN33@Extract

; 592  :                             _Pnode->_Left->_Color = _Black;

  00202	8b 01		 mov	 eax, DWORD PTR [ecx]

; 593  :                             _Pnode->_Color        = _Red;
; 594  :                             _Rrotate(_Pnode);

  00204	51		 push	 ecx
  00205	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00209	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00210	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate

; 595  :                             _Pnode = _Fixnodeparent->_Right;

  00215	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
$LN33@Extract:

; 596  :                         }
; 597  : 
; 598  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00218	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  0021b	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 599  :                         _Fixnodeparent->_Color = _Black;

  0021e	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 600  :                         _Pnode->_Right->_Color = _Black;

  00222	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 601  :                         _Lrotate(_Fixnodeparent);

  00225	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00228	56		 push	 esi
  00229	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  0022d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate

; 602  :                         break; // tree now recolored/rebalanced

  00232	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  00235	e9 91 00 00 00	 jmp	 $LN93@Extract
$LN26@Extract:

; 603  :                     }
; 604  :                 } else { // fixup right subtree
; 605  :                     _Pnode = _Fixnodeparent->_Left;
; 606  :                     if (_Pnode->_Color == _Red) { // rotate red up from left subtree

  0023a	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0023e	75 58		 jne	 SHORT $LN88@Extract

; 607  :                         _Pnode->_Color         = _Black;

  00240	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00244	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 608  :                         _Fixnodeparent->_Color = _Red;

  00246	c6 46 0c 00	 mov	 BYTE PTR [esi+12], 0

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  0024a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0024d	89 06		 mov	 DWORD PTR [esi], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0024f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00252	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00256	75 03		 jne	 SHORT $LN56@Extract

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00258	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN56@Extract:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0025b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025e	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
  00261	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00264	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00267	8b 00		 mov	 eax, DWORD PTR [eax]
  00269	3b 70 04	 cmp	 esi, DWORD PTR [eax+4]
  0026c	75 0c		 jne	 SHORT $LN57@Extract

; 493  :             _Myhead->_Parent = _Pnode;

  0026e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00271	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00274	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00276	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00278	eb 21		 jmp	 SHORT $LN79@Extract
$LN57@Extract:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  0027a	8b 02		 mov	 eax, DWORD PTR [edx]
  0027c	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0027f	75 0c		 jne	 SHORT $LN59@Extract

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  00281	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  00284	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00287	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00289	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0028b	eb 0e		 jmp	 SHORT $LN79@Extract
$LN59@Extract:

; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0028d	89 08		 mov	 DWORD PTR [eax], ecx

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;

  0028f	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 501  :         _Wherenode->_Parent = _Pnode;

  00292	89 0a		 mov	 DWORD PTR [edx], ecx

; 609  :                         _Rrotate(_Fixnodeparent);
; 610  :                         _Pnode = _Fixnodeparent->_Left;

  00294	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00296	eb 03		 jmp	 SHORT $LN79@Extract
$LN88@Extract:
  00298	8d 56 04	 lea	 edx, DWORD PTR [esi+4]
$LN79@Extract:

; 611  :                     }
; 612  : 
; 613  :                     if (_Pnode->_Isnil) {

  0029b	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0029f	75 15		 jne	 SHORT $LN2@Extract

; 614  :                         _Fixnode = _Fixnodeparent; // shouldn't happen
; 615  :                     } else if (_Pnode->_Right->_Color == _Black
; 616  :                                && _Pnode->_Left->_Color == _Black) { // redden left subtree with black children

  002a1	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  002a4	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  002a8	75 3e		 jne	 SHORT $LN90@Extract
  002aa	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ac	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002b0	75 36		 jne	 SHORT $LN90@Extract
$LN95@Extract:

; 574  :             for (; _Fixnode != _Myhead->_Parent && _Fixnode->_Color == _Black; _Fixnodeparent = _Fixnode->_Parent) {

  002b2	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:
  002b6	8b 32		 mov	 esi, DWORD PTR [edx]
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  002bb	8b 4d f4	 mov	 ecx, DWORD PTR tv1091[ebp]
  002be	8b f9		 mov	 edi, ecx
  002c0	8b 02		 mov	 eax, DWORD PTR [edx]
  002c2	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  002c5	0f 85 95 fe ff
	ff		 jne	 $LL4@Extract
$LN93@Extract:

; 631  :                         break; // tree now recolored/rebalanced
; 632  :                     }
; 633  :                 }
; 634  :             }
; 635  : 
; 636  :             _Fixnode->_Color = _Black; // stopping node is black

  002cb	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002ce	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 637  :         }
; 638  : 
; 639  :         if (0 < _Mysize) {

  002d2	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  002d5	8b c3		 mov	 eax, ebx
  002d7	85 c9		 test	 ecx, ecx
  002d9	74 04		 je	 SHORT $LN40@Extract

; 640  :             --_Mysize;

  002db	49		 dec	 ecx
  002dc	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN40@Extract:

; 641  :         }
; 642  : 
; 643  :         return _Erasednode;
; 644  :     }

  002df	5f		 pop	 edi
  002e0	5e		 pop	 esi
  002e1	5b		 pop	 ebx
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c2 04 00	 ret	 4
$LN90@Extract:

; 617  :                         _Pnode->_Color = _Red;
; 618  :                         _Fixnode       = _Fixnodeparent;
; 619  :                     } else { // must rearrange left subtree
; 620  :                         if (_Pnode->_Left->_Color == _Black) { // rotate red up from right sub-subtree

  002e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  002ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002ee	75 13		 jne	 SHORT $LN39@Extract

; 621  :                             _Pnode->_Right->_Color = _Black;

  002f0	c6 43 0c 01	 mov	 BYTE PTR [ebx+12], 1

; 622  :                             _Pnode->_Color         = _Red;

  002f4	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 623  :                             _Lrotate(_Pnode);

  002f8	51		 push	 ecx
  002f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  002fc	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate

; 624  :                             _Pnode = _Fixnodeparent->_Left;

  00301	8b 0e		 mov	 ecx, DWORD PTR [esi]
$LN39@Extract:

; 625  :                         }
; 626  : 
; 627  :                         _Pnode->_Color         = _Fixnodeparent->_Color;

  00303	8a 46 0c	 mov	 al, BYTE PTR [esi+12]
  00306	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 628  :                         _Fixnodeparent->_Color = _Black;

  00309	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 629  :                         _Pnode->_Left->_Color  = _Black;

  0030d	8b 01		 mov	 eax, DWORD PTR [ecx]

; 630  :                         _Rrotate(_Fixnodeparent);

  0030f	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00312	56		 push	 esi
  00313	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00317	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
  0031c	8b 55 fc	 mov	 edx, DWORD PTR _this$1$[ebp]
  0031f	eb aa		 jmp	 SHORT $LN93@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 482  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 483  :         _Nodeptr _Pnode   = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 484  :         _Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 485  : 
; 486  :         if (!_Pnode->_Right->_Isnil) {

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 487  :             _Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 488  :         }
; 489  : 
; 490  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 491  : 
; 492  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 493  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 494  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 495  :             _Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 496  :         } else {
; 497  :             _Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 498  :         }
; 499  : 
; 500  :         _Pnode->_Right      = _Wherenode;
; 501  :         _Wherenode->_Parent = _Pnode;
; 502  :     }

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 460  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 461  :         _Nodeptr _Pnode    = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 462  :         _Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 463  : 
; 464  :         if (!_Pnode->_Left->_Isnil) {

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 465  :             _Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 466  :         }
; 467  : 
; 468  :         _Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 469  : 
; 470  :         if (_Wherenode == _Myhead->_Parent) {

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 471  :             _Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 472  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 473  :             _Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 474  :         } else {
; 475  :             _Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 476  :         }
; 477  : 
; 478  :         _Pnode->_Left       = _Wherenode;
; 479  :         _Wherenode->_Parent = _Pnode;
; 480  :     }

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >, COMDAT
; _this$ = ecx

; 1079 :     ~_Tree() noexcept {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 754  :         _Erase_tree(_Al, _Myhead->_Parent);

  00004	8b 37		 mov	 esi, DWORD PTR [edi]
  00006	8b 76 04	 mov	 esi, DWORD PTR [esi+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00009	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0000d	75 21		 jne	 SHORT $LN7@Tree
  0000f	90		 npad	 1
$LL6@Tree:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00010	ff 76 08	 push	 DWORD PTR [esi+8]
  00013	8b cf		 mov	 ecx, edi
  00015	57		 push	 edi
  00016	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0001b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0002a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0002e	74 e0		 je	 SHORT $LL6@Tree
$LN7@Tree:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00030	6a 18		 push	 24			; 00000018H
  00032	ff 37		 push	 DWORD PTR [edi]
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1086 :     }

  0003e	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1584 :     void _Tidy() noexcept { // free all storage

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 1045 :         return _Mysize() == 0;

  00003	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00006	85 c0		 test	 eax, eax

; 1585 :         _Orphan_all();
; 1586 : 
; 1587 :         _Alpty _Almap(_Getal());
; 1588 :         while (!empty()) {

  00008	74 15		 je	 SHORT $LN61@Tidy
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Tidy:

; 1208 :         if (--_Mysize() == 0) {

  00010	83 c0 ff	 add	 eax, -1
  00013	89 47 10	 mov	 DWORD PTR [edi+16], eax
  00016	75 f8		 jne	 SHORT $LL2@Tidy

; 1209 :             _Myoff() = 0;

  00018	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
$LN61@Tidy:

; 1589 :             pop_back();
; 1590 :         }
; 1591 : 
; 1592 :         if (_Map() != nullptr) {

  0001f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00022	85 c0		 test	 eax, eax
  00024	74 50		 je	 SHORT $LN60@Tidy

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00026	56		 push	 esi
  00027	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0002a	85 f6		 test	 esi, esi
  0002c	74 1d		 je	 SHORT $LN5@Tidy
  0002e	66 90		 npad	 2
$LL4@Tidy:

; 1594 :                 if (_Map()[--_Block]) { // free block

  00030	8b 4c b0 fc	 mov	 ecx, DWORD PTR [eax+esi*4-4]
  00034	4e		 dec	 esi
  00035	85 c9		 test	 ecx, ecx
  00037	74 0e		 je	 SHORT $LN41@Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00039	6a 10		 push	 16			; 00000010H
  0003b	51		 push	 ecx
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00041	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00044	83 c4 08	 add	 esp, 8
$LN41@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1593 :             for (size_type _Block = _Mapsize(); _Block > 0;) { // free storage for a block and destroy pointer

  00047	85 f6		 test	 esi, esi
  00049	75 e5		 jne	 SHORT $LL4@Tidy
$LN5@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0004b	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0004e	c1 e1 02	 shl	 ecx, 2
  00051	5e		 pop	 esi

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00052	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00058	72 12		 jb	 SHORT $LN33@Tidy

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0005a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0005d	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00060	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00062	83 c0 fc	 add	 eax, -4			; fffffffcH
  00065	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00068	77 1c		 ja	 SHORT $LN30@Tidy

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0006a	8b c2		 mov	 eax, edx
$LN33@Tidy:

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006c	51		 push	 ecx
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00073	83 c4 08	 add	 esp, 8
$LN60@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1603 :         _Mapsize() = 0;

  00076	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0

; 1604 :         _Map()     = nullptr;

  0007d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
  00084	5f		 pop	 edi

; 1605 :     }

  00085	c3		 ret	 0
$LN30@Tidy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00086	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN63@Tidy:
  0008b	cc		 int	 3
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
tv461 = -4						; size = 4
$T1 = 8							; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap, COMDAT
; _this$ = ecx

; 1545 :     void _Growmap(size_type _Count) { // grow map by at least _Count pointers, _Mapsize() a power of 2

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 1546 :         static_assert(_Minimum_map_size > 1, "The _Xlen() test should always be performed.");
; 1547 : 
; 1548 :         _Alpty _Almap(_Getal());
; 1549 :         size_type _Newsize = _Mapsize() > 0 ? _Mapsize() : 1;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	b8 01 00 00 00	 mov	 eax, 1
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	8b 57 08	 mov	 edx, DWORD PTR [edi+8]
  00014	85 d2		 test	 edx, edx
  00016	0f 45 c2	 cmovne	 eax, edx
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Growmap:

; 1550 :         while (_Newsize - _Mapsize() < _Count || _Newsize < _Minimum_map_size) {

  00020	8b f0		 mov	 esi, eax
  00022	2b f2		 sub	 esi, edx
  00024	3b f3		 cmp	 esi, ebx
  00026	72 05		 jb	 SHORT $LN4@Growmap
  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 13		 jae	 SHORT $LN3@Growmap
$LN4@Growmap:

; 1551 :             // scale _Newsize to 2^N >= _Mapsize() + _Count
; 1552 :             if (max_size() / _Block_size - _Newsize < _Newsize) {

  0002d	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  00032	2b c8		 sub	 ecx, eax
  00034	3b c8		 cmp	 ecx, eax
  00036	0f 82 ff 00 00
	00		 jb	 $LN44@Growmap

; 1554 :             }
; 1555 : 
; 1556 :             _Newsize *= 2;

  0003c	03 c0		 add	 eax, eax

; 1557 :         }

  0003e	eb e0		 jmp	 SHORT $LL2@Growmap
$LN3@Growmap:

; 1558 :         _Count = _Newsize - _Mapsize();
; 1559 : 
; 1560 :         size_type _Myboff = _Myoff() / _Block_size;

  00040	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00043	c1 e9 02	 shr	 ecx, 2
  00046	89 4d 08	 mov	 DWORD PTR $T1[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 60   :         if (_Count > _Max_possible) {

  00049	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  0004e	0f 87 ee 00 00
	00		 ja	 $LN50@Growmap

; 62   :         }
; 63   :     }
; 64   : 
; 65   :     return _Count * _Ty_size;

  00054	c1 e0 02	 shl	 eax, 2

; 228  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00057	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  0005c	72 0d		 jb	 SHORT $LN19@Growmap

; 229  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00064	83 c4 04	 add	 esp, 4
  00067	8b d8		 mov	 ebx, eax
  00069	eb 13		 jmp	 SHORT $LN18@Growmap
$LN19@Growmap:

; 230  :         }
; 231  :     }
; 232  : #endif // defined(_M_IX86) || defined(_M_X64)
; 233  : 
; 234  :     if (_Bytes != 0) {

  0006b	85 c0		 test	 eax, eax
  0006d	74 0d		 je	 SHORT $LN20@Growmap

; 77   :         return ::operator new(_Bytes);

  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00075	83 c4 04	 add	 esp, 4

; 235  :         return _Traits::_Allocate(_Bytes);

  00078	8b d8		 mov	 ebx, eax
  0007a	eb 02		 jmp	 SHORT $LN18@Growmap
$LN20@Growmap:

; 236  :     }
; 237  : 
; 238  :     return nullptr;

  0007c	33 db		 xor	 ebx, ebx
$LN18@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1564 :         _Myptr = _STD uninitialized_copy(_Map() + _Myboff, _Map() + _Mapsize(), _Myptr); // copy initial to end

  0007e	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00081	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00084	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  00087	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  0008a	c1 e0 02	 shl	 eax, 2
  0008d	89 45 fc	 mov	 DWORD PTR tv461[ebp], eax
  00090	03 c3		 add	 eax, ebx
  00092	50		 push	 eax
  00093	8b 45 fc	 mov	 eax, DWORD PTR tv461[ebp]
  00096	51		 push	 ecx
  00097	03 c2		 add	 eax, edx
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>
  0009f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000a2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1565 :         if (_Myboff <= _Count) { // increment greater than offset of initial block

  000a5	50		 push	 eax
  000a6	39 75 08	 cmp	 DWORD PTR $T1[ebp], esi
  000a9	77 22		 ja	 SHORT $LN6@Growmap

; 1566 :             _Myptr = _STD uninitialized_copy(_Map(), _Map() + _Myboff, _Myptr); // copy rest of old

  000ab	8b 45 fc	 mov	 eax, DWORD PTR tv461[ebp]
  000ae	03 c1		 add	 eax, ecx
  000b0	50		 push	 eax
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1567 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count - _Myboff); // clear suffix of new

  000b7	8b ce		 mov	 ecx, esi
  000b9	2b 4d 08	 sub	 ecx, DWORD PTR $T1[ebp]
  000bc	51		 push	 ecx
  000bd	50		 push	 eax
  000be	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>

; 1568 :             _Uninitialized_value_construct_n_unchecked1(_Newmap, _Myboff); // clear prefix of new
; 1569 :         } else { // increment not greater than offset of initial block

  000c3	8b 45 08	 mov	 eax, DWORD PTR $T1[ebp]
  000c6	83 c4 14	 add	 esp, 20			; 00000014H
  000c9	8b cb		 mov	 ecx, ebx
  000cb	eb 24		 jmp	 SHORT $LN7@Growmap
$LN6@Growmap:

; 1570 :             _STD uninitialized_copy(_Map(), _Map() + _Count, _Myptr); // copy more old

  000cd	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1571 :             _Myptr = _STD uninitialized_copy(_Map() + _Count, _Map() + _Myboff, _Newmap); // copy rest of old

  000d7	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000da	8b 45 fc	 mov	 eax, DWORD PTR tv461[ebp]
  000dd	03 c1		 add	 eax, ecx
  000df	53		 push	 ebx
  000e0	50		 push	 eax
  000e1	8d 04 b1	 lea	 eax, DWORD PTR [ecx+esi*4]
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$uninitialized_copy@PAPAKPAPAK@std@@YAPAPAKQAPAK0PAPAK@Z ; std::uninitialized_copy<unsigned long * *,unsigned long * *>

; 1572 :             _Uninitialized_value_construct_n_unchecked1(_Myptr, _Count); // clear rest to initial block

  000ea	8b c8		 mov	 ecx, eax
  000ec	83 c4 18	 add	 esp, 24			; 00000018H
  000ef	8b c6		 mov	 eax, esi
$LN7@Growmap:

; 1573 :         }
; 1574 : 
; 1575 :         if (_Map() != nullptr) {

  000f1	50		 push	 eax
  000f2	51		 push	 ecx
  000f3	e8 00 00 00 00	 call	 ??$_Uninitialized_value_construct_n_unchecked1@PAPAKI@std@@YAPAPAKPAPAKI@Z ; std::_Uninitialized_value_construct_n_unchecked1<unsigned long * *,unsigned int>
  000f8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000fb	83 c4 08	 add	 esp, 8
  000fe	85 c0		 test	 eax, eax
  00100	74 2a		 je	 SHORT $LN29@Growmap
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00102	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00105	c1 e1 02	 shl	 ecx, 2

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00108	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0010e	72 12		 jb	 SHORT $LN39@Growmap

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00110	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00113	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00116	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00118	83 c0 fc	 add	 eax, -4			; fffffffcH
  0011b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0011e	77 27		 ja	 SHORT $LN36@Growmap

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00120	8b c2		 mov	 eax, edx
$LN39@Growmap:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00122	51		 push	 ecx
  00123	50		 push	 eax
  00124	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00129	83 c4 08	 add	 esp, 8
$LN29@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1581 :         _Mapsize() += _Count;

  0012c	01 77 08	 add	 DWORD PTR [edi+8], esi
  0012f	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00132	5f		 pop	 edi
  00133	5e		 pop	 esi
  00134	5b		 pop	 ebx

; 1582 :     }

  00135	8b e5		 mov	 esp, ebp
  00137	5d		 pop	 ebp
  00138	c2 04 00	 ret	 4
$LN44@Growmap:

; 1553 :                 _Xlen(); // result too long

  0013b	8b cf		 mov	 ecx, edi
  0013d	e8 00 00 00 00	 call	 ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN50@Growmap:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 61   :             _Throw_bad_array_new_length(); // multiply overflow

  00142	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN36@Growmap:

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00147	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN48@Growmap:
  0014c	cc		 int	 3
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@AAEXI@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 1538 :         _Xlength_error("deque<T> too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen:
  0000a	cc		 int	 3
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@ABEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 904  :     ~deque() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 905  :         _Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00008	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0000a	6a 08		 push	 8
  0000c	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00013	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00018	83 c4 08	 add	 esp, 8
  0001b	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 908  :     }

  0001c	c3		 ret	 0
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetSkipIndex@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwSkipIndex$ = 8					; size = 4
?SetSkipIndex@CLightManager@@QAEXK@Z PROC		; CLightManager::SetSkipIndex, COMDAT
; _this$ = ecx

; 88   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   : 	m_dwSkipIndex = dwSkipIndex;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwSkipIndex$[ebp]
  00006	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 90   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetSkipIndex@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetSkipIndex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetLimitLightCount@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
_dwLightCount$ = 8					; size = 4
?SetLimitLightCount@CLightManager@@QAEXK@Z PROC		; CLightManager::SetLimitLightCount, COMDAT
; _this$ = ecx

; 83   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 84   : 	m_dwLimitLightCount = dwLightCount;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dwLightCount$[ebp]
  00006	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 85   : }

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?SetLimitLightCount@CLightManager@@QAEXK@Z ENDP		; CLightManager::SetLimitLightCount
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_c_rv3Position$ = 8					; size = 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z PROC ; CLightManager::SetCenterPosition, COMDAT
; _this$ = ecx

; 78   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 79   : 	m_v3CenterPosition = c_rv3Position;

  00003	8b 45 08	 mov	 eax, DWORD PTR _c_rv3Position$[ebp]
  00006	f3 0f 7e 00	 movq	 xmm0, QWORD PTR [eax]
  0000a	66 0f d6 41 34	 movq	 QWORD PTR [ecx+52], xmm0
  0000f	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00012	89 41 3c	 mov	 DWORD PTR [ecx+60], eax

; 80   : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetCenterPosition@CLightManager@@QAEXABUD3DXVECTOR3@@@Z ENDP ; CLightManager::SetCenterPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?DeleteLight@CLightManager@@QAEXK@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_pLight$1$ = 8						; size = 4
_pkData$ = 8						; size = 4
_LightID$ = 8						; size = 4
?DeleteLight@CLightManager@@QAEXK@Z PROC		; CLightManager::DeleteLight, COMDAT
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00009	8d 4d 08	 lea	 ecx, DWORD PTR _LightID$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 45   : {

  0000c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000d	51		 push	 ecx
  0000e	8d 4d f4	 lea	 ecx, DWORD PTR __Loc$1[ebp]
  00011	51		 push	 ecx
  00012	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00015	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0001a	8b 7d fc	 mov	 edi, DWORD PTR __Loc$1[ebp+8]
  0001d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00021	75 5b		 jne	 SHORT $LN1@DeleteLigh
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00023	53		 push	 ebx
  00024	8b 5d 08	 mov	 ebx, DWORD PTR _LightID$[ebp]
  00027	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  0002a	72 51		 jb	 SHORT $LN89@DeleteLigh

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	39 7e 20	 cmp	 DWORD PTR [esi+32], edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 48   : 	if (m_LightMap.end() == itor)

  0002f	74 4c		 je	 SHORT $LN89@DeleteLigh

; 49   : 	{
; 50   : 		assert(!"CLightManager::DeleteLight - Failed to find light ID!");
; 51   : 		return;
; 52   : 	}
; 53   : 
; 54   : 	CLight * pLight = itor->second;

  00031	8b 47 14	 mov	 eax, DWORD PTR [edi+20]

; 55   : 
; 56   : 	pLight->Clear();

  00034	8b c8		 mov	 ecx, eax
  00036	89 45 08	 mov	 DWORD PTR _pLight$1$[ebp], eax
  00039	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0003e	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 57   : 	m_LightPool.Free(pLight);

  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pLight$1$[ebp]
  00044	89 4d 08	 mov	 DWORD PTR _pkData$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  00047	3b 46 60	 cmp	 eax, DWORD PTR [esi+96]
  0004a	74 08		 je	 SHORT $LN42@DeleteLigh

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0004c	89 08		 mov	 DWORD PTR [eax], ecx

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  0004e	83 46 5c 04	 add	 DWORD PTR [esi+92], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  00052	eb 0d		 jmp	 SHORT $LN41@DeleteLigh
$LN42@DeleteLigh:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  00054	8d 4d 08	 lea	 ecx, DWORD PTR _pkData$[ebp]
  00057	51		 push	 ecx
  00058	50		 push	 eax
  00059	8d 4e 58	 lea	 ecx, DWORD PTR [esi+88]
  0005c	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
$LN41@DeleteLigh:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1287 :         _Nodeptr _Erasednode = _Scary->_Extract(_Where); // node to erase

  00061	57		 push	 edi
  00062	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  00065	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@V?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Extract
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0006a	6a 18		 push	 24			; 00000018H
  0006c	50		 push	 eax
  0006d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00072	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 61   : 	ReleaseLightID(LightID);

  00075	8b ce		 mov	 ecx, esi
  00077	53		 push	 ebx
  00078	e8 00 00 00 00	 call	 ?ReleaseLightID@CLightManager@@IAEXK@Z ; CLightManager::ReleaseLightID
$LN89@DeleteLigh:
  0007d	5b		 pop	 ebx
$LN1@DeleteLigh:
  0007e	5f		 pop	 edi

; 62   : }

  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
?DeleteLight@CLightManager@@QAEXK@Z ENDP		; CLightManager::DeleteLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?GetLight@CLightManager@@QAEPAVCLight@@K@Z
_TEXT	SEGMENT
__Loc$1 = -12						; size = 12
_LightID$ = 8						; size = 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z PROC		; CLightManager::GetLight, COMDAT
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  00007	8d 45 08	 lea	 eax, DWORD PTR _LightID$[ebp]
  0000a	50		 push	 eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 66   : 	TLightMap::iterator itor = m_LightMap.find(LightID);

  0000b	8d 71 20	 lea	 esi, DWORD PTR [ecx+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1367 :         const _Tree_find_result<_Nodeptr> _Loc = _Find_lower_bound(_Keyval);

  0000e	8d 45 f4	 lea	 eax, DWORD PTR __Loc$1[ebp]
  00011	8b ce		 mov	 ecx, esi
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00019	8b 45 fc	 mov	 eax, DWORD PTR __Loc$1[ebp+8]
  0001c	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00020	75 16		 jne	 SHORT $LN37@GetLight
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xstddef

; 143  :         return _Left < _Right;

  00022	8b 4d 08	 mov	 ecx, DWORD PTR _LightID$[ebp]
  00025	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  00028	72 0e		 jb	 SHORT $LN37@GetLight

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002a	39 06		 cmp	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 68   : 	if (m_LightMap.end() == itor)

  0002c	74 0a		 je	 SHORT $LN37@GetLight

; 72   : 	}
; 73   : 
; 74   : 	return itor->second;

  0002e	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00031	5e		 pop	 esi

; 75   : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
$LN37@GetLight:

; 69   : 	{
; 70   : 		assert(!"CLightManager::SetLightData - Failed to find light ID!");
; 71   : 		return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	5e		 pop	 esi

; 75   : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?GetLight@CLightManager@@QAEPAVCLight@@K@Z ENDP		; CLightManager::GetLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z
_TEXT	SEGMENT
__Loc$3 = -36						; size = 12
$T4 = -24						; size = 8
$T5 = -20						; size = 4
_pkNewData$6 = -20					; size = 4
_ID$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
_poutLightID$ = 12					; size = 4
_LightData$ = 16					; size = 4
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z PROC ; CLightManager::RegisterLight, COMDAT
; _this$ = ecx

; 36   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1927 :         return _My_data._Myfirst == _My_data._Mylast;

  0002a	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 63   : 		if (m_kVct_pkFree.empty())

  0002d	39 46 58	 cmp	 DWORD PTR [esi+88], eax
  00030	75 5a		 jne	 SHORT $LN4@RegisterLi

; 64   : 		{
; 65   : 			T* pkNewData = new T;

  00032	68 f4 00 00 00	 push	 244			; 000000f4H
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4
  0003f	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00049	85 c0		 test	 eax, eax
  0004b	74 0b		 je	 SHORT $LN6@RegisterLi
  0004d	8b c8		 mov	 ecx, eax
  0004f	e8 00 00 00 00	 call	 ??0CLight@@QAE@XZ	; CLight::CLight
  00054	8b f8		 mov	 edi, eax
  00056	eb 02		 jmp	 SHORT $LN7@RegisterLi
$LN6@RegisterLi:
  00058	33 ff		 xor	 edi, edi
$LN7@RegisterLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0005a	8b 46 50	 mov	 eax, DWORD PTR [esi+80]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 66   : 			m_kVct_pkData.push_back(pkNewData);

  0005d	8d 4e 4c	 lea	 ecx, DWORD PTR [esi+76]
  00060	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00067	89 7d ec	 mov	 DWORD PTR _pkNewData$6[ebp], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  0006a	3b 46 54	 cmp	 eax, DWORD PTR [esi+84]
  0006d	74 0b		 je	 SHORT $LN14@RegisterLi

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  0006f	89 38		 mov	 DWORD PTR [eax], edi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  00071	83 46 50 04	 add	 DWORD PTR [esi+80], 4
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00075	ff 46 68	 inc	 DWORD PTR [esi+104]

; 68   : 			return pkNewData;

  00078	eb 1b		 jmp	 SHORT $LN3@RegisterLi
$LN14@RegisterLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  0007a	8d 55 ec	 lea	 edx, DWORD PTR _pkNewData$6[ebp]
  0007d	52		 push	 edx
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
  00084	8b 7d ec	 mov	 edi, DWORD PTR _pkNewData$6[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 67   : 			++m_uUsedCapacity;

  00087	ff 46 68	 inc	 DWORD PTR [esi+104]

; 68   : 			return pkNewData;

  0008a	eb 09		 jmp	 SHORT $LN3@RegisterLi
$LN4@RegisterLi:

; 69   : 		}
; 70   : 
; 71   : 		T* pkFreeData = m_kVct_pkFree.back();

  0008c	8b 78 fc	 mov	 edi, DWORD PTR [eax-4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2007 :         return _My_data._Mylast[-1];

  0008f	83 c0 fc	 add	 eax, -4			; fffffffcH

; 1776 :         --_Mylast;

  00092	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$LN3@RegisterLi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 38   : 	TLightID ID = NewLightID();

  00095	8b ce		 mov	 ecx, esi
  00097	e8 00 00 00 00	 call	 ?NewLightID@CLightManager@@IAEKXZ ; CLightManager::NewLightID

; 39   : 	pLight->SetParameter(ID, LightData);

  0009c	ff 75 10	 push	 DWORD PTR _LightData$[ebp]
  0009f	8b cf		 mov	 ecx, edi
  000a1	89 45 f0	 mov	 DWORD PTR _ID$[ebp], eax
  000a4	50		 push	 eax
  000a5	e8 00 00 00 00	 call	 ?SetParameter@CLight@@QAEXKABU_D3DLIGHT9@@@Z ; CLight::SetParameter
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  000aa	8d 45 f0	 lea	 eax, DWORD PTR _ID$[ebp]
  000ad	50		 push	 eax
  000ae	8d 45 dc	 lea	 eax, DWORD PTR __Loc$3[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 40   : 	m_LightMap[ID] = pLight;

  000b1	8d 5e 20	 lea	 ebx, DWORD PTR [esi+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 196  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

  000b4	50		 push	 eax
  000b5	8b cb		 mov	 ecx, ebx
  000b7	e8 00 00 00 00	 call	 ??$_Find_lower_bound@K@?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@ABK@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::_Find_lower_bound<unsigned long>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1605 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

  000bc	8b 4d e4	 mov	 ecx, DWORD PTR __Loc$3[ebp+8]
  000bf	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000c3	75 08		 jne	 SHORT $LN25@RegisterLi
  000c5	8b 45 f0	 mov	 eax, DWORD PTR _ID$[ebp]
  000c8	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  000cb	73 51		 jae	 SHORT $LN24@RegisterLi
$LN25@RegisterLi:

; 1629 :         if (max_size() == _Get_scary()->_Mysize) {

  000cd	81 7b 04 aa aa
	aa 0a		 cmp	 DWORD PTR [ebx+4], 178956970 ; 0aaaaaaaH
  000d4	74 67		 je	 SHORT $LN124@RegisterLi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 204  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

  000d6	8b 33		 mov	 esi, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1005 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

  000d8	89 5d e8	 mov	 DWORD PTR $T4[ebp], ebx

; 77   :         return ::operator new(_Bytes);

  000db	6a 18		 push	 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 785  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

  000dd	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1012 :         _Ptr = nullptr; // if allocate throws, prevents double-free

  000e4	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T4[ebp+4], 0

; 77   :         return ::operator new(_Bytes);

  000eb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000f0	8b 4d f0	 mov	 ecx, DWORD PTR _ID$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000f3	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000f6	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  000f9	8b cb		 mov	 ecx, ebx
  000fb	50		 push	 eax
  000fc	ff 75 e0	 push	 DWORD PTR __Loc$3[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 214  :         : first(_Tuple_get<_Indexes1>(_STD move(_Val1))...), second(_Tuple_get<_Indexes2>(_STD move(_Val2))...) {}

  000ff	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00106	ff 75 dc	 push	 DWORD PTR __Loc$3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 808  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

  00109	89 30		 mov	 DWORD PTR [eax], esi

; 809  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

  0010b	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 810  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

  0010e	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 811  :         this->_Ptr->_Color = _Red;

  00111	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\map

; 210  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

  00117	e8 00 00 00 00	 call	 ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Insert_node
  0011c	8b c8		 mov	 ecx, eax
$LN24@RegisterLi:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 40   : 	m_LightMap[ID] = pLight;

  0011e	89 79 14	 mov	 DWORD PTR [ecx+20], edi

; 41   : 	*poutLightID = ID;

  00121	8b 4d 0c	 mov	 ecx, DWORD PTR _poutLightID$[ebp]
  00124	8b 45 f0	 mov	 eax, DWORD PTR _ID$[ebp]
  00127	89 01		 mov	 DWORD PTR [ecx], eax

; 42   : }

  00129	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00133	59		 pop	 ecx
  00134	5f		 pop	 edi
  00135	5e		 pop	 esi
  00136	5b		 pop	 ebx
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 0c 00	 ret	 12			; 0000000cH
$LN124@RegisterLi:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1630 :             _Throw_tree_length_error();

  0013d	e8 00 00 00 00	 call	 ?_Throw_tree_length_error@std@@YAXXZ ; std::_Throw_tree_length_error
$LN122@RegisterLi:
  00142	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z$0:
  00000	68 f4 00 00 00	 push	 244			; 000000f4H
  00005	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
__unwindfunclet$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z$3:
  00012	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  00015	e9 00 00 00 00	 jmp	 ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
  0001d	cc		 int	 3
  0001e	cc		 int	 3
__ehhandler$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z:
  0001f	90		 npad	 1
  00020	90		 npad	 1
  00021	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00025	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00028	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?RegisterLight@CLightManager@@QAEXW4ELightType@@PAKAAU_D3DLIGHT9@@@Z ENDP ; CLightManager::RegisterLight
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?RestoreLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?RestoreLight@CLightManager@@QAEXXZ PROC		; CLightManager::RestoreLight, COMDAT
; _this$ = ecx

; 133  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 134  : 	STATEMANAGER.RestoreRenderState(D3DRS_LIGHTING);

  00004	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
  0000a	68 89 00 00 00	 push	 137			; 00000089H
  0000f	e8 00 00 00 00	 call	 ?RestoreRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@@Z ; CStateManager::RestoreRenderState

; 136  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00014	33 f6		 xor	 esi, esi
$LL4@RestoreLig:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00016	8b 57 2c	 mov	 edx, DWORD PTR [edi+44]
  00019	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  0001c	2b d1		 sub	 edx, ecx
  0001e	c1 fa 02	 sar	 edx, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 136  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00021	39 57 40	 cmp	 DWORD PTR [edi+64], edx
  00024	0f 42 57 40	 cmovb	 edx, DWORD PTR [edi+64]
  00028	3b f2		 cmp	 esi, edx
  0002a	73 0d		 jae	 SHORT $LN3@RestoreLig

; 137  : 	{
; 138  : 		m_LightSortVector[k]->SetDeviceLight(FALSE);

  0002c	8b 0c b1	 mov	 ecx, DWORD PTR [ecx+esi*4]
  0002f	6a 00		 push	 0
  00031	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  00036	46		 inc	 esi
  00037	eb dd		 jmp	 SHORT $LL4@RestoreLig
$LN3@RestoreLig:
  00039	5f		 pop	 edi

; 139  : 	}
; 140  : }

  0003a	5e		 pop	 esi
  0003b	c3		 ret	 0
?RestoreLight@CLightManager@@QAEXXZ ENDP		; CLightManager::RestoreLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?FlushLight@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_itor$ = -12						; size = 4
$T1 = -8						; size = 1
_pLight$2 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?FlushLight@CLightManager@@QAEXXZ PROC			; CLightManager::FlushLight, COMDAT
; _this$ = ecx

; 101  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c4		 xor	 eax, esp
  00010	89 44 24 08	 mov	 DWORD PTR __$ArrayPad$[esp+12], eax
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	8b d9		 mov	 ebx, ecx

; 102  : 	Update();

  00019	e8 00 00 00 00	 call	 ?Update@CLightManager@@QAEXXZ ; CLightManager::Update
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0001e	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00021	3b 43 2c	 cmp	 eax, DWORD PTR [ebx+44]
  00024	74 03		 je	 SHORT $LN72@FlushLight

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00026	89 43 2c	 mov	 DWORD PTR [ebx+44], eax
$LN72@FlushLight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1126 :         return iterator(_Scary->_Myhead->_Left, _Scary);

  00029	8b 4b 20	 mov	 ecx, DWORD PTR [ebx+32]

; 38   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	89 44 24 0c	 mov	 DWORD PTR _itor$[esp+24], eax
  00032	3b c1		 cmp	 eax, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 109  : 	for (; itor != m_LightMap.end(); ++itor)

  00034	0f 84 a1 00 00
	00		 je	 $LN3@FlushLight
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL34@FlushLight:

; 110  : 	{
; 111  : 		CLight * pLight = itor->second;

  00040	8b 78 14	 mov	 edi, DWORD PTR [eax+20]
  00043	8b cf		 mov	 ecx, edi
  00045	89 7c 24 10	 mov	 DWORD PTR _pLight$2[esp+24], edi

; 112  : 
; 113  : 		D3DXVECTOR3 v3LightPos(pLight->GetPosition());

  00049	e8 00 00 00 00	 call	 ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ; CLight::GetPosition
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 387  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  0004e	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  00052	f3 0f 10 50 04	 movss	 xmm2, DWORD PTR [eax+4]
  00057	f3 0f 5c 53 38	 subss	 xmm2, DWORD PTR [ebx+56]
  0005c	f3 0f 5c 4b 34	 subss	 xmm1, DWORD PTR [ebx+52]
  00061	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  00066	f3 0f 5c 43 3c	 subss	 xmm0, DWORD PTR [ebx+60]

; 306  :     z = fz;

  0006b	f3 0f 59 d2	 mulss	 xmm2, xmm2

; 1859 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  0006f	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00073	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00077	f3 0f 58 d1	 addss	 xmm2, xmm1
  0007b	0f 57 c9	 xorps	 xmm1, xmm1
  0007e	f3 0f 58 d0	 addss	 xmm2, xmm0
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h

; 768  :             return (float)sqrt(_X);

  00082	0f 5a c2	 cvtps2pd xmm0, xmm2
  00085	66 0f 2e c8	 ucomisd xmm1, xmm0
  00089	77 06		 ja	 SHORT $LN90@FlushLight
  0008b	f2 0f 51 c0	 sqrtsd	 xmm0, xmm0
  0008f	eb 05		 jmp	 SHORT $LN91@FlushLight
$LN90@FlushLight:
  00091	e8 00 00 00 00	 call	 __libm_sse2_sqrt_precise
$LN91@FlushLight:
  00096	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 115  : 		pLight->SetDistance(D3DXVec3Length(&v3Distance));

  0009a	51		 push	 ecx
  0009b	8b cf		 mov	 ecx, edi
  0009d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a2	e8 00 00 00 00	 call	 ?SetDistance@CLight@@QAEXM@Z ; CLight::SetDistance
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 844  :         if (_Mylast != _My_data._Myend) {

  000a7	8b 43 2c	 mov	 eax, DWORD PTR [ebx+44]
  000aa	3b 43 30	 cmp	 eax, DWORD PTR [ebx+48]
  000ad	74 08		 je	 SHORT $LN54@FlushLight

; 860  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

  000af	89 38		 mov	 DWORD PTR [eax], edi

; 861  :         } else {
; 862  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 863  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 864  :             _ASAN_VECTOR_RELEASE_GUARD;
; 865  :         }
; 866  : 
; 867  :         _Orphan_range(_Mylast, _Mylast);
; 868  :         _Ty& _Result = *_Mylast;
; 869  :         ++_Mylast;

  000b1	83 43 2c 04	 add	 DWORD PTR [ebx+44], 4

; 845  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

  000b5	eb 0e		 jmp	 SHORT $LN2@FlushLight
$LN54@FlushLight:

; 846  :         }
; 847  : 
; 848  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

  000b7	8d 4c 24 10	 lea	 ecx, DWORD PTR _pLight$2[esp+24]
  000bb	51		 push	 ecx
  000bc	50		 push	 eax
  000bd	8d 4b 28	 lea	 ecx, DWORD PTR [ebx+40]
  000c0	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@ABQAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEPAPAVCLight@@QAPAV2@ABQAV2@@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Emplace_reallocate<CLight * const &>
$LN2@FlushLight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 199  :         _Mybase::operator++();

  000c5	8d 4c 24 0c	 lea	 ecx, DWORD PTR _itor$[esp+24]
  000c9	e8 00 00 00 00	 call	 ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >,std::_Iterator_base0>::operator++

; 233  :         return this->_Ptr == _Right._Ptr;

  000ce	8b 44 24 0c	 mov	 eax, DWORD PTR _itor$[esp+24]
  000d2	3b 43 20	 cmp	 eax, DWORD PTR [ebx+32]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 109  : 	for (; itor != m_LightMap.end(); ++itor)

  000d5	0f 85 65 ff ff
	ff		 jne	 $LL34@FlushLight
$LN3@FlushLight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000db	8b 4b 2c	 mov	 ecx, DWORD PTR [ebx+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000de	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  000e0	8b 53 28	 mov	 edx, DWORD PTR [ebx+40]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000e3	2b c2		 sub	 eax, edx
  000e5	ff 74 24 10	 push	 DWORD PTR $T1[esp+24]
  000e9	c1 f8 02	 sar	 eax, 2
  000ec	50		 push	 eax
  000ed	51		 push	 ecx
  000ee	52		 push	 edx
  000ef	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PAPAVCLight@@ULightComp@@@std@@YAXPAPAVCLight@@0HULightComp@@@Z ; std::_Sort_unchecked<CLight * *,LightComp>
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 122  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  000f4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCStateManager@@@@0PAVCStateManager@@A ; CSingleton<CStateManager>::ms_singleton
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 7669 :     _Sort_unchecked(_UFirst, _ULast, _ULast - _UFirst, _Pass_fn(_Pred));

  000fa	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 122  : 	STATEMANAGER.SaveRenderState(D3DRS_LIGHTING, TRUE);

  000fd	6a 01		 push	 1
  000ff	68 89 00 00 00	 push	 137			; 00000089H
  00104	e8 00 00 00 00	 call	 ?SaveRenderState@CStateManager@@QAEXW4_D3DRENDERSTATETYPE@@K@Z ; CStateManager::SaveRenderState

; 124  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  00109	33 ff		 xor	 edi, edi
  0010b	0f 1f 44 00 00	 npad	 5
$LL7@FlushLight:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1932 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

  00110	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00113	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00116	2b d1		 sub	 edx, ecx
  00118	c1 fa 02	 sar	 edx, 2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 124  : 	for (DWORD k = 0; k < min(m_dwLimitLightCount, m_LightSortVector.size()); ++k)

  0011b	39 53 40	 cmp	 DWORD PTR [ebx+64], edx
  0011e	0f 42 53 40	 cmovb	 edx, DWORD PTR [ebx+64]
  00122	3b fa		 cmp	 edi, edx
  00124	73 18		 jae	 SHORT $LN6@FlushLight

; 125  : 	{
; 126  : 		m_LightSortVector[k]->Update();

  00126	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00129	e8 00 00 00 00	 call	 ?Update@CLight@@QAEXXZ	; CLight::Update

; 127  : 		m_LightSortVector[k]->SetDeviceLight(TRUE);

  0012e	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  00131	6a 01		 push	 1
  00133	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00136	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
  0013b	47		 inc	 edi
  0013c	eb d2		 jmp	 SHORT $LL7@FlushLight
$LN6@FlushLight:

; 128  : 
; 129  : 	}
; 130  : }

  0013e	8b 4c 24 14	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+24]
  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	5b		 pop	 ebx
  00145	33 cc		 xor	 ecx, esp
  00147	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0014c	8b e5		 mov	 esp, ebp
  0014e	5d		 pop	 ebp
  0014f	c3		 ret	 0
?FlushLight@CLightManager@@QAEXXZ ENDP			; CLightManager::FlushLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?Update@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Update@CLightManager@@QAEXXZ PROC			; CLightManager::Update, COMDAT
; _this$ = ecx

; 161  : 	//static DWORD s_dwStartTime = ELTimer_GetMSec();
; 162  : 	//ms_fCurTime = float(ELTimer_GetMSec() - s_dwStartTime) / 1000.0f;
; 163  : 	ms_fCurTime = CTimer::Instance().GetCurrentSecond();

  00000	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_singleton@?$CSingleton@VCTimer@@@@0PAVCTimer@@A ; CSingleton<CTimer>::ms_singleton
  00006	e8 00 00 00 00	 call	 ?GetCurrentSecond@CTimer@@QAEMXZ ; CTimer::GetCurrentSecond
  0000b	d9 1d 00 00 00
	00		 fstp	 DWORD PTR ?ms_fCurTime@CLightBase@@1MA ; CLightBase::ms_fCurTime

; 164  : }

  00011	c3		 ret	 0
?Update@CLightManager@@QAEXXZ ENDP			; CLightManager::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?Initialize@CLightManager@@QAEXXZ
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
?Initialize@CLightManager@@QAEXXZ PROC			; CLightManager::Initialize, COMDAT
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b d9		 mov	 ebx, ecx

; 27   : 	SetSkipIndex(1);

  00009	6a 01		 push	 1
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	e8 00 00 00 00	 call	 ?SetSkipIndex@CLightManager@@QAEXK@Z ; CLightManager::SetSkipIndex

; 28   : 
; 29   : 	m_NonUsingLightIDDeque.clear();

  00013	8d 4b 0c	 lea	 ecx, DWORD PTR [ebx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 1454 :         _Tidy();

  00016	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 31   : 	m_LightMap.clear();

  0001b	8d 7b 20	 lea	 edi, DWORD PTR [ebx+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1356 :         auto _Head = _Scary->_Myhead;

  0001e	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1357 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

  00020	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  00023	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00027	75 27		 jne	 SHORT $LN9@Initialize
  00029	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@Initialize:

; 746  :             _Erase_tree(_Al, _Rootnode->_Right);

  00030	ff 76 08	 push	 DWORD PTR [esi+8]
  00033	8b cf		 mov	 ecx, edi
  00035	57		 push	 edi
  00036	e8 00 00 00 00	 call	 ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBKPAVCLight@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBKPAVCLight@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<unsigned long const ,CLight *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<unsigned long const ,CLight *>,void *> > >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  0003b	8b c6		 mov	 eax, esi

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0003d	8b 36		 mov	 esi, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0003f	6a 18		 push	 24			; 00000018H
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00047	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 745  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

  0004a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0004e	74 e0		 je	 SHORT $LL8@Initialize
$LN9@Initialize:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 85   : 		m_kVct_pkFree = m_kVct_pkData;

  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 1358 :         _Head->_Parent  = _Head;

  00053	89 5b 04	 mov	 DWORD PTR [ebx+4], ebx

; 1359 :         _Head->_Left    = _Head;

  00056	89 1b		 mov	 DWORD PTR [ebx], ebx

; 1360 :         _Head->_Right   = _Head;

  00058	89 5b 08	 mov	 DWORD PTR [ebx+8], ebx

; 1361 :         _Scary->_Mysize = 0;

  0005b	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 85   : 		m_kVct_pkFree = m_kVct_pkData;

  00062	8d 41 4c	 lea	 eax, DWORD PTR [ecx+76]
  00065	5f		 pop	 edi
  00066	83 c1 58	 add	 ecx, 88			; 00000058H
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1546 :         if (this == _STD addressof(_Right)) {

  0006b	3b c8		 cmp	 ecx, eax
  0006d	74 11		 je	 SHORT $LN41@Initialize

; 1547 :             return *this;
; 1548 :         }
; 1549 : 
; 1550 :         auto& _Al       = _Getal();
; 1551 :         auto& _Right_al = _Right._Getal();
; 1552 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1553 :             if (_Al != _Right_al) {
; 1554 :                 _Tidy();
; 1555 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1556 :             }
; 1557 :         }
; 1558 : 
; 1559 :         _Pocca(_Al, _Right_al);
; 1560 :         auto& _Right_data = _Right._Mypair._Myval2;
; 1561 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00074	2b c2		 sub	 eax, edx
  00076	c1 f8 02	 sar	 eax, 2
  00079	50		 push	 eax
  0007a	52		 push	 edx
  0007b	e8 00 00 00 00	 call	 ??$_Assign_counted_range@PAPAVCLight@@@?$vector@PAVCLight@@V?$allocator@PAVCLight@@@std@@@std@@AAEXPAPAVCLight@@I@Z ; std::vector<CLight *,std::allocator<CLight *> >::_Assign_counted_range<CLight * *>
$LN41@Initialize:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 33   : }

  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
?Initialize@CLightManager@@QAEXXZ ENDP			; CLightManager::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?Destroy@CLightManager@@QAEXXZ
_TEXT	SEGMENT
?Destroy@CLightManager@@QAEXXZ PROC			; CLightManager::Destroy, COMDAT
; _this$ = ecx

; 21   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 41   :     _CONSTEXPR20 _Vector_const_iterator(_Tptr _Parg, const _Container_base* _Pvector) noexcept : _Ptr(_Parg) {

  00005	8b 5f 50	 mov	 ebx, DWORD PTR [edi+80]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  00008	8b 77 4c	 mov	 esi, DWORD PTR [edi+76]
  0000b	3b f3		 cmp	 esi, ebx
  0000d	74 14		 je	 SHORT $LN19@Destroy
  0000f	90		 npad	 1
$LL20@Destroy:

; 266  :         _Func(*_UFirst);

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 114  : 		delete pkData;

  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $LN26@Destroy
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$LN26@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\algorithm

; 265  :     for (; _UFirst != _ULast; ++_UFirst) {

  0001c	83 c6 04	 add	 esi, 4
  0001f	3b f3		 cmp	 esi, ebx
  00021	75 ed		 jne	 SHORT $LL20@Destroy
$LN19@Destroy:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  00023	8b 47 4c	 mov	 eax, DWORD PTR [edi+76]
  00026	3b 47 50	 cmp	 eax, DWORD PTR [edi+80]
  00029	74 03		 je	 SHORT $LN28@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  0002b	89 47 50	 mov	 DWORD PTR [edi+80], eax
$LN28@Destroy:

; 1829 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

  0002e	8b 47 58	 mov	 eax, DWORD PTR [edi+88]
  00031	3b 47 5c	 cmp	 eax, DWORD PTR [edi+92]
  00034	74 03		 je	 SHORT $LN31@Destroy

; 1830 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1831 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1832 :             // N4901 [tab:container.seq.req] "a.clear() [...] may invalidate the past-the-end iterator".
; 1833 :             return;
; 1834 :         }
; 1835 : 
; 1836 :         _My_data._Orphan_all();
; 1837 :         _Destroy_range(_Myfirst, _Mylast, _Getal());
; 1838 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1839 :         _Mylast = _Myfirst;

  00036	89 47 5c	 mov	 DWORD PTR [edi+92], eax
$LN31@Destroy:
  00039	5f		 pop	 edi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 23   : }

  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	c3		 ret	 0
?Destroy@CLightManager@@QAEXXZ ENDP			; CLightManager::Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ??1CLightManager@@UAE@XZ
_TEXT	SEGMENT
??1CLightManager@@UAE@XZ PROC				; CLightManager::~CLightManager, COMDAT
; _this$ = ecx

; 17   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 18   : }

  00004	8d 4f 48	 lea	 ecx, DWORD PTR [edi+72]
  00007	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  0000d	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  00014	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
  0001b	e8 00 00 00 00	 call	 ??1?$CDynamicPool@VCLight@@@@UAE@XZ ; CDynamicPool<CLight>::~CDynamicPool<CLight>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2107 :         if (_Myfirst) { // destroy and deallocate old array

  00020	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  00023	85 c0		 test	 eax, eax
  00025	74 41		 je	 SHORT $LN6@CLightMana

; 2108 :             _Destroy_range(_Myfirst, _Mylast, _Al);
; 2109 :             _ASAN_VECTOR_REMOVE;
; 2110 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

  00027	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  0002a	2b c8		 sub	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 830  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002c	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 251  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0002f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00035	72 12		 jb	 SHORT $LN22@CLightMana

; 150  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00037	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003a	83 c1 23	 add	 ecx, 35			; 00000023H

; 151  : 
; 152  :     // If the following asserts, it likely means that we are performing
; 153  :     // an aligned delete on memory coming from an unaligned allocation.
; 154  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 155  : 
; 156  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 157  :     // in range [_Min_back_shift, _Non_user_size]
; 158  : #ifdef _DEBUG
; 159  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 160  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 161  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 162  : #endif // _DEBUG
; 163  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003d	2b c2		 sub	 eax, edx

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003f	83 c0 fc	 add	 eax, -4			; fffffffcH
  00042	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00045	77 67		 ja	 SHORT $LN19@CLightMana

; 165  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00047	8b c2		 mov	 eax, edx
$LN22@CLightMana:

; 255  :         ::operator delete(_Ptr, _Bytes);

  00049	51		 push	 ecx
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2112 :             _Myfirst = nullptr;

  00050	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00057	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 2113 :             _Mylast  = nullptr;

  0005a	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0

; 2114 :             _Myend   = nullptr;

  00061	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
$LN6@CLightMana:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 18   : }

  00068	8d 4f 20	 lea	 ecx, DWORD PTR [edi+32]
  0006b	e8 00 00 00 00	 call	 ??1?$_Tree@V?$_Tmap_traits@KPAVCLight@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCLight@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,CLight *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CLight *> >,0> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 905  :         _Tidy();

  00070	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00073	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@AAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 653  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

  00078	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  0007b	6a 08		 push	 8
  0007d	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\utility

; 654  :     _Val         = static_cast<_Other&&>(_New_val);

  0007e	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 255  :         ::operator delete(_Ptr, _Bytes);

  00085	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0008a	83 c4 08	 add	 esp, 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 19   : 	{

  0008d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00094	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 18   : }

  0009e	8b cf		 mov	 ecx, edi
  000a0	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi
  000a9	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
$LN19@CLightMana:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 164  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ae	e8 00 00 00 00	 call	 __invalid_parameter_noinfo_noreturn
$LN61@CLightMana:
  000b3	cc		 int	 3
??1CLightManager@@UAE@XZ ENDP				; CLightManager::~CLightManager
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ??0CLightManager@@QAE@XZ
_TEXT	SEGMENT
$T2 = -32						; size = 12
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLightManager@@QAE@XZ PROC				; CLightManager::CLightManager, COMDAT
; _this$ = ecx

; 11   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CLightManager@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002c	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
  00031	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.h

; 22   : 	CLightBase() {};

  00038	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightBase@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h

; 15   : 		ms_singleton = (T*) ((int) this + offset);

  0003f	8b c7		 mov	 eax, edi
  00041	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@
  00048	a3 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, eax ; CSingleton<CLightManager>::ms_singleton
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 11   : {

  0004d	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7CLightManager@@6BCGraphicBase@@@
  00053	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  00056	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], OFFSET ??_7CLightManager@@6BCLightBase@@@
  0005d	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], OFFSET ??_7CLightManager@@6B?$CSingleton@VCLightManager@@@@@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  00064	6a 08		 push	 8
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 11   : {

  00066	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 1080 :     _Container_proxy* _Myproxy = nullptr;

  0006a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\deque

; 560  :     _Deque_val() noexcept : _Map(), _Mapsize(0), _Myoff(0), _Mysize(0) {}

  00070	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00077	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0007e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00085	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 1050 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00091	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1067 :         _Myproxy            = _New_proxy;

  00098	89 06		 mov	 DWORD PTR [esi], eax

; 1068 :         _New_proxy->_Mycont = this;

  0009a	89 30		 mov	 DWORD PTR [eax], esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 11   : {

  0009c	8d 77 20	 lea	 esi, DWORD PTR [edi+32]
  0009f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000a3	6a 18		 push	 24			; 00000018H
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 11   : {

  000a5	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 437  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

  000a8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  000ae	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000b5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ba	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 306  :     z = fz;

  000bd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+8], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  000c4	0f 14 c0	 unpcklps xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory

; 77   :         return ::operator new(_Bytes);

  000c7	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree

; 347  :         _Construct_in_place(_Pnode->_Left, _Pnode);

  000ca	89 00		 mov	 DWORD PTR [eax], eax

; 348  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

  000cc	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 349  :         _Construct_in_place(_Pnode->_Right, _Pnode);

  000cf	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 350  :         _Pnode->_Color = _Black;

  000d2	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 1941 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

  000d8	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  000da	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000dd	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  000e4	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  000eb	c7 47 30 00 00
	00 00		 mov	 DWORD PTR [edi+48], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 12   : 	{

  000f2	c7 47 48 00 00
	00 00		 mov	 DWORD PTR [edi+72], OFFSET ??_7?$CDynamicPool@VCLight@@@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vector

; 390  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

  000f9	c7 47 4c 00 00
	00 00		 mov	 DWORD PTR [edi+76], 0
  00100	c7 47 50 00 00
	00 00		 mov	 DWORD PTR [edi+80], 0
  00107	c7 47 54 00 00
	00 00		 mov	 DWORD PTR [edi+84], 0
  0010e	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00115	c7 47 5c 00 00
	00 00		 mov	 DWORD PTR [edi+92], 0
  0011c	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Pool.h

; 14   : 		m_uInitCapacity = 0;

  00123	c7 47 64 00 00
	00 00		 mov	 DWORD PTR [edi+100], 0

; 15   : 		m_uUsedCapacity = 0;

  0012a	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 12   : 	m_v3CenterPosition			= D3DXVECTOR3(0.0f, 0.0f, 0.0f);

  00131	66 0f d6 47 34	 movq	 QWORD PTR [edi+52], xmm0
  00136	89 47 3c	 mov	 DWORD PTR [edi+60], eax

; 13   : 	m_dwLimitLightCount			= LIGHT_LIMIT_DEFAULT;
; 14   : }

  00139	8b c7		 mov	 eax, edi
  0013b	c7 47 40 03 00
	00 00		 mov	 DWORD PTR [edi+64], 3
  00142	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00145	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0014c	59		 pop	 ecx
  0014d	5f		 pop	 edi
  0014e	5e		 pop	 esi
  0014f	8b e5		 mov	 esp, ebp
  00151	5d		 pop	 ebp
  00152	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLightManager@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
__unwindfunclet$??0CLightManager@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1CLightBase@@UAE@XZ	; CLightBase::~CLightBase
__unwindfunclet$??0CLightManager@@QAE@XZ$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 08	 add	 ecx, 8
  00019	e9 00 00 00 00	 jmp	 ??1?$CSingleton@VCLightManager@@@@UAE@XZ ; CSingleton<CLightManager>::~CSingleton<CLightManager>
__unwindfunclet$??0CLightManager@@QAE@XZ$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00024	e9 00 00 00 00	 jmp	 ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
  00029	cc		 int	 3
  0002a	cc		 int	 3
  0002b	cc		 int	 3
  0002c	cc		 int	 3
  0002d	cc		 int	 3
__ehhandler$??0CLightManager@@QAE@XZ:
  0002e	90		 npad	 1
  0002f	90		 npad	 1
  00030	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00034	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00037	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0003a	33 c8		 xor	 ecx, eax
  0003c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00041	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CLightManager@@QAE@XZ
  00046	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CLightManager@@QAE@XZ ENDP				; CLightManager::CLightManager
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z PROC	; CSingleton<CLightManager>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1

; 19   : 	{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00010	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton
  0001a	74 0b		 je	 SHORT $LN6@scalar
  0001c	6a 04		 push	 4
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00024	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
??_G?$CSingleton@VCLightManager@@@@UAEPAXI@Z ENDP	; CSingleton<CLightManager>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\eterBase\Singleton.h
;	COMDAT ??1?$CSingleton@VCLightManager@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CSingleton@VCLightManager@@@@UAE@XZ PROC		; CSingleton<CLightManager>::~CSingleton<CLightManager>, COMDAT
; _this$ = ecx

; 19   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7?$CSingleton@VCLightManager@@@@6B@

; 20   : 		assert(ms_singleton);
; 21   : 		ms_singleton = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?ms_singleton@?$CSingleton@VCLightManager@@@@0PAVCLightManager@@A, 0 ; CSingleton<CLightManager>::ms_singleton

; 22   : 	}

  00010	c3		 ret	 0
??1?$CSingleton@VCLightManager@@@@UAE@XZ ENDP		; CSingleton<CLightManager>::~CSingleton<CLightManager>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLight@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLight@@UAEPAXI@Z PROC				; CLight::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1CLight@@UAE@XZ	; CLight::~CLight
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0e		 je	 SHORT $LN4@scalar
  00011	68 f4 00 00 00	 push	 244			; 000000f4H
  00016	56		 push	 esi
  00017	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001c	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??_GCLight@@UAEPAXI@Z ENDP				; CLight::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendRange@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendRange@CLight@@QAEXMMM@Z PROC			; CLight::BlendRange, COMDAT
; _this$ = ecx

; 302  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 303  : 	m_RangeTransitor.SetTransition(m_d3dLight.Range, fRange, ms_fCurTime + fDelayTime, fBlendTime);

  00003	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fDelayTime$[ebp]
  00008	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 55   : 		m_SourceValue = c_rSourceValue;

  00010	8b 41 58	 mov	 eax, DWORD PTR [ecx+88]

; 56   : 		m_TargetValue = c_rTargetValue;

  00013	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fRange$[ebp]
  00018	89 81 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], eax
  0001e	f3 0f 11 81 f0
	00 00 00	 movss	 DWORD PTR [ecx+240], xmm0

; 57   : 		m_fStartTime = fStartTime;

  00026	f3 0f 11 89 e4
	00 00 00	 movss	 DWORD PTR [ecx+228], xmm1

; 58   : 		m_fEndTime = fStartTime + fBlendTime;

  0002e	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00033	f3 0f 11 89 e8
	00 00 00	 movss	 DWORD PTR [ecx+232], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 304  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?BlendRange@CLight@@QAEXMMM@Z ENDP			; CLight::BlendRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_Color$ = -16						; size = 16
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendAmbientColor, COMDAT
; _this$ = ecx

; 296  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1389 :     r = c.r;

  00006	0f 10 41 30	 movups	 xmm0, XMMWORD PTR [ecx+48]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 56   : 		m_TargetValue = c_rTargetValue;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 298  : 	m_AmbientColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fDelayTime$[ebp]
  00012	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1389 :     r = c.r;

  0001a	0f 11 45 f0	 movups	 XMMWORD PTR _Color$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 55   : 		m_SourceValue = c_rSourceValue;

  0001e	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _Color$[ebp]
  00022	0f 11 81 bc 00
	00 00		 movups	 XMMWORD PTR [ecx+188], xmm0

; 56   : 		m_TargetValue = c_rTargetValue;

  00029	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 57   : 		m_fStartTime = fStartTime;

  0002c	f3 0f 11 89 b4
	00 00 00	 movss	 DWORD PTR [ecx+180], xmm1

; 58   : 		m_fEndTime = fStartTime + fBlendTime;

  00034	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00039	0f 11 81 cc 00
	00 00		 movups	 XMMWORD PTR [ecx+204], xmm0
  00040	f3 0f 11 89 b8
	00 00 00	 movss	 DWORD PTR [ecx+184], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 299  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
?BlendAmbientColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z
_TEXT	SEGMENT
_Color$ = -16						; size = 16
_c_rColor$ = 8						; size = 4
_fBlendTime$ = 12					; size = 4
_fDelayTime$ = 16					; size = 4
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z PROC	; CLight::BlendDiffuseColor, COMDAT
; _this$ = ecx

; 290  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1389 :     r = c.r;

  00006	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 56   : 		m_TargetValue = c_rTargetValue;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _c_rColor$[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 292  : 	m_DiffuseColorTransitor.SetTransition(Color, c_rColor, ms_fCurTime + fDelayTime, fBlendTime);

  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fDelayTime$[ebp]
  00012	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1389 :     r = c.r;

  0001a	0f 11 45 f0	 movups	 XMMWORD PTR _Color$[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 55   : 		m_SourceValue = c_rSourceValue;

  0001e	0f 10 45 f0	 movups	 xmm0, XMMWORD PTR _Color$[ebp]
  00022	0f 11 81 8c 00
	00 00		 movups	 XMMWORD PTR [ecx+140], xmm0

; 56   : 		m_TargetValue = c_rTargetValue;

  00029	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]

; 57   : 		m_fStartTime = fStartTime;

  0002c	f3 0f 11 89 84
	00 00 00	 movss	 DWORD PTR [ecx+132], xmm1

; 58   : 		m_fEndTime = fStartTime + fBlendTime;

  00034	f3 0f 58 4d 0c	 addss	 xmm1, DWORD PTR _fBlendTime$[ebp]
  00039	0f 11 81 9c 00
	00 00		 movups	 XMMWORD PTR [ecx+156], xmm0
  00040	f3 0f 11 89 88
	00 00 00	 movss	 DWORD PTR [ecx+136], xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 293  : }

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
?BlendDiffuseColor@CLight@@QAEXABUD3DXCOLOR@@MM@Z ENDP	; CLight::BlendDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ
_TEXT	SEGMENT
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ PROC		; CLight::GetPosition, COMDAT
; _this$ = ecx

; 268  : 	return m_d3dLight.Position;

  00000	8d 41 40	 lea	 eax, DWORD PTR [ecx+64]

; 269  : }

  00003	c3		 ret	 0
?GetPosition@CLight@@QBEABU_D3DVECTOR@@XZ ENDP		; CLight::GetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetPosition@CLight@@QAEXMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
?SetPosition@CLight@@QAEXMMM@Z PROC			; CLight::SetPosition, COMDAT
; _this$ = ecx

; 272  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 273  : 	if (m_d3dLight.Position.x == fx && m_d3dLight.Position.y == fy && m_d3dLight.Position.z == fz)

  00003	f3 0f 10 41 40	 movss	 xmm0, DWORD PTR [ecx+64]
  00008	f3 0f 10 5d 08	 movss	 xmm3, DWORD PTR _fx$[ebp]
  0000d	f3 0f 10 4d 10	 movss	 xmm1, DWORD PTR _fz$[ebp]
  00012	f3 0f 10 55 0c	 movss	 xmm2, DWORD PTR _fy$[ebp]
  00017	0f 2e c3	 ucomiss xmm0, xmm3
  0001a	9f		 lahf
  0001b	f6 c4 44	 test	 ah, 68			; 00000044H
  0001e	7a 1c		 jp	 SHORT $LN2@SetPositio
  00020	f3 0f 10 41 44	 movss	 xmm0, DWORD PTR [ecx+68]
  00025	0f 2e c2	 ucomiss xmm0, xmm2
  00028	9f		 lahf
  00029	f6 c4 44	 test	 ah, 68			; 00000044H
  0002c	7a 0e		 jp	 SHORT $LN2@SetPositio
  0002e	f3 0f 10 41 48	 movss	 xmm0, DWORD PTR [ecx+72]
  00033	0f 2e c1	 ucomiss xmm0, xmm1
  00036	9f		 lahf
  00037	f6 c4 44	 test	 ah, 68			; 00000044H
  0003a	7b 16		 jnp	 SHORT $LN1@SetPositio
$LN2@SetPositio:

; 274  : 	{
; 275  : 		return;
; 276  : 	}
; 277  : 
; 278  : 	m_d3dLight.Position.x = fx;

  0003c	f3 0f 11 59 40	 movss	 DWORD PTR [ecx+64], xmm3

; 279  : 	m_d3dLight.Position.y = fy;

  00041	f3 0f 11 51 44	 movss	 DWORD PTR [ecx+68], xmm2

; 280  : 	m_d3dLight.Position.z = fz;

  00046	f3 0f 11 49 48	 movss	 DWORD PTR [ecx+72], xmm1

; 281  : 	m_isEdited = TRUE;

  0004b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetPositio:

; 282  : }

  00052	5d		 pop	 ebp
  00053	c2 0c 00	 ret	 12			; 0000000cH
?SetPosition@CLight@@QAEXMMM@Z ENDP			; CLight::SetPosition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetRange@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fRange$ = 8						; size = 4
?SetRange@CLight@@QAEXM@Z PROC				; CLight::SetRange, COMDAT
; _this$ = ecx

; 256  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 257  : 	if (m_d3dLight.Range == fRange)

  00003	f3 0f 10 41 58	 movss	 xmm0, DWORD PTR [ecx+88]
  00008	f3 0f 10 4d 08	 movss	 xmm1, DWORD PTR _fRange$[ebp]
  0000d	0f 2e c1	 ucomiss xmm0, xmm1
  00010	9f		 lahf
  00011	f6 c4 44	 test	 ah, 68			; 00000044H
  00014	7b 0c		 jnp	 SHORT $LN1@SetRange

; 258  : 	{
; 259  : 		return;
; 260  : 	}
; 261  : 
; 262  : 	m_d3dLight.Range = fRange;

  00016	f3 0f 11 49 58	 movss	 DWORD PTR [ecx+88], xmm1

; 263  : 	m_isEdited = TRUE;

  0001b	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetRange:

; 264  : }

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?SetRange@CLight@@QAEXM@Z ENDP				; CLight::SetRange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetAmbientColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetAmbientColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetAmbientColor, COMDAT
; _this$ = ecx

; 239  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 240  : 	if (m_d3dLight.Ambient.r == fr
; 241  : 			&& m_d3dLight.Ambient.g == fg
; 242  : 			&& m_d3dLight.Ambient.b == fb
; 243  : 			&& m_d3dLight.Ambient.a == fa

  00003	f3 0f 10 41 30	 movss	 xmm0, DWORD PTR [ecx+48]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN2@SetAmbient
  00025	f3 0f 10 41 34	 movss	 xmm0, DWORD PTR [ecx+52]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN2@SetAmbient
  00033	f3 0f 10 41 38	 movss	 xmm0, DWORD PTR [ecx+56]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN2@SetAmbient
  00041	f3 0f 10 41 3c	 movss	 xmm0, DWORD PTR [ecx+60]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN1@SetAmbient
$LN2@SetAmbient:

; 244  : 	   )
; 245  : 	{
; 246  : 		return;
; 247  : 	}
; 248  : 	m_d3dLight.Ambient.r = fr;

  0004f	f3 0f 11 61 30	 movss	 DWORD PTR [ecx+48], xmm4

; 249  : 	m_d3dLight.Ambient.g = fg;

  00054	f3 0f 11 59 34	 movss	 DWORD PTR [ecx+52], xmm3

; 250  : 	m_d3dLight.Ambient.b = fb;

  00059	f3 0f 11 51 38	 movss	 DWORD PTR [ecx+56], xmm2

; 251  : 	m_d3dLight.Ambient.a = fa;

  0005e	f3 0f 11 49 3c	 movss	 DWORD PTR [ecx+60], xmm1

; 252  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetAmbient:

; 253  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetAmbientColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetAmbientColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDiffuseColor@CLight@@QAEXMMMM@Z
_TEXT	SEGMENT
_fr$ = 8						; size = 4
_fg$ = 12						; size = 4
_fb$ = 16						; size = 4
_fa$ = 20						; size = 4
?SetDiffuseColor@CLight@@QAEXMMMM@Z PROC		; CLight::SetDiffuseColor, COMDAT
; _this$ = ecx

; 222  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 223  : 	if (m_d3dLight.Diffuse.r == fr
; 224  : 			&& m_d3dLight.Diffuse.g == fg
; 225  : 			&& m_d3dLight.Diffuse.b == fb
; 226  : 			&& m_d3dLight.Diffuse.a == fa

  00003	f3 0f 10 41 10	 movss	 xmm0, DWORD PTR [ecx+16]
  00008	f3 0f 10 65 08	 movss	 xmm4, DWORD PTR _fr$[ebp]
  0000d	f3 0f 10 4d 14	 movss	 xmm1, DWORD PTR _fa$[ebp]
  00012	f3 0f 10 55 10	 movss	 xmm2, DWORD PTR _fb$[ebp]
  00017	f3 0f 10 5d 0c	 movss	 xmm3, DWORD PTR _fg$[ebp]
  0001c	0f 2e c4	 ucomiss xmm0, xmm4
  0001f	9f		 lahf
  00020	f6 c4 44	 test	 ah, 68			; 00000044H
  00023	7a 2a		 jp	 SHORT $LN2@SetDiffuse
  00025	f3 0f 10 41 14	 movss	 xmm0, DWORD PTR [ecx+20]
  0002a	0f 2e c3	 ucomiss xmm0, xmm3
  0002d	9f		 lahf
  0002e	f6 c4 44	 test	 ah, 68			; 00000044H
  00031	7a 1c		 jp	 SHORT $LN2@SetDiffuse
  00033	f3 0f 10 41 18	 movss	 xmm0, DWORD PTR [ecx+24]
  00038	0f 2e c2	 ucomiss xmm0, xmm2
  0003b	9f		 lahf
  0003c	f6 c4 44	 test	 ah, 68			; 00000044H
  0003f	7a 0e		 jp	 SHORT $LN2@SetDiffuse
  00041	f3 0f 10 41 1c	 movss	 xmm0, DWORD PTR [ecx+28]
  00046	0f 2e c1	 ucomiss xmm0, xmm1
  00049	9f		 lahf
  0004a	f6 c4 44	 test	 ah, 68			; 00000044H
  0004d	7b 1b		 jnp	 SHORT $LN1@SetDiffuse
$LN2@SetDiffuse:

; 227  : 	   )
; 228  : 	{
; 229  : 		return;
; 230  : 	}
; 231  : 	m_d3dLight.Diffuse.r = fr;

  0004f	f3 0f 11 61 10	 movss	 DWORD PTR [ecx+16], xmm4

; 232  : 	m_d3dLight.Diffuse.g = fg;

  00054	f3 0f 11 59 14	 movss	 DWORD PTR [ecx+20], xmm3

; 233  : 	m_d3dLight.Diffuse.b = fb;

  00059	f3 0f 11 51 18	 movss	 DWORD PTR [ecx+24], xmm2

; 234  : 	m_d3dLight.Diffuse.a = fa;

  0005e	f3 0f 11 49 1c	 movss	 DWORD PTR [ecx+28], xmm1

; 235  : 	m_isEdited = TRUE;

  00063	c7 41 74 01 00
	00 00		 mov	 DWORD PTR [ecx+116], 1
$LN1@SetDiffuse:

; 236  : }

  0006a	5d		 pop	 ebp
  0006b	c2 10 00	 ret	 16			; 00000010H
?SetDiffuseColor@CLight@@QAEXMMMM@Z ENDP		; CLight::SetDiffuseColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDeviceLight@CLight@@QAEXH@Z
_TEXT	SEGMENT
_bActive$ = 8						; size = 4
?SetDeviceLight@CLight@@QAEXH@Z PROC			; CLight::SetDeviceLight, COMDAT
; _this$ = ecx

; 201  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 202  : 	if (bActive && m_isEdited)

  00003	83 7d 08 00	 cmp	 DWORD PTR _bActive$[ebp], 0
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 20		 je	 SHORT $LN3@SetDeviceL
  0000c	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00010	74 1a		 je	 SHORT $LN3@SetDeviceL

; 203  : 	{
; 204  : 		if (ms_lpd3dDevice)

  00012	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00018	85 d2		 test	 edx, edx
  0001a	74 29		 je	 SHORT $LN4@SetDeviceL

; 205  : 		{
; 206  : 			ms_lpd3dDevice->SetLight(m_LightID, &m_d3dLight);

  0001c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001e	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00021	50		 push	 eax
  00022	ff 76 08	 push	 DWORD PTR [esi+8]
  00025	52		 push	 edx
  00026	ff 91 cc 00 00
	00		 call	 DWORD PTR [ecx+204]
$LN3@SetDeviceL:

; 207  : 		}
; 208  : 	}
; 209  : 	if (ms_lpd3dDevice)

  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?ms_lpd3dDevice@CGraphicBase@@1PAUIDirect3DDevice9@@A ; CGraphicBase::ms_lpd3dDevice
  00032	85 c9		 test	 ecx, ecx
  00034	74 0f		 je	 SHORT $LN4@SetDeviceL

; 210  : 	{
; 211  : 		ms_lpd3dDevice->LightEnable(m_LightID, bActive);

  00036	ff 75 08	 push	 DWORD PTR _bActive$[ebp]
  00039	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003b	ff 76 08	 push	 DWORD PTR [esi+8]
  0003e	51		 push	 ecx
  0003f	ff 90 d4 00 00
	00		 call	 DWORD PTR [eax+212]
$LN4@SetDeviceL:
  00045	5e		 pop	 esi

; 212  : 	}
; 213  : }

  00046	5d		 pop	 ebp
  00047	c2 04 00	 ret	 4
?SetDeviceLight@CLight@@QAEXH@Z ENDP			; CLight::SetDeviceLight
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetDistance@CLight@@QAEXM@Z
_TEXT	SEGMENT
_fDistance$ = 8						; size = 4
?SetDistance@CLight@@QAEXM@Z PROC			; CLight::SetDistance, COMDAT
; _this$ = ecx

; 285  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 286  : 	m_fDistance = fDistance;

  00003	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _fDistance$[ebp]
  00008	f3 0f 11 41 78	 movss	 DWORD PTR [ecx+120], xmm0

; 287  : }

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
?SetDistance@CLight@@QAEXM@Z ENDP			; CLight::SetDistance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?SetParameter@CLight@@QAEXKABU_D3DLIGHT9@@@Z
_TEXT	SEGMENT
_id$ = 8						; size = 4
_c_rLight$ = 12						; size = 4
?SetParameter@CLight@@QAEXKABU_D3DLIGHT9@@@Z PROC	; CLight::SetParameter, COMDAT
; _this$ = ecx

; 216  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 217  : 	m_LightID	= id;

  00003	8b 45 08	 mov	 eax, DWORD PTR _id$[ebp]
  00006	56		 push	 esi

; 218  : 	m_d3dLight	= c_rLight;

  00007	8b 75 0c	 mov	 esi, DWORD PTR _c_rLight$[ebp]
  0000a	57		 push	 edi
  0000b	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0000e	8d 79 0c	 lea	 edi, DWORD PTR [ecx+12]
  00011	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00016	f3 a5		 rep movsd
  00018	5f		 pop	 edi
  00019	5e		 pop	 esi

; 219  : }

  0001a	5d		 pop	 ebp
  0001b	c2 08 00	 ret	 8
?SetParameter@CLight@@QAEXKABU_D3DLIGHT9@@@Z ENDP	; CLight::SetParameter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?Update@CLight@@QAEXXZ
_TEXT	SEGMENT
$T5 = -20						; size = 16
$T6 = -20						; size = 16
_Color$4$sroa$980$ = -4					; size = 4
_Color$4$sroa$979$ = -4					; size = 4
_Color$4$sroa$978$ = -4					; size = 4
_Color$4$sroa$977$ = -4					; size = 4
_Color$2$sroa$934$ = -4					; size = 4
_Color$2$sroa$909$ = -4					; size = 4
_Color$2$sroa$908$ = -4					; size = 4
_Color$2$sroa$907$ = -4					; size = 4
_fRange$7 = -4						; size = 4
?Update@CLight@@QAEXXZ PROC				; CLight::Update, COMDAT
; _this$ = ecx

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 30   : 		if (fcurTime >= m_fEndTime)

  00003	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 307  : {

  0000b	83 ec 14	 sub	 esp, 20			; 00000014H
  0000e	56		 push	 esi
  0000f	8b f1		 mov	 esi, ecx
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 30   : 		if (fcurTime >= m_fEndTime)

  00011	f3 0f 10 86 b8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+184]
  00019	0f 2f e0	 comiss	 xmm4, xmm0
  0001c	0f 83 f8 00 00
	00		 jae	 $LN4@Update
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 310  : 		if (!m_AmbientColorTransitor.isActive())

  00022	83 be b0 00 00
	00 00		 cmp	 DWORD PTR [esi+176], 0
  00029	75 22		 jne	 SHORT $LN3@Update

; 311  : 		{
; 312  : 			m_AmbientColorTransitor.SetActive();

  0002b	c7 86 b0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+176], 1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1389 :     r = c.r;

  00035	0f 10 46 30	 movups	 xmm0, XMMWORD PTR [esi+48]
  00039	0f 11 45 ec	 movups	 XMMWORD PTR $T6[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 50   : 		m_SourceValue = c_rSourceValue;

  0003d	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T6[ebp]
  00041	0f 11 86 bc 00
	00 00		 movups	 XMMWORD PTR [esi+188], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 314  : 		}

  00048	e9 c5 00 00 00	 jmp	 $LN112@Update
$LN3@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 63   : 		if (fcurTime <= m_fStartTime)

  0004d	f3 0f 10 8e b4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+180]
  00055	0f 2f cc	 comiss	 xmm1, xmm4
  00058	0f 83 81 00 00
	00		 jae	 $LN109@Update

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0005e	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1524 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00062	f3 0f 10 be d4
	00 00 00	 movss	 xmm7, DWORD PTR [esi+212]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0006a	f3 0f 5c e1	 subss	 xmm4, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1524 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0006e	f3 0f 10 9e d8
	00 00 00	 movss	 xmm3, DWORD PTR [esi+216]
  00076	f3 0f 10 8e c4
	00 00 00	 movss	 xmm1, DWORD PTR [esi+196]
  0007e	f3 0f 10 96 c0
	00 00 00	 movss	 xmm2, DWORD PTR [esi+192]
  00086	f3 0f 5c f9	 subss	 xmm7, xmm1
  0008a	f3 0f 10 ae cc
	00 00 00	 movss	 xmm5, DWORD PTR [esi+204]
  00092	f3 0f 10 b6 d0
	00 00 00	 movss	 xmm6, DWORD PTR [esi+208]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  0009a	f3 0f 5e e0	 divss	 xmm4, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1524 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0009e	f3 0f 10 86 c8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+200]
  000a6	f3 0f 5c f2	 subss	 xmm6, xmm2
  000aa	f3 0f 5c ae bc
	00 00 00	 subss	 xmm5, DWORD PTR [esi+188]
  000b2	f3 0f 5c d8	 subss	 xmm3, xmm0

; 1530 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000b6	f3 0f 59 fc	 mulss	 xmm7, xmm4
  000ba	f3 0f 59 f4	 mulss	 xmm6, xmm4

; 1518 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000be	f3 0f 58 f9	 addss	 xmm7, xmm1

; 1530 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000c2	f3 0f 59 ec	 mulss	 xmm5, xmm4
  000c6	0f 28 cb	 movaps	 xmm1, xmm3

; 1518 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000c9	f3 0f 58 f2	 addss	 xmm6, xmm2

; 1530 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  000cd	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 1518 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  000d1	f3 0f 58 ae bc
	00 00 00	 addss	 xmm5, DWORD PTR [esi+188]
  000d9	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 63   : 		if (fcurTime <= m_fStartTime)

  000dd	eb 14		 jmp	 SHORT $LN89@Update
$LN109@Update:
  000df	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _Color$2$sroa$907$[ebp]
  000e4	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR _Color$2$sroa$908$[ebp]
  000e9	f3 0f 10 75 fc	 movss	 xmm6, DWORD PTR _Color$2$sroa$909$[ebp]
  000ee	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _Color$2$sroa$934$[ebp]
$LN89@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 320  : 			SetAmbientColor(Color.r, Color.g, Color.b, Color.a);

  000f3	83 ec 10	 sub	 esp, 16			; 00000010H
  000f6	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  000fc	f3 0f 11 7c 24
	08		 movss	 DWORD PTR [esp+8], xmm7
  00102	f3 0f 11 74 24
	04		 movss	 DWORD PTR [esp+4], xmm6
  00108	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  0010d	e8 00 00 00 00	 call	 ?SetAmbientColor@CLight@@QAEXMMMM@Z ; CLight::SetAmbientColor
$LN112@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 30   : 		if (fcurTime >= m_fEndTime)

  00112	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN4@Update:
  0011a	f3 0f 10 86 88
	00 00 00	 movss	 xmm0, DWORD PTR [esi+136]
  00122	0f 2f e0	 comiss	 xmm4, xmm0
  00125	0f 83 fa 00 00
	00		 jae	 $LN7@Update
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 326  : 		if (!m_DiffuseColorTransitor.isActive())

  0012b	83 be 80 00 00
	00 00		 cmp	 DWORD PTR [esi+128], 0
  00132	75 22		 jne	 SHORT $LN6@Update

; 327  : 		{
; 328  : 			m_DiffuseColorTransitor.SetActive();

  00134	c7 86 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+128], 1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1389 :     r = c.r;

  0013e	0f 10 46 10	 movups	 xmm0, XMMWORD PTR [esi+16]
  00142	0f 11 45 ec	 movups	 XMMWORD PTR $T5[ebp], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 50   : 		m_SourceValue = c_rSourceValue;

  00146	0f 10 45 ec	 movups	 xmm0, XMMWORD PTR $T5[ebp]
  0014a	0f 11 86 8c 00
	00 00		 movups	 XMMWORD PTR [esi+140], xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 330  : 		}

  00151	e9 c7 00 00 00	 jmp	 $LN113@Update
$LN6@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 63   : 		if (fcurTime <= m_fStartTime)

  00156	f3 0f 10 8e 84
	00 00 00	 movss	 xmm1, DWORD PTR [esi+132]
  0015e	0f 2f cc	 comiss	 xmm1, xmm4
  00161	0f 83 81 00 00
	00		 jae	 $LN110@Update

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00167	f3 0f 5c c1	 subss	 xmm0, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1524 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  0016b	f3 0f 10 be a4
	00 00 00	 movss	 xmm7, DWORD PTR [esi+164]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00173	f3 0f 5c e1	 subss	 xmm4, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1524 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  00177	f3 0f 10 9e a8
	00 00 00	 movss	 xmm3, DWORD PTR [esi+168]
  0017f	f3 0f 10 8e 94
	00 00 00	 movss	 xmm1, DWORD PTR [esi+148]
  00187	f3 0f 10 96 90
	00 00 00	 movss	 xmm2, DWORD PTR [esi+144]
  0018f	f3 0f 5c f9	 subss	 xmm7, xmm1
  00193	f3 0f 10 ae 9c
	00 00 00	 movss	 xmm5, DWORD PTR [esi+156]
  0019b	f3 0f 10 b6 a0
	00 00 00	 movss	 xmm6, DWORD PTR [esi+160]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  001a3	f3 0f 5e e0	 divss	 xmm4, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\extern\include\directX\d3dx9math.inl

; 1524 :     return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);

  001a7	f3 0f 10 86 98
	00 00 00	 movss	 xmm0, DWORD PTR [esi+152]
  001af	f3 0f 5c f2	 subss	 xmm6, xmm2
  001b3	f3 0f 5c ae 8c
	00 00 00	 subss	 xmm5, DWORD PTR [esi+140]
  001bb	f3 0f 5c d8	 subss	 xmm3, xmm0

; 1530 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  001bf	f3 0f 59 fc	 mulss	 xmm7, xmm4
  001c3	f3 0f 59 f4	 mulss	 xmm6, xmm4

; 1518 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001c7	f3 0f 58 f9	 addss	 xmm7, xmm1

; 1530 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  001cb	f3 0f 59 ec	 mulss	 xmm5, xmm4
  001cf	0f 28 cb	 movaps	 xmm1, xmm3

; 1518 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001d2	f3 0f 58 f2	 addss	 xmm6, xmm2

; 1530 :     return D3DXCOLOR(r * f, g * f, b * f, a * f);

  001d6	f3 0f 59 cc	 mulss	 xmm1, xmm4

; 1518 :     return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);

  001da	f3 0f 58 ae 8c
	00 00 00	 addss	 xmm5, DWORD PTR [esi+140]
  001e2	f3 0f 58 c8	 addss	 xmm1, xmm0
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 63   : 		if (fcurTime <= m_fStartTime)

  001e6	eb 14		 jmp	 SHORT $LN99@Update
$LN110@Update:
  001e8	f3 0f 10 6d fc	 movss	 xmm5, DWORD PTR _Color$4$sroa$977$[ebp]
  001ed	f3 0f 10 75 fc	 movss	 xmm6, DWORD PTR _Color$4$sroa$978$[ebp]
  001f2	f3 0f 10 7d fc	 movss	 xmm7, DWORD PTR _Color$4$sroa$979$[ebp]
  001f7	f3 0f 10 4d fc	 movss	 xmm1, DWORD PTR _Color$4$sroa$980$[ebp]
$LN99@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 335  : 			SetDiffuseColor(Color.r, Color.g, Color.b, Color.a);

  001fc	83 ec 10	 sub	 esp, 16			; 00000010H
  001ff	8b ce		 mov	 ecx, esi
  00201	f3 0f 11 4c 24
	0c		 movss	 DWORD PTR [esp+12], xmm1
  00207	f3 0f 11 7c 24
	08		 movss	 DWORD PTR [esp+8], xmm7
  0020d	f3 0f 11 74 24
	04		 movss	 DWORD PTR [esp+4], xmm6
  00213	f3 0f 11 2c 24	 movss	 DWORD PTR [esp], xmm5
  00218	e8 00 00 00 00	 call	 ?SetDiffuseColor@CLight@@QAEXMMMM@Z ; CLight::SetDiffuseColor
$LN113@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 30   : 		if (fcurTime >= m_fEndTime)

  0021d	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR ?ms_fCurTime@CLightBase@@1MA
$LN7@Update:
  00225	f3 0f 10 86 e8
	00 00 00	 movss	 xmm0, DWORD PTR [esi+232]
  0022d	0f 2f e0	 comiss	 xmm4, xmm0
  00230	73 7a		 jae	 SHORT $LN10@Update
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 341  : 		if (!m_RangeTransitor.isActive())

  00232	83 be e0 00 00
	00 00		 cmp	 DWORD PTR [esi+224], 0
  00239	75 18		 jne	 SHORT $LN9@Update

; 342  : 		{
; 343  : 			m_RangeTransitor.SetActive();

  0023b	c7 86 e0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+224], 1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 50   : 		m_SourceValue = c_rSourceValue;

  00245	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00248	89 86 ec 00 00
	00		 mov	 DWORD PTR [esi+236], eax
  0024e	5e		 pop	 esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 353  : }

  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c3		 ret	 0
$LN9@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 63   : 		if (fcurTime <= m_fStartTime)

  00253	f3 0f 10 96 e4
	00 00 00	 movss	 xmm2, DWORD PTR [esi+228]
  0025b	0f 2f d4	 comiss	 xmm2, xmm4
  0025e	73 3a		 jae	 SHORT $LN111@Update

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00260	f3 0f 5c e2	 subss	 xmm4, xmm2

; 69   : 		*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00264	f3 0f 10 8e ec
	00 00 00	 movss	 xmm1, DWORD PTR [esi+236]
  0026c	f3 0f 5c c2	 subss	 xmm0, xmm2
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 350  : 			SetRange(fRange);

  00270	51		 push	 ecx
  00271	8b ce		 mov	 ecx, esi
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 68   : 		float fPercentage = (fcurTime - m_fStartTime) / (m_fEndTime - m_fStartTime);

  00273	f3 0f 5e e0	 divss	 xmm4, xmm0

; 69   : 		*pValue = m_SourceValue + (m_TargetValue - m_SourceValue) * fPercentage;

  00277	f3 0f 10 86 f0
	00 00 00	 movss	 xmm0, DWORD PTR [esi+240]
  0027f	f3 0f 5c c1	 subss	 xmm0, xmm1
  00283	f3 0f 59 e0	 mulss	 xmm4, xmm0
  00287	f3 0f 58 e1	 addss	 xmm4, xmm1
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 350  : 			SetRange(fRange);

  0028b	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  00290	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
  00295	5e		 pop	 esi

; 353  : }

  00296	8b e5		 mov	 esp, ebp
  00298	5d		 pop	 ebp
  00299	c3		 ret	 0
$LN111@Update:
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\Util.h

; 63   : 		if (fcurTime <= m_fStartTime)

  0029a	f3 0f 10 65 fc	 movss	 xmm4, DWORD PTR _fRange$7[ebp]
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 350  : 			SetRange(fRange);

  0029f	51		 push	 ecx
  002a0	8b ce		 mov	 ecx, esi
  002a2	f3 0f 11 24 24	 movss	 DWORD PTR [esp], xmm4
  002a7	e8 00 00 00 00	 call	 ?SetRange@CLight@@QAEXM@Z ; CLight::SetRange
$LN10@Update:
  002ac	5e		 pop	 esi

; 353  : }

  002ad	8b e5		 mov	 esp, ebp
  002af	5d		 pop	 ebp
  002b0	c3		 ret	 0
?Update@CLight@@QAEXXZ ENDP				; CLight::Update
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?Clear@CLight@@QAEXXZ
_TEXT	SEGMENT
?Clear@CLight@@QAEXXZ PROC				; CLight::Clear, COMDAT
; _this$ = ecx

; 192  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 193  : 	if (m_LightID)

  00003	83 7e 08 00	 cmp	 DWORD PTR [esi+8], 0
  00007	74 07		 je	 SHORT $LN2@Clear

; 194  : 	{
; 195  : 		SetDeviceLight(FALSE);

  00009	6a 00		 push	 0
  0000b	e8 00 00 00 00	 call	 ?SetDeviceLight@CLight@@QAEXH@Z ; CLight::SetDeviceLight
$LN2@Clear:

; 196  : 	}
; 197  : 	Initialize();

  00010	8b ce		 mov	 ecx, esi
  00012	5e		 pop	 esi
  00013	e9 00 00 00 00	 jmp	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize
?Clear@CLight@@QAEXXZ ENDP				; CLight::Clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ?Initialize@CLight@@QAEXXZ
_TEXT	SEGMENT
?Initialize@CLight@@QAEXXZ PROC				; CLight::Initialize, COMDAT
; _this$ = ecx

; 178  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 179  : 	m_LightID	= 0;
; 180  : 	m_isEdited	= TRUE;
; 181  : 	m_fDistance	= 0.0f;
; 182  : 
; 183  : 	memset(&m_d3dLight, 0, sizeof(m_d3dLight));

  00004	6a 68		 push	 104			; 00000068H
  00006	6a 00		 push	 0
  00008	8d 77 0c	 lea	 esi, DWORD PTR [edi+12]
  0000b	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00012	56		 push	 esi
  00013	c7 47 74 01 00
	00 00		 mov	 DWORD PTR [edi+116], 1
  0001a	c7 47 78 00 00
	00 00		 mov	 DWORD PTR [edi+120], 0
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  : 
; 185  : 	m_d3dLight.Type			= D3DLIGHT_POINT;
; 186  : 	m_d3dLight.Attenuation0	= 0.0f;

  00029	c7 47 60 00 00
	00 00		 mov	 DWORD PTR [edi+96], 0

; 187  : 	m_d3dLight.Attenuation1	= 1.0f;

  00030	c7 47 64 00 00
	80 3f		 mov	 DWORD PTR [edi+100], 1065353216 ; 3f800000H

; 188  : 	m_d3dLight.Attenuation2	= 0.0f;

  00037	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  0003e	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 189  : }

  00046	c3		 ret	 0
?Initialize@CLight@@QAEXXZ ENDP				; CLight::Initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ??1CLight@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CLight@@UAE@XZ PROC					; CLight::~CLight, COMDAT
; _this$ = ecx

; 173  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1CLight@@UAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0002b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@

; 174  : 	Clear();

  00032	e8 00 00 00 00	 call	 ?Clear@CLight@@QAEXXZ	; CLight::Clear

; 175  : }

  00037	8b ce		 mov	 ecx, esi
  00039	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
  00040	e8 00 00 00 00	 call	 ??1CGraphicBase@@UAE@XZ	; CGraphicBase::~CGraphicBase
  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5e		 pop	 esi
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c3		 ret	 0
  00055	cc		 int	 3
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CLight@@UAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1CLight@@UAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1CLight@@UAE@XZ ENDP					; CLight::~CLight
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.h
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp
;	COMDAT ??0CLight@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLight@@QAE@XZ PROC					; CLight::CLight, COMDAT
; _this$ = ecx

; 168  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000a	e8 00 00 00 00	 call	 ??0CGraphicBase@@QAE@XZ	; CGraphicBase::CGraphicBase
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.h

; 22   : 	CLightBase() {};

  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLightBase@@6B@
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.cpp

; 169  : 	Initialize();

  00016	8b ce		 mov	 ecx, esi
  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLight@@6BCGraphicBase@@@
  0001e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], OFFSET ??_7CLight@@6BCLightBase@@@
  00025	e8 00 00 00 00	 call	 ?Initialize@CLight@@QAEXXZ ; CLight::Initialize

; 170  : }

  0002a	8b c6		 mov	 eax, esi
  0002c	5e		 pop	 esi
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??0CLight@@QAE@XZ ENDP					; CLight::CLight
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GCLightBase@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLightBase@@UAEPAXI@Z PROC				; CLightBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7CLightBase@@6B@
  00010	74 0b		 je	 SHORT $LN4@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GCLightBase@@UAEPAXI@Z ENDP				; CLightBase::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\flourine\Desktop\Xantios\client-src\Code\EterLib\GrpLightManager.h
;	COMDAT ??1CLightBase@@UAE@XZ
_TEXT	SEGMENT
??1CLightBase@@UAE@XZ PROC				; CLightBase::~CLightBase, COMDAT
; _this$ = ecx

; 23   : 	virtual ~CLightBase() {};

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7CLightBase@@6B@
  00006	c3		 ret	 0
??1CLightBase@@UAE@XZ ENDP				; CLightBase::~CLightBase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 127  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 128  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 129  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 130  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 77   :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 131  :         _Throw_bad_array_new_length(); // add overflow
; 132  :     }
; 133  : 
; 134  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00017	8b c8		 mov	 ecx, eax

; 77   :         return ::operator new(_Bytes);

  00019	83 c4 04	 add	 esp, 4

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 0b		 je	 SHORT $LN7@Allocate_m

; 136  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00023	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 137  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00026	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 138  : 
; 139  : #ifdef _DEBUG
; 140  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 141  : #endif // _DEBUG
; 142  :     return _Ptr;
; 143  : }

  00029	5d		 pop	 ebp
  0002a	c3		 ret	 0
$LN7@Allocate_m:

; 135  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002b	e9 00 00 00 00	 jmp	 __invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 418  :     _Xlength_error("map/set too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Throw_tree:
  0000a	cc		 int	 3
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 323  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 324  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN12@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN12@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 141  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 142  :     }

  00003	8b c1		 mov	 eax, ecx

; 65   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 66   :     {
; 67   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 141  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 142  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN9@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 72   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 71   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 89   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 90   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN6@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN6@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 96   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 91   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.34.31933\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 72   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 74   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 10	 mov	 esi, DWORD PTR ___n$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 16		 je	 SHORT $LN6@vector
  0000b	53		 push	 ebx
  0000c	8b 5d 14	 mov	 ebx, DWORD PTR ___f$[ebp]
  0000f	57		 push	 edi
  00010	8b 7d 08	 mov	 edi, DWORD PTR ___t$[ebp]
$LL2@vector:
  00013	8b cf		 mov	 ecx, edi
  00015	ff d3		 call	 ebx
  00017	03 7d 0c	 add	 edi, DWORD PTR ___s$[ebp]
  0001a	83 ee 01	 sub	 esi, 1
  0001d	75 f4		 jne	 SHORT $LL2@vector
  0001f	5f		 pop	 edi
  00020	5b		 pop	 ebx
$LN6@vector:
  00021	5e		 pop	 esi
  00022	5d		 pop	 ebp
  00023	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
